
;; Function regs_query_register_name (regs_query_register_name)[0:1537]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


regs_query_register_name

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 24[cc]
;;  ref usage 	r0={2d,3u} r1={2d,2u} r2={2d,2u} r3={3d,3u,2d} r12={2d,2u} r13={1d,5u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 37{15d,20u,2e} in 14{14 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]

( 4 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]

( 3 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 97 to worklist
  Adding insn 44 to worklist
  Adding insn 51 to worklist
  Adding insn 95 to worklist
  Adding insn 64 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [r0] 13 [sp] 14 [lr]
  Adding insn 58 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 43 to worklist
  Adding insn 41 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 50 to worklist
  Adding insn 42 to worklist
  Adding insn 48 to worklist
  Adding insn 40 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 47 to worklist
  Adding insn 35 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 35 to 97 -- after reload
;;   ======================================================

;;	  0-->    35 r3=0x0                            :cortex_a8_default
;;	  0-->    47 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    97 pc=L45                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 35
;;   new tail = 97

;;   ======================================================
;;   -- basic block 3 from 41 to 44 -- after reload
;;   ======================================================

;;	  0-->    41 ip=[ip+0x4]                       :cortex_a8_load_store_1
;;	  2-->    43 cc=cmp(ip,r0)                     :cortex_a8_default
;;	  4-->    44 pc={(cc==0x0)?L52:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 41
;;   new tail = 44

;;   ======================================================
;;   -- basic block 4 from 40 to 51 -- after reload
;;   ======================================================

;;	  0-->    48 r2=[r1+r3]                        :cortex_a8_load_store_1
;;	  0-->    40 ip=r1+r3                          :cortex_a8_default
;;	  1-->    42 r3=r3+0x8                         :cortex_a8_default
;;	  2-->    50 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->    51 pc={(cc!=0x0)?L49:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 40
;;   new tail = 51

;;   ======================================================
;;   -- basic block 5 from 58 to 95 -- after reload
;;   ======================================================

;;	  0-->    58 r0=r2                             :cortex_a8_default
;;	  0-->    64 use r0                            :nothing
;;	  0-->    95 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 58
;;   new tail = 95





regs_query_register_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 24[cc]
;;  ref usage 	r0={2d,3u} r1={2d,2u} r2={2d,2u} r3={3d,3u,2d} r12={2d,2u} r13={1d,5u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 37{15d,20u,2e} in 14{14 regular + 0 call} insns.
(note 30 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 30 93 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 93 33 32 2 NOTE_INSN_PROLOGUE_END)

(note 32 93 35 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 35 32 47 2 arch/arm/kernel/ptrace.c:111 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 47 35 97 2 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn:TI 97 47 98 2 arch/arm/kernel/ptrace.c:113 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 98 97 49)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [95.5%] 
(code_label 49 98 38 3 4 "" [1 uses])

(note 38 49 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 41 38 43 3 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [orig:164 D.26791 ] [164])
        (mem/s/j:SI (plus:SI (reg:SI 12 ip [168])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 41 44 3 arch/arm/kernel/ptrace.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:164 D.26791 ] [164])
            (reg/v:SI 0 r0 [orig:166 offset ] [166]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:164 D.26791 ] [164])
        (nil)))

(jump_insn:TI 44 43 45 3 arch/arm/kernel/ptrace.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [4.5%]  (loop_exit)
;; Succ edge  4 [95.5%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 45 44 46 4 2 "" [1 uses])

(note 46 45 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 46 40 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [171])
                (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 40 48 42 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [168])
        (plus:SI (reg/f:SI 1 r1 [171])
            (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))
        (nil)))

(insn:TI 42 40 50 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 50 42 51 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 51 50 52 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  5 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (loop_exit)
;; Pred edge  4 [4.5%]  (fallthru,loop_exit)
(code_label 52 51 53 5 3 "" [1 uses])

(note 53 52 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 53 64 5 arch/arm/kernel/ptrace.c:117 (set (reg/i:SI 0 r0)
        (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
        (nil)))

(insn 64 58 94 5 arch/arm/kernel/ptrace.c:117 (use (reg/i:SI 0 r0)) -1 (nil))

(note 94 64 95 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 95 94 96 5 arch/arm/kernel/ptrace.c:117 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 96 95 91)

(note 91 96 92 NOTE_INSN_DELETED)

(note 92 91 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_within_kernel_stack (regs_within_kernel_stack)[0:1538]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 35 -- after reload
;;   ======================================================

;;	  0-->     7 r3=[r0+0x34]                      :cortex_a8_load_store_1
;;	  2-->     8 r3=r1^r3                          :cortex_a8_default
;;	  3-->    29 r0=r3&0xffffffffffffe03f          :cortex_a8_default
;;	  4-->    30 r0=r0&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->    19 {r0=r0==0x0;clobber cc;}          :cortex_a8_default
;;	  5-->    25 use r0                            :nothing
;;	  5-->    35 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 7
;;   new tail = 35





regs_within_kernel_stack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 24[cc]
;;  ref usage 	r0={4d,5u} r1={1d,1u} r2={1d} r3={3d,2u} r13={1d,2u} r14={1d,1u} r24={1d} 
;;    total ref usage 23{12d,11u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 33 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 33 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 7 2 NOTE_INSN_DELETED)

(insn:TI 7 14 8 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn:TI 8 7 29 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [137])
        (xor:SI (reg:SI 1 r1 [ addr ])
            (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [ addr ])
        (nil)))

(insn:TI 29 8 30 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(insn:TI 30 29 19 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 0 r0 [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 19 30 25 2 arch/arm/kernel/ptrace.c:131 (parallel [
            (set (reg/i:SI 0 r0)
                (eq:SI (reg:SI 0 r0 [139])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 25 19 34 2 arch/arm/kernel/ptrace.c:131 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 25 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 35 34 36 2 arch/arm/kernel/ptrace.c:131 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 31)

(note 31 36 32 NOTE_INSN_DELETED)

(note 32 31 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_get_kernel_stack_nth (regs_get_kernel_stack_nth)[0:1539]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 48 -- after reload
;;   ======================================================

;;	  0-->     7 r3=[r0+0x34]                      :cortex_a8_load_store_1
;;	  2-->    10 r2=r1*0x4+r3                      :cortex_a8_default
;;	  3-->    11 r2=r2^r3                          :cortex_a8_default
;;	  4-->    41 r2=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  5-->    42 r2=r2&0xffffffffffffffc0          :cortex_a8_default
;;	  6-->    14 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  7-->    17 (cc) r0=0x0                       :cortex_a8_default
;;	  8-->    22 (!cc) r0=[r1*0x4+r3]              :cortex_a8_load_store_1
;;	  8-->    35 use r0                            :nothing
;;	  9-->    48 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 9
;;   new head = 7
;;   new tail = 48





regs_get_kernel_stack_nth

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d,2u} r2={5d,4u} r3={2d,3u} r13={1d,2u} r14={1d,1u} r24={1d,2u} 
;;    total ref usage 33{14d,19u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 45 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 45 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 45 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 12 2 NOTE_INSN_DELETED)

(note 12 9 7 2 NOTE_INSN_DELETED)

(insn:TI 7 12 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:244 (set (reg:SI 3 r3 [orig:134 D.27412 ] [134])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 7 11 2 arch/arm/kernel/ptrace.c:145 (set (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
        (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 270 {*arith_shiftsi} (nil))

(insn:TI 11 10 41 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [141])
        (xor:SI (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 96 {*arm_xorsi3} (nil))

(insn:TI 41 11 42 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [141])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 42 41 14 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [142])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 14 42 17 2 arch/arm/kernel/ptrace.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [142])
        (nil)))

(insn:TI 17 14 22 2 arch/arm/kernel/ptrace.c:149 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 22 17 35 2 arch/arm/kernel/ptrace.c:147 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
            (mem:SI (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                        (const_int 4 [0x4]))
                    (reg:SI 3 r3 [orig:134 D.27412 ] [134])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.27412 ] [134])
            (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:139 n ] [139])
                (nil)))))

(insn 35 22 48 2 arch/arm/kernel/ptrace.c:150 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 48 35 47 2 arch/arm/kernel/ptrace.c:150 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 47 48 43)

(note 43 47 44 NOTE_INSN_DELETED)

(note 44 43 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_disable (ptrace_disable)[0:1542]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 17 to 17 -- after reload
;;   ======================================================

;;	  0-->    17 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 17
;;   new tail = 17





ptrace_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 15 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 15 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 3 17 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 17 16 18 2 arch/arm/kernel/ptrace.c:192 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 18 17 13)

(note 13 18 14 NOTE_INSN_DELETED)

(note 14 13 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_write_user (ptrace_write_user)[0:1547]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 17 (  1.7)


ptrace_write_user

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={3d,6u} r2={7d,6u} r3={9d,10u} r4={4d,6u,1d} r5={2d,4u} r6={2d,4u} r12={1d} r13={3d,16u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 228{159d,68u,1e} in 41{40 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 9 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 2 )->[3]->( 4 9 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 3 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 )->[5]->( 7 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 6 )->[7]->( 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 6 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 3 2 7 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 20 to worklist
  Adding insn 111 to worklist
  Adding insn 28 to worklist
  Adding insn 55 to worklist
  Adding insn 51 to worklist
  Adding insn 45 to worklist
  Adding insn 59 to worklist
  Adding insn 74 to worklist
  Adding insn 117 to worklist
  Adding insn 77 to worklist
  Adding insn 115 to worklist
  Adding insn 96 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 78 to worklist
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 83 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 73 to worklist
  Adding insn 72 to worklist
  Adding insn 68 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
processing block 5 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 58 to worklist
  Adding insn 57 to worklist
processing block 4 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 110 to worklist
  Adding insn 43 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 44 to worklist
  Adding insn 42 to worklist
  Adding insn 35 to worklist
  Adding insn 36 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 30 to worklist
  Adding insn 27 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 22 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 107 to worklist
  Adding insn 4 to worklist
  Adding insn 106 to worklist
  Adding insn 112 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 14 count 18 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 111 to 20 -- after reload
;;   ======================================================

;;	  0-->   106 {cc=cmp(r1&0x3,0x0);r3=r1&0x3;}   :cortex_a8_default
;;	  1-->   107 r3={(cc==0x0)?r3:0x1}             :cortex_a8_default
;;	  2-->    18 {r3=geu(r1,0x128)|r3;clobber cc;} :cortex_a8_default
;;	  3-->    19 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   111 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  5-->    22 (cc) r0=0xfffffffffffffffb        :cortex_a8_default
;;	  6-->   112 sp=sp-0x48                        :cortex_a8_default
;;	  6-->     4 r6=r2                             :cortex_a8_default
;;	  7-->    20 pc={(cc!=0x0)?L84:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 111
;;   new tail = 20

;;   ======================================================
;;   -- basic block 3 from 27 to 28 -- after reload
;;   ======================================================

;;	  0-->    27 cc=cmp(r1,0x47)                   :cortex_a8_default
;;	  1-->    30 (gtu(cc,0x0)) r0=r3               :cortex_a8_default
;;	  2-->    28 pc={(gtu(cc,0x0))?L84:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 27
;;   new tail = 28

;;   ======================================================
;;   -- basic block 4 from 36 to 55 -- after reload
;;   ======================================================

;;	  0-->    36 r4=[r0+0x4]                       :cortex_a8_load_store_1
;;	  0-->    35 r5=r1 0>>0x2                      :cortex_a8_default
;;	  1-->    44 r2=0x48                           :cortex_a8_default
;;	  1-->    42 r0=sp                             :cortex_a8_default
;;	  2-->    37 r4=r4+0x1f80                      :cortex_a8_default
;;	  3-->    38 r4=r4+0x30                        :cortex_a8_default
;;	  4-->    43 r1=r4                             :cortex_a8_default
;;	  5-->    45 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  5-->   110 r2=sp+0x48                        :cortex_a8_default
;;	  6-->    49 r3=r5*0x4+r2                      :cortex_a8_default
;;	  8-->    51 [r3-0x48]=r6                      :cortex_a8_load_store_1
;;	  9-->    52 r3=[sp+0x40]                      :cortex_a8_load_store_1
;;	 11-->    54 cc=cmp(zxt(r3,0x1,0x7),0x0)       :cortex_a8_default
;;	 13-->    55 pc={(cc!=0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 13
;;   new head = 36
;;   new tail = 55

;;   ======================================================
;;   -- basic block 5 from 57 to 59 -- after reload
;;   ======================================================

;;	  0-->    57 r3=r3&0x1f                        :cortex_a8_default
;;	  1-->    58 cc=cmp(r3,0x10)                   :cortex_a8_default
;;	  3-->    59 pc={(cc==0x0)?L75:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 57
;;   new tail = 59

;;   ======================================================
;;   -- basic block 6 from 64 to 74 -- after reload
;;   ======================================================

;;	  0-->    64 r2=`elf_hwcap'                    :cortex_a8_load_store_1
;;	  3-->    65 r2=[r2]                           :cortex_a8_load_store_1
;;	  5-->    68 r2=zxt(r2,0x1,0x3)                :cortex_a8_default
;;	  6-->    72 {r3=r3==0x0&r2;clobber cc;}       :cortex_a8_default
;;	  7-->    73 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  9-->    74 pc={(cc==0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 64
;;   new tail = 74

;;   ======================================================
;;   -- basic block 7 from 77 to 117 -- after reload
;;   ======================================================

;;	  0-->    77 [r5*0x4+r4]=r6                    :cortex_a8_load_store_1
;;	  0-->    78 r0=0x0                            :cortex_a8_default
;;	  1-->   117 pc=L84                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 77
;;   new tail = 117

;;   ======================================================
;;   -- basic block 8 from 83 to 83 -- after reload
;;   ======================================================

;;	  0-->    83 r0=0xffffffffffffffea             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 83
;;   new tail = 83

;;   ======================================================
;;   -- basic block 9 from 96 to 115 -- after reload
;;   ======================================================

;;	  0-->    96 use r0                            :nothing
;;	  0-->   115 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 96
;;   new tail = 115





ptrace_write_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={3d,6u} r2={7d,6u} r3={9d,10u} r4={4d,6u,1d} r5={2d,4u} r6={2d,4u} r12={1d} r13={3d,16u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 228{159d,68u,1e} in 41{40 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 12 2 NOTE_INSN_DELETED)

(note 12 9 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 106 2 NOTE_INSN_DELETED)

(insn:TI 106 17 107 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [144])
                (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 107 106 18 2 arch/arm/kernel/ptrace.c:281 (set (reg:SI 3 r3 [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [144])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 18 107 19 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:SI 3 r3 [150])
                (ior:SI (geu:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 296 [0x128]))
                    (reg:SI 3 r3 [144])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 19 18 111 2 arch/arm/kernel/ptrace.c:281 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 111 19 22 2 arch/arm/kernel/ptrace.c:280 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn:TI 22 111 112 2 arch/arm/kernel/ptrace.c:282 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
            (const_int -5 [0xfffffffffffffffb]))) 2345 {neon_vornv2di+78} (nil))

(insn/f:TI 112 22 113 2 arch/arm/kernel/ptrace.c:280 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 113 112 4 2 NOTE_INSN_PROLOGUE_END)

(insn 4 113 20 2 arch/arm/kernel/ptrace.c:280 (set (reg/v:SI 6 r6 [orig:141 val ] [141])
        (reg:SI 2 r2 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ val ])
        (nil)))

(jump_insn:TI 20 4 26 2 arch/arm/kernel/ptrace.c:281 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 9)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  9 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 26 20 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 30 3 arch/arm/kernel/ptrace.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 30 27 28 3 arch/arm/kernel/ptrace.c:285 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
            (reg:SI 3 r3 [150]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (nil)))

(jump_insn:TI 28 30 34 3 arch/arm/kernel/ptrace.c:284 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  9 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 34 28 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 39 34 48 4 NOTE_INSN_DELETED)

(note 48 39 50 4 NOTE_INSN_DELETED)

(note 50 48 53 4 NOTE_INSN_DELETED)

(note 53 50 36 4 NOTE_INSN_DELETED)

(insn:TI 36 53 35 4 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
        (nil)))

(insn 35 36 44 4 arch/arm/kernel/ptrace.c:287 (set (reg:SI 5 r5 [orig:137 D.26920 ] [137])
        (lshiftrt:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:140 off ] [140])
        (nil)))

(insn:TI 44 35 42 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 42 44 37 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 37 42 38 4 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [152])
        (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 38 37 43 4 arch/arm/kernel/ptrace.c:172 (set (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
        (plus:SI (reg/f:SI 4 r4 [152])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8112 [0x1fb0]))
        (nil)))

(insn:TI 43 38 45 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 45 43 110 4 arch/arm/kernel/ptrace.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 110 45 49 4 arch/arm/kernel/ptrace.c:176 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 72 [0x48]))) 4 {*arm_addsi3} (nil))

(insn:TI 49 110 51 4 arch/arm/kernel/ptrace.c:176 (set (reg:SI 3 r3 [159])
        (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                (const_int 4 [0x4]))
            (reg:SI 2 r2))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 51 49 52 4 arch/arm/kernel/ptrace.c:176 (set (mem/s/j:SI (plus:SI (reg:SI 3 r3 [159])
                (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [159])
        (nil)))

(insn:TI 52 51 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 3 r3 [orig:136 D.27452 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 54 52 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 58 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 3 r3 [orig:135 mode ] [135])
        (and:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 58 57 59 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 59 58 60 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [28.0%] 
;; Succ edge  6 [72.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  5 [72.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(note 62 61 66 6 NOTE_INSN_DELETED)

(note 66 62 70 6 NOTE_INSN_DELETED)

(note 70 66 71 6 NOTE_INSN_DELETED)

(note 71 70 64 6 NOTE_INSN_DELETED)

(insn:TI 64 71 65 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 2 r2 [164])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn:TI 65 64 68 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
        (mem/c/i:SI (reg/f:SI 2 r2 [164]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 68 65 72 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [168])
        (zero_extract:SI (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 72 68 73 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 3 r3 [172])
                (and:SI (eq:SI (reg/v:SI 3 r3 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 2 r2 [168])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 2 r2 [168])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn:TI 73 72 74 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [172])
        (nil)))

(jump_insn:TI 74 73 75 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [28.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
(code_label 75 74 76 7 22 "" [1 uses])

(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 76 78 7 arch/arm/kernel/ptrace.c:179 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) [0 <variable>.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 117 7 arch/arm/kernel/ptrace.c:180 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 117 78 118 7 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 118 117 81)

;; Start of basic block ( 4 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  6 [50.0%] 
(code_label 81 118 82 8 21 "" [2 uses])

(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 82 84 8 arch/arm/kernel/ptrace.c:173 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 3 2 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  3 [39.0%] 
;; Pred edge  2 [39.0%] 
;; Pred edge  7 [100.0%] 
(code_label 84 83 85 9 19 "" [3 uses])

(note 85 84 96 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 96 85 114 9 arch/arm/kernel/ptrace.c:288 (use (reg/i:SI 0 r0)) -1 (nil))

(note 114 96 115 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 115 114 116 9 arch/arm/kernel/ptrace.c:288 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 116 115 108)

(note 108 116 109 NOTE_INSN_DELETED)

(note 109 108 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function task_user_regset_view (task_user_regset_view)[0:1563]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 12 to 26 -- after reload
;;   ======================================================

;;	  0-->    12 r0=const(`*.LANCHOR0'+0x98)       :cortex_a8_load_store_1
;;	  0-->    18 use r0                            :nothing
;;	  1-->    26 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 12
;;   new tail = 26





task_user_regset_view

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 12{7d,5u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 24 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 24 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 12 2 NOTE_INSN_DELETED)

(insn:TI 12 7 18 2 arch/arm/kernel/ptrace.c:786 (set (reg/i:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn 18 12 25 2 arch/arm/kernel/ptrace.c:786 (use (reg/i:SI 0 r0)) -1 (nil))

(note 25 18 26 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 26 25 27 2 arch/arm/kernel/ptrace.c:786 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 27 26 22)

(note 22 27 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_break_init (ptrace_break_init)[0:1545] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 32 to 35 -- after reload
;;   ======================================================

;;	  0-->    32 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     5 r4=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->     6 r0=r4                             :cortex_a8_default
;;	  4-->     7 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  4-->    10 r0=r4+0x1c                        :cortex_a8_default
;;	  5-->    11 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  5-->    14 r0=r4+0x38                        :cortex_a8_default
;;	  6-->    15 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  6-->    20 r0=0x0                            :cortex_a8_default
;;	  7-->    26 use r0                            :nothing
;;	  7-->    35 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 32
;;   new tail = 35





ptrace_break_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r3={4d} r4={2d,5u} r12={3d} r13={2d,6u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 382{364d,18u,0e} in 11{8 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 13 2 NOTE_INSN_DELETED)

(note 13 9 16 2 NOTE_INSN_DELETED)

(note 16 13 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 16 33 2 arch/arm/kernel/ptrace.c:240 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -8 [0xfffffffffffffff8])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 33 32 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 33 6 2 arch/arm/kernel/ptrace.c:241 (set (reg/f:SI 4 r4 [134])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/ptrace.c:241 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn:TI 7 6 10 2 arch/arm/kernel/ptrace.c:241 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 10 7 11 2 arch/arm/kernel/ptrace.c:242 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn:TI 11 10 14 2 arch/arm/kernel/ptrace.c:242 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 11 15 2 arch/arm/kernel/ptrace.c:243 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 56 [0x38])))
        (nil)))

(call_insn:TI 15 14 20 2 arch/arm/kernel/ptrace.c:243 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 15 26 2 arch/arm/kernel/ptrace.c:245 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 20 34 2 arch/arm/kernel/ptrace.c:245 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 26 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 35 34 36 2 arch/arm/kernel/ptrace.c:245 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 30)

(note 30 36 31 NOTE_INSN_DELETED)

(note 31 30 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function syscall_trace (syscall_trace)[0:1565]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 108 to 14 -- after reload
;;   ======================================================

;;	  0-->   108 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->   106 r3=sp                             :cortex_a8_default
;;	  2-->   102 r4=r3&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->     3 r5=r1                             :cortex_a8_default
;;	  3-->   103 r4=r4&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->     2 r3=r0                             :cortex_a8_default
;;	  5-->    11 r1=[r4]                           :cortex_a8_load_store_1
;;	  7-->    13 cc=cmp(zxt(r1,0x1,0x8),0x0)       :cortex_a8_default
;;	  9-->    14 pc={(cc==0x0)?L82:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 108
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 19 to 23 -- after reload
;;   ======================================================

;;	  0-->    19 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	  3-->    20 r0=[r1+0x10]                      :cortex_a8_load_store_1
;;	  5-->    22 cc=cmp(zxt(r0,0x1,0x0),0x0)       :cortex_a8_default
;;	  7-->    23 pc={(cc==0x0)?L82:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 19
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 30 to 56 -- after reload
;;   ======================================================

;;	  0-->    30 [r4+0x4c]=r2                      :cortex_a8_load_store_1
;;	  1-->    25 r6=[r5+0x30]                      :cortex_a8_load_store_1
;;	  2-->    26 [r5+0x30]=r3                      :cortex_a8_load_store_1
;;	  3-->    35 r3=[r1+0x10]                      :cortex_a8_load_store_1
;;	  5-->    37 cc=cmp(zxt(r3,0x1,0x2),0x0)       :cortex_a8_default
;;	  6-->    48 r0={(cc!=0x0)?0x85:0x5}           :cortex_a8_default
;;	  7-->    49 call [`ptrace_notify']            :cortex_a8_issue_branch
;;	  7-->    53 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	 10-->    54 r0=[r1+0x1fc]                     :cortex_a8_load_store_1
;;	 12-->    55 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 14-->    56 pc={(cc==0x0)?L75:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 14
;;   new head = 30
;;   new tail = 56

;;   ======================================================
;;   -- basic block 5 from 67 to 74 -- after reload
;;   ======================================================

;;	  0-->    67 r2=0x1                            :cortex_a8_default
;;	  1-->    68 r0=call [`send_sig']              :cortex_a8_issue_branch
;;	  1-->    72 r3=[r4+0xc]                       :cortex_a8_load_store_1
;;	  2-->    73 r2=0x0                            :cortex_a8_default
;;	  4-->    74 [r3+0x1fc]=r2                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 67
;;   new tail = 74

;;   ======================================================
;;   -- basic block 6 from 107 to 81 -- after reload
;;   ======================================================

;;	  0-->   107 r2=sp                             :cortex_a8_default
;;	  0-->    77 [r5+0x30]=r6                      :cortex_a8_load_store_1
;;	  1-->   100 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   101 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    81 r2=[r3+0x4c]                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 107
;;   new tail = 81

;;   ======================================================
;;   -- basic block 7 from 88 to 111 -- after reload
;;   ======================================================

;;	  0-->    88 r0=r2                             :cortex_a8_default
;;	  0-->    94 use r0                            :nothing
;;	  0-->   111 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 88
;;   new tail = 111





syscall_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={6d,6u,1d} r2={7d,5u} r3={9d,6u} r4={3d,8u} r5={2d,5u} r6={2d,3u} r12={2d} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 328{269d,58u,1e} in 37{35 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 12 2 NOTE_INSN_DELETED)

(note 12 9 108 2 NOTE_INSN_DELETED)

(insn/f:TI 108 12 109 2 arch/arm/kernel/ptrace.c:905 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 109 108 106 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 106 109 102 2 include/linux/thread_info.h:84 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 102 106 3 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 3 102 103 2 arch/arm/kernel/ptrace.c:905 (set (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn:TI 103 3 2 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 103 11 2 arch/arm/kernel/ptrace.c:905 (set (reg/v:SI 3 r3 [orig:147 why ] [147])
        (reg:SI 0 r0 [ why ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ why ])
        (nil)))

(insn:TI 11 2 13 2 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:142 D.27480 ] [142])
        (mem/v:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 11 14 2 arch/arm/kernel/ptrace.c:908 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:142 D.27480 ] [142])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:142 D.27480 ] [142])
        (nil)))

(jump_insn:TI 14 13 15 2 arch/arm/kernel/ptrace.c:908 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 15 14 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 15 19 3 NOTE_INSN_DELETED)

(insn:TI 19 21 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 19 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])
        (nil)))

(insn:TI 22 20 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
        (nil)))

(jump_insn:TI 23 22 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  4 [61.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 24 23 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 36 24 99 4 NOTE_INSN_DELETED)

(note 99 36 30 4 NOTE_INSN_DELETED)

(insn:TI 30 99 25 4 arch/arm/kernel/ptrace.c:920 (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (nil)))

(insn:TI 25 30 26 4 arch/arm/kernel/ptrace.c:917 (set (reg/v:SI 6 r6 [orig:144 ip ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 26 25 35 4 arch/arm/kernel/ptrace.c:918 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 3 r3 [orig:147 why ] [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:147 why ] [147])
        (nil)))

(insn:TI 35 26 37 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
        (nil)))

(insn:TI 37 35 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
        (nil)))

(insn:TI 48 37 49 4 arch/arm/kernel/ptrace.c:924 discrim 3 (set (reg:SI 0 r0)
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 133 [0x85])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(call_insn:TI 49 48 53 4 arch/arm/kernel/ptrace.c:924 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_notify") [flags 0x41] <function_decl 0x1109c700 ptrace_notify>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 53 49 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 54 53 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 56 55 57 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 57 56 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 67 57 68 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 68 67 72 5 arch/arm/kernel/ptrace.c:932 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig") [flags 0x41] <function_decl 0x10f01b80 send_sig>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 72 68 73 5 arch/arm/kernel/ptrace.c:933 (set (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 73 72 74 5 arch/arm/kernel/ptrace.c:933 (set (reg:SI 2 r2 [176])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 74 73 75 5 arch/arm/kernel/ptrace.c:933 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])
        (reg:SI 2 r2 [176])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
        (expr_list:REG_DEAD (reg:SI 2 r2 [176])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 75 74 76 6 38 "" [1 uses])

(note 76 75 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 79 76 107 6 NOTE_INSN_DELETED)

(insn:TI 107 79 77 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 107 100 6 arch/arm/kernel/ptrace.c:935 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 6 r6 [orig:144 ip ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 100 77 101 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 101 100 81 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 3 r3 [177])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 81 101 82 6 arch/arm/kernel/ptrace.c:937 (set (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [177])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [177])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 82 81 83 7 35 "" [2 uses])

(note 83 82 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 88 83 94 7 arch/arm/kernel/ptrace.c:938 (set (reg/i:SI 0 r0)
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (nil)))

(insn 94 88 110 7 arch/arm/kernel/ptrace.c:938 (use (reg/i:SI 0 r0)) -1 (nil))

(note 110 94 111 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 111 110 112 7 arch/arm/kernel/ptrace.c:938 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 112 111 104)

(note 104 112 105 NOTE_INSN_DELETED)

(note 105 104 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_set (vfp_set)[0:1562]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 34 (  1.8)


vfp_set

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,14u} r1={17d,7u} r2={16d,8u} r3={11d,2u} r4={2d,6u} r5={4d,11u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={2d,2u} r10={3d,5u} r12={9d} r13={3d,37u,4d} r14={10d,2u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,9u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1246{1115d,127u,4e} in 70{61 regular + 9 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 14 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 2 )->[3]->( 4 17 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 4 )->[6]->( 15 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 7 5 )->[8]->( 14 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 8 )->[9]->( 10 17 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 )->[10]->( )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 17 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[12]->( 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[13]->( 15 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 12 2 8 13 18 )->[14]->( 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 13 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 15 14 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 9 )->[17]->( 11 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 17 )->[18]->( 14 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 16 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 21 to worklist
  Adding insn 18 to worklist
  Adding insn 158 to worklist
  Adding insn 24 to worklist
  Adding insn 31 to worklist
  Adding insn 164 to worklist
  Adding insn 39 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 59 to worklist
  Adding insn 63 to worklist
  Adding insn 69 to worklist
  Adding insn 79 to worklist
  Adding insn 166 to worklist
  Adding insn 87 to worklist
  Adding insn 99 to worklist
  Adding insn 96 to worklist
  Adding insn 168 to worklist
  Adding insn 113 to worklist
  Adding insn 110 to worklist
  Adding insn 103 to worklist
  Adding insn 162 to worklist
  Adding insn 141 to worklist
  Adding insn 130 to worklist
  Adding insn 171 to worklist
Finished finding needed instructions:
processing block 16 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 14 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 114 to worklist
  Adding insn 112 to worklist
  Adding insn 107 to worklist
  Adding insn 109 to worklist
  Adding insn 108 to worklist
  Adding insn 102 to worklist
processing block 10 lr out =  13 [sp]
  Adding insn 68 to worklist
  Adding insn 67 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 85 to worklist
processing block 15 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 119 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 98 to worklist
  Adding insn 94 to worklist
processing block 11 lr out =  0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 77 to worklist
  Adding insn 78 to worklist
  Adding insn 73 to worklist
  Adding insn 76 to worklist
  Adding insn 156 to worklist
  Adding insn 72 to worklist
processing block 18 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 129 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 62 to worklist
  Adding insn 61 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 58 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 41 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 54 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 51 to worklist
  Adding insn 48 to worklist
  Adding insn 47 to worklist
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 30 to worklist
  Adding insn 27 to worklist
  Adding insn 29 to worklist
  Adding insn 26 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 23 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 20 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 4 to worklist
  Adding insn 5 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 159 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 36 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 158 to 21 -- after reload
;;   ======================================================

;;	  0-->   158 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    11 r4=[r0+0x4]                       :cortex_a8_load_store_1
;;	  2-->   159 sp=sp-0x118                       :cortex_a8_default
;;	  2-->     5 r7=r3                             :cortex_a8_default
;;	  3-->     4 r5=r2                             :cortex_a8_default
;;	  3-->    15 r0=sp                             :cortex_a8_default
;;	  4-->    16 r1=r4+0x1b0                       :cortex_a8_default
;;	  4-->    17 r2=0x118                          :cortex_a8_default
;;	  5-->     6 r8=[sp+0x138]                     :cortex_a8_load_store_1
;;	  5-->    12 r9=sp                             :cortex_a8_default
;;	  6-->     7 sl=[sp+0x13c]                     :cortex_a8_load_store_1
;;	  6-->    18 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  7-->    20 cc=cmp(r7,0x0)                    :cortex_a8_default
;;	  9-->    21 pc={(cc==0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 158
;;   new tail = 21

;;   ======================================================
;;   -- basic block 3 from 23 to 24 -- after reload
;;   ======================================================

;;	  0-->    23 cc=cmp(r5,0xff)                   :cortex_a8_default
;;	  2-->    24 pc={(gtu(cc,0x0))?L125:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 23
;;   new tail = 24

;;   ======================================================
;;   -- basic block 4 from 26 to 31 -- after reload
;;   ======================================================

;;	  0-->    26 r6=0x100-r5                       :cortex_a8_default
;;	  0-->    29 r0=sp+r5                          :cortex_a8_default
;;	  1-->    27 {r6=umin(r6,r7);clobber cc;}      :cortex_a8_default
;;	  1-->    30 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  3-->    31 pc={(cc==0x0)?L44:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 26
;;   new tail = 31

;;   ======================================================
;;   -- basic block 5 from 37 to 164 -- after reload
;;   ======================================================

;;	  0-->    37 r1=r8                             :cortex_a8_default
;;	  0-->    38 r2=r6                             :cortex_a8_default
;;	  1-->    41 r8=r8+r6                          :cortex_a8_default
;;	  1-->    39 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   164 pc=L55                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 37
;;   new tail = 164

;;   ======================================================
;;   -- basic block 6 from 47 to 52 -- after reload
;;   ======================================================

;;	  0-->    47 r1=sl                             :cortex_a8_default
;;	  0-->    48 r2=r6                             :cortex_a8_default
;;	  1-->    49 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 33-->    51 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    52 pc={(cc!=0x0)?L117:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 47
;;   new tail = 52

;;   ======================================================
;;   -- basic block 7 from 54 to 54 -- after reload
;;   ======================================================

;;	  0-->    54 sl=sl+r6                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 54
;;   new tail = 54

;;   ======================================================
;;   -- basic block 8 from 58 to 59 -- after reload
;;   ======================================================

;;	  0-->    58 {cc=cmp(r7-r6,0x0);r7=r7-r6;}     :cortex_a8_default
;;	  2-->    59 pc={(cc==0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 58
;;   new tail = 59

;;   ======================================================
;;   -- basic block 9 from 61 to 63 -- after reload
;;   ======================================================

;;	  0-->    61 r5=r5+r6                          :cortex_a8_default
;;	  1-->    62 cc=cmp(r5,0xff)                   :cortex_a8_default
;;	  3-->    63 pc={(gtu(cc,0x0))?L125:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 61
;;   new tail = 63

;;   ======================================================
;;   -- basic block 10 from 67 to 69 -- after reload
;;   ======================================================

;;	  0-->    67 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  0-->    68 r1=0x133                          :cortex_a8_default
;;	  1-->    69 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 67
;;   new tail = 69

;;   ======================================================
;;   -- basic block 11 from 72 to 79 -- after reload
;;   ======================================================

;;	  0-->    72 r2=0x104-r5                       :cortex_a8_default
;;	  0-->   156 r3=sp+0x118                       :cortex_a8_default
;;	  1-->    73 {r2=umin(r2,r7);clobber cc;}      :cortex_a8_default
;;	  1-->    78 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->    76 r5=r3+r5                          :cortex_a8_default
;;	  3-->    77 r0=r5-0x114                       :cortex_a8_default
;;	  3-->    79 pc={(cc==0x0)?L91:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 72
;;   new tail = 79

;;   ======================================================
;;   -- basic block 12 from 85 to 166 -- after reload
;;   ======================================================

;;	  0-->    85 r1=r8                             :cortex_a8_default
;;	  1-->    87 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  1-->   166 pc=L100                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 85
;;   new tail = 166

;;   ======================================================
;;   -- basic block 13 from 94 to 99 -- after reload
;;   ======================================================

;;	  0-->    94 r1=sl                             :cortex_a8_default
;;	  1-->    96 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 33-->    98 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    99 pc={(cc!=0x0)?L117:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 94
;;   new tail = 99

;;   ======================================================
;;   -- basic block 14 from 102 to 168 -- after reload
;;   ======================================================

;;	  0-->   102 r0=r4                             :cortex_a8_default
;;	  1-->   103 call [`vfp_sync_hwstate']         :cortex_a8_issue_branch
;;	  1-->   108 r1=sp                             :cortex_a8_default
;;	  2-->   109 r2=0x118                          :cortex_a8_default
;;	  2-->   107 r0=r4+0x1b0                       :cortex_a8_default
;;	  3-->   110 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  3-->   112 r0=r4                             :cortex_a8_default
;;	  4-->   113 call [`vfp_flush_hwstate']        :cortex_a8_issue_branch
;;	  4-->   114 r0=0x0                            :cortex_a8_default
;;	  5-->   168 pc=L120                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 102
;;   new tail = 168

;;   ======================================================
;;   -- basic block 15 from 119 to 119 -- after reload
;;   ======================================================

;;	  0-->   119 r0=0xfffffffffffffff2             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 119
;;   new tail = 119

;;   ======================================================
;;   -- basic block 16 from 141 to 162 -- after reload
;;   ======================================================

;;	  0-->   141 use r0                            :nothing
;;	  0-->   162 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 141
;;   new tail = 162

;;   ======================================================
;;   -- basic block 17 from 129 to 130 -- after reload
;;   ======================================================

;;	  0-->   129 cc=cmp(r5,0x104)                  :cortex_a8_default
;;	  2-->   130 pc={(ltu(cc,0x0))?L127:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 129
;;   new tail = 130

;;   ======================================================
;;   -- basic block 18 from 171 to 171 -- after reload
;;   ======================================================

;;	  0-->   171 pc=L100                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 171
;;   new tail = 171





vfp_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,14u} r1={17d,7u} r2={16d,8u} r3={11d,2u} r4={2d,6u} r5={4d,11u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={2d,2u} r10={3d,5u} r12={9d} r13={3d,37u,4d} r14={10d,2u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,9u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1246{1115d,127u,4e} in 70{61 regular + 9 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 8 158 2 NOTE_INSN_DELETED)

(insn/f:TI 158 13 11 2 arch/arm/kernel/ptrace.c:698 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 7 r7)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(insn:TI 11 158 159 2 arch/arm/kernel/ptrace.c:700 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn/f:TI 159 11 160 2 arch/arm/kernel/ptrace.c:698 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -280 [0xfffffffffffffee8]))) 4 {*arm_addsi3} (nil))

(note 160 159 5 2 NOTE_INSN_PROLOGUE_END)

(insn 5 160 4 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn:TI 4 5 15 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 15 4 16 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 16 15 17 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 17 16 6 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn:TI 6 17 12 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 12 6 7 2 arch/arm/kernel/ptrace.c:701 (set (reg/f:SI 9 r9 [148])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 7 12 18 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 18 7 20 2 arch/arm/kernel/ptrace.c:701 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 20 18 21 2 include/linux/regset.h:249 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 21 20 22 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 14 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 24 23 25 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 25 29 4 include/linux/regset.h:254 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 29 26 27 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 13 sp [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(insn:TI 27 29 30 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 30 27 31 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 31 30 32 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 32 31 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 32 38 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 38 37 41 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 41 38 39 5 include/linux/regset.h:258 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 39 41 164 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn:TI 164 39 165 5 (set (pc)
        (label_ref 55)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 165 164 44)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 44 165 45 6 43 "" [1 uses])

(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 50 45 47 6 NOTE_INSN_DELETED)

(insn:TI 47 50 48 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 49 48 51 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 51 49 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 52 51 53 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 15 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 53 55 7 include/linux/regset.h:262 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 55 54 56 8 44 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 57 56 58 8 NOTE_INSN_DELETED)

(insn:TI 58 57 59 8 include/linux/regset.h:305 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn:TI 59 58 60 8 include/linux/regset.h:305 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 14 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 62 9 include/linux/regset.h:263 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(insn:TI 62 61 63 9 include/linux/regset.h:307 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 63 62 64 9 include/linux/regset.h:307 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 64 63 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 67 64 68 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 68 67 69 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 1 r1)
        (const_int 307 [0x133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 307 [0x133])
        (nil)))

(call_insn:TI 69 68 70 10 include/linux/regset.h:307 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 70 69 127)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 127 70 71 11 48 "" [1 uses])

(note 71 127 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 74 71 75 11 NOTE_INSN_DELETED)

(note 75 74 72 11 NOTE_INSN_DELETED)

(insn:TI 72 75 156 11 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 156 72 73 11 include/linux/regset.h:255 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 280 [0x118]))) 4 {*arm_addsi3} (nil))

(insn:TI 73 156 78 11 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 78 73 76 11 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 76 78 77 11 include/linux/regset.h:255 (set (reg:SI 5 r5 [161])
        (plus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 77 76 79 11 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:135 data ] [135])
        (plus:SI (reg:SI 5 r5 [161])
            (const_int -276 [0xfffffffffffffeec]))) 4 {*arm_addsi3} (nil))

(jump_insn 79 77 80 11 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 80 79 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 85 80 87 12 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 87 85 166 12 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 166 87 167 12 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 167 166 91)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 91 167 92 13 46 "" [1 uses])

(note 92 91 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 97 92 94 13 NOTE_INSN_DELETED)

(insn:TI 94 97 96 13 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 96 94 98 13 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 98 96 99 13 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 99 98 100 13 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 12 2 8 13 18) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%] 
;; Pred edge  2 [50.0%] 
;; Pred edge  8
;; Pred edge  13 [50.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 100 99 101 14 41 "" [4 uses])

(note 101 100 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 104 101 105 14 NOTE_INSN_DELETED)

(note 105 104 102 14 NOTE_INSN_DELETED)

(insn:TI 102 105 103 14 arch/arm/kernel/ptrace.c:725 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 103 102 108 14 arch/arm/kernel/ptrace.c:725 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 108 103 109 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 108 107 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 107 109 110 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 110 107 112 14 arch/arm/kernel/ptrace.c:726 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 112 110 113 14 arch/arm/kernel/ptrace.c:727 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 113 112 114 14 arch/arm/kernel/ptrace.c:727 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_flush_hwstate") [flags 0x41] <function_decl 0x10a83b80 vfp_flush_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 114 113 168 14 arch/arm/kernel/ptrace.c:729 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 168 114 169 14 arch/arm/kernel/ptrace.c:729 (set (pc)
        (label_ref 120)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 169 168 117)

;; Start of basic block ( 6 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%] 
(code_label 117 169 118 15 45 "" [2 uses])

(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 119 118 120 15 include/linux/regset.h:260 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 120 119 121 16 47 "" [1 uses])

(note 121 120 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 141 121 161 16 arch/arm/kernel/ptrace.c:730 (use (reg/i:SI 0 r0)) -1 (nil))

(note 161 141 162 16 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 162 161 163 16 arch/arm/kernel/ptrace.c:730 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 163 162 125)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 125 163 126 17 42 "" [2 uses])

(note 126 125 128 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 128 126 129 17 NOTE_INSN_DELETED)

(insn:TI 129 128 130 17 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 130 129 170 17 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 170 130 171 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 171 170 172 18 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 172 171 155)

(note 155 172 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function fpa_set (fpa_set)[0:1560]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 80 to 19 -- after reload
;;   ======================================================

;;	  0-->    80 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->    11 ip=[r0+0x4]                       :cortex_a8_load_store_1
;;	  2-->    18 {cc=cmp(r3,0x0);r3=r3;}           :cortex_a8_default
;;	  2-->     6 r1=[sp+0x8]                       :cortex_a8_load_store_1
;;	  3-->     4 r0=r2                             :cortex_a8_default
;;	  3-->    12 r2=0x1                            :cortex_a8_default
;;	  4-->    17 [ip+0x51]=r2                      :cortex_a8_load_store_1
;;	  5-->    14 [ip+0x52]=r2                      :cortex_a8_load_store_1
;;	  5-->    19 pc={(cc==0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 80
;;   new tail = 19

;;   ======================================================
;;   -- basic block 3 from 21 to 22 -- after reload
;;   ======================================================

;;	  0-->    21 cc=cmp(r0,0x73)                   :cortex_a8_default
;;	  2-->    22 pc={(gtu(cc,0x0))?L55:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 21
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 24 to 29 -- after reload
;;   ======================================================

;;	  0-->    24 r2=0x74-r0                        :cortex_a8_default
;;	  0-->    26 ip=ip+0x120                       :cortex_a8_default
;;	  1-->    25 {r2=umin(r2,r3);clobber cc;}      :cortex_a8_default
;;	  1-->    28 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  2-->    27 r0=ip+r0                          :cortex_a8_default
;;	  3-->    29 pc={(cc==0x0)?L42:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 24
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 37 to 82 -- after reload
;;   ======================================================

;;	  0-->    37 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  0-->    39 r0=0x0                            :cortex_a8_default
;;	  1-->    82 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 37
;;   new tail = 82

;;   ======================================================
;;   -- basic block 6 from 45 to 50 -- after reload
;;   ======================================================

;;	  0-->    45 r1=[sp+0xc]                       :cortex_a8_load_store_1
;;	  1-->    47 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 33-->    49 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    52 (cc) r0=0xfffffffffffffff2        :cortex_a8_default
;;	 35-->    50 pc={(cc!=0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 35
;;   new head = 45
;;   new tail = 50

;;   ======================================================
;;   -- basic block 7 from 57 to 85 -- after reload
;;   ======================================================

;;	  0-->    57 r0=0x0                            :cortex_a8_default
;;	  0-->    70 use r0                            :nothing
;;	  0-->    85 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 57
;;   new tail = 85





fpa_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,10u} r1={5d,3u} r2={6d,6u} r3={4d,3u} r4={1d,2u} r12={4d,4u} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 308{260d,47u,1e} in 28{26 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 80 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 80 8 81 2 arch/arm/kernel/ptrace.c:624 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 81 80 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 81 18 2 arch/arm/kernel/ptrace.c:625 (set (reg/v/f:SI 12 ip [orig:137 thread ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 18 11 6 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 6 18 4 2 arch/arm/kernel/ptrace.c:624 (set (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(insn:TI 4 6 12 2 arch/arm/kernel/ptrace.c:624 (set (reg/v:SI 0 r0 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 12 4 17 2 arch/arm/kernel/ptrace.c:627 (set (reg:SI 2 r2 [145])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 17 12 14 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 14 17 19 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 2 r2 [145])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(jump_insn 19 14 20 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 23 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 26 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 26 24 25 4 include/linux/regset.h:255 (set (reg/f:SI 12 ip [149])
        (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn:TI 25 26 28 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 28 25 27 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 27 28 29 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [149])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [149])
        (nil)))

(jump_insn:TI 29 27 30 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 30 29 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 37 30 39 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 37 82 5 include/linux/regset.h:266 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 82 39 75 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 75 82 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 42 75 43 6 54 "" [1 uses])

(note 43 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 48 43 45 6 NOTE_INSN_DELETED)

(insn:TI 45 48 47 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 47 45 49 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 49 47 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 52 49 50 6 include/linux/regset.h:260 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 50 52 55 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 55 50 56 7 53 "" [2 uses])

(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 70 7 include/linux/regset.h:250 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 70 57 85 7 arch/arm/kernel/ptrace.c:632 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 85 70 84 7 arch/arm/kernel/ptrace.c:632 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 84 85 78)

(note 78 84 79 NOTE_INSN_DELETED)

(note 79 78 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function gpr_set (gpr_set)[0:1558]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 19 count 23 (  1.8)


gpr_set

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,11u} r1={10d,7u} r2={10d,13u} r3={6d,4u} r4={2d,3u} r12={3d} r13={3d,24u,1d} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,8u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{392d,72u,1e} in 46{43 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 2 )->[3]->( 4 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]

( 4 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]

( 4 )->[6]->( 7 12 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]

( 2 3 6 5 )->[7]->( 8 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 7 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 8 9 )->[10]->( 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]

( 7 9 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 11 6 10 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 119 to worklist
  Adding insn 15 to worklist
  Adding insn 22 to worklist
  Adding insn 125 to worklist
  Adding insn 30 to worklist
  Adding insn 42 to worklist
  Adding insn 39 to worklist
  Adding insn 53 to worklist
  Adding insn 57 to worklist
  Adding insn 72 to worklist
  Adding insn 127 to worklist
  Adding insn 84 to worklist
  Adding insn 75 to worklist
  Adding insn 123 to worklist
  Adding insn 104 to worklist
Finished finding needed instructions:
processing block 12 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
processing block 10 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 86 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 76 to worklist
processing block 11 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 91 to worklist
processing block 9 lr out =  3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 66 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
processing block 8 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 56 to worklist
  Adding insn 55 to worklist
processing block 7 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 50 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
processing block 5 lr out =  4 [r4] 13 [sp] 14 [lr]
processing block 6 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 44 to worklist
  Adding insn 41 to worklist
  Adding insn 37 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
  Adding insn 20 to worklist
  Adding insn 21 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 14 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 2 to worklist
  Adding insn 11 to worklist
  Adding insn 120 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 19 count 24 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 119 to 12 -- after reload
;;   ======================================================

;;	  0-->   119 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->    11 {cc=cmp(r3,0x0);r3=r3;}           :cortex_a8_default
;;	  2-->   120 sp=sp-0x48                        :cortex_a8_default
;;	  2-->     2 r4=r0                             :cortex_a8_default
;;	  3-->     4 r0=r2                             :cortex_a8_default
;;	  4-->     6 r1=[sp+0x50]                      :cortex_a8_load_store_1
;;	  4-->    12 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 119
;;   new tail = 12

;;   ======================================================
;;   -- basic block 3 from 14 to 15 -- after reload
;;   ======================================================

;;	  0-->    14 cc=cmp(r2,0x47)                   :cortex_a8_default
;;	  2-->    15 pc={(gtu(cc,0x0))?L47:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 14
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 17 to 22 -- after reload
;;   ======================================================

;;	  0-->    17 r2=0x48-r2                        :cortex_a8_default
;;	  0-->    20 r0=sp+r0                          :cortex_a8_default
;;	  1-->    18 {r2=umin(r2,r3);clobber cc;}      :cortex_a8_default
;;	  1-->    21 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  3-->    22 pc={(cc==0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 17
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 30 to 125 -- after reload
;;   ======================================================

;;	  0-->    30 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  0-->   125 pc=L47                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 30
;;   new tail = 125

;;   ======================================================
;;   -- basic block 6 from 37 to 42 -- after reload
;;   ======================================================

;;	  0-->    37 r1=[sp+0x54]                      :cortex_a8_load_store_1
;;	  1-->    39 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 33-->    41 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    44 (cc) r0=0xfffffffffffffff2        :cortex_a8_default
;;	 35-->    42 pc={(cc!=0x0)?L92:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 37
;;   new tail = 42

;;   ======================================================
;;   -- basic block 7 from 49 to 53 -- after reload
;;   ======================================================

;;	  0-->    49 r2=[sp+0x40]                      :cortex_a8_load_store_1
;;	  2-->    52 cc=cmp(zxt(r2,0x1,0x7),0x0)       :cortex_a8_default
;;	  2-->    50 r3=r2&0xfffffffffffffebf          :cortex_a8_default
;;	  4-->    53 pc={(cc!=0x0)?L89:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 49
;;   new tail = 53

;;   ======================================================
;;   -- basic block 8 from 55 to 57 -- after reload
;;   ======================================================

;;	  0-->    55 r2=r2&0x1f                        :cortex_a8_default
;;	  1-->    56 cc=cmp(r2,0x10)                   :cortex_a8_default
;;	  3-->    57 pc={(cc==0x0)?L73:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 55
;;   new tail = 57

;;   ======================================================
;;   -- basic block 9 from 62 to 72 -- after reload
;;   ======================================================

;;	  0-->    62 r1=`elf_hwcap'                    :cortex_a8_load_store_1
;;	  3-->    63 r1=[r1]                           :cortex_a8_load_store_1
;;	  5-->    66 r1=zxt(r1,0x1,0x3)                :cortex_a8_default
;;	  6-->    70 {r2=r2==0x0&r1;clobber cc;}       :cortex_a8_default
;;	  7-->    71 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  9-->    72 pc={(cc==0x0)?L89:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 62
;;   new tail = 72

;;   ======================================================
;;   -- basic block 10 from 76 to 127 -- after reload
;;   ======================================================

;;	  0-->    76 r0=[r4+0x4]                       :cortex_a8_load_store_1
;;	  0-->    82 r1=sp                             :cortex_a8_default
;;	  1-->    83 r2=0x48                           :cortex_a8_default
;;	  1-->    75 [sp+0x40]=r3                      :cortex_a8_load_store_1
;;	  2-->   114 r0=r0+0x1f80                      :cortex_a8_default
;;	  3-->   115 r0=r0+0x30                        :cortex_a8_default
;;	  4-->    84 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  4-->    86 r0=0x0                            :cortex_a8_default
;;	  5-->   127 pc=L92                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 76
;;   new tail = 127

;;   ======================================================
;;   -- basic block 11 from 91 to 91 -- after reload
;;   ======================================================

;;	  0-->    91 r0=0xffffffffffffffea             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 91
;;   new tail = 91

;;   ======================================================
;;   -- basic block 12 from 104 to 123 -- after reload
;;   ======================================================

;;	  0-->   104 use r0                            :nothing
;;	  0-->   123 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 104
;;   new tail = 123





gpr_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,11u} r1={10d,7u} r2={10d,13u} r3={6d,4u} r4={2d,3u} r12={3d} r13={3d,24u,1d} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,8u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{392d,72u,1e} in 46{43 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 9 8 2 NOTE_INSN_DELETED)

(note 8 5 119 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 119 8 11 2 arch/arm/kernel/ptrace.c:593 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn:TI 11 119 120 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:144 count ] [144])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn/f:TI 120 11 121 2 arch/arm/kernel/ptrace.c:593 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 121 120 2 2 NOTE_INSN_PROLOGUE_END)

(insn 2 121 4 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 4 r4 [orig:141 target ] [141])
        (reg:SI 0 r0 [ target ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 4 2 6 2 arch/arm/kernel/ptrace.c:593 (set (reg/v:SI 0 r0 [orig:143 pos ] [143])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 6 4 12 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 12 6 13 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 14 13 15 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:143 pos ] [143])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 16 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 20 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
        (minus:SI (const_int 72 [0x48])
            (reg:SI 2 r2 [orig:143 pos ] [143]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 17 18 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 13 sp [147])
            (reg/v:SI 0 r0 [orig:143 pos ] [143]))) 4 {*arm_addsi3} (nil))

(insn:TI 18 20 21 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 2 r2 [orig:137 copy ] [137])
                    (reg/v:SI 3 r3 [orig:144 count ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:144 count ] [144])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 21 18 22 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 23 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 23 22 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 30 23 125 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 125 30 126 5 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 126 125 34)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 34 126 35 6 59 "" [1 uses])

(note 35 34 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 40 35 37 6 NOTE_INSN_DELETED)

(insn:TI 37 40 39 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 39 37 41 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 41 39 44 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 44 41 42 6 include/linux/regset.h:260 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 42 44 47 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 2 3 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 47 42 48 7 58 "" [3 uses])

(note 48 47 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 51 48 49 7 NOTE_INSN_DELETED)

(insn:TI 49 51 52 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 2 r2 [orig:133 D.27667 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 52 49 50 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 50 52 53 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 3 r3 [orig:134 D.27666 ] [134])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn:TI 53 50 54 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 56 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 2 r2 [orig:135 mode ] [135])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 56 55 57 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 57 56 58 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  10 [28.0%] 
;; Succ edge  9 [72.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [72.0%]  (fallthru)
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 9 NOTE_INSN_DELETED)

(note 60 59 64 9 NOTE_INSN_DELETED)

(note 64 60 68 9 NOTE_INSN_DELETED)

(note 68 64 69 9 NOTE_INSN_DELETED)

(note 69 68 62 9 NOTE_INSN_DELETED)

(insn:TI 62 69 63 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 1 r1 [155])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn:TI 63 62 66 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
        (mem/c/i:SI (reg/f:SI 1 r1 [155]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 66 63 70 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [159])
        (zero_extract:SI (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 70 66 71 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 2 r2 [163])
                (and:SI (eq:SI (reg/v:SI 2 r2 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 1 r1 [159])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 1 r1 [159])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn:TI 71 70 72 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [163])
        (nil)))

(jump_insn:TI 72 71 73 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  8 [28.0%] 
;; Pred edge  9 [50.0%]  (fallthru)
(code_label 73 72 74 10 62 "" [1 uses])

(note 74 73 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 78 74 79 10 NOTE_INSN_DELETED)

(note 79 78 76 10 NOTE_INSN_DELETED)

(insn:TI 76 79 82 10 arch/arm/kernel/ptrace.c:606 (set (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 target ] [141])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 82 76 83 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 83 82 75 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 75 83 114 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])
        (reg:SI 3 r3 [orig:134 D.27666 ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.27666 ] [134])
        (nil)))

(insn:TI 114 75 115 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 115 114 84 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 84 115 86 10 arch/arm/kernel/ptrace.c:606 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 86 84 127 10 arch/arm/kernel/ptrace.c:607 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 127 86 128 10 arch/arm/kernel/ptrace.c:607 (set (pc)
        (label_ref 92)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 128 127 89)

;; Start of basic block ( 7 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  9 [50.0%] 
(code_label 89 128 90 11 61 "" [2 uses])

(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 90 92 11 arch/arm/kernel/ptrace.c:604 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 6 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  10 [100.0%] 
(code_label 92 91 93 12 60 "" [2 uses])

(note 93 92 104 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 104 93 122 12 arch/arm/kernel/ptrace.c:608 (use (reg/i:SI 0 r0)) -1 (nil))

(note 122 104 123 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 123 122 124 12 arch/arm/kernel/ptrace.c:608 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 124 123 116)

(note 116 124 118 NOTE_INSN_DELETED)

(note 118 116 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function clear_ptrace_hw_breakpoint (clear_ptrace_hw_breakpoint)[0:1551]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 9 -- after reload
;;   ======================================================

;;	  0-->     7 r0=r0+0x31c                       :cortex_a8_default
;;	  0-->     8 r1=0x80                           :cortex_a8_default
;;	  1-->    21 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  2-->     9 call [`__memzero']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 7
;;   new tail = 9





clear_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={2d} r3={2d} r12={1d} r13={1d,3u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 132{124d,8u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 19 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 19 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn:TI 7 6 8 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0 [ tsk ])
            (const_int 796 [0x31c]))) 4 {*arm_addsi3} (nil))

(insn 8 7 20 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(note 20 8 21 2 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 21 20 9 2 arch/arm/kernel/ptrace.c:408 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 9 21 10 2 arch/arm/kernel/ptrace.c:407 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 18)

(note 18 10 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_get (vfp_get)[0:1561]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 30 (  1.7)


vfp_get

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,11u} r1={11d,6u} r2={11d,6u} r3={7d,1u} r4={3d,6u} r5={3d,10u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={1d,2u} r10={3d,5u} r12={6d} r13={2d,26u,2d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={17d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 866{756d,108u,2e} in 59{53 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 15 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 2 )->[3]->( 4 16 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 4 )->[6]->( 14 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 7 5 )->[8]->( 15 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 8 )->[9]->( 10 16 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 )->[10]->( )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 16 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 13 )->[14]->( 1 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 2 13 8 17 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 9 )->[16]->( 11 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 16 )->[17]->( 15 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 15 12 14 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 139 to worklist
  Adding insn 18 to worklist
  Adding insn 25 to worklist
  Adding insn 145 to worklist
  Adding insn 33 to worklist
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 54 to worklist
  Adding insn 57 to worklist
  Adding insn 63 to worklist
  Adding insn 72 to worklist
  Adding insn 141 to worklist
  Adding insn 80 to worklist
  Adding insn 93 to worklist
  Adding insn 90 to worklist
  Adding insn 142 to worklist
  Adding insn 144 to worklist
  Adding insn 123 to worklist
  Adding insn 112 to worklist
  Adding insn 148 to worklist
Finished finding needed instructions:
processing block 15 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 101 to worklist
processing block 10 lr out =  13 [sp]
  Adding insn 62 to worklist
  Adding insn 61 to worklist
processing block 12 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 82 to worklist
  Adding insn 77 to worklist
processing block 14 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 96 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 92 to worklist
  Adding insn 87 to worklist
processing block 11 lr out =  1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 70 to worklist
  Adding insn 71 to worklist
  Adding insn 67 to worklist
  Adding insn 69 to worklist
  Adding insn 66 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 16 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 111 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 56 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 51 to worklist
  Adding insn 53 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 35 to worklist
  Adding insn 32 to worklist
  Adding insn 30 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 48 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 45 to worklist
  Adding insn 42 to worklist
  Adding insn 40 to worklist
processing block 4 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 23 to worklist
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 17 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 14 to worklist
  Adding insn 7 to worklist
  Adding insn 12 to worklist
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 5 to worklist
  Adding insn 11 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 34 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 139 to 15 -- after reload
;;   ======================================================

;;	  0-->   139 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    11 r4=[r0+0x4]                       :cortex_a8_load_store_1
;;	  2-->     5 r7=r3                             :cortex_a8_default
;;	  2-->     4 r5=r2                             :cortex_a8_default
;;	  3-->    12 r0=r4                             :cortex_a8_default
;;	  3-->     6 r8=[sp+0x20]                      :cortex_a8_load_store_1
;;	  4-->     7 sl=[sp+0x24]                      :cortex_a8_load_store_1
;;	  4-->    13 call [`vfp_sync_hwstate']         :cortex_a8_issue_branch
;;	  5-->    14 cc=cmp(r7,0x0)                    :cortex_a8_default
;;	  7-->    15 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 139
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 18 -- after reload
;;   ======================================================

;;	  0-->    17 cc=cmp(r5,0xff)                   :cortex_a8_default
;;	  2-->    18 pc={(gtu(cc,0x0))?L107:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 17
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 20 to 25 -- after reload
;;   ======================================================

;;	  0-->    20 r6=0x100-r5                       :cortex_a8_default
;;	  0-->    22 r1=r4+0x1b0                       :cortex_a8_default
;;	  1-->    21 {r6=umin(r6,r7);clobber cc;}      :cortex_a8_default
;;	  1-->    24 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->    23 r1=r1+r5                          :cortex_a8_default
;;	  3-->    25 pc={(cc==0x0)?L38:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 20
;;   new tail = 25

;;   ======================================================
;;   -- basic block 5 from 30 to 145 -- after reload
;;   ======================================================

;;	  0-->    30 r0=r8                             :cortex_a8_default
;;	  0-->    32 r2=r6                             :cortex_a8_default
;;	  1-->    35 r8=r8+r6                          :cortex_a8_default
;;	  1-->    33 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   145 pc=L49                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 30
;;   new tail = 145

;;   ======================================================
;;   -- basic block 6 from 40 to 46 -- after reload
;;   ======================================================

;;	  0-->    40 r0=sl                             :cortex_a8_default
;;	  0-->    42 r2=r6                             :cortex_a8_default
;;	  1-->    43 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 33-->    45 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    46 pc={(cc!=0x0)?L94:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 40
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 48 to 48 -- after reload
;;   ======================================================

;;	  0-->    48 sl=sl+r6                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 48
;;   new tail = 48

;;   ======================================================
;;   -- basic block 8 from 53 to 54 -- after reload
;;   ======================================================

;;	  0-->    53 {cc=cmp(r7-r6,0x0);r7=r7-r6;}     :cortex_a8_default
;;	  0-->    51 r5=r5+r6                          :cortex_a8_default
;;	  2-->    54 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 53
;;   new tail = 54

;;   ======================================================
;;   -- basic block 9 from 56 to 57 -- after reload
;;   ======================================================

;;	  0-->    56 cc=cmp(r5,0xff)                   :cortex_a8_default
;;	  2-->    57 pc={(gtu(cc,0x0))?L107:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 56
;;   new tail = 57

;;   ======================================================
;;   -- basic block 10 from 61 to 63 -- after reload
;;   ======================================================

;;	  0-->    61 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  0-->    62 r1=0x119                          :cortex_a8_default
;;	  1-->    63 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 61
;;   new tail = 63

;;   ======================================================
;;   -- basic block 11 from 66 to 72 -- after reload
;;   ======================================================

;;	  0-->    66 r2=0x104-r5                       :cortex_a8_default
;;	  0-->    69 r4=r4+r5                          :cortex_a8_default
;;	  1-->    67 {r2=umin(r2,r7);clobber cc;}      :cortex_a8_default
;;	  1-->    71 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->    70 r1=r4+0x1b4                       :cortex_a8_default
;;	  3-->    72 pc={(cc==0x0)?L85:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 66
;;   new tail = 72

;;   ======================================================
;;   -- basic block 12 from 77 to 141 -- after reload
;;   ======================================================

;;	  0-->    77 r0=r8                             :cortex_a8_default
;;	  1-->    80 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  1-->    82 r0=0x0                            :cortex_a8_default
;;	  2-->   141 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 77
;;   new tail = 141

;;   ======================================================
;;   -- basic block 13 from 87 to 93 -- after reload
;;   ======================================================

;;	  0-->    87 r0=sl                             :cortex_a8_default
;;	  1-->    90 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 33-->    92 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    93 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 87
;;   new tail = 93

;;   ======================================================
;;   -- basic block 14 from 96 to 142 -- after reload
;;   ======================================================

;;	  0-->    96 r0=0xfffffffffffffff2             :cortex_a8_default
;;	  0-->   142 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 96
;;   new tail = 142

;;   ======================================================
;;   -- basic block 15 from 101 to 144 -- after reload
;;   ======================================================

;;	  0-->   101 r0=0x0                            :cortex_a8_default
;;	  0-->   123 use r0                            :nothing
;;	  0-->   144 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 101
;;   new tail = 144

;;   ======================================================
;;   -- basic block 16 from 111 to 112 -- after reload
;;   ======================================================

;;	  0-->   111 cc=cmp(r5,0x104)                  :cortex_a8_default
;;	  2-->   112 pc={(ltu(cc,0x0))?L109:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 111
;;   new tail = 112

;;   ======================================================
;;   -- basic block 17 from 148 to 148 -- after reload
;;   ======================================================

;;	  0-->   148 pc=L99                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 148
;;   new tail = 148





vfp_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,11u} r1={11d,6u} r2={11d,6u} r3={7d,1u} r4={3d,6u} r5={3d,10u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={1d,2u} r10={3d,5u} r12={6d} r13={2d,26u,2d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={17d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 866{756d,108u,2e} in 59{53 regular + 6 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 139 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 139 8 140 2 arch/arm/kernel/ptrace.c:661 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -32 [0xffffffffffffffe0])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 9 r9))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 24 [0x18])) [0 S4 A32])
                                            (reg:SI 10 sl))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 140 139 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 140 5 2 arch/arm/kernel/ptrace.c:663 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 5 11 4 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 5 12 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn:TI 12 4 6 2 arch/arm/kernel/ptrace.c:668 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 6 12 7 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])
        (nil)))

(insn:TI 7 6 13 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 13 7 14 2 arch/arm/kernel/ptrace.c:668 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 14 13 15 2 include/linux/regset.h:224 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 16 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 15 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 18 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 18 17 19 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 22 4 include/linux/regset.h:229 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 22 20 21 4 include/linux/regset.h:230 (set (reg/f:SI 1 r1 [148])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 21 22 24 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 24 21 23 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 23 24 25 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 1 r1 [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 25 23 26 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 26 25 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 30 26 32 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 32 30 35 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 35 32 33 5 include/linux/regset.h:233 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 33 35 145 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn:TI 145 33 146 5 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 146 145 38)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 38 146 39 6 71 "" [1 uses])

(note 39 38 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 39 40 6 NOTE_INSN_DELETED)

(insn:TI 40 44 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 42 40 43 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 45 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 45 43 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 46 45 47 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 47 49 7 include/linux/regset.h:237 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 49 48 50 8 72 "" [1 uses])

(note 50 49 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 50 53 8 NOTE_INSN_DELETED)

(insn:TI 53 52 51 8 include/linux/regset.h:279 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(insn 51 53 54 8 include/linux/regset.h:238 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 54 51 55 8 include/linux/regset.h:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 56 55 57 9 include/linux/regset.h:281 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 57 56 58 9 include/linux/regset.h:281 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  16 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 58 57 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 58 62 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 62 61 63 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 1 r1)
        (const_int 281 [0x119])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 281 [0x119])
        (nil)))

(call_insn:TI 63 62 64 10 include/linux/regset.h:281 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 64 63 109)

;; Start of basic block ( 16) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  16 [50.0%] 
(code_label 109 64 65 11 76 "" [1 uses])

(note 65 109 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 68 65 66 11 NOTE_INSN_DELETED)

(insn:TI 66 68 69 11 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 69 66 67 11 include/linux/regset.h:230 (set (reg:SI 4 r4 [156])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(insn:TI 67 69 71 11 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 71 67 70 11 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 70 71 72 11 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:135 data ] [135])
        (plus:SI (reg:SI 4 r4 [156])
            (const_int 436 [0x1b4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 72 70 73 11 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 73 72 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 73 80 12 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 80 77 82 12 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 82 80 141 12 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 141 82 130 12 (return) 260 {return} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 130 141 85)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 85 130 86 13 74 "" [1 uses])

(note 86 85 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 86 87 13 NOTE_INSN_DELETED)

(insn:TI 87 91 90 13 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 90 87 92 13 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 92 90 93 13 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 93 92 94 13 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 6 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 94 93 95 14 73 "" [1 uses])

(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 96 95 142 14 include/linux/regset.h:235 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 142 96 132 14 (return) 260 {return} (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 132 142 99)

;; Start of basic block ( 2 13 8 17) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  8
;; Pred edge  17 [100.0%] 
(code_label 99 132 100 15 69 "" [4 uses])

(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 100 123 15 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 123 101 144 15 arch/arm/kernel/ptrace.c:687 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 144 123 143 15 arch/arm/kernel/ptrace.c:687 (return) 260 {return} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 143 144 107)

;; Start of basic block ( 3 9) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 107 143 108 16 70 "" [2 uses])

(note 108 107 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 110 108 111 16 NOTE_INSN_DELETED)

(insn:TI 111 110 112 16 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 112 111 147 16 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 11 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  17 [50.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 147 112 148 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 148 147 149 17 (set (pc)
        (label_ref 99)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 149 148 137)

(note 137 149 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function fpa_get (fpa_get)[0:1559]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 74 to 13 -- after reload
;;   ======================================================

;;	  0-->    12 {cc=cmp(r3,0x0);r3=r3;}           :cortex_a8_default
;;	  0-->     4 r1=r2                             :cortex_a8_default
;;	  1-->    74 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->    11 ip=[r0+0x4]                       :cortex_a8_load_store_1
;;	  3-->     6 r0=[sp+0x8]                       :cortex_a8_load_store_1
;;	  3-->    13 pc={(cc==0x0)?L49:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 74
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- after reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r2,0x73)                   :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L49:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 23 -- after reload
;;   ======================================================

;;	  0-->    18 r2=0x74-r2                        :cortex_a8_default
;;	  0-->    20 ip=ip+0x120                       :cortex_a8_default
;;	  1-->    19 {r2=umin(r2,r3);clobber cc;}      :cortex_a8_default
;;	  1-->    22 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->    21 r1=ip+r1                          :cortex_a8_default
;;	  3-->    23 pc={(cc==0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 18
;;   new tail = 23

;;   ======================================================
;;   -- basic block 5 from 31 to 76 -- after reload
;;   ======================================================

;;	  0-->    31 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  0-->    33 r0=0x0                            :cortex_a8_default
;;	  1-->    76 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 31
;;   new tail = 76

;;   ======================================================
;;   -- basic block 6 from 38 to 44 -- after reload
;;   ======================================================

;;	  0-->    38 r0=[sp+0xc]                       :cortex_a8_load_store_1
;;	  1-->    41 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 33-->    43 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    46 (cc) r0=0xfffffffffffffff2        :cortex_a8_default
;;	 35-->    44 pc={(cc!=0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 35
;;   new head = 38
;;   new tail = 44

;;   ======================================================
;;   -- basic block 7 from 51 to 79 -- after reload
;;   ======================================================

;;	  0-->    51 r0=0x0                            :cortex_a8_default
;;	  0-->    64 use r0                            :nothing
;;	  0-->    79 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 79





fpa_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={5d,3u} r2={5d,6u} r3={4d,3u} r4={1d,2u} r12={4d,2u} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 303{259d,43u,1e} in 25{23 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 74 2 arch/arm/kernel/ptrace.c:614 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 74 4 75 2 arch/arm/kernel/ptrace.c:614 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 75 74 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 75 6 2 arch/arm/kernel/ptrace.c:616 (set (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 6 11 13 2 arch/arm/kernel/ptrace.c:614 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 13 6 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg:SI 2 r2 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 20 22 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 22 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 21 22 23 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [145])
        (nil)))

(jump_insn:TI 23 21 24 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 24 23 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 31 24 33 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 33 31 76 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 76 33 69 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 69 76 36)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 36 69 37 6 82 "" [1 uses])

(note 37 36 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 42 37 38 6 NOTE_INSN_DELETED)

(insn:TI 38 42 41 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 41 38 43 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 43 41 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 46 43 44 6 include/linux/regset.h:235 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 44 46 49 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 49 44 50 7 81 "" [2 uses])

(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 50 64 7 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 64 51 79 7 arch/arm/kernel/ptrace.c:618 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 79 64 78 7 arch/arm/kernel/ptrace.c:618 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 78 79 72)

(note 72 78 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function gpr_get (gpr_get)[0:1557]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 75 to 13 -- after reload
;;   ======================================================

;;	  0-->    12 {cc=cmp(r3,0x0);r3=r3;}           :cortex_a8_default
;;	  0-->     4 r1=r2                             :cortex_a8_default
;;	  1-->    75 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->    11 ip=[r0+0x4]                       :cortex_a8_load_store_1
;;	  3-->     6 r0=[sp+0x8]                       :cortex_a8_load_store_1
;;	  3-->    13 pc={(cc==0x0)?L50:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 75
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- after reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r2,0x47)                   :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L50:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 24 -- after reload
;;   ======================================================

;;	  0-->    18 r2=0x48-r2                        :cortex_a8_default
;;	  0-->    20 ip=ip+0x1f80                      :cortex_a8_default
;;	  1-->    19 {r2=umin(r2,r3);clobber cc;}      :cortex_a8_default
;;	  1-->    23 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->    21 ip=ip+0x30                        :cortex_a8_default
;;	  3-->    22 r1=ip+r1                          :cortex_a8_default
;;	  3-->    24 pc={(cc==0x0)?L37:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 18
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 32 to 77 -- after reload
;;   ======================================================

;;	  0-->    32 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  0-->    34 r0=0x0                            :cortex_a8_default
;;	  1-->    77 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 32
;;   new tail = 77

;;   ======================================================
;;   -- basic block 6 from 39 to 45 -- after reload
;;   ======================================================

;;	  0-->    39 r0=[sp+0xc]                       :cortex_a8_load_store_1
;;	  1-->    42 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 33-->    44 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    47 (cc) r0=0xfffffffffffffff2        :cortex_a8_default
;;	 35-->    45 pc={(cc!=0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 35
;;   new head = 39
;;   new tail = 45

;;   ======================================================
;;   -- basic block 7 from 52 to 80 -- after reload
;;   ======================================================

;;	  0-->    52 r0=0x0                            :cortex_a8_default
;;	  0-->    65 use r0                            :nothing
;;	  0-->    80 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 52
;;   new tail = 80





gpr_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={5d,3u} r2={5d,6u} r3={4d,3u} r4={1d,2u} r12={5d,3u,1d} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 306{260d,44u,2e} in 26{24 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 75 2 arch/arm/kernel/ptrace.c:581 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 75 4 76 2 arch/arm/kernel/ptrace.c:581 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 76 75 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 76 6 2 arch/arm/kernel/ptrace.c:582 (set (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 6 11 13 2 arch/arm/kernel/ptrace.c:581 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 13 6 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 pos ] [141])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 72 [0x48])
            (reg:SI 2 r2 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [146])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 20 23 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 23 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 21 23 22 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [146])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8112 [0x1fb0]))
        (nil)))

(insn:TI 22 21 24 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [145])
        (nil)))

(jump_insn 24 22 25 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 32 25 34 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 32 77 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 77 34 70 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 77 37)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 37 70 38 6 87 "" [1 uses])

(note 38 37 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 43 38 39 6 NOTE_INSN_DELETED)

(insn:TI 39 43 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 42 39 44 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 44 42 47 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 47 44 45 6 include/linux/regset.h:235 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 45 47 50 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 50 45 51 7 86 "" [2 uses])

(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 65 7 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 65 52 80 7 arch/arm/kernel/ptrace.c:587 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 80 65 79 7 arch/arm/kernel/ptrace.c:587 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 79 80 73)

(note 73 79 74 NOTE_INSN_DELETED)

(note 74 73 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_hbp_create (ptrace_hbp_create)[0:1554]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


ptrace_hbp_create

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={5d,3u} r2={4d,1u} r3={4d,1u} r4={5d,6u} r5={4d,5u} r6={2d,3u} r12={6d,5u} r13={3d,17u,2d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{263d,48u,2e} in 31{29 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 76 to worklist
  Adding insn 58 to worklist
  Adding insn 46 to worklist
  Adding insn 32 to worklist
  Adding insn 30 to worklist
  Adding insn 22 to worklist
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 39 to worklist
  Adding insn 33 to worklist
  Adding insn 10 to worklist
  Adding insn 72 to worklist
Finished finding needed instructions:
processing block 2 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 37 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 45 to worklist
  Adding insn 42 to worklist
  Adding insn 15 to worklist
  Adding insn 9 to worklist
  Adding insn 8 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 73 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
;;   ======================================================
;;   -- basic block 2 from 72 to 76 -- after reload
;;   ======================================================

;;	  0-->    72 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    73 sp=sp-0x48                        :cortex_a8_default
;;	  2-->     2 r6=r0                             :cortex_a8_default
;;	  2-->     3 r4=r1                             :cortex_a8_default
;;	  3-->     8 r0=sp                             :cortex_a8_default
;;	  3-->     9 r1=0x48                           :cortex_a8_default
;;	  4-->    10 call [`__memzero']                :cortex_a8_issue_branch
;;	  4-->    15 ip=zxn([sp+0x28])                 :cortex_a8_load_store_1
;;	  5-->    42 r0=sp                             :cortex_a8_default
;;	  5-->    45 r3=r6                             :cortex_a8_default
;;	  6-->    37 ip=ip|0x25                        :cortex_a8_default
;;	  6-->    43 r1=`ptrace_hbptriggered'          :cortex_a8_load_store_1
;;	  7-->    39 [sp+0x28]=ip                      :cortex_a8_load_store_1
;;	  7-->    44 r2=0x0                            :cortex_a8_default
;;	  8-->    11 ip=0x5                            :cortex_a8_default
;;	  8-->    33 [sp+0x34]=r4                      :cortex_a8_load_store_1
;;	  9-->    12 [sp]=ip                           :cortex_a8_load_store_1
;;	  9-->    66 r4=0x1                            :cortex_a8_default
;;	 10-->    13 ip=ip+0x43                        :cortex_a8_default
;;	 10-->    67 r5=0x0                            :cortex_a8_default
;;	 11-->    14 [sp+0x4]=ip                       :cortex_a8_load_store_1
;;	 12-->    22 [sp+0x10]=r4                      :cortex_a8_load_store_1
;;	 12-->    68 r4=0x0                            :cortex_a8_default
;;	 13-->    69 r5=0x0                            :cortex_a8_default
;;	 13-->    30 [sp+0x38]=r4                      :cortex_a8_load_store_1
;;	 14-->    70 r4=0x4                            :cortex_a8_default
;;	 14-->    71 r5=0x0                            :cortex_a8_default
;;	 15-->    32 [sp+0x40]=r4                      :cortex_a8_load_store_1
;;	 15-->    46 r0=call [`register_user_hw_breakpo:cortex_a8_issue_branch
;;	 16-->    58 use r0                            :nothing
;;	 16-->    76 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 16
;;   new head = 72
;;   new tail = 76





ptrace_hbp_create

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={5d,3u} r2={4d,1u} r3={4d,1u} r4={5d,6u} r5={4d,5u} r6={2d,3u} r12={6d,5u} r13={3d,17u,2d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{263d,48u,2e} in 31{29 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 62 2 NOTE_INSN_DELETED)

(note 62 18 23 2 NOTE_INSN_DELETED)

(note 23 62 26 2 NOTE_INSN_DELETED)

(note 26 23 63 2 NOTE_INSN_DELETED)

(note 63 26 34 2 NOTE_INSN_DELETED)

(note 34 63 41 2 NOTE_INSN_DELETED)

(note 41 34 72 2 NOTE_INSN_DELETED)

(insn/f:TI 72 41 73 2 arch/arm/kernel/ptrace.c:449 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn/f:TI 73 72 74 2 arch/arm/kernel/ptrace.c:449 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 74 73 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 74 3 2 arch/arm/kernel/ptrace.c:449 (set (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 3 2 8 2 arch/arm/kernel/ptrace.c:449 (set (reg/v:SI 4 r4 [orig:136 type ] [136])
        (reg:SI 1 r1 [ type ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ type ])
        (nil)))

(insn:TI 8 3 9 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 9 8 10 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 10 9 15 2 include/linux/hw_breakpoint.h:40 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 10 42 2 include/linux/hw_breakpoint.h:48 (set (reg:SI 12 ip [orig:141+40 ] [141])
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                    (const_int 40 [0x28])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 42 15 45 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 45 42 37 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 3 r3)
        (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 37 45 43 2 arch/arm/kernel/ptrace.c:458 (set (reg:SI 12 ip [153])
        (ior:SI (reg:SI 12 ip [orig:141+40 ] [141])
            (const_int 37 [0x25]))) 89 {*arm_iorsi3} (nil))

(insn 43 37 39 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 1 r1)
        (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)
        (nil)))

(insn:TI 39 43 44 2 arch/arm/kernel/ptrace.c:458 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0+40 S1 A64])
        (reg:QI 12 ip [153])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 12 ip [153])
        (nil)))

(insn 44 39 11 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 44 33 2 include/linux/hw_breakpoint.h:42 (set (reg:SI 12 ip [138])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 33 11 12 2 arch/arm/kernel/ptrace.c:457 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 attr.bp_type+0 S4 A32])
        (reg/v:SI 4 r4 [orig:136 type ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:136 type ] [136])
        (nil)))

(insn:TI 12 33 66 2 include/linux/hw_breakpoint.h:42 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 attr.type+0 S4 A64])
        (reg:SI 12 ip [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 66 12 13 2 include/linux/hw_breakpoint.h:49 (set (reg:SI 4 r4 [144])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 66 67 2 include/linux/hw_breakpoint.h:43 (set (reg:SI 12 ip [139])
        (plus:SI (reg:SI 12 ip [139])
            (const_int 67 [0x43]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 72 [0x48])
        (nil)))

(insn 67 13 14 2 include/linux/hw_breakpoint.h:49 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 67 22 2 include/linux/hw_breakpoint.h:43 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 attr.size+0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [139])
        (expr_list:REG_EQUAL (const_int 72 [0x48])
            (nil))))

(insn:TI 22 14 68 2 include/linux/hw_breakpoint.h:49 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 attr.D.23422.sample_period+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 68 22 69 2 arch/arm/kernel/ptrace.c:455 (set (reg:SI 4 r4 [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 69 68 30 2 arch/arm/kernel/ptrace.c:455 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 30 69 70 2 arch/arm/kernel/ptrace.c:455 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 attr.D.23452.bp_addr+0 S8 A64])
        (reg:DI 4 r4 [149])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 70 30 71 2 arch/arm/kernel/ptrace.c:456 (set (reg:SI 4 r4 [150])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 71 70 32 2 arch/arm/kernel/ptrace.c:456 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 32 71 46 2 arch/arm/kernel/ptrace.c:456 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 4 r4 [150])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(call_insn 46 32 58 2 arch/arm/kernel/ptrace.c:460 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524700 register_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 58 46 75 2 arch/arm/kernel/ptrace.c:462 (use (reg/i:SI 0 r0)) -1 (nil))

(note 75 58 76 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 76 75 77 2 arch/arm/kernel/ptrace.c:462 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 77 76 64)

(note 64 77 65 NOTE_INSN_DELETED)

(note 65 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function arch_ptrace (arch_ptrace)[0:1564]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 50 n_edges 83 count 98 (    2)


arch_ptrace

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={48d,44u} r1={36d,20u} r2={49d,36u} r3={64d,53u} r4={2d,19u} r5={4d,22u} r6={17d,24u,1d} r7={17d,22u} r8={7d,11u} r10={3d,9u} r12={34d,24u} r13={3d,101u,2d} r14={24d,2u} r15={19d} r16={19d} r17={19d} r18={19d} r19={19d} r20={19d} r21={19d} r22={19d} r23={19d} r24={57d,43u} r25={1d} r27={19d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={19d} r38={19d} r39={19d} r40={19d} r41={19d} r42={19d} r43={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} r81={19d} r82={19d} r83={19d} r84={19d} r85={19d} r86={19d} r87={19d} r88={19d} r89={19d} r90={19d} r91={19d} r92={19d} r93={19d} r94={19d} r95={19d} r96={19d} r97={19d} r98={19d} r99={19d} r100={19d} r101={19d} r102={19d} r103={19d} r104={19d} r105={19d} r106={19d} r107={19d} r108={19d} r109={19d} r110={19d} r111={19d} r112={19d} r113={19d} r114={19d} r115={19d} r116={19d} r117={19d} r118={19d} r119={19d} r120={19d} r121={19d} r122={19d} r123={19d} r124={19d} r125={19d} r126={19d} r127={19d} 
;;    total ref usage 2889{2455d,430u,4e} in 269{250 regular + 19 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 45 3 5 6 8 10 12 14 15 16 18 20 31 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 2 )->[3]->( 48 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 3 )->[4]->( 46 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[5]->( 46 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[6]->( 48 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 6 )->[7]->( 46 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[8]->( 48 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 8 )->[9]->( 46 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[10]->( 48 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 10 )->[11]->( 46 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[12]->( 48 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 12 )->[13]->( 46 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[14]->( 46 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[15]->( 49 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 2 )->[16]->( 48 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 16 )->[17]->( 46 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[18]->( 48 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 18 )->[19]->( 46 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[20]->( 47 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 20 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]

( 21 )->[22]->( 30 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 21 )->[23]->( 43 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 23 )->[24]->( 27 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 24 )->[25]->( 30 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 27 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 26 24 )->[27]->( 26 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 27 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 29 22 28 25 )->[30]->( 44 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[31]->( 47 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 31 )->[32]->( 44 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]

( 32 )->[33]->( 43 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 33 )->[34]->( 35 44 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 10 [sl] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 34 )->[35]->( 36 38 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 35 )->[36]->( 37 44 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 36 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 35 37 )->[38]->( 39 42 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 38 )->[39]->( 44 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 39 )->[40]->( 43 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 40 )->[41]->( 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 41 38 )->[42]->( 44 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 40 33 23 )->[43]->( 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 43 34 36 32 39 30 42 )->[44]->( 49 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 2 )->[45]->( 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 45 14 4 5 7 9 11 13 17 19 )->[46]->( 49 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 20 31 )->[47]->( 49 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

( 18 16 3 6 8 10 12 )->[48]->( 49 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 48 44 46 15 47 )->[49]->( 1 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

( 49 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 657 to worklist
  Adding insn 29 to worklist
  Adding insn 701 to worklist
  Adding insn 50 to worklist
  Adding insn 703 to worklist
  Adding insn 59 to worklist
  Adding insn 71 to worklist
  Adding insn 705 to worklist
  Adding insn 82 to worklist
  Adding insn 76 to worklist
  Adding insn 77 to worklist
  Adding insn 94 to worklist
  Adding insn 707 to worklist
  Adding insn 105 to worklist
  Adding insn 99 to worklist
  Adding insn 100 to worklist
  Adding insn 117 to worklist
  Adding insn 709 to worklist
  Adding insn 129 to worklist
  Adding insn 123 to worklist
  Adding insn 124 to worklist
  Adding insn 141 to worklist
  Adding insn 711 to worklist
  Adding insn 153 to worklist
  Adding insn 147 to worklist
  Adding insn 148 to worklist
  Adding insn 713 to worklist
  Adding insn 162 to worklist
  Adding insn 715 to worklist
  Adding insn 169 to worklist
  Adding insn 181 to worklist
  Adding insn 717 to worklist
  Adding insn 193 to worklist
  Adding insn 187 to worklist
  Adding insn 188 to worklist
  Adding insn 205 to worklist
  Adding insn 719 to worklist
  Adding insn 217 to worklist
  Adding insn 211 to worklist
  Adding insn 212 to worklist
  Adding insn 227 to worklist
  Adding insn 224 to worklist
  Adding insn 231 to worklist
  Adding insn 721 to worklist
  Adding insn 242 to worklist
  Adding insn 239 to worklist
  Adding insn 237 to worklist
  Adding insn 234 to worklist
  Adding insn 271 to worklist
  Adding insn 285 to worklist
  Adding insn 724 to worklist
  Adding insn 306 to worklist
  Adding insn 310 to worklist
  Adding insn 726 to worklist
  Adding insn 341 to worklist
  Adding insn 364 to worklist
  Adding insn 361 to worklist
  Adding insn 368 to worklist
  Adding insn 391 to worklist
  Adding insn 398 to worklist
  Adding insn 394 to worklist
  Adding insn 412 to worklist
  Adding insn 419 to worklist
  Adding insn 416 to worklist
  Adding insn 431 to worklist
  Adding insn 444 to worklist
  Adding insn 567 to worklist
  Adding insn 566 to worklist
  Adding insn 440 to worklist
  Adding insn 493 to worklist
  Adding insn 490 to worklist
  Adding insn 498 to worklist
  Adding insn 502 to worklist
  Adding insn 511 to worklist
  Adding insn 503 to worklist
  Adding insn 728 to worklist
  Adding insn 517 to worklist
  Adding insn 730 to worklist
  Adding insn 527 to worklist
  Adding insn 536 to worklist
  Adding insn 732 to worklist
  Adding insn 734 to worklist
  Adding insn 661 to worklist
  Adding insn 560 to worklist
Finished finding needed instructions:
processing block 49 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 554 to worklist
processing block 46 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 537 to worklist
processing block 45 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 532 to worklist
processing block 48 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 547 to worklist
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 49 to worklist
  Adding insn 45 to worklist
  Adding insn 648 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 39 to worklist
  Adding insn 31 to worklist
processing block 3 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 639 to worklist
  Adding insn 638 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 81 to worklist
  Adding insn 79 to worklist
  Adding insn 80 to worklist
  Adding insn 78 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 636 to worklist
  Adding insn 635 to worklist
  Adding insn 650 to worklist
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 103 to worklist
  Adding insn 101 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 634 to worklist
  Adding insn 633 to worklist
  Adding insn 651 to worklist
processing block 11 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 128 to worklist
  Adding insn 126 to worklist
  Adding insn 127 to worklist
  Adding insn 125 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 632 to worklist
  Adding insn 631 to worklist
  Adding insn 652 to worklist
processing block 13 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 152 to worklist
  Adding insn 150 to worklist
  Adding insn 151 to worklist
  Adding insn 149 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 138 to worklist
  Adding insn 630 to worklist
  Adding insn 629 to worklist
  Adding insn 653 to worklist
processing block 14 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 160 to worklist
  Adding insn 161 to worklist
  Adding insn 159 to worklist
processing block 15 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 170 to worklist
  Adding insn 168 to worklist
processing block 17 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 192 to worklist
  Adding insn 190 to worklist
  Adding insn 191 to worklist
  Adding insn 189 to worklist
processing block 16 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 180 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 628 to worklist
  Adding insn 627 to worklist
  Adding insn 654 to worklist
processing block 19 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 216 to worklist
  Adding insn 214 to worklist
  Adding insn 215 to worklist
  Adding insn 213 to worklist
processing block 18 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
  Adding insn 626 to worklist
  Adding insn 625 to worklist
  Adding insn 655 to worklist
processing block 47 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 542 to worklist
processing block 44 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 526 to worklist
processing block 30 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 569 to worklist
  Adding insn 568 to worklist
  Adding insn 340 to worklist
processing block 22 lr out =  2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 252 to worklist
  Adding insn 249 to worklist
  Adding insn 246 to worklist
  Adding insn 251 to worklist
  Adding insn 248 to worklist
  Adding insn 240 to worklist
  Adding insn 238 to worklist
  Adding insn 236 to worklist
  Adding insn 235 to worklist
  Adding insn 233 to worklist
processing block 43 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 523 to worklist
processing block 26 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 300 to worklist
processing block 29 lr out =  2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 336 to worklist
  Adding insn 332 to worklist
  Adding insn 328 to worklist
  Adding insn 325 to worklist
  Adding insn 324 to worklist
  Adding insn 334 to worklist
  Adding insn 330 to worklist
  Adding insn 320 to worklist
  Adding insn 323 to worklist
  Adding insn 317 to worklist
processing block 28 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 312 to worklist
  Adding insn 309 to worklist
processing block 27 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 305 to worklist
processing block 25 lr out =  2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
processing block 24 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 294 to worklist
  Adding insn 292 to worklist
  Adding insn 284 to worklist
  Adding insn 283 to worklist
  Adding insn 281 to worklist
processing block 23 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 270 to worklist
  Adding insn 269 to worklist
  Adding insn 268 to worklist
  Adding insn 265 to worklist
  Adding insn 260 to worklist
processing block 21 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
  Adding insn 230 to worklist
processing block 20 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 226 to worklist
  Adding insn 223 to worklist
processing block 42 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 518 to worklist
  Adding insn 516 to worklist
  Adding insn 515 to worklist
processing block 41 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 501 to worklist
  Adding insn 647 to worklist
  Adding insn 510 to worklist
  Adding insn 507 to worklist
  Adding insn 509 to worklist
processing block 40 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 497 to worklist
  Adding insn 496 to worklist
  Adding insn 495 to worklist
processing block 39 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 492 to worklist
  Adding insn 487 to worklist
  Adding insn 489 to worklist
  Adding insn 484 to worklist
  Adding insn 488 to worklist
  Adding insn 476 to worklist
  Adding insn 479 to worklist
  Adding insn 474 to worklist
  Adding insn 475 to worklist
  Adding insn 466 to worklist
  Adding insn 469 to worklist
  Adding insn 458 to worklist
  Adding insn 461 to worklist
  Adding insn 570 to worklist
processing block 38 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 565 to worklist
  Adding insn 443 to worklist
  Adding insn 439 to worklist
  Adding insn 438 to worklist
  Adding insn 437 to worklist
processing block 37 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
processing block 36 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 421 to worklist
  Adding insn 418 to worklist
  Adding insn 417 to worklist
  Adding insn 415 to worklist
  Adding insn 414 to worklist
processing block 35 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 411 to worklist
  Adding insn 410 to worklist
  Adding insn 408 to worklist
  Adding insn 405 to worklist
processing block 34 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 400 to worklist
  Adding insn 395 to worklist
  Adding insn 397 to worklist
  Adding insn 393 to worklist
processing block 33 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
  Adding insn 390 to worklist
  Adding insn 389 to worklist
  Adding insn 388 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 379 to worklist
  Adding insn 378 to worklist
processing block 32 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
  Adding insn 367 to worklist
processing block 31 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 363 to worklist
  Adding insn 360 to worklist
processing block 2 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 10 to worklist
  Adding insn 2 to worklist
  Adding insn 658 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 50 n_edges 83 count 99 (    2)
;;   ======================================================
;;   -- basic block 2 from 657 to 11 -- after reload
;;   ======================================================

;;	  0-->   657 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     2 r4=r0                             :cortex_a8_default
;;	  2-->    10 r0=r1-0x3                         :cortex_a8_default
;;	  2-->   658 sp=sp-0x5c                        :cortex_a8_default
;;	  3-->     4 r6=r2                             :cortex_a8_default
;;	  3-->     5 r5=r3                             :cortex_a8_default
;;	  4-->    11 {pc={(leu(r0,0x1b))?[r0*0x4+L12]:L:cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 657
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 638 to 29 -- after reload
;;   ======================================================

;;	  0-->   638 {cc=cmp(r2&0x3,0x0);r2=r2&0x3;}   :cortex_a8_default
;;	  1-->   639 r2={(cc==0x0)?r2:0x1}             :cortex_a8_default
;;	  2-->    27 {r2=geu(r6,0x128)|r2;clobber cc;} :cortex_a8_default
;;	  3-->    28 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  5-->    29 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 638
;;   new tail = 29

;;   ======================================================
;;   -- basic block 4 from 31 to 701 -- after reload
;;   ======================================================

;;	  0-->    31 cc=cmp(r6,0x47)                   :cortex_a8_default
;;	  0-->    49 r0=r5                             :cortex_a8_default
;;	  1-->    42 (leu(cc,0x0)) r6=r6&0xffffffffffff:cortex_a8_default
;;	  2-->    39 (leu(cc,0x0)) r3=[r4+0x4]         :cortex_a8_load_store_1
;;	  4-->    43 (leu(cc,0x0)) r6=r3+r6            :cortex_a8_default
;;	  4-->   648 (leu(cc,0x0)) r3=0x1fb0           :cortex_a8_default
;;	  6-->    45 (leu(cc,0x0)) r2=[r6+r3]          :cortex_a8_load_store_1
;;	  7-->    50 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  8-->   701 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 31
;;   new tail = 701

;;   ======================================================
;;   -- basic block 5 from 56 to 703 -- after reload
;;   ======================================================

;;	  0-->    57 r1=r2                             :cortex_a8_default
;;	  0-->    56 r0=r4                             :cortex_a8_default
;;	  1-->    58 r2=r3                             :cortex_a8_default
;;	  2-->    59 r0=call [`ptrace_write_user']     :cortex_a8_issue_branch
;;	  2-->   703 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 56
;;   new tail = 703

;;   ======================================================
;;   -- basic block 6 from 650 to 71 -- after reload
;;   ======================================================

;;	  0-->   650 r2=sp                             :cortex_a8_default
;;	  1-->   635 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   636 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    68 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->    69 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->    70 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->    71 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 650
;;   new tail = 71

;;   ======================================================
;;   -- basic block 7 from 78 to 705 -- after reload
;;   ======================================================

;;	  0-->    78 r0=r4                             :cortex_a8_default
;;	  0-->    80 r2=ip                             :cortex_a8_default
;;	  1-->    79 r1=const(`*.LANCHOR0'+0xac)       :cortex_a8_load_store_1
;;	  1-->    81 r3=0x48                           :cortex_a8_default
;;	  2-->    77 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->    76 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->    82 r0=call [`gpr_get']               :cortex_a8_issue_branch
;;	  4-->   705 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 78
;;   new tail = 705

;;   ======================================================
;;   -- basic block 8 from 651 to 94 -- after reload
;;   ======================================================

;;	  0-->   651 r2=sp                             :cortex_a8_default
;;	  1-->   633 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   634 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    91 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->    92 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->    93 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->    94 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 651
;;   new tail = 94

;;   ======================================================
;;   -- basic block 9 from 101 to 707 -- after reload
;;   ======================================================

;;	  0-->   101 r0=r4                             :cortex_a8_default
;;	  0-->   103 r2=ip                             :cortex_a8_default
;;	  1-->   102 r1=const(`*.LANCHOR0'+0xac)       :cortex_a8_load_store_1
;;	  1-->   104 r3=0x48                           :cortex_a8_default
;;	  2-->   100 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->    99 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   105 r0=call [`gpr_set']               :cortex_a8_issue_branch
;;	  4-->   707 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 101
;;   new tail = 707

;;   ======================================================
;;   -- basic block 10 from 652 to 117 -- after reload
;;   ======================================================

;;	  0-->   652 r2=sp                             :cortex_a8_default
;;	  1-->   631 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   632 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   114 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->   115 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->   116 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->   117 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 652
;;   new tail = 117

;;   ======================================================
;;   -- basic block 11 from 125 to 709 -- after reload
;;   ======================================================

;;	  0-->   125 r0=r4                             :cortex_a8_default
;;	  0-->   127 r2=ip                             :cortex_a8_default
;;	  1-->   126 r1=const(`*.LANCHOR0'+0xd0)       :cortex_a8_load_store_1
;;	  1-->   128 r3=0x8c                           :cortex_a8_default
;;	  2-->   124 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->   123 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   129 r0=call [`fpa_get']               :cortex_a8_issue_branch
;;	  4-->   709 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 125
;;   new tail = 709

;;   ======================================================
;;   -- basic block 12 from 653 to 141 -- after reload
;;   ======================================================

;;	  0-->   653 r2=sp                             :cortex_a8_default
;;	  1-->   629 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   630 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   138 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->   139 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->   140 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->   141 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 653
;;   new tail = 141

;;   ======================================================
;;   -- basic block 13 from 149 to 711 -- after reload
;;   ======================================================

;;	  0-->   149 r0=r4                             :cortex_a8_default
;;	  0-->   151 r2=ip                             :cortex_a8_default
;;	  1-->   150 r1=const(`*.LANCHOR0'+0xd0)       :cortex_a8_load_store_1
;;	  1-->   152 r3=0x8c                           :cortex_a8_default
;;	  2-->   148 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->   147 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   153 r0=call [`fpa_set']               :cortex_a8_issue_branch
;;	  4-->   711 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 149
;;   new tail = 711

;;   ======================================================
;;   -- basic block 14 from 159 to 713 -- after reload
;;   ======================================================

;;	  0-->   159 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  0-->   161 r0=r5                             :cortex_a8_default
;;	  3-->   160 r2=[r3+0x60]                      :cortex_a8_load_store_1
;;	  4-->   162 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  5-->   713 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 159
;;   new tail = 713

;;   ======================================================
;;   -- basic block 15 from 168 to 715 -- after reload
;;   ======================================================

;;	  0-->   168 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  0-->   170 r6=0x0                            :cortex_a8_default
;;	  3-->   169 [r3+0x4c]=r5                      :cortex_a8_load_store_1
;;	  3-->   715 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 168
;;   new tail = 715

;;   ======================================================
;;   -- basic block 16 from 654 to 181 -- after reload
;;   ======================================================

;;	  0-->   654 r2=sp                             :cortex_a8_default
;;	  1-->   627 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   628 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   178 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->   179 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->   180 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->   181 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 654
;;   new tail = 181

;;   ======================================================
;;   -- basic block 17 from 189 to 717 -- after reload
;;   ======================================================

;;	  0-->   189 r0=r4                             :cortex_a8_default
;;	  0-->   191 r2=ip                             :cortex_a8_default
;;	  1-->   190 r1=const(`*.LANCHOR0'+0xf4)       :cortex_a8_load_store_1
;;	  1-->   192 r3=0x104                          :cortex_a8_default
;;	  2-->   188 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->   187 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   193 r0=call [`vfp_get']               :cortex_a8_issue_branch
;;	  4-->   717 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 189
;;   new tail = 717

;;   ======================================================
;;   -- basic block 18 from 655 to 205 -- after reload
;;   ======================================================

;;	  0-->   655 r2=sp                             :cortex_a8_default
;;	  1-->   625 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   626 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   202 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->   203 {ip=asm_operands;r3=asm_operands;c:nothing
;;	  6-->   204 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  8-->   205 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 655
;;   new tail = 205

;;   ======================================================
;;   -- basic block 19 from 213 to 719 -- after reload
;;   ======================================================

;;	  0-->   213 r0=r4                             :cortex_a8_default
;;	  0-->   215 r2=ip                             :cortex_a8_default
;;	  1-->   214 r1=const(`*.LANCHOR0'+0xf4)       :cortex_a8_load_store_1
;;	  1-->   216 r3=0x104                          :cortex_a8_default
;;	  2-->   212 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	  3-->   211 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   217 r0=call [`vfp_set']               :cortex_a8_issue_branch
;;	  4-->   719 pc=L665                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 213
;;   new tail = 719

;;   ======================================================
;;   -- basic block 20 from 223 to 227 -- after reload
;;   ======================================================

;;	  0-->   223 r0=r4                             :cortex_a8_default
;;	  1-->   224 r0=call [`ptrace_get_breakpoints']:cortex_a8_issue_branch
;;	 33-->   226 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   227 pc={(cc<0x0)?L540:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 223
;;   new tail = 227

;;   ======================================================
;;   -- basic block 21 from 230 to 231 -- after reload
;;   ======================================================

;;	  0-->   230 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	  2-->   231 pc={(cc!=0x0)?L255:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 230
;;   new tail = 231

;;   ======================================================
;;   -- basic block 22 from 233 to 721 -- after reload
;;   ======================================================

;;	  0-->   233 r0=r6                             :cortex_a8_default
;;	  1-->   234 r0=call [`hw_breakpoint_slots']   :cortex_a8_issue_branch
;;	 33-->   235 r7=r0                             :cortex_a8_default
;;	 33-->   236 r0=0x1                            :cortex_a8_default
;;	 34-->   237 r0=call [`hw_breakpoint_slots']   :cortex_a8_issue_branch
;;	 35-->   251 r7=zxn(r7)                        :cortex_a8_default
;;	 66-->   238 r8=r0                             :cortex_a8_default
;;	 66-->   239 r0=call [`arch_get_debug_arch']   :cortex_a8_issue_branch
;;	 68-->   248 r8=zxn(r8)                        :cortex_a8_default
;;	 98-->   240 r6=r0                             :cortex_a8_default
;;	 98-->   242 r0=call [`arch_get_max_wp_len']   :cortex_a8_issue_branch
;;	130-->   246 r6=r6<<0x8|r0                     :cortex_a8_default
;;	132-->   249 r8=r6<<0x8|r8                     :cortex_a8_default
;;	134-->   252 r2=r8<<0x8|r7                     :cortex_a8_default
;;	134-->   721 pc=L337                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 134
;;   new head = 233
;;   new tail = 721

;;   ======================================================
;;   -- basic block 23 from 260 to 271 -- after reload
;;   ======================================================

;;	  0-->   260 (cc>=0x0) r3=r6                   :cortex_a8_default
;;	  0-->   265 (cc<0x0) r3=0x20-r6               :cortex_a8_default
;;	  1-->   268 r3=r3-0x1                         :cortex_a8_default
;;	  3-->   269 r3=r3>>0x1                        :cortex_a8_default
;;	  4-->   270 cc=cmp(r3,0x1f)                   :cortex_a8_default
;;	  6-->   271 pc={(gtu(cc,0x0))?L521:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 260
;;   new tail = 271

;;   ======================================================
;;   -- basic block 24 from 281 to 285 -- after reload
;;   ======================================================

;;	  0-->   281 r3=r3*0x4+r4                      :cortex_a8_default
;;	  2-->   283 r2=[r3+0x31c]                     :cortex_a8_load_store_1
;;	  4-->   284 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  6-->   292 (cc) r3=[r2+0xd4]                 :cortex_a8_load_store_1
;;	  8-->   294 (cc) r1=zxt(r3,0x8,0x13)          :cortex_a8_default
;;	  8-->   285 pc={(cc!=0x0)?L301:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 281
;;   new tail = 285

;;   ======================================================
;;   -- basic block 25 from 724 to 724 -- after reload
;;   ======================================================

;;	  0-->   724 pc=L337                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 724
;;   new tail = 724

;;   ======================================================
;;   -- basic block 26 from 300 to 300 -- after reload
;;   ======================================================

;;	  0-->   300 r1=r1 0>>0x1                      :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 300
;;   new tail = 300

;;   ======================================================
;;   -- basic block 27 from 305 to 306 -- after reload
;;   ======================================================

;;	  0-->   305 cc=cmp(zxt(r1,0x1,0x0),0x0)       :cortex_a8_default
;;	  2-->   306 pc={(cc==0x0)?L303:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 305
;;   new tail = 306

;;   ======================================================
;;   -- basic block 28 from 309 to 310 -- after reload
;;   ======================================================

;;	  0-->   309 cc=cmp(zxt(r6,0x1,0x0),0x0)       :cortex_a8_default
;;	  2-->   312 (cc) r2=[r2+0xb0]                 :cortex_a8_load_store_1
;;	  2-->   310 pc={(cc!=0x0)?L337:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 309
;;   new tail = 310

;;   ======================================================
;;   -- basic block 29 from 317 to 336 -- after reload
;;   ======================================================

;;	  0-->   317 zxt(r3,0x8,0x13)=r1               :cortex_a8_default
;;	  1-->   323 r1=zxt(r3,0x8,0x13)               :cortex_a8_default
;;	  1-->   320 r0=zxt(r3,0x1,0x9)                :cortex_a8_default
;;	  2-->   330 r7=zxt(r3,0x2,0x1b)               :cortex_a8_default
;;	  2-->   334 r2=zxt(r3,0x2,0x1d)               :cortex_a8_default
;;	  3-->   324 r1=r1<<0x5                        :cortex_a8_default
;;	  4-->   325 r1=r0<<0x16|r1                    :cortex_a8_default
;;	  5-->   328 r3=r3 0>>0x1f|r1                  :cortex_a8_default
;;	  6-->   332 r3=r7<<0x3|r3                     :cortex_a8_default
;;	  7-->   336 r2=r2<<0x1|r3                     :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 317
;;   new tail = 336

;;   ======================================================
;;   -- basic block 30 from 340 to 726 -- after reload
;;   ======================================================

;;	  0-->   340 r0=r5                             :cortex_a8_default
;;	  1-->   341 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  2-->   568 {cc=cmp(r0,0x0);r6=r0;}           :cortex_a8_default
;;	  3-->   569 r6={(cc==0x0)?r6:0xfffffffffffffff:cortex_a8_default
;;	  3-->   726 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 340
;;   new tail = 726

;;   ======================================================
;;   -- basic block 31 from 360 to 364 -- after reload
;;   ======================================================

;;	  0-->   360 r0=r4                             :cortex_a8_default
;;	  1-->   361 r0=call [`ptrace_get_breakpoints']:cortex_a8_issue_branch
;;	 33-->   363 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   364 pc={(cc<0x0)?L540:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 360
;;   new tail = 364

;;   ======================================================
;;   -- basic block 32 from 367 to 368 -- after reload
;;   ======================================================

;;	  0-->   367 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	  2-->   368 pc={(cc==0x0)?L524:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 367
;;   new tail = 368

;;   ======================================================
;;   -- basic block 33 from 378 to 391 -- after reload
;;   ======================================================

;;	  0-->   378 (cc>=0x0) r7=r6                   :cortex_a8_default
;;	  0-->   384 (cc<0x0) r7=0x20-r6               :cortex_a8_default
;;	  1-->   388 r7=r7-0x1                         :cortex_a8_default
;;	  1-->   379 (cc>=0x0) r8=0x4                  :cortex_a8_default
;;	  2-->   385 (cc<0x0) r8=0x3                   :cortex_a8_default
;;	  3-->   389 r7=r7>>0x1                        :cortex_a8_default
;;	  4-->   390 cc=cmp(r7,0x1f)                   :cortex_a8_default
;;	  6-->   391 pc={(gtu(cc,0x0))?L521:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 378
;;   new tail = 391

;;   ======================================================
;;   -- basic block 34 from 393 to 398 -- after reload
;;   ======================================================

;;	  0-->   393 r0=r5                             :cortex_a8_default
;;	  1-->   394 {r0=asm_operands;r2=asm_operands;c:nothing
;;	  2-->   397 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->   395 sl=r2                             :cortex_a8_default
;;	  3-->   400 (cc) r6=0xfffffffffffffff2        :cortex_a8_default
;;	  4-->   398 pc={(cc!=0x0)?L524:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 393
;;   new tail = 398

;;   ======================================================
;;   -- basic block 35 from 405 to 412 -- after reload
;;   ======================================================

;;	  0-->   405 r7=r7+0xc6                        :cortex_a8_default
;;	  2-->   408 r7=r7*0x4+r4                      :cortex_a8_default
;;	  4-->   410 r5=[r7+0x4]                       :cortex_a8_load_store_1
;;	  6-->   411 cc=cmp(r5,0x0)                    :cortex_a8_default
;;	  8-->   412 pc={(cc!=0x0)?L432:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 405
;;   new tail = 412

;;   ======================================================
;;   -- basic block 36 from 414 to 419 -- after reload
;;   ======================================================

;;	  0-->   414 r0=r4                             :cortex_a8_default
;;	  0-->   415 r1=r8                             :cortex_a8_default
;;	  1-->   416 r0=call [`ptrace_hbp_create']     :cortex_a8_issue_branch
;;	 33-->   418 cc=cmp(r0,0xfffffffffffff000)     :cortex_a8_default
;;	 33-->   417 r5=r0                             :cortex_a8_default
;;	 34-->   421 (gtu(cc,0x0)) r6=r0               :cortex_a8_default
;;	 35-->   419 pc={(gtu(cc,0x0))?L524:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 414
;;   new tail = 419

;;   ======================================================
;;   -- basic block 37 from 431 to 431 -- after reload
;;   ======================================================

;;	  0-->   431 [r7+0x4]=r0                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 431
;;   new tail = 431

;;   ======================================================
;;   -- basic block 38 from 437 to 444 -- after reload
;;   ======================================================

;;	  0-->   437 r0=sp+0x8                         :cortex_a8_default
;;	  0-->   438 r1=r5+0x78                        :cortex_a8_default
;;	  1-->   439 r2=0x48                           :cortex_a8_default
;;	  2-->   440 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   443 cc=cmp(zxt(r6,0x1,0x0),0x0)       :cortex_a8_default
;;	  3-->   565 (cc) r3=0x0                       :cortex_a8_default
;;	  3-->   566 (cc) [sp+0x40]=sl                 :cortex_a8_load_store_1
;;	 34-->   567 (cc) [sp+0x44]=r3                 :cortex_a8_load_store_1
;;	 34-->   444 pc={(cc!=0x0)?L512:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 437
;;   new tail = 444

;;   ======================================================
;;   -- basic block 39 from 570 to 493 -- after reload
;;   ======================================================

;;	  0-->   570 r7=0x0                            :cortex_a8_default
;;	  0-->   461 r3=zxt(sl,0x2,0x1)                :cortex_a8_default
;;	  1-->   458 zxt(r7,0x1,0x1f)=sl               :cortex_a8_default
;;	  1-->   469 r2=zxt(sl,0x2,0x3)                :cortex_a8_default
;;	  2-->   466 zxt(r7,0x2,0x1d)=r3               :cortex_a8_default
;;	  2-->   475 r3=sl 0>>0x5                      :cortex_a8_default
;;	  3-->   474 zxt(r7,0x2,0x1b)=r2               :cortex_a8_default
;;	  3-->   479 sl=zxt(sl,0x1,0x16)               :cortex_a8_default
;;	  4-->   476 zxt(r7,0x8,0x13)=r3               :cortex_a8_default
;;	  4-->   488 r1=sp+0x54                        :cortex_a8_default
;;	  5-->   484 zxt(r7,0x1,0x9)=sl                :cortex_a8_default
;;	  5-->   489 r2=sp+0x50                        :cortex_a8_default
;;	  6-->   487 r0=r7                             :cortex_a8_default
;;	  7-->   490 r0=call [`arch_bp_generic_fields']:cortex_a8_issue_branch
;;	 39-->   492 {cc=cmp(r0,0x0);r6=r0;}           :cortex_a8_default
;;	 41-->   493 pc={(cc!=0x0)?L524:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 570
;;   new tail = 493

;;   ======================================================
;;   -- basic block 40 from 495 to 498 -- after reload
;;   ======================================================

;;	  0-->   495 r3=[sp+0x50]                      :cortex_a8_load_store_1
;;	  2-->   496 r8=r8&r3                          :cortex_a8_default
;;	  3-->   497 cc=cmp(r8,r3)                     :cortex_a8_default
;;	  5-->   498 pc={(cc!=0x0)?L521:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 495
;;   new tail = 498

;;   ======================================================
;;   -- basic block 41 from 509 to 502 -- after reload
;;   ======================================================

;;	  0-->   509 r3=zxn([sp+0x30])                 :cortex_a8_load_store_1
;;	  0-->   507 {r7=r7>=0x0;clobber cc;}          :cortex_a8_default
;;	  1-->   647 r2=[sp+0x54]                      :cortex_a8_load_store_1
;;	  2-->   510 zxt(r3,0x1,0x0)=r7                :cortex_a8_default
;;	  2-->   503 [sp+0x3c]=r8                      :cortex_a8_load_store_1
;;	  3-->   511 [sp+0x30]=r3                      :cortex_a8_load_store_1
;;	  3-->   501 r2=sxn(r2)                        :cortex_a8_default
;;	  4-->   502 [sp+0x48]=r2                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 509
;;   new tail = 502

;;   ======================================================
;;   -- basic block 42 from 515 to 728 -- after reload
;;   ======================================================

;;	  0-->   515 r0=r5                             :cortex_a8_default
;;	  0-->   516 r1=sp+0x8                         :cortex_a8_default
;;	  1-->   517 r0=call [`modify_user_hw_breakpoin:cortex_a8_issue_branch
;;	 33-->   518 r6=r0                             :cortex_a8_default
;;	 33-->   728 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 33
;;   new head = 515
;;   new tail = 728

;;   ======================================================
;;   -- basic block 43 from 523 to 523 -- after reload
;;   ======================================================

;;	  0-->   523 r6=0xffffffffffffffea             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 523
;;   new tail = 523

;;   ======================================================
;;   -- basic block 44 from 526 to 730 -- after reload
;;   ======================================================

;;	  0-->   526 r0=r4                             :cortex_a8_default
;;	  1-->   527 call [`ptrace_put_breakpoints']   :cortex_a8_issue_branch
;;	  1-->   730 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 526
;;   new tail = 730

;;   ======================================================
;;   -- basic block 45 from 532 to 536 -- after reload
;;   ======================================================

;;	  0-->   532 r0=r4                             :cortex_a8_default
;;	  1-->   536 r0=call [`ptrace_request']        :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 532
;;   new tail = 536

;;   ======================================================
;;   -- basic block 46 from 537 to 732 -- after reload
;;   ======================================================

;;	  0-->   537 r6=r0                             :cortex_a8_default
;;	  0-->   732 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 537
;;   new tail = 732

;;   ======================================================
;;   -- basic block 47 from 542 to 734 -- after reload
;;   ======================================================

;;	  0-->   542 r6=0xfffffffffffffffd             :cortex_a8_default
;;	  0-->   734 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 542
;;   new tail = 734

;;   ======================================================
;;   -- basic block 48 from 547 to 547 -- after reload
;;   ======================================================

;;	  0-->   547 r6=0xfffffffffffffffb             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 547
;;   new tail = 547

;;   ======================================================
;;   -- basic block 49 from 554 to 661 -- after reload
;;   ======================================================

;;	  0-->   554 r0=r6                             :cortex_a8_default
;;	  0-->   560 use r0                            :nothing
;;	  0-->   661 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 554
;;   new tail = 661





arch_ptrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={48d,44u} r1={36d,20u} r2={49d,36u} r3={64d,53u} r4={2d,19u} r5={4d,22u} r6={17d,24u,1d} r7={17d,22u} r8={7d,11u} r10={3d,9u} r12={34d,24u} r13={3d,101u,2d} r14={24d,2u} r15={19d} r16={19d} r17={19d} r18={19d} r19={19d} r20={19d} r21={19d} r22={19d} r23={19d} r24={57d,43u} r25={1d} r27={19d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={19d} r38={19d} r39={19d} r40={19d} r41={19d} r42={19d} r43={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} r81={19d} r82={19d} r83={19d} r84={19d} r85={19d} r86={19d} r87={19d} r88={19d} r89={19d} r90={19d} r91={19d} r92={19d} r93={19d} r94={19d} r95={19d} r96={19d} r97={19d} r98={19d} r99={19d} r100={19d} r101={19d} r102={19d} r103={19d} r104={19d} r105={19d} r106={19d} r107={19d} r108={19d} r109={19d} r110={19d} r111={19d} r112={19d} r113={19d} r114={19d} r115={19d} r116={19d} r117={19d} r118={19d} r119={19d} r120={19d} r121={19d} r122={19d} r123={19d} r124={19d} r125={19d} r126={19d} r127={19d} 
;;    total ref usage 2889{2455d,430u,4e} in 269{250 regular + 19 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 657 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 657 6 2 2 arch/arm/kernel/ptrace.c:790 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -28 [0xffffffffffffffe4])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 10 sl))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 24 [0x18])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(insn:TI 2 657 10 2 arch/arm/kernel/ptrace.c:790 (set (reg/v/f:SI 4 r4 [orig:188 child ] [188])
        (reg:SI 0 r0 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ child ])
        (nil)))

(insn:TI 10 2 658 2 arch/arm/kernel/ptrace.c:794 (set (reg:SI 0 r0 [192])
        (plus:SI (reg/v:SI 1 r1 [orig:189 request ] [189])
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (nil))

(insn/f 658 10 659 2 arch/arm/kernel/ptrace.c:790 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -92 [0xffffffffffffffa4]))) 4 {*arm_addsi3} (nil))

(note 659 658 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 659 5 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (reg:SI 2 r2 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 11 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 5 r5 [orig:191 data ] [191])
        (reg:SI 3 r3 [ data ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 11 5 12 2 arch/arm/kernel/ptrace.c:794 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 0 r0 [192])
                        (const_int 27 [0x1b]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 0 r0 [192])
                                (const_int 4 [0x4]))
                            (label_ref 12)) [0 S4 A32])
                    (label_ref 530)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 12))
        ]) 265 {arm_casesi_internal} (expr_list:REG_DEAD (reg:SI 0 r0 [192])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (insn_list:REG_LABEL_TARGET 530 (nil)))))
;; End of basic block 2 -> ( 45 3 5 6 8 10 12 14 15 16 18 20 31)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  45 [7.7%] 
;; Succ edge  3 [7.7%] 
;; Succ edge  5 [7.7%] 
;; Succ edge  6 [7.7%] 
;; Succ edge  8 [7.7%] 
;; Succ edge  10 [7.7%] 
;; Succ edge  12 [7.7%] 
;; Succ edge  14 [7.7%] 
;; Succ edge  15 [7.7%] 
;; Succ edge  16 [7.7%] 
;; Succ edge  18 [7.7%] 
;; Succ edge  20 [7.7%] 
;; Succ edge  31 [7.7%] 

;; Insn is not within a basic block
(code_label 12 11 13 108 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 13 12 14 arch/arm/kernel/ptrace.c:794 (addr_vec:SI [
            (label_ref:SI 15)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 54)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 63)
            (label_ref:SI 86)
            (label_ref:SI 109)
            (label_ref:SI 133)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 157)
            (label_ref:SI 166)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 173)
            (label_ref:SI 197)
            (label_ref:SI 221)
            (label_ref:SI 358)
        ]) -1 (nil))

(barrier 14 13 15)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 15 14 16 3 96 "" [1 uses])

(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(note 18 17 21 3 NOTE_INSN_DELETED)

(note 21 18 22 3 NOTE_INSN_DELETED)

(note 22 21 23 3 NOTE_INSN_DELETED)

(note 23 22 25 3 NOTE_INSN_DELETED)

(note 25 23 26 3 NOTE_INSN_DELETED)

(note 26 25 638 3 NOTE_INSN_DELETED)

(insn:TI 638 26 639 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 2 r2 [orig:190 addr ] [190])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [195])
                (and:SI (reg:SI 2 r2 [orig:190 addr ] [190])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 639 638 27 3 arch/arm/kernel/ptrace.c:258 (set (reg:SI 2 r2 [195])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 2 r2 [195])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 27 639 28 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:SI 2 r2 [201])
                (ior:SI (geu:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                        (const_int 296 [0x128]))
                    (reg:SI 2 r2 [195])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 28 27 29 3 arch/arm/kernel/ptrace.c:258 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [201])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 29 28 30 3 arch/arm/kernel/ptrace.c:258 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 48 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  48 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 30 29 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 30 31 4 NOTE_INSN_DELETED)

(insn:TI 31 41 49 4 arch/arm/kernel/ptrace.c:268 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(insn 49 31 42 4 arch/arm/kernel/ptrace.c:271 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 42 49 39 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 6 r6 [205])
            (and:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int -4 [0xfffffffffffffffc])))) 2295 {neon_vornv2di+28} (nil))

(insn:TI 39 42 43 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
            (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                    (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 43 39 648 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 6 r6 [206])
            (plus:SI (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
                (reg:SI 6 r6 [205])))) 2268 {neon_vornv2di+1} (nil))

(insn 648 43 45 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [203])
            (const_int 8112 [0x1fb0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 8112 [0x1fb0])
        (nil)))

(insn:TI 45 648 50 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:179 tmp ] [179])
            (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                    (reg:SI 3 r3 [203])) [0 <variable>.uregs S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 6 r6 [206])
            (expr_list:REG_DEAD (reg:SI 3 r3 [203])
                (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                            (const_int 8112 [0x1fb0])) [0 <variable>.uregs S4 A32])
                    (nil))))))

(insn:TI 50 45 701 4 arch/arm/kernel/ptrace.c:271 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592343))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(jump_insn:TI 701 50 702 4 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 702 701 54)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 54 702 55 5 97 "" [1 uses])

(note 55 54 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 55 56 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 1 r1)
        (reg:SI 2 r2 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:190 addr ] [190])
        (nil)))

(insn 56 57 58 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 56 59 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:191 data ] [191])
        (nil)))

(call_insn:TI 59 58 703 5 arch/arm/kernel/ptrace.c:800 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_write_user") [flags 0x3] <function_decl 0x1155b480 ptrace_write_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 703 59 704 5 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 704 703 63)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 63 704 64 6 98 "" [1 uses])

(note 64 63 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 66 64 650 6 NOTE_INSN_DELETED)

(insn:TI 650 66 635 6 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 635 650 636 6 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 636 635 68 6 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 3 r3 [208])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 68 636 69 6 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:210 <variable>.addr_limit ] [210])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [208])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [208])
        (nil)))

(insn:TI 69 68 70 6 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:176 flag ] [176])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:177 roksum ] [177])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:177 roksum ] [177])
            (nil))))

(insn:TI 70 69 71 6 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:176 flag ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 71 70 72 6 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 48 7)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  7 [29.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [29.0%]  (fallthru)
(note 72 71 78 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 78 72 80 7 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 80 78 79 7 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 79 80 81 7 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 81 79 77 7 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn:TI 77 81 76 7 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 76 77 82 7 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:176 flag ] [176])
        (nil)))

(call_insn 82 76 705 7 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_get") [flags 0x3] <function_decl 0x1155be80 gpr_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 705 82 706 7 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 706 705 86)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 86 706 87 8 99 "" [1 uses])

(note 87 86 89 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 89 87 651 8 NOTE_INSN_DELETED)

(insn:TI 651 89 633 8 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 633 651 634 8 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 634 633 91 8 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 3 r3 [214])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 91 634 92 8 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:216 <variable>.addr_limit ] [216])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [214])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [214])
        (nil)))

(insn:TI 92 91 93 8 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:173 flag ] [173])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:174 roksum ] [174])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:174 roksum ] [174])
            (nil))))

(insn:TI 93 92 94 8 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:173 flag ] [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 94 93 95 8 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 8 -> ( 48 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  9 [29.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 95 94 101 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 95 103 9 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 102 9 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 102 103 104 9 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 104 102 100 9 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn:TI 100 104 99 9 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 99 100 105 9 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:173 flag ] [173])
        (nil)))

(call_insn 105 99 707 9 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_set") [flags 0x3] <function_decl 0x1155bf80 gpr_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 707 105 708 9 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 708 707 109)

;; Start of basic block ( 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 109 708 110 10 100 "" [1 uses])

(note 110 109 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 112 110 652 10 NOTE_INSN_DELETED)

(insn:TI 652 112 631 10 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 631 652 632 10 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 632 631 114 10 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 3 r3 [220])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 114 632 115 10 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:222 <variable>.addr_limit ] [222])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [220])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [220])
        (nil)))

(insn:TI 115 114 116 10 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:170 flag ] [170])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:171 roksum ] [171])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:171 roksum ] [171])
            (nil))))

(insn:TI 116 115 117 10 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:170 flag ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 117 116 118 10 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 48 11)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 118 117 125 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 118 127 11 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 127 125 126 11 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 126 127 128 11 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 128 126 124 11 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn:TI 124 128 123 11 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 123 124 129 11 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:170 flag ] [170])
        (nil)))

(call_insn 129 123 709 11 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_get") [flags 0x3] <function_decl 0x11582080 fpa_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 709 129 710 11 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 710 709 133)

;; Start of basic block ( 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 133 710 134 12 101 "" [1 uses])

(note 134 133 136 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 136 134 653 12 NOTE_INSN_DELETED)

(insn:TI 653 136 629 12 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 629 653 630 12 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 630 629 138 12 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 3 r3 [227])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 138 630 139 12 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:229 <variable>.addr_limit ] [229])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [227])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [227])
        (nil)))

(insn:TI 139 138 140 12 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:167 flag ] [167])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:168 roksum ] [168])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:168 roksum ] [168])
            (nil))))

(insn:TI 140 139 141 12 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:167 flag ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 141 140 142 12 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 48 13)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 142 141 149 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 149 142 151 13 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 151 149 150 13 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 150 151 152 13 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 152 150 148 13 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn:TI 148 152 147 13 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 147 148 153 13 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:167 flag ] [167])
        (nil)))

(call_insn 153 147 711 13 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_set") [flags 0x3] <function_decl 0x11582180 fpa_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 711 153 712 13 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 712 711 157)

;; Start of basic block ( 2) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 157 712 158 14 102 "" [1 uses])

(note 158 157 159 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 159 158 161 14 arch/arm/kernel/ptrace.c:842 (set (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 161 159 160 14 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 160 161 162 14 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 2 r2 [ __r2 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
                (const_int 96 [0x60])) [0 <variable>.tp_value+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
        (nil)))

(insn:TI 162 160 713 14 arch/arm/kernel/ptrace.c:842 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592319))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(jump_insn:TI 713 162 714 14 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 714 713 166)

;; Start of basic block ( 2) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6]
;; live  kill	

;; Pred edge  2 [7.7%] 
(code_label 166 714 167 15 103 "" [1 uses])

(note 167 166 168 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 168 167 170 15 arch/arm/kernel/ptrace.c:847 (set (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 170 168 169 15 arch/arm/kernel/ptrace.c:848 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 169 170 715 15 arch/arm/kernel/ptrace.c:847 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
        (nil)))

(jump_insn 715 169 716 15 arch/arm/kernel/ptrace.c:849 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  49 [100.0%] 

(barrier 716 715 173)

;; Start of basic block ( 2) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 173 716 174 16 104 "" [1 uses])

(note 174 173 176 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 176 174 654 16 NOTE_INSN_DELETED)

(insn:TI 654 176 627 16 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 627 654 628 16 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 628 627 178 16 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 3 r3 [236])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 178 628 179 16 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:238 <variable>.addr_limit ] [238])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [236])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [236])
        (nil)))

(insn:TI 179 178 180 16 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:164 flag ] [164])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:165 roksum ] [165])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:165 roksum ] [165])
            (nil))))

(insn:TI 180 179 181 16 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:164 flag ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 181 180 182 16 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 16 -> ( 48 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  17 [29.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  16 [29.0%]  (fallthru)
(note 182 181 189 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 189 182 191 17 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 191 189 190 17 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 190 191 192 17 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 192 190 188 17 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn:TI 188 192 187 17 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 187 188 193 17 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:164 flag ] [164])
        (nil)))

(call_insn 193 187 717 17 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get") [flags 0x3] <function_decl 0x11582280 vfp_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 717 193 718 17 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 718 717 197)

;; Start of basic block ( 2) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 197 718 198 18 105 "" [1 uses])

(note 198 197 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 200 198 655 18 NOTE_INSN_DELETED)

(insn:TI 655 200 625 18 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 625 655 626 18 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 626 625 202 18 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 3 r3 [243])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 202 626 203 18 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:245 <variable>.addr_limit ] [245])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [243])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [243])
        (nil)))

(insn:TI 203 202 204 18 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:161 flag ] [161])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:162 roksum ] [162])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:162 roksum ] [162])
            (nil))))

(insn:TI 204 203 205 18 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:161 flag ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 205 204 206 18 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 18 -> ( 48 19)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  19 [29.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  18 [29.0%]  (fallthru)
(note 206 205 213 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 213 206 215 19 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 215 213 214 19 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 214 215 216 19 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 216 214 212 19 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn:TI 212 216 211 19 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 211 212 217 19 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:161 flag ] [161])
        (nil)))

(call_insn 217 211 719 19 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_set") [flags 0x3] <function_decl 0x11582380 vfp_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn:TI 719 217 720 19 (set (pc)
        (label_ref 665)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 720 719 221)

;; Start of basic block ( 2) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 221 720 222 20 106 "" [1 uses])

(note 222 221 225 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 225 222 223 20 NOTE_INSN_DELETED)

(insn:TI 223 225 224 20 arch/arm/kernel/ptrace.c:879 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 224 223 226 20 arch/arm/kernel/ptrace.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 226 224 227 20 arch/arm/kernel/ptrace.c:879 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 227 226 228 20 arch/arm/kernel/ptrace.c:879 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 20 -> ( 47 21)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  47 [19.1%] 
;; Succ edge  21 [80.9%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  20 [80.9%]  (fallthru)
(note 228 227 230 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 230 228 231 21 arch/arm/kernel/ptrace.c:472 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 231 230 232 21 arch/arm/kernel/ptrace.c:472 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  22 [29.0%]  (fallthru)
;; Succ edge  23 [71.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%]  (fallthru)
(note 232 231 243 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 243 232 245 22 NOTE_INSN_DELETED)

(note 245 243 247 22 NOTE_INSN_DELETED)

(note 247 245 250 22 NOTE_INSN_DELETED)

(note 250 247 233 22 NOTE_INSN_DELETED)

(insn:TI 233 250 234 22 arch/arm/kernel/ptrace.c:432 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 234 233 235 22 arch/arm/kernel/ptrace.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 235 234 236 22 arch/arm/kernel/ptrace.c:432 (set (reg:SI 7 r7 [orig:159 D.28052 ] [159])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 236 235 237 22 arch/arm/kernel/ptrace.c:433 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 237 236 251 22 arch/arm/kernel/ptrace.c:433 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 251 237 238 22 arch/arm/kernel/ptrace.c:443 (set (reg:SI 7 r7 [orig:254 D.28052 ] [254])
        (zero_extend:SI (reg:QI 7 r7 [orig:159 D.28052 ] [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 238 251 239 22 arch/arm/kernel/ptrace.c:433 (set (reg:SI 8 r8 [orig:158 D.28053 ] [158])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 239 238 248 22 arch/arm/kernel/ptrace.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_debug_arch") [flags 0x41] <function_decl 0x10ad9400 arch_get_debug_arch>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 248 239 240 22 arch/arm/kernel/ptrace.c:441 (set (reg:SI 8 r8 [orig:252 D.28053 ] [252])
        (zero_extend:SI (reg:QI 8 r8 [orig:158 D.28053 ] [158]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 240 248 242 22 arch/arm/kernel/ptrace.c:434 (set (reg:SI 6 r6 [250])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 242 240 246 22 arch/arm/kernel/ptrace.c:435 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_max_wp_len") [flags 0x41] <function_decl 0x10ad9480 arch_get_max_wp_len>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 246 242 249 22 arch/arm/kernel/ptrace.c:439 (set (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
        (ior:SI (ashift:SI (reg:SI 6 r6 [250])
                (const_int 8 [0x8]))
            (reg:SI 0 r0))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 249 246 252 22 arch/arm/kernel/ptrace.c:441 (set (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
        (ior:SI (ashift:SI (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
                (const_int 8 [0x8]))
            (reg:SI 8 r8 [orig:252 D.28053 ] [252]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
        (nil)))

(insn:TI 252 249 721 22 arch/arm/kernel/ptrace.c:443 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
                (const_int 8 [0x8]))
            (reg:SI 7 r7 [orig:254 D.28052 ] [254]))) 270 {*arith_shiftsi} (nil))

(jump_insn 721 252 722 22 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 30)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  30 [100.0%] 

(barrier 722 721 255)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%] 
(code_label 255 722 256 23 114 "" [1 uses])

(note 256 255 260 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 260 256 265 23 arch/arm/kernel/ptrace.c:358 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 2345 {neon_vornv2di+78} (nil))

(insn 265 260 268 23 arch/arm/kernel/ptrace.c:359 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 6 r6 [orig:190 addr ] [190])))) 2270 {neon_vornv2di+3} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn:TI 268 265 269 23 arch/arm/kernel/ptrace.c:360 (set (reg:SI 3 r3 [255])
        (plus:SI (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn:TI 269 268 270 23 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 3 r3 [orig:153 idx ] [153])
        (ashiftrt:SI (reg:SI 3 r3 [255])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 270 269 271 23 arch/arm/kernel/ptrace.c:476 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:153 idx ] [153])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 271 270 276 23 arch/arm/kernel/ptrace.c:476 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 23 -> ( 43 24)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  23 [50.0%]  (fallthru)
(code_label 276 271 277 24 118 "" [0 uses])

(note 277 276 278 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 278 277 280 24 NOTE_INSN_DELETED)

(note 280 278 293 24 NOTE_INSN_DELETED)

(note 293 280 281 24 NOTE_INSN_DELETED)

(insn:TI 281 293 283 24 arch/arm/kernel/ptrace.c:481 (set (reg:SI 3 r3 [259])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:153 idx ] [153])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(insn:TI 283 281 284 24 arch/arm/kernel/ptrace.c:481 (set (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [259])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 284 283 292 24 arch/arm/kernel/ptrace.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 292 284 294 24 arch/arm/kernel/ptrace.c:487 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                    (const_int 212 [0xd4])) [0 <variable>.hw.D.25978.D.25977.info.ctrl+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 294 292 285 24 arch/arm/kernel/ptrace.c:487 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
            (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
                (const_int 8 [0x8])
                (const_int 19 [0x13])))) 2323 {neon_vornv2di+56} (nil))

(jump_insn 285 294 723 24 arch/arm/kernel/ptrace.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 24 -> ( 27 25)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  27 [85.0%] 
;; Succ edge  25 [15.0%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [15.0%]  (fallthru)
(note 723 285 724 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 724 723 725 25 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 30)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  30 [100.0%] 

(barrier 725 724 303)

;; Start of basic block ( 27) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  27 [91.0%] 
(code_label 303 725 298 26 122 "" [1 uses])

(note 298 303 299 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 299 298 300 26 NOTE_INSN_DELETED)

(insn:TI 300 299 301 26 arch/arm/kernel/ptrace.c:494 (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (lshiftrt:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 26 24) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [100.0%]  (fallthru,dfs_back)
;; Pred edge  24 [85.0%] 
(code_label 301 300 302 27 121 "" [1 uses])

(note 302 301 304 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 304 302 305 27 NOTE_INSN_DELETED)

(insn:TI 305 304 306 27 arch/arm/kernel/ptrace.c:493 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 306 305 307 27 arch/arm/kernel/ptrace.c:493 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 27 -> ( 26 28)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  26 [91.0%] 
;; Succ edge  28 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  27 [9.0%]  (fallthru,loop_exit)
(note 307 306 308 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 308 307 309 28 NOTE_INSN_DELETED)

(insn:TI 309 308 312 28 arch/arm/kernel/ptrace.c:496 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (nil)))

(insn:TI 312 309 310 28 arch/arm/kernel/ptrace.c:497 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                    (const_int 176 [0xb0])) [0 <variable>.attr.D.23452.bp_addr+0 S4 A64]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 310 312 316 28 arch/arm/kernel/ptrace.c:496 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 337)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  30 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  28 [50.0%]  (fallthru)
(note 316 310 319 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 319 316 321 29 NOTE_INSN_DELETED)

(note 321 319 322 29 NOTE_INSN_DELETED)

(note 322 321 326 29 NOTE_INSN_DELETED)

(note 326 322 327 29 NOTE_INSN_DELETED)

(note 327 326 329 29 NOTE_INSN_DELETED)

(note 329 327 331 29 NOTE_INSN_DELETED)

(note 331 329 333 29 NOTE_INSN_DELETED)

(note 333 331 335 29 NOTE_INSN_DELETED)

(note 335 333 317 29 NOTE_INSN_DELETED)

(insn:TI 317 335 323 29 arch/arm/kernel/ptrace.c:497 (set (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (nil)))

(insn:TI 323 317 320 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [269])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(insn 320 323 330 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 0 r0 [266])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))) 124 {extzv_t2} (nil))

(insn:TI 330 320 334 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 7 r7 [276])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))) 124 {extzv_t2} (nil))

(insn 334 330 324 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 2 r2 [280])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))) 124 {extzv_t2} (nil))

(insn:TI 324 334 325 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [270])
        (ashift:SI (reg:SI 1 r1 [269])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 325 324 328 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [271])
        (ior:SI (ashift:SI (reg:SI 0 r0 [266])
                (const_int 22 [0x16]))
            (reg:SI 1 r1 [270]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0 [266])
        (nil)))

(insn:TI 328 325 332 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [274])
        (ior:SI (lshiftrt:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
                (const_int 31 [0x1f]))
            (reg:SI 1 r1 [271]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [271])
        (nil)))

(insn:TI 332 328 336 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [278])
        (ior:SI (ashift:SI (reg:SI 7 r7 [276])
                (const_int 3 [0x3]))
            (reg:SI 3 r3 [274]))) 270 {*arith_shiftsi} (nil))

(insn:TI 336 332 337 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg:SI 2 r2 [280])
                (const_int 1 [0x1]))
            (reg:SI 3 r3 [278]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [278])
        (nil)))
;; End of basic block 29 -> ( 30)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  30 [100.0%]  (fallthru)

;; Start of basic block ( 29 22 28 25) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  29 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
;; Pred edge  28 [50.0%] 
;; Pred edge  25 [100.0%] 
(code_label 337 336 338 30 115 ("put") [3 uses])

(note 338 337 342 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 342 338 352 30 NOTE_INSN_DELETED)

(note 352 342 340 30 ("out") NOTE_INSN_DELETED_LABEL 119)

(insn:TI 340 352 341 30 arch/arm/kernel/ptrace.c:503 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 341 340 568 30 arch/arm/kernel/ptrace.c:503 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592350))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(insn:TI 568 341 569 30 arch/arm/kernel/ptrace.c:504 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 0 r0 [ __e ])
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [orig:151 D.28058 ] [151])
                (reg/v:SI 0 r0 [ __e ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(insn:TI 569 568 726 30 arch/arm/kernel/ptrace.c:504 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 6 r6 [orig:151 D.28058 ] [151])
            (const_int -14 [0xfffffffffffffff2]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 726 569 727 30 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 727 726 358)

;; Start of basic block ( 2) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 358 727 359 31 107 "" [1 uses])

(note 359 358 362 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 362 359 360 31 NOTE_INSN_DELETED)

(insn:TI 360 362 361 31 arch/arm/kernel/ptrace.c:887 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 361 360 363 31 arch/arm/kernel/ptrace.c:887 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 363 361 364 31 arch/arm/kernel/ptrace.c:887 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 364 363 365 31 arch/arm/kernel/ptrace.c:887 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 31 -> ( 47 32)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  47 [19.1%] 
;; Succ edge  32 [80.9%]  (fallthru)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  31 [80.9%]  (fallthru)
(note 365 364 367 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 367 365 368 32 arch/arm/kernel/ptrace.c:519 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 368 367 374 32 arch/arm/kernel/ptrace.c:519 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 44 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  44 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 374 368 378 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 378 374 384 33 arch/arm/kernel/ptrace.c:521 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 2345 {neon_vornv2di+78} (nil))

(insn 384 378 388 33 arch/arm/kernel/ptrace.c:359 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 6 r6 [orig:190 addr ] [190])))) 2270 {neon_vornv2di+3} (nil))

(insn:TI 388 384 379 33 arch/arm/kernel/ptrace.c:360 (set (reg:SI 7 r7 [282])
        (plus:SI (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 379 388 385 33 arch/arm/kernel/ptrace.c:524 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (const_int 4 [0x4]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(insn:TI 385 379 389 33 arch/arm/kernel/ptrace.c:522 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (const_int 3 [0x3]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(insn:TI 389 385 390 33 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 7 r7 [orig:145 idx ] [145])
        (ashiftrt:SI (reg:SI 7 r7 [282])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 390 389 391 33 arch/arm/kernel/ptrace.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 391 390 392 33 arch/arm/kernel/ptrace.c:527 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 33 -> ( 43 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [50.0%] 
;; Succ edge  34 [50.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 10 [sl] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  33 [50.0%]  (fallthru)
(note 392 391 396 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 396 392 393 34 NOTE_INSN_DELETED)

(insn:TI 393 396 394 34 arch/arm/kernel/ptrace.c:532 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 394 393 397 34 arch/arm/kernel/ptrace.c:532 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (set (reg/v:SI 2 r2 [ __r2 ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=r") 1 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg:QI 14 lr)
            (nil))))

(insn:TI 397 394 395 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [ __e ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(insn 395 397 400 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg/v:SI 10 sl [orig:147 user_val ] [147])
        (reg/v:SI 2 r2 [ __r2 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (nil)))

(insn:TI 400 395 398 34 arch/arm/kernel/ptrace.c:533 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 398 400 404 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  34 [50.0%]  (fallthru)
(note 404 398 407 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(note 407 404 405 35 NOTE_INSN_DELETED)

(insn:TI 405 407 408 35 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [283])
        (plus:SI (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 198 [0xc6]))) 4 {*arm_addsi3} (nil))

(insn:TI 408 405 410 35 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [286])
        (plus:SI (mult:SI (reg:SI 7 r7 [283])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(insn:TI 410 408 411 35 arch/arm/kernel/ptrace.c:537 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 411 410 412 35 arch/arm/kernel/ptrace.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 412 411 413 35 arch/arm/kernel/ptrace.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 432)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  36 [6.7%]  (fallthru)
;; Succ edge  38 [93.3%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  35 [6.7%]  (fallthru)
(note 413 412 414 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 414 413 415 36 arch/arm/kernel/ptrace.c:539 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 415 414 416 36 arch/arm/kernel/ptrace.c:539 (set (reg:SI 1 r1)
        (reg/v:SI 8 r8 [orig:146 implied_type ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 416 415 418 36 arch/arm/kernel/ptrace.c:539 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_hbp_create") [flags 0x3] <function_decl 0x1155bb80 ptrace_hbp_create>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 418 416 417 36 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:148 bp ] [148])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 417 418 421 36 arch/arm/kernel/ptrace.c:539 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn:TI 421 417 419 36 include/linux/err.h:29 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
            (reg/f:SI 0 r0 [orig:148 bp ] [148]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 419 421 425 36 include/linux/err.h:34 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 36 -> ( 37 44)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  37 [100.0%]  (fallthru)
;; Succ edge  44 [0.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [100.0%]  (fallthru)
(note 425 419 431 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn:TI 431 425 432 37 arch/arm/kernel/ptrace.c:544 (set (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg/f:SI 0 r0 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:148 bp ] [148])
        (nil)))
;; End of basic block 37 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 35 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  35 [93.3%] 
;; Pred edge  37 [100.0%]  (fallthru)
(code_label 432 431 433 38 131 "" [1 uses])

(note 433 432 434 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 434 433 435 38 NOTE_INSN_DELETED)

(note 435 434 442 38 NOTE_INSN_DELETED)

(note 442 435 437 38 NOTE_INSN_DELETED)

(insn:TI 437 442 438 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 438 437 439 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(insn:TI 439 438 440 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(call_insn:TI 440 439 443 38 arch/arm/kernel/ptrace.c:547 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 443 440 565 38 arch/arm/kernel/ptrace.c:549 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (nil)))

(insn:TI 565 443 566 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:338+4 ] [338])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 566 565 567 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 attr.D.23452.bp_addr+0 S4 A64])
            (reg/v:SI 10 sl [orig:147 user_val ] [147]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 567 566 444 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 68 [0x44])) [0 attr.D.23452.bp_addr+4 S4 A32])
            (reg:SI 3 r3 [orig:338+4 ] [338]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:338+4 ] [338])
        (nil)))

(jump_insn 444 567 451 38 arch/arm/kernel/ptrace.c:549 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 512)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 38 -> ( 39 42)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  39 [29.0%]  (fallthru)
;; Succ edge  42 [71.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  38 [29.0%]  (fallthru)
(note 451 444 453 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 453 451 459 39 NOTE_INSN_DELETED)

(note 459 453 467 39 NOTE_INSN_DELETED)

(note 467 459 477 39 NOTE_INSN_DELETED)

(note 477 467 485 39 NOTE_INSN_DELETED)

(note 485 477 486 39 NOTE_INSN_DELETED)

(note 486 485 491 39 NOTE_INSN_DELETED)

(note 491 486 570 39 NOTE_INSN_DELETED)

(insn:TI 570 491 461 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 461 570 458 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (reg:SI 3 r3 [306])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 1 [0x1]))) 124 {extzv_t2} (nil))

(insn:TI 458 461 469 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 31 [0x1f]))
        (reg/v:SI 10 sl [orig:147 user_val ] [147])) 77 {insv_t2} (nil))

(insn 469 458 466 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (reg:SI 2 r2 [312])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 466 469 475 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))
        (reg:SI 3 r3 [306])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 3 r3 [306])
        (nil)))

(insn 475 466 474 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:41 (set (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
        (lshiftrt:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 474 475 479 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))
        (reg:SI 2 r2 [312])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 2 r2 [312])
        (nil)))

(insn 479 474 476 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (reg:SI 10 sl [319])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 1 [0x1])
            (const_int 22 [0x16]))) 124 {extzv_t2} (nil))

(insn:TI 476 479 488 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:42 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])) 77 {insv_t2} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
        (nil)))

(insn 488 476 484 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn:TI 484 488 489 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))
        (reg:SI 10 sl [319])) 77 {insv_t2} (nil))

(insn 489 484 487 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 487 489 490 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:184 ctrl ] [184])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 490 487 492 39 arch/arm/kernel/ptrace.c:555 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_bp_generic_fields") [flags 0x41] <function_decl 0x10ad9200 arch_bp_generic_fields>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 492 490 493 39 arch/arm/kernel/ptrace.c:556 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 493 492 494 39 arch/arm/kernel/ptrace.c:556 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 39 -> ( 44 40)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [50.0%] 
;; Succ edge  40 [50.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  39 [50.0%]  (fallthru)
(note 494 493 495 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn:TI 495 494 496 40 arch/arm/kernel/ptrace.c:559 (set (reg:SI 3 r3 [orig:143 gen_type.377 ] [143])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])
        (nil)))

(insn:TI 496 495 497 40 arch/arm/kernel/ptrace.c:559 (set (reg:SI 8 r8 [orig:144 D.28101 ] [144])
        (and:SI (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 497 496 498 40 arch/arm/kernel/ptrace.c:559 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:144 D.28101 ] [144])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:143 gen_type.377 ] [143])
        (nil)))

(jump_insn:TI 498 497 499 40 arch/arm/kernel/ptrace.c:559 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 40 -> ( 43 41)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [72.0%] 
;; Succ edge  41 [28.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  40 [28.0%]  (fallthru)
(note 499 498 504 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 504 499 505 41 NOTE_INSN_DELETED)

(note 505 504 506 41 NOTE_INSN_DELETED)

(note 506 505 508 41 NOTE_INSN_DELETED)

(note 508 506 509 41 NOTE_INSN_DELETED)

(insn:TI 509 508 507 41 arch/arm/kernel/ptrace.c:566 (set (reg:SI 3 r3)
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                    (const_int 48 [0x30])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 507 509 647 41 arch/arm/kernel/ptrace.c:566 (parallel [
            (set (reg:SI 7 r7 [332])
                (ge:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 647 507 510 41 arch/arm/kernel/ptrace.c:564 (set (reg:SI 2 r2 [orig:326 gen_len ] [326])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])
        (nil)))

(insn:TI 510 647 503 41 arch/arm/kernel/ptrace.c:566 (set (zero_extract:SI (reg:SI 3 r3 [orig:333+40 ] [333])
            (const_int 1 [0x1])
            (const_int 0 [0x0]))
        (reg:SI 7 r7 [332])) 77 {insv_t2} (nil))

(insn 503 510 511 41 arch/arm/kernel/ptrace.c:565 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 attr.bp_type+0 S4 A32])
        (reg:SI 8 r8 [orig:144 D.28101 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 511 503 501 41 arch/arm/kernel/ptrace.c:566 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0+40 S1 A64])
        (reg:QI 3 r3 [orig:333+40 ] [333])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 3 r3 [orig:333+40 ] [333])
        (nil)))

(insn 501 511 502 41 arch/arm/kernel/ptrace.c:564 (set (reg:DI 2 r2 [orig:327 gen_len ] [327])
        (sign_extend:DI (reg:SI 2 r2 [orig:326 gen_len ] [326]))) 140 {*arm_extendsidi2} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 attr.D.23456.bp_len+0 S8 A64])
        (nil)))

(insn:TI 502 501 512 41 arch/arm/kernel/ptrace.c:564 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 2 r2 [orig:327 gen_len ] [327])) 163 {*arm_movdi} (nil))
;; End of basic block 41 -> ( 42)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  42 [100.0%]  (fallthru)

;; Start of basic block ( 41 38) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  38 [71.0%] 
(code_label 512 502 513 42 134 "" [1 uses])

(note 513 512 514 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 514 513 515 42 NOTE_INSN_DELETED)

(insn:TI 515 514 516 42 arch/arm/kernel/ptrace.c:569 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 516 515 517 42 arch/arm/kernel/ptrace.c:569 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 517 516 518 42 arch/arm/kernel/ptrace.c:569 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("modify_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524780 modify_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 518 517 728 42 arch/arm/kernel/ptrace.c:569 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 728 518 729 42 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 729 728 521)

;; Start of basic block ( 40 33 23) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  40 [72.0%] 
;; Pred edge  33 [50.0%] 
;; Pred edge  23 [50.0%] 
(code_label 521 729 522 43 129 ("out") [3 uses])

(note 522 521 523 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn:TI 523 522 524 43 arch/arm/kernel/ptrace.c:528 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%]  (fallthru)

;; Start of basic block ( 43 34 36 32 39 30 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  34 [50.0%] 
;; Pred edge  36 [0.0%] 
;; Pred edge  32 [50.0%] 
;; Pred edge  39 [50.0%] 
;; Pred edge  30 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 524 523 525 44 126 "" [6 uses])

(note 525 524 526 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 526 525 527 44 arch/arm/kernel/ptrace.c:892 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 527 526 730 44 arch/arm/kernel/ptrace.c:892 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 730 527 731 44 arch/arm/kernel/ptrace.c:893 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 44 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 731 730 530)

;; Start of basic block ( 2) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 530 731 531 45 95 "" [17 uses])

(note 531 530 532 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 532 531 536 45 arch/arm/kernel/ptrace.c:897 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 536 532 665 45 arch/arm/kernel/ptrace.c:897 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_request") [flags 0x41] <function_decl 0x1109c680 ptrace_request>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 45 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%]  (fallthru)

;; Start of basic block ( 45 14 4 5 7 9 11 13 17 19) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  45 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 665 536 663 46 136 "" [9 uses])

(note 663 665 537 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn:TI 537 663 732 46 arch/arm/kernel/ptrace.c:897 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 732 537 733 46 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 46 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 733 732 540)

;; Start of basic block ( 20 31) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  20 [19.1%] 
;; Pred edge  31 [19.1%] 
(code_label 540 733 541 47 113 "" [2 uses])

(note 541 540 542 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn:TI 542 541 734 47 arch/arm/kernel/ptrace.c:880 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -3 [0xfffffffffffffffd])) 167 {*arm_movsi_insn} (nil))

(jump_insn 734 542 735 47 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 47 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 735 734 545)

;; Start of basic block ( 18 16 3 6 8 10 12) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  18 [71.0%] 
;; Pred edge  16 [71.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [71.0%] 
;; Pred edge  8 [71.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  12 [71.0%] 
(code_label 545 735 546 48 109 "" [7 uses])

(note 546 545 547 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn:TI 547 546 548 48 include/linux/regset.h:362 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 48 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  49 [100.0%]  (fallthru)

;; Start of basic block ( 48 44 46 15 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  48 [100.0%]  (fallthru)
;; Pred edge  44 [100.0%] 
;; Pred edge  46 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  47 [100.0%] 
(code_label 548 547 549 49 112 "" [4 uses])

(note 549 548 554 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn:TI 554 549 560 49 arch/arm/kernel/ptrace.c:902 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:181 ret ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 560 554 660 49 arch/arm/kernel/ptrace.c:902 (use (reg/i:SI 0 r0)) -1 (nil))

(note 660 560 661 49 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 661 660 662 49 arch/arm/kernel/ptrace.c:902 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 49 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 662 661 646)

(note 646 662 649 NOTE_INSN_DELETED)

(note 649 646 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_hbptriggered (ptrace_hbptriggered)[0:1550]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 12 (  1.5)


ptrace_hbptriggered

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={5d,4u} r2={9d,7u} r3={9d,9u} r12={2d,2u} r13={3d,17u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 197{148d,48u,1e} in 34{33 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]

( 5 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]

( 3 )->[4]->( 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]

( 3 )->[5]->( 3 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]

( 6 4 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 85 to worklist
  Adding insn 20 to worklist
  Adding insn 91 to worklist
  Adding insn 35 to worklist
  Adding insn 89 to worklist
  Adding insn 59 to worklist
  Adding insn 46 to worklist
  Adding insn 51 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
Finished finding needed instructions:
processing block 7 lr out =  13 [sp] 14 [lr]
  Adding insn 80 to worklist
  Adding insn 58 to worklist
  Adding insn 56 to worklist
  Adding insn 45 to worklist
  Adding insn 76 to worklist
  Adding insn 50 to worklist
  Adding insn 75 to worklist
  Adding insn 83 to worklist
processing block 4 lr out =  0 [r0] 3 [r3] 13 [sp]
  Adding insn 42 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
processing block 6 lr out =  0 [r0] 3 [r3] 13 [sp]
  Adding insn 37 to worklist
processing block 5 lr out =  0 [r0] 2 [r2] 3 [r3] 13 [sp]
  Adding insn 34 to worklist
  Adding insn 31 to worklist
processing block 3 lr out =  0 [r0] 2 [r2] 3 [r3] 13 [sp]
  Adding insn 19 to worklist
  Adding insn 32 to worklist
  Adding insn 18 to worklist
processing block 2 lr out =  0 [r0] 2 [r2] 3 [r3] 13 [sp]
  Adding insn 15 to worklist
  Adding insn 16 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 82 to worklist
  Adding insn 86 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 85 to 15 -- after reload
;;   ======================================================

;;	  0-->    85 {[--sp]=unspec[lr] 2;}            :cortex_a8_load_store_2
;;	  1-->    86 sp=sp-0x84                        :cortex_a8_default
;;	  2-->    82 r1=sp                             :cortex_a8_default
;;	  2-->    16 r3=0x0                            :cortex_a8_default
;;	  3-->    77 r2=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  4-->    78 r2=r2&0xffffffffffffffc0          :cortex_a8_default
;;	  6-->    15 r2=[r2+0xc]                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 85
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 18 to 20 -- after reload
;;   ======================================================

;;	  0-->    18 r1=[r2+0x31c]                     :cortex_a8_load_store_1
;;	  0-->    32 r2=r2+0x4                         :cortex_a8_default
;;	  2-->    19 cc=cmp(r1,r0)                     :cortex_a8_default
;;	  4-->    20 pc={(cc!=0x0)?L29:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 18
;;   new tail = 20

;;   ======================================================
;;   -- basic block 4 from 22 to 91 -- after reload
;;   ======================================================

;;	  0-->    22 r3=r3<<0x1                        :cortex_a8_default
;;	  1-->    23 r3=r3+0x1                         :cortex_a8_default
;;	  2-->    24 cc=cmp(r3,0x20)                   :cortex_a8_default
;;	  3-->    42 (cc>0x0) r3=0x20-r3               :cortex_a8_default
;;	  3-->    91 pc=L43                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 22
;;   new tail = 91

;;   ======================================================
;;   -- basic block 5 from 31 to 35 -- after reload
;;   ======================================================

;;	  0-->    31 r3=r3+0x1                         :cortex_a8_default
;;	  1-->    34 cc=cmp(r3,0x20)                   :cortex_a8_default
;;	  3-->    35 pc={(cc!=0x0)?L33:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 31
;;   new tail = 35

;;   ======================================================
;;   -- basic block 6 from 37 to 37 -- after reload
;;   ======================================================

;;	  0-->    37 r3=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 37
;;   new tail = 37

;;   ======================================================
;;   -- basic block 7 from 83 to 89 -- after reload
;;   ======================================================

;;	  0-->    83 r1=sp                             :cortex_a8_default
;;	  0-->    50 lr=[r0+0xcc]                      :cortex_a8_load_store_1
;;	  1-->    75 r2=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    45 ip=0x5                            :cortex_a8_default
;;	  2-->    76 r2=r2&0xffffffffffffffc0          :cortex_a8_default
;;	  2-->    56 r0=ip                             :cortex_a8_default
;;	  4-->    58 r2=[r2+0xc]                       :cortex_a8_load_store_1
;;	  5-->    47 [sp+0x4]=r3                       :cortex_a8_load_store_1
;;	  6-->    80 r3=0x30004                        :cortex_a8_load_store_1
;;	  7-->    51 [sp+0xc]=lr                       :cortex_a8_load_store_1
;;	  8-->    46 [sp]=ip                           :cortex_a8_load_store_1
;;	  9-->    49 [sp+0x8]=r3                       :cortex_a8_load_store_1
;;	  9-->    59 r0=call [`force_sig_info']        :cortex_a8_issue_branch
;;	 10-->    89 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 10
;;   new head = 83
;;   new tail = 89





ptrace_hbptriggered

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={5d,4u} r2={9d,7u} r3={9d,9u} r12={2d,2u} r13={3d,17u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 197{148d,48u,1e} in 34{33 regular + 1 call} insns.
(note 5 0 10 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 10 5 9 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 9 10 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 9 85 2 NOTE_INSN_DELETED)

(insn/f:TI 85 13 86 2 arch/arm/kernel/ptrace.c:380 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 14 lr)
                    ] 2))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -4 [0xfffffffffffffffc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 86 85 87 2 arch/arm/kernel/ptrace.c:380 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -132 [0xffffffffffffff7c]))) 4 {*arm_addsi3} (nil))

(note 87 86 82 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 82 87 16 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 16 82 77 2 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 77 16 78 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 78 77 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 2 r2 [145])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 15 78 33 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [145])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  5 [96.7%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 33 15 17 3 143 "" [1 uses])

(note 17 33 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 32 3 arch/arm/kernel/ptrace.c:387 (set (reg/f:SI 1 r1 [147])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 18 19 3 arch/arm/kernel/ptrace.c:386 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 32 20 3 arch/arm/kernel/ptrace.c:387 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [147])
            (reg/v/f:SI 0 r0 [orig:142 bp ] [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [147])
        (nil)))

(jump_insn:TI 20 19 21 3 arch/arm/kernel/ptrace.c:387 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 21 23 4 arch/arm/kernel/ptrace.c:370 (set (reg:SI 3 r3 [148])
        (ashift:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 23 22 24 4 arch/arm/kernel/ptrace.c:370 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (plus:SI (reg:SI 3 r3 [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 24 23 42 4 arch/arm/kernel/ptrace.c:371 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:141 num ] [141])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 42 24 91 4 arch/arm/kernel/ptrace.c:371 discrim 1 (cond_exec (gt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:141 num ] [141])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 3 r3 [orig:141 num ] [141])))) 2270 {neon_vornv2di+3} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 91 42 92 4 (set (pc)
        (label_ref 43)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 92 91 29)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 29 92 30 5 140 "" [1 uses])

(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 31 30 34 5 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (plus:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 34 31 35 5 arch/arm/kernel/ptrace.c:386 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 35 34 36 5 arch/arm/kernel/ptrace.c:386 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9673 [0x25c9])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [96.7%]  (dfs_back)
;; Succ edge  6 [3.3%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [3.3%]  (fallthru,loop_exit)
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 36 43 6 arch/arm/kernel/ptrace.c:390 discrim 2 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 43 37 44 7 142 "" [1 uses])

(note 44 43 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 53 44 54 7 NOTE_INSN_DELETED)

(note 54 53 83 7 NOTE_INSN_DELETED)

(insn:TI 83 54 50 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 50 83 75 7 arch/arm/kernel/ptrace.c:395 (set (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:142 bp ] [142])
                (const_int 204 [0xcc])) [0 <variable>.hw.D.25978.D.25977.info.trigger+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:142 bp ] [142])
        (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
            (nil))))

(insn:TI 75 50 45 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 75 76 7 arch/arm/kernel/ptrace.c:392 (set (reg:SI 12 ip [149])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 76 45 56 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 2 r2 [153])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 56 76 58 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 0 r0)
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn:TI 58 56 47 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [153])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 47 58 80 7 arch/arm/kernel/ptrace.c:393 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg/v:SI 3 r3 [orig:141 num ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:141 num ] [141])
        (nil)))

(insn:TI 80 47 51 7 arch/arm/kernel/ptrace.c:394 (set (reg:SI 3 r3 [150])
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196612 [0x30004])
        (nil)))

(insn:TI 51 80 46 7 arch/arm/kernel/ptrace.c:395 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])
        (nil)))

(insn:TI 46 51 49 7 arch/arm/kernel/ptrace.c:392 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [149])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn:TI 49 46 59 7 arch/arm/kernel/ptrace.c:394 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (expr_list:REG_EQUAL (const_int 196612 [0x30004])
            (nil))))

(call_insn 59 49 88 7 arch/arm/kernel/ptrace.c:397 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 88 59 89 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 89 88 90 7 arch/arm/kernel/ptrace.c:398 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 90 89 79)

(note 79 90 81 NOTE_INSN_DELETED)

(note 81 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_break (ptrace_break)[0:1543]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 32 to 36 -- after reload
;;   ======================================================

;;	  0-->    32 {[--sp]=unspec[lr] 2;}            :cortex_a8_load_store_2
;;	  1-->    33 sp=sp-0x84                        :cortex_a8_default
;;	  2-->     9 r2=0x0                            :cortex_a8_default
;;	  2-->     7 r3=0x5                            :cortex_a8_default
;;	  3-->    10 [sp+0x4]=r2                       :cortex_a8_load_store_1
;;	  3-->     2 r2=r0                             :cortex_a8_default
;;	  4-->    29 r0=0x30001                        :cortex_a8_load_store_1
;;	  5-->     8 [sp]=r3                           :cortex_a8_load_store_1
;;	  7-->    12 [sp+0x8]=r0                       :cortex_a8_load_store_1
;;	  7-->    16 r0=r3                             :cortex_a8_default
;;	  8-->    13 r3=[r1+0x3c]                      :cortex_a8_load_store_1
;;	  8-->    17 r1=sp                             :cortex_a8_default
;;	 11-->    14 [sp+0xc]=r3                       :cortex_a8_load_store_1
;;	 11-->    19 r0=call [`force_sig_info']        :cortex_a8_issue_branch
;;	 12-->    36 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 12
;;   new head = 32
;;   new tail = 36





ptrace_break

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={4d,3u} r1={3d,2u} r2={4d,2u} r3={4d,3u} r12={1d} r13={3d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 156{132d,23u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 15 33 2 arch/arm/kernel/ptrace.c:198 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 14 lr)
                    ] 2))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -4 [0xfffffffffffffffc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 33 32 34 2 arch/arm/kernel/ptrace.c:198 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -132 [0xffffffffffffff7c]))) 4 {*arm_addsi3} (nil))

(note 34 33 9 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 9 34 7 2 arch/arm/kernel/ptrace.c:202 (set (reg:SI 2 r2 [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 7 9 10 2 arch/arm/kernel/ptrace.c:201 (set (reg:SI 3 r3 [135])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 10 7 2 2 arch/arm/kernel/ptrace.c:202 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg:SI 2 r2 [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [136])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 2 10 29 2 arch/arm/kernel/ptrace.c:198 (set (reg/v/f:SI 2 r2 [orig:133 tsk ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn:TI 29 2 8 2 arch/arm/kernel/ptrace.c:203 (set (reg:SI 0 r0 [137])
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(insn:TI 8 29 12 2 arch/arm/kernel/ptrace.c:201 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn:TI 12 8 16 2 arch/arm/kernel/ptrace.c:203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 0 r0 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [137])
        (expr_list:REG_EQUAL (const_int 196609 [0x30001])
            (nil))))

(insn 16 12 13 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [135])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn:TI 13 16 17 2 arch/arm/kernel/ptrace.c:204 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
            (nil))))

(insn 17 13 14 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 17 19 2 arch/arm/kernel/ptrace.c:204 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (nil)))

(call_insn 19 14 35 2 arch/arm/kernel/ptrace.c:206 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 35 19 36 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 36 35 37 2 arch/arm/kernel/ptrace.c:207 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 37 36 28)

(note 28 37 30 NOTE_INSN_DELETED)

(note 30 28 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function break_trap (break_trap)[0:1544]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 32 to 35 -- after reload
;;   ======================================================

;;	  0-->    32 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->    31 r2=sp                             :cortex_a8_default
;;	  2-->    27 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->     2 r1=r0                             :cortex_a8_default
;;	  3-->    28 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->    10 r0=[r3+0xc]                       :cortex_a8_load_store_1
;;	  6-->    12 call [`ptrace_break']             :cortex_a8_issue_branch
;;	  6-->    17 r0=0x0                            :cortex_a8_default
;;	  7-->    23 use r0                            :nothing
;;	  7-->    35 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 32
;;   new tail = 35





break_trap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,2u} r4={1d,2u} r12={1d} r13={2d,5u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{131d,17u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 13 2 NOTE_INSN_DELETED)

(note 13 8 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 13 33 2 arch/arm/kernel/ptrace.c:210 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 33 32 31 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 31 33 27 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 31 2 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 2 27 28 2 arch/arm/kernel/ptrace.c:210 (set (reg/v/f:SI 1 r1 [orig:135 regs ] [135])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn:TI 28 2 10 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 10 28 12 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(call_insn:TI 12 10 17 2 arch/arm/kernel/ptrace.c:211 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_break") [flags 0x3] <function_decl 0x11539900 ptrace_break>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 12 23 2 arch/arm/kernel/ptrace.c:213 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 17 34 2 arch/arm/kernel/ptrace.c:213 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 23 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 35 34 36 2 arch/arm/kernel/ptrace.c:213 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 29)

(note 29 36 30 NOTE_INSN_DELETED)

(note 30 29 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function flush_ptrace_hw_breakpoint (flush_ptrace_hw_breakpoint)[0:1552]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 37 to 15 -- after reload
;;   ======================================================

;;	  0-->    37 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r4=0x0                            :cortex_a8_default
;;	  2-->     2 r5=r0                             :cortex_a8_default
;;	  2-->    15 r6=r4                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 37
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 9 to 11 -- after reload
;;   ======================================================

;;	  0-->     9 r0=[r5+0x31c]                     :cortex_a8_load_store_1
;;	  0-->    19 r4=r4+0x1                         :cortex_a8_default
;;	  2-->    10 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  4-->    11 pc={(cc==0x0)?L17:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 9
;;   new tail = 11

;;   ======================================================
;;   -- basic block 4 from 14 to 16 -- after reload
;;   ======================================================

;;	  0-->    14 call [`unregister_hw_breakpoint'] :cortex_a8_issue_branch
;;	  0-->    16 [r5+0x31c]=r6                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 14
;;   new tail = 16

;;   ======================================================
;;   -- basic block 5 from 22 to 23 -- after reload
;;   ======================================================

;;	  0-->    22 cc=cmp(r4,0x20)                   :cortex_a8_default
;;	  0-->    20 r5=r5+0x4                         :cortex_a8_default
;;	  2-->    23 pc={(cc!=0x0)?L21:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 22
;;   new tail = 23

;;   ======================================================
;;   -- basic block 6 from 40 to 40 -- after reload
;;   ======================================================

;;	  0-->    40 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 40
;;   new tail = 40





flush_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r3={2d} r4={3d,5u} r5={3d,5u,1d} r6={2d,3u} r12={1d} r13={2d,8u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 164{135d,28u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 37 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 37 3 38 2 arch/arm/kernel/ptrace.c:415 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -16 [0xfffffffffffffff0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 38 37 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 38 2 2 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 2 7 15 2 arch/arm/kernel/ptrace.c:415 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 15 2 21 2 arch/arm/kernel/ptrace.c:422 (set (reg:SI 6 r6 [138])
        (reg/v:SI 4 r4 [orig:134 i ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [96.9%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 21 15 8 3 156 "" [1 uses])

(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 9 8 19 3 arch/arm/kernel/ptrace.c:420 (set (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
        (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (nil)))

(insn 19 9 10 3 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 19 11 3 arch/arm/kernel/ptrace.c:420 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 11 10 12 3 arch/arm/kernel/ptrace.c:420 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 14 12 16 4 arch/arm/kernel/ptrace.c:421 (parallel [
            (call (mem:SI (symbol_ref:SI ("unregister_hw_breakpoint") [flags 0x41] <function_decl 0x11524a00 unregister_hw_breakpoint>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 16 14 17 4 arch/arm/kernel/ptrace.c:422 (set (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 17 16 18 5 155 "" [1 uses])

(note 18 17 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 18 20 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 22 23 5 arch/arm/kernel/ptrace.c:419 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 23 20 41 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [96.9%]  (dfs_back)
;; Succ edge  6 [3.1%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [3.1%]  (fallthru,loop_exit)
(note 41 23 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 39 41 40 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 40 39 42 6 arch/arm/kernel/ptrace.c:425 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 42 40 35)

(note 35 42 36 NOTE_INSN_DELETED)

(note 36 35 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_query_register_offset (regs_query_register_offset)[0:1536]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 13 (  1.6)


regs_query_register_offset

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={3d,2u} r4={3d,5u,1d} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,9u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 169{137d,31u,1e} in 17{16 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 13 [sp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 6 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 2 )->[6]->( 3 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 7 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 61 to worklist
  Adding insn 55 to worklist
  Adding insn 17 to worklist
  Adding insn 13 to worklist
  Adding insn 57 to worklist
  Adding insn 30 to worklist
  Adding insn 59 to worklist
  Adding insn 45 to worklist
Finished finding needed instructions:
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 19 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 24 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 32 to worklist
processing block 6 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 60 to worklist
  Adding insn 27 to worklist
  Adding insn 12 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 6 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 18 (  2.2)
;;   ======================================================
;;   -- basic block 2 from 55 to 61 -- after reload
;;   ======================================================

;;	  0-->    55 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     2 r5=r0                             :cortex_a8_default
;;	  2-->     6 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->    61 pc=L25                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 55
;;   new tail = 61

;;   ======================================================
;;   -- basic block 3 from 13 to 17 -- after reload
;;   ======================================================

;;	  0-->    13 r0=call [`strcmp']                :cortex_a8_issue_branch
;;	 32-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    17 pc={(cc!=0x0)?L22:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 13
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 19 to 57 -- after reload
;;   ======================================================

;;	  0-->    19 r0=[r4+0x4]                       :cortex_a8_load_store_1
;;	  1-->    57 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 19
;;   new tail = 57

;;   ======================================================
;;   -- basic block 5 from 24 to 24 -- after reload
;;   ======================================================

;;	  0-->    24 r4=r4+0x8                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 24
;;   new tail = 24

;;   ======================================================
;;   -- basic block 6 from 12 to 30 -- after reload
;;   ======================================================

;;	  0-->    27 r3=[r4]                           :cortex_a8_load_store_1
;;	  0-->    12 r1=r5                             :cortex_a8_default
;;	  2-->    60 {cc=cmp(r3,0x0);r0=r3;}           :cortex_a8_default
;;	  4-->    30 pc={(cc!=0x0)?L28:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 12
;;   new tail = 30

;;   ======================================================
;;   -- basic block 7 from 32 to 59 -- after reload
;;   ======================================================

;;	  0-->    32 r0=0xffffffffffffffea             :cortex_a8_default
;;	  0-->    45 use r0                            :nothing
;;	  0-->    59 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 59





regs_query_register_offset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={3d,2u} r4={3d,5u,1d} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,9u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 169{137d,31u,1e} in 17{16 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 55 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 55 3 56 2 arch/arm/kernel/ptrace.c:95 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 56 55 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 56 6 2 arch/arm/kernel/ptrace.c:95 (set (reg/v/f:SI 5 r5 [orig:138 name ] [138])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ name ])
        (nil)))

(insn:TI 6 2 61 2 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 61 6 62 2 arch/arm/kernel/ptrace.c:97 (set (pc)
        (label_ref 25)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 62 61 28)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 28 62 10 3 163 "" [1 uses])

(note 10 28 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 10 13 3 NOTE_INSN_DELETED)

(call_insn/i:TI 13 14 16 3 arch/arm/kernel/ptrace.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 16 13 17 3 arch/arm/kernel/ptrace.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 17 16 18 3 arch/arm/kernel/ptrace.c:98 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 18 57 4 arch/arm/kernel/ptrace.c:99 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 57 19 52 4 arch/arm/kernel/ptrace.c:99 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 52 57 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 22 52 23 5 161 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 25 5 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 25 24 26 6 160 "" [1 uses])

(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 12 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 12 27 60 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:138 name ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 12 30 6 arch/arm/kernel/ptrace.c:97 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0)
                (reg/f:SI 3 r3 [orig:136 D.26778 ] [136]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
        (nil)))

(jump_insn:TI 30 60 31 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 45 7 arch/arm/kernel/ptrace.c:100 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(insn 45 32 59 7 arch/arm/kernel/ptrace.c:101 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 59 45 58 7 arch/arm/kernel/ptrace.c:101 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 58 59 53)

(note 53 58 54 NOTE_INSN_DELETED)

(note 54 53 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
