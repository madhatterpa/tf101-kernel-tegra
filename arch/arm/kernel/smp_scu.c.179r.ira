
;; Function scu_get_core_count (scu_get_core_count)[0:721] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 20(l0): point = 0
   Insn 14(l0): point = 2
   Insn 8(l0): point = 4
   Insn 7(l0): point = 6
   Insn 2(l0): point = 8
 a0(r138): [3..4]
 a1(r133): [5..6]
 a2(r136): [7..8]
Compressing live ranges: from 11 to 6 - 54%
Ranges after the compression:
 a0(r138): [0..1]
 a1(r133): [2..3]
 a2(r136): [4..5]
+++Allocating 0 bytes for conflict table (uncompressed size 24)
;; a0(r138,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r138)<->a1(r133)@125:shuffle
  regions=1, blocks=3, points=6
    allocnos=3, copies=1, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r138 1r133 2r136
    modified regnos: 133 136 138
    border:
    Pressure: GENERAL_REGS=2
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a2(r136,l0)
      Pushing a1(r133,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 0
      Popping a1(r133,l0)  -- assign reg 0
      Popping a2(r136,l0)  -- assign reg 0
Disposition:
    1:r133 l0     0    2:r136 l0     0    0:r138 l0     0
New iteration of spill/restore move
+++Costs: overall -4250, reg -4250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 136
insn=7, live_throughout: 13, 14, dead_or_set: 133, 136
insn=8, live_throughout: 13, 14, dead_or_set: 133, 138
insn=14, live_throughout: 13, 14, dead_or_set: 0, 138
insn=20, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 7
changing reg in insn 8
changing reg in insn 2
changing reg in insn 7
changing reg in insn 8
changing reg in insn 14
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


scu_get_core_count

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={4d,5u} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 3 7 2 NOTE_INSN_DELETED)

(insn 7 9 8 2 arch/arm/kernel/smp_scu.c:30 (set (reg/v:SI 0 r0 [orig:133 ncores ] [133])
        (mem/v:SI (plus:SI (reg/v/f:SI 0 r0 [orig:136 scu_base ] [136])
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 14 2 arch/arm/kernel/smp_scu.c:32 (set (reg:SI 0 r0 [138])
        (and:SI (reg/v:SI 0 r0 [orig:133 ncores ] [133])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 8 20 2 arch/arm/kernel/smp_scu.c:32 (set (reg/i:SI 0 r0)
        (plus:SI (reg:SI 0 r0 [138])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 20 14 24 2 arch/arm/kernel/smp_scu.c:32 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 24 20 25 NOTE_INSN_DELETED)

(note 25 24 0 NOTE_INSN_DELETED)


;; Function scu_enable (scu_enable)[0:722] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 64.
verify found no changes in insn with uid = 64.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)

Pass 0 for finding allocno costs

    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 33(l0): point = 1
   Insn 31(l0): point = 3
   Insn 30(l0): point = 5
   Insn 29(l0): point = 7
   Insn 27(l0): point = 10
   Insn 26(l0): point = 12
   Insn 24(l0): point = 14
   Insn 20(l0): point = 17
   Insn 19(l0): point = 19
   Insn 17(l0): point = 22
   Insn 16(l0): point = 24
   Insn 14(l0): point = 26
   Insn 11(l0): point = 29
   Insn 10(l0): point = 31
   Insn 64(l0): point = 33
   Insn 2(l0): point = 35
   Insn 8(l0): point = 37
   Insn 7(l0): point = 39
   Insn 6(l0): point = 41
 a0(r146): [2..3]
 a1(r140): [6..35]
 a2(r133): [6..7]
 a3(r134): [8..14]
 a4(r138): [18..19]
 a5(r137): [20..26]
 a6(r143): [32..33]
 a7(r141): [32..37]
 a8(r142): [38..39]
 a9(r136): [40..41]
Compressing live ranges: from 44 to 18 - 40%
Ranges after the compression:
 a0(r146): [0..1]
 a1(r140): [2..12]
 a2(r133): [2..3]
 a3(r134): [4..5]
 a4(r138): [6..7]
 a5(r137): [8..9]
 a6(r143): [10..11]
 a7(r141): [10..13]
 a8(r142): [14..15]
 a9(r136): [16..17]
+++Allocating 56 bytes for conflict table (uncompressed size 80)
;; a0(r146,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r140,l0) conflicts: a2(r133,l0) a3(r134,l0) a4(r138,l0) a5(r137,l0) a6(r143,l0) a7(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r133,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r134,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r138,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r137,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r143,l0) conflicts: a1(r140,l0) a7(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r141,l0) conflicts: a1(r140,l0) a6(r143,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a8(r142,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a9(r136,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a2(r133)<->a3(r134)@125:shuffle
  cp1:a4(r138)<->a5(r137)@125:shuffle
  cp2:a8(r142)<->a9(r136)@125:shuffle
  cp3:a7(r141)<->a8(r142)@125:shuffle
  regions=1, blocks=8, points=18
    allocnos=10, copies=4, conflicts=4, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r146 1r140 2r133 3r134 4r138 5r137 6r143 7r141 8r142 9r136
    modified regnos: 133 134 136 137 138 140 141 142 143 146
    border:
    Pressure: GENERAL_REGS=4
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
      Pushing a2(r133,l0)
      Pushing a6(r143,l0)
      Pushing a4(r138,l0)
      Pushing a0(r146,l0)
      Pushing a5(r137,l0)
      Pushing a3(r134,l0)
      Pushing a1(r140,l0)
      Pushing a9(r136,l0)
      Pushing a8(r142,l0)
      Pushing a7(r141,l0)
      Popping a7(r141,l0)  -- assign reg 3
      Popping a8(r142,l0)  -- assign reg 3
      Popping a9(r136,l0)  -- assign reg 3
      Popping a1(r140,l0)  -- assign reg 0
      Popping a3(r134,l0)  -- assign reg 3
      Popping a5(r137,l0)  -- assign reg 3
      Popping a0(r146,l0)  -- assign reg 3
      Popping a4(r138,l0)  -- assign reg 3
      Popping a6(r143,l0)  -- assign reg 2
      Popping a2(r133,l0)  -- assign reg 3
Disposition:
    2:r133 l0     3    3:r134 l0     3    9:r136 l0     3    5:r137 l0     3
    4:r138 l0     3    1:r140 l0     0    7:r141 l0     3    8:r142 l0     3
    6:r143 l0     2    0:r146 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 0, 13, 14, dead_or_set: 136
insn=7, live_throughout: 0, 13, 14, dead_or_set: 136, 142
insn=8, live_throughout: 0, 13, 14, dead_or_set: 141, 142
insn=2, live_throughout: 13, 14, 141, dead_or_set: 0, 140
insn=64, live_throughout: 13, 14, 140, 141, dead_or_set: 143
insn=10, live_throughout: 13, 14, 140, dead_or_set: 141, 143
insn=11, live_throughout: 13, 14, 140, dead_or_set: 
insn=14, live_throughout: 13, 14, 140, dead_or_set: 137
insn=16, live_throughout: 13, 14, 137, 140, dead_or_set: 
insn=17, live_throughout: 13, 14, 137, 140, dead_or_set: 
insn=19, live_throughout: 13, 14, 140, dead_or_set: 137, 138
insn=20, live_throughout: 13, 14, 140, dead_or_set: 138
insn=21, live_throughout: 13, 14, 140, dead_or_set: 
insn=24, live_throughout: 13, 14, 140, dead_or_set: 134
insn=26, live_throughout: 13, 14, 134, 140, dead_or_set: 
insn=27, live_throughout: 13, 14, 134, 140, dead_or_set: 
insn=29, live_throughout: 13, 140, dead_or_set: 133, 134
insn=30, live_throughout: 13, dead_or_set: 133, 140
insn=31, live_throughout: 13, dead_or_set: 146
insn=33, live_throughout: 13, dead_or_set: 14, 146
insn=39, live_throughout: 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 31 (nil))
changing reg in insn 29
changing reg in insn 30
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 2
changing reg in insn 20
changing reg in insn 14
changing reg in insn 30
changing reg in insn 24
changing reg in insn 8
changing reg in insn 10
changing reg in insn 10
changing reg in insn 7
changing reg in insn 8
changing reg in insn 64
changing reg in insn 10
changing reg in insn 31
changing reg in insn 33
Spilling for insn 20.
Spilling for insn 30.

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140])
                                                        (const_int 48 [0x30])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140])
                                                        (const_int 48 [0x30])) [0 S4 A32])

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem/v:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140]) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140]) [0 S4 A32])
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 33.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


scu_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d,4u} r1={2d} r2={3d,1u} r3={10d,10u,2d} r12={2d} r13={1d,8u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 166{137d,27u,2e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 arch/arm/kernel/smp_scu.c:43 (parallel [
            (set (reg/v:SI 3 r3 [orig:136 __val ] [136])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 4545179))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 7 6 8 2 arch/arm/kernel/smp_scu.c:43 (set (reg:SI 3 r3 [142])
        (and:SI (reg/v:SI 3 r3 [orig:136 __val ] [136])
            (const_int -15728641 [0xffffffffff0fffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 8 7 64 2 arch/arm/kernel/smp_scu.c:43 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [142])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 3 r3 [orig:136 __val ] [136])
            (const_int -15728656 [0xffffffffff0ffff0]))
        (nil)))

(insn 64 8 10 2 arch/arm/kernel/smp_scu.c:43 (set (reg:SI 2 r2 [143])
        (const_int 1091551376 [0x410fc090])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1091551376 [0x410fc090])
        (nil)))

(insn 10 64 11 2 arch/arm/kernel/smp_scu.c:43 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 1091551376 [0x410fc090]))
        (nil)))

(jump_insn 11 10 12 2 arch/arm/kernel/smp_scu.c:43 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  5 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 12 11 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 15 12 14 3 NOTE_INSN_DELETED)

(insn 14 15 16 3 arch/arm/kernel/smp_scu.c:44 (set (reg/v:SI 3 r3 [orig:137 scu_ctrl ] [137])
        (mem/v:SI (plus:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140])
                (const_int 48 [0x30])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 16 14 17 3 arch/arm/kernel/smp_scu.c:45 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:137 scu_ctrl ] [137])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 17 16 18 3 arch/arm/kernel/smp_scu.c:45 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 20 4 arch/arm/kernel/smp_scu.c:46 (set (reg:SI 3 r3 [orig:138 D.11045 ] [138])
        (ior:SI (reg/v:SI 3 r3 [orig:137 scu_ctrl ] [137])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 20 19 21 4 arch/arm/kernel/smp_scu.c:46 (set (mem/v:SI (plus:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140])
                (const_int 48 [0x30])) [0 S4 A32])
        (reg:SI 3 r3 [orig:138 D.11045 ] [138])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 21 20 22 5 4 "" [2 uses])

(note 22 21 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 25 22 24 5 NOTE_INSN_DELETED)

(insn 24 25 26 5 arch/arm/kernel/smp_scu.c:50 (set (reg/v:SI 3 r3 [orig:134 scu_ctrl.256 ] [134])
        (mem/v:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 24 27 5 arch/arm/kernel/smp_scu.c:52 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:134 scu_ctrl.256 ] [134])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 27 26 28 5 arch/arm/kernel/smp_scu.c:52 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  7 [61.0%] 
;; Succ edge  6 [39.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [39.0%]  (fallthru)
(note 28 27 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 32 28 29 6 NOTE_INSN_DELETED)

(insn 29 32 30 6 arch/arm/kernel/smp_scu.c:55 (set (reg/v:SI 3 r3 [orig:133 scu_ctrl.259 ] [133])
        (ior:SI (reg/v:SI 3 r3 [orig:134 scu_ctrl.256 ] [134])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 30 29 31 6 arch/arm/kernel/smp_scu.c:56 (set (mem/v:SI (reg/v/f:SI 0 r0 [orig:140 scu_base ] [140]) [0 S4 A32])
        (reg/v:SI 3 r3 [orig:133 scu_ctrl.259 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 31 30 33 6 arch/arm/kernel/smp_scu.c:62 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10e32ea0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10e32ea0 cpu_cache>)
        (nil)))

(call_insn 33 31 39 6 arch/arm/kernel/smp_scu.c:62 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [146])
                            (const_int 4 [0x4])) [0 cpu_cache.flush_kern_all+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [61.0%] 
(code_label 39 33 42 7 6 "" [1 uses])

(note 42 39 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 63 42 65 NOTE_INSN_DELETED)

(note 65 63 0 NOTE_INSN_DELETED)


;; Function scu_power_mode (scu_power_mode)[0:723]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a4 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 54(l0): point = 0
   Insn 48(l0): point = 2
   Insn 41(l0): point = 5
   Insn 58(l0): point = 8
   Insn 35(l0): point = 10
   Insn 33(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 28(l0): point = 18
   Insn 36(l0): point = 20
   Insn 26(l0): point = 22
   Insn 24(l0): point = 25
   Insn 23(l0): point = 27
   Insn 21(l0): point = 30
   Insn 10(l0): point = 32
   Insn 20(l0): point = 34
   Insn 2(l0): point = 36
   Insn 19(l0): point = 38
   Insn 61(l0): point = 40
   Insn 15(l0): point = 42
   Insn 60(l0): point = 44
   Insn 3(l0): point = 46
 a0(r138): [8..20] [3..5]
 a1(r152): [11..22]
 a2(r141): [11..36]
 a3(r135): [11..12]
 a4(r155): [13..14]
 a5(r142): [15..46]
 a6(r134): [15..16]
 a7(r154): [17..18]
 a8(r151): [21..38]
 a9(r139): [23..32]
 a10(r143): [33..44]
 a11(r148): [39..42]
Compressing live ranges: from 49 to 23 - 46%
Ranges after the compression:
 a0(r138): [2..11] [0..1]
 a1(r152): [3..13]
 a2(r141): [3..17]
 a3(r135): [3..4]
 a4(r155): [5..6]
 a5(r142): [7..22]
 a6(r134): [7..8]
 a7(r154): [9..10]
 a8(r151): [12..18]
 a9(r139): [14..15]
 a10(r143): [16..21]
 a11(r148): [19..20]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r138,l0) conflicts: a3(r135,l0) a1(r152,l0) a2(r141,l0) a4(r155,l0) a6(r134,l0) a5(r142,l0) a7(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r152,l0) conflicts: a0(r138,l0) a3(r135,l0) a2(r141,l0) a4(r155,l0) a6(r134,l0) a5(r142,l0) a7(r154,l0) a8(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r141,l0) conflicts: a0(r138,l0) a3(r135,l0) a1(r152,l0) a4(r155,l0) a6(r134,l0) a5(r142,l0) a7(r154,l0) a8(r151,l0) a9(r139,l0) a10(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r135,l0) conflicts: a0(r138,l0) a1(r152,l0) a2(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r155,l0) conflicts: a0(r138,l0) a1(r152,l0) a2(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r142,l0) conflicts: a0(r138,l0) a1(r152,l0) a2(r141,l0) a6(r134,l0) a7(r154,l0) a8(r151,l0) a9(r139,l0) a10(r143,l0) a11(r148,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a6(r134,l0) conflicts: a0(r138,l0) a1(r152,l0) a2(r141,l0) a5(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r154,l0) conflicts: a0(r138,l0) a1(r152,l0) a2(r141,l0) a5(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r151,l0) conflicts: a1(r152,l0) a2(r141,l0) a5(r142,l0) a9(r139,l0) a10(r143,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a9(r139,l0) conflicts: a2(r141,l0) a5(r142,l0) a8(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r143,l0) conflicts: a2(r141,l0) a5(r142,l0) a8(r151,l0) a11(r148,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a11(r148,l0) conflicts: a5(r142,l0) a10(r143,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a1(r152)<->a9(r139)@125:shuffle
  cp1:a0(r138)<->a8(r151)@1000:move
  cp2:a6(r134)<->a7(r154)@125:shuffle
  cp3:a4(r155)<->a6(r134)@125:shuffle
  cp4:a4(r155)<->a5(r142)@125:shuffle
  cp5:a3(r135)<->a4(r155)@125:shuffle
  cp6:a8(r151)<->a11(r148)@125:shuffle
  regions=1, blocks=7, points=23
    allocnos=12, copies=7, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r138 1r152 2r141 3r135 4r155 5r142 6r134 7r154 8r151 9r139 10r143 11r148
    modified regnos: 134 135 138 139 141 142 143 148 151 152 154 155
    border:
    Pressure: GENERAL_REGS=6
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 2 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
      Pushing a7(r154,l0)
      Pushing a6(r134,l0)
      Pushing a4(r155,l0)
      Pushing a3(r135,l0)
      Pushing a9(r139,l0)
      Pushing a2(r141,l0)
      Pushing a1(r152,l0)
      Pushing a0(r138,l0)
      Pushing a11(r148,l0)
      Pushing a8(r151,l0)
      Pushing a10(r143,l0)
      Pushing a5(r142,l0)
      Popping a5(r142,l0)  -- assign reg 1
      Popping a10(r143,l0)  -- assign reg 3
      Popping a8(r151,l0)  -- assign reg 2
      Popping a11(r148,l0)  -- assign reg 2
      Popping a0(r138,l0)  -- assign reg 2
      Popping a1(r152,l0)  -- assign reg 3
      Popping a2(r141,l0)  -- assign reg 0
      Popping a9(r139,l0)  -- assign reg 3
      Popping a3(r135,l0)  -- assign reg 1
      Popping a4(r155,l0)  -- assign reg 1
      Popping a6(r134,l0)  -- assign reg 12
      Popping a7(r154,l0)  -- assign reg 12
Disposition:
    6:r134 l0    12    3:r135 l0     1    0:r138 l0     2    9:r139 l0     3
    2:r141 l0     0    5:r142 l0     1   10:r143 l0     3   11:r148 l0     2
    8:r151 l0     2    1:r152 l0     3    7:r154 l0    12    4:r155 l0     1
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, 14, dead_or_set: 1, 142
insn=60, live_throughout: 0, 13, 14, 142, dead_or_set: 143
insn=15, live_throughout: 0, 13, 14, 142, 143, dead_or_set: 148
insn=61, live_throughout: 0, 13, 14, 142, 148, dead_or_set: 143
insn=19, live_throughout: 0, 13, 14, 142, 143, dead_or_set: 148, 151
insn=2, live_throughout: 13, 14, 142, 143, 151, dead_or_set: 0, 141
insn=20, live_throughout: 13, 14, 141, 142, 143, 151, dead_or_set: 
insn=10, live_throughout: 13, 14, 24, 141, 142, 151, dead_or_set: 139, 143
insn=21, live_throughout: 13, 14, 139, 141, 142, 151, dead_or_set: 
insn=23, live_throughout: 13, 14, 139, 141, 142, 151, dead_or_set: 
insn=24, live_throughout: 13, 14, 139, 141, 142, 151, dead_or_set: 
insn=26, live_throughout: 13, 14, 141, 142, 151, dead_or_set: 139, 152
insn=36, live_throughout: 13, 14, 141, 142, 152, dead_or_set: 138, 151
insn=28, live_throughout: 13, 14, 138, 141, 142, 152, dead_or_set: 154
insn=31, live_throughout: 13, 14, 138, 141, 142, 152, dead_or_set: 134, 154
insn=32, live_throughout: 13, 14, 138, 141, 152, dead_or_set: 134, 142, 155
insn=33, live_throughout: 13, 14, 138, 141, 152, dead_or_set: 135, 155
insn=35, live_throughout: 13, 14, 138, dead_or_set: 135, 141, 152
insn=58, live_throughout: 13, 14, 138, dead_or_set: 
insn=39, live_throughout: 13, 14, dead_or_set: 
insn=41, live_throughout: 13, 14, dead_or_set: 138
insn=42, live_throughout: 13, 14, 138, dead_or_set: 
insn=48, live_throughout: 13, 14, dead_or_set: 0, 138
insn=54, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 41
changing reg in insn 48
changing reg in insn 10
changing reg in insn 26
changing reg in insn 23
changing reg in insn 2
changing reg in insn 35
changing reg in insn 28
changing reg in insn 3
changing reg in insn 19
changing reg in insn 15
changing reg in insn 32
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 10
changing reg in insn 15
changing reg in insn 19
changing reg in insn 19
changing reg in insn 36
changing reg in insn 20
changing reg in insn 26
changing reg in insn 35
changing reg in insn 28
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
Spilling for insn 60.
Using reg 2 for reload 0
Spilling for insn 35.

Reloads for insn # 60
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 35
Reload 0: reload_out (QI) = (mem/v:QI (plus:SI (reg/v/f:SI 0 r0 [orig:141 scu_base ] [141])
                                                        (reg:SI 3 r3 [152])) [0 S1 A8])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:QI (plus:SI (reg/v/f:SI 0 r0 [orig:141 scu_base ] [141])
                                                        (reg:SI 3 r3 [152])) [0 S1 A8])
deleting insn with uid = 3.
deleting insn with uid = 2.
deleting insn with uid = 36.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


scu_power_mode

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 24[cc]
;;  ref usage 	r0={2d,4u} r1={3d,5u} r2={5d,4u} r3={5d,6u} r12={3d,2u} r13={1d,7u} r14={1d,1u} r24={4d,2u} 
;;    total ref usage 55{24d,31u,0e} in 20{20 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 11 2 NOTE_INSN_DELETED)

(note 11 8 12 2 NOTE_INSN_DELETED)

(note 12 11 14 2 NOTE_INSN_DELETED)

(note 14 12 17 2 NOTE_INSN_DELETED)

(note 17 14 18 2 NOTE_INSN_DELETED)

(note 18 17 64 2 NOTE_INSN_DELETED)

(insn 64 18 60 2 arch/arm/kernel/smp_scu.c:77 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 60 64 15 2 arch/arm/kernel/smp_scu.c:77 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 15 60 61 2 arch/arm/kernel/smp_scu.c:79 (parallel [
            (set (reg:SI 2 r2 [148])
                (gtu:SI (reg/v:SI 1 r1 [orig:142 mode ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 61 15 19 2 arch/arm/kernel/smp_scu.c:77 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 3 r3 [143])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 61 20 2 arch/arm/kernel/smp_scu.c:79 (parallel [
            (set (reg:SI 2 r2 [151])
                (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:142 mode ] [142])
                        (const_int 1 [0x1]))
                    (reg:SI 2 r2 [148])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 20 19 10 2 arch/arm/kernel/smp_scu.c:79 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 10 20 21 2 arch/arm/kernel/smp_scu.c:77 (set (reg:SI 3 r3 [orig:139 D.11057 ] [139])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [143])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 21 10 22 2 arch/arm/kernel/smp_scu.c:79 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [96.0%] 
;; Succ edge  3 [4.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [4.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 arch/arm/kernel/smp_scu.c:77 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 D.11057 ] [139])
            (const_int 3 [0x3]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 3 arch/arm/kernel/smp_scu.c:77 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%] 
;; Succ edge  4 [61.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  3 [61.0%]  (fallthru)
(note 25 24 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 29 25 30 4 NOTE_INSN_DELETED)

(note 30 29 26 4 NOTE_INSN_DELETED)

(insn 26 30 28 4 arch/arm/kernel/smp_scu.c:82 (set (reg:SI 3 r3 [152])
        (plus:SI (reg:SI 3 r3 [orig:139 D.11057 ] [139])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 28 26 31 4 arch/arm/kernel/smp_scu.c:82 (set (reg:SI 12 ip [154])
        (zero_extend:SI (mem/v:QI (plus:SI (reg/v/f:SI 0 r0 [orig:141 scu_base ] [141])
                    (reg:SI 3 r3 [152])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 31 28 32 4 arch/arm/kernel/smp_scu.c:82 (set (reg/v:SI 12 ip [orig:134 val ] [134])
        (and:SI (reg:SI 12 ip [154])
            (const_int 252 [0xfc]))) 67 {*arm_andsi3_insn} (nil))

(insn 32 31 33 4 arch/arm/kernel/smp_scu.c:84 (set (reg:SI 1 r1 [155])
        (ior:SI (reg/v:SI 12 ip [orig:134 val ] [134])
            (reg/v:SI 1 r1 [orig:142 mode ] [142]))) 89 {*arm_iorsi3} (nil))

(insn 33 32 35 4 arch/arm/kernel/smp_scu.c:84 (set (reg:SI 1 r1 [orig:135 D.11071 ] [135])
        (zero_extend:SI (reg:QI 1 r1 [155]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 35 33 58 4 arch/arm/kernel/smp_scu.c:84 (set (mem/v:QI (plus:SI (reg/v/f:SI 0 r0 [orig:141 scu_base ] [141])
                (reg:SI 3 r3 [152])) [0 S1 A8])
        (reg:QI 1 r1 [orig:135 D.11071 ] [135])) 178 {*arm_movqi_insn} (nil))

(jump_insn 58 35 59 4 arch/arm/kernel/smp_scu.c:86 (set (pc)
        (label_ref 42)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 59 58 39)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  3 [39.0%] 
;; Pred edge  2 [96.0%] 
(code_label 39 59 40 5 11 "" [2 uses])

(note 40 39 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 5 arch/arm/kernel/smp_scu.c:80 (set (reg:SI 2 r2 [orig:138 D.11064 ] [138])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 42 41 43 6 12 "" [1 uses])

(note 43 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 48 43 54 6 arch/arm/kernel/smp_scu.c:87 (set (reg/i:SI 0 r0)
        (reg:SI 2 r2 [orig:138 D.11064 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 54 48 62 6 arch/arm/kernel/smp_scu.c:87 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 62 54 63 NOTE_INSN_DELETED)

(note 63 62 0 NOTE_INSN_DELETED)

