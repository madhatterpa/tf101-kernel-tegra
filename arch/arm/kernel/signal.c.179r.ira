
;; Function setup_return (setup_return)[0:1448]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 161.
rescanning insn with uid = 161.
deleting insn with uid = 161.
deleting insn with uid = 6.
scanning new insn with uid = 162.
verify found no changes in insn with uid = 162.
deleting insn with uid = 94.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 28 count 40 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 28 count 40 (  1.9)

Pass 0 for finding allocno costs

    a9 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a8(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a12(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a16(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r171: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a8(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a12(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a16(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 126(l0): point = 0
   Insn 120(l0): point = 2
   Insn 113(l0): point = 5
   Insn 157(l0): point = 8
   Insn 106(l0): point = 10
   Insn 105(l0): point = 12
   Insn 104(l0): point = 14
   Insn 103(l0): point = 16
   Insn 161(l0): point = 18
   Insn 108(l0): point = 20
   Insn 107(l0): point = 22
   Insn 100(l0): point = 25
   Insn 99(l0): point = 27
   Insn 162(l0): point = 29
   Insn 98(l0): point = 31
   Insn 97(l0): point = 33
   Insn 155(l0): point = 36
   Insn 89(l0): point = 38
   Insn 87(l0): point = 40
   Insn 85(l0): point = 43
   Insn 84(l0): point = 45
   Insn 81(l0): point = 48
   Insn 80(l0): point = 50
   Insn 79(l0): point = 52
   Insn 76(l0): point = 54
   Insn 77(l0): point = 56
   Insn 159(l0): point = 58
   Insn 75(l0): point = 60
   Insn 72(l0): point = 63
   Insn 71(l0): point = 65
   Insn 70(l0): point = 67
   Insn 68(l0): point = 69
   Insn 69(l0): point = 71
   Insn 67(l0): point = 73
   Insn 63(l0): point = 76
   Insn 61(l0): point = 79
   Insn 58(l0): point = 81
   Insn 60(l0): point = 83
   Insn 153(l0): point = 86
   Insn 53(l0): point = 88
   Insn 51(l0): point = 91
   Insn 50(l0): point = 93
   Insn 46(l0): point = 96
   Insn 151(l0): point = 99
   Insn 40(l0): point = 101
   Insn 39(l0): point = 103
   Insn 41(l0): point = 105
   Insn 38(l0): point = 107
   Insn 36(l0): point = 110
   Insn 35(l0): point = 112
   Insn 149(l0): point = 115
   Insn 29(l0): point = 117
   Insn 27(l0): point = 120
   Insn 26(l0): point = 122
   Insn 24(l0): point = 124
   Insn 23(l0): point = 126
   Insn 20(l0): point = 129
   Insn 19(l0): point = 131
   Insn 17(l0): point = 134
   Insn 13(l0): point = 136
   Insn 10(l0): point = 138
   Insn 12(l0): point = 140
   Insn 16(l0): point = 142
   Insn 11(l0): point = 144
   Insn 14(l0): point = 146
   Insn 5(l0): point = 148
   Insn 4(l0): point = 150
   Insn 2(l0): point = 152
   Insn 3(l0): point = 154
 a0(r142): [8..20] [3..5]
 a1(r146): [11..152]
 a2(r141): [11..138]
 a3(r140): [86..88] [36..38] [13..25]
 a4(r149): [15..148]
 a5(r150): [17..18]
 a6(r138): [132..136] [108..129] [23..101]
 a7(r148): [91..150] [43..85] [26..35]
 a8(r139): [115..117] [110..112] [91..105] [41..85] [26..35]
 a9(r171): [28..29]
 a10(r169): [39..40]
 a11(r137): [39..81]
 a12(r134): [51..58]
 a13(r165): [53..54]
 a14(r166): [53..56]
 a15(r160): [55..73]
 a16(r164): [55..60]
 a17(r136): [59..71]
 a18(r161): [68..69]
 a19(r144): [91..146] [84..85]
 a20(r147): [89..154]
 a21(r157): [102..103]
 a22(r133): [104..107]
 a23(r155): [118..122]
 a24(r156): [123..124]
 a25(r154): [125..126]
 a26(r143): [130..131]
 a27(r152): [137..140]
 a28(r151): [141..144]
Compressing live ranges: from 157 to 72 - 45%
Ranges after the compression:
 a0(r142): [2..8] [0..1]
 a1(r146): [3..70]
 a2(r141): [3..63]
 a3(r140): [36..37] [15..16] [4..10]
 a4(r149): [5..68]
 a5(r150): [6..7]
 a6(r138): [60..61] [46..57] [9..40]
 a7(r148): [39..69] [20..35] [11..14]
 a8(r139): [49..50] [47..48] [39..44] [19..35] [11..14]
 a9(r171): [12..13]
 a10(r169): [17..18]
 a11(r137): [17..33]
 a12(r134): [21..26]
 a13(r165): [22..23]
 a14(r166): [22..25]
 a15(r160): [24..32]
 a16(r164): [24..28]
 a17(r136): [27..31]
 a18(r161): [29..30]
 a19(r144): [39..67] [34..35]
 a20(r147): [38..71]
 a21(r157): [41..42]
 a22(r133): [43..45]
 a23(r155): [51..52]
 a24(r156): [53..54]
 a25(r154): [55..56]
 a26(r143): [58..59]
 a27(r152): [62..64]
 a28(r151): [65..66]
+++Allocating 232 bytes for conflict table (uncompressed size 232)
;; a0(r142,l0) conflicts: a2(r141,l0) a1(r146,l0) a3(r140,l0) a4(r149,l0) a5(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r146,l0) conflicts: a0(r142,l0) a2(r141,l0) a3(r140,l0) a4(r149,l0) a5(r150,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a9(r171,l0) a10(r169,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0) a28(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r141,l0) conflicts: a0(r142,l0) a1(r146,l0) a3(r140,l0) a4(r149,l0) a5(r150,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a9(r171,l0) a10(r169,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r140,l0) conflicts: a0(r142,l0) a2(r141,l0) a1(r146,l0) a4(r149,l0) a5(r150,l0) a6(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r149,l0) conflicts: a0(r142,l0) a2(r141,l0) a1(r146,l0) a3(r140,l0) a5(r150,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a9(r171,l0) a10(r169,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0) a28(r151,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r150,l0) conflicts: a0(r142,l0) a2(r141,l0) a1(r146,l0) a3(r140,l0) a4(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r138,l0) conflicts: a2(r141,l0) a1(r146,l0) a3(r140,l0) a4(r149,l0) a8(r139,l0) a7(r148,l0) a9(r171,l0) a10(r169,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r148,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a9(r171,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0) a28(r151,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a8(r139,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a7(r148,l0) a9(r171,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0) a19(r144,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r171,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r169,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a11(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r137,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a10(r169,l0) a12(r134,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0) a17(r136,l0) a18(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r134,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a13(r165,l0) a14(r166,l0) a16(r164,l0) a15(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r165,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a12(r134,l0) a14(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r166,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a12(r134,l0) a13(r165,l0) a16(r164,l0) a15(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r160,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a12(r134,l0) a14(r166,l0) a16(r164,l0) a17(r136,l0) a18(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r164,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a12(r134,l0) a14(r166,l0) a15(r160,l0) a17(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r136,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a16(r164,l0) a15(r160,l0) a18(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r161,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a11(r137,l0) a15(r160,l0) a17(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r144,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a20(r147,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0) a28(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r147,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a8(r139,l0) a7(r148,l0) a19(r144,l0) a21(r157,l0) a22(r133,l0) a23(r155,l0) a24(r156,l0) a25(r154,l0) a26(r143,l0) a27(r152,l0) a28(r151,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a21(r157,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a8(r139,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r133,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a8(r139,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r155,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r156,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r154,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a6(r138,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r143,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r152,l0) conflicts: a2(r141,l0) a1(r146,l0) a4(r149,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r151,l0) conflicts: a1(r146,l0) a4(r149,l0) a7(r148,l0) a19(r144,l0) a20(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a3(r140)<->a8(r139)@125:shuffle
  cp1:a3(r140)<->a7(r148)@125:shuffle
  cp2:a8(r139)<->a10(r169)@125:shuffle
  cp3:a3(r140)<->a10(r169)@125:shuffle
  cp4:a3(r140)<->a11(r137)@125:shuffle
  cp5:a12(r134)<->a17(r136)@1000:move
  cp6:a6(r138)<->a22(r133)@125:shuffle
  cp7:a21(r157)<->a22(r133)@125:shuffle
  cp8:a6(r138)<->a21(r157)@125:shuffle
  cp9:a8(r139)<->a23(r155)@1000:move
  cp10:a23(r155)<->a24(r156)@125:shuffle
  cp11:a6(r138)<->a26(r143)@250:shuffle
  cp12:a27(r152)<->a28(r151)@125:shuffle
  cp13:a6(r138)<->a27(r152)@125:shuffle
  regions=1, blocks=21, points=72
    allocnos=29, copies=14, conflicts=0, ranges=41

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r142 1r146 2r141 3r140 4r149 5r150 6r138 7r148 8r139 9r171 10r169 11r137 12r134 13r165 14r166 15r160 16r164 17r136 18r161 19r144 20r147 21r157 22r133 23r155 24r156 25r154 26r143 27r152 28r151
    modified regnos: 133 134 136 137 138 139 140 141 142 143 144 146 147 148 149 150 151 152 154 155 156 157 160 161 164 165 166 169 171
    border:
    Pressure: GENERAL_REGS=12
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 171 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
      Pushing a28(r151,l0)
      Pushing a27(r152,l0)
      Pushing a26(r143,l0)
      Pushing a25(r154,l0)
      Pushing a23(r155,l0)
      Pushing a22(r133,l0)
      Pushing a21(r157,l0)
      Pushing a18(r161,l0)
      Pushing a16(r164,l0)
      Pushing a14(r166,l0)
      Pushing a13(r165,l0)
      Pushing a10(r169,l0)
      Pushing a5(r150,l0)
      Pushing a24(r156,l0)
      Pushing a15(r160,l0)
      Pushing a0(r142,l0)
      Pushing a19(r144,l0)
      Pushing a12(r134,l0)
      Pushing a3(r140,l0)
      Pushing a17(r136,l0)
      Pushing a11(r137,l0)
      Pushing a9(r171,l0)
      Pushing a4(r149,l0)
      Pushing a2(r141,l0)
      Pushing a8(r139,l0)
      Pushing a6(r138,l0)
      Pushing a20(r147,l0)
      Pushing a7(r148,l0)
      Pushing a1(r146,l0)
      Popping a1(r146,l0)  -- assign reg 4
      Popping a7(r148,l0)  -- assign reg 5
      Popping a20(r147,l0)  -- assign reg 1
      Popping a6(r138,l0)  -- assign reg 6
      Popping a8(r139,l0)  -- assign reg 7
      Popping a2(r141,l0)  -- assign reg 8
      Popping a4(r149,l0)  -- assign reg 10
      Popping a9(r171,l0)  -- assign reg 3
      Popping a11(r137,l0)  -- assign reg 3
      Popping a17(r136,l0)  -- assign reg 2
      Popping a3(r140,l0)  -- assign reg 7
      Popping a12(r134,l0)  -- assign reg 2
      Popping a19(r144,l0)  -- assign reg 3
      Popping a0(r142,l0)  -- assign reg 0
      Popping a15(r160,l0)  -- assign reg 1
      Popping a24(r156,l0)  -- assign reg 7
      Popping a5(r150,l0)  -- assign reg 3
      Popping a10(r169,l0)  -- assign reg 7
      Popping a13(r165,l0)  -- assign reg 1
      Popping a14(r166,l0)  -- assign reg 0
      Popping a16(r164,l0)  -- assign reg 12
      Popping a18(r161,l0)  -- assign reg 0
      Popping a21(r157,l0)  -- assign reg 6
      Popping a22(r133,l0)  -- assign reg 6
      Popping a23(r155,l0)  -- assign reg 7
      Popping a25(r154,l0)  -- assign reg 2
      Popping a26(r143,l0)  -- assign reg 6
      Popping a27(r152,l0)  -- assign reg 6
      Popping a28(r151,l0)  -- assign reg 6
Disposition:
   22:r133 l0     6   12:r134 l0     2   17:r136 l0     2   11:r137 l0     3
    6:r138 l0     6    8:r139 l0     7    3:r140 l0     7    2:r141 l0     8
    0:r142 l0     0   26:r143 l0     6   19:r144 l0     3    1:r146 l0     4
   20:r147 l0     1    7:r148 l0     5    4:r149 l0    10    5:r150 l0     3
   28:r151 l0     6   27:r152 l0     6   25:r154 l0     2   23:r155 l0     7
   24:r156 l0     7   21:r157 l0     6   15:r160 l0     1   18:r161 l0     0
   16:r164 l0    12   13:r165 l0     1   14:r166 l0     0   10:r169 l0     7
    9:r171 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1, 147
insn=2, live_throughout: 2, 3, 13, 14, 147, dead_or_set: 0, 146
insn=4, live_throughout: 3, 13, 14, 146, 147, dead_or_set: 2, 148
insn=5, live_throughout: 13, 14, 146, 147, 148, dead_or_set: 3, 149
insn=14, live_throughout: 13, 14, 146, 147, 148, 149, dead_or_set: 144
insn=11, live_throughout: 13, 14, 144, 146, 147, 148, 149, dead_or_set: 151
insn=16, live_throughout: 13, 14, 144, 146, 147, 148, 149, 151, dead_or_set: 
insn=12, live_throughout: 13, 14, 24, 144, 146, 147, 148, 149, dead_or_set: 151, 152
insn=10, live_throughout: 13, 14, 24, 144, 146, 147, 148, 149, 152, dead_or_set: 141
insn=13, live_throughout: 13, 14, 24, 141, 144, 146, 147, 148, 149, dead_or_set: 138, 152
insn=17, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=19, live_throughout: 13, 14, 141, 144, 146, 147, 148, 149, dead_or_set: 138, 143
insn=20, live_throughout: 13, 14, 141, 144, 146, 147, 148, 149, dead_or_set: 138, 143
insn=21, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=23, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 154
insn=24, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 154, 156
insn=26, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 155, 156
insn=27, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, 155, dead_or_set: 
insn=29, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 139, 155
insn=149, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=32, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=35, live_throughout: 13, 14, 138, 141, 144, 146, 147, 148, 149, dead_or_set: 139
insn=36, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=38, live_throughout: 13, 14, 141, 144, 146, 147, 148, 149, dead_or_set: 133, 138
insn=41, live_throughout: 13, 14, 133, 141, 144, 146, 147, 148, 149, dead_or_set: 139
insn=39, live_throughout: 13, 14, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 133, 157
insn=40, live_throughout: 13, 14, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 138, 157
insn=151, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=44, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=46, live_throughout: 13, 14, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 138
insn=47, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=50, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=51, live_throughout: 13, 14, 138, 139, 141, 144, 146, 147, 148, 149, dead_or_set: 
insn=53, live_throughout: 13, 14, 138, 141, 146, 149, dead_or_set: 140, 147
insn=153, live_throughout: 13, 14, 138, 140, 141, 146, 149, dead_or_set: 
insn=56, live_throughout: 13, 14, 138, 139, 141, 144, 146, 148, 149, dead_or_set: 
insn=60, live_throughout: 13, 14, 138, 139, 141, 146, 148, 149, dead_or_set: 144
insn=58, live_throughout: 13, 14, 24, 138, 139, 141, 146, 148, 149, dead_or_set: 137
insn=61, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=63, live_throughout: 13, 14, 138, 139, 141, 146, 148, 149, dead_or_set: 137
insn=64, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=67, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 160
insn=69, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 136
insn=68, live_throughout: 13, 14, 136, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 161
insn=70, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 136, 161
insn=71, live_throughout: 13, 14, 136, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 
insn=72, live_throughout: 13, 14, 136, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 
insn=75, live_throughout: 13, 14, 136, 137, 138, 139, 141, 146, 148, 149, 160, dead_or_set: 164
insn=159, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, 160, 164, dead_or_set: 134, 136
insn=77, live_throughout: 13, 14, 134, 137, 138, 139, 141, 146, 148, 149, 160, 164, dead_or_set: 166
insn=76, live_throughout: 13, 14, 134, 137, 138, 139, 141, 146, 148, 149, 166, dead_or_set: 160, 164, 165
insn=79, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 134, 165, 166
insn=80, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 134
insn=81, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=84, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=85, live_throughout: 13, 14, 137, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=87, live_throughout: 13, 14, 137, 138, 141, 146, 149, dead_or_set: 139, 169
insn=89, live_throughout: 13, 14, 138, 141, 146, 149, dead_or_set: 137, 140, 169
insn=155, live_throughout: 13, 14, 138, 140, 141, 146, 149, dead_or_set: 
insn=92, live_throughout: 13, 138, 139, 141, 146, 148, 149, dead_or_set: 
insn=97, live_throughout: 13, 138, 139, 141, 146, 148, 149, dead_or_set: 0
insn=98, live_throughout: 0, 13, 138, 139, 141, 146, 148, 149, dead_or_set: 1
insn=162, live_throughout: 0, 1, 13, 138, 139, 141, 146, 148, 149, dead_or_set: 171
insn=99, live_throughout: 13, 138, 139, 141, 146, 148, 149, dead_or_set: 0, 1, 14, 171
insn=100, live_throughout: 13, 14, 138, 141, 146, 149, dead_or_set: 139, 140, 148
insn=101, live_throughout: 13, 14, 138, 140, 141, 146, 149, dead_or_set: 
insn=107, live_throughout: 13, 14, 140, 141, 146, 149, dead_or_set: 138
insn=108, live_throughout: 13, 14, 140, 141, 146, 149, dead_or_set: 142
insn=161, live_throughout: 13, 14, 140, 141, 142, 146, 149, dead_or_set: 150
insn=103, live_throughout: 13, 14, 140, 141, 142, 146, 149, dead_or_set: 150
insn=104, live_throughout: 13, 14, 140, 141, 142, 146, dead_or_set: 149
insn=105, live_throughout: 13, 14, 141, 142, 146, dead_or_set: 140
insn=106, live_throughout: 13, 14, 142, dead_or_set: 141, 146
insn=157, live_throughout: 13, 14, 142, dead_or_set: 
insn=111, live_throughout: 13, 14, dead_or_set: 
insn=113, live_throughout: 13, 14, dead_or_set: 142
insn=114, live_throughout: 13, 14, 142, dead_or_set: 
insn=120, live_throughout: 13, 14, dead_or_set: 0, 142
insn=126, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 150: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 23 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 67 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 162 (nil))
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 159
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 69
changing reg in insn 70
changing reg in insn 159
changing reg in insn 70
changing reg in insn 71
changing reg in insn 63
changing reg in insn 58
changing reg in insn 89
changing reg in insn 75
changing reg in insn 68
changing reg in insn 63
changing reg in insn 68
changing reg in insn 68
changing reg in insn 46
changing reg in insn 40
changing reg in insn 20
changing reg in insn 13
changing reg in insn 84
changing reg in insn 107
changing reg in insn 46
changing reg in insn 38
changing reg in insn 19
changing reg in insn 35
changing reg in insn 29
changing reg in insn 41
changing reg in insn 100
changing reg in insn 87
changing reg in insn 58
changing reg in insn 89
changing reg in insn 100
changing reg in insn 53
changing reg in insn 105
changing reg in insn 10
changing reg in insn 35
changing reg in insn 35
changing reg in insn 106
changing reg in insn 113
changing reg in insn 108
changing reg in insn 120
changing reg in insn 19
changing reg in insn 20
changing reg in insn 14
changing reg in insn 60
changing reg in insn 50
changing reg in insn 16
changing reg in insn 2
changing reg in insn 107
changing reg in insn 106
changing reg in insn 105
changing reg in insn 104
changing reg in insn 103
changing reg in insn 11
changing reg in insn 11
changing reg in insn 3
changing reg in insn 53
changing reg in insn 14
changing reg in insn 10
changing reg in insn 4
changing reg in insn 70
changing reg in insn 98
changing reg in insn 100
changing reg in insn 97
changing reg in insn 77
changing reg in insn 5
changing reg in insn 104
changing reg in insn 161
changing reg in insn 103
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 39
changing reg in insn 40
changing reg in insn 67
changing reg in insn 76
changing reg in insn 68
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 76
changing reg in insn 79
changing reg in insn 77
changing reg in insn 79
changing reg in insn 87
changing reg in insn 89
changing reg in insn 162
changing reg in insn 99
Spilling for insn 107.
Spilling for insn 103.
Spilling for insn 104.
Spilling for insn 105.
Spilling for insn 106.

Reloads for insn # 107
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 103
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146]) [0 <variable>.uregs+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146]) [0 <variable>.uregs+0 S4 A32])

Reloads for insn # 104
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])

Reloads for insn # 105
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])

Reloads for insn # 106
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
deleting insn with uid = 3.
deleting insn with uid = 29.
deleting insn with uid = 159.
deleting insn with uid = 120.


try_optimize_cfg iteration 1

Simplifying condjump 27 around jump 149
deleting insn with uid = 28.
deleting insn with uid = 149.
deleting insn with uid = 150.
deleting block 5
deleting insn with uid = 32.
Deleted label in block 6.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 99.
deleting insn with uid = 99.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 38 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 27 count 38 (  1.9)


setup_return

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,7u,1d} r2={6d,6u} r3={7d,10u,2d} r4={1d,6u,1d} r5={1d,5u} r6={9d,10u,2d} r7={8d,7u} r8={1d,3u} r10={1d,1u} r12={3d,1u,1d} r13={1d,21u,1d} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={11d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 273{173d,92u,8e} in 64{63 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 7 2 2 NOTE_INSN_DELETED)

(insn 2 15 4 2 arch/arm/kernel/signal.c:468 (set (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 4 2 5 2 arch/arm/kernel/signal.c:468 (set (reg/v/f:SI 5 r5 [orig:148 rc ] [148])
        (reg:SI 2 r2 [ rc ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 14 2 arch/arm/kernel/signal.c:468 (set (reg/v/f:SI 10 sl [orig:149 frame ] [149])
        (reg:SI 3 r3 [ frame ])) 167 {*arm_movsi_insn} (nil))

(insn 14 5 11 2 arch/arm/kernel/signal.c:479 (set (reg:SI 3 r3 [orig:144 D.24830 ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:147 ka ] [147])
                (const_int 4 [0x4])) [0 <variable>.sa.sa_flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 14 16 2 arch/arm/kernel/signal.c:472 (set (reg:SI 6 r6 [orig:151 <variable>.uregs+64 ] [151])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 16 11 12 2 arch/arm/kernel/signal.c:479 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:144 D.24830 ] [144])
                (const_int 1 [0x1])
                (const_int 25 [0x19]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 12 16 10 2 arch/arm/kernel/signal.c:472 (set (reg:SI 6 r6 [152])
        (and:SI (reg:SI 6 r6 [orig:151 <variable>.uregs+64 ] [151])
            (const_int 16777215 [0xffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 10 12 13 2 arch/arm/kernel/signal.c:469 (set (reg/v:SI 8 r8 [orig:141 handler ] [141])
        (mem/s/f/j:SI (reg/v/f:SI 1 r1 [orig:147 ka ] [147]) [0 <variable>.sa.sa_handler+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 10 17 2 arch/arm/kernel/signal.c:472 (set (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
        (and:SI (reg:SI 6 r6 [152])
            (const_int -513 [0xfffffffffffffdff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg:SI 6 r6 [orig:151 <variable>.uregs+64 ] [151])
            (const_int 16776703 [0xfffdff]))
        (nil)))

(jump_insn 17 13 18 2 arch/arm/kernel/signal.c:479 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 20 3 arch/arm/kernel/signal.c:480 (set (reg:SI 6 r6 [orig:143 D.24834 ] [143])
        (and:SI (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
            (const_int -32 [0xffffffffffffffe0]))) 67 {*arm_andsi3_insn} (nil))

(insn 20 19 21 3 arch/arm/kernel/signal.c:480 (set (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
        (ior:SI (reg:SI 6 r6 [orig:143 D.24834 ] [143])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 21 20 22 4 2 "" [1 uses])

(note 22 21 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 25 22 23 4 NOTE_INSN_DELETED)

(insn 23 25 24 4 arch/arm/kernel/signal.c:483 (set (reg/f:SI 2 r2 [154])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)
        (nil)))

(insn 24 23 26 4 arch/arm/kernel/signal.c:483 (set (reg:SI 7 r7 [orig:156 elf_hwcap ] [156])
        (mem/c/i:SI (reg/f:SI 2 r2 [154]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 26 24 27 4 arch/arm/kernel/signal.c:483 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 7 r7 [orig:156 elf_hwcap ] [156])
                        (const_int 4 [0x4]))
                    (const_int 0 [0x0])))
            (set (reg:SI 7 r7 [155])
                (and:SI (reg:SI 7 r7 [orig:156 elf_hwcap ] [156])
                    (const_int 4 [0x4])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 27 26 33 4 arch/arm/kernel/signal.c:483 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 6 9)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 33 27 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 34 33 35 6 NOTE_INSN_DELETED)

(insn 35 34 36 6 arch/arm/kernel/signal.c:490 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 8 r8 [orig:141 handler ] [141])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:139 thumb ] [139])
                (and:SI (reg/v:SI 8 r8 [orig:141 handler ] [141])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 36 35 37 6 arch/arm/kernel/signal.c:490 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 41 7 arch/arm/kernel/signal.c:491 (set (reg/v:SI 6 r6 [orig:133 cpsr.358 ] [133])
        (ior:SI (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
            (const_int 32 [0x20]))) 89 {*arm_iorsi3} (nil))

(insn 41 38 39 7 arch/arm/kernel/signal.c:494 (set (reg/v:SI 7 r7 [orig:139 thumb ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 39 41 40 7 arch/arm/kernel/signal.c:494 (set (reg:SI 6 r6 [157])
        (and:SI (reg/v:SI 6 r6 [orig:133 cpsr.358 ] [133])
            (const_int -100663297 [0xfffffffff9ffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 40 39 151 7 arch/arm/kernel/signal.c:494 (set (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
        (and:SI (reg:SI 6 r6 [157])
            (const_int -64513 [0xffffffffffff03ff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 6 r6 [orig:133 cpsr.358 ] [133])
            (const_int -100727809 [0xfffffffff9ff03ff]))
        (nil)))

(jump_insn 151 40 152 7 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 152 151 44)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  6 [50.0%] 
(code_label 44 152 45 8 5 "" [1 uses])

(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 8 arch/arm/kernel/signal.c:497 (set (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
        (and:SI (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
            (const_int -33 [0xffffffffffffffdf]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 4 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  4 [50.0%] 
;; Pred edge  7 [100.0%] 
(code_label 47 46 48 9 4 "" [2 uses])

(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 49 48 50 9 NOTE_INSN_DELETED)

(insn 50 49 51 9 arch/arm/kernel/signal.c:501 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:144 D.24830 ] [144])
                (const_int 1 [0x1])
                (const_int 26 [0x1a]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 51 50 52 9 arch/arm/kernel/signal.c:501 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 52 51 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 153 10 arch/arm/kernel/signal.c:502 (set (reg/v:SI 7 r7 [orig:140 retcode ] [140])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:147 ka ] [147])
                (const_int 8 [0x8])) [0 <variable>.sa.sa_restorer+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 153 53 154 10 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 18)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 154 153 56)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%] 
(code_label 56 154 57 11 6 "" [1 uses])

(note 57 56 59 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 59 57 60 11 NOTE_INSN_DELETED)

(insn 60 59 58 11 arch/arm/kernel/signal.c:506 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:144 D.24830 ] [144])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 58 60 61 11 arch/arm/kernel/signal.c:504 (set (reg/v:SI 3 r3 [orig:137 idx ] [137])
        (ashift:SI (reg/v:SI 7 r7 [orig:139 thumb ] [139])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 61 58 62 11 arch/arm/kernel/signal.c:506 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  13 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 62 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 63 62 64 12 arch/arm/kernel/signal.c:507 (set (reg/v:SI 3 r3 [orig:137 idx ] [137])
        (plus:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [50.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 64 63 65 13 8 "" [1 uses])

(note 65 64 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 67 65 69 13 arch/arm/kernel/signal.c:509 discrim 4 (set (reg/f:SI 1 r1 [160])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 69 67 68 13 arch/arm/kernel/signal.c:509 discrim 4 (set (reg/v:SI 2 r2 [orig:136 __pu_err ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 68 69 70 13 arch/arm/kernel/signal.c:509 discrim 4 (set (reg:SI 0 r0 [161])
        (mem/s/u/j:SI (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [160])) [0 sigreturn_codes S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/u/j:SI (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [160])) [0 sigreturn_codes S4 A32])
        (expr_list:REG_EQUAL (mem/s/u/j:SI (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 sigreturn_codes S4 A32])
            (nil))))

(insn 70 68 71 13 arch/arm/kernel/signal.c:509 discrim 4 (parallel [
            (set (reg/v:SI 2 r2 [orig:136 __pu_err ] [136])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 0 r0 [161])
                        (reg/v/f:SI 5 r5 [orig:148 rc ] [148])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:136 __pu_err ] [136])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691006))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 71 70 72 13 arch/arm/kernel/signal.c:509 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:136 __pu_err ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 13 arch/arm/kernel/signal.c:509 discrim 6 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 13 -> ( 19 14)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [39.0%] 
;; Succ edge  14 [61.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  13 [61.0%]  (fallthru)
(note 73 72 75 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 75 73 77 14 arch/arm/kernel/signal.c:510 discrim 4 (set (reg:SI 12 ip [164])
        (plus:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 77 75 76 14 arch/arm/kernel/signal.c:510 discrim 4 (set (reg/f:SI 0 r0 [166])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 rc ] [148])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 76 77 79 14 arch/arm/kernel/signal.c:510 discrim 4 (set (reg:SI 1 r1 [165])
        (mem/s/u/j:SI (plus:SI (mult:SI (reg:SI 12 ip [164])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [160])) [0 sigreturn_codes S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/u/j:SI (plus:SI (mult:SI (reg:SI 12 ip [164])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 sigreturn_codes S4 A32])
        (nil)))

(insn 79 76 80 14 arch/arm/kernel/signal.c:510 discrim 4 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 __pu_err ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [165])
                        (reg/f:SI 0 r0 [166])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:134 __pu_err ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691012))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 80 79 81 14 arch/arm/kernel/signal.c:509 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:134 __pu_err ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 81 80 82 14 arch/arm/kernel/signal.c:509 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 14 -> ( 19 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [39.0%] 
;; Succ edge  15 [61.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [61.0%]  (fallthru)
(note 82 81 83 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 83 82 84 15 NOTE_INSN_DELETED)

(insn 84 83 85 15 arch/arm/kernel/signal.c:513 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:138 cpsr ] [138])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 85 84 86 15 arch/arm/kernel/signal.c:513 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  16 [71.0%]  (fallthru)
;; Succ edge  17 [29.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  15 [71.0%]  (fallthru)
(note 86 85 88 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 88 86 87 16 NOTE_INSN_DELETED)

(insn 87 88 89 16 arch/arm/kernel/signal.c:518 (set (reg:SI 7 r7 [169])
        (plus:SI (reg/v:SI 7 r7 [orig:139 thumb ] [139])
            (const_int -64256 [0xffffffffffff0500]))) 4 {*arm_addsi3} (nil))

(insn 89 87 155 16 arch/arm/kernel/signal.c:518 (set (reg/v:SI 7 r7 [orig:140 retcode ] [140])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:137 idx ] [137])
                (const_int 4 [0x4]))
            (reg:SI 7 r7 [169]))) 270 {*arith_shiftsi} (nil))

(jump_insn 155 89 156 16 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 156 155 92)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  15 [29.0%] 
(code_label 92 156 93 17 10 "" [1 uses])

(note 93 92 95 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 95 93 96 17 NOTE_INSN_DELETED)

(note 96 95 97 17 NOTE_INSN_DELETED)

(insn 97 96 98 17 arch/arm/kernel/signal.c:524 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:148 rc ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 98 97 162 17 arch/arm/kernel/signal.c:524 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 rc ] [148])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 162 98 99 17 arch/arm/kernel/signal.c:524 (set (reg/f:SI 3 r3 [171])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x113df900 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x113df900 cpu_cache>)
        (nil)))

(call_insn 99 162 100 17 arch/arm/kernel/signal.c:524 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [171])
                            (const_int 16 [0x10])) [0 cpu_cache.coherent_kern_range+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 100 99 101 17 arch/arm/kernel/signal.c:527 (set (reg/v:SI 7 r7 [orig:140 retcode ] [140])
        (plus:SI (reg/v:SI 7 r7 [orig:139 thumb ] [139])
            (reg/v/f:SI 5 r5 [orig:148 rc ] [148]))) 4 {*arm_addsi3} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 10 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 101 100 102 18 7 "" [2 uses])

(note 102 101 107 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 107 102 108 18 arch/arm/kernel/signal.c:535 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg/v:SI 6 r6 [orig:138 cpsr ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 108 107 161 18 arch/arm/kernel/signal.c:537 (set (reg:SI 0 r0 [orig:142 D.24862 ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 161 108 103 18 arch/arm/kernel/signal.c:531 (set (reg/v:SI 3 r3 [orig:150 usig ] [150])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 usig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 usig+0 S4 A32])
        (nil)))

(insn 103 161 104 18 arch/arm/kernel/signal.c:531 (set (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146]) [0 <variable>.uregs+0 S4 A32])
        (reg/v:SI 3 r3 [orig:150 usig ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 104 103 105 18 arch/arm/kernel/signal.c:532 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])
        (reg/v/f:SI 10 sl [orig:149 frame ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 105 104 106 18 arch/arm/kernel/signal.c:533 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])
        (reg/v:SI 7 r7 [orig:140 retcode ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 106 105 157 18 arch/arm/kernel/signal.c:534 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:146 regs ] [146])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg/v:SI 8 r8 [orig:141 handler ] [141])) 167 {*arm_movsi_insn} (nil))

(jump_insn 157 106 158 18 arch/arm/kernel/signal.c:537 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 20)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  20 [100.0%] 

(barrier 158 157 111)

;; Start of basic block ( 14 13) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  14 [39.0%] 
;; Pred edge  13 [39.0%] 
(code_label 111 158 112 19 9 "" [2 uses])

(note 112 111 113 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 19 arch/arm/kernel/signal.c:511 (set (reg:SI 0 r0 [orig:142 D.24862 ] [142])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 19 -> ( 20)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 114 113 115 20 11 "" [1 uses])

(note 115 114 126 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 126 115 160 20 arch/arm/kernel/signal.c:538 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 20 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 160 126 163 NOTE_INSN_DELETED)

(note 163 160 0 NOTE_INSN_DELETED)


;; Function setup_sigframe (setup_sigframe)[0:1446]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 159.
verify found no changes in insn with uid = 159.
deleting insn with uid = 104.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a1 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:300000
  a8(r186,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:142000
  a9(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a16(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:440000
  a20(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a26(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a33(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a40(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a46(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a54(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a58(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a62(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r220: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:300000
  a8(r186,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:142000
  a9(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a16(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:440000
  a20(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a26(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a33(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a40(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a46(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a54(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a58(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a62(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 147(l0): point = 0
   Insn 141(l0): point = 2
   Insn 134(l0): point = 4
   Insn 157(l0): point = 6
   Insn 135(l0): point = 8
   Insn 152(l0): point = 11
   Insn 128(l0): point = 13
   Insn 127(l0): point = 15
   Insn 126(l0): point = 17
   Insn 125(l0): point = 19
   Insn 124(l0): point = 21
   Insn 123(l0): point = 23
   Insn 122(l0): point = 25
   Insn 121(l0): point = 27
   Insn 120(l0): point = 29
   Insn 119(l0): point = 31
   Insn 118(l0): point = 33
   Insn 114(l0): point = 35
   Insn 117(l0): point = 37
   Insn 116(l0): point = 39
   Insn 112(l0): point = 41
   Insn 110(l0): point = 43
   Insn 109(l0): point = 45
   Insn 111(l0): point = 47
   Insn 106(l0): point = 49
   Insn 159(l0): point = 51
   Insn 105(l0): point = 53
   Insn 103(l0): point = 55
   Insn 101(l0): point = 57
   Insn 100(l0): point = 59
   Insn 156(l0): point = 61
   Insn 99(l0): point = 63
   Insn 94(l0): point = 66
   Insn 93(l0): point = 68
   Insn 88(l0): point = 70
   Insn 92(l0): point = 72
   Insn 87(l0): point = 74
   Insn 85(l0): point = 76
   Insn 86(l0): point = 78
   Insn 83(l0): point = 80
   Insn 82(l0): point = 82
   Insn 81(l0): point = 84
   Insn 80(l0): point = 86
   Insn 79(l0): point = 88
   Insn 78(l0): point = 90
   Insn 73(l0): point = 92
   Insn 72(l0): point = 94
   Insn 71(l0): point = 96
   Insn 66(l0): point = 98
   Insn 64(l0): point = 100
   Insn 63(l0): point = 102
   Insn 155(l0): point = 104
   Insn 65(l0): point = 106
   Insn 154(l0): point = 108
   Insn 59(l0): point = 110
   Insn 58(l0): point = 112
   Insn 57(l0): point = 114
   Insn 56(l0): point = 116
   Insn 55(l0): point = 118
   Insn 54(l0): point = 120
   Insn 53(l0): point = 122
   Insn 52(l0): point = 124
   Insn 51(l0): point = 126
   Insn 50(l0): point = 128
   Insn 49(l0): point = 130
   Insn 48(l0): point = 132
   Insn 47(l0): point = 134
   Insn 46(l0): point = 136
   Insn 45(l0): point = 138
   Insn 44(l0): point = 140
   Insn 43(l0): point = 142
   Insn 42(l0): point = 144
   Insn 41(l0): point = 146
   Insn 40(l0): point = 148
   Insn 39(l0): point = 150
   Insn 38(l0): point = 152
   Insn 37(l0): point = 154
   Insn 36(l0): point = 156
   Insn 35(l0): point = 158
   Insn 34(l0): point = 160
   Insn 33(l0): point = 162
   Insn 32(l0): point = 164
   Insn 31(l0): point = 166
   Insn 30(l0): point = 168
   Insn 29(l0): point = 170
   Insn 28(l0): point = 172
   Insn 27(l0): point = 174
   Insn 26(l0): point = 176
   Insn 25(l0): point = 178
   Insn 24(l0): point = 180
   Insn 23(l0): point = 182
   Insn 22(l0): point = 184
   Insn 21(l0): point = 186
   Insn 20(l0): point = 188
   Insn 19(l0): point = 190
   Insn 18(l0): point = 192
   Insn 17(l0): point = 194
   Insn 16(l0): point = 196
   Insn 15(l0): point = 198
   Insn 14(l0): point = 200
   Insn 13(l0): point = 202
   Insn 12(l0): point = 204
   Insn 11(l0): point = 206
   Insn 10(l0): point = 208
   Insn 8(l0): point = 210
   Insn 9(l0): point = 212
   Insn 4(l0): point = 214
   Insn 2(l0): point = 216
   Insn 3(l0): point = 218
 a0(r219): [3..4]
 a1(r220): [3..8]
 a2(r143): [62..68] [7..11]
 a3(r144): [9..72]
 a4(r133): [14..35]
 a5(r217): [16..19]
 a6(r218): [16..17]
 a7(r148): [18..216]
 a8(r186): [20..108]
 a9(r215): [22..25]
 a10(r216): [22..23]
 a11(r213): [28..31]
 a12(r214): [28..29]
 a13(r211): [34..39]
 a14(r212): [34..37]
 a15(r138): [36..61]
 a16(r207): [50..51]
 a17(r208): [50..53]
 a18(r205): [56..57]
 a19(r134): [69..208]
 a20(r150): [79..214]
 a21(r201): [81..84]
 a22(r202): [81..82]
 a23(r199): [87..90]
 a24(r200): [87..88]
 a25(r188): [91..102]
 a26(r194): [93..96]
 a27(r195): [93..94]
 a28(r189): [99..100]
 a29(r190): [99..106]
 a30(r184): [111..114]
 a31(r185): [111..112]
 a32(r149): [115..218]
 a33(r182): [117..120]
 a34(r183): [117..118]
 a35(r180): [123..126]
 a36(r181): [123..124]
 a37(r178): [129..132]
 a38(r179): [129..130]
 a39(r176): [135..138]
 a40(r177): [135..136]
 a41(r174): [141..144]
 a42(r175): [141..142]
 a43(r172): [147..150]
 a44(r173): [147..148]
 a45(r170): [153..156]
 a46(r171): [153..154]
 a47(r168): [159..162]
 a48(r169): [159..160]
 a49(r166): [165..168]
 a50(r167): [165..166]
 a51(r164): [171..174]
 a52(r165): [171..172]
 a53(r162): [177..180]
 a54(r163): [177..178]
 a55(r160): [183..186]
 a56(r161): [183..184]
 a57(r158): [189..192]
 a58(r159): [189..190]
 a59(r156): [195..198]
 a60(r157): [195..196]
 a61(r154): [201..204]
 a62(r155): [201..202]
 a63(r151): [207..210]
 a64(r152): [207..212]
Compressing live ranges: from 221 to 105 - 47%
Ranges after the compression:
 a0(r219): [0..1]
 a1(r220): [0..3]
 a2(r143): [29..30] [2..5]
 a3(r144): [4..32]
 a4(r133): [6..19]
 a5(r217): [7..10]
 a6(r218): [7..8]
 a7(r148): [9..103]
 a8(r186): [11..48]
 a9(r215): [12..14]
 a10(r216): [12..13]
 a11(r213): [15..17]
 a12(r214): [15..16]
 a13(r211): [18..22]
 a14(r212): [18..21]
 a15(r138): [20..28]
 a16(r207): [23..24]
 a17(r208): [23..25]
 a18(r205): [26..27]
 a19(r134): [31..99]
 a20(r150): [33..102]
 a21(r201): [34..36]
 a22(r202): [34..35]
 a23(r199): [37..39]
 a24(r200): [37..38]
 a25(r188): [40..46]
 a26(r194): [41..43]
 a27(r195): [41..42]
 a28(r189): [44..45]
 a29(r190): [44..47]
 a30(r184): [49..51]
 a31(r185): [49..50]
 a32(r149): [52..104]
 a33(r182): [53..55]
 a34(r183): [53..54]
 a35(r180): [56..58]
 a36(r181): [56..57]
 a37(r178): [59..61]
 a38(r179): [59..60]
 a39(r176): [62..64]
 a40(r177): [62..63]
 a41(r174): [65..67]
 a42(r175): [65..66]
 a43(r172): [68..70]
 a44(r173): [68..69]
 a45(r170): [71..73]
 a46(r171): [71..72]
 a47(r168): [74..76]
 a48(r169): [74..75]
 a49(r166): [77..79]
 a50(r167): [77..78]
 a51(r164): [80..82]
 a52(r165): [80..81]
 a53(r162): [83..85]
 a54(r163): [83..84]
 a55(r160): [86..88]
 a56(r161): [86..87]
 a57(r158): [89..91]
 a58(r159): [89..90]
 a59(r156): [92..94]
 a60(r157): [92..93]
 a61(r154): [95..97]
 a62(r155): [95..96]
 a63(r151): [98..100]
 a64(r152): [98..101]
+++Allocating 520 bytes for conflict table (uncompressed size 1040)
;; a0(r219,l0) conflicts: a1(r220,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r220,l0) conflicts: a0(r219,l0) a2(r143,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r143,l0) conflicts: a1(r220,l0) a3(r144,l0) a7(r148,l0) a8(r186,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r144,l0) conflicts: a2(r143,l0) a4(r133,l0) a6(r218,l0) a5(r217,l0) a7(r148,l0) a8(r186,l0) a10(r216,l0) a9(r215,l0) a12(r214,l0) a11(r213,l0) a14(r212,l0) a13(r211,l0) a15(r138,l0) a16(r207,l0) a17(r208,l0) a18(r205,l0) a19(r134,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r133,l0) conflicts: a3(r144,l0) a6(r218,l0) a5(r217,l0) a7(r148,l0) a8(r186,l0) a10(r216,l0) a9(r215,l0) a12(r214,l0) a11(r213,l0) a14(r212,l0) a13(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r217,l0) conflicts: a3(r144,l0) a4(r133,l0) a6(r218,l0) a7(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r218,l0) conflicts: a3(r144,l0) a4(r133,l0) a5(r217,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r148,l0) conflicts: a2(r143,l0) a3(r144,l0) a4(r133,l0) a5(r217,l0) a8(r186,l0) a10(r216,l0) a9(r215,l0) a12(r214,l0) a11(r213,l0) a14(r212,l0) a13(r211,l0) a15(r138,l0) a16(r207,l0) a17(r208,l0) a18(r205,l0) a19(r134,l0) a20(r150,l0) a22(r202,l0) a21(r201,l0) a24(r200,l0) a23(r199,l0) a25(r188,l0) a27(r195,l0) a26(r194,l0) a28(r189,l0) a29(r190,l0) a31(r185,l0) a30(r184,l0) a32(r149,l0) a34(r183,l0) a33(r182,l0) a36(r181,l0) a35(r180,l0) a38(r179,l0) a37(r178,l0) a40(r177,l0) a39(r176,l0) a42(r175,l0) a41(r174,l0) a44(r173,l0) a43(r172,l0) a46(r171,l0) a45(r170,l0) a48(r169,l0) a47(r168,l0) a50(r167,l0) a49(r166,l0) a52(r165,l0) a51(r164,l0) a54(r163,l0) a53(r162,l0) a56(r161,l0) a55(r160,l0) a58(r159,l0) a57(r158,l0) a60(r157,l0) a59(r156,l0) a62(r155,l0) a61(r154,l0) a63(r151,l0) a64(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a8(r186,l0) conflicts: a2(r143,l0) a3(r144,l0) a4(r133,l0) a7(r148,l0) a10(r216,l0) a9(r215,l0) a12(r214,l0) a11(r213,l0) a14(r212,l0) a13(r211,l0) a15(r138,l0) a16(r207,l0) a17(r208,l0) a18(r205,l0) a19(r134,l0) a20(r150,l0) a22(r202,l0) a21(r201,l0) a24(r200,l0) a23(r199,l0) a25(r188,l0) a27(r195,l0) a26(r194,l0) a28(r189,l0) a29(r190,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a9(r215,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a10(r216,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r216,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a9(r215,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r213,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a12(r214,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r214,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a11(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r211,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a14(r212,l0) a15(r138,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r212,l0) conflicts: a3(r144,l0) a4(r133,l0) a7(r148,l0) a8(r186,l0) a13(r211,l0) a15(r138,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a15(r138,l0) conflicts: a3(r144,l0) a7(r148,l0) a8(r186,l0) a14(r212,l0) a13(r211,l0) a16(r207,l0) a17(r208,l0) a18(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a16(r207,l0) conflicts: a3(r144,l0) a7(r148,l0) a8(r186,l0) a15(r138,l0) a17(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r208,l0) conflicts: a3(r144,l0) a7(r148,l0) a8(r186,l0) a15(r138,l0) a16(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r205,l0) conflicts: a3(r144,l0) a7(r148,l0) a8(r186,l0) a15(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r134,l0) conflicts: a3(r144,l0) a7(r148,l0) a8(r186,l0) a20(r150,l0) a22(r202,l0) a21(r201,l0) a24(r200,l0) a23(r199,l0) a25(r188,l0) a27(r195,l0) a26(r194,l0) a28(r189,l0) a29(r190,l0) a31(r185,l0) a30(r184,l0) a32(r149,l0) a34(r183,l0) a33(r182,l0) a36(r181,l0) a35(r180,l0) a38(r179,l0) a37(r178,l0) a40(r177,l0) a39(r176,l0) a42(r175,l0) a41(r174,l0) a44(r173,l0) a43(r172,l0) a46(r171,l0) a45(r170,l0) a48(r169,l0) a47(r168,l0) a50(r167,l0) a49(r166,l0) a52(r165,l0) a51(r164,l0) a54(r163,l0) a53(r162,l0) a56(r161,l0) a55(r160,l0) a58(r159,l0) a57(r158,l0) a60(r157,l0) a59(r156,l0) a62(r155,l0) a61(r154,l0) a63(r151,l0) a64(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a20(r150,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a22(r202,l0) a21(r201,l0) a24(r200,l0) a23(r199,l0) a25(r188,l0) a27(r195,l0) a26(r194,l0) a28(r189,l0) a29(r190,l0) a31(r185,l0) a30(r184,l0) a32(r149,l0) a34(r183,l0) a33(r182,l0) a36(r181,l0) a35(r180,l0) a38(r179,l0) a37(r178,l0) a40(r177,l0) a39(r176,l0) a42(r175,l0) a41(r174,l0) a44(r173,l0) a43(r172,l0) a46(r171,l0) a45(r170,l0) a48(r169,l0) a47(r168,l0) a50(r167,l0) a49(r166,l0) a52(r165,l0) a51(r164,l0) a54(r163,l0) a53(r162,l0) a56(r161,l0) a55(r160,l0) a58(r159,l0) a57(r158,l0) a60(r157,l0) a59(r156,l0) a62(r155,l0) a61(r154,l0) a63(r151,l0) a64(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r201,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a22(r202,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r202,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a21(r201,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r199,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a24(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r200,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a23(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r188,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a27(r195,l0) a26(r194,l0) a28(r189,l0) a29(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r194,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a25(r188,l0) a27(r195,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r195,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a25(r188,l0) a26(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r189,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a25(r188,l0) a29(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r190,l0) conflicts: a7(r148,l0) a8(r186,l0) a19(r134,l0) a20(r150,l0) a25(r188,l0) a28(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r184,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a31(r185,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r185,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a30(r184,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r149,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a34(r183,l0) a33(r182,l0) a36(r181,l0) a35(r180,l0) a38(r179,l0) a37(r178,l0) a40(r177,l0) a39(r176,l0) a42(r175,l0) a41(r174,l0) a44(r173,l0) a43(r172,l0) a46(r171,l0) a45(r170,l0) a48(r169,l0) a47(r168,l0) a50(r167,l0) a49(r166,l0) a52(r165,l0) a51(r164,l0) a54(r163,l0) a53(r162,l0) a56(r161,l0) a55(r160,l0) a58(r159,l0) a57(r158,l0) a60(r157,l0) a59(r156,l0) a62(r155,l0) a61(r154,l0) a63(r151,l0) a64(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a33(r182,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a34(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r183,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a33(r182,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r180,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a36(r181,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r181,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a35(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r178,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a38(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r179,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a37(r178,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r176,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a40(r177,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r177,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a39(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r174,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a42(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r175,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a41(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r172,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a44(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r173,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a43(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r170,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a46(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r171,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a45(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r168,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a48(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r169,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a47(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r166,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a50(r167,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r167,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a49(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r164,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a52(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r165,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a51(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r162,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a54(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r163,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a53(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r160,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a56(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r161,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a55(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r158,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a58(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r159,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a57(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r156,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a60(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r157,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a59(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r154,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a62(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r155,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a61(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a63(r151,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a64(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a64(r152,l0) conflicts: a7(r148,l0) a19(r134,l0) a20(r150,l0) a32(r149,l0) a63(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a1(r220)<->a3(r144)@125:shuffle
  cp1:a2(r143)<->a15(r138)@1000:move
  cp2:a4(r133)<->a15(r138)@125:shuffle
  cp3:a6(r218)<->a7(r148)@125:shuffle
  cp4:a2(r143)<->a19(r134)@125:shuffle
  regions=1, blocks=5, points=105
    allocnos=65, copies=5, conflicts=1, ranges=66

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r219 1r220 2r143 3r144 4r133 5r217 6r218 7r148 8r186 9r215 10r216 11r213 12r214 13r211 14r212 15r138 16r207 17r208 18r205 19r134 20r150 21r201 22r202 23r199 24r200 25r188 26r194 27r195 28r189 29r190 30r184 31r185 32r149 33r182 34r183 35r180 36r181 37r178 38r179 39r176 40r177 41r174 42r175 43r172 44r173 45r170 46r171 47r168 48r169 49r166 50r167 51r164 52r165 53r162 54r163 55r160 56r161 57r158 58r159 59r156 60r157 61r154 62r155 63r151 64r152
    modified regnos: 133 134 138 143 144 148 149 150 151 152 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 188 189 190 194 195 199 200 201 202 205 207 208 211 212 213 214 215 216 217 218 219 220
    border:
    Pressure: GENERAL_REGS=8
    Reg 219 of GENERAL_REGS has 2 regs less
    Reg 220 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 217 of GENERAL_REGS has 1 regs less
    Reg 218 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 186 of GENERAL_REGS has 4 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 213 of GENERAL_REGS has 1 regs less
    Reg 214 of GENERAL_REGS has 1 regs less
    Reg 211 of GENERAL_REGS has 2 regs less
    Reg 212 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
      Pushing a64(r152,l0)
      Pushing a63(r151,l0)
      Pushing a62(r155,l0)
      Pushing a61(r154,l0)
      Pushing a60(r157,l0)
      Pushing a59(r156,l0)
      Pushing a58(r159,l0)
      Pushing a57(r158,l0)
      Pushing a56(r161,l0)
      Pushing a55(r160,l0)
      Pushing a54(r163,l0)
      Pushing a53(r162,l0)
      Pushing a52(r165,l0)
      Pushing a51(r164,l0)
      Pushing a50(r167,l0)
      Pushing a49(r166,l0)
      Pushing a48(r169,l0)
      Pushing a47(r168,l0)
      Pushing a46(r171,l0)
      Pushing a45(r170,l0)
      Pushing a44(r173,l0)
      Pushing a43(r172,l0)
      Pushing a42(r175,l0)
      Pushing a41(r174,l0)
      Pushing a40(r177,l0)
      Pushing a39(r176,l0)
      Pushing a38(r179,l0)
      Pushing a37(r178,l0)
      Pushing a36(r181,l0)
      Pushing a35(r180,l0)
      Pushing a34(r183,l0)
      Pushing a33(r182,l0)
      Pushing a31(r185,l0)
      Pushing a30(r184,l0)
      Pushing a29(r190,l0)
      Pushing a28(r189,l0)
      Pushing a27(r195,l0)
      Pushing a26(r194,l0)
      Pushing a24(r200,l0)
      Pushing a23(r199,l0)
      Pushing a22(r202,l0)
      Pushing a21(r201,l0)
      Pushing a18(r205,l0)
      Pushing a17(r208,l0)
      Pushing a16(r207,l0)
      Pushing a20(r150,l0)
      Pushing a25(r188,l0)
      Pushing a12(r214,l0)
      Pushing a11(r213,l0)
      Pushing a10(r216,l0)
      Pushing a9(r215,l0)
      Pushing a6(r218,l0)
      Pushing a5(r217,l0)
      Pushing a4(r133,l0)
      Pushing a14(r212,l0)
      Pushing a13(r211,l0)
      Pushing a1(r220,l0)
      Pushing a0(r219,l0)
      Pushing a2(r143,l0)
      Pushing a32(r149,l0)
      Pushing a3(r144,l0)
      Pushing a15(r138,l0)
      Pushing a8(r186,l0)
      Pushing a7(r148,l0)
      Pushing a19(r134,l0)
      Popping a19(r134,l0)  -- assign reg 4
      Popping a7(r148,l0)  -- assign reg 5
      Popping a8(r186,l0)  -- assign reg 6
      Popping a15(r138,l0)  -- assign reg 4
      Popping a3(r144,l0)  -- assign reg 7
      Popping a32(r149,l0)  -- assign reg 3
      Popping a2(r143,l0)  -- assign reg 4
      Popping a0(r219,l0)  -- assign reg 3
      Popping a1(r220,l0)  -- assign reg 7
      Popping a13(r211,l0)  -- assign reg 3
      Popping a14(r212,l0)  -- assign reg 2
      Popping a4(r133,l0)  -- assign reg 4
      Popping a5(r217,l0)  -- assign reg 3
      Popping a6(r218,l0)  -- assign reg 5
      Popping a9(r215,l0)  -- assign reg 3
      Popping a10(r216,l0)  -- assign reg 2
      Popping a11(r213,l0)  -- assign reg 3
      Popping a12(r214,l0)  -- assign reg 2
      Popping a25(r188,l0)  -- assign reg 3
      Popping a20(r150,l0)  -- assign reg 2
      Popping a16(r207,l0)  -- assign reg 3
      Popping a17(r208,l0)  -- assign reg 2
      Popping a18(r205,l0)  -- assign reg 3
      Popping a21(r201,l0)  -- assign reg 3
      Popping a22(r202,l0)  -- assign reg 1
      Popping a23(r199,l0)  -- assign reg 3
      Popping a24(r200,l0)  -- assign reg 1
      Popping a26(r194,l0)  -- assign reg 1
      Popping a27(r195,l0)  -- assign reg 0
      Popping a28(r189,l0)  -- assign reg 1
      Popping a29(r190,l0)  -- assign reg 0
      Popping a30(r184,l0)  -- assign reg 3
      Popping a31(r185,l0)  -- assign reg 1
      Popping a33(r182,l0)  -- assign reg 1
      Popping a34(r183,l0)  -- assign reg 0
      Popping a35(r180,l0)  -- assign reg 1
      Popping a36(r181,l0)  -- assign reg 0
      Popping a37(r178,l0)  -- assign reg 1
      Popping a38(r179,l0)  -- assign reg 0
      Popping a39(r176,l0)  -- assign reg 1
      Popping a40(r177,l0)  -- assign reg 0
      Popping a41(r174,l0)  -- assign reg 1
      Popping a42(r175,l0)  -- assign reg 0
      Popping a43(r172,l0)  -- assign reg 1
      Popping a44(r173,l0)  -- assign reg 0
      Popping a45(r170,l0)  -- assign reg 1
      Popping a46(r171,l0)  -- assign reg 0
      Popping a47(r168,l0)  -- assign reg 1
      Popping a48(r169,l0)  -- assign reg 0
      Popping a49(r166,l0)  -- assign reg 1
      Popping a50(r167,l0)  -- assign reg 0
      Popping a51(r164,l0)  -- assign reg 1
      Popping a52(r165,l0)  -- assign reg 0
      Popping a53(r162,l0)  -- assign reg 1
      Popping a54(r163,l0)  -- assign reg 0
      Popping a55(r160,l0)  -- assign reg 1
      Popping a56(r161,l0)  -- assign reg 0
      Popping a57(r158,l0)  -- assign reg 1
      Popping a58(r159,l0)  -- assign reg 0
      Popping a59(r156,l0)  -- assign reg 1
      Popping a60(r157,l0)  -- assign reg 0
      Popping a61(r154,l0)  -- assign reg 1
      Popping a62(r155,l0)  -- assign reg 0
      Popping a63(r151,l0)  -- assign reg 1
      Popping a64(r152,l0)  -- assign reg 0
Disposition:
    4:r133 l0     4   19:r134 l0     4   15:r138 l0     4    2:r143 l0     4
    3:r144 l0     7    7:r148 l0     5   32:r149 l0     3   20:r150 l0     2
   63:r151 l0     1   64:r152 l0     0   61:r154 l0     1   62:r155 l0     0
   59:r156 l0     1   60:r157 l0     0   57:r158 l0     1   58:r159 l0     0
   55:r160 l0     1   56:r161 l0     0   53:r162 l0     1   54:r163 l0     0
   51:r164 l0     1   52:r165 l0     0   49:r166 l0     1   50:r167 l0     0
   47:r168 l0     1   48:r169 l0     0   45:r170 l0     1   46:r171 l0     0
   43:r172 l0     1   44:r173 l0     0   41:r174 l0     1   42:r175 l0     0
   39:r176 l0     1   40:r177 l0     0   37:r178 l0     1   38:r179 l0     0
   35:r180 l0     1   36:r181 l0     0   33:r182 l0     1   34:r183 l0     0
   30:r184 l0     3   31:r185 l0     1    8:r186 l0     6   25:r188 l0     3
   28:r189 l0     1   29:r190 l0     0   26:r194 l0     1   27:r195 l0     0
   23:r199 l0     3   24:r200 l0     1   21:r201 l0     3   22:r202 l0     1
   18:r205 l0     3   16:r207 l0     3   17:r208 l0     2   13:r211 l0     3
   14:r212 l0     2   11:r213 l0     3   12:r214 l0     2    9:r215 l0     3
   10:r216 l0     2    5:r217 l0     3    6:r218 l0     5    0:r219 l0     3
    1:r220 l0     7
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, dead_or_set: 1, 149
insn=2, live_throughout: 2, 13, 149, dead_or_set: 0, 148
insn=4, live_throughout: 13, 148, 149, dead_or_set: 2, 150
insn=9, live_throughout: 13, 148, 149, 150, dead_or_set: 152
insn=8, live_throughout: 13, 148, 149, 150, 152, dead_or_set: 151
insn=10, live_throughout: 13, 148, 149, 150, 151, 152, dead_or_set: 134
insn=11, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 151, 152
insn=12, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 154
insn=13, live_throughout: 13, 134, 148, 149, 150, 154, dead_or_set: 155
insn=14, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 154, 155
insn=15, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 156
insn=16, live_throughout: 13, 134, 148, 149, 150, 156, dead_or_set: 157
insn=17, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 156, 157
insn=18, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 158
insn=19, live_throughout: 13, 134, 148, 149, 150, 158, dead_or_set: 159
insn=20, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 158, 159
insn=21, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 160
insn=22, live_throughout: 13, 134, 148, 149, 150, 160, dead_or_set: 161
insn=23, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 160, 161
insn=24, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 162
insn=25, live_throughout: 13, 134, 148, 149, 150, 162, dead_or_set: 163
insn=26, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 162, 163
insn=27, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 164
insn=28, live_throughout: 13, 134, 148, 149, 150, 164, dead_or_set: 165
insn=29, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 164, 165
insn=30, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 166
insn=31, live_throughout: 13, 134, 148, 149, 150, 166, dead_or_set: 167
insn=32, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 166, 167
insn=33, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 168
insn=34, live_throughout: 13, 134, 148, 149, 150, 168, dead_or_set: 169
insn=35, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 168, 169
insn=36, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 170
insn=37, live_throughout: 13, 134, 148, 149, 150, 170, dead_or_set: 171
insn=38, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 170, 171
insn=39, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 172
insn=40, live_throughout: 13, 134, 148, 149, 150, 172, dead_or_set: 173
insn=41, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 172, 173
insn=42, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 174
insn=43, live_throughout: 13, 134, 148, 149, 150, 174, dead_or_set: 175
insn=44, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 174, 175
insn=45, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 176
insn=46, live_throughout: 13, 134, 148, 149, 150, 176, dead_or_set: 177
insn=47, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 176, 177
insn=48, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 178
insn=49, live_throughout: 13, 134, 148, 149, 150, 178, dead_or_set: 179
insn=50, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 178, 179
insn=51, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 180
insn=52, live_throughout: 13, 134, 148, 149, 150, 180, dead_or_set: 181
insn=53, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 180, 181
insn=54, live_throughout: 13, 134, 148, 149, 150, dead_or_set: 182
insn=55, live_throughout: 13, 134, 148, 149, 150, 182, dead_or_set: 183
insn=56, live_throughout: 13, 148, 149, 150, dead_or_set: 134, 182, 183
insn=57, live_throughout: 13, 134, 148, 150, dead_or_set: 149, 184
insn=58, live_throughout: 13, 134, 148, 150, 184, dead_or_set: 185
insn=59, live_throughout: 13, 148, 150, dead_or_set: 134, 184, 185
insn=154, live_throughout: 13, 134, 148, 150, dead_or_set: 186
insn=65, live_throughout: 13, 134, 148, 150, 186, dead_or_set: 190
insn=155, live_throughout: 13, 134, 148, 150, 190, dead_or_set: 186
insn=63, live_throughout: 13, 134, 148, 150, 186, 190, dead_or_set: 188
insn=64, live_throughout: 13, 134, 148, 150, 186, 188, 190, dead_or_set: 189
insn=66, live_throughout: 13, 148, 150, 186, 188, dead_or_set: 134, 189, 190
insn=71, live_throughout: 13, 134, 148, 150, 186, 188, dead_or_set: 194
insn=72, live_throughout: 13, 134, 148, 150, 186, 188, 194, dead_or_set: 195
insn=73, live_throughout: 13, 148, 150, 186, 188, dead_or_set: 134, 194, 195
insn=78, live_throughout: 13, 134, 148, 150, 186, dead_or_set: 188, 199
insn=79, live_throughout: 13, 134, 148, 150, 186, 199, dead_or_set: 200
insn=80, live_throughout: 13, 148, 150, 186, dead_or_set: 134, 199, 200
insn=81, live_throughout: 13, 134, 148, 150, 186, dead_or_set: 201
insn=82, live_throughout: 13, 134, 148, 150, 186, 201, dead_or_set: 202
insn=83, live_throughout: 13, 148, 150, 186, dead_or_set: 134, 201, 202
insn=86, live_throughout: 13, 134, 148, 186, dead_or_set: 1, 150
insn=85, live_throughout: 1, 13, 134, 148, 186, dead_or_set: 0
insn=87, live_throughout: 0, 1, 13, 134, 148, 186, dead_or_set: 2
insn=92, live_throughout: 0, 1, 2, 13, 134, 148, 186, dead_or_set: 144
insn=88, live_throughout: 13, 134, 144, 148, 186, dead_or_set: 0, 1, 2, 14
insn=93, live_throughout: 13, 14, 144, 148, 186, dead_or_set: 0, 134, 143
insn=94, live_throughout: 13, 14, 143, 144, 148, 186, dead_or_set: 
insn=99, live_throughout: 13, 143, 144, 148, 186, dead_or_set: 0
insn=156, live_throughout: 0, 13, 144, 148, 186, dead_or_set: 138, 143
insn=100, live_throughout: 13, 138, 144, 148, 186, dead_or_set: 0, 14
insn=101, live_throughout: 13, 138, 144, 148, 186, dead_or_set: 205
insn=103, live_throughout: 13, 144, 148, 186, dead_or_set: 138, 205
insn=105, live_throughout: 13, 138, 144, 148, 186, dead_or_set: 208
insn=159, live_throughout: 13, 138, 144, 148, 186, 208, dead_or_set: 207
insn=106, live_throughout: 13, 144, 148, 186, dead_or_set: 138, 207, 208
insn=111, live_throughout: 13, 138, 144, 148, 186, dead_or_set: 2
insn=109, live_throughout: 2, 13, 138, 144, 148, 186, dead_or_set: 0
insn=110, live_throughout: 0, 2, 13, 138, 144, 148, 186, dead_or_set: 1
insn=112, live_throughout: 13, 138, 144, 148, 186, dead_or_set: 0, 1, 2, 14
insn=116, live_throughout: 0, 13, 14, 138, 144, 148, 186, dead_or_set: 211
insn=117, live_throughout: 0, 13, 14, 138, 144, 148, 186, 211, dead_or_set: 212
insn=114, live_throughout: 13, 14, 144, 148, 186, 211, 212, dead_or_set: 0, 133, 138
insn=118, live_throughout: 13, 14, 144, 148, 186, dead_or_set: 133, 211, 212
insn=119, live_throughout: 13, 14, 133, 144, 148, 186, dead_or_set: 213
insn=120, live_throughout: 13, 14, 133, 144, 148, 186, 213, dead_or_set: 214
insn=121, live_throughout: 13, 14, 144, 148, 186, dead_or_set: 133, 213, 214
insn=122, live_throughout: 13, 14, 133, 144, 148, 186, dead_or_set: 215
insn=123, live_throughout: 13, 14, 133, 144, 148, 186, 215, dead_or_set: 216
insn=124, live_throughout: 13, 14, 144, 148, 186, dead_or_set: 133, 215, 216
insn=125, live_throughout: 13, 14, 133, 144, 148, dead_or_set: 186, 217
insn=126, live_throughout: 13, 14, 133, 144, 217, dead_or_set: 148, 218
insn=127, live_throughout: 13, 14, 144, dead_or_set: 133, 217, 218
insn=128, live_throughout: 13, 14, 144, dead_or_set: 133
insn=152, live_throughout: 13, 14, 144, dead_or_set: 143
insn=132, live_throughout: 13, 14, 143, 144, dead_or_set: 
insn=135, live_throughout: 13, 14, 143, dead_or_set: 144, 220
insn=157, live_throughout: 13, 14, 220, dead_or_set: 0, 143
insn=134, live_throughout: 0, 13, 14, 220, dead_or_set: 219
insn=141, live_throughout: 13, 14, dead_or_set: 0, 219, 220
insn=147, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 151: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 27 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 39 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 51 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 54 (nil))
init_insns for 188: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 71 (nil))
init_insns for 201: (insn_list:REG_DEP_TRUE 81 (nil))
init_insns for 205: (insn_list:REG_DEP_TRUE 101 (nil))
init_insns for 207: (insn_list:REG_DEP_TRUE 159 (nil))
init_insns for 211: (insn_list:REG_DEP_TRUE 116 (nil))
init_insns for 213: (insn_list:REG_DEP_TRUE 119 (nil))
init_insns for 215: (insn_list:REG_DEP_TRUE 122 (nil))
init_insns for 219: (insn_list:REG_DEP_TRUE 134 (nil))
changing reg in insn 114
changing reg in insn 118
changing reg in insn 127
changing reg in insn 124
changing reg in insn 121
changing reg in insn 118
changing reg in insn 128
changing reg in insn 127
changing reg in insn 124
changing reg in insn 121
changing reg in insn 10
changing reg in insn 11
changing reg in insn 83
changing reg in insn 80
changing reg in insn 73
changing reg in insn 66
changing reg in insn 59
changing reg in insn 56
changing reg in insn 53
changing reg in insn 50
changing reg in insn 47
changing reg in insn 44
changing reg in insn 41
changing reg in insn 38
changing reg in insn 35
changing reg in insn 32
changing reg in insn 29
changing reg in insn 26
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 14
changing reg in insn 11
changing reg in insn 93
changing reg in insn 93
changing reg in insn 83
changing reg in insn 80
changing reg in insn 73
changing reg in insn 66
changing reg in insn 59
changing reg in insn 56
changing reg in insn 53
changing reg in insn 50
changing reg in insn 47
changing reg in insn 44
changing reg in insn 41
changing reg in insn 38
changing reg in insn 35
changing reg in insn 32
changing reg in insn 29
changing reg in insn 26
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 14
changing reg in insn 156
changing reg in insn 103
changing reg in insn 106
changing reg in insn 103
changing reg in insn 114
changing reg in insn 106
changing reg in insn 93
changing reg in insn 152
changing reg in insn 157
changing reg in insn 156
changing reg in insn 92
changing reg in insn 103
changing reg in insn 135
changing reg in insn 2
changing reg in insn 109
changing reg in insn 85
changing reg in insn 126
changing reg in insn 123
changing reg in insn 120
changing reg in insn 117
changing reg in insn 105
changing reg in insn 92
changing reg in insn 82
changing reg in insn 79
changing reg in insn 72
changing reg in insn 65
changing reg in insn 58
changing reg in insn 55
changing reg in insn 52
changing reg in insn 49
changing reg in insn 46
changing reg in insn 43
changing reg in insn 40
changing reg in insn 37
changing reg in insn 34
changing reg in insn 31
changing reg in insn 28
changing reg in insn 25
changing reg in insn 22
changing reg in insn 19
changing reg in insn 16
changing reg in insn 13
changing reg in insn 9
changing reg in insn 3
changing reg in insn 57
changing reg in insn 54
changing reg in insn 51
changing reg in insn 48
changing reg in insn 45
changing reg in insn 42
changing reg in insn 39
changing reg in insn 36
changing reg in insn 33
changing reg in insn 30
changing reg in insn 27
changing reg in insn 24
changing reg in insn 21
changing reg in insn 18
changing reg in insn 15
changing reg in insn 12
changing reg in insn 8
changing reg in insn 54
changing reg in insn 51
changing reg in insn 48
changing reg in insn 45
changing reg in insn 42
changing reg in insn 39
changing reg in insn 36
changing reg in insn 33
changing reg in insn 30
changing reg in insn 27
changing reg in insn 24
changing reg in insn 21
changing reg in insn 18
changing reg in insn 15
changing reg in insn 12
changing reg in insn 8
changing reg in insn 4
changing reg in insn 86
changing reg in insn 81
changing reg in insn 81
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 155
changing reg in insn 154
changing reg in insn 155
changing reg in insn 110
changing reg in insn 125
changing reg in insn 122
changing reg in insn 119
changing reg in insn 116
changing reg in insn 99
changing reg in insn 63
changing reg in insn 122
changing reg in insn 119
changing reg in insn 116
changing reg in insn 63
changing reg in insn 63
changing reg in insn 78
changing reg in insn 71
changing reg in insn 64
changing reg in insn 71
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 80
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 82
changing reg in insn 83
changing reg in insn 101
changing reg in insn 103
changing reg in insn 159
changing reg in insn 106
changing reg in insn 105
changing reg in insn 106
changing reg in insn 116
changing reg in insn 118
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 127
changing reg in insn 134
changing reg in insn 141
changing reg in insn 135
changing reg in insn 141
Spilling for insn 154.
Using reg 3 for reload 0

Reloads for insn # 154
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 4.
deleting insn with uid = 156.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 112.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


setup_sigframe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={27d,28u} r1={27d,24u} r2={10d,8u,1d} r3={17d,31u,18d} r4={31d,32u} r5={2d,30u} r6={2d,8u,4d} r7={2d,3u} r12={4d} r13={1d,8u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={33d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 688{490d,175u,23e} in 108{105 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 61 2 NOTE_INSN_FUNCTION_BEG)

(note 61 5 84 2 NOTE_INSN_DELETED)

(note 84 61 89 2 NOTE_INSN_DELETED)

(note 89 84 90 2 NOTE_INSN_DELETED)

(note 90 89 3 2 NOTE_INSN_DELETED)

(insn 3 90 2 2 arch/arm/kernel/signal.c:392 (set (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 9 2 arch/arm/kernel/signal.c:392 (set (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
        (reg:SI 0 r0 [ sf ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 8 2 arch/arm/kernel/signal.c:396 discrim 4 (set (reg/f:SI 0 r0 [152])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 8 9 10 2 arch/arm/kernel/signal.c:396 discrim 4 (set (reg:SI 1 r1 [orig:151 <variable>.uregs ] [151])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149]) [0 <variable>.uregs+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149]) [0 <variable>.uregs+0 S4 A32])
        (nil)))

(insn 10 8 11 2 arch/arm/kernel/signal.c:396 discrim 4 (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 11 10 12 2 arch/arm/kernel/signal.c:396 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:151 <variable>.uregs ] [151])
                        (reg/f:SI 0 r0 [152])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690863))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 12 11 13 2 arch/arm/kernel/signal.c:397 discrim 4 (set (reg:SI 1 r1 [orig:154 <variable>.uregs+4 ] [154])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])
        (nil)))

(insn 13 12 14 2 arch/arm/kernel/signal.c:397 discrim 4 (set (reg/f:SI 0 r0 [155])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 36 [0x24]))) 4 {*arm_addsi3} (nil))

(insn 14 13 15 2 arch/arm/kernel/signal.c:397 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:154 <variable>.uregs+4 ] [154])
                        (reg/f:SI 0 r0 [155])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690868))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 15 14 16 2 arch/arm/kernel/signal.c:398 discrim 4 (set (reg:SI 1 r1 [orig:156 <variable>.uregs+8 ] [156])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])
        (nil)))

(insn 16 15 17 2 arch/arm/kernel/signal.c:398 discrim 4 (set (reg/f:SI 0 r0 [157])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (nil))

(insn 17 16 18 2 arch/arm/kernel/signal.c:398 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:156 <variable>.uregs+8 ] [156])
                        (reg/f:SI 0 r0 [157])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690873))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 18 17 19 2 arch/arm/kernel/signal.c:399 discrim 4 (set (reg:SI 1 r1 [orig:158 <variable>.uregs+12 ] [158])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 12 [0xc])) [0 <variable>.uregs+12 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 12 [0xc])) [0 <variable>.uregs+12 S4 A32])
        (nil)))

(insn 19 18 20 2 arch/arm/kernel/signal.c:399 discrim 4 (set (reg/f:SI 0 r0 [159])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 44 [0x2c]))) 4 {*arm_addsi3} (nil))

(insn 20 19 21 2 arch/arm/kernel/signal.c:399 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:158 <variable>.uregs+12 ] [158])
                        (reg/f:SI 0 r0 [159])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690878))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 21 20 22 2 arch/arm/kernel/signal.c:400 discrim 4 (set (reg:SI 1 r1 [orig:160 <variable>.uregs+16 ] [160])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 16 [0x10])) [0 <variable>.uregs+16 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 16 [0x10])) [0 <variable>.uregs+16 S4 A32])
        (nil)))

(insn 22 21 23 2 arch/arm/kernel/signal.c:400 discrim 4 (set (reg/f:SI 0 r0 [161])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(insn 23 22 24 2 arch/arm/kernel/signal.c:400 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:160 <variable>.uregs+16 ] [160])
                        (reg/f:SI 0 r0 [161])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690883))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 24 23 25 2 arch/arm/kernel/signal.c:401 discrim 4 (set (reg:SI 1 r1 [orig:162 <variable>.uregs+20 ] [162])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 20 [0x14])) [0 <variable>.uregs+20 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 20 [0x14])) [0 <variable>.uregs+20 S4 A32])
        (nil)))

(insn 25 24 26 2 arch/arm/kernel/signal.c:401 discrim 4 (set (reg/f:SI 0 r0 [163])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 52 [0x34]))) 4 {*arm_addsi3} (nil))

(insn 26 25 27 2 arch/arm/kernel/signal.c:401 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:162 <variable>.uregs+20 ] [162])
                        (reg/f:SI 0 r0 [163])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690888))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 27 26 28 2 arch/arm/kernel/signal.c:402 discrim 4 (set (reg:SI 1 r1 [orig:164 <variable>.uregs+24 ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 24 [0x18])) [0 <variable>.uregs+24 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 24 [0x18])) [0 <variable>.uregs+24 S4 A32])
        (nil)))

(insn 28 27 29 2 arch/arm/kernel/signal.c:402 discrim 4 (set (reg/f:SI 0 r0 [165])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn 29 28 30 2 arch/arm/kernel/signal.c:402 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:164 <variable>.uregs+24 ] [164])
                        (reg/f:SI 0 r0 [165])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690893))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 30 29 31 2 arch/arm/kernel/signal.c:403 discrim 4 (set (reg:SI 1 r1 [orig:166 <variable>.uregs+28 ] [166])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
        (nil)))

(insn 31 30 32 2 arch/arm/kernel/signal.c:403 discrim 4 (set (reg/f:SI 0 r0 [167])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 60 [0x3c]))) 4 {*arm_addsi3} (nil))

(insn 32 31 33 2 arch/arm/kernel/signal.c:403 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:166 <variable>.uregs+28 ] [166])
                        (reg/f:SI 0 r0 [167])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690898))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 33 32 34 2 arch/arm/kernel/signal.c:404 discrim 4 (set (reg:SI 1 r1 [orig:168 <variable>.uregs+32 ] [168])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 32 [0x20])) [0 <variable>.uregs+32 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 32 [0x20])) [0 <variable>.uregs+32 S4 A32])
        (nil)))

(insn 34 33 35 2 arch/arm/kernel/signal.c:404 discrim 4 (set (reg/f:SI 0 r0 [169])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 64 [0x40]))) 4 {*arm_addsi3} (nil))

(insn 35 34 36 2 arch/arm/kernel/signal.c:404 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:168 <variable>.uregs+32 ] [168])
                        (reg/f:SI 0 r0 [169])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690903))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 36 35 37 2 arch/arm/kernel/signal.c:405 discrim 4 (set (reg:SI 1 r1 [orig:170 <variable>.uregs+36 ] [170])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 36 [0x24])) [0 <variable>.uregs+36 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 36 [0x24])) [0 <variable>.uregs+36 S4 A32])
        (nil)))

(insn 37 36 38 2 arch/arm/kernel/signal.c:405 discrim 4 (set (reg/f:SI 0 r0 [171])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 68 [0x44]))) 4 {*arm_addsi3} (nil))

(insn 38 37 39 2 arch/arm/kernel/signal.c:405 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:170 <variable>.uregs+36 ] [170])
                        (reg/f:SI 0 r0 [171])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690908))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 39 38 40 2 arch/arm/kernel/signal.c:406 discrim 4 (set (reg:SI 1 r1 [orig:172 <variable>.uregs+40 ] [172])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 40 [0x28])) [0 <variable>.uregs+40 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 40 [0x28])) [0 <variable>.uregs+40 S4 A32])
        (nil)))

(insn 40 39 41 2 arch/arm/kernel/signal.c:406 discrim 4 (set (reg/f:SI 0 r0 [173])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 72 [0x48]))) 4 {*arm_addsi3} (nil))

(insn 41 40 42 2 arch/arm/kernel/signal.c:406 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:172 <variable>.uregs+40 ] [172])
                        (reg/f:SI 0 r0 [173])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690913))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 42 41 43 2 arch/arm/kernel/signal.c:407 discrim 4 (set (reg:SI 1 r1 [orig:174 <variable>.uregs+44 ] [174])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
        (nil)))

(insn 43 42 44 2 arch/arm/kernel/signal.c:407 discrim 4 (set (reg/f:SI 0 r0 [175])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 76 [0x4c]))) 4 {*arm_addsi3} (nil))

(insn 44 43 45 2 arch/arm/kernel/signal.c:407 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:174 <variable>.uregs+44 ] [174])
                        (reg/f:SI 0 r0 [175])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690918))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 45 44 46 2 arch/arm/kernel/signal.c:408 discrim 4 (set (reg:SI 1 r1 [orig:176 <variable>.uregs+48 ] [176])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (nil)))

(insn 46 45 47 2 arch/arm/kernel/signal.c:408 discrim 4 (set (reg/f:SI 0 r0 [177])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn 47 46 48 2 arch/arm/kernel/signal.c:408 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:176 <variable>.uregs+48 ] [176])
                        (reg/f:SI 0 r0 [177])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690923))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 48 47 49 2 arch/arm/kernel/signal.c:409 discrim 4 (set (reg:SI 1 r1 [orig:178 <variable>.uregs+52 ] [178])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])
        (nil)))

(insn 49 48 50 2 arch/arm/kernel/signal.c:409 discrim 4 (set (reg/f:SI 0 r0 [179])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn 50 49 51 2 arch/arm/kernel/signal.c:409 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:178 <variable>.uregs+52 ] [178])
                        (reg/f:SI 0 r0 [179])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690928))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 51 50 52 2 arch/arm/kernel/signal.c:410 discrim 4 (set (reg:SI 1 r1 [orig:180 <variable>.uregs+56 ] [180])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])
        (nil)))

(insn 52 51 53 2 arch/arm/kernel/signal.c:410 discrim 4 (set (reg/f:SI 0 r0 [181])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 88 [0x58]))) 4 {*arm_addsi3} (nil))

(insn 53 52 54 2 arch/arm/kernel/signal.c:410 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:180 <variable>.uregs+56 ] [180])
                        (reg/f:SI 0 r0 [181])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690933))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 54 53 55 2 arch/arm/kernel/signal.c:411 discrim 4 (set (reg:SI 1 r1 [orig:182 <variable>.uregs+60 ] [182])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 55 54 56 2 arch/arm/kernel/signal.c:411 discrim 4 (set (reg/f:SI 0 r0 [183])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 92 [0x5c]))) 4 {*arm_addsi3} (nil))

(insn 56 55 57 2 arch/arm/kernel/signal.c:411 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:182 <variable>.uregs+60 ] [182])
                        (reg/f:SI 0 r0 [183])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690938))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 57 56 58 2 arch/arm/kernel/signal.c:412 discrim 4 (set (reg:SI 3 r3 [orig:184 <variable>.uregs+64 ] [184])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:149 regs ] [149])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 58 57 59 2 arch/arm/kernel/signal.c:412 discrim 4 (set (reg/f:SI 1 r1 [185])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (nil))

(insn 59 58 161 2 arch/arm/kernel/signal.c:412 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:184 <variable>.uregs+64 ] [184])
                        (reg/f:SI 1 r1 [185])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690943))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 161 59 154 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 154 161 65 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg:SI 6 r6 [186])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 65 154 155 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg/f:SI 0 r0 [190])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn 155 65 63 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg:SI 6 r6 [186])
        (and:SI (reg:SI 6 r6 [186])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 63 155 64 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
        (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 64 63 66 2 arch/arm/kernel/signal.c:414 discrim 4 (set (reg:SI 1 r1 [orig:189 <variable>.thread.trap_no ] [189])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (nil)))

(insn 66 64 71 2 arch/arm/kernel/signal.c:414 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:189 <variable>.thread.trap_no ] [189])
                        (reg/f:SI 0 r0 [190])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690948))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 71 66 72 2 arch/arm/kernel/signal.c:415 discrim 4 (set (reg:SI 1 r1 [orig:194 <variable>.thread.error_code ] [194])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (nil)))

(insn 72 71 73 2 arch/arm/kernel/signal.c:415 discrim 4 (set (reg/f:SI 0 r0 [195])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 73 72 78 2 arch/arm/kernel/signal.c:415 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 1 r1 [orig:194 <variable>.thread.error_code ] [194])
                        (reg/f:SI 0 r0 [195])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690953))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 78 73 79 2 arch/arm/kernel/signal.c:416 discrim 4 (set (reg:SI 3 r3 [orig:199 <variable>.thread.address ] [199])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:188 <variable>.task ] [188])
                (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 79 78 80 2 arch/arm/kernel/signal.c:416 discrim 4 (set (reg/f:SI 1 r1 [200])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 100 [0x64]))) 4 {*arm_addsi3} (nil))

(insn 80 79 81 2 arch/arm/kernel/signal.c:416 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:199 <variable>.thread.address ] [199])
                        (reg/f:SI 1 r1 [200])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690958))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 81 80 82 2 arch/arm/kernel/signal.c:417 discrim 4 (set (reg:SI 3 r3 [orig:201 <variable>.sig ] [201])
        (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:150 set ] [150]) [0 <variable>.sig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:150 set ] [150]) [0 <variable>.sig+0 S4 A32])
        (nil)))

(insn 82 81 83 2 arch/arm/kernel/signal.c:417 discrim 4 (set (reg/f:SI 1 r1 [202])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (nil))

(insn 83 82 86 2 arch/arm/kernel/signal.c:417 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:201 <variable>.sig ] [201])
                        (reg/f:SI 1 r1 [202])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690963))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 86 83 85 2 arch/arm/kernel/signal.c:419 (set (reg:SI 1 r1)
        (reg/v/f:SI 2 r2 [orig:150 set ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 85 86 87 2 arch/arm/kernel/signal.c:419 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn 87 85 92 2 arch/arm/kernel/signal.c:419 (set (reg:SI 2 r2)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(insn 92 87 88 2 arch/arm/kernel/signal.c:421 (set (reg/v/f:SI 7 r7 [orig:144 aux ] [144])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 232 [0xe8]))) 4 {*arm_addsi3} (nil))

(call_insn 88 92 93 2 arch/arm/kernel/signal.c:419 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x10f3df00 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 93 88 94 2 arch/arm/kernel/signal.c:431 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                        (reg:SI 0 r0))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:143 err ] [143])
                (ior:SI (reg/v:SI 4 r4 [orig:134 err.382 ] [134])
                    (reg:SI 0 r0)))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 94 93 95 2 arch/arm/kernel/signal.c:431 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 132)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [39.0%]  (fallthru)
(note 95 94 107 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 107 95 108 3 NOTE_INSN_DELETED)

(note 108 107 113 3 NOTE_INSN_DELETED)

(note 113 108 99 3 NOTE_INSN_DELETED)

(insn 99 113 100 3 arch/arm/kernel/signal.c:188 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [186])) 167 {*arm_movsi_insn} (nil))

(call_insn 100 99 101 3 arch/arm/kernel/signal.c:188 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10b07680 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 100 103 3 arch/arm/kernel/signal.c:189 discrim 4 (set (reg:SI 3 r3 [205])
        (const_int 1447448577 [0x56465001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1447448577 [0x56465001])
        (nil)))

(insn 103 101 105 3 arch/arm/kernel/signal.c:189 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:138 err ] [138])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [205])
                        (reg/v/f:SI 7 r7 [orig:144 aux ] [144])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690973))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 105 103 159 3 arch/arm/kernel/signal.c:190 discrim 4 (set (reg/f:SI 2 r2 [208])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 236 [0xec]))) 4 {*arm_addsi3} (nil))

(insn 159 105 106 3 arch/arm/kernel/signal.c:190 discrim 4 (set (reg:SI 3 r3 [207])
        (const_int 288 [0x120])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 288 [0x120])
        (nil)))

(insn 106 159 111 3 arch/arm/kernel/signal.c:190 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:138 err ] [138])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [207])
                        (reg/f:SI 2 r2 [208])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690978))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 111 106 109 3 arch/arm/kernel/signal.c:196 (set (reg:SI 2 r2)
        (const_int 256 [0x100])) 167 {*arm_movsi_insn} (nil))

(insn 109 111 110 3 arch/arm/kernel/signal.c:196 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 240 [0xf0]))) 4 {*arm_addsi3} (nil))

(insn 110 109 112 3 arch/arm/kernel/signal.c:196 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 6 r6 [186])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn 112 110 116 3 arch/arm/kernel/signal.c:196 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x10f3df00 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 116 112 117 3 arch/arm/kernel/signal.c:201 discrim 4 (set (reg:SI 3 r3 [orig:211 <variable>.vfpstate.hard.fpscr ] [211])
        (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
        (nil)))

(insn 117 116 114 3 arch/arm/kernel/signal.c:201 discrim 4 (set (reg/f:SI 2 r2 [212])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 496 [0x1f0]))) 4 {*arm_addsi3} (nil))

(insn 114 117 118 3 arch/arm/kernel/signal.c:196 (set (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
        (ior:SI (reg/v:SI 4 r4 [orig:138 err ] [138])
            (reg:SI 0 r0))) 89 {*arm_iorsi3} (nil))

(insn 118 114 119 3 arch/arm/kernel/signal.c:201 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:211 <variable>.vfpstate.hard.fpscr ] [211])
                        (reg/f:SI 2 r2 [212])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690983))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 119 118 120 3 arch/arm/kernel/signal.c:206 discrim 4 (set (reg:SI 3 r3 [orig:213 <variable>.vfpstate.hard.fpexc ] [213])
        (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
        (nil)))

(insn 120 119 121 3 arch/arm/kernel/signal.c:206 discrim 4 (set (reg/f:SI 2 r2 [214])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 504 [0x1f8]))) 4 {*arm_addsi3} (nil))

(insn 121 120 122 3 arch/arm/kernel/signal.c:206 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:213 <variable>.vfpstate.hard.fpexc ] [213])
                        (reg/f:SI 2 r2 [214])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690988))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 122 121 123 3 arch/arm/kernel/signal.c:207 discrim 4 (set (reg:SI 3 r3 [orig:215 <variable>.vfpstate.hard.fpinst ] [215])
        (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 696 [0x2b8])) [0 <variable>.vfpstate.hard.fpinst+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 696 [0x2b8])) [0 <variable>.vfpstate.hard.fpinst+0 S4 A64])
        (nil)))

(insn 123 122 124 3 arch/arm/kernel/signal.c:207 discrim 4 (set (reg/f:SI 2 r2 [216])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 508 [0x1fc]))) 4 {*arm_addsi3} (nil))

(insn 124 123 125 3 arch/arm/kernel/signal.c:207 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:215 <variable>.vfpstate.hard.fpinst ] [215])
                        (reg/f:SI 2 r2 [216])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690993))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 125 124 126 3 arch/arm/kernel/signal.c:208 discrim 4 (set (reg:SI 3 r3 [orig:217 <variable>.vfpstate.hard.fpinst2 ] [217])
        (mem/s/j:SI (plus:SI (reg:SI 6 r6 [186])
                (const_int 700 [0x2bc])) [0 <variable>.vfpstate.hard.fpinst2+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 127 3 arch/arm/kernel/signal.c:208 discrim 4 (set (reg/f:SI 5 r5 [218])
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 sf ] [148])
            (const_int 512 [0x200]))) 4 {*arm_addsi3} (nil))

(insn 127 126 128 3 arch/arm/kernel/signal.c:208 discrim 4 (parallel [
            (set (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [orig:217 <variable>.vfpstate.hard.fpinst2 ] [217])
                        (reg/f:SI 5 r5 [218])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690998))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 128 127 152 3 arch/arm/kernel/signal.c:210 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:133 err.383 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 152 128 132 3 arch/arm/kernel/signal.c:210 discrim 1 (set (reg/v:SI 4 r4 [orig:143 err ] [143])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 0 [0x0])
            (const_int -14 [0xfffffffffffffff2]))) 240 {*movsicc_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  2 [61.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 132 152 133 4 17 "" [1 uses])

(note 133 132 136 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 136 133 135 4 NOTE_INSN_DELETED)

(insn 135 136 157 4 arch/arm/kernel/signal.c:434 discrim 4 (set (reg/f:SI 7 r7 [220])
        (plus:SI (reg/v/f:SI 7 r7 [orig:144 aux ] [144])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn 157 135 134 4 arch/arm/kernel/signal.c:437 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:143 err ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 134 157 141 4 arch/arm/kernel/signal.c:434 discrim 4 (set (reg:SI 3 r3 [219])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 141 134 147 4 arch/arm/kernel/signal.c:437 (parallel [
            (set (reg/i:SI 0 r0)
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [219])
                        (reg/f:SI 7 r7 [220])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/i:SI 0 r0)
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690968))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 147 141 158 4 arch/arm/kernel/signal.c:437 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 158 147 160 NOTE_INSN_DELETED)

(note 160 158 0 NOTE_INSN_DELETED)


;; Function do_signal (do_signal)[0:1452]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 703.
verify found no changes in insn with uid = 703.
deleting insn with uid = 494.
scanning new insn with uid = 704.
rescanning insn with uid = 704.
deleting insn with uid = 704.
deleting insn with uid = 477.
scanning new insn with uid = 705.
verify found no changes in insn with uid = 705.
deleting insn with uid = 438.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 73 n_edges 116 count 142 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 73 n_edges 116 count 144 (    2)

Pass 0 for finding allocno costs

    a76 (r410,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r409,l0) best GENERAL_REGS, cover GENERAL_REGS
    a108 (r408,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r407,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r406,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r402,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r400,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r399,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r398,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r394,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r392,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r391,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r383,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r380,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r378,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r377,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r376,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r375,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r370,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r369,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r367,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r366,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r365,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r363,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r361,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r360,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r358,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r357,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r356,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r355,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r354,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r353,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r352,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r351,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r348,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r347,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r346,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r345,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r344,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r343,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r335,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r328,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r327,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r325,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r324,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r318,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r314,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r310,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r309,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r307,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r302,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r299,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r298,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r296,l0) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r288,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r284,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r280,l0) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r275,l0) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r271,l0) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r268,l0) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a98 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    a100 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a101 (r253,l0) best GENERAL_REGS, cover GENERAL_REGS
    a99 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a102 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a103 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    a107 (r240,l0) best GENERAL_REGS, cover GENERAL_REGS
    a111 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a112 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a113 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a115 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a116 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    a119 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a120 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a121 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a122 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    a124 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a123 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a126 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a125 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    a114 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a118 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a117 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a109 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a110 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a104 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a105 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a106 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r407,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r406,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r402,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r400,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a7(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a10(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r399,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r398,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r394,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r392,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a15(r391,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a17(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a20(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r380,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a26(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a27(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a28(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r370,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r369,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r367,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r363,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r365,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r360,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r358,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r357,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r355,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r353,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r352,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r351,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a47(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a48(r348,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r347,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r344,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a56(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r335,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a62(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a63(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a64(r328,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a66(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a67(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r325,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a69(r324,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r310,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a71(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a73(r309,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a74(r307,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a75(r409,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r410,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a77(r302,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a78(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a79(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a81(r299,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r298,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a83(r296,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a84(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a85(r280,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a86(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r284,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a88(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a89(r268,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a90(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a91(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a92(r264,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a93(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a96(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a97(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a98(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a99(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a100(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a101(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a102(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a103(r246,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a104(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a105(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a106(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a107(r240,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a108(r408,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a109(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r200,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a111(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a113(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a114(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a115(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a116(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a117(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a118(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a120(r221,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a121(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a122(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a123(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a126(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r410: preferred GENERAL_REGS, alternative NO_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS
    r408: preferred GENERAL_REGS, alternative NO_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS
    r360: preferred GENERAL_REGS, alternative NO_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r407,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r406,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r402,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r400,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a7(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a10(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r399,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r398,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r394,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r392,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a15(r391,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a17(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a20(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r380,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a26(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a27(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a28(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r370,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r369,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r367,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r363,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r365,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r360,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r358,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r357,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r355,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r353,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r352,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r351,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a47(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a48(r348,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r347,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r344,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a56(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r335,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a62(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a63(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a64(r328,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a66(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a67(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r325,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a69(r324,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r310,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a71(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a73(r309,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a74(r307,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a75(r409,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r410,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a77(r302,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a78(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a79(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a81(r299,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r298,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a83(r296,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a84(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a85(r280,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a86(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r284,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a88(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a89(r268,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a90(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a91(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a92(r264,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a93(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a96(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a97(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a98(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a99(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a100(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a101(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a102(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a103(r246,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a104(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a105(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a106(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a107(r240,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a108(r408,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a109(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r200,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a111(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a113(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a114(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a115(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a116(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a117(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a118(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a120(r221,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a121(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a122(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a123(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a126(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 670(l0): point = 1
   Insn 610(l0): point = 3
   Insn 608(l0): point = 5
   Insn 609(l0): point = 7
   Insn 604(l0): point = 9
   Insn 673(l0): point = 11
   Insn 672(l0): point = 13
   Insn 668(l0): point = 16
   Insn 595(l0): point = 18
   Insn 593(l0): point = 20
   Insn 594(l0): point = 22
   Insn 589(l0): point = 24
   Insn 675(l0): point = 26
   Insn 674(l0): point = 28
   Insn 666(l0): point = 31
   Insn 578(l0): point = 33
   Insn 576(l0): point = 35
   Insn 575(l0): point = 37
   Insn 577(l0): point = 39
   Insn 573(l0): point = 41
   Insn 569(l0): point = 43
   Insn 567(l0): point = 45
   Insn 568(l0): point = 47
   Insn 562(l0): point = 50
   Insn 561(l0): point = 52
   Insn 559(l0): point = 54
   Insn 677(l0): point = 56
   Insn 676(l0): point = 58
   Insn 553(l0): point = 61
   Insn 552(l0): point = 63
   Insn 550(l0): point = 65
   Insn 664(l0): point = 68
   Insn 541(l0): point = 70
   Insn 540(l0): point = 72
   Insn 544(l0): point = 74
   Insn 543(l0): point = 76
   Insn 538(l0): point = 79
   Insn 537(l0): point = 81
   Insn 535(l0): point = 83
   Insn 533(l0): point = 86
   Insn 532(l0): point = 88
   Insn 531(l0): point = 90
   Insn 529(l0): point = 93
   Insn 528(l0): point = 95
   Insn 526(l0): point = 98
   Insn 525(l0): point = 100
   Insn 662(l0): point = 103
   Insn 520(l0): point = 105
   Insn 518(l0): point = 107
   Insn 519(l0): point = 109
   Insn 513(l0): point = 112
   Insn 512(l0): point = 114
   Insn 510(l0): point = 116
   Insn 679(l0): point = 118
   Insn 678(l0): point = 120
   Insn 506(l0): point = 122
   Insn 505(l0): point = 124
   Insn 503(l0): point = 126
   Insn 502(l0): point = 128
   Insn 501(l0): point = 130
   Insn 498(l0): point = 133
   Insn 497(l0): point = 135
   Insn 703(l0): point = 137
   Insn 496(l0): point = 139
   Insn 491(l0): point = 141
   Insn 490(l0): point = 143
   Insn 493(l0): point = 145
   Insn 489(l0): point = 147
   Insn 487(l0): point = 150
   Insn 486(l0): point = 152
   Insn 484(l0): point = 154
   Insn 483(l0): point = 156
   Insn 482(l0): point = 158
   Insn 481(l0): point = 160
   Insn 479(l0): point = 162
   Insn 478(l0): point = 164
   Insn 704(l0): point = 166
   Insn 480(l0): point = 168
   Insn 476(l0): point = 170
   Insn 475(l0): point = 172
   Insn 474(l0): point = 174
   Insn 472(l0): point = 176
   Insn 471(l0): point = 178
   Insn 660(l0): point = 181
   Insn 466(l0): point = 183
   Insn 465(l0): point = 185
   Insn 464(l0): point = 187
   Insn 462(l0): point = 190
   Insn 461(l0): point = 192
   Insn 459(l0): point = 194
   Insn 456(l0): point = 197
   Insn 658(l0): point = 200
   Insn 451(l0): point = 202
   Insn 450(l0): point = 204
   Insn 449(l0): point = 206
   Insn 656(l0): point = 209
   Insn 444(l0): point = 211
   Insn 442(l0): point = 214
   Insn 441(l0): point = 216
   Insn 439(l0): point = 218
   Insn 705(l0): point = 220
   Insn 437(l0): point = 222
   Insn 436(l0): point = 224
   Insn 433(l0): point = 227
   Insn 432(l0): point = 229
   Insn 431(l0): point = 231
   Insn 427(l0): point = 233
   Insn 424(l0): point = 235
   Insn 423(l0): point = 237
   Insn 418(l0): point = 240
   Insn 417(l0): point = 242
   Insn 416(l0): point = 244
   Insn 414(l0): point = 247
   Insn 411(l0): point = 249
   Insn 410(l0): point = 251
   Insn 413(l0): point = 253
   Insn 409(l0): point = 255
   Insn 406(l0): point = 258
   Insn 654(l0): point = 261
   Insn 401(l0): point = 263
   Insn 400(l0): point = 265
   Insn 395(l0): point = 267
   Insn 398(l0): point = 269
   Insn 397(l0): point = 271
   Insn 396(l0): point = 273
   Insn 399(l0): point = 275
   Insn 391(l0): point = 278
   Insn 390(l0): point = 280
   Insn 387(l0): point = 282
   Insn 385(l0): point = 284
   Insn 384(l0): point = 286
   Insn 386(l0): point = 288
   Insn 383(l0): point = 290
   Insn 381(l0): point = 292
   Insn 701(l0): point = 294
   Insn 379(l0): point = 297
   Insn 378(l0): point = 299
   Insn 372(l0): point = 302
   Insn 371(l0): point = 304
   Insn 370(l0): point = 306
   Insn 700(l0): point = 311
   Insn 369(l0): point = 313
   Insn 365(l0): point = 315
   Insn 682(l0): point = 317
   Insn 364(l0): point = 319
   Insn 681(l0): point = 321
   Insn 361(l0): point = 324
   Insn 360(l0): point = 326
   Insn 355(l0): point = 328
   Insn 347(l0): point = 331
   Insn 346(l0): point = 333
   Insn 345(l0): point = 335
   Insn 339(l0): point = 338
   Insn 338(l0): point = 340
   Insn 337(l0): point = 342
   Insn 336(l0): point = 344
   Insn 684(l0): point = 346
   Insn 683(l0): point = 348
   Insn 331(l0): point = 351
   Insn 627(l0): point = 353
   Insn 330(l0): point = 355
   Insn 652(l0): point = 358
   Insn 323(l0): point = 360
   Insn 321(l0): point = 362
   Insn 319(l0): point = 365
   Insn 318(l0): point = 367
   Insn 316(l0): point = 369
   Insn 311(l0): point = 371
   Insn 315(l0): point = 373
   Insn 314(l0): point = 375
   Insn 313(l0): point = 377
   Insn 312(l0): point = 379
   Insn 307(l0): point = 382
   Insn 306(l0): point = 384
   Insn 303(l0): point = 386
   Insn 300(l0): point = 388
   Insn 298(l0): point = 390
   Insn 301(l0): point = 392
   Insn 302(l0): point = 394
   Insn 296(l0): point = 396
   Insn 290(l0): point = 398
   Insn 289(l0): point = 400
   Insn 299(l0): point = 402
   Insn 288(l0): point = 404
   Insn 293(l0): point = 406
   Insn 295(l0): point = 408
   Insn 294(l0): point = 410
   Insn 686(l0): point = 412
   Insn 284(l0): point = 414
   Insn 685(l0): point = 416
   Insn 280(l0): point = 419
   Insn 274(l0): point = 421
   Insn 650(l0): point = 424
   Insn 263(l0): point = 426
   Insn 261(l0): point = 429
   Insn 260(l0): point = 431
   Insn 259(l0): point = 433
   Insn 648(l0): point = 436
   Insn 250(l0): point = 438
   Insn 248(l0): point = 441
   Insn 247(l0): point = 443
   Insn 246(l0): point = 445
   Insn 240(l0): point = 447
   Insn 239(l0): point = 449
   Insn 241(l0): point = 451
   Insn 238(l0): point = 453
   Insn 234(l0): point = 455
   Insn 232(l0): point = 457
   Insn 233(l0): point = 459
   Insn 230(l0): point = 461
   Insn 229(l0): point = 463
   Insn 227(l0): point = 465
   Insn 699(l0): point = 467
   Insn 226(l0): point = 469
   Insn 225(l0): point = 471
   Insn 223(l0): point = 473
   Insn 222(l0): point = 475
   Insn 221(l0): point = 477
   Insn 217(l0): point = 480
   Insn 216(l0): point = 482
   Insn 637(l0): point = 484
   Insn 208(l0): point = 486
   Insn 698(l0): point = 491
   Insn 207(l0): point = 493
   Insn 203(l0): point = 495
   Insn 688(l0): point = 497
   Insn 202(l0): point = 499
   Insn 687(l0): point = 501
   Insn 199(l0): point = 504
   Insn 198(l0): point = 506
   Insn 193(l0): point = 508
   Insn 185(l0): point = 511
   Insn 184(l0): point = 513
   Insn 183(l0): point = 515
   Insn 177(l0): point = 518
   Insn 176(l0): point = 520
   Insn 175(l0): point = 522
   Insn 174(l0): point = 524
   Insn 690(l0): point = 526
   Insn 689(l0): point = 528
   Insn 169(l0): point = 531
   Insn 629(l0): point = 533
   Insn 168(l0): point = 535
   Insn 164(l0): point = 538
   Insn 631(l0): point = 540
   Insn 163(l0): point = 542
   Insn 628(l0): point = 544
   Insn 161(l0): point = 546
   Insn 158(l0): point = 549
   Insn 646(l0): point = 552
   Insn 152(l0): point = 554
   Insn 150(l0): point = 557
   Insn 149(l0): point = 559
   Insn 148(l0): point = 561
   Insn 146(l0): point = 564
   Insn 145(l0): point = 566
   Insn 144(l0): point = 568
   Insn 140(l0): point = 571
   Insn 138(l0): point = 573
   Insn 692(l0): point = 575
   Insn 139(l0): point = 577
   Insn 691(l0): point = 579
   Insn 131(l0): point = 582
   Insn 644(l0): point = 585
   Insn 122(l0): point = 587
   Insn 116(l0): point = 590
   Insn 115(l0): point = 592
   Insn 625(l0): point = 594
   Insn 113(l0): point = 596
   Insn 694(l0): point = 598
   Insn 693(l0): point = 600
   Insn 106(l0): point = 603
   Insn 105(l0): point = 605
   Insn 107(l0): point = 607
   Insn 102(l0): point = 610
   Insn 101(l0): point = 612
   Insn 99(l0): point = 614
   Insn 97(l0): point = 617
   Insn 96(l0): point = 619
   Insn 94(l0): point = 622
   Insn 93(l0): point = 624
   Insn 92(l0): point = 626
   Insn 90(l0): point = 629
   Insn 89(l0): point = 631
   Insn 88(l0): point = 633
   Insn 86(l0): point = 636
   Insn 85(l0): point = 638
   Insn 83(l0): point = 640
   Insn 81(l0): point = 642
   Insn 80(l0): point = 644
   Insn 79(l0): point = 646
   Insn 82(l0): point = 648
   Insn 642(l0): point = 651
   Insn 72(l0): point = 653
   Insn 70(l0): point = 656
   Insn 69(l0): point = 658
   Insn 67(l0): point = 660
   Insn 66(l0): point = 662
   Insn 65(l0): point = 664
   Insn 697(l0): point = 666
   Insn 696(l0): point = 668
   Insn 59(l0): point = 671
   Insn 58(l0): point = 673
   Insn 640(l0): point = 676
   Insn 52(l0): point = 678
   Insn 53(l0): point = 680
   Insn 51(l0): point = 682
   Insn 44(l0): point = 685
   Insn 43(l0): point = 687
   Insn 42(l0): point = 689
   Insn 41(l0): point = 691
   Insn 40(l0): point = 694
   Insn 38(l0): point = 697
   Insn 35(l0): point = 699
   Insn 37(l0): point = 701
   Insn 22(l0): point = 703
   Insn 635(l0): point = 705
   Insn 24(l0): point = 707
   Insn 36(l0): point = 709
   Insn 638(l0): point = 712
   Insn 17(l0): point = 714
   Insn 16(l0): point = 716
   Insn 15(l0): point = 718
   Insn 13(l0): point = 721
   Insn 12(l0): point = 723
   Insn 10(l0): point = 726
   Insn 9(l0): point = 728
   Insn 7(l0): point = 730
   Insn 3(l0): point = 732
   Insn 2(l0): point = 734
 a0(r177): [320..353] [1..3]
 a1(r407): [4..7]
 a2(r406): [4..5]
 a3(r402): [6..9]
 a4(r400): [10..13]
 a5(r133): [552..554] [372..549] [268..357] [1..30]
 a6(r147): [186..573] [129..180] [1..30]
 a7(r206): [585..587] [395..582] [289..357] [1..30]
 a8(r207): [188..638] [148..180] [1..30]
 a9(r213): [214..734] [205..208] [71..102] [62..67] [1..30]
 a10(r158): [500..533] [16..18]
 a11(r399): [19..22]
 a12(r398): [19..20]
 a13(r394): [21..24]
 a14(r392): [25..28]
 a15(r391): [36..41]
 a16(r136): [42..58]
 a17(r137): [53..54]
 a18(r383): [62..63]
 a19(r209): [712..716] [608..703] [77..102] [64..67]
 a20(r376): [79..81] [66..67]
 a21(r378): [71..72]
 a22(r380): [75..76]
 a23(r377): [82..83]
 a24(r375): [89..90]
 a25(r210): [712..714] [620..709] [96..102]
 a26(r214): [636..732] [101..102]
 a27(r140): [110..120]
 a28(r141): [115..116]
 a29(r370): [125..126]
 a30(r369): [127..128]
 a31(r361): [134..141]
 a32(r367): [134..135]
 a33(r366): [136..139]
 a34(r363): [136..145]
 a35(r365): [136..137]
 a36(r196): [142..143]
 a37(r197): [144..147]
 a38(r360): [153..154]
 a39(r358): [157..158]
 a40(r357): [159..160]
 a41(r356): [159..168]
 a42(r355): [163..164]
 a43(r354): [165..166]
 a44(r353): [165..170]
 a45(r352): [175..176]
 a46(r351): [177..178]
 a47(r148): [382..384] [358..367] [278..280] [261..263] [193..258]
 a48(r348): [193..194]
 a49(r191): [209..211] [200..202] [195..197]
 a50(r345): [214..216] [203..208]
 a51(r347): [205..206]
 a52(r193): [214..224] [207..208]
 a53(r346): [217..218]
 a54(r344): [219..220]
 a55(r194): [225..251]
 a56(r343): [230..231]
 a57(r339): [232..233]
 a58(r192): [232..244]
 a59(r337): [234..235]
 a60(r335): [236..237]
 a61(r195): [245..255]
 a62(r178): [270..315]
 a63(r188): [281..294]
 a64(r328): [291..292]
 a65(r179): [295..311]
 a66(r180): [308..308] [306..306]
 a67(r327): [312..313]
 a68(r325): [314..321]
 a69(r324): [316..319]
 a70(r310): [327..342]
 a71(r318): [327..328]
 a72(r314): [329..335]
 a73(r309): [336..344]
 a74(r307): [345..348]
 a75(r409): [534..544] [354..357]
 a76(r410): [536..540] [356..357]
 a77(r302): [361..402]
 a78(r159): [363..495]
 a79(r172): [385..390]
 a80(r169): [391..467]
 a81(r299): [399..400]
 a82(r298): [401..404]
 a83(r296): [405..416]
 a84(r156): [436..438] [424..426] [415..419]
 a85(r280): [441..445] [429..435] [420..423]
 a86(r288): [420..421]
 a87(r284): [429..433] [422..423]
 a88(r174): [441..451] [429..435] [422..423]
 a89(r268): [441..471] [427..435]
 a90(r275): [441..453] [434..435]
 a91(r276): [448..449]
 a92(r264): [454..501]
 a93(r271): [462..463]
 a94(r269): [466..469]
 a95(r160): [485..491]
 a96(r161): [488..488] [486..486]
 a97(r266): [492..493]
 a98(r263): [496..499]
 a99(r249): [507..522]
 a100(r257): [507..508]
 a101(r253): [509..515]
 a102(r248): [516..524]
 a103(r246): [525..528]
 a104(r146): [541..546]
 a105(r144): [555..561]
 a106(r143): [562..568]
 a107(r240): [569..579]
 a108(r408): [588..594] [583..584]
 a109(r201): [593..596]
 a110(r200): [595..600]
 a111(r231): [604..605]
 a112(r230): [613..614]
 a113(r228): [625..626]
 a114(r208): [712..718] [656..699] [632..650]
 a115(r227): [632..633]
 a116(r224): [656..658] [649..650]
 a117(r204): [659..660]
 a118(r205): [661..662]
 a119(r223): [663..664]
 a120(r221): [665..668]
 a121(r220): [672..673]
 a122(r219): [679..682]
 a123(r217): [688..689]
 a124(r218): [690..691]
 a125(r211): [700..705]
 a126(r212): [721..730] [708..711]
Compressing live ranges: from 737 to 295 - 40%
Ranges after the compression:
 a0(r177): [139..150] [0..1]
 a1(r407): [2..5]
 a2(r406): [2..3]
 a3(r402): [4..6]
 a4(r400): [7..8]
 a5(r133): [228..229] [158..227] [120..153] [0..18]
 a6(r147): [82..235] [52..81] [0..18]
 a7(r206): [240..241] [164..237] [125..153] [0..18]
 a8(r207): [83..259] [64..81] [0..18]
 a9(r213): [97..294] [91..94] [30..43] [25..29] [0..18]
 a10(r158): [209..220] [9..10]
 a11(r399): [11..14]
 a12(r398): [11..12]
 a13(r394): [13..15]
 a14(r392): [16..17]
 a15(r391): [19..20]
 a16(r136): [21..24]
 a17(r137): [22..23]
 a18(r383): [25..26]
 a19(r209): [287..289] [250..282] [34..43] [27..29]
 a20(r376): [35..36] [28..29]
 a21(r378): [30..31]
 a22(r380): [32..33]
 a23(r377): [37..38]
 a24(r375): [39..40]
 a25(r210): [287..288] [253..285] [41..43]
 a26(r214): [258..293] [42..43]
 a27(r140): [44..47]
 a28(r141): [45..46]
 a29(r370): [48..49]
 a30(r369): [50..51]
 a31(r361): [53..58]
 a32(r367): [53..54]
 a33(r366): [55..57]
 a34(r363): [55..62]
 a35(r365): [55..56]
 a36(r196): [59..60]
 a37(r197): [61..63]
 a38(r360): [65..66]
 a39(r358): [67..68]
 a40(r357): [69..70]
 a41(r356): [69..75]
 a42(r355): [71..72]
 a43(r354): [73..74]
 a44(r353): [73..76]
 a45(r352): [77..78]
 a46(r351): [79..80]
 a47(r148): [159..160] [154..157] [122..123] [118..119] [84..117]
 a48(r348): [84..85]
 a49(r191): [95..96] [88..89] [86..87]
 a50(r345): [97..98] [90..94]
 a51(r347): [91..92]
 a52(r193): [97..103] [93..94]
 a53(r346): [99..100]
 a54(r344): [101..102]
 a55(r194): [104..115]
 a56(r343): [105..106]
 a57(r339): [107..108]
 a58(r192): [107..113]
 a59(r337): [109..110]
 a60(r335): [111..112]
 a61(r195): [114..116]
 a62(r178): [121..136]
 a63(r188): [124..128]
 a64(r328): [126..127]
 a65(r179): [129..132]
 a66(r180): [131..131] [130..130]
 a67(r327): [133..134]
 a68(r325): [135..140]
 a69(r324): [137..138]
 a70(r310): [141..146]
 a71(r318): [141..142]
 a72(r314): [143..144]
 a73(r309): [145..147]
 a74(r307): [148..149]
 a75(r409): [221..225] [151..153]
 a76(r410): [222..223] [152..153]
 a77(r302): [155..168]
 a78(r159): [156..206]
 a79(r172): [161..162]
 a80(r169): [163..197]
 a81(r299): [165..166]
 a82(r298): [167..169]
 a83(r296): [170..172]
 a84(r156): [185..186] [178..179] [171..173]
 a85(r280): [187..188] [181..184] [174..177]
 a86(r288): [174..175]
 a87(r284): [181..182] [176..177]
 a88(r174): [187..191] [181..184] [176..177]
 a89(r268): [187..199] [180..184]
 a90(r275): [187..192] [183..184]
 a91(r276): [189..190]
 a92(r264): [193..210]
 a93(r271): [194..195]
 a94(r269): [196..198]
 a95(r160): [200..203]
 a96(r161): [202..202] [201..201]
 a97(r266): [204..205]
 a98(r263): [207..208]
 a99(r249): [211..216]
 a100(r257): [211..212]
 a101(r253): [213..214]
 a102(r248): [215..217]
 a103(r246): [218..219]
 a104(r146): [224..226]
 a105(r144): [230..231]
 a106(r143): [232..233]
 a107(r240): [234..236]
 a108(r408): [242..244] [238..239]
 a109(r201): [243..246]
 a110(r200): [245..247]
 a111(r231): [248..249]
 a112(r230): [251..252]
 a113(r228): [254..255]
 a114(r208): [287..290] [262..280] [256..261]
 a115(r227): [256..257]
 a116(r224): [262..263] [260..261]
 a117(r204): [264..265]
 a118(r205): [266..267]
 a119(r223): [268..269]
 a120(r221): [270..271]
 a121(r220): [272..273]
 a122(r219): [274..275]
 a123(r217): [276..277]
 a124(r218): [278..279]
 a125(r211): [281..283]
 a126(r212): [291..292] [284..286]
+++Allocating 1616 bytes for conflict table (uncompressed size 2032)
;; a0(r177,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a68(r325,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a1(r407,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a2(r406,l0) a3(r402,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r406,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a1(r407,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r402,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a1(r407,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r400,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r133,l0) conflicts: a0(r177,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a2(r406,l0) a1(r407,l0) a3(r402,l0) a4(r400,l0) a10(r158,l0) a12(r398,l0) a11(r399,l0) a13(r394,l0) a14(r392,l0) a47(r148,l0) a62(r178,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0) a69(r324,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0) a75(r409,l0) a76(r410,l0) a77(r302,l0) a78(r159,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0) a104(r146,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r147,l0) conflicts: a0(r177,l0) a5(r133,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a2(r406,l0) a1(r407,l0) a3(r402,l0) a4(r400,l0) a10(r158,l0) a12(r398,l0) a11(r399,l0) a13(r394,l0) a14(r392,l0) a32(r367,l0) a31(r361,l0) a35(r365,l0) a33(r366,l0) a34(r363,l0) a36(r196,l0) a37(r197,l0) a38(r360,l0) a39(r358,l0) a40(r357,l0) a41(r356,l0) a42(r355,l0) a43(r354,l0) a44(r353,l0) a45(r352,l0) a46(r351,l0) a48(r348,l0) a47(r148,l0) a49(r191,l0) a50(r345,l0) a51(r347,l0) a52(r193,l0) a53(r346,l0) a54(r344,l0) a55(r194,l0) a56(r343,l0) a57(r339,l0) a58(r192,l0) a59(r337,l0) a60(r335,l0) a61(r195,l0) a62(r178,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0) a69(r324,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0) a75(r409,l0) a76(r410,l0) a77(r302,l0) a78(r159,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0) a104(r146,l0) a105(r144,l0) a106(r143,l0) a107(r240,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r206,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a8(r207,l0) a9(r213,l0) a2(r406,l0) a1(r407,l0) a3(r402,l0) a4(r400,l0) a10(r158,l0) a12(r398,l0) a11(r399,l0) a13(r394,l0) a14(r392,l0) a62(r178,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0) a69(r324,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0) a75(r409,l0) a76(r410,l0) a77(r302,l0) a78(r159,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0) a104(r146,l0) a105(r144,l0) a106(r143,l0) a107(r240,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a8(r207,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a9(r213,l0) a2(r406,l0) a1(r407,l0) a3(r402,l0) a4(r400,l0) a10(r158,l0) a12(r398,l0) a11(r399,l0) a13(r394,l0) a14(r392,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a38(r360,l0) a39(r358,l0) a40(r357,l0) a41(r356,l0) a42(r355,l0) a43(r354,l0) a44(r353,l0) a45(r352,l0) a46(r351,l0) a48(r348,l0) a47(r148,l0) a49(r191,l0) a50(r345,l0) a51(r347,l0) a52(r193,l0) a53(r346,l0) a54(r344,l0) a55(r194,l0) a56(r343,l0) a57(r339,l0) a58(r192,l0) a59(r337,l0) a60(r335,l0) a61(r195,l0) a62(r178,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0) a69(r324,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0) a75(r409,l0) a76(r410,l0) a77(r302,l0) a78(r159,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0) a104(r146,l0) a105(r144,l0) a106(r143,l0) a107(r240,l0) a108(r408,l0) a109(r201,l0) a110(r200,l0) a111(r231,l0) a112(r230,l0) a113(r228,l0) a115(r227,l0) a114(r208,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a9(r213,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a2(r406,l0) a1(r407,l0) a3(r402,l0) a4(r400,l0) a10(r158,l0) a12(r398,l0) a11(r399,l0) a13(r394,l0) a14(r392,l0) a18(r383,l0) a19(r209,l0) a20(r376,l0) a21(r378,l0) a22(r380,l0) a23(r377,l0) a24(r375,l0) a25(r210,l0) a26(r214,l0) a47(r148,l0) a50(r345,l0) a51(r347,l0) a52(r193,l0) a53(r346,l0) a54(r344,l0) a55(r194,l0) a56(r343,l0) a57(r339,l0) a58(r192,l0) a59(r337,l0) a60(r335,l0) a61(r195,l0) a62(r178,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0) a69(r324,l0) a71(r318,l0) a70(r310,l0) a72(r314,l0) a73(r309,l0) a74(r307,l0) a75(r409,l0) a76(r410,l0) a77(r302,l0) a78(r159,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0) a104(r146,l0) a105(r144,l0) a106(r143,l0) a107(r240,l0) a108(r408,l0) a109(r201,l0) a110(r200,l0) a111(r231,l0) a112(r230,l0) a113(r228,l0) a115(r227,l0) a114(r208,l0) a116(r224,l0) a117(r204,l0) a118(r205,l0) a119(r223,l0) a120(r221,l0) a121(r220,l0) a122(r219,l0) a123(r217,l0) a124(r218,l0) a125(r211,l0) a126(r212,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r158,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a92(r264,l0) a100(r257,l0) a99(r249,l0) a101(r253,l0) a102(r248,l0) a103(r246,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r399,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a12(r398,l0) a13(r394,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r398,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a11(r399,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r394,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a11(r399,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r392,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r391,l0) conflicts:
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a16(r136,l0) conflicts: a17(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a17(r137,l0) conflicts: a16(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r383,l0) conflicts: a9(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r209,l0) conflicts: a8(r207,l0) a9(r213,l0) a20(r376,l0) a23(r377,l0) a24(r375,l0) a25(r210,l0) a26(r214,l0) a112(r230,l0) a113(r228,l0) a115(r227,l0) a114(r208,l0) a116(r224,l0) a117(r204,l0) a118(r205,l0) a119(r223,l0) a120(r221,l0) a121(r220,l0) a122(r219,l0) a123(r217,l0) a124(r218,l0) a125(r211,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a20(r376,l0) conflicts: a9(r213,l0) a19(r209,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r378,l0) conflicts: a9(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r380,l0) conflicts: a9(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r377,l0) conflicts: a9(r213,l0) a19(r209,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r375,l0) conflicts: a9(r213,l0) a19(r209,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r210,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0) a26(r214,l0) a113(r228,l0) a115(r227,l0) a114(r208,l0) a116(r224,l0) a117(r204,l0) a118(r205,l0) a119(r223,l0) a120(r221,l0) a121(r220,l0) a122(r219,l0) a123(r217,l0) a124(r218,l0) a125(r211,l0) a126(r212,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a26(r214,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0) a25(r210,l0) a114(r208,l0) a116(r224,l0) a117(r204,l0) a118(r205,l0) a119(r223,l0) a120(r221,l0) a121(r220,l0) a122(r219,l0) a123(r217,l0) a124(r218,l0) a125(r211,l0) a126(r212,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a27(r140,l0) conflicts: a28(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r141,l0) conflicts: a27(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r370,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r369,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r361,l0) conflicts: a6(r147,l0) a32(r367,l0) a35(r365,l0) a33(r366,l0) a34(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r367,l0) conflicts: a6(r147,l0) a31(r361,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r366,l0) conflicts: a6(r147,l0) a31(r361,l0) a35(r365,l0) a34(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r363,l0) conflicts: a6(r147,l0) a31(r361,l0) a35(r365,l0) a33(r366,l0) a36(r196,l0) a37(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r365,l0) conflicts: a6(r147,l0) a31(r361,l0) a33(r366,l0) a34(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r196,l0) conflicts: a6(r147,l0) a34(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r197,l0) conflicts: a6(r147,l0) a34(r363,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r360,l0) conflicts: a6(r147,l0) a8(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r358,l0) conflicts: a6(r147,l0) a8(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r357,l0) conflicts: a6(r147,l0) a8(r207,l0) a41(r356,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r356,l0) conflicts: a6(r147,l0) a8(r207,l0) a40(r357,l0) a42(r355,l0) a43(r354,l0) a44(r353,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r355,l0) conflicts: a6(r147,l0) a8(r207,l0) a41(r356,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r354,l0) conflicts: a6(r147,l0) a8(r207,l0) a41(r356,l0) a44(r353,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r353,l0) conflicts: a6(r147,l0) a8(r207,l0) a41(r356,l0) a43(r354,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r352,l0) conflicts: a6(r147,l0) a8(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r351,l0) conflicts: a6(r147,l0) a8(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r148,l0) conflicts: a5(r133,l0) a6(r147,l0) a8(r207,l0) a9(r213,l0) a48(r348,l0) a49(r191,l0) a50(r345,l0) a51(r347,l0) a52(r193,l0) a53(r346,l0) a54(r344,l0) a55(r194,l0) a56(r343,l0) a57(r339,l0) a58(r192,l0) a59(r337,l0) a60(r335,l0) a61(r195,l0) a62(r178,l0) a77(r302,l0) a78(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r348,l0) conflicts: a6(r147,l0) a8(r207,l0) a47(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r191,l0) conflicts: a6(r147,l0) a8(r207,l0) a47(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r345,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a51(r347,l0) a52(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r347,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a50(r345,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r193,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a50(r345,l0) a53(r346,l0) a54(r344,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r346,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a52(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r344,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a52(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r194,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a56(r343,l0) a57(r339,l0) a58(r192,l0) a59(r337,l0) a60(r335,l0) a61(r195,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r343,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r339,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0) a58(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r192,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0) a57(r339,l0) a59(r337,l0) a60(r335,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r337,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0) a58(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r335,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0) a58(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r195,l0) conflicts: a6(r147,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a55(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r178,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a63(r188,l0) a64(r328,l0) a65(r179,l0) a66(r180,l0) a67(r327,l0) a68(r325,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a63(r188,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0) a64(r328,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a64(r328,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0) a63(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a65(r179,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0) a66(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a66(r180,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0) a65(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a67(r327,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a68(r325,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a62(r178,l0) a69(r324,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a69(r324,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a68(r325,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a70(r310,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a71(r318,l0) a72(r314,l0) a73(r309,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a71(r318,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a70(r310,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a72(r314,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a70(r310,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a73(r309,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a70(r310,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a74(r307,l0) conflicts: a0(r177,l0) a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a75(r409,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a76(r410,l0) a104(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a76(r410,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a75(r409,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a77(r302,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a78(r159,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a78(r159,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a47(r148,l0) a77(r302,l0) a79(r172,l0) a80(r169,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a79(r172,l0) conflicts: a5(r133,l0) a6(r147,l0) a8(r207,l0) a9(r213,l0) a77(r302,l0) a78(r159,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a80(r169,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a77(r302,l0) a78(r159,l0) a81(r299,l0) a82(r298,l0) a83(r296,l0) a84(r156,l0) a86(r288,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a81(r299,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a77(r302,l0) a78(r159,l0) a80(r169,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a82(r298,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a77(r302,l0) a78(r159,l0) a80(r169,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a83(r296,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a84(r156,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a84(r156,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a83(r296,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a85(r280,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a86(r288,l0) a87(r284,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a86(r288,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a85(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a87(r284,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a85(r280,l0) a88(r174,l0) a89(r268,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a88(r174,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a85(r280,l0) a87(r284,l0) a89(r268,l0) a90(r275,l0) a91(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a89(r268,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a85(r280,l0) a87(r284,l0) a88(r174,l0) a90(r275,l0) a91(r276,l0) a92(r264,l0) a93(r271,l0) a94(r269,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a90(r275,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a85(r280,l0) a88(r174,l0) a89(r268,l0) a91(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a91(r276,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a88(r174,l0) a89(r268,l0) a90(r275,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a92(r264,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0) a78(r159,l0) a80(r169,l0) a89(r268,l0) a93(r271,l0) a94(r269,l0) a95(r160,l0) a96(r161,l0) a97(r266,l0) a98(r263,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a93(r271,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a89(r268,l0) a92(r264,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a94(r269,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a80(r169,l0) a89(r268,l0) a92(r264,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a95(r160,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a92(r264,l0) a96(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a96(r161,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a92(r264,l0) a95(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a97(r266,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a78(r159,l0) a92(r264,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a98(r263,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a92(r264,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a99(r249,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0) a100(r257,l0) a101(r253,l0) a102(r248,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a100(r257,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0) a99(r249,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a101(r253,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0) a99(r249,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a102(r248,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0) a99(r249,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a103(r246,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a10(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a104(r146,l0) conflicts: a5(r133,l0) a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0) a75(r409,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a105(r144,l0) conflicts: a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a106(r143,l0) conflicts: a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a107(r240,l0) conflicts: a6(r147,l0) a7(r206,l0) a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a108(r408,l0) conflicts: a8(r207,l0) a9(r213,l0) a109(r201,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a109(r201,l0) conflicts: a8(r207,l0) a9(r213,l0) a108(r408,l0) a110(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a110(r200,l0) conflicts: a8(r207,l0) a9(r213,l0) a109(r201,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a111(r231,l0) conflicts: a8(r207,l0) a9(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a112(r230,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a113(r228,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0) a25(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a114(r208,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a115(r227,l0) a116(r224,l0) a117(r204,l0) a118(r205,l0) a119(r223,l0) a120(r221,l0) a121(r220,l0) a122(r219,l0) a123(r217,l0) a124(r218,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a115(r227,l0) conflicts: a8(r207,l0) a9(r213,l0) a19(r209,l0) a25(r210,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a116(r224,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a117(r204,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a118(r205,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a119(r223,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a120(r221,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a121(r220,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a122(r219,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a123(r217,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a124(r218,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0) a114(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a125(r211,l0) conflicts: a9(r213,l0) a19(r209,l0) a25(r210,l0) a26(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a126(r212,l0) conflicts: a9(r213,l0) a25(r210,l0) a26(r214,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r177)<->a2(r406)@125:shuffle
  cp1:a0(r177)<->a1(r407)@125:shuffle
  cp2:a10(r158)<->a12(r398)@125:shuffle
  cp3:a10(r158)<->a11(r399)@125:shuffle
  cp4:a18(r383)<->a19(r209)@125:shuffle
  cp5:a19(r209)<->a22(r380)@125:shuffle
  cp6:a20(r376)<->a23(r377)@125:shuffle
  cp7:a29(r370)<->a30(r369)@125:shuffle
  cp8:a8(r207)<->a37(r197)@125:shuffle
  cp9:a36(r196)<->a37(r197)@125:shuffle
  cp10:a31(r361)<->a36(r196)@125:shuffle
  cp11:a32(r367)<->a33(r366)@125:shuffle
  cp12:a32(r367)<->a35(r365)@125:shuffle
  cp13:a32(r367)<->a34(r363)@125:shuffle
  cp14:a45(r352)<->a46(r351)@125:shuffle
  cp15:a42(r355)<->a44(r353)@125:shuffle
  cp16:a42(r355)<->a43(r354)@125:shuffle
  cp17:a39(r358)<->a41(r356)@125:shuffle
  cp18:a39(r358)<->a40(r357)@125:shuffle
  cp19:a48(r348)<->a49(r191)@125:shuffle
  cp20:a51(r347)<->a52(r193)@125:shuffle
  cp21:a49(r191)<->a50(r345)@1000:move
  cp22:a52(r193)<->a55(r194)@125:shuffle
  cp23:a50(r345)<->a53(r346)@125:shuffle
  cp24:a57(r339)<->a59(r337)@125:shuffle
  cp25:a56(r343)<->a57(r339)@125:shuffle
  cp26:a56(r343)<->a58(r192)@125:shuffle
  cp27:a58(r192)<->a61(r195)@125:shuffle
  cp28:a63(r188)<->a65(r179)@1000:move
  cp29:a47(r148)<->a63(r188)@125:shuffle
  cp30:a0(r177)<->a69(r324)@125:shuffle
  cp31:a62(r178)<->a69(r324)@125:shuffle
  cp32:a65(r179)<->a67(r327)@1000:move
  cp33:a71(r318)<->a72(r314)@125:shuffle
  cp34:a0(r177)<->a75(r409)@1000:move
  cp35:a79(r172)<->a80(r169)@125:shuffle
  cp36:a47(r148)<->a79(r172)@125:shuffle
  cp37:a86(r288)<->a88(r174)@125:shuffle
  cp38:a86(r288)<->a87(r284)@125:shuffle
  cp39:a84(r156)<->a86(r288)@125:shuffle
  cp40:a84(r156)<->a85(r280)@125:shuffle
  cp41:a84(r156)<->a89(r268)@1000:move
  cp42:a10(r158)<->a98(r263)@125:shuffle
  cp43:a78(r159)<->a98(r263)@125:shuffle
  cp44:a95(r160)<->a97(r266)@1000:move
  cp45:a100(r257)<->a101(r253)@125:shuffle
  cp46:a10(r158)<->a75(r409)@1000:move
  cp47:a76(r410)<->a104(r146)@125:shuffle
  cp48:a7(r206)<->a108(r408)@250:shuffle
  cp49:a116(r224)<->a117(r204)@125:shuffle
  cp50:a123(r217)<->a124(r218)@125:shuffle
  cp51:a114(r208)<->a125(r211)@125:shuffle
  regions=1, blocks=73, points=295
    allocnos=127, copies=52, conflicts=45, ranges=176

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r177 1r407 2r406 3r402 4r400 5r133 6r147 7r206 8r207 9r213 10r158 11r399 12r398 13r394 14r392 15r391 16r136 17r137 18r383 19r209 20r376 21r378 22r380 23r377 24r375 25r210 26r214 27r140 28r141 29r370 30r369 31r361 32r367 33r366 34r363 35r365 36r196 37r197 38r360 39r358 40r357 41r356 42r355 43r354 44r353 45r352 46r351 47r148 48r348 49r191 50r345 51r347 52r193 53r346 54r344 55r194 56r343 57r339 58r192 59r337 60r335 61r195 62r178 63r188 64r328 65r179 66r180 67r327 68r325 69r324 70r310 71r318 72r314 73r309 74r307 75r409 76r410 77r302 78r159 79r172 80r169 81r299 82r298 83r296 84r156 85r280 86r288 87r284 88r174 89r268 90r275 91r276 92r264 93r271 94r269 95r160 96r161 97r266 98r263 99r249 100r257 101r253 102r248 103r246 104r146 105r144 106r143 107r240 108r408 109r201 110r200 111r231 112r230 113r228 114r208 115r227 116r224 117r204 118r205 119r223 120r221 121r220 122r219 123r217 124r218 125r211 126r212
    modified regnos
    border:
    Pressure: GENERAL_REGS=12
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 206 of GENERAL_REGS has 4 regs less
    Reg 207 of GENERAL_REGS has 5 regs less
    Reg 213 of GENERAL_REGS has 5 regs less
    Reg 391 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 383 of GENERAL_REGS has 1 regs less
    Reg 209 of GENERAL_REGS has 5 regs less
    Reg 376 of GENERAL_REGS has 1 regs less
    Reg 378 of GENERAL_REGS has 1 regs less
    Reg 380 of GENERAL_REGS has 1 regs less
    Reg 377 of GENERAL_REGS has 1 regs less
    Reg 375 of GENERAL_REGS has 1 regs less
    Reg 210 of GENERAL_REGS has 5 regs less
    Reg 214 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 5 regs less
    Reg 188 of GENERAL_REGS has 4 regs less
    Reg 302 of GENERAL_REGS has 5 regs less
    Reg 159 of GENERAL_REGS has 5 regs less
    Reg 172 of GENERAL_REGS has 4 regs less
    Reg 169 of GENERAL_REGS has 4 regs less
    Reg 299 of GENERAL_REGS has 3 regs less
    Reg 298 of GENERAL_REGS has 3 regs less
    Reg 296 of GENERAL_REGS has 3 regs less
    Reg 268 of GENERAL_REGS has 3 regs less
    Reg 264 of GENERAL_REGS has 3 regs less
    Reg 269 of GENERAL_REGS has 1 regs less
    Reg 208 of GENERAL_REGS has 5 regs less
    Reg 212 of GENERAL_REGS has 1 regs less
      Pushing a96(r161,l0)
      Pushing a66(r180,l0)
      Pushing a125(r211,l0)
      Pushing a124(r218,l0)
      Pushing a123(r217,l0)
      Pushing a122(r219,l0)
      Pushing a121(r220,l0)
      Pushing a119(r223,l0)
      Pushing a118(r205,l0)
      Pushing a116(r224,l0)
      Pushing a115(r227,l0)
      Pushing a113(r228,l0)
      Pushing a112(r230,l0)
      Pushing a111(r231,l0)
      Pushing a109(r201,l0)
      Pushing a100(r257,l0)
      Pushing a98(r263,l0)
      Pushing a97(r266,l0)
      Pushing a93(r271,l0)
      Pushing a91(r276,l0)
      Pushing a86(r288,l0)
      Pushing a71(r318,l0)
      Pushing a69(r324,l0)
      Pushing a67(r327,l0)
      Pushing a64(r328,l0)
      Pushing a60(r335,l0)
      Pushing a59(r337,l0)
      Pushing a57(r339,l0)
      Pushing a56(r343,l0)
      Pushing a54(r344,l0)
      Pushing a51(r347,l0)
      Pushing a50(r345,l0)
      Pushing a48(r348,l0)
      Pushing a46(r351,l0)
      Pushing a45(r352,l0)
      Pushing a44(r353,l0)
      Pushing a43(r354,l0)
      Pushing a42(r355,l0)
      Pushing a41(r356,l0)
      Pushing a40(r357,l0)
      Pushing a39(r358,l0)
      Pushing a38(r360,l0)
      Pushing a36(r196,l0)
      Pushing a35(r365,l0)
      Pushing a34(r363,l0)
      Pushing a33(r366,l0)
      Pushing a32(r367,l0)
      Pushing a30(r369,l0)
      Pushing a29(r370,l0)
      Pushing a12(r398,l0)
      Pushing a11(r399,l0)
      Pushing a2(r406,l0)
      Pushing a1(r407,l0)
      Pushing a117(r204,l0)
      Pushing a108(r408,l0)
      Pushing a106(r143,l0)
      Pushing a105(r144,l0)
      Pushing a104(r146,l0)
      Pushing a102(r248,l0)
      Pushing a101(r253,l0)
      Pushing a99(r249,l0)
      Pushing a88(r174,l0)
      Pushing a87(r284,l0)
      Pushing a85(r280,l0)
      Pushing a76(r410,l0)
      Pushing a75(r409,l0)
      Pushing a73(r309,l0)
      Pushing a72(r314,l0)
      Pushing a70(r310,l0)
      Pushing a58(r192,l0)
      Pushing a55(r194,l0)
      Pushing a53(r346,l0)
      Pushing a52(r193,l0)
      Pushing a37(r197,l0)
      Pushing a31(r361,l0)
      Pushing a13(r394,l0)
      Pushing a3(r402,l0)
      Pushing a120(r221,l0)
      Pushing a103(r246,l0)
      Pushing a90(r275,l0)
      Pushing a84(r156,l0)
      Pushing a74(r307,l0)
      Pushing a68(r325,l0)
      Pushing a61(r195,l0)
      Pushing a49(r191,l0)
      Pushing a14(r392,l0)
      Pushing a4(r400,l0)
      Pushing a110(r200,l0)
      Pushing a107(r240,l0)
      Pushing a95(r160,l0)
      Pushing a10(r158,l0)
      Pushing a0(r177,l0)
      Pushing a65(r179,l0)
      Pushing a47(r148,l0)
      Pushing a94(r269,l0)
      Pushing a28(r141,l0)
      Pushing a24(r375,l0)
      Pushing a22(r380,l0)
      Pushing a21(r378,l0)
      Pushing a20(r376,l0)
      Pushing a18(r383,l0)
      Pushing a17(r137,l0)
      Pushing a126(r212,l0)
      Pushing a23(r377,l0)
      Pushing a27(r140,l0)
      Pushing a15(r391,l0)
      Pushing a83(r296,l0)
      Pushing a16(r136,l0)
      Pushing a81(r299,l0)(potential spill: pri=833, cost=10000)
      Pushing a77(r302,l0)(potential spill: pri=2000, cost=30000)
      Pushing a82(r298,l0)
      Pushing a79(r172,l0)
      Pushing a5(r133,l0)(potential spill: pri=2500, cost=40000)
      Pushing a89(r268,l0)
      Pushing a92(r264,l0)
      Pushing a63(r188,l0)
      Pushing a80(r169,l0)
      Pushing a7(r206,l0)
      Pushing a62(r178,l0)
      Pushing a6(r147,l0)
      Pushing a78(r159,l0)
      Pushing a114(r208,l0)(potential spill: pri=3636, cost=40000)
      Pushing a8(r207,l0)(potential spill: pri=6000, cost=60000)
      Pushing a26(r214,l0)
      Pushing a25(r210,l0)
      Pushing a19(r209,l0)
      Pushing a9(r213,l0)
      Popping a9(r213,l0)  -- assign reg 4
      Popping a19(r209,l0)  -- assign reg 5
      Popping a25(r210,l0)  -- assign reg 6
      Popping a26(r214,l0)  -- assign reg 7
      Popping a8(r207,l0)  -- assign reg 8
      Popping a114(r208,l0)  -- assign reg 10
      Popping a78(r159,l0)  -- assign reg 5
      Popping a6(r147,l0)  -- assign reg 6
      Popping a62(r178,l0)  -- assign reg 5
      Popping a7(r206,l0)  -- assign reg 7
      Popping a80(r169,l0)  -- assign reg 10
      Popping a63(r188,l0)  -- assign reg 10
      Popping a92(r264,l0)  -- assign reg 9
      Popping a89(r268,l0)  -- assign reg 11
      Popping a5(r133,l0)  -- (memory is more profitable 40000 vs 60000) spill
      Popping a79(r172,l0)  -- assign reg 10
      Popping a82(r298,l0)  -- assign reg 3
      Popping a77(r302,l0)  -- assign reg 9
      Popping a81(r299,l0)  -- assign reg 3
      Popping a16(r136,l0)  -- assign reg 4
      Popping a83(r296,l0)  -- assign reg 3
      Popping a15(r391,l0)  -- assign reg 1
      Popping a27(r140,l0)  -- assign reg 1
      Popping a23(r377,l0)  -- assign reg 3
      Popping a126(r212,l0)  -- assign reg 3
      Popping a17(r137,l0)  -- assign reg 3
      Popping a18(r383,l0)  -- assign reg 5
      Popping a20(r376,l0)  -- assign reg 3
      Popping a21(r378,l0)  -- assign reg 3
      Popping a22(r380,l0)  -- assign reg 5
      Popping a24(r375,l0)  -- assign reg 3
      Popping a28(r141,l0)  -- assign reg 3
      Popping a94(r269,l0)  -- assign reg 3
      Popping a47(r148,l0)  -- assign reg 0
      Popping a65(r179,l0)  -- assign reg 10
      Popping a0(r177,l0)  -- assign reg 5
      Popping a10(r158,l0)  -- assign reg 5
      Popping a95(r160,l0)  -- assign reg 3
      Popping a107(r240,l0)  -- assign reg 3
      Popping a110(r200,l0)  -- assign reg 3
      Popping a4(r400,l0)  -- assign reg 3
      Popping a14(r392,l0)  -- assign reg 3
      Popping a49(r191,l0)  -- assign reg 3
      Popping a61(r195,l0)  -- assign reg 3
      Popping a68(r325,l0)  -- assign reg 3
      Popping a74(r307,l0)  -- assign reg 3
      Popping a84(r156,l0)  -- assign reg 11
      Popping a90(r275,l0)  -- assign reg 3
      Popping a103(r246,l0)  -- assign reg 3
      Popping a120(r221,l0)  -- assign reg 3
      Popping a3(r402,l0)  -- assign reg 3
      Popping a13(r394,l0)  -- assign reg 3
      Popping a31(r361,l0)  -- assign reg 8
      Popping a37(r197,l0)  -- assign reg 8
      Popping a52(r193,l0)  -- assign reg 2
      Popping a53(r346,l0)  -- assign reg 3
      Popping a55(r194,l0)  -- assign reg 2
      Popping a58(r192,l0)  -- assign reg 3
      Popping a70(r310,l0)  -- assign reg 3
      Popping a72(r314,l0)  -- assign reg 2
      Popping a73(r309,l0)  -- assign reg 2
      Popping a75(r409,l0)  -- assign reg 5
      Popping a76(r410,l0)  -- assign reg 3
      Popping a85(r280,l0)  -- assign reg 2
      Popping a87(r284,l0)  -- assign reg 3
      Popping a88(r174,l0)  -- assign reg 1
      Popping a99(r249,l0)  -- assign reg 3
      Popping a101(r253,l0)  -- assign reg 2
      Popping a102(r248,l0)  -- assign reg 2
      Popping a104(r146,l0)  -- assign reg 3
      Popping a105(r144,l0)  -- assign reg 3
      Popping a106(r143,l0)  -- assign reg 3
      Popping a108(r408,l0)  -- assign reg 7
      Popping a117(r204,l0)  -- assign reg 3
      Popping a1(r407,l0)  -- assign reg 2
      Popping a2(r406,l0)  -- assign reg 5
      Popping a11(r399,l0)  -- assign reg 2
      Popping a12(r398,l0)  -- assign reg 5
      Popping a29(r370,l0)  -- assign reg 0
      Popping a30(r369,l0)  -- assign reg 0
      Popping a32(r367,l0)  -- assign reg 3
      Popping a33(r366,l0)  -- assign reg 2
      Popping a34(r363,l0)  -- assign reg 3
      Popping a35(r365,l0)  -- assign reg 1
      Popping a36(r196,l0)  -- assign reg 8
      Popping a38(r360,l0)  -- assign reg 3
      Popping a39(r358,l0)  -- assign reg 3
      Popping a40(r357,l0)  -- assign reg 3
      Popping a41(r356,l0)  -- assign reg 2
      Popping a42(r355,l0)  -- assign reg 3
      Popping a43(r354,l0)  -- assign reg 3
      Popping a44(r353,l0)  -- assign reg 1
      Popping a45(r352,l0)  -- assign reg 0
      Popping a46(r351,l0)  -- assign reg 0
      Popping a48(r348,l0)  -- assign reg 3
      Popping a50(r345,l0)  -- assign reg 3
      Popping a51(r347,l0)  -- assign reg 2
      Popping a54(r344,l0)  -- assign reg 3
      Popping a56(r343,l0)  -- assign reg 3
      Popping a57(r339,l0)  -- assign reg 1
      Popping a59(r337,l0)  -- assign reg 1
      Popping a60(r335,l0)  -- assign reg 1
      Popping a64(r328,l0)  -- assign reg 3
      Popping a67(r327,l0)  -- assign reg 10
      Popping a69(r324,l0)  -- assign reg 5
      Popping a71(r318,l0)  -- assign reg 2
      Popping a86(r288,l0)  -- assign reg 11
      Popping a91(r276,l0)  -- assign reg 2
      Popping a93(r271,l0)  -- assign reg 3
      Popping a97(r266,l0)  -- assign reg 3
      Popping a98(r263,l0)  -- assign reg 5
      Popping a100(r257,l0)  -- assign reg 2
      Popping a109(r201,l0)  -- assign reg 2
      Popping a111(r231,l0)  -- assign reg 3
      Popping a112(r230,l0)  -- assign reg 3
      Popping a113(r228,l0)  -- assign reg 3
      Popping a115(r227,l0)  -- assign reg 3
      Popping a116(r224,l0)  -- assign reg 3
      Popping a118(r205,l0)  -- assign reg 3
      Popping a119(r223,l0)  -- assign reg 3
      Popping a121(r220,l0)  -- assign reg 3
      Popping a122(r219,l0)  -- assign reg 3
      Popping a123(r217,l0)  -- assign reg 3
      Popping a124(r218,l0)  -- assign reg 3
      Popping a125(r211,l0)  -- assign reg 10
      Popping a66(r180,l0)  -- assign reg 3
      Popping a96(r161,l0)  -- assign reg 2
Disposition:
    5:r133 l0   mem   16:r136 l0     4   17:r137 l0     3   27:r140 l0     1
   28:r141 l0     3  106:r143 l0     3  105:r144 l0     3  104:r146 l0     3
    6:r147 l0     6   47:r148 l0     0   84:r156 l0    11   10:r158 l0     5
   78:r159 l0     5   95:r160 l0     3   96:r161 l0     2   80:r169 l0    10
   79:r172 l0    10   88:r174 l0     1    0:r177 l0     5   62:r178 l0     5
   65:r179 l0    10   66:r180 l0     3   63:r188 l0    10   49:r191 l0     3
   58:r192 l0     3   52:r193 l0     2   55:r194 l0     2   61:r195 l0     3
   36:r196 l0     8   37:r197 l0     8  110:r200 l0     3  109:r201 l0     2
  117:r204 l0     3  118:r205 l0     3    7:r206 l0     7    8:r207 l0     8
  114:r208 l0    10   19:r209 l0     5   25:r210 l0     6  125:r211 l0    10
  126:r212 l0     3    9:r213 l0     4   26:r214 l0     7  123:r217 l0     3
  124:r218 l0     3  122:r219 l0     3  121:r220 l0     3  120:r221 l0     3
  119:r223 l0     3  116:r224 l0     3  115:r227 l0     3  113:r228 l0     3
  112:r230 l0     3  111:r231 l0     3  107:r240 l0     3  103:r246 l0     3
  102:r248 l0     2   99:r249 l0     3  101:r253 l0     2  100:r257 l0     2
   98:r263 l0     5   92:r264 l0     9   97:r266 l0     3   89:r268 l0    11
   94:r269 l0     3   93:r271 l0     3   90:r275 l0     3   91:r276 l0     2
   85:r280 l0     2   87:r284 l0     3   86:r288 l0    11   83:r296 l0     3
   82:r298 l0     3   81:r299 l0     3   77:r302 l0     9   74:r307 l0     3
   73:r309 l0     2   70:r310 l0     3   72:r314 l0     2   71:r318 l0     2
   69:r324 l0     5   68:r325 l0     3   67:r327 l0    10   64:r328 l0     3
   60:r335 l0     1   59:r337 l0     1   57:r339 l0     1   56:r343 l0     3
   54:r344 l0     3   50:r345 l0     3   53:r346 l0     3   51:r347 l0     2
   48:r348 l0     3   46:r351 l0     0   45:r352 l0     0   44:r353 l0     1
   43:r354 l0     3   42:r355 l0     3   41:r356 l0     2   40:r357 l0     3
   39:r358 l0     3   38:r360 l0     3   31:r361 l0     8   34:r363 l0     3
   35:r365 l0     1   33:r366 l0     2   32:r367 l0     3   30:r369 l0     0
   29:r370 l0     0   24:r375 l0     3   20:r376 l0     3   23:r377 l0     3
   21:r378 l0     3   22:r380 l0     5   18:r383 l0     5   15:r391 l0     1
   14:r392 l0     3   13:r394 l0     3   12:r398 l0     5   11:r399 l0     2
    4:r400 l0     3    3:r402 l0     3    2:r406 l0     5    1:r407 l0     2
  108:r408 l0     7   75:r409 l0     5   76:r410 l0     3
New iteration of spill/restore move
+++Costs: overall 50500, reg 10500, mem 40000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 13, 14, dead_or_set: 0, 213
insn=3, live_throughout: 13, 14, 213, dead_or_set: 1, 214
insn=7, live_throughout: 13, 14, 213, 214, dead_or_set: 212
insn=9, live_throughout: 13, 14, 212, 213, 214, dead_or_set: 
insn=10, live_throughout: 13, 14, 212, 213, 214, dead_or_set: 
insn=12, live_throughout: 13, 212, 213, 214, dead_or_set: 
insn=13, live_throughout: 13, 212, 213, 214, dead_or_set: 
insn=15, live_throughout: 13, 213, 214, dead_or_set: 208
insn=16, live_throughout: 13, 208, 213, 214, dead_or_set: 209
insn=17, live_throughout: 13, 208, 209, 213, 214, dead_or_set: 210
insn=638, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=20, live_throughout: 13, 212, 213, 214, dead_or_set: 
insn=36, live_throughout: 13, 212, 213, 214, dead_or_set: 210
insn=24, live_throughout: 13, 210, 213, 214, dead_or_set: 212
insn=635, live_throughout: 13, 210, 213, 214, dead_or_set: 211
insn=22, live_throughout: 13, 210, 211, 213, 214, dead_or_set: 209
insn=37, live_throughout: 13, 209, 210, 211, 213, 214, dead_or_set: 
insn=35, live_throughout: 13, 24, 209, 210, 213, 214, dead_or_set: 208, 211
insn=38, live_throughout: 13, 24, 208, 209, 210, 213, 214, dead_or_set: 
insn=40, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=41, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 218
insn=42, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 217, 218
insn=43, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 217
insn=44, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=51, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 219
insn=53, live_throughout: 13, 208, 209, 210, 213, 214, 219, dead_or_set: 
insn=52, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 219
insn=640, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=56, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=58, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 220
insn=59, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 220
insn=60, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 
insn=696, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 221
insn=697, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 221
insn=65, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 221, 223
insn=66, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 205, 223
insn=67, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 204, 205
insn=69, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 204, 224
insn=70, live_throughout: 13, 208, 209, 210, 213, 214, 224, dead_or_set: 
insn=72, live_throughout: 13, 209, 210, 213, 214, dead_or_set: 14
insn=642, live_throughout: 13, 14, 209, 210, 213, 214, dead_or_set: 
insn=75, live_throughout: 13, 208, 209, 210, 213, 214, 224, dead_or_set: 
insn=82, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 3, 224
insn=79, live_throughout: 3, 13, 208, 209, 210, 213, 214, dead_or_set: 0
insn=80, live_throughout: 0, 3, 13, 208, 209, 210, 213, 214, dead_or_set: 1
insn=81, live_throughout: 0, 1, 3, 13, 208, 209, 210, 213, 214, dead_or_set: 2
insn=83, live_throughout: 13, 208, 209, 210, 213, 214, dead_or_set: 0, 1, 2, 3, 14
insn=85, live_throughout: 13, 14, 208, 209, 210, 213, 214, dead_or_set: 0, 207
insn=86, live_throughout: 13, 14, 207, 208, 209, 210, 213, 214, dead_or_set: 
insn=88, live_throughout: 13, 207, 208, 209, 210, 213, dead_or_set: 227
insn=89, live_throughout: 13, 207, 209, 210, 213, dead_or_set: 208, 227
insn=90, live_throughout: 13, 207, 209, 210, 213, dead_or_set: 
insn=92, live_throughout: 13, 207, 209, 210, 213, dead_or_set: 228
insn=93, live_throughout: 13, 207, 209, 210, 213, dead_or_set: 228
insn=94, live_throughout: 13, 207, 209, 210, 213, dead_or_set: 
insn=96, live_throughout: 13, 207, 209, 213, dead_or_set: 210
insn=97, live_throughout: 13, 207, 209, 213, dead_or_set: 
insn=99, live_throughout: 13, 207, 209, 213, dead_or_set: 230
insn=101, live_throughout: 13, 207, 209, 213, dead_or_set: 230
insn=102, live_throughout: 13, 207, 209, 213, dead_or_set: 
insn=103, live_throughout: 13, 207, 209, 213, dead_or_set: 
insn=107, live_throughout: 13, 207, 213, dead_or_set: 209
insn=105, live_throughout: 13, 207, 213, dead_or_set: 231
insn=106, live_throughout: 13, 207, 213, dead_or_set: 231
insn=108, live_throughout: 13, 207, 213, dead_or_set: 
insn=693, live_throughout: 13, 207, 213, dead_or_set: 200
insn=694, live_throughout: 13, 207, 213, dead_or_set: 200
insn=113, live_throughout: 13, 200, 207, 213, dead_or_set: 201
insn=625, live_throughout: 13, 201, 207, 213, dead_or_set: 200, 408
insn=115, live_throughout: 13, 207, 213, 408, dead_or_set: 201
insn=116, live_throughout: 13, 207, 213, 408, dead_or_set: 
insn=122, live_throughout: 13, 207, 213, dead_or_set: 206, 408
insn=644, live_throughout: 13, 206, 207, 213, dead_or_set: 
insn=125, live_throughout: 13, 207, 213, 408, dead_or_set: 
insn=131, live_throughout: 13, 207, 213, dead_or_set: 206, 408
insn=132, live_throughout: 13, 206, 207, 213, dead_or_set: 
insn=691, live_throughout: 13, 206, 207, 213, dead_or_set: 240
insn=139, live_throughout: 13, 206, 207, 213, 240, dead_or_set: 
insn=692, live_throughout: 13, 24, 206, 207, 213, dead_or_set: 240
insn=138, live_throughout: 13, 24, 206, 207, 213, 240, dead_or_set: 147
insn=140, live_throughout: 13, 147, 206, 207, 213, 240, dead_or_set: 
insn=144, live_throughout: 13, 147, 206, 207, 213, dead_or_set: 143, 240
insn=145, live_throughout: 13, 143, 147, 206, 207, 213, dead_or_set: 
insn=146, live_throughout: 13, 143, 147, 206, 207, 213, dead_or_set: 
insn=148, live_throughout: 13, 147, 206, 207, 213, dead_or_set: 143, 144
insn=149, live_throughout: 13, 144, 147, 206, 207, 213, dead_or_set: 
insn=150, live_throughout: 13, 144, 147, 206, 207, 213, dead_or_set: 
insn=152, live_throughout: 13, 147, 206, 207, 213, dead_or_set: 133, 144
insn=646, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 
insn=156, live_throughout: 13, 147, 206, 207, 213, dead_or_set: 
insn=158, live_throughout: 13, 147, 206, 207, 213, dead_or_set: 133
insn=159, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 
insn=161, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 146
insn=628, live_throughout: 13, 133, 146, 147, 206, 207, 213, dead_or_set: 409
insn=163, live_throughout: 13, 133, 146, 147, 206, 207, 213, 409, dead_or_set: 
insn=631, live_throughout: 13, 24, 133, 147, 206, 207, 213, 409, dead_or_set: 146, 410
insn=164, live_throughout: 13, 133, 147, 206, 207, 213, 409, 410, dead_or_set: 
insn=168, live_throughout: 13, 133, 147, 206, 207, 213, 409, dead_or_set: 410
insn=629, live_throughout: 13, 24, 133, 147, 206, 207, 213, dead_or_set: 158, 409
insn=169, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 
insn=689, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 246
insn=690, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 246
insn=174, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 246, 248
insn=175, live_throughout: 13, 133, 147, 158, 206, 207, 213, 248, dead_or_set: 249
insn=176, live_throughout: 13, 133, 147, 158, 206, 207, 213, 248, 249, dead_or_set: 
insn=177, live_throughout: 13, 133, 147, 158, 206, 207, 213, 248, 249, dead_or_set: 
insn=183, live_throughout: 13, 133, 147, 158, 206, 207, 213, 249, dead_or_set: 248, 253
insn=184, live_throughout: 13, 133, 147, 158, 206, 207, 213, 249, 253, dead_or_set: 
insn=185, live_throughout: 13, 133, 147, 158, 206, 207, 213, 249, 253, dead_or_set: 
insn=193, live_throughout: 13, 133, 147, 158, 206, 207, 213, 249, dead_or_set: 253, 257
insn=198, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 249, 257
insn=199, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 
insn=200, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 
insn=687, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 264
insn=202, live_throughout: 13, 133, 147, 206, 207, 213, 264, dead_or_set: 158, 263
insn=688, live_throughout: 13, 133, 147, 206, 207, 213, 263, dead_or_set: 264
insn=203, live_throughout: 13, 133, 147, 206, 207, 213, 264, dead_or_set: 159, 263
insn=207, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 266
insn=698, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 160, 266
insn=208, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 160, 161
insn=637, live_throughout: 13, 133, 147, 206, 207, 213, 264, dead_or_set: 159, 160
insn=216, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 
insn=217, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 
insn=221, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 0
insn=222, live_throughout: 0, 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 1
insn=223, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 0, 1, 14
insn=225, live_throughout: 0, 13, 133, 147, 159, 206, 207, 213, 264, dead_or_set: 268
insn=226, live_throughout: 0, 13, 133, 147, 159, 206, 207, 213, 264, 268, dead_or_set: 269
insn=699, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, 268, 269, dead_or_set: 0, 169
insn=227, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, 268, dead_or_set: 169, 269
insn=229, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 264, 268, dead_or_set: 271
insn=230, live_throughout: 13, 133, 147, 159, 206, 207, 213, 264, 268, dead_or_set: 169, 271
insn=233, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 264, 268, dead_or_set: 1
insn=232, live_throughout: 1, 13, 133, 147, 159, 169, 206, 207, 213, 264, 268, dead_or_set: 0
insn=234, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 264, 268, dead_or_set: 0, 1, 14
insn=238, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 268, dead_or_set: 264, 275
insn=241, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 268, 275, dead_or_set: 174
insn=239, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, dead_or_set: 276
insn=240, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, dead_or_set: 276
insn=246, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, dead_or_set: 280
insn=247, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, 280, dead_or_set: 
insn=248, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, 280, dead_or_set: 
insn=250, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, dead_or_set: 156
insn=648, live_throughout: 13, 133, 147, 156, 159, 169, 206, 207, 213, dead_or_set: 
insn=253, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 275, 280, dead_or_set: 
insn=259, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 280, dead_or_set: 275, 284
insn=260, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 280, 284, dead_or_set: 
insn=261, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 268, 280, 284, dead_or_set: 
insn=263, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, dead_or_set: 156, 268
insn=650, live_throughout: 13, 133, 147, 156, 159, 169, 206, 207, 213, dead_or_set: 
insn=266, live_throughout: 13, 133, 147, 159, 169, 174, 206, 207, 213, 280, 284, dead_or_set: 
insn=274, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 280, dead_or_set: 174, 284, 288
insn=280, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, dead_or_set: 156, 280, 288
insn=282, live_throughout: 13, 133, 147, 156, 159, 169, 206, 207, 213, dead_or_set: 
insn=685, live_throughout: 13, 133, 147, 156, 159, 169, 206, 207, 213, dead_or_set: 296
insn=284, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 296, dead_or_set: 156
insn=686, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, dead_or_set: 296
insn=294, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 296, dead_or_set: 1
insn=295, live_throughout: 1, 13, 133, 147, 159, 169, 206, 207, 213, 296, dead_or_set: 2
insn=293, live_throughout: 1, 2, 13, 133, 147, 159, 169, 206, 207, 213, 296, dead_or_set: 0
insn=288, live_throughout: 0, 1, 2, 13, 133, 147, 159, 169, 206, 207, 213, dead_or_set: 296, 298
insn=299, live_throughout: 0, 1, 2, 13, 133, 147, 159, 169, 206, 207, 213, 298, dead_or_set: 302
insn=289, live_throughout: 0, 1, 2, 13, 133, 147, 159, 169, 206, 207, 213, 302, dead_or_set: 298, 299
insn=290, live_throughout: 0, 1, 2, 13, 133, 147, 159, 169, 206, 207, 213, 302, dead_or_set: 299
insn=296, live_throughout: 13, 133, 147, 159, 169, 206, 207, 213, 302, dead_or_set: 0, 1, 2, 14
insn=302, live_throughout: 0, 13, 133, 147, 159, 169, 207, 213, 302, dead_or_set: 2, 206
insn=301, live_throughout: 0, 2, 13, 133, 147, 159, 169, 207, 213, 302, dead_or_set: 1
insn=298, live_throughout: 1, 2, 13, 133, 147, 159, 207, 213, 302, dead_or_set: 0, 169, 172
insn=300, live_throughout: 1, 2, 13, 133, 147, 159, 172, 207, 213, 302, dead_or_set: 0
insn=303, live_throughout: 13, 133, 147, 159, 172, 207, 213, 302, dead_or_set: 0, 1, 2, 14
insn=306, live_throughout: 13, 133, 147, 159, 207, 213, 302, dead_or_set: 0, 148, 172
insn=307, live_throughout: 13, 133, 147, 148, 159, 207, 213, 302, dead_or_set: 
insn=312, live_throughout: 13, 133, 147, 159, 207, 213, 302, dead_or_set: 0
insn=313, live_throughout: 0, 13, 133, 147, 159, 207, 213, 302, dead_or_set: 1
insn=314, live_throughout: 0, 1, 13, 133, 147, 159, 207, 213, 302, dead_or_set: 2
insn=315, live_throughout: 0, 1, 2, 13, 133, 147, 159, 207, 213, 302, dead_or_set: 3
insn=311, live_throughout: 0, 1, 2, 3, 13, 147, 159, 207, 213, 302, dead_or_set: 133
insn=316, live_throughout: 13, 147, 159, 207, 213, 302, dead_or_set: 0, 1, 2, 3, 14
insn=318, live_throughout: 13, 147, 159, 207, 213, 302, dead_or_set: 0, 148
insn=319, live_throughout: 13, 147, 148, 159, 207, 213, 302, dead_or_set: 
insn=321, live_throughout: 13, 147, 148, 207, 213, 302, dead_or_set: 159
insn=323, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 302
insn=652, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 
insn=326, live_throughout: 13, 133, 147, 206, 207, 213, 409, 410, dead_or_set: 
insn=330, live_throughout: 13, 133, 147, 206, 207, 213, 409, dead_or_set: 410
insn=627, live_throughout: 13, 24, 133, 147, 206, 207, 213, dead_or_set: 177, 409
insn=331, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 
insn=683, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 307
insn=684, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 307
insn=336, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 307, 309
insn=337, live_throughout: 13, 133, 147, 177, 206, 207, 213, 309, dead_or_set: 310
insn=338, live_throughout: 13, 133, 147, 177, 206, 207, 213, 309, 310, dead_or_set: 
insn=339, live_throughout: 13, 133, 147, 177, 206, 207, 213, 309, 310, dead_or_set: 
insn=345, live_throughout: 13, 133, 147, 177, 206, 207, 213, 310, dead_or_set: 309, 314
insn=346, live_throughout: 13, 133, 147, 177, 206, 207, 213, 310, 314, dead_or_set: 
insn=347, live_throughout: 13, 133, 147, 177, 206, 207, 213, 310, 314, dead_or_set: 
insn=355, live_throughout: 13, 133, 147, 177, 206, 207, 213, 310, dead_or_set: 314, 318
insn=360, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 310, 318
insn=361, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 
insn=362, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 
insn=681, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 325
insn=364, live_throughout: 13, 133, 147, 206, 207, 213, 325, dead_or_set: 177, 324
insn=682, live_throughout: 13, 133, 147, 206, 207, 213, 324, dead_or_set: 325
insn=365, live_throughout: 13, 133, 147, 206, 207, 213, 325, dead_or_set: 178, 324
insn=369, live_throughout: 13, 133, 147, 178, 206, 207, 213, dead_or_set: 325, 327
insn=700, live_throughout: 13, 133, 147, 178, 206, 207, 213, dead_or_set: 179, 327
insn=370, live_throughout: 13, 133, 147, 178, 206, 207, 213, dead_or_set: 179, 180
insn=371, live_throughout: 13, 133, 147, 178, 179, 206, 207, 213, dead_or_set: 
insn=372, live_throughout: 13, 133, 147, 178, 179, 206, 207, 213, dead_or_set: 
insn=375, live_throughout: 13, 133, 147, 178, 179, 206, 207, 213, dead_or_set: 
insn=378, live_throughout: 13, 133, 147, 178, 179, 206, 207, 213, dead_or_set: 
insn=379, live_throughout: 13, 133, 147, 178, 179, 206, 207, 213, dead_or_set: 
insn=701, live_throughout: 13, 133, 147, 178, 206, 207, 213, dead_or_set: 179, 188
insn=381, live_throughout: 13, 133, 147, 178, 188, 206, 207, 213, dead_or_set: 328
insn=383, live_throughout: 13, 133, 147, 178, 206, 207, 213, dead_or_set: 188, 328
insn=386, live_throughout: 13, 133, 147, 178, 188, 207, 213, dead_or_set: 2, 206
insn=384, live_throughout: 2, 13, 133, 147, 178, 188, 207, 213, dead_or_set: 0
insn=385, live_throughout: 0, 2, 13, 133, 147, 178, 188, 207, 213, dead_or_set: 1
insn=387, live_throughout: 13, 133, 147, 178, 188, 207, 213, dead_or_set: 0, 1, 2, 14
insn=390, live_throughout: 13, 133, 147, 178, 207, 213, dead_or_set: 0, 148, 188
insn=391, live_throughout: 13, 133, 147, 148, 178, 207, 213, dead_or_set: 
insn=399, live_throughout: 13, 133, 147, 178, 207, 213, dead_or_set: 3
insn=396, live_throughout: 3, 13, 133, 147, 178, 207, 213, dead_or_set: 0
insn=397, live_throughout: 0, 3, 13, 133, 147, 178, 207, 213, dead_or_set: 1
insn=398, live_throughout: 0, 1, 3, 13, 133, 147, 207, 213, dead_or_set: 2, 178
insn=395, live_throughout: 0, 1, 2, 3, 13, 147, 207, 213, dead_or_set: 133
insn=400, live_throughout: 13, 147, 207, 213, dead_or_set: 0, 1, 2, 3, 14
insn=401, live_throughout: 13, 147, 207, 213, dead_or_set: 0, 148
insn=654, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 
insn=404, live_throughout: 13, 147, 207, 213, dead_or_set: 
insn=406, live_throughout: 13, 147, 207, 213, dead_or_set: 148
insn=407, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 
insn=409, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 195
insn=413, live_throughout: 13, 147, 148, 195, 207, 213, dead_or_set: 
insn=410, live_throughout: 13, 24, 147, 148, 195, 207, 213, dead_or_set: 194
insn=411, live_throughout: 13, 24, 147, 148, 194, 195, 207, 213, dead_or_set: 
insn=414, live_throughout: 13, 147, 148, 194, 195, 207, 213, dead_or_set: 
insn=416, live_throughout: 13, 147, 148, 194, 207, 213, dead_or_set: 192, 195
insn=417, live_throughout: 13, 147, 148, 192, 194, 207, 213, dead_or_set: 
insn=418, live_throughout: 13, 147, 148, 192, 194, 207, 213, dead_or_set: 
insn=423, live_throughout: 13, 147, 148, 192, 194, 207, 213, dead_or_set: 335
insn=424, live_throughout: 13, 147, 148, 192, 194, 207, 213, dead_or_set: 335, 337
insn=427, live_throughout: 13, 147, 148, 192, 194, 207, 213, dead_or_set: 337, 339
insn=431, live_throughout: 13, 147, 148, 194, 207, 213, dead_or_set: 192, 339, 343
insn=432, live_throughout: 13, 147, 148, 194, 207, 213, dead_or_set: 343
insn=433, live_throughout: 13, 147, 148, 194, 207, 213, dead_or_set: 
insn=434, live_throughout: 13, 147, 148, 194, 207, 213, dead_or_set: 
insn=436, live_throughout: 13, 147, 148, 207, 213, dead_or_set: 193, 194
insn=437, live_throughout: 13, 147, 148, 193, 207, 213, dead_or_set: 
insn=705, live_throughout: 13, 147, 148, 193, 207, 213, dead_or_set: 344
insn=439, live_throughout: 13, 147, 148, 193, 207, 213, dead_or_set: 344, 346
insn=441, live_throughout: 13, 147, 148, 193, 207, 213, dead_or_set: 345, 346
insn=442, live_throughout: 13, 147, 148, 193, 207, 213, 345, dead_or_set: 
insn=444, live_throughout: 13, 147, 148, 207, dead_or_set: 191
insn=656, live_throughout: 13, 147, 148, 191, 207, dead_or_set: 
insn=447, live_throughout: 13, 147, 148, 193, 207, 213, 345, dead_or_set: 
insn=449, live_throughout: 13, 147, 148, 207, 213, 345, dead_or_set: 193, 347
insn=450, live_throughout: 13, 147, 148, 207, 345, dead_or_set: 213, 347
insn=451, live_throughout: 13, 147, 148, 207, dead_or_set: 191, 345
insn=658, live_throughout: 13, 147, 148, 191, 207, dead_or_set: 
insn=454, live_throughout: 13, 147, 148, 207, dead_or_set: 
insn=456, live_throughout: 13, 147, 148, 207, dead_or_set: 191
insn=457, live_throughout: 13, 147, 148, 191, 207, dead_or_set: 
insn=459, live_throughout: 13, 147, 148, 207, dead_or_set: 191, 348
insn=461, live_throughout: 13, 147, 207, dead_or_set: 148, 348
insn=462, live_throughout: 13, 147, 207, dead_or_set: 
insn=464, live_throughout: 13, 147, dead_or_set: 0, 207
insn=465, live_throughout: 0, 13, dead_or_set: 1, 147
insn=466, live_throughout: 13, dead_or_set: 0, 1, 14
insn=660, live_throughout: 13, 14, dead_or_set: 
insn=469, live_throughout: 13, 147, 207, dead_or_set: 
insn=471, live_throughout: 13, 147, 207, dead_or_set: 351
insn=472, live_throughout: 13, 147, 207, dead_or_set: 351, 352
insn=474, live_throughout: 13, 147, 207, dead_or_set: 0, 352
insn=475, live_throughout: 13, 147, 207, dead_or_set: 0, 14
insn=476, live_throughout: 13, 147, 207, dead_or_set: 353
insn=480, live_throughout: 13, 147, 207, 353, dead_or_set: 356
insn=704, live_throughout: 13, 147, 207, 353, 356, dead_or_set: 354
insn=478, live_throughout: 13, 147, 207, 356, dead_or_set: 353, 354, 355
insn=479, live_throughout: 13, 147, 207, 356, dead_or_set: 355
insn=481, live_throughout: 13, 147, 207, 356, dead_or_set: 357
insn=482, live_throughout: 13, 147, 207, dead_or_set: 356, 357, 358
insn=483, live_throughout: 13, 147, 207, dead_or_set: 358
insn=484, live_throughout: 13, 147, 207, dead_or_set: 360
insn=486, live_throughout: 13, 147, 207, dead_or_set: 360
insn=487, live_throughout: 13, 147, 207, dead_or_set: 
insn=489, live_throughout: 13, 147, dead_or_set: 197, 207
insn=493, live_throughout: 13, 147, 197, dead_or_set: 363
insn=490, live_throughout: 13, 147, 363, dead_or_set: 196, 197
insn=491, live_throughout: 13, 147, 363, dead_or_set: 196, 361
insn=496, live_throughout: 13, 147, 361, 363, dead_or_set: 366
insn=703, live_throughout: 13, 147, 361, 363, 366, dead_or_set: 365
insn=497, live_throughout: 13, 147, 361, dead_or_set: 363, 365, 366, 367
insn=498, live_throughout: 13, 147, dead_or_set: 361, 367
insn=499, live_throughout: 13, 147, dead_or_set: 
insn=501, live_throughout: 13, 147, dead_or_set: 14
insn=502, live_throughout: 13, dead_or_set: 147, 369
insn=503, live_throughout: 13, dead_or_set: 369, 370
insn=505, live_throughout: 13, dead_or_set: 0, 370
insn=506, live_throughout: 13, dead_or_set: 0, 14
insn=678, live_throughout: 13, 14, dead_or_set: 140
insn=679, live_throughout: 13, 14, dead_or_set: 140
insn=510, live_throughout: 13, 14, 140, dead_or_set: 141
insn=512, live_throughout: 13, 14, 140, dead_or_set: 141
insn=513, live_throughout: 13, 14, 140, dead_or_set: 
insn=519, live_throughout: 13, dead_or_set: 1, 140
insn=518, live_throughout: 1, 13, dead_or_set: 0
insn=520, live_throughout: 13, dead_or_set: 0, 1, 14
insn=662, live_throughout: 13, 14, dead_or_set: 
insn=523, live_throughout: 13, 14, 209, 210, 213, 214, dead_or_set: 
insn=525, live_throughout: 13, 14, 209, 210, 213, dead_or_set: 214
insn=526, live_throughout: 13, 14, 209, 210, 213, dead_or_set: 
insn=528, live_throughout: 13, 14, 209, 213, dead_or_set: 210
insn=529, live_throughout: 13, 14, 209, 213, dead_or_set: 
insn=531, live_throughout: 13, 14, 209, 213, dead_or_set: 375
insn=532, live_throughout: 13, 14, 209, 213, dead_or_set: 375
insn=533, live_throughout: 13, 14, 209, 213, dead_or_set: 
insn=535, live_throughout: 13, 14, 209, 213, dead_or_set: 377
insn=537, live_throughout: 13, 14, 209, 213, dead_or_set: 376, 377
insn=538, live_throughout: 13, 14, 209, 213, 376, dead_or_set: 
insn=543, live_throughout: 13, 14, 213, dead_or_set: 209, 380
insn=544, live_throughout: 13, 14, 213, dead_or_set: 380
insn=540, live_throughout: 13, 14, 213, dead_or_set: 378
insn=541, live_throughout: 13, 14, dead_or_set: 213, 378
insn=664, live_throughout: 13, 14, dead_or_set: 
insn=547, live_throughout: 13, 14, 209, 213, 376, dead_or_set: 
insn=550, live_throughout: 13, 14, 209, 213, dead_or_set: 376
insn=552, live_throughout: 13, 14, 213, dead_or_set: 209, 383
insn=553, live_throughout: 13, 14, dead_or_set: 213, 383
insn=554, live_throughout: 13, 14, dead_or_set: 
insn=676, live_throughout: 13, 14, dead_or_set: 136
insn=677, live_throughout: 13, 14, dead_or_set: 136
insn=559, live_throughout: 13, 14, 136, dead_or_set: 137
insn=561, live_throughout: 13, 14, 136, dead_or_set: 137
insn=562, live_throughout: 13, 14, 136, dead_or_set: 
insn=568, live_throughout: 13, 136, dead_or_set: 1
insn=567, live_throughout: 1, 13, 136, dead_or_set: 0
insn=569, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=573, live_throughout: 13, dead_or_set: 136, 391
insn=577, live_throughout: 13, 391, dead_or_set: 2
insn=575, live_throughout: 2, 13, 391, dead_or_set: 0
insn=576, live_throughout: 0, 2, 13, dead_or_set: 1, 391
insn=578, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=666, live_throughout: 13, 14, dead_or_set: 
insn=583, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 
insn=674, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 392
insn=675, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 392
insn=589, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 392, 394
insn=594, live_throughout: 13, 133, 147, 206, 207, 213, 394, dead_or_set: 399
insn=593, live_throughout: 13, 133, 147, 206, 207, 213, 399, dead_or_set: 394, 398
insn=595, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 158, 398, 399
insn=668, live_throughout: 13, 133, 147, 158, 206, 207, 213, dead_or_set: 
insn=598, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 
insn=672, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 400
insn=673, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 400
insn=604, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 400, 402
insn=609, live_throughout: 13, 133, 147, 206, 207, 213, 402, dead_or_set: 407
insn=608, live_throughout: 13, 133, 147, 206, 207, 213, 407, dead_or_set: 402, 406
insn=610, live_throughout: 13, 133, 147, 206, 207, 213, dead_or_set: 177, 406, 407
insn=670, live_throughout: 13, 133, 147, 177, 206, 207, 213, dead_or_set: 
insn=616, live_throughout: 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 219: (insn_list:REG_DEP_TRUE 51 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 58 (nil))
init_insns for 227: (insn_list:REG_DEP_TRUE 88 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 92 (nil))
init_insns for 230: (insn_list:REG_DEP_TRUE 99 (nil))
init_insns for 231: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 266: (insn_list:REG_DEP_TRUE 207 (nil))
init_insns for 268: (insn_list:REG_DEP_TRUE 225 (nil))
init_insns for 276: (insn_list:REG_DEP_TRUE 239 (nil))
init_insns for 299: (insn_list:REG_DEP_TRUE 290 (nil))
init_insns for 328: (insn_list:REG_DEP_TRUE 381 (nil))
init_insns for 335: (insn_list:REG_DEP_TRUE 423 (nil))
init_insns for 344: (insn_list:REG_DEP_TRUE 705 (nil))
init_insns for 347: (insn_list:REG_DEP_TRUE 450 (nil))
init_insns for 351: (insn_list:REG_DEP_TRUE 471 (nil))
init_insns for 353: (insn_list:REG_DEP_TRUE 476 (nil))
init_insns for 354: (insn_list:REG_DEP_TRUE 704 (nil))
init_insns for 355: (insn_list:REG_DEP_TRUE 479 (nil))
init_insns for 356: (insn_list:REG_DEP_TRUE 480 (nil))
init_insns for 357: (insn_list:REG_DEP_TRUE 481 (nil))
init_insns for 358: (insn_list:REG_DEP_TRUE 483 (nil))
init_insns for 360: (insn_list:REG_DEP_TRUE 484 (nil))
init_insns for 365: (insn_list:REG_DEP_TRUE 703 (nil))
init_insns for 366: (insn_list:REG_DEP_TRUE 496 (nil))
init_insns for 367: (insn_list:REG_DEP_TRUE 498 (nil))
init_insns for 375: (insn_list:REG_DEP_TRUE 531 (nil))
init_insns for 377: (insn_list:REG_DEP_TRUE 535 (nil))
init_insns for 378: (insn_list:REG_DEP_TRUE 540 (nil))
init_insns for 380: (insn_list:REG_DEP_TRUE 544 (nil))
init_insns for 383: (insn_list:REG_DEP_TRUE 553 (nil))
      Slot 1 (freq,size): a5r133(4000,4)
      Assigning 133(freq=4000) a new slot 0
changing reg in insn 677
changing reg in insn 676
changing reg in insn 677
changing reg in insn 573
changing reg in insn 568
changing reg in insn 559
changing reg in insn 559
changing reg in insn 561
changing reg in insn 679
changing reg in insn 678
changing reg in insn 679
changing reg in insn 519
changing reg in insn 510
changing reg in insn 510
changing reg in insn 512
changing reg in insn 144
changing reg in insn 148
changing reg in insn 145
changing reg in insn 148
changing reg in insn 152
changing reg in insn 149
changing reg in insn 161
changing reg in insn 163
changing reg in insn 631
changing reg in insn 138
changing reg in insn 496
changing reg in insn 502
changing reg in insn 498
changing reg in insn 483
changing reg in insn 480
changing reg in insn 479
changing reg in insn 476
changing reg in insn 471
changing reg in insn 465
changing reg in insn 497
changing reg in insn 482
changing reg in insn 478
changing reg in insn 496
changing reg in insn 480
changing reg in insn 476
changing reg in insn 471
changing reg in insn 390
changing reg in insn 318
changing reg in insn 306
changing reg in insn 406
changing reg in insn 401
changing reg in insn 461
changing reg in insn 280
changing reg in insn 263
changing reg in insn 250
changing reg in insn 284
changing reg in insn 629
changing reg in insn 595
changing reg in insn 193
changing reg in insn 184
changing reg in insn 202
changing reg in insn 637
changing reg in insn 203
changing reg in insn 208
changing reg in insn 637
changing reg in insn 314
changing reg in insn 293
changing reg in insn 321
changing reg in insn 315
changing reg in insn 299
changing reg in insn 229
changing reg in insn 226
changing reg in insn 221
changing reg in insn 216
changing reg in insn 698
changing reg in insn 208
changing reg in insn 208
changing reg in insn 637
changing reg in insn 208
changing reg in insn 699
changing reg in insn 227
changing reg in insn 230
changing reg in insn 227
changing reg in insn 298
changing reg in insn 230
changing reg in insn 298
changing reg in insn 306
changing reg in insn 306
changing reg in insn 241
changing reg in insn 274
changing reg in insn 260
changing reg in insn 627
changing reg in insn 610
changing reg in insn 355
changing reg in insn 346
changing reg in insn 364
changing reg in insn 365
changing reg in insn 383
changing reg in insn 370
changing reg in insn 398
changing reg in insn 399
changing reg in insn 384
changing reg in insn 378
changing reg in insn 700
changing reg in insn 370
changing reg in insn 701
changing reg in insn 370
changing reg in insn 371
changing reg in insn 370
changing reg in insn 701
changing reg in insn 383
changing reg in insn 383
changing reg in insn 390
changing reg in insn 390
changing reg in insn 451
changing reg in insn 456
changing reg in insn 444
changing reg in insn 459
changing reg in insn 416
changing reg in insn 431
changing reg in insn 417
changing reg in insn 436
changing reg in insn 449
changing reg in insn 437
changing reg in insn 410
changing reg in insn 436
changing reg in insn 411
changing reg in insn 409
changing reg in insn 413
changing reg in insn 416
changing reg in insn 410
changing reg in insn 490
changing reg in insn 491
changing reg in insn 489
changing reg in insn 493
changing reg in insn 490
changing reg in insn 694
changing reg in insn 693
changing reg in insn 694
changing reg in insn 625
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 66
changing reg in insn 67
changing reg in insn 131
changing reg in insn 122
changing reg in insn 386
changing reg in insn 302
changing reg in insn 85
changing reg in insn 152
changing reg in insn 489
changing reg in insn 464
changing reg in insn 158
changing reg in insn 139
changing reg in insn 15
changing reg in insn 35
changing reg in insn 89
changing reg in insn 53
changing reg in insn 16
changing reg in insn 22
changing reg in insn 552
changing reg in insn 543
changing reg in insn 532
changing reg in insn 107
changing reg in insn 35
changing reg in insn 17
changing reg in insn 36
changing reg in insn 528
changing reg in insn 96
changing reg in insn 93
changing reg in insn 41
changing reg in insn 37
changing reg in insn 93
changing reg in insn 42
changing reg in insn 635
changing reg in insn 35
changing reg in insn 7
changing reg in insn 24
changing reg in insn 9
changing reg in insn 2
changing reg in insn 628
changing reg in insn 321
changing reg in insn 550
changing reg in insn 323
changing reg in insn 553
changing reg in insn 544
changing reg in insn 541
changing reg in insn 535
changing reg in insn 531
changing reg in insn 450
changing reg in insn 437
changing reg in insn 411
changing reg in insn 409
changing reg in insn 396
changing reg in insn 385
changing reg in insn 312
changing reg in insn 301
changing reg in insn 241
changing reg in insn 107
changing reg in insn 106
changing reg in insn 88
changing reg in insn 81
changing reg in insn 59
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 36
changing reg in insn 22
changing reg in insn 7
changing reg in insn 552
changing reg in insn 543
changing reg in insn 449
changing reg in insn 535
changing reg in insn 531
changing reg in insn 88
changing reg in insn 51
changing reg in insn 629
changing reg in insn 627
changing reg in insn 3
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 525
changing reg in insn 12
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 697
changing reg in insn 696
changing reg in insn 697
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 82
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 99
changing reg in insn 101
changing reg in insn 105
changing reg in insn 106
changing reg in insn 692
changing reg in insn 691
changing reg in insn 692
changing reg in insn 144
changing reg in insn 138
changing reg in insn 690
changing reg in insn 689
changing reg in insn 690
changing reg in insn 174
changing reg in insn 174
changing reg in insn 183
changing reg in insn 175
changing reg in insn 175
changing reg in insn 198
changing reg in insn 176
changing reg in insn 183
changing reg in insn 193
changing reg in insn 184
changing reg in insn 193
changing reg in insn 198
changing reg in insn 202
changing reg in insn 203
changing reg in insn 688
changing reg in insn 687
changing reg in insn 688
changing reg in insn 238
changing reg in insn 207
changing reg in insn 207
changing reg in insn 207
changing reg in insn 698
changing reg in insn 225
changing reg in insn 227
changing reg in insn 263
changing reg in insn 230
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 238
changing reg in insn 259
changing reg in insn 246
changing reg in insn 239
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 246
changing reg in insn 280
changing reg in insn 247
changing reg in insn 259
changing reg in insn 274
changing reg in insn 260
changing reg in insn 274
changing reg in insn 280
changing reg in insn 686
changing reg in insn 685
changing reg in insn 686
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 299
changing reg in insn 323
changing reg in insn 300
changing reg in insn 684
changing reg in insn 683
changing reg in insn 684
changing reg in insn 336
changing reg in insn 336
changing reg in insn 345
changing reg in insn 337
changing reg in insn 337
changing reg in insn 360
changing reg in insn 338
changing reg in insn 345
changing reg in insn 355
changing reg in insn 346
changing reg in insn 355
changing reg in insn 360
changing reg in insn 364
changing reg in insn 365
changing reg in insn 682
changing reg in insn 681
changing reg in insn 682
changing reg in insn 369
changing reg in insn 369
changing reg in insn 700
changing reg in insn 381
changing reg in insn 383
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 427
changing reg in insn 427
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 705
changing reg in insn 439
changing reg in insn 441
changing reg in insn 451
changing reg in insn 439
changing reg in insn 441
changing reg in insn 441
changing reg in insn 449
changing reg in insn 450
changing reg in insn 459
changing reg in insn 461
changing reg in insn 471
changing reg in insn 472
changing reg in insn 472
changing reg in insn 474
changing reg in insn 476
changing reg in insn 478
changing reg in insn 704
changing reg in insn 478
changing reg in insn 478
changing reg in insn 479
changing reg in insn 480
changing reg in insn 482
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 497
changing reg in insn 496
changing reg in insn 493
changing reg in insn 497
changing reg in insn 703
changing reg in insn 497
changing reg in insn 496
changing reg in insn 497
changing reg in insn 497
changing reg in insn 498
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 505
changing reg in insn 531
changing reg in insn 532
changing reg in insn 537
changing reg in insn 550
changing reg in insn 535
changing reg in insn 537
changing reg in insn 537
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 552
changing reg in insn 553
changing reg in insn 573
changing reg in insn 576
changing reg in insn 675
changing reg in insn 674
changing reg in insn 675
changing reg in insn 589
changing reg in insn 589
changing reg in insn 594
changing reg in insn 593
changing reg in insn 593
changing reg in insn 595
changing reg in insn 594
changing reg in insn 595
changing reg in insn 673
changing reg in insn 672
changing reg in insn 673
changing reg in insn 604
changing reg in insn 604
changing reg in insn 609
changing reg in insn 608
changing reg in insn 608
changing reg in insn 610
changing reg in insn 609
changing reg in insn 610
changing reg in insn 625
changing reg in insn 131
changing reg in insn 122
changing reg in insn 628
changing reg in insn 629
changing reg in insn 627
changing reg in insn 631
changing reg in insn 330
changing reg in insn 168
Spilling for insn 53.
Spilling for insn 52.
Spilling for insn 59.
Spilling for insn 696.
Using reg 2 for reload 0
Spilling for insn 107.
Spilling for insn 106.
Spilling for insn 693.
Using reg 2 for reload 0
Spilling for insn 691.
Using reg 2 for reload 0
Spilling for insn 152.
Spilling for insn 158.
Spilling for insn 689.
Using reg 2 for reload 0
Spilling for insn 687.
Using reg 3 for reload 0
Spilling for insn 240.
Spilling for insn 685.
Using reg 2 for reload 0
Spilling for insn 284.
Spilling for insn 290.
Spilling for insn 311.
Using reg 12 for reload 1
Spilling for insn 321.
Spilling for insn 323.
Spilling for insn 683.
Using reg 2 for reload 0
Spilling for insn 681.
Using reg 2 for reload 0
Spilling for insn 395.
Using reg 12 for reload 1
Spilling for insn 411.
Spilling for insn 437.
Spilling for insn 450.
Spilling for insn 461.
Spilling for insn 479.
Spilling for insn 483.
Spilling for insn 498.
Spilling for insn 678.
Using reg 3 for reload 0
Spilling for insn 544.
Spilling for insn 541.
Spilling for insn 550.
Spilling for insn 553.
Spilling for insn 676.
Using reg 3 for reload 0
Spilling for insn 674.
Using reg 2 for reload 0
Spilling for insn 672.
Using reg 2 for reload 0
Spilling for insn 53.
Spilling for insn 52.
Spilling for insn 59.
Spilling for insn 696.
Using reg 2 for reload 0
Spilling for insn 107.
Spilling for insn 106.
Spilling for insn 693.
Using reg 2 for reload 0
Spilling for insn 691.
Using reg 2 for reload 0
Spilling for insn 152.
Spilling for insn 158.
Spilling for insn 689.
Using reg 2 for reload 0
Spilling for insn 687.
Using reg 3 for reload 0
Spilling for insn 240.
Spilling for insn 685.
Using reg 2 for reload 0
Spilling for insn 284.
Spilling for insn 290.
Spilling for insn 311.
Using reg 12 for reload 1
Spilling for insn 321.
Spilling for insn 323.
Spilling for insn 683.
Using reg 2 for reload 0
Spilling for insn 681.
Using reg 2 for reload 0
Spilling for insn 395.
Using reg 12 for reload 1
Spilling for insn 411.
Spilling for insn 437.
Spilling for insn 450.
Spilling for insn 461.
Spilling for insn 479.
Spilling for insn 483.
Spilling for insn 498.
Spilling for insn 678.
Using reg 3 for reload 0
Spilling for insn 544.
Spilling for insn 541.
Spilling for insn 550.
Spilling for insn 553.
Spilling for insn 676.
Using reg 3 for reload 0
Spilling for insn 674.
Using reg 2 for reload 0
Spilling for insn 672.
Using reg 2 for reload 0

Reloads for insn # 53
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 52
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])

Reloads for insn # 59
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])

Reloads for insn # 696
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 107
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 106
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])

Reloads for insn # 693
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 691
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 152
Reload 0: reload_out (SI) = (reg/v:SI 133 [ signr.423 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:SI 133 [ signr.423 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 158
Reload 0: reload_out (SI) = (reg/v:SI 133 [ signr.423 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 133 [ signr.423 ])

Reloads for insn # 689
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 687
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 240
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 164 [0xa4])) [0 stack.ss_sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 164 [0xa4])) [0 stack.ss_sp+0 S4 A32])

Reloads for insn # 685
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 284
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 168 [0xa8])) [0 stack.ss_flags+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 168 [0xa8])) [0 stack.ss_flags+0 S4 A32])

Reloads for insn # 290
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 172 [0xac])) [0 stack.ss_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 172 [0xac])) [0 stack.ss_size+0 S4 A32])

Reloads for insn # 311
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
Reload 1: reload_in (SI) = (reg/v:SI 133 [ signr.423 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 133 [ signr.423 ])
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 321
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])

Reloads for insn # 323
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])

Reloads for insn # 683
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 681
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 395
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
Reload 1: reload_in (SI) = (reg/v:SI 133 [ signr.423 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 133 [ signr.423 ])
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 411
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 437
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 450
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 461
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 479
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                                                        (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                                                        (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])

Reloads for insn # 483
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                                                        (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                                                        (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])

Reloads for insn # 498
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])

Reloads for insn # 678
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 544
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 541
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])

Reloads for insn # 550
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])

Reloads for insn # 553
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 676
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 674
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 672
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 82.
deleting insn with uid = 629.
deleting insn with uid = 698.
deleting insn with uid = 263.
deleting insn with uid = 627.
deleting insn with uid = 700.
deleting insn with uid = 701.
deleting insn with uid = 401.
deleting insn with uid = 451.
deleting insn with uid = 519.


try_optimize_cfg iteration 1

Simplifying condjump 261 around jump 650
deleting insn with uid = 262.
deleting insn with uid = 650.
deleting insn with uid = 651.
deleting block 35
deleting insn with uid = 266.
Deleted label in block 36.
deleting insn with uid = 375.
Deleted label in block 45.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 223.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 296.
verify found no changes in insn with uid = 303.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 400.
verify found no changes in insn with uid = 466.
verify found no changes in insn with uid = 475.
verify found no changes in insn with uid = 501.
verify found no changes in insn with uid = 506.
verify found no changes in insn with uid = 520.
verify found no changes in insn with uid = 569.
verify found no changes in insn with uid = 578.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 72 n_edges 115 count 140 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 72 n_edges 115 count 142 (    2)


do_signal

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={39d,30u} r1={37d,23u} r2={47d,36u} r3={93d,92u,1d} r4={3d,33u,7d} r5={14d,34u} r6={3d,14u,9d} r7={4d,9u} r8={4d,10u,2d} r9={3d,5u,1d} r10={10d,13u} r11={4d,4u} r12={24d,7u} r13={1d,120u,5d} r14={17d,1u} r15={16d} r16={16d} r17={16d} r18={16d} r19={16d} r20={16d} r21={16d} r22={16d} r23={16d} r24={68d,45u} r25={1d} r27={16d} r28={16d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={16d} r37={16d} r38={16d} r39={16d} r40={16d} r41={16d} r42={16d} r43={16d} r44={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} r76={16d} r77={16d} r78={16d} r79={16d} r80={16d} r81={16d} r82={16d} r83={16d} r84={16d} r85={16d} r86={16d} r87={16d} r88={16d} r89={16d} r90={16d} r91={16d} r92={16d} r93={16d} r94={16d} r95={16d} r96={16d} r97={16d} r98={16d} r99={16d} r100={16d} r101={16d} r102={16d} r103={16d} r104={16d} r105={16d} r106={16d} r107={16d} r108={16d} r109={16d} r110={16d} r111={16d} r112={16d} r113={16d} r114={16d} r115={16d} r116={16d} r117={16d} r118={16d} r119={16d} r120={16d} r121={16d} r122={16d} r123={16d} r124={16d} r125={16d} r126={16d} r127={16d} 
;;    total ref usage 2633{2131d,476u,26e} in 334{318 regular + 16 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 2 2 NOTE_INSN_DELETED)

(insn 2 8 3 2 arch/arm/kernel/signal.c:661 (set (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 7 2 arch/arm/kernel/signal.c:661 (set (reg/v:SI 7 r7 [orig:214 syscall ] [214])
        (reg:SI 1 r1 [ syscall ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 9 2 arch/arm/kernel/signal.c:673 (set (reg:SI 3 r3 [orig:212 D.25035 ] [212])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 7 10 2 arch/arm/kernel/signal.c:673 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:212 D.25035 ] [212])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/signal.c:673 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 616)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 72 3)
;; lr  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  72 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/kernel/signal.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:214 syscall ] [214])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 14 3 arch/arm/kernel/signal.c:679 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 10 [sl]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 10 [sl]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 arch/arm/kernel/signal.c:662 (set (reg/v:SI 10 sl [orig:208 restart_addr ] [208])
        (reg/v:SI 7 r7 [orig:214 syscall ] [214])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 16 15 17 4 arch/arm/kernel/signal.c:662 (set (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])
        (reg/v:SI 7 r7 [orig:214 syscall ] [214])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 17 16 638 4 arch/arm/kernel/signal.c:662 (set (reg/v:SI 6 r6 [orig:210 retval ] [210])
        (reg/v:SI 7 r7 [orig:214 syscall ] [214])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 638 17 639 4 (set (pc)
        (label_ref 60)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 639 638 20)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 10 [sl] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
(code_label 20 639 21 5 23 "" [1 uses])

(note 21 20 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 23 21 36 5 NOTE_INSN_DELETED)

(insn 36 23 24 5 arch/arm/kernel/signal.c:682 (set (reg/v:SI 6 r6 [orig:210 retval ] [210])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 24 36 635 5 arch/arm/kernel/signal.c:681 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:212 D.25035 ] [212])
                (const_int 1 [0x1])
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 635 24 22 5 arch/arm/kernel/signal.c:681 discrim 2 (set (reg:SI 10 sl [orig:211 iftmp.331 ] [211])
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 2 [0x2])
            (const_int 4 [0x4]))) 240 {*movsicc_insn} (nil))

(insn 22 635 37 5 arch/arm/kernel/signal.c:680 (set (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 37 22 35 5 arch/arm/kernel/signal.c:688 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int -516 [0xfffffffffffffdfc]))) 219 {*arm_cmpsi_insn} (nil))

(insn 35 37 38 5 arch/arm/kernel/signal.c:681 discrim 3 (set (reg/v:SI 10 sl [orig:208 restart_addr ] [208])
        (minus:SI (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])
            (reg:SI 10 sl [orig:211 iftmp.331 ] [211]))) 28 {*arm_subsi3_insn} (nil))

(jump_insn 38 35 618 5 arch/arm/kernel/signal.c:688 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  9 [29.0%] 
;; Succ edge  6 [71.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [71.0%]  (fallthru)
(note 618 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 40 618 619 6 arch/arm/kernel/signal.c:688 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 10 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 619 40 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 41 619 42 7 arch/arm/kernel/signal.c:688 (set (reg:SI 3 r3 [218])
        (plus:SI (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int 512 [0x200]))) 4 {*arm_addsi3} (nil))

(insn 42 41 43 7 arch/arm/kernel/signal.c:688 (set (reg:SI 3 r3 [217])
        (plus:SI (reg:SI 3 r3 [218])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int 514 [0x202]))
        (nil)))

(insn 43 42 44 7 arch/arm/kernel/signal.c:688 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [217])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 50 7 arch/arm/kernel/signal.c:688 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 10 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 50 44 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 53 8 arch/arm/kernel/signal.c:692 (set (reg:SI 3 r3 [orig:219 <variable>.uregs+68 ] [219])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 68 [0x44])) [0 <variable>.uregs+68 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 68 [0x44])) [0 <variable>.uregs+68 S4 A32])
        (nil)))

(insn 53 51 52 8 arch/arm/kernel/signal.c:693 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg/v:SI 10 sl [orig:208 restart_addr ] [208])) 167 {*arm_movsi_insn} (nil))

(insn 52 53 640 8 arch/arm/kernel/signal.c:692 (set (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
        (reg:SI 3 r3 [orig:219 <variable>.uregs+68 ] [219])) 167 {*arm_movsi_insn} (nil))

(jump_insn 640 52 641 8 arch/arm/kernel/signal.c:694 (set (pc)
        (label_ref 60)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 641 640 56)

;; Start of basic block ( 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [29.0%] 
(code_label 56 641 57 9 27 "" [1 uses])

(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 9 arch/arm/kernel/signal.c:696 (set (reg:SI 3 r3 [220])
        (const_int -4 [0xfffffffffffffffc])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -4 [0xfffffffffffffffc])
        (nil)))

(insn 59 58 60 9 arch/arm/kernel/signal.c:696 (set (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
        (reg:SI 3 r3 [220])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -4 [0xfffffffffffffffc])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 6 7 4 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [50.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 60 59 61 10 24 "" [4 uses])

(note 61 60 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 63 61 68 10 NOTE_INSN_DELETED)

(note 68 63 707 10 NOTE_INSN_DELETED)

(insn 707 68 696 10 include/linux/thread_info.h:84 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 696 707 697 10 include/linux/thread_info.h:84 (set (reg:SI 3 r3 [221])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 697 696 65 10 include/linux/thread_info.h:84 (set (reg:SI 3 r3 [221])
        (and:SI (reg:SI 3 r3 [221])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 65 697 66 10 include/linux/thread_info.h:84 (set (reg/f:SI 3 r3 [orig:223 <variable>.task ] [223])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [221])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 66 65 67 10 include/linux/thread_info.h:84 (set (reg/f:SI 3 r3 [orig:205 D.25743 ] [205])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:223 <variable>.task ] [223])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 67 66 69 10 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:204 D.25746 ] [204])
        (mem/v:SI (reg/f:SI 3 r3 [orig:205 D.25743 ] [205]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 69 67 70 10 include/linux/freezer.h:56 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [orig:204 D.25746 ] [204])
                        (const_int 524288 [0x80000]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [224])
                (and:SI (reg:SI 3 r3 [orig:204 D.25746 ] [204])
                    (const_int 524288 [0x80000])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 70 69 71 10 include/linux/freezer.h:56 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 71 70 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(call_insn 72 71 642 11 include/linux/freezer.h:57 (parallel [
            (call (mem:SI (symbol_ref:SI ("refrigerator") [flags 0x41] <function_decl 0x10f34f80 refrigerator>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 642 72 643 11 (set (pc)
        (label_ref 523)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 62)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  62 [100.0%] 

(barrier 643 642 75)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [71.0%] 
(code_label 75 643 76 12 29 "" [1 uses])

(note 76 75 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 77 76 78 12 NOTE_INSN_DELETED)

(note 78 77 84 12 NOTE_INSN_DELETED)

(note 84 78 79 12 NOTE_INSN_DELETED)

(insn 79 84 80 12 arch/arm/kernel/signal.c:708 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (nil))

(insn 80 79 81 12 arch/arm/kernel/signal.c:708 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 144 [0x90]))) 4 {*arm_addsi3} (nil))

(insn 81 80 83 12 arch/arm/kernel/signal.c:708 (set (reg:SI 2 r2)
        (reg/v/f:SI 4 r4 [orig:213 regs ] [213])) 167 {*arm_movsi_insn} (nil))

(call_insn 83 81 85 12 arch/arm/kernel/signal.c:708 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_signal_to_deliver") [flags 0x41] <function_decl 0x10a8d580 get_signal_to_deliver>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 85 83 86 12 arch/arm/kernel/signal.c:709 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 8 r8 [orig:207 signr ] [207])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 86 85 87 12 arch/arm/kernel/signal.c:709 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 523)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
        (nil)))
;; End of basic block 12 -> ( 13 62)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  13 [73.0%]  (fallthru)
;; Succ edge  62 [27.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [73.0%]  (fallthru)
(note 87 86 88 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 13 arch/arm/kernel/signal.c:717 (set (reg:SI 3 r3 [orig:227 <variable>.uregs+60 ] [227])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 89 88 90 13 arch/arm/kernel/signal.c:717 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:227 <variable>.uregs+60 ] [227])
            (reg/v:SI 10 sl [orig:208 restart_addr ] [208]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 90 89 91 13 arch/arm/kernel/signal.c:717 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 108)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 13 -> ( 14 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  18 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [28.0%]  (fallthru)
(note 91 90 92 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 14 arch/arm/kernel/signal.c:718 (set (reg:SI 3 r3 [228])
        (const_int -514 [0xfffffffffffffdfe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -514 [0xfffffffffffffdfe])
        (nil)))

(insn 93 92 94 14 arch/arm/kernel/signal.c:718 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (reg:SI 3 r3 [228]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int -514 [0xfffffffffffffdfe]))
        (nil)))

(jump_insn 94 93 95 14 arch/arm/kernel/signal.c:718 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 14 -> ( 17 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  17 [28.0%] 
;; Succ edge  15 [72.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [72.0%]  (fallthru)
(note 95 94 96 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 97 15 arch/arm/kernel/signal.c:718 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int -512 [0xfffffffffffffe00]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 97 96 98 15 arch/arm/kernel/signal.c:718 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 108)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 15 -> ( 16 18)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  16 [28.0%]  (fallthru)
;; Succ edge  18 [72.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  15 [28.0%]  (fallthru)
(note 98 97 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 100 98 99 16 NOTE_INSN_DELETED)

(insn 99 100 101 16 arch/arm/kernel/signal.c:720 (set (reg:SI 3 r3 [orig:230 ka.sa.sa_flags ] [230])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])
        (nil)))

(insn 101 99 102 16 arch/arm/kernel/signal.c:720 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:230 ka.sa.sa_flags ] [230])
                (const_int 1 [0x1])
                (const_int 28 [0x1c]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 102 101 103 16 arch/arm/kernel/signal.c:720 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 108)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 14 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  14 [28.0%] 
;; Pred edge  16 [50.0%]  (fallthru)
(code_label 103 102 104 17 32 "" [1 uses])

(note 104 103 107 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 107 104 105 17 arch/arm/kernel/signal.c:722 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])) 167 {*arm_movsi_insn} (nil))

(insn 105 107 106 17 arch/arm/kernel/signal.c:721 (set (reg:SI 3 r3 [231])
        (const_int -4 [0xfffffffffffffffc])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -4 [0xfffffffffffffffc])
        (nil)))

(insn 106 105 108 17 arch/arm/kernel/signal.c:721 (set (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213]) [0 <variable>.uregs+0 S4 A32])
        (reg:SI 3 r3 [231])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -4 [0xfffffffffffffffc])
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 15 13 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  15 [72.0%] 
;; Pred edge  13 [72.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  16 [50.0%] 
(code_label 108 106 109 18 31 "" [3 uses])

(note 109 108 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 111 109 114 18 NOTE_INSN_DELETED)

(note 114 111 708 18 NOTE_INSN_DELETED)

(insn 708 114 693 18 include/linux/thread_info.h:84 (set (reg:SI 12 ip)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 693 708 694 18 include/linux/thread_info.h:84 (set (reg/f:SI 3 r3 [orig:200 D.25774 ] [200])
        (and:SI (reg:SI 12 ip)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 694 693 113 18 include/linux/thread_info.h:84 (set (reg/f:SI 3 r3 [orig:200 D.25774 ] [200])
        (and:SI (reg/f:SI 3 r3 [orig:200 D.25774 ] [200])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 113 694 625 18 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [orig:201 D.25769 ] [201])
        (mem/v:SI (reg/f:SI 3 r3 [orig:200 D.25774 ] [200]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 625 113 115 18 (set (reg/f:SI 7 r7 [orig:408 <variable>.task ] [408])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:200 D.25774 ] [200])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 115 625 116 18 arch/arm/kernel/signal.c:726 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:201 D.25769 ] [201])
                (const_int 1 [0x1])
                (const_int 20 [0x14]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 116 115 117 18 arch/arm/kernel/signal.c:726 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 117 116 122 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 122 117 644 19 arch/arm/kernel/signal.c:727 (set (reg/v/f:SI 7 r7 [orig:206 oldset ] [206])
        (plus:SI (reg/f:SI 7 r7 [orig:408 <variable>.task ] [408])
            (const_int 960 [0x3c0]))) 4 {*arm_addsi3} (nil))

(jump_insn 644 122 645 19 (set (pc)
        (label_ref 132)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 645 644 125)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  18 [50.0%] 
(code_label 125 645 126 20 33 "" [1 uses])

(note 126 125 131 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 131 126 132 20 arch/arm/kernel/signal.c:729 (set (reg/v/f:SI 7 r7 [orig:206 oldset ] [206])
        (plus:SI (reg/f:SI 7 r7 [orig:408 <variable>.task ] [408])
            (const_int 944 [0x3b0]))) 4 {*arm_addsi3} (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 132 131 133 21 34 "" [1 uses])

(note 133 132 136 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 136 133 709 21 NOTE_INSN_DELETED)

(insn 709 136 691 21 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 691 709 139 21 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [240])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 139 691 692 21 arch/arm/kernel/signal.c:616 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:207 signr ] [207])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(insn 692 139 138 21 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [240])
        (and:SI (reg:SI 3 r3 [240])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 138 692 140 21 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [240])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 140 138 141 21 arch/arm/kernel/signal.c:616 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 22 25)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  25 [50.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [50.0%]  (fallthru)
(note 141 140 144 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 144 141 145 22 arch/arm/kernel/signal.c:616 discrim 1 (set (reg/f:SI 3 r3 [orig:143 D.26019 ] [143])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [240])
                (const_int 16 [0x10])) [0 <variable>.exec_domain+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 145 144 146 22 arch/arm/kernel/signal.c:616 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:143 D.26019 ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 146 145 147 22 arch/arm/kernel/signal.c:616 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 22 -> ( 23 25)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [85.0%]  (fallthru)
;; Succ edge  25 [15.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  22 [85.0%]  (fallthru)
(note 147 146 148 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 148 147 149 23 arch/arm/kernel/signal.c:616 discrim 2 (set (reg/f:SI 3 r3 [orig:144 D.26018 ] [144])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:143 D.26019 ] [143])
                (const_int 16 [0x10])) [0 <variable>.signal_invmap+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 149 148 150 23 arch/arm/kernel/signal.c:616 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:144 D.26018 ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 150 149 151 23 arch/arm/kernel/signal.c:616 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  24 [85.0%]  (fallthru)
;; Succ edge  25 [15.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  23 [85.0%]  (fallthru)
(note 151 150 152 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 152 151 710 24 arch/arm/kernel/signal.c:617 (set (reg:SI 3 r3)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:207 signr ] [207])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [orig:144 D.26018 ] [144])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 710 152 646 24 arch/arm/kernel/signal.c:617 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-164 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(jump_insn 646 710 647 24 (set (pc)
        (label_ref 159)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 26)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 647 646 156)

;; Start of basic block ( 21 22 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  21 [50.0%] 
;; Pred edge  22 [15.0%] 
;; Pred edge  23 [15.0%] 
(code_label 156 647 157 25 35 "" [3 uses])

(note 157 156 158 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 159 25 arch/arm/kernel/signal.c:617 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-164 S4 A32])
        (reg/v:SI 8 r8 [orig:207 signr ] [207])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 159 158 160 26 36 "" [1 uses])

(note 160 159 162 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 162 160 161 26 NOTE_INSN_DELETED)

(insn 161 162 628 26 arch/arm/kernel/signal.c:622 (set (reg:SI 3 r3 [orig:146 D.26013 ] [146])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])
        (nil)))

(insn 628 161 163 26 (set (reg:SI 5 r5 [orig:409 sp ] [409])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 163 628 631 26 arch/arm/kernel/signal.c:622 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:146 D.26013 ] [146])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 631 163 164 26 (set (reg:SI 3 r3 [410])
        (and:SI (reg:SI 3 r3 [orig:146 D.26013 ] [146])
            (const_int 134217728 [0x8000000]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 164 631 165 26 arch/arm/kernel/signal.c:622 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 326)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 27 40)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  40 [50.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 165 164 168 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 168 165 169 27 arch/arm/kernel/signal.c:448 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [410])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 169 168 170 27 arch/arm/kernel/signal.c:448 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27 -> ( 28 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
(note 170 169 172 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 172 170 711 28 NOTE_INSN_DELETED)

(insn 711 172 689 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 12 ip)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 689 711 690 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [246])
        (and:SI (reg:SI 12 ip)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 690 689 174 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [246])
        (and:SI (reg:SI 3 r3 [246])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 174 690 175 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 2 r2 [orig:248 <variable>.task ] [248])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [246])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 175 174 176 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:249 <variable>.sas_ss_size ] [249])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:248 <variable>.task ] [248])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 176 175 177 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:249 <variable>.sas_ss_size ] [249])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 177 176 178 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 28 -> ( 29 31)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  28 [50.0%]  (fallthru)
(note 178 177 183 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 183 178 184 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:253 <variable>.sas_ss_sp ] [253])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:248 <variable>.task ] [248])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 184 183 185 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:158 sp ] [158])
            (reg:SI 2 r2 [orig:253 <variable>.sas_ss_sp ] [253]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 185 184 186 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 583)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 30 70)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  70 [50.0%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 186 185 193 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 193 186 198 30 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [257])
        (minus:SI (reg/v:SI 5 r5 [orig:158 sp ] [158])
            (reg:SI 2 r2 [orig:253 <variable>.sas_ss_sp ] [253]))) 28 {*arm_subsi3_insn} (nil))

(insn 198 193 199 30 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [257])
            (reg:SI 3 r3 [orig:249 <variable>.sas_ss_size ] [249]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 199 198 200 30 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 583)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 30 -> ( 31 70)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  31 [50.0%]  (fallthru)
;; Succ edge  70 [50.0%] 

;; Start of basic block ( 27 30 28 70) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 5 [r5] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 5 [r5] 9 [r9] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  27 [50.0%] 
;; Pred edge  30 [50.0%]  (fallthru)
;; Pred edge  28 [50.0%] 
;; Pred edge  70 [100.0%] 
(code_label 200 199 201 31 38 "" [3 uses])

(note 201 200 205 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 205 201 209 31 NOTE_INSN_DELETED)

(note 209 205 712 31 NOTE_INSN_DELETED)

(insn 712 209 687 31 arch/arm/kernel/signal.c:459 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 687 712 202 31 arch/arm/kernel/signal.c:459 (set (reg:SI 9 r9 [264])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 202 687 688 31 arch/arm/kernel/signal.c:454 (set (reg:SI 5 r5 [263])
        (plus:SI (reg/v:SI 5 r5 [orig:158 sp ] [158])
            (const_int -880 [0xfffffffffffffc90]))) 4 {*arm_addsi3} (nil))

(insn 688 202 203 31 arch/arm/kernel/signal.c:459 (set (reg:SI 9 r9 [264])
        (and:SI (reg:SI 9 r9 [264])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 203 688 207 31 arch/arm/kernel/signal.c:454 (set (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
        (and:SI (reg:SI 5 r5 [263])
            (const_int -8 [0xfffffffffffffff8]))) 67 {*arm_andsi3_insn} (nil))

(insn 207 203 208 31 arch/arm/kernel/signal.c:459 (set (reg:SI 3 r3 [orig:266 <variable>.addr_limit ] [266])
        (mem/s/j:SI (plus:SI (reg:SI 9 r9 [264])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 9 r9 [264])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])
        (nil)))

(insn 208 207 637 31 arch/arm/kernel/signal.c:459 (parallel [
            (set (reg/v:SI 3 r3 [orig:160 flag ] [160])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
                        (const_int 880 [0x370])
                        (reg/v:SI 3 r3 [orig:160 flag ] [160])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8647573))
            (set (reg/v:SI 2 r2 [orig:161 roksum ] [161])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
                        (const_int 880 [0x370])
                        (reg/v:SI 3 r3 [orig:160 flag ] [160])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8647573))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 637 208 216 31 arch/arm/kernel/signal.c:460 (parallel [
            (set (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
                (if_then_else:SI (eq (reg/v:SI 3 r3 [orig:160 flag ] [160])
                        (const_int 0 [0x0]))
                    (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 216 637 217 31 arch/arm/kernel/signal.c:569 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 217 216 218 31 arch/arm/kernel/signal.c:569 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 31 -> ( 48 32)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  48 [30.2%] 
;; Succ edge  32 [69.8%]  (fallthru)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  31 [69.8%]  (fallthru)
(note 218 217 220 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(note 220 218 224 32 NOTE_INSN_DELETED)

(note 224 220 231 32 NOTE_INSN_DELETED)

(note 231 224 221 32 NOTE_INSN_DELETED)

(insn 221 231 222 32 arch/arm/kernel/signal.c:572 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:159 frame ] [159])) 167 {*arm_movsi_insn} (nil))

(insn 222 221 223 32 arch/arm/kernel/signal.c:572 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (nil))

(call_insn 223 222 225 32 arch/arm/kernel/signal.c:572 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("copy_siginfo_to_user") [flags 0x41] <function_decl 0x512b7280 copy_siginfo_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 225 223 226 32 arch/arm/kernel/signal.c:574 discrim 4 (set (reg:SI 11 fp [268])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 226 225 699 32 arch/arm/kernel/signal.c:574 discrim 4 (set (reg/f:SI 3 r3 [269])
        (plus:SI (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(insn 699 226 227 32 arch/arm/kernel/signal.c:574 discrim 4 (set (reg/v:SI 10 sl [orig:169 err ] [169])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 227 699 229 32 arch/arm/kernel/signal.c:574 discrim 4 (parallel [
            (set (reg/v:SI 10 sl [orig:169 err ] [169])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 11 fp [268])
                        (reg/f:SI 3 r3 [269])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 10 sl [orig:169 err ] [169])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690844))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 229 227 230 32 arch/arm/kernel/signal.c:575 discrim 4 (set (reg/f:SI 3 r3 [271])
        (plus:SI (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (nil))

(insn 230 229 233 32 arch/arm/kernel/signal.c:575 discrim 4 (parallel [
            (set (reg/v:SI 10 sl [orig:169 err ] [169])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 11 fp [268])
                        (reg/f:SI 3 r3 [271])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 10 sl [orig:169 err ] [169])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8690849))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 233 230 232 32 arch/arm/kernel/signal.c:577 discrim 1 (set (reg:SI 1 r1)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn 232 233 234 32 arch/arm/kernel/signal.c:577 discrim 1 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 164 [0xa4]))) 4 {*arm_addsi3} (nil))

(call_insn 234 232 238 32 arch/arm/kernel/signal.c:577 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x5118a980 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 238 234 241 32 arch/arm/kernel/signal.c:578 (set (reg/f:SI 3 r3 [orig:275 <variable>.task ] [275])
        (mem/s/f/j:SI (plus:SI (reg:SI 9 r9 [264])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 241 238 239 32 arch/arm/kernel/signal.c:579 (set (reg:SI 1 r1 [orig:174 D.25921 ] [174])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 239 241 240 32 arch/arm/kernel/signal.c:578 (set (reg:SI 2 r2 [orig:276 <variable>.sas_ss_sp ] [276])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:275 <variable>.task ] [275])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:275 <variable>.task ] [275])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])
        (nil)))

(insn 240 239 246 32 arch/arm/kernel/signal.c:578 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 164 [0xa4])) [0 stack.ss_sp+0 S4 A32])
        (reg:SI 2 r2 [orig:276 <variable>.sas_ss_sp ] [276])) 167 {*arm_movsi_insn} (nil))

(insn 246 240 247 32 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:280 <variable>.sas_ss_size ] [280])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:275 <variable>.task ] [275])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 247 246 248 32 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:280 <variable>.sas_ss_size ] [280])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 248 247 249 32 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 253)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 34 33)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 11 [fp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 11 [fp]
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 249 248 250 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 250 249 648 33 include/linux/sched.h:2213 discrim 1 (set (reg:SI 11 fp [orig:156 D.25977 ] [156])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(jump_insn 648 250 649 33 (set (pc)
        (label_ref 282)) 242 {*arm_jump} (nil))
;; End of basic block 33 -> ( 37)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 649 648 253)

;; Start of basic block ( 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  32 [50.0%] 
(code_label 253 649 254 34 42 "" [1 uses])

(note 254 253 259 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 259 254 260 34 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:284 <variable>.sas_ss_sp ] [284])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:275 <variable>.task ] [275])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 260 259 261 34 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:174 D.25921 ] [174])
            (reg:SI 3 r3 [orig:284 <variable>.sas_ss_sp ] [284]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 261 260 267 34 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 282)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 36 37)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  36 [50.0%]  (fallthru)
;; Succ edge  37 [50.0%] 

;; Start of basic block ( 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  34 [50.0%]  (fallthru)
(note 267 261 279 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 279 267 274 36 NOTE_INSN_DELETED)

(insn 274 279 280 36 include/linux/sched.h:2206 discrim 3 (set (reg:SI 11 fp [288])
        (minus:SI (reg:SI 1 r1 [orig:174 D.25921 ] [174])
            (reg:SI 3 r3 [orig:284 <variable>.sas_ss_sp ] [284]))) 28 {*arm_subsi3_insn} (nil))

(insn 280 274 282 36 include/linux/sched.h:2206 discrim 3 (parallel [
            (set (reg:SI 11 fp [orig:156 D.25977 ] [156])
                (leu:SI (reg:SI 11 fp [288])
                    (reg:SI 2 r2 [orig:280 <variable>.sas_ss_size ] [280])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))
;; End of basic block 36 -> ( 37)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  37 [100.0%]  (fallthru)

;; Start of basic block ( 36 33 34) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  36 [100.0%]  (fallthru)
;; Pred edge  33 [100.0%] 
;; Pred edge  34 [50.0%] 
(code_label 282 280 283 37 43 "" [2 uses])

(note 283 282 286 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 286 283 291 37 NOTE_INSN_DELETED)

(note 291 286 292 37 NOTE_INSN_DELETED)

(note 292 291 297 37 NOTE_INSN_DELETED)

(note 297 292 304 37 NOTE_INSN_DELETED)

(note 304 297 305 37 NOTE_INSN_DELETED)

(note 305 304 713 37 NOTE_INSN_DELETED)

(insn 713 305 685 37 arch/arm/kernel/signal.c:580 (set (reg:SI 12 ip)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 685 713 284 37 arch/arm/kernel/signal.c:580 (set (reg:SI 3 r3 [296])
        (and:SI (reg:SI 12 ip)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 284 685 686 37 arch/arm/kernel/signal.c:579 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 168 [0xa8])) [0 stack.ss_flags+0 S4 A32])
        (reg:SI 11 fp [orig:156 D.25977 ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 686 284 294 37 arch/arm/kernel/signal.c:580 (set (reg:SI 3 r3 [296])
        (and:SI (reg:SI 3 r3 [296])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 294 686 295 37 arch/arm/kernel/signal.c:581 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 164 [0xa4]))) 4 {*arm_addsi3} (nil))

(insn 295 294 293 37 arch/arm/kernel/signal.c:581 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn 293 295 288 37 arch/arm/kernel/signal.c:581 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 136 [0x88]))) 4 {*arm_addsi3} (nil))

(insn 288 293 299 37 arch/arm/kernel/signal.c:580 (set (reg/f:SI 3 r3 [orig:298 <variable>.task ] [298])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [296])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 299 288 289 37 arch/arm/kernel/signal.c:583 (set (reg/f:SI 9 r9 [302])
        (plus:SI (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(insn 289 299 290 37 arch/arm/kernel/signal.c:580 (set (reg:SI 3 r3 [orig:299 <variable>.sas_ss_size ] [299])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:298 <variable>.task ] [298])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 stack.ss_size+0 S4 A32])
        (nil)))

(insn 290 289 296 37 arch/arm/kernel/signal.c:580 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 172 [0xac])) [0 stack.ss_size+0 S4 A32])
        (reg:SI 3 r3 [orig:299 <variable>.sas_ss_size ] [299])) 167 {*arm_movsi_insn} (nil))

(call_insn 296 290 302 37 arch/arm/kernel/signal.c:581 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x10f3df00 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 302 296 301 37 arch/arm/kernel/signal.c:583 (set (reg:SI 2 r2)
        (reg/v/f:SI 7 r7 [orig:206 oldset ] [206])) 167 {*arm_movsi_insn} (nil))

(insn 301 302 298 37 arch/arm/kernel/signal.c:583 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:213 regs ] [213])) 167 {*arm_movsi_insn} (nil))

(insn 298 301 300 37 arch/arm/kernel/signal.c:581 (set (reg:SI 10 sl [orig:172 D.25926 ] [172])
        (ior:SI (reg:SI 0 r0)
            (reg/v:SI 10 sl [orig:169 err ] [169]))) 89 {*arm_iorsi3} (nil))

(insn 300 298 303 37 arch/arm/kernel/signal.c:583 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [302])) 167 {*arm_movsi_insn} (nil))

(call_insn 303 300 306 37 arch/arm/kernel/signal.c:583 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setup_sigframe") [flags 0x3] <function_decl 0x1140a680 setup_sigframe>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 306 303 307 37 arch/arm/kernel/signal.c:584 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 10 sl [orig:172 D.25926 ] [172])
                        (reg:SI 0 r0))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 0 r0 [orig:148 ret ] [148])
                (ior:SI (reg:SI 10 sl [orig:172 D.25926 ] [172])
                    (reg:SI 0 r0)))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 307 306 308 37 arch/arm/kernel/signal.c:584 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 407)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 37 -> ( 38 49)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  38 [29.0%]  (fallthru)
;; Succ edge  49 [71.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  37 [29.0%]  (fallthru)
(note 308 307 309 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 309 308 310 38 NOTE_INSN_DELETED)

(note 310 309 317 38 NOTE_INSN_DELETED)

(note 317 310 312 38 NOTE_INSN_DELETED)

(insn 312 317 313 38 arch/arm/kernel/signal.c:585 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:213 regs ] [213])) 167 {*arm_movsi_insn} (nil))

(insn 313 312 314 38 arch/arm/kernel/signal.c:585 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 144 [0x90]))) 4 {*arm_addsi3} (nil))

(insn 314 313 315 38 arch/arm/kernel/signal.c:585 (set (reg:SI 2 r2)
        (plus:SI (reg/v/f:SI 5 r5 [orig:159 frame ] [159])
            (const_int 872 [0x368]))) 4 {*arm_addsi3} (nil))

(insn 315 314 714 38 arch/arm/kernel/signal.c:585 (set (reg:SI 3 r3)
        (reg/v/f:SI 5 r5 [orig:159 frame ] [159])) 167 {*arm_movsi_insn} (nil))

(insn 714 315 311 38 arch/arm/kernel/signal.c:585 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-164 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 311 714 316 38 arch/arm/kernel/signal.c:585 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 316 311 318 38 arch/arm/kernel/signal.c:585 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setup_return") [flags 0x3] <function_decl 0x1140a880 setup_return>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 318 316 319 38 arch/arm/kernel/signal.c:587 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 0 r0 [orig:148 ret ] [148])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 319 318 320 38 arch/arm/kernel/signal.c:587 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 407)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 0 [0x0])
        (nil)))
;; End of basic block 38 -> ( 39 49)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  39 [100.0%]  (fallthru)
;; Succ edge  49

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  38 [100.0%]  (fallthru)
(note 320 319 321 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 321 320 323 39 arch/arm/kernel/signal.c:593 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])
        (reg/v/f:SI 5 r5 [orig:159 frame ] [159])) 167 {*arm_movsi_insn} (nil))

(insn 323 321 652 39 arch/arm/kernel/signal.c:594 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])
        (reg/f:SI 9 r9 [302])) 167 {*arm_movsi_insn} (nil))

(jump_insn 652 323 653 39 (set (pc)
        (label_ref 407)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 49)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 653 652 326)

;; Start of basic block ( 26) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [50.0%] 
(code_label 326 653 327 40 37 "" [1 uses])

(note 327 326 330 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 330 327 331 40 arch/arm/kernel/signal.c:448 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [410])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 331 330 332 40 arch/arm/kernel/signal.c:448 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 362)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 40 -> ( 41 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  41 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  40 [50.0%]  (fallthru)
(note 332 331 334 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 334 332 715 41 NOTE_INSN_DELETED)

(insn 715 334 683 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 683 715 684 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [307])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 684 683 336 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [307])
        (and:SI (reg:SI 3 r3 [307])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 336 684 337 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 2 r2 [orig:309 <variable>.task ] [309])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [307])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 337 336 338 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:310 <variable>.sas_ss_size ] [310])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:309 <variable>.task ] [309])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 338 337 339 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:310 <variable>.sas_ss_size ] [310])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 339 338 340 41 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 362)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 41 -> ( 42 44)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  42 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  41 [50.0%]  (fallthru)
(note 340 339 345 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 345 340 346 42 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:314 <variable>.sas_ss_sp ] [314])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:309 <variable>.task ] [309])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 346 345 347 42 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:177 sp ] [177])
            (reg:SI 2 r2 [orig:314 <variable>.sas_ss_sp ] [314]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 347 346 348 42 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 598)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 43 71)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  43 [50.0%]  (fallthru)
;; Succ edge  71 [50.0%] 

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 348 347 355 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 355 348 360 43 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [318])
        (minus:SI (reg/v:SI 5 r5 [orig:177 sp ] [177])
            (reg:SI 2 r2 [orig:314 <variable>.sas_ss_sp ] [314]))) 28 {*arm_subsi3_insn} (nil))

(insn 360 355 361 43 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [318])
            (reg:SI 3 r3 [orig:310 <variable>.sas_ss_size ] [310]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 361 360 362 43 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 598)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43 -> ( 44 71)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  44 [50.0%]  (fallthru)
;; Succ edge  71 [50.0%] 

;; Start of basic block ( 40 43 41 71) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 10 [sl] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  40 [50.0%] 
;; Pred edge  43 [50.0%]  (fallthru)
;; Pred edge  41 [50.0%] 
;; Pred edge  71 [100.0%] 
(code_label 362 361 363 44 46 "" [3 uses])

(note 363 362 367 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(note 367 363 716 44 NOTE_INSN_DELETED)

(insn 716 367 681 44 arch/arm/kernel/signal.c:459 (set (reg:SI 12 ip)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 681 716 364 44 arch/arm/kernel/signal.c:459 (set (reg:SI 3 r3 [325])
        (and:SI (reg:SI 12 ip)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 364 681 682 44 arch/arm/kernel/signal.c:454 (set (reg:SI 5 r5 [324])
        (plus:SI (reg/v:SI 5 r5 [orig:177 sp ] [177])
            (const_int -752 [0xfffffffffffffd10]))) 4 {*arm_addsi3} (nil))

(insn 682 364 365 44 arch/arm/kernel/signal.c:459 (set (reg:SI 3 r3 [325])
        (and:SI (reg:SI 3 r3 [325])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 365 682 369 44 arch/arm/kernel/signal.c:454 (set (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
        (and:SI (reg:SI 5 r5 [324])
            (const_int -8 [0xfffffffffffffff8]))) 67 {*arm_andsi3_insn} (nil))

(insn 369 365 370 44 arch/arm/kernel/signal.c:459 (set (reg:SI 10 sl [orig:327 <variable>.addr_limit ] [327])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [325])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 370 369 371 44 arch/arm/kernel/signal.c:459 (parallel [
            (set (reg/v:SI 10 sl [orig:179 flag ] [179])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
                        (const_int 752 [0x2f0])
                        (reg/v:SI 10 sl [orig:179 flag ] [179])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8647573))
            (set (reg/v:SI 3 r3 [orig:180 roksum ] [180])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
                        (const_int 752 [0x2f0])
                        (reg/v:SI 10 sl [orig:179 flag ] [179])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8647573))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 371 370 372 44 arch/arm/kernel/signal.c:459 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:179 flag ] [179])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 372 371 376 44 arch/arm/kernel/signal.c:459 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 44 -> ( 48 45)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  48 [50.0%] 
;; Succ edge  45 [50.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  44 [50.0%]  (fallthru)
(note 376 372 378 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 378 376 379 45 arch/arm/kernel/signal.c:546 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 379 378 380 45 arch/arm/kernel/signal.c:546 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 45 -> ( 48 46)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  48 [30.2%] 
;; Succ edge  46 [69.8%]  (fallthru)

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  45 [69.8%]  (fallthru)
(note 380 379 388 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(note 388 380 389 46 NOTE_INSN_DELETED)

(note 389 388 381 46 NOTE_INSN_DELETED)

(insn 381 389 383 46 arch/arm/kernel/signal.c:552 discrim 4 (set (reg:SI 3 r3 [328])
        (const_int 1522778970 [0x5ac3c35a])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1522778970 [0x5ac3c35a])
        (nil)))

(insn 383 381 386 46 arch/arm/kernel/signal.c:552 discrim 4 (parallel [
            (set (reg/v:SI 10 sl [orig:188 err ] [188])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 3 r3 [328])
                        (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 10 sl [orig:188 err ] [188])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691018))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 386 383 384 46 arch/arm/kernel/signal.c:554 (set (reg:SI 2 r2)
        (reg/v/f:SI 7 r7 [orig:206 oldset ] [206])) 167 {*arm_movsi_insn} (nil))

(insn 384 386 385 46 arch/arm/kernel/signal.c:554 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:178 frame ] [178])) 167 {*arm_movsi_insn} (nil))

(insn 385 384 387 46 arch/arm/kernel/signal.c:554 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:213 regs ] [213])) 167 {*arm_movsi_insn} (nil))

(call_insn 387 385 390 46 arch/arm/kernel/signal.c:554 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setup_sigframe") [flags 0x3] <function_decl 0x1140a680 setup_sigframe>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 390 387 391 46 arch/arm/kernel/signal.c:555 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0)
                        (reg/v:SI 10 sl [orig:188 err ] [188]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 0 r0 [orig:148 ret ] [148])
                (ior:SI (reg:SI 0 r0)
                    (reg/v:SI 10 sl [orig:188 err ] [188])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 391 390 392 46 arch/arm/kernel/signal.c:555 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 407)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 46 -> ( 47 49)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  47 [29.0%]  (fallthru)
;; Succ edge  49 [71.0%] 

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  46 [29.0%]  (fallthru)
(note 392 391 393 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(note 393 392 394 47 NOTE_INSN_DELETED)

(note 394 393 399 47 NOTE_INSN_DELETED)

(insn 399 394 396 47 arch/arm/kernel/signal.c:556 (set (reg:SI 3 r3)
        (reg/v/f:SI 5 r5 [orig:178 frame ] [178])) 167 {*arm_movsi_insn} (nil))

(insn 396 399 397 47 arch/arm/kernel/signal.c:556 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:213 regs ] [213])) 167 {*arm_movsi_insn} (nil))

(insn 397 396 398 47 arch/arm/kernel/signal.c:556 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 144 [0x90]))) 4 {*arm_addsi3} (nil))

(insn 398 397 717 47 arch/arm/kernel/signal.c:556 (set (reg:SI 2 r2)
        (plus:SI (reg/v/f:SI 5 r5 [orig:178 frame ] [178])
            (const_int 744 [0x2e8]))) 4 {*arm_addsi3} (nil))

(insn 717 398 395 47 arch/arm/kernel/signal.c:556 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-164 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 395 717 400 47 arch/arm/kernel/signal.c:556 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 400 395 654 47 arch/arm/kernel/signal.c:556 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setup_return") [flags 0x3] <function_decl 0x1140a880 setup_return>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn 654 400 655 47 (set (pc)
        (label_ref 407)) 242 {*arm_jump} (nil))
;; End of basic block 47 -> ( 49)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 655 654 404)

;; Start of basic block ( 31 45 44) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  31 [30.2%] 
;; Pred edge  45 [30.2%] 
;; Pred edge  44 [50.0%] 
(code_label 404 655 405 48 41 "" [3 uses])

(note 405 404 406 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 406 405 407 48 arch/arm/kernel/signal.c:547 (set (reg/v:SI 0 r0 [orig:148 ret ] [148])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 48 -> ( 49)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  49 [100.0%]  (fallthru)

;; Start of basic block ( 48 37 38 39 46 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  48 [100.0%]  (fallthru)
;; Pred edge  37 [71.0%] 
;; Pred edge  38
;; Pred edge  39 [100.0%] 
;; Pred edge  46 [71.0%] 
;; Pred edge  47 [100.0%] 
(code_label 407 406 408 49 45 "" [5 uses])

(note 408 407 412 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(note 412 408 409 49 NOTE_INSN_DELETED)

(insn 409 412 413 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 3 r3 [orig:195 D.25861 ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 413 409 410 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:195 D.25861 ] [195])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 410 413 411 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 2 r2 [orig:194 D.25862 ] [194])
        (and:SI (reg:SI 3 r3 [orig:195 D.25861 ] [195])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(insn 411 410 414 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 2 r2 [orig:194 D.25862 ] [194])) 167 {*arm_movsi_insn} (nil))

(jump_insn 414 411 415 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 434)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 49 -> ( 50 52)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  50 [50.0%]  (fallthru)
;; Succ edge  52 [50.0%] 

;; Start of basic block ( 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  49 [50.0%]  (fallthru)
(note 415 414 416 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 416 415 417 50 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 3 r3 [orig:192 mode ] [192])
        (and:SI (reg:SI 3 r3 [orig:195 D.25861 ] [195])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 417 416 418 50 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:192 mode ] [192])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 418 417 419 50 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 454)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 50 -> ( 55 51)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  55 [28.0%] 
;; Succ edge  51 [72.0%]  (fallthru)

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  50 [72.0%]  (fallthru)
(note 419 418 420 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(note 420 419 421 51 NOTE_INSN_DELETED)

(note 421 420 425 51 NOTE_INSN_DELETED)

(note 425 421 429 51 NOTE_INSN_DELETED)

(note 429 425 430 51 NOTE_INSN_DELETED)

(note 430 429 423 51 NOTE_INSN_DELETED)

(insn 423 430 424 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 1 r1 [335])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)
        (nil)))

(insn 424 423 427 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [orig:337 elf_hwcap ] [337])
        (mem/c/i:SI (reg/f:SI 1 r1 [335]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 427 424 431 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [339])
        (zero_extract:SI (reg:SI 1 r1 [orig:337 elf_hwcap ] [337])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 431 427 432 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 3 r3 [343])
                (and:SI (eq:SI (reg/v:SI 3 r3 [orig:192 mode ] [192])
                        (const_int 0 [0x0]))
                    (reg:SI 1 r1 [339])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 432 431 433 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [343])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 433 432 434 51 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 454)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 51 -> ( 55 52)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  55 [50.0%] 
;; Succ edge  52 [50.0%]  (fallthru)

;; Start of basic block ( 49 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  49 [50.0%] 
;; Pred edge  51 [50.0%]  (fallthru)
(code_label 434 433 435 52 49 "" [1 uses])

(note 435 434 440 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(note 440 435 436 52 NOTE_INSN_DELETED)

(insn 436 440 437 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:185 (set (reg:SI 2 r2 [orig:193 D.25869 ] [193])
        (and:SI (reg:SI 2 r2 [orig:194 D.25862 ] [194])
            (const_int -208 [0xffffffffffffff30]))) 67 {*arm_andsi3_insn} (nil))

(insn 437 436 705 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:185 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 2 r2 [orig:193 D.25869 ] [193])) 167 {*arm_movsi_insn} (nil))

(insn 705 437 439 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (reg/f:SI 3 r3 [344])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)
        (nil)))

(insn 439 705 441 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (reg:SI 3 r3 [orig:346 elf_hwcap ] [346])
        (mem/c/i:SI (reg/f:SI 3 r3 [344]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 441 439 442 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [orig:346 elf_hwcap ] [346])
                        (const_int 8 [0x8]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [345])
                (and:SI (reg:SI 3 r3 [orig:346 elf_hwcap ] [346])
                    (const_int 8 [0x8])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 442 441 443 52 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 447)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 52 -> ( 54 53)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  54 [50.0%] 
;; Succ edge  53 [50.0%]  (fallthru)

;; Start of basic block ( 52) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  52 [50.0%]  (fallthru)
(note 443 442 444 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 444 443 656 53 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:189 (set (reg:SI 3 r3 [orig:191 D.25871 ] [191])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 656 444 657 53 (set (pc)
        (label_ref 457)) 242 {*arm_jump} (nil))
;; End of basic block 53 -> ( 56)
;; lr  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 657 656 447)

;; Start of basic block ( 52) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  52 [50.0%] 
(code_label 447 657 448 54 51 "" [1 uses])

(note 448 447 449 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 449 448 450 54 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:187 (set (reg:SI 2 r2 [347])
        (ior:SI (reg:SI 2 r2 [orig:193 D.25869 ] [193])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 450 449 658 54 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:187 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 2 r2 [347])) 167 {*arm_movsi_insn} (nil))

(jump_insn 658 450 659 54 (set (pc)
        (label_ref 457)) 242 {*arm_jump} (nil))
;; End of basic block 54 -> ( 56)
;; lr  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 659 658 454)

;; Start of basic block ( 50 51) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  50 [28.0%] 
;; Pred edge  51 [50.0%] 
(code_label 454 659 455 55 50 "" [2 uses])

(note 455 454 456 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 456 455 457 55 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:177 (set (reg:SI 3 r3 [orig:191 D.25871 ] [191])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 55 -> ( 56)
;; lr  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  56 [100.0%]  (fallthru)

;; Start of basic block ( 55 53 54) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 3 [r3]

;; Pred edge  55 [100.0%]  (fallthru)
;; Pred edge  53 [100.0%] 
;; Pred edge  54 [100.0%] 
(code_label 457 456 458 56 52 "" [2 uses])

(note 458 457 460 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(note 460 458 459 56 NOTE_INSN_DELETED)

(insn 459 460 461 56 arch/arm/kernel/signal.c:630 (set (reg:SI 3 r3 [348])
        (xor:SI (reg:SI 3 r3 [orig:191 D.25871 ] [191])
            (const_int 1 [0x1]))) 96 {*arm_xorsi3} (nil))

(insn 461 459 462 56 arch/arm/kernel/signal.c:630 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 3 r3 [348])
                        (reg/v:SI 0 r0 [orig:148 ret ] [148]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 3 r3))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 462 461 463 56 arch/arm/kernel/signal.c:630 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 469)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56 -> ( 57 58)
;; lr  out 	 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  57 [50.0%]  (fallthru)
;; Succ edge  58 [50.0%] 

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  56 [50.0%]  (fallthru)
(note 463 462 464 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 464 463 465 57 arch/arm/kernel/signal.c:633 (set (reg:SI 0 r0)
        (reg/v:SI 8 r8 [orig:207 signr ] [207])) 167 {*arm_movsi_insn} (nil))

(insn 465 464 466 57 arch/arm/kernel/signal.c:633 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 466 465 660 57 arch/arm/kernel/signal.c:633 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sigsegv") [flags 0x41] <function_decl 0x10f06780 force_sigsegv>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 660 466 661 57 (set (pc)
        (label_ref 616)) 242 {*arm_jump} (nil))
;; End of basic block 57 -> ( 72)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  72 [100.0%] 

(barrier 661 660 469)

;; Start of basic block ( 56) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  56 [50.0%] 
(code_label 469 661 470 58 53 "" [1 uses])

(note 470 469 473 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 473 470 485 58 NOTE_INSN_DELETED)

(note 485 473 471 58 NOTE_INSN_DELETED)

(insn 471 485 472 58 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [orig:351 <variable>.sighand ] [351])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])
        (nil)))

(insn 472 471 474 58 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [352])
        (plus:SI (reg/f:SI 0 r0 [orig:351 <variable>.sighand ] [351])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 474 472 475 58 include/linux/spinlock.h:310 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [352])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 475 474 476 58 include/linux/spinlock.h:310 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irq") [flags 0x41] <function_decl 0x10b48280 _raw_spin_lock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 476 475 480 58 include/linux/signal.h:123 discrim 3 (set (reg:SI 1 r1 [orig:353 <variable>.blocked.sig+4 ] [353])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
        (nil)))

(insn 480 476 704 58 include/linux/signal.h:123 discrim 2 (set (reg:SI 2 r2 [orig:356 <variable>.blocked.sig ] [356])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
        (nil)))

(insn 704 480 478 58 include/linux/signal.h:123 discrim 3 (set (reg:SI 3 r3 [orig:354 ka.sa.sa_mask.sig+4 ] [354])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 160 [0xa0])) [0 ka.sa.sa_mask.sig+4 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 160 [0xa0])) [0 ka.sa.sa_mask.sig+4 S4 A64])
        (nil)))

(insn 478 704 479 58 include/linux/signal.h:123 discrim 3 (set (reg:SI 3 r3 [355])
        (ior:SI (reg:SI 1 r1 [orig:353 <variable>.blocked.sig+4 ] [353])
            (reg:SI 3 r3 [orig:354 ka.sa.sa_mask.sig+4 ] [354]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
        (nil)))

(insn 479 478 481 58 include/linux/signal.h:123 discrim 3 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
        (reg:SI 3 r3 [355])) 167 {*arm_movsi_insn} (nil))

(insn 481 479 482 58 include/linux/signal.h:123 discrim 2 (set (reg:SI 3 r3 [orig:357 ka.sa.sa_mask.sig ] [357])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 156 [0x9c])) [0 ka.sa.sa_mask.sig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 156 [0x9c])) [0 ka.sa.sa_mask.sig+0 S4 A32])
        (nil)))

(insn 482 481 483 58 include/linux/signal.h:123 discrim 2 (set (reg:SI 3 r3 [358])
        (ior:SI (reg:SI 2 r2 [orig:356 <variable>.blocked.sig ] [356])
            (reg:SI 3 r3 [orig:357 ka.sa.sa_mask.sig ] [357]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
        (nil)))

(insn 483 482 484 58 include/linux/signal.h:123 discrim 2 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
        (reg:SI 3 r3 [358])) 167 {*arm_movsi_insn} (nil))

(insn 484 483 486 58 arch/arm/kernel/signal.c:643 (set (reg:SI 3 r3 [orig:360 ka.sa.sa_flags ] [360])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 148 [0x94])) [0 ka.sa.sa_flags+0 S4 A32])
        (nil)))

(insn 486 484 487 58 arch/arm/kernel/signal.c:643 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:360 ka.sa.sa_flags ] [360])
                (const_int 1 [0x1])
                (const_int 30 [0x1e]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 487 486 488 58 arch/arm/kernel/signal.c:643 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 499)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 58 -> ( 59 60)
;; lr  out 	 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  59 [50.0%]  (fallthru)
;; Succ edge  60 [50.0%] 

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 8 [r8]
;; live  in  	 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 8 [r8]
;; live  kill	

;; Pred edge  58 [50.0%]  (fallthru)
(note 488 487 495 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(note 495 488 489 59 NOTE_INSN_DELETED)

(insn 489 495 493 59 include/linux/signal.h:44 (set (reg:SI 8 r8 [orig:197 D.25851 ] [197])
        (plus:SI (reg/v:SI 8 r8 [orig:207 signr ] [207])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 493 489 490 59 include/linux/signal.h:48 (set (reg:SI 3 r3 [363])
        (and:SI (reg:SI 8 r8 [orig:197 D.25851 ] [197])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 490 493 491 59 include/linux/signal.h:48 (set (reg:SI 8 r8 [orig:196 D.25853 ] [196])
        (lshiftrt:SI (reg:SI 8 r8 [orig:197 D.25851 ] [197])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 491 490 496 59 include/linux/signal.h:48 (set (reg:SI 8 r8 [361])
        (plus:SI (reg:SI 8 r8 [orig:196 D.25853 ] [196])
            (const_int 236 [0xec]))) 4 {*arm_addsi3} (nil))

(insn 496 491 703 59 include/linux/signal.h:48 (set (reg:SI 2 r2 [366])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])
        (nil)))

(insn 703 496 497 59 include/linux/signal.h:48 (set (reg:SI 1 r1 [365])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 497 703 498 59 include/linux/signal.h:48 (set (reg:SI 3 r3 [367])
        (ior:SI (ashift:SI (reg:SI 1 r1 [365])
                (reg:SI 3 r3 [363]))
            (reg:SI 2 r2 [366]))) 270 {*arith_shiftsi} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])
        (nil)))

(insn 498 497 499 59 include/linux/signal.h:48 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 8 r8 [361])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])) [0 <variable>.blocked.sig S4 A32])
        (reg:SI 3 r3 [367])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 59 -> ( 60)
;; lr  out 	 6 [r6] 13 [sp]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  60 [100.0%]  (fallthru)

;; Start of basic block ( 58 59) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  58 [50.0%] 
;; Pred edge  59 [100.0%]  (fallthru)
(code_label 499 498 500 60 54 "" [1 uses])

(note 500 499 504 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(note 504 500 508 60 NOTE_INSN_DELETED)

(note 508 504 511 60 NOTE_INSN_DELETED)

(note 511 508 501 60 NOTE_INSN_DELETED)

(call_insn 501 511 502 60 arch/arm/kernel/signal.c:645 (parallel [
            (call (mem:SI (symbol_ref:SI ("recalc_sigpending") [flags 0x41] <function_decl 0x10f2c680 recalc_sigpending>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 502 501 503 60 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [orig:369 <variable>.sighand ] [369])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:147 tsk ] [147])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 503 502 505 60 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [370])
        (plus:SI (reg/f:SI 0 r0 [orig:369 <variable>.sighand ] [369])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 505 503 506 60 include/linux/spinlock.h:335 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [370])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 506 505 718 60 include/linux/spinlock.h:335 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irq") [flags 0x41] <function_decl 0x10b48600 _raw_spin_unlock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 718 506 678 60 include/linux/thread_info.h:84 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 678 718 679 60 include/linux/thread_info.h:84 (set (reg/f:SI 1 r1 [orig:140 D.26039 ] [140])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 679 678 510 60 include/linux/thread_info.h:84 (set (reg/f:SI 1 r1 [orig:140 D.26039 ] [140])
        (and:SI (reg/f:SI 1 r1 [orig:140 D.26039 ] [140])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 510 679 512 60 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:141 D.26034 ] [141])
        (mem/v:SI (reg/f:SI 1 r1 [orig:140 D.26039 ] [140]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 512 510 513 60 arch/arm/kernel/signal.c:737 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:141 D.26034 ] [141])
                (const_int 1 [0x1])
                (const_int 20 [0x14]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 513 512 514 60 arch/arm/kernel/signal.c:737 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 616)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 60 -> ( 61 72)
;; lr  out 	 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 13 [sp]


;; Succ edge  61 [29.0%]  (fallthru)
;; Succ edge  72 [71.0%] 

;; Start of basic block ( 60) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  60 [29.0%]  (fallthru)
(note 514 513 518 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 518 514 520 61 include/linux/thread_info.h:69 (set (reg:SI 0 r0)
        (const_int 20 [0x14])) 167 {*arm_movsi_insn} (nil))

(call_insn 520 518 662 61 include/linux/thread_info.h:69 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x109cef00 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 662 520 663 61 (set (pc)
        (label_ref 616)) 242 {*arm_jump} (nil))
;; End of basic block 61 -> ( 72)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  72 [100.0%] 

(barrier 663 662 523)

;; Start of basic block ( 12 11) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [27.0%] 
;; Pred edge  11 [100.0%] 
(code_label 523 663 524 62 30 ("no_signal") [2 uses])

(note 524 523 525 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 525 524 526 62 arch/arm/kernel/signal.c:744 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:214 syscall ] [214])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 526 525 527 62 arch/arm/kernel/signal.c:744 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 616)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 62 -> ( 63 72)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  63 [61.0%]  (fallthru)
;; Succ edge  72 [39.0%] 

;; Start of basic block ( 62) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  62 [61.0%]  (fallthru)
(note 527 526 528 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 528 527 529 63 arch/arm/kernel/signal.c:750 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:210 retval ] [210])
            (const_int -516 [0xfffffffffffffdfc]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 529 528 530 63 arch/arm/kernel/signal.c:750 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 554)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 63 -> ( 64 68)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  64 [28.0%]  (fallthru)
;; Succ edge  68 [72.0%] 

;; Start of basic block ( 63) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  63 [28.0%]  (fallthru)
(note 530 529 531 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 531 530 532 64 arch/arm/kernel/signal.c:751 (set (reg:SI 3 r3 [orig:375 <variable>.uregs+60 ] [375])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 532 531 533 64 arch/arm/kernel/signal.c:751 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:375 <variable>.uregs+60 ] [375])
            (reg/v:SI 5 r5 [orig:209 continue_addr ] [209]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 533 532 534 64 arch/arm/kernel/signal.c:751 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 554)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 64 -> ( 65 68)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  65 [28.0%]  (fallthru)
;; Succ edge  68 [72.0%] 

;; Start of basic block ( 64) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  64 [28.0%]  (fallthru)
(note 534 533 536 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(note 536 534 535 65 NOTE_INSN_DELETED)

(insn 535 536 537 65 arch/arm/kernel/signal.c:752 (set (reg:SI 3 r3 [orig:377 <variable>.uregs+64 ] [377])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 537 535 538 65 arch/arm/kernel/signal.c:752 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [orig:377 <variable>.uregs+64 ] [377])
                        (const_int 32 [0x20]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [376])
                (and:SI (reg:SI 3 r3 [orig:377 <variable>.uregs+64 ] [377])
                    (const_int 32 [0x20])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 538 537 539 65 arch/arm/kernel/signal.c:752 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 547)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 65 -> ( 66 67)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  66 [50.0%]  (fallthru)
;; Succ edge  67 [50.0%] 

;; Start of basic block ( 65) -> 66
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  65 [50.0%]  (fallthru)
(note 539 538 543 66 [bb 66] NOTE_INSN_BASIC_BLOCK)

(insn 543 539 544 66 arch/arm/kernel/signal.c:754 (set (reg:SI 5 r5 [380])
        (plus:SI (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 544 543 540 66 arch/arm/kernel/signal.c:754 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg:SI 5 r5 [380])) 167 {*arm_movsi_insn} (nil))

(insn 540 544 541 66 arch/arm/kernel/signal.c:753 (set (reg:SI 3 r3 [378])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 541 540 664 66 arch/arm/kernel/signal.c:753 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
        (reg:SI 3 r3 [378])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 664 541 665 66 (set (pc)
        (label_ref 554)) 242 {*arm_jump} (nil))
;; End of basic block 66 -> ( 68)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  68 [100.0%] 

(barrier 665 664 547)

;; Start of basic block ( 65) -> 67
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  65 [50.0%] 
(code_label 547 665 548 67 56 "" [1 uses])

(note 548 547 550 67 [bb 67] NOTE_INSN_BASIC_BLOCK)

(insn 550 548 552 67 arch/arm/kernel/signal.c:757 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
        (reg:SI 3 r3 [376])) 167 {*arm_movsi_insn} (nil))

(insn 552 550 553 67 arch/arm/kernel/signal.c:758 (set (reg:SI 5 r5 [383])
        (plus:SI (reg/v:SI 5 r5 [orig:209 continue_addr ] [209])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 553 552 554 67 arch/arm/kernel/signal.c:758 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:213 regs ] [213])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg:SI 5 r5 [383])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 67 -> ( 68)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  68 [100.0%]  (fallthru)

;; Start of basic block ( 64 63 67 66) -> 68
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  64 [72.0%] 
;; Pred edge  63 [72.0%] 
;; Pred edge  67 [100.0%]  (fallthru)
;; Pred edge  66 [100.0%] 
(code_label 554 553 555 68 55 "" [3 uses])

(note 555 554 557 68 [bb 68] NOTE_INSN_BASIC_BLOCK)

(note 557 555 560 68 NOTE_INSN_DELETED)

(note 560 557 719 68 NOTE_INSN_DELETED)

(insn 719 560 676 68 include/linux/thread_info.h:84 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 676 719 677 68 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:136 D.26069 ] [136])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 677 676 559 68 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:136 D.26069 ] [136])
        (and:SI (reg/f:SI 4 r4 [orig:136 D.26069 ] [136])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 559 677 561 68 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:137 D.26064 ] [137])
        (mem/v:SI (reg/f:SI 4 r4 [orig:136 D.26069 ] [136]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 561 559 562 68 arch/arm/kernel/signal.c:778 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:137 D.26064 ] [137])
                (const_int 1 [0x1])
                (const_int 20 [0x14]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 562 561 563 68 arch/arm/kernel/signal.c:778 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 616)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 68 -> ( 69 72)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  69 [39.0%]  (fallthru)
;; Succ edge  72 [61.0%] 

;; Start of basic block ( 68) -> 69
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  68 [39.0%]  (fallthru)
(note 563 562 574 69 [bb 69] NOTE_INSN_BASIC_BLOCK)

(note 574 563 568 69 NOTE_INSN_DELETED)

(insn 568 574 567 69 include/linux/thread_info.h:69 (set (reg:SI 1 r1)
        (reg/f:SI 4 r4 [orig:136 D.26069 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 567 568 569 69 include/linux/thread_info.h:69 (set (reg:SI 0 r0)
        (const_int 20 [0x14])) 167 {*arm_movsi_insn} (nil))

(call_insn 569 567 573 69 include/linux/thread_info.h:69 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x109cef00 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 573 569 577 69 arch/arm/kernel/signal.c:780 (set (reg/f:SI 1 r1 [orig:391 <variable>.task ] [391])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:136 D.26069 ] [136])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 577 573 575 69 arch/arm/kernel/signal.c:780 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 575 577 576 69 arch/arm/kernel/signal.c:780 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(insn 576 575 578 69 arch/arm/kernel/signal.c:780 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 1 r1 [orig:391 <variable>.task ] [391])
            (const_int 960 [0x3c0]))) 4 {*arm_addsi3} (nil))

(call_insn 578 576 666 69 arch/arm/kernel/signal.c:780 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sigprocmask") [flags 0x41] <function_decl 0x10a8d480 sigprocmask>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 666 578 667 69 (set (pc)
        (label_ref 616)) 242 {*arm_jump} (nil))
;; End of basic block 69 -> ( 72)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  72 [100.0%] 

(barrier 667 666 583)

;; Start of basic block ( 29 30) -> 70
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 5 [r5] 12 [ip]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 5 [r5] 12 [ip]
;; live  kill	

;; Pred edge  29 [50.0%] 
;; Pred edge  30 [50.0%] 
(code_label 583 667 584 70 39 "" [2 uses])

(note 584 583 587 70 [bb 70] NOTE_INSN_BASIC_BLOCK)

(note 587 584 720 70 NOTE_INSN_DELETED)

(insn 720 587 674 70 arch/arm/kernel/signal.c:449 (set (reg:SI 12 ip)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 674 720 675 70 arch/arm/kernel/signal.c:449 (set (reg:SI 3 r3 [392])
        (and:SI (reg:SI 12 ip)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 675 674 589 70 arch/arm/kernel/signal.c:449 (set (reg:SI 3 r3 [392])
        (and:SI (reg:SI 3 r3 [392])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 589 675 594 70 arch/arm/kernel/signal.c:449 (set (reg/f:SI 3 r3 [orig:394 <variable>.task ] [394])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [392])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 594 589 593 70 arch/arm/kernel/signal.c:449 (set (reg:SI 2 r2 [orig:399 <variable>.sas_ss_sp ] [399])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:394 <variable>.task ] [394])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 593 594 595 70 arch/arm/kernel/signal.c:449 (set (reg:SI 5 r5 [orig:398 <variable>.sas_ss_size ] [398])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:394 <variable>.task ] [394])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 595 593 668 70 arch/arm/kernel/signal.c:449 (set (reg/v:SI 5 r5 [orig:158 sp ] [158])
        (plus:SI (reg:SI 5 r5 [orig:398 <variable>.sas_ss_size ] [398])
            (reg:SI 2 r2 [orig:399 <variable>.sas_ss_sp ] [399]))) 4 {*arm_addsi3} (nil))

(jump_insn 668 595 669 70 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 70 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  31 [100.0%] 

(barrier 669 668 598)

;; Start of basic block ( 42 43) -> 71
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  42 [50.0%] 
;; Pred edge  43 [50.0%] 
(code_label 598 669 599 71 47 "" [2 uses])

(note 599 598 602 71 [bb 71] NOTE_INSN_BASIC_BLOCK)

(note 602 599 721 71 NOTE_INSN_DELETED)

(insn 721 602 672 71 arch/arm/kernel/signal.c:449 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 672 721 673 71 arch/arm/kernel/signal.c:449 (set (reg:SI 3 r3 [400])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 673 672 604 71 arch/arm/kernel/signal.c:449 (set (reg:SI 3 r3 [400])
        (and:SI (reg:SI 3 r3 [400])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 604 673 609 71 arch/arm/kernel/signal.c:449 (set (reg/f:SI 3 r3 [orig:402 <variable>.task ] [402])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [400])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 609 604 608 71 arch/arm/kernel/signal.c:449 (set (reg:SI 2 r2 [orig:407 <variable>.sas_ss_sp ] [407])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:402 <variable>.task ] [402])
                (const_int 984 [0x3d8])) [0 <variable>.sas_ss_sp+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 608 609 610 71 arch/arm/kernel/signal.c:449 (set (reg:SI 5 r5 [orig:406 <variable>.sas_ss_size ] [406])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:402 <variable>.task ] [402])
                (const_int 988 [0x3dc])) [0 <variable>.sas_ss_size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 610 608 670 71 arch/arm/kernel/signal.c:449 (set (reg/v:SI 5 r5 [orig:177 sp ] [177])
        (plus:SI (reg:SI 5 r5 [orig:406 <variable>.sas_ss_size ] [406])
            (reg:SI 2 r2 [orig:407 <variable>.sas_ss_sp ] [407]))) 4 {*arm_addsi3} (nil))

(jump_insn 670 610 671 71 (set (pc)
        (label_ref 362)) 242 {*arm_jump} (nil))
;; End of basic block 71 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 671 670 616)

;; Start of basic block ( 61 2 68 60 57 62 69) -> 72
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  61 [100.0%] 
;; Pred edge  2 [39.0%] 
;; Pred edge  68 [61.0%] 
;; Pred edge  60 [71.0%] 
;; Pred edge  57 [100.0%] 
;; Pred edge  62 [39.0%] 
;; Pred edge  69 [100.0%] 
(code_label 616 671 623 72 57 "" [7 uses])

(note 623 616 702 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 72 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 702 623 706 NOTE_INSN_DELETED)

(note 706 702 0 NOTE_INSN_DELETED)


;; Function do_notify_resume (do_notify_resume)[0:1453]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 26(l0): point = 1
   Insn 38(l0): point = 3
   Insn 24(l0): point = 5
   Insn 37(l0): point = 7
   Insn 19(l0): point = 10
   Insn 18(l0): point = 12
   Insn 14(l0): point = 15
   Insn 13(l0): point = 17
   Insn 10(l0): point = 20
   Insn 9(l0): point = 22
   Insn 4(l0): point = 24
   Insn 3(l0): point = 26
 a0(r135): [13..26]
 a1(r136): [18..24]
Compressing live ranges: from 29 to 4 - 13%
Ranges after the compression:
 a0(r135): [0..3]
 a1(r136): [1..2]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r135,l0) conflicts: a1(r136,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r136,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=7, points=4
    allocnos=2, copies=0, conflicts=2, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r135 1r136
    modified regnos: 135 136
    border:
    Pressure: GENERAL_REGS=4
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
      Pushing a1(r136,l0)
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 4
      Popping a1(r136,l0)  -- assign reg 2
Disposition:
    0:r135 l0     4    1:r136 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 135
insn=4, live_throughout: 0, 13, 14, 135, dead_or_set: 2, 136
insn=9, live_throughout: 0, 13, 14, 135, 136, dead_or_set: 
insn=10, live_throughout: 0, 13, 14, 135, 136, dead_or_set: 
insn=13, live_throughout: 0, 13, 135, dead_or_set: 1, 136
insn=14, live_throughout: 13, 135, dead_or_set: 0, 1, 14
insn=15, live_throughout: 13, 14, 135, dead_or_set: 
insn=18, live_throughout: 13, 14, dead_or_set: 135
insn=19, live_throughout: 13, 14, dead_or_set: 
insn=37, live_throughout: 13, 14, dead_or_set: 1
insn=24, live_throughout: 1, 13, 14, dead_or_set: 0
insn=38, live_throughout: 0, 13, 14, dead_or_set: 1
insn=26, live_throughout: 13, 14, dead_or_set: 0, 1
insn=33, live_throughout: 13, 14, dead_or_set: 
changing reg in insn 3
changing reg in insn 18
changing reg in insn 9
changing reg in insn 4
changing reg in insn 13
Spilling for insn 37.
Using reg 3 for reload 0
Spilling for insn 37.
Using reg 3 for reload 0

Reloads for insn # 37
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 4.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


do_notify_resume

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,2u} r1={6d,4u} r2={3d,1u} r3={4d,1u} r4={1d,2u} r12={3d} r13={1d,9u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 270{248d,22u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 3 2 NOTE_INSN_DELETED)

(insn 3 8 9 2 arch/arm/kernel/signal.c:787 (set (reg/v:SI 4 r4 [orig:135 thread_flags ] [135])
        (reg:SI 1 r1 [ thread_flags ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 10 2 arch/arm/kernel/signal.c:788 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:135 thread_flags ] [135])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/signal.c:788 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [29.0%]  (fallthru)
;; Succ edge  4 [71.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 11 14 3 arch/arm/kernel/signal.c:789 (set (reg:SI 1 r1)
        (reg/v:SI 2 r2 [orig:136 syscall ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 13 15 3 arch/arm/kernel/signal.c:789 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_signal") [flags 0x3] <function_decl 0x1140ac80 do_signal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [71.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 15 14 16 4 62 "" [1 uses])

(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 4 NOTE_INSN_DELETED)

(insn 18 17 19 4 arch/arm/kernel/signal.c:791 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:135 thread_flags ] [135])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 19 18 20 4 arch/arm/kernel/signal.c:791 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 20 19 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 22 20 23 5 NOTE_INSN_DELETED)

(note 23 22 41 5 NOTE_INSN_DELETED)

(insn 41 23 37 5 include/linux/thread_info.h:69 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 37 41 24 5 include/linux/thread_info.h:69 (set (reg:SI 1 r1)
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 24 37 38 5 include/linux/thread_info.h:69 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(insn 38 24 26 5 include/linux/thread_info.h:69 (set (reg:SI 1 r1)
        (and:SI (reg:SI 1 r1)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(call_insn/j 26 38 27 5 include/linux/thread_info.h:69 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x109cef00 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 33)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [61.0%] 
(code_label 33 27 36 6 64 "" [1 uses])

(note 36 33 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 39 36 40 NOTE_INSN_DELETED)

(note 40 39 0 NOTE_INSN_DELETED)


;; Function restore_sigframe (restore_sigframe)[0:1443]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 248.
verify found no changes in insn with uid = 248.
deleting insn with uid = 129.
scanning new insn with uid = 249.
rescanning insn with uid = 249.
deleting insn with uid = 249.
deleting insn with uid = 18.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 35 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)

Pass 0 for finding allocno costs

    a4 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r237,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a4(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:260000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r246,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:360000
  a21(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a23(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:200000
  a25(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a36(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r181,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a73(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a79(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r249: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a4(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:260000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r246,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:360000
  a21(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a23(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:200000
  a25(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a36(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r181,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a73(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a79(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 228(l0): point = 0
   Insn 222(l0): point = 2
   Insn 215(l0): point = 5
   Insn 238(l0): point = 8
   Insn 210(l0): point = 10
   Insn 209(l0): point = 12
   Insn 207(l0): point = 15
   Insn 205(l0): point = 17
   Insn 206(l0): point = 19
   Insn 204(l0): point = 21
   Insn 203(l0): point = 24
   Insn 202(l0): point = 26
   Insn 201(l0): point = 28
   Insn 199(l0): point = 31
   Insn 198(l0): point = 33
   Insn 200(l0): point = 35
   Insn 197(l0): point = 37
   Insn 196(l0): point = 39
   Insn 195(l0): point = 42
   Insn 194(l0): point = 44
   Insn 193(l0): point = 46
   Insn 246(l0): point = 49
   Insn 192(l0): point = 51
   Insn 189(l0): point = 53
   Insn 186(l0): point = 55
   Insn 188(l0): point = 57
   Insn 241(l0): point = 59
   Insn 187(l0): point = 61
   Insn 240(l0): point = 63
   Insn 236(l0): point = 66
   Insn 177(l0): point = 68
   Insn 175(l0): point = 71
   Insn 174(l0): point = 73
   Insn 167(l0): point = 75
   Insn 162(l0): point = 78
   Insn 161(l0): point = 80
   Insn 160(l0): point = 82
   Insn 159(l0): point = 85
   Insn 158(l0): point = 87
   Insn 245(l0): point = 90
   Insn 155(l0): point = 92
   Insn 153(l0): point = 95
   Insn 152(l0): point = 97
   Insn 150(l0): point = 99
   Insn 147(l0): point = 102
   Insn 234(l0): point = 105
   Insn 142(l0): point = 107
   Insn 141(l0): point = 109
   Insn 140(l0): point = 111
   Insn 232(l0): point = 114
   Insn 135(l0): point = 116
   Insn 133(l0): point = 119
   Insn 132(l0): point = 121
   Insn 130(l0): point = 123
   Insn 248(l0): point = 125
   Insn 128(l0): point = 127
   Insn 127(l0): point = 129
   Insn 124(l0): point = 132
   Insn 123(l0): point = 134
   Insn 122(l0): point = 136
   Insn 118(l0): point = 138
   Insn 115(l0): point = 140
   Insn 114(l0): point = 142
   Insn 109(l0): point = 145
   Insn 108(l0): point = 147
   Insn 107(l0): point = 149
   Insn 105(l0): point = 152
   Insn 102(l0): point = 154
   Insn 101(l0): point = 156
   Insn 104(l0): point = 158
   Insn 100(l0): point = 160
   Insn 99(l0): point = 163
   Insn 98(l0): point = 165
   Insn 97(l0): point = 167
   Insn 96(l0): point = 170
   Insn 95(l0): point = 172
   Insn 94(l0): point = 174
   Insn 93(l0): point = 177
   Insn 92(l0): point = 179
   Insn 91(l0): point = 181
   Insn 90(l0): point = 184
   Insn 89(l0): point = 186
   Insn 88(l0): point = 188
   Insn 87(l0): point = 191
   Insn 86(l0): point = 193
   Insn 85(l0): point = 195
   Insn 84(l0): point = 198
   Insn 83(l0): point = 200
   Insn 82(l0): point = 202
   Insn 81(l0): point = 205
   Insn 80(l0): point = 207
   Insn 79(l0): point = 209
   Insn 78(l0): point = 212
   Insn 77(l0): point = 214
   Insn 76(l0): point = 216
   Insn 75(l0): point = 219
   Insn 74(l0): point = 221
   Insn 73(l0): point = 223
   Insn 72(l0): point = 226
   Insn 71(l0): point = 228
   Insn 70(l0): point = 230
   Insn 69(l0): point = 233
   Insn 68(l0): point = 235
   Insn 67(l0): point = 237
   Insn 66(l0): point = 240
   Insn 65(l0): point = 242
   Insn 64(l0): point = 244
   Insn 63(l0): point = 247
   Insn 62(l0): point = 249
   Insn 61(l0): point = 251
   Insn 60(l0): point = 254
   Insn 59(l0): point = 256
   Insn 58(l0): point = 258
   Insn 57(l0): point = 261
   Insn 56(l0): point = 263
   Insn 55(l0): point = 265
   Insn 54(l0): point = 268
   Insn 53(l0): point = 270
   Insn 52(l0): point = 272
   Insn 51(l0): point = 275
   Insn 48(l0): point = 278
   Insn 47(l0): point = 280
   Insn 45(l0): point = 282
   Insn 44(l0): point = 284
   Insn 43(l0): point = 286
   Insn 39(l0): point = 288
   Insn 38(l0): point = 290
   Insn 35(l0): point = 292
   Insn 37(l0): point = 294
   Insn 34(l0): point = 296
   Insn 30(l0): point = 298
   Insn 29(l0): point = 300
   Insn 27(l0): point = 302
   Insn 26(l0): point = 304
   Insn 21(l0): point = 306
   Insn 20(l0): point = 308
   Insn 25(l0): point = 310
   Insn 19(l0): point = 312
   Insn 249(l0): point = 314
   Insn 244(l0): point = 316
   Insn 243(l0): point = 318
   Insn 16(l0): point = 321
   Insn 15(l0): point = 323
   Insn 12(l0): point = 325
   Insn 11(l0): point = 327
   Insn 9(l0): point = 329
   Insn 10(l0): point = 331
   Insn 2(l0): point = 333
   Insn 7(l0): point = 335
   Insn 3(l0): point = 337
 a0(r134): [71..97] [8..68] [3..5]
 a1(r136): [13..63]
 a2(r144): [18..22]
 a3(r133): [20..49]
 a4(r249): [22..24]
 a5(r175): [71..337] [25..65]
 a6(r143): [27..29]
 a7(r248): [29..35]
 a8(r247): [32..33]
 a9(r137): [34..37]
 a10(r142): [38..40]
 a11(r246): [40..42]
 a12(r141): [45..47]
 a13(r245): [47..51]
 a14(r237): [74..75]
 a15(r139): [74..88]
 a16(r140): [74..83]
 a17(r138): [81..90]
 a18(r233): [83..85]
 a19(r171): [88..92]
 a20(r170): [98..323]
 a21(r231): [98..99]
 a22(r149): [114..116] [105..107] [100..102]
 a23(r228): [119..121] [108..113]
 a24(r174): [119..333] [110..113]
 a25(r230): [110..111]
 a26(r147): [119..129] [112..113]
 a27(r229): [122..123]
 a28(r227): [124..125]
 a29(r146): [130..156]
 a30(r226): [135..136]
 a31(r222): [137..138]
 a32(r148): [137..149]
 a33(r220): [139..140]
 a34(r218): [141..142]
 a35(r153): [150..161]
 a36(r214): [161..163]
 a37(r154): [166..168]
 a38(r213): [168..170]
 a39(r155): [173..175]
 a40(r212): [175..177]
 a41(r156): [180..182]
 a42(r211): [182..184]
 a43(r157): [187..189]
 a44(r210): [189..191]
 a45(r158): [194..196]
 a46(r209): [196..198]
 a47(r159): [201..203]
 a48(r208): [203..205]
 a49(r160): [208..210]
 a50(r207): [210..212]
 a51(r161): [215..217]
 a52(r206): [217..219]
 a53(r162): [222..224]
 a54(r205): [224..226]
 a55(r163): [229..231]
 a56(r204): [231..233]
 a57(r164): [236..238]
 a58(r203): [238..240]
 a59(r165): [243..245]
 a60(r202): [245..247]
 a61(r166): [250..252]
 a62(r201): [252..254]
 a63(r167): [257..259]
 a64(r200): [259..261]
 a65(r168): [264..266]
 a66(r199): [266..268]
 a67(r169): [271..273]
 a68(r198): [273..275]
 a69(r197): [281..282]
 a70(r196): [283..284]
 a71(r194): [285..286]
 a72(r181): [287..318]
 a73(r190): [290..292]
 a74(r189): [293..296]
 a75(r176): [295..335]
 a76(r186): [301..302]
 a77(r185): [303..304]
 a78(r183): [305..310]
 a79(r179): [307..308]
 a80(r180): [309..312]
 a81(r178): [313..314]
Compressing live ranges: from 340 to 147 - 43%
Ranges after the compression:
 a0(r134): [26..35] [2..25] [0..1]
 a1(r136): [3..23]
 a2(r144): [4..6]
 a3(r133): [5..21]
 a4(r249): [6..7]
 a5(r175): [26..146] [8..24]
 a6(r143): [9..10]
 a7(r248): [10..14]
 a8(r247): [11..12]
 a9(r137): [13..15]
 a10(r142): [16..17]
 a11(r246): [17..18]
 a12(r141): [19..20]
 a13(r245): [20..22]
 a14(r237): [27..28]
 a15(r139): [27..32]
 a16(r140): [27..30]
 a17(r138): [29..33]
 a18(r233): [30..31]
 a19(r171): [32..34]
 a20(r170): [36..143]
 a21(r231): [36..37]
 a22(r149): [47..48] [40..41] [38..39]
 a23(r228): [49..50] [42..46]
 a24(r174): [49..144] [43..46]
 a25(r230): [43..44]
 a26(r147): [49..55] [45..46]
 a27(r229): [51..52]
 a28(r227): [53..54]
 a29(r146): [56..67]
 a30(r226): [57..58]
 a31(r222): [59..60]
 a32(r148): [59..65]
 a33(r220): [61..62]
 a34(r218): [63..64]
 a35(r153): [66..68]
 a36(r214): [68..69]
 a37(r154): [70..71]
 a38(r213): [71..72]
 a39(r155): [73..74]
 a40(r212): [74..75]
 a41(r156): [76..77]
 a42(r211): [77..78]
 a43(r157): [79..80]
 a44(r210): [80..81]
 a45(r158): [82..83]
 a46(r209): [83..84]
 a47(r159): [85..86]
 a48(r208): [86..87]
 a49(r160): [88..89]
 a50(r207): [89..90]
 a51(r161): [91..92]
 a52(r206): [92..93]
 a53(r162): [94..95]
 a54(r205): [95..96]
 a55(r163): [97..98]
 a56(r204): [98..99]
 a57(r164): [100..101]
 a58(r203): [101..102]
 a59(r165): [103..104]
 a60(r202): [104..105]
 a61(r166): [106..107]
 a62(r201): [107..108]
 a63(r167): [109..110]
 a64(r200): [110..111]
 a65(r168): [112..113]
 a66(r199): [113..114]
 a67(r169): [115..116]
 a68(r198): [116..117]
 a69(r197): [118..119]
 a70(r196): [120..121]
 a71(r194): [122..123]
 a72(r181): [124..142]
 a73(r190): [125..126]
 a74(r189): [127..129]
 a75(r176): [128..145]
 a76(r186): [130..131]
 a77(r185): [132..133]
 a78(r183): [134..138]
 a79(r179): [135..136]
 a80(r180): [137..139]
 a81(r178): [140..141]
+++Allocating 776 bytes for conflict table (uncompressed size 1312)
;; a0(r134,l0) conflicts: a1(r136,l0) a2(r144,l0) a3(r133,l0) a4(r249,l0) a5(r175,l0) a6(r143,l0) a7(r248,l0) a8(r247,l0) a9(r137,l0) a10(r142,l0) a11(r246,l0) a12(r141,l0) a13(r245,l0) a14(r237,l0) a16(r140,l0) a15(r139,l0) a17(r138,l0) a18(r233,l0) a19(r171,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r136,l0) conflicts: a0(r134,l0) a2(r144,l0) a3(r133,l0) a4(r249,l0) a5(r175,l0) a6(r143,l0) a7(r248,l0) a8(r247,l0) a9(r137,l0) a10(r142,l0) a11(r246,l0) a12(r141,l0) a13(r245,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r144,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a4(r249,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r133,l0) conflicts: a0(r134,l0) a1(r136,l0) a2(r144,l0) a4(r249,l0) a5(r175,l0) a6(r143,l0) a7(r248,l0) a8(r247,l0) a9(r137,l0) a10(r142,l0) a11(r246,l0) a12(r141,l0) a13(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r249,l0) conflicts: a0(r134,l0) a1(r136,l0) a2(r144,l0) a3(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r175,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a6(r143,l0) a7(r248,l0) a8(r247,l0) a9(r137,l0) a10(r142,l0) a11(r246,l0) a12(r141,l0) a13(r245,l0) a14(r237,l0) a16(r140,l0) a15(r139,l0) a17(r138,l0) a18(r233,l0) a19(r171,l0) a21(r231,l0) a20(r170,l0) a22(r149,l0) a23(r228,l0) a25(r230,l0) a24(r174,l0) a26(r147,l0) a27(r229,l0) a28(r227,l0) a29(r146,l0) a30(r226,l0) a31(r222,l0) a32(r148,l0) a33(r220,l0) a34(r218,l0) a35(r153,l0) a36(r214,l0) a37(r154,l0) a38(r213,l0) a39(r155,l0) a40(r212,l0) a41(r156,l0) a42(r211,l0) a43(r157,l0) a44(r210,l0) a45(r158,l0) a46(r209,l0) a47(r159,l0) a48(r208,l0) a49(r160,l0) a50(r207,l0) a51(r161,l0) a52(r206,l0) a53(r162,l0) a54(r205,l0) a55(r163,l0) a56(r204,l0) a57(r164,l0) a58(r203,l0) a59(r165,l0) a60(r202,l0) a61(r166,l0) a62(r201,l0) a63(r167,l0) a64(r200,l0) a65(r168,l0) a66(r199,l0) a67(r169,l0) a68(r198,l0) a69(r197,l0) a70(r196,l0) a71(r194,l0) a72(r181,l0) a73(r190,l0) a74(r189,l0) a75(r176,l0) a76(r186,l0) a77(r185,l0) a78(r183,l0) a79(r179,l0) a80(r180,l0) a81(r178,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r143,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a7(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r248,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a6(r143,l0) a8(r247,l0) a9(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r247,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a7(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r137,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a7(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r142,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a11(r246,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r246,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a10(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r141,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a13(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r245,l0) conflicts: a0(r134,l0) a1(r136,l0) a3(r133,l0) a5(r175,l0) a12(r141,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r237,l0) conflicts: a0(r134,l0) a5(r175,l0) a16(r140,l0) a15(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r139,l0) conflicts: a0(r134,l0) a5(r175,l0) a14(r237,l0) a16(r140,l0) a17(r138,l0) a18(r233,l0) a19(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r140,l0) conflicts: a0(r134,l0) a5(r175,l0) a14(r237,l0) a15(r139,l0) a17(r138,l0) a18(r233,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r138,l0) conflicts: a0(r134,l0) a5(r175,l0) a16(r140,l0) a15(r139,l0) a18(r233,l0) a19(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r233,l0) conflicts: a0(r134,l0) a5(r175,l0) a16(r140,l0) a15(r139,l0) a17(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r171,l0) conflicts: a0(r134,l0) a5(r175,l0) a15(r139,l0) a17(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r170,l0) conflicts: a5(r175,l0) a21(r231,l0) a22(r149,l0) a23(r228,l0) a25(r230,l0) a24(r174,l0) a26(r147,l0) a27(r229,l0) a28(r227,l0) a29(r146,l0) a30(r226,l0) a31(r222,l0) a32(r148,l0) a33(r220,l0) a34(r218,l0) a35(r153,l0) a36(r214,l0) a37(r154,l0) a38(r213,l0) a39(r155,l0) a40(r212,l0) a41(r156,l0) a42(r211,l0) a43(r157,l0) a44(r210,l0) a45(r158,l0) a46(r209,l0) a47(r159,l0) a48(r208,l0) a49(r160,l0) a50(r207,l0) a51(r161,l0) a52(r206,l0) a53(r162,l0) a54(r205,l0) a55(r163,l0) a56(r204,l0) a57(r164,l0) a58(r203,l0) a59(r165,l0) a60(r202,l0) a61(r166,l0) a62(r201,l0) a63(r167,l0) a64(r200,l0) a65(r168,l0) a66(r199,l0) a67(r169,l0) a68(r198,l0) a69(r197,l0) a70(r196,l0) a71(r194,l0) a72(r181,l0) a73(r190,l0) a74(r189,l0) a75(r176,l0) a76(r186,l0) a77(r185,l0) a78(r183,l0) a79(r179,l0) a80(r180,l0) a81(r178,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a21(r231,l0) conflicts: a5(r175,l0) a20(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r149,l0) conflicts: a5(r175,l0) a20(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r228,l0) conflicts: a5(r175,l0) a20(r170,l0) a25(r230,l0) a24(r174,l0) a26(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r174,l0) conflicts: a5(r175,l0) a20(r170,l0) a23(r228,l0) a25(r230,l0) a26(r147,l0) a27(r229,l0) a28(r227,l0) a29(r146,l0) a30(r226,l0) a31(r222,l0) a32(r148,l0) a33(r220,l0) a34(r218,l0) a35(r153,l0) a36(r214,l0) a37(r154,l0) a38(r213,l0) a39(r155,l0) a40(r212,l0) a41(r156,l0) a42(r211,l0) a43(r157,l0) a44(r210,l0) a45(r158,l0) a46(r209,l0) a47(r159,l0) a48(r208,l0) a49(r160,l0) a50(r207,l0) a51(r161,l0) a52(r206,l0) a53(r162,l0) a54(r205,l0) a55(r163,l0) a56(r204,l0) a57(r164,l0) a58(r203,l0) a59(r165,l0) a60(r202,l0) a61(r166,l0) a62(r201,l0) a63(r167,l0) a64(r200,l0) a65(r168,l0) a66(r199,l0) a67(r169,l0) a68(r198,l0) a69(r197,l0) a70(r196,l0) a71(r194,l0) a72(r181,l0) a73(r190,l0) a74(r189,l0) a75(r176,l0) a76(r186,l0) a77(r185,l0) a78(r183,l0) a79(r179,l0) a80(r180,l0) a81(r178,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a25(r230,l0) conflicts: a5(r175,l0) a20(r170,l0) a23(r228,l0) a24(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r147,l0) conflicts: a5(r175,l0) a20(r170,l0) a23(r228,l0) a24(r174,l0) a27(r229,l0) a28(r227,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r229,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a26(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r227,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a26(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r146,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a30(r226,l0) a31(r222,l0) a32(r148,l0) a33(r220,l0) a34(r218,l0) a35(r153,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r226,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r222,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0) a32(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r148,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0) a31(r222,l0) a33(r220,l0) a34(r218,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r220,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0) a32(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r218,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0) a32(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r153,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a29(r146,l0) a36(r214,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r214,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a35(r153,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a37(r154,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a38(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a38(r213,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a37(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a39(r155,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a40(r212,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a40(r212,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a39(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a41(r156,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a42(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a42(r211,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a41(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a43(r157,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a44(r210,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a44(r210,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a43(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a45(r158,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a46(r209,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a46(r209,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a45(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a47(r159,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a48(r208,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a48(r208,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a47(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a49(r160,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a50(r207,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a50(r207,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a49(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a51(r161,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a52(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a52(r206,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a51(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a53(r162,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a54(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a54(r205,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a53(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a55(r163,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a56(r204,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a56(r204,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a55(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a57(r164,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a58(r203,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a58(r203,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a57(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a59(r165,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a60(r202,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a60(r202,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a59(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a61(r166,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a62(r201,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a62(r201,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a61(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a63(r167,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a64(r200,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a64(r200,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a63(r167,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a65(r168,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a66(r199,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a66(r199,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a65(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a67(r169,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a68(r198,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a68(r198,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a67(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a69(r197,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a70(r196,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a71(r194,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a72(r181,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a73(r190,l0) a74(r189,l0) a75(r176,l0) a76(r186,l0) a77(r185,l0) a78(r183,l0) a79(r179,l0) a80(r180,l0) a81(r178,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a73(r190,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a74(r189,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a75(r176,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a74(r189,l0) a76(r186,l0) a77(r185,l0) a78(r183,l0) a79(r179,l0) a80(r180,l0) a81(r178,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a76(r186,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a77(r185,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a78(r183,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0) a79(r179,l0) a80(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a79(r179,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0) a78(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r180,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0) a78(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a81(r178,l0) conflicts: a5(r175,l0) a20(r170,l0) a24(r174,l0) a72(r181,l0) a75(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a9(r137)<->a10(r142)@125:shuffle
  cp1:a8(r247)<->a9(r137)@125:shuffle
  cp2:a4(r249)<->a5(r175)@125:shuffle
  cp3:a21(r231)<->a22(r149)@125:shuffle
  cp4:a0(r134)<->a21(r231)@125:shuffle
  cp5:a0(r134)<->a20(r170)@125:shuffle
  cp6:a25(r230)<->a26(r147)@125:shuffle
  cp7:a22(r149)<->a23(r228)@1000:move
  cp8:a26(r147)<->a29(r146)@125:shuffle
  cp9:a23(r228)<->a27(r229)@125:shuffle
  cp10:a31(r222)<->a33(r220)@125:shuffle
  cp11:a30(r226)<->a31(r222)@125:shuffle
  cp12:a30(r226)<->a32(r148)@125:shuffle
  cp13:a32(r148)<->a35(r153)@125:shuffle
  cp14:a80(r180)<->a81(r178)@125:shuffle
  cp15:a79(r179)<->a80(r180)@125:shuffle
  cp16:a76(r186)<->a77(r185)@125:shuffle
  cp17:a73(r190)<->a74(r189)@125:shuffle
  cp18:a69(r197)<->a70(r196)@125:shuffle
  regions=1, blocks=19, points=147
    allocnos=82, copies=19, conflicts=10, ranges=90

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r134 1r136 2r144 3r133 4r249 5r175 6r143 7r248 8r247 9r137 10r142 11r246 12r141 13r245 14r237 15r139 16r140 17r138 18r233 19r171 20r170 21r231 22r149 23r228 24r174 25r230 26r147 27r229 28r227 29r146 30r226 31r222 32r148 33r220 34r218 35r153 36r214 37r154 38r213 39r155 40r212 41r156 42r211 43r157 44r210 45r158 46r209 47r159 48r208 49r160 50r207 51r161 52r206 53r162 54r205 55r163 56r204 57r164 58r203 59r165 60r202 61r166 62r201 63r167 64r200 65r168 66r199 67r169 68r198 69r197 70r196 71r194 72r181 73r190 74r189 75r176 76r186 77r185 78r183 79r179 80r180 81r178
    modified regnos: 133 134 136 137 138 139 140 141 142 143 144 146 147 148 149 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 174 175 176 178 179 180 181 183 185 186 189 190 194 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 218 220 222 226 227 228 229 230 231 233 237 245 246 247 248 249
    border:
    Pressure: GENERAL_REGS=7
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 249 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 248 of GENERAL_REGS has 1 regs less
    Reg 247 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 246 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 245 of GENERAL_REGS has 2 regs less
    Reg 237 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 233 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 3 regs less
    Reg 231 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 228 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 4 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 229 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 226 of GENERAL_REGS has 1 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 218 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 214 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 213 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 212 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 211 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 210 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 209 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 208 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 207 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 205 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 204 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 203 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 202 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 201 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 200 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 199 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 198 of GENERAL_REGS has 1 regs less
    Reg 181 of GENERAL_REGS has 3 regs less
    Reg 190 of GENERAL_REGS has 2 regs less
    Reg 189 of GENERAL_REGS has 2 regs less
    Reg 176 of GENERAL_REGS has 4 regs less
      Pushing a81(r178,l0)
      Pushing a80(r180,l0)
      Pushing a79(r179,l0)
      Pushing a78(r183,l0)
      Pushing a77(r185,l0)
      Pushing a76(r186,l0)
      Pushing a71(r194,l0)
      Pushing a70(r196,l0)
      Pushing a69(r197,l0)
      Pushing a67(r169,l0)
      Pushing a65(r168,l0)
      Pushing a63(r167,l0)
      Pushing a61(r166,l0)
      Pushing a59(r165,l0)
      Pushing a57(r164,l0)
      Pushing a55(r163,l0)
      Pushing a53(r162,l0)
      Pushing a51(r161,l0)
      Pushing a49(r160,l0)
      Pushing a47(r159,l0)
      Pushing a45(r158,l0)
      Pushing a43(r157,l0)
      Pushing a41(r156,l0)
      Pushing a39(r155,l0)
      Pushing a37(r154,l0)
      Pushing a34(r218,l0)
      Pushing a33(r220,l0)
      Pushing a31(r222,l0)
      Pushing a30(r226,l0)
      Pushing a28(r227,l0)
      Pushing a25(r230,l0)
      Pushing a23(r228,l0)
      Pushing a16(r140,l0)
      Pushing a15(r139,l0)
      Pushing a14(r237,l0)
      Pushing a12(r141,l0)
      Pushing a10(r142,l0)
      Pushing a9(r137,l0)
      Pushing a8(r247,l0)
      Pushing a6(r143,l0)
      Pushing a2(r144,l0)
      Pushing a68(r198,l0)
      Pushing a66(r199,l0)
      Pushing a64(r200,l0)
      Pushing a62(r201,l0)
      Pushing a60(r202,l0)
      Pushing a58(r203,l0)
      Pushing a56(r204,l0)
      Pushing a54(r205,l0)
      Pushing a52(r206,l0)
      Pushing a50(r207,l0)
      Pushing a48(r208,l0)
      Pushing a46(r209,l0)
      Pushing a44(r210,l0)
      Pushing a42(r211,l0)
      Pushing a40(r212,l0)
      Pushing a38(r213,l0)
      Pushing a36(r214,l0)
      Pushing a32(r148,l0)
      Pushing a29(r146,l0)
      Pushing a27(r229,l0)
      Pushing a26(r147,l0)
      Pushing a21(r231,l0)
      Pushing a19(r171,l0)
      Pushing a18(r233,l0)
      Pushing a11(r246,l0)
      Pushing a7(r248,l0)
      Pushing a4(r249,l0)
      Pushing a35(r153,l0)
      Pushing a22(r149,l0)
      Pushing a17(r138,l0)
      Pushing a3(r133,l0)
      Pushing a74(r189,l0)
      Pushing a73(r190,l0)
      Pushing a13(r245,l0)
      Pushing a72(r181,l0)
      Pushing a20(r170,l0)
      Pushing a75(r176,l0)
      Pushing a0(r134,l0)
      Pushing a1(r136,l0)
      Pushing a24(r174,l0)
      Pushing a5(r175,l0)
      Popping a5(r175,l0)  -- assign reg 4
      Popping a24(r174,l0)  -- assign reg 5
      Popping a1(r136,l0)  -- assign reg 5
      Popping a0(r134,l0)  -- assign reg 6
      Popping a75(r176,l0)  -- assign reg 7
      Popping a20(r170,l0)  -- assign reg 8
      Popping a72(r181,l0)  -- assign reg 6
      Popping a13(r245,l0)  -- assign reg 3
      Popping a73(r190,l0)  -- assign reg 3
      Popping a74(r189,l0)  -- assign reg 3
      Popping a3(r133,l0)  -- assign reg 0
      Popping a17(r138,l0)  -- assign reg 3
      Popping a22(r149,l0)  -- assign reg 6
      Popping a35(r153,l0)  -- assign reg 3
      Popping a4(r249,l0)  -- assign reg 4
      Popping a7(r248,l0)  -- assign reg 3
      Popping a11(r246,l0)  -- assign reg 3
      Popping a18(r233,l0)  -- assign reg 2
      Popping a19(r171,l0)  -- assign reg 2
      Popping a21(r231,l0)  -- assign reg 6
      Popping a26(r147,l0)  -- assign reg 3
      Popping a27(r229,l0)  -- assign reg 6
      Popping a29(r146,l0)  -- assign reg 2
      Popping a32(r148,l0)  -- assign reg 3
      Popping a36(r214,l0)  -- assign reg 2
      Popping a38(r213,l0)  -- assign reg 3
      Popping a40(r212,l0)  -- assign reg 3
      Popping a42(r211,l0)  -- assign reg 3
      Popping a44(r210,l0)  -- assign reg 3
      Popping a46(r209,l0)  -- assign reg 3
      Popping a48(r208,l0)  -- assign reg 3
      Popping a50(r207,l0)  -- assign reg 3
      Popping a52(r206,l0)  -- assign reg 3
      Popping a54(r205,l0)  -- assign reg 3
      Popping a56(r204,l0)  -- assign reg 3
      Popping a58(r203,l0)  -- assign reg 3
      Popping a60(r202,l0)  -- assign reg 3
      Popping a62(r201,l0)  -- assign reg 3
      Popping a64(r200,l0)  -- assign reg 3
      Popping a66(r199,l0)  -- assign reg 3
      Popping a68(r198,l0)  -- assign reg 3
      Popping a2(r144,l0)  -- assign reg 3
      Popping a6(r143,l0)  -- assign reg 2
      Popping a8(r247,l0)  -- assign reg 2
      Popping a9(r137,l0)  -- assign reg 2
      Popping a10(r142,l0)  -- assign reg 2
      Popping a12(r141,l0)  -- assign reg 2
      Popping a14(r237,l0)  -- assign reg 3
      Popping a15(r139,l0)  -- assign reg 1
      Popping a16(r140,l0)  -- assign reg 0
      Popping a23(r228,l0)  -- assign reg 6
      Popping a25(r230,l0)  -- assign reg 3
      Popping a28(r227,l0)  -- assign reg 2
      Popping a30(r226,l0)  -- assign reg 3
      Popping a31(r222,l0)  -- assign reg 1
      Popping a33(r220,l0)  -- assign reg 1
      Popping a34(r218,l0)  -- assign reg 1
      Popping a37(r154,l0)  -- assign reg 2
      Popping a39(r155,l0)  -- assign reg 2
      Popping a41(r156,l0)  -- assign reg 2
      Popping a43(r157,l0)  -- assign reg 2
      Popping a45(r158,l0)  -- assign reg 2
      Popping a47(r159,l0)  -- assign reg 2
      Popping a49(r160,l0)  -- assign reg 2
      Popping a51(r161,l0)  -- assign reg 2
      Popping a53(r162,l0)  -- assign reg 2
      Popping a55(r163,l0)  -- assign reg 2
      Popping a57(r164,l0)  -- assign reg 2
      Popping a59(r165,l0)  -- assign reg 2
      Popping a61(r166,l0)  -- assign reg 2
      Popping a63(r167,l0)  -- assign reg 2
      Popping a65(r168,l0)  -- assign reg 2
      Popping a67(r169,l0)  -- assign reg 2
      Popping a69(r197,l0)  -- assign reg 0
      Popping a70(r196,l0)  -- assign reg 0
      Popping a71(r194,l0)  -- assign reg 3
      Popping a76(r186,l0)  -- assign reg 0
      Popping a77(r185,l0)  -- assign reg 0
      Popping a78(r183,l0)  -- assign reg 3
      Popping a79(r179,l0)  -- assign reg 2
      Popping a80(r180,l0)  -- assign reg 2
      Popping a81(r178,l0)  -- assign reg 2
Disposition:
    3:r133 l0     0    0:r134 l0     6    1:r136 l0     5    9:r137 l0     2
   17:r138 l0     3   15:r139 l0     1   16:r140 l0     0   12:r141 l0     2
   10:r142 l0     2    6:r143 l0     2    2:r144 l0     3   29:r146 l0     2
   26:r147 l0     3   32:r148 l0     3   22:r149 l0     6   35:r153 l0     3
   37:r154 l0     2   39:r155 l0     2   41:r156 l0     2   43:r157 l0     2
   45:r158 l0     2   47:r159 l0     2   49:r160 l0     2   51:r161 l0     2
   53:r162 l0     2   55:r163 l0     2   57:r164 l0     2   59:r165 l0     2
   61:r166 l0     2   63:r167 l0     2   65:r168 l0     2   67:r169 l0     2
   20:r170 l0     8   19:r171 l0     2   24:r174 l0     5    5:r175 l0     4
   75:r176 l0     7   81:r178 l0     2   79:r179 l0     2   80:r180 l0     2
   72:r181 l0     6   78:r183 l0     3   77:r185 l0     0   76:r186 l0     0
   74:r189 l0     3   73:r190 l0     3   71:r194 l0     3   70:r196 l0     0
   69:r197 l0     0   68:r198 l0     3   66:r199 l0     3   64:r200 l0     3
   62:r201 l0     3   60:r202 l0     3   58:r203 l0     3   56:r204 l0     3
   54:r205 l0     3   52:r206 l0     3   50:r207 l0     3   48:r208 l0     3
   46:r209 l0     3   44:r210 l0     3   42:r211 l0     3   40:r212 l0     3
   38:r213 l0     3   36:r214 l0     2   34:r218 l0     1   33:r220 l0     1
   31:r222 l0     1   30:r226 l0     3   28:r227 l0     2   23:r228 l0     6
   27:r229 l0     6   25:r230 l0     3   21:r231 l0     6   18:r233 l0     2
   14:r237 l0     3   13:r245 l0     3   11:r246 l0     3    8:r247 l0     2
    7:r248 l0     3    4:r249 l0     4
New iteration of spill/restore move
+++Costs: overall -500, reg -500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, dead_or_set: 1, 175
insn=7, live_throughout: 0, 13, 175, dead_or_set: 176
insn=2, live_throughout: 13, 175, 176, dead_or_set: 0, 174
insn=10, live_throughout: 13, 174, 175, 176, dead_or_set: 1
insn=9, live_throughout: 1, 13, 174, 175, 176, dead_or_set: 0
insn=11, live_throughout: 0, 1, 13, 174, 175, 176, dead_or_set: 2
insn=12, live_throughout: 13, 174, 175, 176, dead_or_set: 0, 1, 2, 14
insn=15, live_throughout: 13, 14, 174, 175, 176, dead_or_set: 0, 170
insn=16, live_throughout: 13, 14, 170, 174, 175, 176, dead_or_set: 
insn=243, live_throughout: 13, 170, 174, 175, 176, dead_or_set: 181
insn=244, live_throughout: 13, 170, 174, 175, 176, dead_or_set: 181
insn=249, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 178
insn=19, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 178, 180
insn=25, live_throughout: 13, 170, 174, 175, 176, 180, 181, dead_or_set: 183
insn=20, live_throughout: 13, 170, 174, 175, 176, 181, 183, dead_or_set: 179, 180
insn=21, live_throughout: 13, 170, 174, 175, 176, 181, 183, dead_or_set: 179
insn=26, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 183, 185
insn=27, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 185, 186
insn=29, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 0, 186
insn=30, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 0, 14
insn=34, live_throughout: 13, 170, 174, 175, 176, 181, dead_or_set: 189
insn=37, live_throughout: 13, 170, 174, 175, 181, 189, dead_or_set: 0, 1, 176
insn=35, live_throughout: 0, 1, 13, 170, 174, 175, 181, dead_or_set: 189, 190
insn=38, live_throughout: 13, 170, 174, 175, 181, dead_or_set: 0, 1, 190
insn=39, live_throughout: 13, 170, 174, 175, 181, dead_or_set: 14
insn=43, live_throughout: 13, 170, 174, 175, dead_or_set: 181, 194
insn=44, live_throughout: 13, 170, 174, 175, dead_or_set: 194, 196
insn=45, live_throughout: 13, 170, 174, 175, dead_or_set: 196, 197
insn=47, live_throughout: 13, 170, 174, 175, dead_or_set: 0, 197
insn=48, live_throughout: 13, 170, 174, 175, dead_or_set: 0, 14
insn=49, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 
insn=51, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 198
insn=52, live_throughout: 13, 14, 174, 175, dead_or_set: 169, 170, 198
insn=53, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 169
insn=54, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 199
insn=55, live_throughout: 13, 14, 174, 175, dead_or_set: 168, 170, 199
insn=56, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 168
insn=57, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 200
insn=58, live_throughout: 13, 14, 174, 175, dead_or_set: 167, 170, 200
insn=59, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 167
insn=60, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 201
insn=61, live_throughout: 13, 14, 174, 175, dead_or_set: 166, 170, 201
insn=62, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 166
insn=63, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 202
insn=64, live_throughout: 13, 14, 174, 175, dead_or_set: 165, 170, 202
insn=65, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 165
insn=66, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 203
insn=67, live_throughout: 13, 14, 174, 175, dead_or_set: 164, 170, 203
insn=68, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 164
insn=69, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 204
insn=70, live_throughout: 13, 14, 174, 175, dead_or_set: 163, 170, 204
insn=71, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 163
insn=72, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 205
insn=73, live_throughout: 13, 14, 174, 175, dead_or_set: 162, 170, 205
insn=74, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 162
insn=75, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 206
insn=76, live_throughout: 13, 14, 174, 175, dead_or_set: 161, 170, 206
insn=77, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 161
insn=78, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 207
insn=79, live_throughout: 13, 14, 174, 175, dead_or_set: 160, 170, 207
insn=80, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 160
insn=81, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 208
insn=82, live_throughout: 13, 14, 174, 175, dead_or_set: 159, 170, 208
insn=83, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 159
insn=84, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 209
insn=85, live_throughout: 13, 14, 174, 175, dead_or_set: 158, 170, 209
insn=86, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 158
insn=87, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 210
insn=88, live_throughout: 13, 14, 174, 175, dead_or_set: 157, 170, 210
insn=89, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 157
insn=90, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 211
insn=91, live_throughout: 13, 14, 174, 175, dead_or_set: 156, 170, 211
insn=92, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 156
insn=93, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 212
insn=94, live_throughout: 13, 14, 174, 175, dead_or_set: 155, 170, 212
insn=95, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 155
insn=96, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 213
insn=97, live_throughout: 13, 14, 174, 175, dead_or_set: 154, 170, 213
insn=98, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 154
insn=99, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 214
insn=100, live_throughout: 13, 14, 174, 175, dead_or_set: 153, 170, 214
insn=104, live_throughout: 13, 14, 153, 170, 174, 175, dead_or_set: 
insn=101, live_throughout: 13, 14, 24, 153, 170, 174, 175, dead_or_set: 146
insn=102, live_throughout: 13, 14, 24, 146, 153, 170, 174, 175, dead_or_set: 
insn=105, live_throughout: 13, 14, 146, 153, 170, 174, 175, dead_or_set: 
insn=107, live_throughout: 13, 14, 146, 170, 174, 175, dead_or_set: 148, 153
insn=108, live_throughout: 13, 14, 146, 148, 170, 174, 175, dead_or_set: 
insn=109, live_throughout: 13, 14, 146, 148, 170, 174, 175, dead_or_set: 
insn=114, live_throughout: 13, 14, 146, 148, 170, 174, 175, dead_or_set: 218
insn=115, live_throughout: 13, 14, 146, 148, 170, 174, 175, dead_or_set: 218, 220
insn=118, live_throughout: 13, 14, 146, 148, 170, 174, 175, dead_or_set: 220, 222
insn=122, live_throughout: 13, 14, 146, 170, 174, 175, dead_or_set: 148, 222, 226
insn=123, live_throughout: 13, 14, 146, 170, 174, 175, dead_or_set: 226
insn=124, live_throughout: 13, 14, 146, 170, 174, 175, dead_or_set: 
insn=125, live_throughout: 13, 14, 146, 170, 174, 175, dead_or_set: 
insn=127, live_throughout: 13, 14, 170, 174, 175, dead_or_set: 146, 147
insn=128, live_throughout: 13, 14, 147, 170, 174, 175, dead_or_set: 
insn=248, live_throughout: 13, 14, 147, 170, 174, 175, dead_or_set: 227
insn=130, live_throughout: 13, 14, 147, 170, 174, 175, dead_or_set: 227, 229
insn=132, live_throughout: 13, 14, 147, 170, 174, 175, dead_or_set: 228, 229
insn=133, live_throughout: 13, 14, 147, 170, 174, 175, 228, dead_or_set: 
insn=135, live_throughout: 13, 14, 170, 175, dead_or_set: 149
insn=232, live_throughout: 13, 14, 149, 170, 175, dead_or_set: 
insn=138, live_throughout: 13, 14, 147, 170, 174, 175, 228, dead_or_set: 
insn=140, live_throughout: 13, 14, 170, 174, 175, 228, dead_or_set: 147, 230
insn=141, live_throughout: 13, 14, 170, 175, 228, dead_or_set: 174, 230
insn=142, live_throughout: 13, 14, 170, 175, dead_or_set: 149, 228
insn=234, live_throughout: 13, 14, 149, 170, 175, dead_or_set: 
insn=145, live_throughout: 13, 14, 170, 175, dead_or_set: 
insn=147, live_throughout: 13, 14, 170, 175, dead_or_set: 149
insn=148, live_throughout: 13, 14, 149, 170, 175, dead_or_set: 
insn=150, live_throughout: 13, 14, 170, 175, dead_or_set: 149, 231
insn=152, live_throughout: 13, 14, 175, dead_or_set: 134, 170, 231
insn=153, live_throughout: 13, 14, 134, 175, dead_or_set: 
insn=155, live_throughout: 13, 14, 134, 175, dead_or_set: 171
insn=245, live_throughout: 13, 14, 134, 171, 175, dead_or_set: 138
insn=158, live_throughout: 13, 14, 134, 175, dead_or_set: 138, 139, 171
insn=159, live_throughout: 13, 14, 134, 138, 139, 175, dead_or_set: 233
insn=160, live_throughout: 13, 14, 134, 139, 175, dead_or_set: 138, 140, 233
insn=161, live_throughout: 13, 14, 134, 139, 140, 175, dead_or_set: 138
insn=162, live_throughout: 13, 14, 134, 139, 140, 175, dead_or_set: 
insn=167, live_throughout: 13, 14, 134, 139, 140, 175, dead_or_set: 237
insn=174, live_throughout: 13, 14, 134, 175, dead_or_set: 139, 140, 237
insn=175, live_throughout: 13, 14, 134, 175, dead_or_set: 
insn=177, live_throughout: 13, 14, dead_or_set: 134
insn=236, live_throughout: 13, 14, 134, dead_or_set: 
insn=180, live_throughout: 13, 134, 175, dead_or_set: 
insn=240, live_throughout: 13, 134, 175, dead_or_set: 136
insn=187, live_throughout: 13, 134, 136, 175, dead_or_set: 1
insn=241, live_throughout: 1, 13, 134, 175, dead_or_set: 136
insn=188, live_throughout: 1, 13, 134, 136, 175, dead_or_set: 2
insn=186, live_throughout: 1, 2, 13, 134, 136, 175, dead_or_set: 0
insn=189, live_throughout: 13, 134, 136, 175, dead_or_set: 0, 1, 2, 14
insn=192, live_throughout: 0, 13, 14, 134, 136, 175, dead_or_set: 245
insn=246, live_throughout: 13, 14, 134, 136, 175, 245, dead_or_set: 0, 133
insn=193, live_throughout: 13, 14, 134, 136, 175, dead_or_set: 133, 141, 245
insn=194, live_throughout: 13, 14, 133, 134, 136, 175, dead_or_set: 141
insn=195, live_throughout: 13, 14, 133, 134, 136, 175, dead_or_set: 246
insn=196, live_throughout: 13, 14, 134, 136, 175, dead_or_set: 133, 142, 246
insn=197, live_throughout: 13, 14, 133, 134, 136, 175, dead_or_set: 137, 142
insn=200, live_throughout: 13, 14, 133, 134, 136, 137, 175, dead_or_set: 248
insn=198, live_throughout: 13, 14, 133, 134, 136, 175, 248, dead_or_set: 137, 247
insn=199, live_throughout: 13, 14, 133, 134, 136, 175, 248, dead_or_set: 247
insn=201, live_throughout: 13, 14, 134, 136, 175, dead_or_set: 133, 143, 248
insn=202, live_throughout: 13, 14, 133, 134, 136, 175, dead_or_set: 143
insn=203, live_throughout: 13, 14, 133, 134, 136, dead_or_set: 175, 249
insn=204, live_throughout: 13, 14, 134, 136, dead_or_set: 133, 144, 249
insn=206, live_throughout: 13, 14, 134, 136, 144, dead_or_set: 133
insn=205, live_throughout: 13, 14, 24, 134, 136, dead_or_set: 144
insn=207, live_throughout: 13, 14, 134, 136, dead_or_set: 
insn=209, live_throughout: 13, 134, dead_or_set: 0, 136
insn=210, live_throughout: 13, 134, dead_or_set: 0, 14
insn=238, live_throughout: 13, 14, 134, dead_or_set: 
insn=213, live_throughout: 13, 14, dead_or_set: 
insn=215, live_throughout: 13, 14, dead_or_set: 134
insn=216, live_throughout: 13, 14, 134, dead_or_set: 
insn=222, live_throughout: 13, 14, dead_or_set: 0, 134
insn=228, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 176: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 249 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 114 (nil))
init_insns for 227: (insn_list:REG_DEP_TRUE 248 (nil))
init_insns for 230: (insn_list:REG_DEP_TRUE 141 (nil))
init_insns for 237: (insn_list:REG_DEP_TRUE 167 (nil))
init_insns for 247: (insn_list:REG_DEP_TRUE 199 (nil))
changing reg in insn 246
changing reg in insn 193
changing reg in insn 204
changing reg in insn 201
changing reg in insn 196
changing reg in insn 193
changing reg in insn 206
changing reg in insn 204
changing reg in insn 201
changing reg in insn 196
changing reg in insn 152
changing reg in insn 215
changing reg in insn 177
changing reg in insn 245
changing reg in insn 222
changing reg in insn 241
changing reg in insn 240
changing reg in insn 241
changing reg in insn 186
changing reg in insn 209
changing reg in insn 205
changing reg in insn 202
changing reg in insn 199
changing reg in insn 194
changing reg in insn 198
changing reg in insn 197
changing reg in insn 198
changing reg in insn 245
changing reg in insn 158
changing reg in insn 160
changing reg in insn 158
changing reg in insn 161
changing reg in insn 160
changing reg in insn 158
changing reg in insn 174
changing reg in insn 160
changing reg in insn 174
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 101
changing reg in insn 127
changing reg in insn 102
changing reg in insn 127
changing reg in insn 140
changing reg in insn 128
changing reg in insn 107
changing reg in insn 122
changing reg in insn 108
changing reg in insn 142
changing reg in insn 147
changing reg in insn 135
changing reg in insn 150
changing reg in insn 100
changing reg in insn 104
changing reg in insn 107
changing reg in insn 101
changing reg in insn 97
changing reg in insn 98
changing reg in insn 94
changing reg in insn 95
changing reg in insn 91
changing reg in insn 92
changing reg in insn 88
changing reg in insn 89
changing reg in insn 85
changing reg in insn 86
changing reg in insn 82
changing reg in insn 83
changing reg in insn 79
changing reg in insn 80
changing reg in insn 76
changing reg in insn 77
changing reg in insn 73
changing reg in insn 74
changing reg in insn 70
changing reg in insn 71
changing reg in insn 67
changing reg in insn 68
changing reg in insn 64
changing reg in insn 65
changing reg in insn 61
changing reg in insn 62
changing reg in insn 58
changing reg in insn 59
changing reg in insn 55
changing reg in insn 56
changing reg in insn 52
changing reg in insn 53
changing reg in insn 15
changing reg in insn 100
changing reg in insn 97
changing reg in insn 94
changing reg in insn 91
changing reg in insn 88
changing reg in insn 85
changing reg in insn 82
changing reg in insn 79
changing reg in insn 76
changing reg in insn 73
changing reg in insn 70
changing reg in insn 67
changing reg in insn 64
changing reg in insn 61
changing reg in insn 58
changing reg in insn 55
changing reg in insn 52
changing reg in insn 152
changing reg in insn 152
changing reg in insn 100
changing reg in insn 97
changing reg in insn 94
changing reg in insn 91
changing reg in insn 88
changing reg in insn 85
changing reg in insn 82
changing reg in insn 79
changing reg in insn 76
changing reg in insn 73
changing reg in insn 70
changing reg in insn 67
changing reg in insn 64
changing reg in insn 61
changing reg in insn 58
changing reg in insn 55
changing reg in insn 52
changing reg in insn 155
changing reg in insn 158
changing reg in insn 2
changing reg in insn 141
changing reg in insn 128
changing reg in insn 102
changing reg in insn 98
changing reg in insn 95
changing reg in insn 92
changing reg in insn 89
changing reg in insn 86
changing reg in insn 83
changing reg in insn 80
changing reg in insn 77
changing reg in insn 74
changing reg in insn 71
changing reg in insn 68
changing reg in insn 65
changing reg in insn 62
changing reg in insn 59
changing reg in insn 56
changing reg in insn 53
changing reg in insn 140
changing reg in insn 3
changing reg in insn 187
changing reg in insn 10
changing reg in insn 203
changing reg in insn 200
changing reg in insn 195
changing reg in insn 192
changing reg in insn 159
changing reg in insn 155
changing reg in insn 99
changing reg in insn 96
changing reg in insn 93
changing reg in insn 90
changing reg in insn 87
changing reg in insn 84
changing reg in insn 81
changing reg in insn 78
changing reg in insn 75
changing reg in insn 72
changing reg in insn 69
changing reg in insn 66
changing reg in insn 63
changing reg in insn 60
changing reg in insn 57
changing reg in insn 54
changing reg in insn 51
changing reg in insn 7
changing reg in insn 37
changing reg in insn 37
changing reg in insn 9
changing reg in insn 249
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 244
changing reg in insn 243
changing reg in insn 244
changing reg in insn 43
changing reg in insn 34
changing reg in insn 25
changing reg in insn 34
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 38
changing reg in insn 38
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 118
changing reg in insn 118
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 248
changing reg in insn 130
changing reg in insn 132
changing reg in insn 142
changing reg in insn 130
changing reg in insn 132
changing reg in insn 132
changing reg in insn 140
changing reg in insn 141
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 159
changing reg in insn 160
changing reg in insn 167
changing reg in insn 174
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
Spilling for insn 243.
Using reg 3 for reload 0
Spilling for insn 21.
Spilling for insn 53.
Spilling for insn 56.
Spilling for insn 59.
Spilling for insn 62.
Spilling for insn 65.
Spilling for insn 68.
Spilling for insn 71.
Spilling for insn 74.
Spilling for insn 77.
Spilling for insn 80.
Spilling for insn 83.
Spilling for insn 86.
Spilling for insn 89.
Spilling for insn 92.
Spilling for insn 95.
Spilling for insn 98.
Spilling for insn 102.
Spilling for insn 128.
Spilling for insn 141.
Spilling for insn 240.
Using reg 3 for reload 0
Spilling for insn 194.
Spilling for insn 199.
Spilling for insn 202.
Spilling for insn 205.

Reloads for insn # 243
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 21
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/f:SI 13 sp) [0 set.sig+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/f:SI 13 sp) [0 set.sig+0 S4 A64])

Reloads for insn # 53
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174]) [0 <variable>.uregs+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174]) [0 <variable>.uregs+0 S4 A32])

Reloads for insn # 56
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])

Reloads for insn # 59
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])

Reloads for insn # 62
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 12 [0xc])) [0 <variable>.uregs+12 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 12 [0xc])) [0 <variable>.uregs+12 S4 A32])

Reloads for insn # 65
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 16 [0x10])) [0 <variable>.uregs+16 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 16 [0x10])) [0 <variable>.uregs+16 S4 A32])

Reloads for insn # 68
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 20 [0x14])) [0 <variable>.uregs+20 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 20 [0x14])) [0 <variable>.uregs+20 S4 A32])

Reloads for insn # 71
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 24 [0x18])) [0 <variable>.uregs+24 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 24 [0x18])) [0 <variable>.uregs+24 S4 A32])

Reloads for insn # 74
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])

Reloads for insn # 77
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 32 [0x20])) [0 <variable>.uregs+32 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 32 [0x20])) [0 <variable>.uregs+32 S4 A32])

Reloads for insn # 80
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 36 [0x24])) [0 <variable>.uregs+36 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 36 [0x24])) [0 <variable>.uregs+36 S4 A32])

Reloads for insn # 83
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 40 [0x28])) [0 <variable>.uregs+40 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 40 [0x28])) [0 <variable>.uregs+40 S4 A32])

Reloads for insn # 86
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])

Reloads for insn # 89
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])

Reloads for insn # 92
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])

Reloads for insn # 95
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])

Reloads for insn # 98
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 102
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 128
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 141
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                                                        (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])

Reloads for insn # 240
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 194
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])

Reloads for insn # 199
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])

Reloads for insn # 202
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 696 [0x2b8])) [0 <variable>.vfpstate.hard.fpinst+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 696 [0x2b8])) [0 <variable>.vfpstate.hard.fpinst+0 S4 A64])

Reloads for insn # 205
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 700 [0x2bc])) [0 <variable>.vfpstate.hard.fpinst2+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                                                        (const_int 700 [0x2bc])) [0 <variable>.vfpstate.hard.fpinst2+0 S4 A32])
deleting insn with uid = 142.
deleting insn with uid = 246.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 210.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 35 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)


restore_sigframe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,21u} r1={14d,8u} r2={38d,32u,1d} r3={42d,40u} r4={2d,26u} r5={3d,26u,2d} r6={10d,11u,2d} r7={1d,2u} r8={18d,19u} r12={7d} r13={1d,30u,3d} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={39d,9u} r25={1d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 1099{865d,225u,9e} in 150{144 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 13 2 NOTE_INSN_DELETED)

(note 13 8 3 2 NOTE_INSN_DELETED)

(insn 3 13 7 2 arch/arm/kernel/signal.c:276 (set (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
        (reg:SI 1 r1 [ sf ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 2 2 arch/arm/kernel/signal.c:281 (set (reg/f:SI 7 r7 [176])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 2 7 10 2 arch/arm/kernel/signal.c:276 (set (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 10 2 9 2 arch/arm/kernel/signal.c:281 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn 9 10 11 2 arch/arm/kernel/signal.c:281 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 11 9 12 2 arch/arm/kernel/signal.c:281 (set (reg:SI 2 r2)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(call_insn 12 11 15 2 arch/arm/kernel/signal.c:281 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x10f3de80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 15 12 16 2 arch/arm/kernel/signal.c:282 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 16 15 17 2 arch/arm/kernel/signal.c:282 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [29.0%]  (fallthru)
;; Succ edge  4 [71.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%]  (fallthru)
(note 17 16 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 23 17 28 3 NOTE_INSN_DELETED)

(note 28 23 46 3 NOTE_INSN_DELETED)

(note 46 28 251 3 NOTE_INSN_DELETED)

(insn 251 46 243 3 include/linux/spinlock.h:310 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 243 251 244 3 include/linux/spinlock.h:310 (set (reg:SI 6 r6 [181])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 244 243 249 3 include/linux/spinlock.h:310 (set (reg:SI 6 r6 [181])
        (and:SI (reg:SI 6 r6 [181])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 249 244 19 3 include/linux/signal.h:191 (set (reg:SI 2 r2 [orig:178 set.sig ] [178])
        (mem/s/j:SI (reg/f:SI 13 sp) [0 set.sig+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/f:SI 13 sp) [0 set.sig+0 S4 A64])
        (nil)))

(insn 19 249 25 3 include/linux/signal.h:191 (set (reg:SI 2 r2 [180])
        (and:SI (reg:SI 2 r2 [orig:178 set.sig ] [178])
            (const_int -262145 [0xfffffffffffbffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 25 19 20 3 include/linux/spinlock.h:310 (set (reg/f:SI 3 r3 [orig:183 <variable>.task ] [183])
        (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [181])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [181])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 20 25 21 3 include/linux/signal.h:191 (set (reg:SI 2 r2 [179])
        (and:SI (reg:SI 2 r2 [180])
            (const_int -257 [0xfffffffffffffeff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 set.sig+0 S4 A64])
        (expr_list:REG_EQUAL (and:SI (reg:SI 2 r2 [orig:178 set.sig ] [178])
                (const_int -262401 [0xfffffffffffbfeff]))
            (nil))))

(insn 21 20 26 3 include/linux/signal.h:191 (set (mem/s/j:SI (reg/f:SI 13 sp) [0 set.sig+0 S4 A64])
        (reg:SI 2 r2 [179])) 167 {*arm_movsi_insn} (nil))

(insn 26 21 27 3 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [orig:185 <variable>.sighand ] [185])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:183 <variable>.task ] [183])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 29 3 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [186])
        (plus:SI (reg/f:SI 0 r0 [orig:185 <variable>.sighand ] [185])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 29 27 30 3 include/linux/spinlock.h:310 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [186])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 30 29 34 3 include/linux/spinlock.h:310 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irq") [flags 0x41] <function_decl 0x10b48280 _raw_spin_lock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 34 30 37 3 arch/arm/kernel/signal.c:285 (set (reg/f:SI 3 r3 [orig:189 <variable>.task ] [189])
        (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [181])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [181])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 37 34 35 3 arch/arm/kernel/signal.c:285 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/c:SI (reg/f:SI 7 r7 [176]) [0 set+0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s/c:SI (plus:SI (reg/f:SI 7 r7 [176])
                        (const_int 4 [0x4])) [0 set+4 S4 A32]))
        ]) 190 {*ldmsi2} (nil))

(insn 35 37 38 3 arch/arm/kernel/signal.c:285 (set (reg/f:SI 3 r3 [190])
        (plus:SI (reg/f:SI 3 r3 [orig:189 <variable>.task ] [189])
            (const_int 944 [0x3b0]))) 4 {*arm_addsi3} (nil))

(insn 38 35 39 3 arch/arm/kernel/signal.c:285 (parallel [
            (set (mem/s/j:SI (reg/f:SI 3 r3 [190]) [0 <variable>.blocked+0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [190])
                        (const_int 4 [0x4])) [0 <variable>.blocked+4 S4 A32])
                (reg:SI 1 r1))
        ]) 197 {*stmsi2} (nil))

(call_insn 39 38 43 3 arch/arm/kernel/signal.c:286 (parallel [
            (call (mem:SI (symbol_ref:SI ("recalc_sigpending") [flags 0x41] <function_decl 0x10f2c680 recalc_sigpending>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 43 39 44 3 include/linux/spinlock.h:335 (set (reg/f:SI 3 r3 [orig:194 <variable>.task ] [194])
        (mem/s/f/j:SI (plus:SI (reg:SI 6 r6 [181])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 44 43 45 3 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [orig:196 <variable>.sighand ] [196])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:194 <variable>.task ] [194])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 45 44 47 3 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [197])
        (plus:SI (reg/f:SI 0 r0 [orig:196 <variable>.sighand ] [196])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 47 45 48 3 include/linux/spinlock.h:335 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [197])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 48 47 49 3 include/linux/spinlock.h:335 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irq") [flags 0x41] <function_decl 0x10b48600 _raw_spin_unlock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 49 48 50 4 66 "" [1 uses])

(note 50 49 103 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 103 50 51 4 NOTE_INSN_DELETED)

(insn 51 103 52 4 arch/arm/kernel/signal.c:290 discrim 4 (set (reg/f:SI 3 r3 [198])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 52 51 53 4 arch/arm/kernel/signal.c:290 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [198])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691028))
            (set (reg/v:SI 2 r2 [orig:169 __gu_val ] [169])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [198])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691028))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 53 52 54 4 arch/arm/kernel/signal.c:290 discrim 5 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174]) [0 <variable>.uregs+0 S4 A32])
        (reg/v:SI 2 r2 [orig:169 __gu_val ] [169])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 4 arch/arm/kernel/signal.c:291 discrim 4 (set (reg/f:SI 3 r3 [199])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 36 [0x24]))) 4 {*arm_addsi3} (nil))

(insn 55 54 56 4 arch/arm/kernel/signal.c:291 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [199])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691033))
            (set (reg/v:SI 2 r2 [orig:168 __gu_val ] [168])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [199])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691033))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 56 55 57 4 arch/arm/kernel/signal.c:291 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 4 [0x4])) [0 <variable>.uregs+4 S4 A32])
        (reg/v:SI 2 r2 [orig:168 __gu_val ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 4 arch/arm/kernel/signal.c:292 discrim 4 (set (reg/f:SI 3 r3 [200])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (nil))

(insn 58 57 59 4 arch/arm/kernel/signal.c:292 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [200])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691038))
            (set (reg/v:SI 2 r2 [orig:167 __gu_val ] [167])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [200])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691038))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 59 58 60 4 arch/arm/kernel/signal.c:292 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 8 [0x8])) [0 <variable>.uregs+8 S4 A32])
        (reg/v:SI 2 r2 [orig:167 __gu_val ] [167])) 167 {*arm_movsi_insn} (nil))

(insn 60 59 61 4 arch/arm/kernel/signal.c:293 discrim 4 (set (reg/f:SI 3 r3 [201])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 44 [0x2c]))) 4 {*arm_addsi3} (nil))

(insn 61 60 62 4 arch/arm/kernel/signal.c:293 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [201])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691043))
            (set (reg/v:SI 2 r2 [orig:166 __gu_val ] [166])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [201])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691043))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 62 61 63 4 arch/arm/kernel/signal.c:293 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 12 [0xc])) [0 <variable>.uregs+12 S4 A32])
        (reg/v:SI 2 r2 [orig:166 __gu_val ] [166])) 167 {*arm_movsi_insn} (nil))

(insn 63 62 64 4 arch/arm/kernel/signal.c:294 discrim 4 (set (reg/f:SI 3 r3 [202])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(insn 64 63 65 4 arch/arm/kernel/signal.c:294 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [202])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691048))
            (set (reg/v:SI 2 r2 [orig:165 __gu_val ] [165])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [202])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691048))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 65 64 66 4 arch/arm/kernel/signal.c:294 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 16 [0x10])) [0 <variable>.uregs+16 S4 A32])
        (reg/v:SI 2 r2 [orig:165 __gu_val ] [165])) 167 {*arm_movsi_insn} (nil))

(insn 66 65 67 4 arch/arm/kernel/signal.c:295 discrim 4 (set (reg/f:SI 3 r3 [203])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 52 [0x34]))) 4 {*arm_addsi3} (nil))

(insn 67 66 68 4 arch/arm/kernel/signal.c:295 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [203])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691053))
            (set (reg/v:SI 2 r2 [orig:164 __gu_val ] [164])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [203])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691053))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 68 67 69 4 arch/arm/kernel/signal.c:295 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 20 [0x14])) [0 <variable>.uregs+20 S4 A32])
        (reg/v:SI 2 r2 [orig:164 __gu_val ] [164])) 167 {*arm_movsi_insn} (nil))

(insn 69 68 70 4 arch/arm/kernel/signal.c:296 discrim 4 (set (reg/f:SI 3 r3 [204])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn 70 69 71 4 arch/arm/kernel/signal.c:296 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [204])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691058))
            (set (reg/v:SI 2 r2 [orig:163 __gu_val ] [163])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [204])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691058))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 71 70 72 4 arch/arm/kernel/signal.c:296 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 24 [0x18])) [0 <variable>.uregs+24 S4 A32])
        (reg/v:SI 2 r2 [orig:163 __gu_val ] [163])) 167 {*arm_movsi_insn} (nil))

(insn 72 71 73 4 arch/arm/kernel/signal.c:297 discrim 4 (set (reg/f:SI 3 r3 [205])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 60 [0x3c]))) 4 {*arm_addsi3} (nil))

(insn 73 72 74 4 arch/arm/kernel/signal.c:297 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [205])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691063))
            (set (reg/v:SI 2 r2 [orig:162 __gu_val ] [162])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [205])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691063))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 74 73 75 4 arch/arm/kernel/signal.c:297 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 28 [0x1c])) [0 <variable>.uregs+28 S4 A32])
        (reg/v:SI 2 r2 [orig:162 __gu_val ] [162])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 4 arch/arm/kernel/signal.c:298 discrim 4 (set (reg/f:SI 3 r3 [206])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 64 [0x40]))) 4 {*arm_addsi3} (nil))

(insn 76 75 77 4 arch/arm/kernel/signal.c:298 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [206])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691068))
            (set (reg/v:SI 2 r2 [orig:161 __gu_val ] [161])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [206])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691068))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 77 76 78 4 arch/arm/kernel/signal.c:298 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 32 [0x20])) [0 <variable>.uregs+32 S4 A32])
        (reg/v:SI 2 r2 [orig:161 __gu_val ] [161])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 79 4 arch/arm/kernel/signal.c:299 discrim 4 (set (reg/f:SI 3 r3 [207])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 68 [0x44]))) 4 {*arm_addsi3} (nil))

(insn 79 78 80 4 arch/arm/kernel/signal.c:299 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [207])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691073))
            (set (reg/v:SI 2 r2 [orig:160 __gu_val ] [160])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [207])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691073))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 80 79 81 4 arch/arm/kernel/signal.c:299 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 36 [0x24])) [0 <variable>.uregs+36 S4 A32])
        (reg/v:SI 2 r2 [orig:160 __gu_val ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 81 80 82 4 arch/arm/kernel/signal.c:300 discrim 4 (set (reg/f:SI 3 r3 [208])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 72 [0x48]))) 4 {*arm_addsi3} (nil))

(insn 82 81 83 4 arch/arm/kernel/signal.c:300 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [208])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691078))
            (set (reg/v:SI 2 r2 [orig:159 __gu_val ] [159])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [208])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691078))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 83 82 84 4 arch/arm/kernel/signal.c:300 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 40 [0x28])) [0 <variable>.uregs+40 S4 A32])
        (reg/v:SI 2 r2 [orig:159 __gu_val ] [159])) 167 {*arm_movsi_insn} (nil))

(insn 84 83 85 4 arch/arm/kernel/signal.c:301 discrim 4 (set (reg/f:SI 3 r3 [209])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 76 [0x4c]))) 4 {*arm_addsi3} (nil))

(insn 85 84 86 4 arch/arm/kernel/signal.c:301 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [209])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691083))
            (set (reg/v:SI 2 r2 [orig:158 __gu_val ] [158])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [209])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691083))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 86 85 87 4 arch/arm/kernel/signal.c:301 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
        (reg/v:SI 2 r2 [orig:158 __gu_val ] [158])) 167 {*arm_movsi_insn} (nil))

(insn 87 86 88 4 arch/arm/kernel/signal.c:302 discrim 4 (set (reg/f:SI 3 r3 [210])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn 88 87 89 4 arch/arm/kernel/signal.c:302 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [210])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691088))
            (set (reg/v:SI 2 r2 [orig:157 __gu_val ] [157])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [210])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691088))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 89 88 90 4 arch/arm/kernel/signal.c:302 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 2 r2 [orig:157 __gu_val ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 90 89 91 4 arch/arm/kernel/signal.c:303 discrim 4 (set (reg/f:SI 3 r3 [211])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn 91 90 92 4 arch/arm/kernel/signal.c:303 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [211])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691093))
            (set (reg/v:SI 2 r2 [orig:156 __gu_val ] [156])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [211])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691093))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 92 91 93 4 arch/arm/kernel/signal.c:303 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])
        (reg/v:SI 2 r2 [orig:156 __gu_val ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 93 92 94 4 arch/arm/kernel/signal.c:304 discrim 4 (set (reg/f:SI 3 r3 [212])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 88 [0x58]))) 4 {*arm_addsi3} (nil))

(insn 94 93 95 4 arch/arm/kernel/signal.c:304 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [212])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691098))
            (set (reg/v:SI 2 r2 [orig:155 __gu_val ] [155])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [212])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691098))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 95 94 96 4 arch/arm/kernel/signal.c:304 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])
        (reg/v:SI 2 r2 [orig:155 __gu_val ] [155])) 167 {*arm_movsi_insn} (nil))

(insn 96 95 97 4 arch/arm/kernel/signal.c:305 discrim 4 (set (reg/f:SI 3 r3 [213])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 92 [0x5c]))) 4 {*arm_addsi3} (nil))

(insn 97 96 98 4 arch/arm/kernel/signal.c:305 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [213])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691103))
            (set (reg/v:SI 2 r2 [orig:154 __gu_val ] [154])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [213])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691103))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 98 97 99 4 arch/arm/kernel/signal.c:305 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg/v:SI 2 r2 [orig:154 __gu_val ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 99 98 100 4 arch/arm/kernel/signal.c:306 discrim 4 (set (reg/f:SI 2 r2 [214])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (nil))

(insn 100 99 104 4 arch/arm/kernel/signal.c:306 discrim 4 (parallel [
            (set (reg/v:SI 8 r8 [orig:170 err ] [170])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 2 r2 [214])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691108))
            (set (reg/v:SI 3 r3 [orig:153 __gu_val ] [153])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 2 r2 [214])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 8 r8 [orig:170 err ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691108))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 104 100 101 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:153 __gu_val ] [153])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 101 104 102 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 2 r2 [orig:146 D.26146 ] [146])
        (and:SI (reg/v:SI 3 r3 [orig:153 __gu_val ] [153])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(insn 102 101 105 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 2 r2 [orig:146 D.26146 ] [146])) 167 {*arm_movsi_insn} (nil))

(jump_insn 105 102 106 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 106 105 107 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 3 r3 [orig:148 mode ] [148])
        (and:SI (reg/v:SI 3 r3 [orig:153 __gu_val ] [153])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 108 107 109 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:148 mode ] [148])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 109 108 110 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 145)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 5 -> ( 10 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  10 [28.0%] 
;; Succ edge  6 [72.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  5 [72.0%]  (fallthru)
(note 110 109 111 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 111 110 112 6 NOTE_INSN_DELETED)

(note 112 111 116 6 NOTE_INSN_DELETED)

(note 116 112 120 6 NOTE_INSN_DELETED)

(note 120 116 121 6 NOTE_INSN_DELETED)

(note 121 120 114 6 NOTE_INSN_DELETED)

(insn 114 121 115 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 1 r1 [218])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)
        (nil)))

(insn 115 114 118 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [orig:220 elf_hwcap ] [220])
        (mem/c/i:SI (reg/f:SI 1 r1 [218]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 118 115 122 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [222])
        (zero_extract:SI (reg:SI 1 r1 [orig:220 elf_hwcap ] [220])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 122 118 123 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 3 r3 [226])
                (and:SI (eq:SI (reg/v:SI 3 r3 [orig:148 mode ] [148])
                        (const_int 0 [0x0]))
                    (reg:SI 1 r1 [222])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 123 122 124 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [226])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 124 123 125 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 145)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 10 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 8 [r8] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
(code_label 125 124 126 7 67 "" [1 uses])

(note 126 125 131 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 131 126 127 7 NOTE_INSN_DELETED)

(insn 127 131 128 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:185 (set (reg:SI 3 r3 [orig:147 D.26138 ] [147])
        (and:SI (reg:SI 2 r2 [orig:146 D.26146 ] [146])
            (const_int -208 [0xffffffffffffff30]))) 67 {*arm_andsi3_insn} (nil))

(insn 128 127 248 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:185 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 3 r3 [orig:147 D.26138 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 248 128 130 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (reg/f:SI 2 r2 [227])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>)
        (nil)))

(insn 130 248 132 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (reg:SI 6 r6 [orig:229 elf_hwcap ] [229])
        (mem/c/i:SI (reg/f:SI 2 r2 [227]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512dc3c0 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 132 130 133 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 6 r6 [orig:229 elf_hwcap ] [229])
                        (const_int 8 [0x8]))
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [228])
                (and:SI (reg:SI 6 r6 [orig:229 elf_hwcap ] [229])
                    (const_int 8 [0x8])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 133 132 134 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:186 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 134 133 135 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 135 134 232 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:189 (set (reg:SI 6 r6 [orig:149 D.26136 ] [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 232 135 233 8 (set (pc)
        (label_ref 148)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 233 232 138)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%] 
(code_label 138 233 139 9 69 "" [1 uses])

(note 139 138 140 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:187 (set (reg:SI 3 r3 [230])
        (ior:SI (reg:SI 3 r3 [orig:147 D.26138 ] [147])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 141 140 234 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:187 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:174 regs ] [174])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (reg:SI 3 r3 [230])) 167 {*arm_movsi_insn} (nil))

(jump_insn 234 141 235 9 (set (pc)
        (label_ref 148)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 235 234 145)

;; Start of basic block ( 5 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  5 [28.0%] 
;; Pred edge  6 [50.0%] 
(code_label 145 235 146 10 68 "" [2 uses])

(note 146 145 147 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 147 146 148 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:177 (set (reg:SI 6 r6 [orig:149 D.26136 ] [149])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 8 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 148 147 149 11 70 "" [2 uses])

(note 149 148 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 151 149 150 11 NOTE_INSN_DELETED)

(insn 150 151 152 11 arch/arm/kernel/signal.c:308 (set (reg:SI 6 r6 [231])
        (xor:SI (reg:SI 6 r6 [orig:149 D.26136 ] [149])
            (const_int 1 [0x1]))) 96 {*arm_xorsi3} (nil))

(insn 152 150 153 11 arch/arm/kernel/signal.c:320 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 6 r6 [231])
                        (reg/v:SI 8 r8 [orig:170 err ] [170]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:134 err.477 ] [134])
                (ior:SI (reg:SI 6 r6 [231])
                    (reg/v:SI 8 r8 [orig:170 err ] [170])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 153 152 154 11 arch/arm/kernel/signal.c:320 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 216)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 11 -> ( 12 18)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [61.0%]  (fallthru)
;; Succ edge  18 [39.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [61.0%]  (fallthru)
(note 154 153 155 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 155 154 245 12 arch/arm/kernel/signal.c:310 (set (reg/v/f:SI 2 r2 [orig:171 aux ] [171])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 232 [0xe8]))) 4 {*arm_addsi3} (nil))

(insn 245 155 158 12 arch/arm/kernel/signal.c:222 discrim 4 (set (reg/v:SI 3 r3 [orig:138 err ] [138])
        (reg/v:SI 6 r6 [orig:134 err.477 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 158 245 159 12 arch/arm/kernel/signal.c:222 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:138 err ] [138])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/v/f:SI 2 r2 [orig:171 aux ] [171])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691113))
            (set (reg/v:SI 1 r1 [orig:139 __gu_val ] [139])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/v/f:SI 2 r2 [orig:171 aux ] [171])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691113))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 159 158 160 12 arch/arm/kernel/signal.c:223 discrim 4 (set (reg/f:SI 2 r2 [233])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 236 [0xec]))) 4 {*arm_addsi3} (nil))

(insn 160 159 161 12 arch/arm/kernel/signal.c:223 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:138 err ] [138])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 2 r2 [233])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691118))
            (set (reg/v:SI 0 r0 [orig:140 __gu_val ] [140])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 2 r2 [233])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:138 err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691118))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 161 160 162 12 arch/arm/kernel/signal.c:225 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:138 err ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 162 161 163 12 arch/arm/kernel/signal.c:225 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 17 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  17 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 163 162 164 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 164 163 165 13 NOTE_INSN_DELETED)

(note 165 164 168 13 NOTE_INSN_DELETED)

(note 168 165 169 13 NOTE_INSN_DELETED)

(note 169 168 171 13 NOTE_INSN_DELETED)

(note 171 169 172 13 NOTE_INSN_DELETED)

(note 172 171 173 13 NOTE_INSN_DELETED)

(note 173 172 167 13 NOTE_INSN_DELETED)

(insn 167 173 174 13 arch/arm/kernel/signal.c:227 (set (reg:SI 3 r3 [237])
        (const_int 1447448577 [0x56465001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1447448577 [0x56465001])
        (nil)))

(insn 174 167 175 13 arch/arm/kernel/signal.c:227 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (ior:SI (ne:SI (reg/v:SI 0 r0 [orig:140 __gu_val ] [140])
                    (const_int 288 [0x120]))
                (ne:SI (reg/v:SI 1 r1 [orig:139 __gu_val ] [139])
                    (reg:SI 3 r3 [237])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(jump_insn 175 174 176 13 arch/arm/kernel/signal.c:227 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 180)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  14 [71.0%]  (fallthru)
;; Succ edge  15 [29.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  13 [71.0%]  (fallthru)
(note 176 175 177 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 177 176 236 14 arch/arm/kernel/signal.c:228 (set (reg/v:SI 6 r6 [orig:134 err.477 ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(jump_insn 236 177 237 14 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 237 236 180)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  13 [29.0%] 
(code_label 180 237 181 15 73 "" [1 uses])

(note 181 180 182 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 182 181 184 15 NOTE_INSN_DELETED)

(note 184 182 185 15 NOTE_INSN_DELETED)

(note 185 184 190 15 NOTE_INSN_DELETED)

(note 190 185 252 15 NOTE_INSN_DELETED)

(insn 252 190 240 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 240 252 187 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 187 240 241 15 arch/arm/kernel/signal.c:234 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 240 [0xf0]))) 4 {*arm_addsi3} (nil))

(insn 241 187 188 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
        (and:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 188 241 186 15 arch/arm/kernel/signal.c:234 (set (reg:SI 2 r2)
        (const_int 256 [0x100])) 167 {*arm_movsi_insn} (nil))

(insn 186 188 189 15 arch/arm/kernel/signal.c:234 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn 189 186 192 15 arch/arm/kernel/signal.c:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x10f3de80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 192 189 193 15 arch/arm/kernel/signal.c:239 discrim 4 (set (reg/f:SI 3 r3 [245])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 496 [0x1f0]))) 4 {*arm_addsi3} (nil))

(insn 193 192 194 15 arch/arm/kernel/signal.c:239 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [245])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691123))
            (set (reg/v:SI 2 r2 [orig:141 __gu_val ] [141])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [245])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691123))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 194 193 195 15 arch/arm/kernel/signal.c:239 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
        (reg/v:SI 2 r2 [orig:141 __gu_val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 195 194 196 15 arch/arm/kernel/signal.c:244 discrim 4 (set (reg/f:SI 3 r3 [246])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 504 [0x1f8]))) 4 {*arm_addsi3} (nil))

(insn 196 195 197 15 arch/arm/kernel/signal.c:244 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [246])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691128))
            (set (reg/v:SI 2 r2 [orig:142 __gu_val ] [142])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [246])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691128))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 197 196 200 15 arch/arm/kernel/signal.c:246 (set (reg/v:SI 2 r2 [orig:137 fpexc ] [137])
        (ior:SI (reg/v:SI 2 r2 [orig:142 __gu_val ] [142])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn 200 197 198 15 arch/arm/kernel/signal.c:251 discrim 4 (set (reg/f:SI 3 r3 [248])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 508 [0x1fc]))) 4 {*arm_addsi3} (nil))

(insn 198 200 199 15 arch/arm/kernel/signal.c:249 (set (reg:SI 2 r2 [247])
        (and:SI (reg/v:SI 2 r2 [orig:137 fpexc ] [137])
            (const_int 1879048191 [0x6fffffff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
        (nil)))

(insn 199 198 201 15 arch/arm/kernel/signal.c:249 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
        (reg:SI 2 r2 [247])) 167 {*arm_movsi_insn} (nil))

(insn 201 199 202 15 arch/arm/kernel/signal.c:251 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [248])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691133))
            (set (reg/v:SI 2 r2 [orig:143 __gu_val ] [143])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 3 r3 [248])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691133))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 202 201 203 15 arch/arm/kernel/signal.c:251 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                (const_int 696 [0x2b8])) [0 <variable>.vfpstate.hard.fpinst+0 S4 A64])
        (reg/v:SI 2 r2 [orig:143 __gu_val ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 203 202 204 15 arch/arm/kernel/signal.c:252 discrim 4 (set (reg/f:SI 4 r4 [249])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 sf ] [175])
            (const_int 512 [0x200]))) 4 {*arm_addsi3} (nil))

(insn 204 203 206 15 arch/arm/kernel/signal.c:252 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 4 r4 [249])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691138))
            (set (reg/v:SI 3 r3 [orig:144 __gu_val ] [144])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 4 r4 [249])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691138))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 206 204 205 15 arch/arm/kernel/signal.c:254 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:133 err.480 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 205 206 207 15 arch/arm/kernel/signal.c:252 discrim 5 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 thread ] [136])
                (const_int 700 [0x2bc])) [0 <variable>.vfpstate.hard.fpinst2+0 S4 A32])
        (reg/v:SI 3 r3 [orig:144 __gu_val ] [144])) 167 {*arm_movsi_insn} (nil))

(jump_insn 207 205 208 15 arch/arm/kernel/signal.c:254 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  16 [29.0%]  (fallthru)
;; Succ edge  17 [71.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [29.0%]  (fallthru)
(note 208 207 209 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 209 208 210 16 arch/arm/kernel/signal.c:255 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:136 thread ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 210 209 238 16 arch/arm/kernel/signal.c:255 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_flush_hwstate") [flags 0x41] <function_decl 0x10b07700 vfp_flush_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 238 210 239 16 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 239 238 213)

;; Start of basic block ( 12 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  12 [50.0%] 
;; Pred edge  15 [71.0%] 
(code_label 213 239 214 17 72 "" [2 uses])

(note 214 213 215 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 215 214 216 17 arch/arm/kernel/signal.c:226 (set (reg/v:SI 6 r6 [orig:134 err.477 ] [134])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 11 14 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  11 [39.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
(code_label 216 215 217 18 71 "" [3 uses])

(note 217 216 222 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 222 217 228 18 arch/arm/kernel/signal.c:325 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:134 err.477 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 228 222 247 18 arch/arm/kernel/signal.c:325 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 247 228 250 NOTE_INSN_DELETED)

(note 250 247 0 NOTE_INSN_DELETED)


;; Function sys_rt_sigreturn (sys_rt_sigreturn)[0:1445]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 78.
verify found no changes in insn with uid = 78.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 14 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)

Pass 0 for finding allocno costs

    a1 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r154,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r154: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r154,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 66(l0): point = 0
   Insn 60(l0): point = 2
   Insn 53(l0): point = 5
   Insn 52(l0): point = 7
   Insn 51(l0): point = 9
   Insn 73(l0): point = 11
   Insn 50(l0): point = 13
   Insn 72(l0): point = 15
   Insn 70(l0): point = 18
   Insn 42(l0): point = 20
   Insn 40(l0): point = 23
   Insn 39(l0): point = 25
   Insn 37(l0): point = 27
   Insn 36(l0): point = 29
   Insn 35(l0): point = 31
   Insn 34(l0): point = 33
   Insn 31(l0): point = 36
   Insn 30(l0): point = 38
   Insn 28(l0): point = 40
   Insn 27(l0): point = 42
   Insn 23(l0): point = 45
   Insn 22(l0): point = 47
   Insn 21(l0): point = 49
   Insn 76(l0): point = 54
   Insn 20(l0): point = 56
   Insn 14(l0): point = 59
   Insn 10(l0): point = 61
   Insn 78(l0): point = 63
   Insn 13(l0): point = 65
   Insn 11(l0): point = 67
   Insn 75(l0): point = 69
   Insn 74(l0): point = 71
   Insn 2(l0): point = 73
 a0(r139): [18..20] [3..5]
 a1(r154): [10..15]
 a2(r144): [21..73]
 a3(r141): [32..38]
 a4(r142): [34..67]
 a5(r137): [48..54]
 a6(r136): [51..51] [49..49]
 a7(r151): [55..56]
 a8(r145): [57..71]
 a9(r147): [62..63]
Compressing live ranges: from 76 to 22 - 28%
Ranges after the compression:
 a0(r139): [4..5] [0..1]
 a1(r154): [2..3]
 a2(r144): [6..21]
 a3(r141): [7..9]
 a4(r142): [8..19]
 a5(r137): [10..13]
 a6(r136): [12..12] [11..11]
 a7(r151): [14..15]
 a8(r145): [16..20]
 a9(r147): [17..18]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r154,l0) conflicts:
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a2(r144,l0) conflicts: a3(r141,l0) a4(r142,l0) a5(r137,l0) a6(r136,l0) a7(r151,l0) a8(r145,l0) a9(r147,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r141,l0) conflicts: a2(r144,l0) a4(r142,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a4(r142,l0) conflicts: a2(r144,l0) a3(r141,l0) a5(r137,l0) a6(r136,l0) a7(r151,l0) a8(r145,l0) a9(r147,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r137,l0) conflicts: a2(r144,l0) a4(r142,l0) a6(r136,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a6(r136,l0) conflicts: a2(r144,l0) a4(r142,l0) a5(r137,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a7(r151,l0) conflicts: a2(r144,l0) a4(r142,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a8(r145,l0) conflicts: a2(r144,l0) a4(r142,l0) a9(r147,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a9(r147,l0) conflicts: a2(r144,l0) a4(r142,l0) a8(r145,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a5(r137)<->a7(r151)@1000:move
  regions=1, blocks=9, points=22
    allocnos=10, copies=1, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r139 1r154 2r144 3r141 4r142 5r137 6r136 7r151 8r145 9r147
    modified regnos: 136 137 139 141 142 144 145 147 151 154
    border:
    Pressure: GENERAL_REGS=5
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
      Pushing a6(r136,l0)
      Pushing a9(r147,l0)
      Pushing a7(r151,l0)
      Pushing a3(r141,l0)
      Pushing a0(r139,l0)
      Pushing a1(r154,l0)
      Pushing a8(r145,l0)
      Pushing a5(r137,l0)
      Pushing a4(r142,l0)
      Pushing a2(r144,l0)
      Popping a2(r144,l0)  -- assign reg 4
      Popping a4(r142,l0)  -- assign reg 5
      Popping a5(r137,l0)  -- assign reg 3
      Popping a8(r145,l0)  -- assign reg 3
      Popping a1(r154,l0)  -- assign reg 3
      Popping a0(r139,l0)  -- assign reg 0
      Popping a3(r141,l0)  -- assign reg 1
      Popping a7(r151,l0)  -- assign reg 3
      Popping a9(r147,l0)  -- assign reg 2
      Popping a6(r136,l0)  -- assign reg 2
Disposition:
    6:r136 l0     2    5:r137 l0     3    0:r139 l0     0    3:r141 l0     1
    4:r142 l0     5    2:r144 l0     4    8:r145 l0     3    9:r147 l0     2
    7:r151 l0     3    1:r154 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 13, dead_or_set: 144
insn=74, live_throughout: 0, 13, 144, dead_or_set: 145
insn=75, live_throughout: 0, 13, 144, dead_or_set: 145
insn=11, live_throughout: 0, 13, 144, 145, dead_or_set: 142
insn=13, live_throughout: 0, 13, 142, 144, 145, dead_or_set: 
insn=78, live_throughout: 0, 13, 24, 142, 144, 145, dead_or_set: 147
insn=10, live_throughout: 0, 13, 24, 142, 144, 145, dead_or_set: 147
insn=14, live_throughout: 0, 13, 142, 144, 145, dead_or_set: 
insn=20, live_throughout: 0, 13, 142, 144, dead_or_set: 145, 151
insn=76, live_throughout: 0, 13, 142, 144, dead_or_set: 137, 151
insn=21, live_throughout: 0, 13, 142, 144, dead_or_set: 136, 137
insn=22, live_throughout: 0, 13, 142, 144, dead_or_set: 137
insn=23, live_throughout: 0, 13, 142, 144, dead_or_set: 
insn=27, live_throughout: 0, 13, 142, 144, dead_or_set: 1
insn=28, live_throughout: 13, 142, 144, dead_or_set: 0, 1, 14
insn=30, live_throughout: 13, 142, 144, dead_or_set: 0, 141
insn=31, live_throughout: 13, 141, 142, 144, dead_or_set: 
insn=34, live_throughout: 13, 141, 144, dead_or_set: 0, 142
insn=35, live_throughout: 0, 13, 144, dead_or_set: 1, 141
insn=36, live_throughout: 0, 1, 13, 144, dead_or_set: 2
insn=37, live_throughout: 13, 144, dead_or_set: 0, 1, 2, 14
insn=39, live_throughout: 13, 14, 144, dead_or_set: 0
insn=40, live_throughout: 13, 14, 144, dead_or_set: 
insn=42, live_throughout: 13, 14, dead_or_set: 139, 144
insn=70, live_throughout: 13, 14, 139, dead_or_set: 
insn=45, live_throughout: 13, dead_or_set: 
insn=72, live_throughout: 13, dead_or_set: 154
insn=50, live_throughout: 13, 154, dead_or_set: 0
insn=73, live_throughout: 0, 13, dead_or_set: 154
insn=51, live_throughout: 0, 13, dead_or_set: 1, 154
insn=52, live_throughout: 13, dead_or_set: 0, 1, 14
insn=53, live_throughout: 13, 14, dead_or_set: 139
insn=54, live_throughout: 13, 14, 139, dead_or_set: 
insn=60, live_throughout: 13, 14, dead_or_set: 0, 139
insn=66, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 78 (nil))
changing reg in insn 21
changing reg in insn 76
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 53
changing reg in insn 42
changing reg in insn 60
changing reg in insn 30
changing reg in insn 35
changing reg in insn 11
changing reg in insn 21
changing reg in insn 34
changing reg in insn 27
changing reg in insn 13
changing reg in insn 2
changing reg in insn 42
changing reg in insn 36
changing reg in insn 11
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 20
changing reg in insn 10
changing reg in insn 78
changing reg in insn 10
changing reg in insn 20
changing reg in insn 76
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 51
Spilling for insn 74.
Using reg 2 for reload 0
Spilling for insn 10.
Spilling for insn 72.
Using reg 2 for reload 0

Reloads for insn # 74
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [145])
                                                        (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [145])
                                                        (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])

Reloads for insn # 72
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 76.
deleting insn with uid = 35.
deleting insn with uid = 60.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 14 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)


sys_rt_sigreturn

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={7d,3u} r2={9d,4u} r3={10d,7u} r4={1d,3u} r5={1d,4u} r12={4d} r13={1d,13u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 431{383d,48u,0e} in 32{29 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 12 2 NOTE_INSN_DELETED)

(note 12 7 2 2 NOTE_INSN_DELETED)

(insn 2 12 80 2 arch/arm/kernel/signal.c:358 (set (reg/v/f:SI 4 r4 [orig:144 regs ] [144])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 80 2 74 2 arch/arm/kernel/signal.c:362 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 74 80 75 2 arch/arm/kernel/signal.c:362 (set (reg:SI 3 r3 [145])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 75 74 11 2 arch/arm/kernel/signal.c:362 (set (reg:SI 3 r3 [145])
        (and:SI (reg:SI 3 r3 [145])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 75 13 2 arch/arm/kernel/signal.c:369 (set (reg:SI 5 r5 [orig:142 D.24470 ] [142])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:144 regs ] [144])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 11 78 2 arch/arm/kernel/signal.c:369 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 5 r5 [orig:142 D.24470 ] [142])
                (const_int 3 [0x3])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 78 13 10 2 arch/arm/kernel/signal.c:362 (set (reg/f:SI 2 r2 [147])
        (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)
        (nil)))

(insn 10 78 14 2 arch/arm/kernel/signal.c:362 (set (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [145])
                (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])
        (reg/f:SI 2 r2 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)
        (nil)))

(jump_insn 14 10 15 2 arch/arm/kernel/signal.c:369 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [29.0%] 
;; Succ edge  3 [71.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%]  (fallthru)
(note 15 14 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 15 21 3 arch/arm/kernel/signal.c:374 (set (reg:SI 3 r3 [orig:151 <variable>.addr_limit ] [151])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [145])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 3 arch/arm/kernel/signal.c:374 (parallel [
            (set (reg/v:SI 3 r3 [orig:137 flag ] [137])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg:SI 5 r5 [orig:142 D.24470 ] [142])
                        (const_int 880 [0x370])
                        (reg/v:SI 3 r3 [orig:137 flag ] [137])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8636693))
            (set (reg/v:SI 2 r2 [orig:136 roksum ] [136])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg:SI 5 r5 [orig:142 D.24470 ] [142])
                        (const_int 880 [0x370])
                        (reg/v:SI 3 r3 [orig:137 flag ] [137])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8636693))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 22 21 23 3 arch/arm/kernel/signal.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 flag ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 3 arch/arm/kernel/signal.c:374 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 25 24 29 4 NOTE_INSN_DELETED)

(note 29 25 27 4 NOTE_INSN_DELETED)

(insn 27 29 28 4 arch/arm/kernel/signal.c:377 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 5 r5 [orig:142 D.24470 ] [142])
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(call_insn 28 27 30 4 arch/arm/kernel/signal.c:377 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("restore_sigframe") [flags 0x3] <function_decl 0x1140a380 restore_sigframe>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 28 31 4 arch/arm/kernel/signal.c:377 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1 [orig:141 D.24476 ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 31 30 32 4 arch/arm/kernel/signal.c:377 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [71.0%] 
;; Succ edge  5 [29.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 33 32 38 5 NOTE_INSN_DELETED)

(note 38 33 34 5 NOTE_INSN_DELETED)

(insn 34 38 36 5 arch/arm/kernel/signal.c:380 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 5 r5 [orig:142 D.24470 ] [142])
            (const_int 136 [0x88]))) 4 {*arm_addsi3} (nil))

(insn 36 34 37 5 arch/arm/kernel/signal.c:380 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:144 regs ] [144])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 37 36 39 5 arch/arm/kernel/signal.c:380 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_sigaltstack") [flags 0x41] <function_decl 0x10f0e000 do_sigaltstack>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 37 40 5 arch/arm/kernel/signal.c:380 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int -14 [0xfffffffffffffff2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 40 39 41 5 arch/arm/kernel/signal.c:380 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3782 [0xec6])
        (nil)))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [37.8%] 
;; Succ edge  6 [62.2%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [62.2%]  (fallthru)
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 70 6 arch/arm/kernel/signal.c:383 (set (reg:SI 0 r0 [orig:139 D.24481 ] [139])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:144 regs ] [144]) [0 <variable>.uregs+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 70 42 71 6 arch/arm/kernel/signal.c:383 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 71 70 45)

;; Start of basic block ( 3 2 5 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [71.0%] 
;; Pred edge  2 [29.0%] 
;; Pred edge  5 [37.8%] 
;; Pred edge  4 [71.0%] 
(code_label 45 71 46 7 78 "" [4 uses])

(note 46 45 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 48 46 81 7 NOTE_INSN_DELETED)

(insn 81 48 72 7 arch/arm/kernel/signal.c:386 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 72 81 50 7 arch/arm/kernel/signal.c:386 (set (reg:SI 3 r3 [154])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 50 72 73 7 arch/arm/kernel/signal.c:386 (set (reg:SI 0 r0)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 73 50 51 7 arch/arm/kernel/signal.c:386 (set (reg:SI 3 r3 [154])
        (and:SI (reg:SI 3 r3 [154])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 51 73 52 7 arch/arm/kernel/signal.c:386 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [154])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 52 51 53 7 arch/arm/kernel/signal.c:386 (parallel [
            (call (mem:SI (symbol_ref:SI ("force_sig") [flags 0x41] <function_decl 0x10f06c80 force_sig>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 53 52 54 7 arch/arm/kernel/signal.c:387 (set (reg:SI 0 r0 [orig:139 D.24481 ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 54 53 55 8 79 "" [1 uses])

(note 55 54 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 66 55 77 8 arch/arm/kernel/signal.c:388 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 77 66 79 NOTE_INSN_DELETED)

(note 79 77 0 NOTE_INSN_DELETED)


;; Function sys_sigreturn (sys_sigreturn)[0:1444]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 68.
verify found no changes in insn with uid = 68.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)

Pass 0 for finding allocno costs

    a1 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 56(l0): point = 0
   Insn 50(l0): point = 2
   Insn 43(l0): point = 5
   Insn 42(l0): point = 7
   Insn 41(l0): point = 9
   Insn 63(l0): point = 11
   Insn 40(l0): point = 13
   Insn 62(l0): point = 15
   Insn 60(l0): point = 18
   Insn 32(l0): point = 20
   Insn 30(l0): point = 23
   Insn 29(l0): point = 25
   Insn 27(l0): point = 27
   Insn 26(l0): point = 29
   Insn 23(l0): point = 32
   Insn 22(l0): point = 34
   Insn 21(l0): point = 36
   Insn 66(l0): point = 41
   Insn 20(l0): point = 43
   Insn 14(l0): point = 46
   Insn 10(l0): point = 48
   Insn 68(l0): point = 50
   Insn 13(l0): point = 52
   Insn 11(l0): point = 54
   Insn 65(l0): point = 56
   Insn 64(l0): point = 58
   Insn 2(l0): point = 60
 a0(r139): [18..20] [3..5]
 a1(r151): [10..15]
 a2(r143): [21..60]
 a3(r141): [30..54]
 a4(r137): [35..41]
 a5(r136): [38..38] [36..36]
 a6(r150): [42..43]
 a7(r144): [44..58]
 a8(r146): [49..50]
Compressing live ranges: from 63 to 20 - 31%
Ranges after the compression:
 a0(r139): [4..5] [0..1]
 a1(r151): [2..3]
 a2(r143): [6..19]
 a3(r141): [7..17]
 a4(r137): [8..11]
 a5(r136): [10..10] [9..9]
 a6(r150): [12..13]
 a7(r144): [14..18]
 a8(r146): [15..16]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r151,l0) conflicts:
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a2(r143,l0) conflicts: a3(r141,l0) a4(r137,l0) a5(r136,l0) a6(r150,l0) a7(r144,l0) a8(r146,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r141,l0) conflicts: a2(r143,l0) a4(r137,l0) a5(r136,l0) a6(r150,l0) a7(r144,l0) a8(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a4(r137,l0) conflicts: a2(r143,l0) a3(r141,l0) a5(r136,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a5(r136,l0) conflicts: a2(r143,l0) a3(r141,l0) a4(r137,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a6(r150,l0) conflicts: a2(r143,l0) a3(r141,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a7(r144,l0) conflicts: a2(r143,l0) a3(r141,l0) a8(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a8(r146,l0) conflicts: a2(r143,l0) a3(r141,l0) a7(r144,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a4(r137)<->a6(r150)@1000:move
  regions=1, blocks=8, points=20
    allocnos=9, copies=1, conflicts=0, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r139 1r151 2r143 3r141 4r137 5r136 6r150 7r144 8r146
    modified regnos: 136 137 139 141 143 144 146 150 151
    border:
    Pressure: GENERAL_REGS=5
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
      Pushing a5(r136,l0)
      Pushing a8(r146,l0)
      Pushing a6(r150,l0)
      Pushing a0(r139,l0)
      Pushing a1(r151,l0)
      Pushing a7(r144,l0)
      Pushing a4(r137,l0)
      Pushing a3(r141,l0)
      Pushing a2(r143,l0)
      Popping a2(r143,l0)  -- assign reg 4
      Popping a3(r141,l0)  -- assign reg 1
      Popping a4(r137,l0)  -- assign reg 3
      Popping a7(r144,l0)  -- assign reg 3
      Popping a1(r151,l0)  -- assign reg 3
      Popping a0(r139,l0)  -- assign reg 0
      Popping a6(r150,l0)  -- assign reg 3
      Popping a8(r146,l0)  -- assign reg 2
      Popping a5(r136,l0)  -- assign reg 2
Disposition:
    5:r136 l0     2    4:r137 l0     3    0:r139 l0     0    3:r141 l0     1
    2:r143 l0     4    7:r144 l0     3    8:r146 l0     2    6:r150 l0     3
    1:r151 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 13, dead_or_set: 143
insn=64, live_throughout: 0, 13, 143, dead_or_set: 144
insn=65, live_throughout: 0, 13, 143, dead_or_set: 144
insn=11, live_throughout: 0, 13, 143, 144, dead_or_set: 141
insn=13, live_throughout: 0, 13, 141, 143, 144, dead_or_set: 
insn=68, live_throughout: 0, 13, 24, 141, 143, 144, dead_or_set: 146
insn=10, live_throughout: 0, 13, 24, 141, 143, 144, dead_or_set: 146
insn=14, live_throughout: 0, 13, 141, 143, 144, dead_or_set: 
insn=20, live_throughout: 0, 13, 141, 143, dead_or_set: 144, 150
insn=66, live_throughout: 0, 13, 141, 143, dead_or_set: 137, 150
insn=21, live_throughout: 0, 13, 141, 143, dead_or_set: 136, 137
insn=22, live_throughout: 0, 13, 141, 143, dead_or_set: 137
insn=23, live_throughout: 0, 13, 141, 143, dead_or_set: 
insn=26, live_throughout: 0, 13, 143, dead_or_set: 1, 141
insn=27, live_throughout: 13, 143, dead_or_set: 0, 1, 14
insn=29, live_throughout: 13, 14, 143, dead_or_set: 0
insn=30, live_throughout: 13, 14, 143, dead_or_set: 
insn=32, live_throughout: 13, 14, dead_or_set: 139, 143
insn=60, live_throughout: 13, 14, 139, dead_or_set: 
insn=35, live_throughout: 13, dead_or_set: 
insn=62, live_throughout: 13, dead_or_set: 151
insn=40, live_throughout: 13, 151, dead_or_set: 0
insn=63, live_throughout: 0, 13, dead_or_set: 151
insn=41, live_throughout: 0, 13, dead_or_set: 1, 151
insn=42, live_throughout: 13, dead_or_set: 0, 1, 14
insn=43, live_throughout: 13, 14, dead_or_set: 139
insn=44, live_throughout: 13, 14, 139, dead_or_set: 
insn=50, live_throughout: 13, 14, dead_or_set: 0, 139
insn=56, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 68 (nil))
changing reg in insn 21
changing reg in insn 66
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 43
changing reg in insn 32
changing reg in insn 50
changing reg in insn 11
changing reg in insn 21
changing reg in insn 13
changing reg in insn 26
changing reg in insn 2
changing reg in insn 32
changing reg in insn 11
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 20
changing reg in insn 10
changing reg in insn 68
changing reg in insn 10
changing reg in insn 20
changing reg in insn 66
changing reg in insn 63
changing reg in insn 62
changing reg in insn 63
changing reg in insn 41
Spilling for insn 64.
Using reg 2 for reload 0
Spilling for insn 10.
Spilling for insn 62.
Using reg 2 for reload 0

Reloads for insn # 64
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                                                        (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                                                        (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])

Reloads for insn # 62
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 66.
deleting insn with uid = 26.
deleting insn with uid = 50.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


sys_sigreturn

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={5d,4u} r2={7d,3u} r3={9d,7u} r4={1d,2u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 298{261d,37u,0e} in 26{24 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 12 2 NOTE_INSN_DELETED)

(note 12 7 2 2 NOTE_INSN_DELETED)

(insn 2 12 70 2 arch/arm/kernel/signal.c:328 (set (reg/v/f:SI 4 r4 [orig:143 regs ] [143])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 70 2 64 2 arch/arm/kernel/signal.c:332 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 64 70 65 2 arch/arm/kernel/signal.c:332 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 65 64 11 2 arch/arm/kernel/signal.c:332 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 65 13 2 arch/arm/kernel/signal.c:339 (set (reg:SI 1 r1 [orig:141 D.24451 ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:143 regs ] [143])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 11 68 2 arch/arm/kernel/signal.c:339 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:141 D.24451 ] [141])
                (const_int 3 [0x3])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 68 13 10 2 arch/arm/kernel/signal.c:332 (set (reg/f:SI 2 r2 [146])
        (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)
        (nil)))

(insn 10 68 14 2 arch/arm/kernel/signal.c:332 (set (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 712 [0x2c8])) [0 <variable>.restart_block.fn+0 S4 A64])
        (reg/f:SI 2 r2 [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("do_no_restart_syscall") [flags 0x41] <function_decl 0x10aeff00 do_no_restart_syscall>)
        (nil)))

(jump_insn 14 10 15 2 arch/arm/kernel/signal.c:339 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  6 [29.0%] 
;; Succ edge  3 [71.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%]  (fallthru)
(note 15 14 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 15 21 3 arch/arm/kernel/signal.c:344 (set (reg:SI 3 r3 [orig:150 <variable>.addr_limit ] [150])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 3 arch/arm/kernel/signal.c:344 (parallel [
            (set (reg/v:SI 3 r3 [orig:137 flag ] [137])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg:SI 1 r1 [orig:141 D.24451 ] [141])
                        (const_int 752 [0x2f0])
                        (reg/v:SI 3 r3 [orig:137 flag ] [137])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8632853))
            (set (reg/v:SI 2 r2 [orig:136 roksum ] [136])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg:SI 1 r1 [orig:141 D.24451 ] [141])
                        (const_int 752 [0x2f0])
                        (reg/v:SI 3 r3 [orig:137 flag ] [137])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8632853))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 22 21 23 3 arch/arm/kernel/signal.c:344 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 flag ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 3 arch/arm/kernel/signal.c:344 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (fallthru)
(note 24 23 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 24 27 4 NOTE_INSN_DELETED)

(call_insn 27 28 29 4 arch/arm/kernel/signal.c:347 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("restore_sigframe") [flags 0x3] <function_decl 0x1140a380 restore_sigframe>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 27 30 4 arch/arm/kernel/signal.c:347 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 4 arch/arm/kernel/signal.c:347 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  6 [61.0%] 
;; Succ edge  5 [39.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 60 5 arch/arm/kernel/signal.c:350 (set (reg:SI 0 r0 [orig:139 D.24458 ] [139])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:143 regs ] [143]) [0 <variable>.uregs+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 60 32 61 5 arch/arm/kernel/signal.c:350 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 61 60 35)

;; Start of basic block ( 3 2 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [71.0%] 
;; Pred edge  2 [29.0%] 
;; Pred edge  4 [61.0%] 
(code_label 35 61 36 6 84 "" [3 uses])

(note 36 35 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 38 36 71 6 NOTE_INSN_DELETED)

(insn 71 38 62 6 arch/arm/kernel/signal.c:353 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 62 71 40 6 arch/arm/kernel/signal.c:353 (set (reg:SI 3 r3 [151])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 40 62 63 6 arch/arm/kernel/signal.c:353 (set (reg:SI 0 r0)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 63 40 41 6 arch/arm/kernel/signal.c:353 (set (reg:SI 3 r3 [151])
        (and:SI (reg:SI 3 r3 [151])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 41 63 42 6 arch/arm/kernel/signal.c:353 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 42 41 43 6 arch/arm/kernel/signal.c:353 (parallel [
            (call (mem:SI (symbol_ref:SI ("force_sig") [flags 0x41] <function_decl 0x10f06c80 force_sig>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 43 42 44 6 arch/arm/kernel/signal.c:354 (set (reg:SI 0 r0 [orig:139 D.24458 ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 44 43 45 7 85 "" [1 uses])

(note 45 44 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 56 45 67 7 arch/arm/kernel/signal.c:355 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 67 56 69 NOTE_INSN_DELETED)

(note 69 67 0 NOTE_INSN_DELETED)


;; Function sys_sigaction (sys_sigaction)[0:1440]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 150.
rescanning insn with uid = 150.
deleting insn with uid = 150.
deleting insn with uid = 103.
scanning new insn with uid = 151.
rescanning insn with uid = 151.
deleting insn with uid = 151.
deleting insn with uid = 99.
scanning new insn with uid = 152.
rescanning insn with uid = 152.
deleting insn with uid = 152.
deleting insn with uid = 92.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 26 count 32 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 26 count 34 (  1.9)

Pass 0 for finding allocno costs

    a4 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a17(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a22(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a28(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a33(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a34(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r158,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a17(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a22(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a28(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a33(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a34(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r158,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 125(l0): point = 0
   Insn 119(l0): point = 2
   Insn 112(l0): point = 5
   Insn 133(l0): point = 8
   Insn 107(l0): point = 10
   Insn 106(l0): point = 12
   Insn 150(l0): point = 14
   Insn 148(l0): point = 16
   Insn 104(l0): point = 18
   Insn 102(l0): point = 20
   Insn 151(l0): point = 22
   Insn 147(l0): point = 24
   Insn 100(l0): point = 26
   Insn 97(l0): point = 29
   Insn 96(l0): point = 31
   Insn 95(l0): point = 33
   Insn 152(l0): point = 35
   Insn 93(l0): point = 37
   Insn 146(l0): point = 39
   Insn 90(l0): point = 42
   Insn 89(l0): point = 44
   Insn 88(l0): point = 46
   Insn 86(l0): point = 48
   Insn 145(l0): point = 50
   Insn 84(l0): point = 53
   Insn 83(l0): point = 55
   Insn 82(l0): point = 57
   Insn 144(l0): point = 62
   Insn 81(l0): point = 64
   Insn 136(l0): point = 66
   Insn 135(l0): point = 68
   Insn 76(l0): point = 71
   Insn 75(l0): point = 73
   Insn 74(l0): point = 75
   Insn 66(l0): point = 81
   Insn 64(l0): point = 83
   Insn 63(l0): point = 85
   Insn 62(l0): point = 87
   Insn 61(l0): point = 89
   Insn 58(l0): point = 92
   Insn 131(l0): point = 95
   Insn 53(l0): point = 97
   Insn 51(l0): point = 100
   Insn 50(l0): point = 102
   Insn 46(l0): point = 105
   Insn 44(l0): point = 107
   Insn 47(l0): point = 109
   Insn 43(l0): point = 111
   Insn 40(l0): point = 114
   Insn 143(l0): point = 116
   Insn 39(l0): point = 118
   Insn 41(l0): point = 120
   Insn 38(l0): point = 122
   Insn 37(l0): point = 124
   Insn 142(l0): point = 127
   Insn 35(l0): point = 129
   Insn 33(l0): point = 132
   Insn 32(l0): point = 134
   Insn 31(l0): point = 136
   Insn 29(l0): point = 139
   Insn 141(l0): point = 141
   Insn 27(l0): point = 144
   Insn 26(l0): point = 146
   Insn 25(l0): point = 148
   Insn 140(l0): point = 151
   Insn 22(l0): point = 154
   Insn 21(l0): point = 156
   Insn 20(l0): point = 158
   Insn 139(l0): point = 163
   Insn 19(l0): point = 165
   Insn 138(l0): point = 167
   Insn 137(l0): point = 169
   Insn 129(l0): point = 172
   Insn 11(l0): point = 174
   Insn 9(l0): point = 177
   Insn 4(l0): point = 179
   Insn 2(l0): point = 181
   Insn 8(l0): point = 183
 a0(r151): [79..81] [71..77] [8..10] [3..5]
 a1(r137): [11..39]
 a2(r135): [12..16]
 a3(r187): [13..14]
 a4(r188): [13..18]
 a5(r157): [19..179]
 a6(r136): [20..24]
 a7(r184): [21..22]
 a8(r185): [21..26]
 a9(r181): [34..35]
 a10(r182): [34..37]
 a11(r138): [40..50]
 a12(r179): [47..48]
 a13(r140): [51..62]
 a14(r139): [59..59] [57..57]
 a15(r178): [63..64]
 a16(r176): [65..68]
 a17(r175): [74..78]
 a18(r152): [95..97] [86..92]
 a19(r153): [172..174] [88..109]
 a20(r155): [90..181]
 a21(r146): [106..141]
 a22(r141): [108..112]
 a23(r142): [111..116]
 a24(r166): [112..120]
 a25(r143): [115..125]
 a26(r145): [119..137]
 a27(r156): [175..183] [121..171]
 a28(r147): [123..149]
 a29(r144): [124..127]
 a30(r164): [125..129]
 a31(r162): [137..139]
 a32(r148): [142..151]
 a33(r150): [152..163]
 a34(r149): [160..160] [158..158]
 a35(r160): [164..165]
 a36(r158): [166..169]
Compressing live ranges: from 186 to 80 - 43%
Ranges after the compression:
 a0(r151): [36..37] [32..34] [2..3] [0..1]
 a1(r137): [4..19]
 a2(r135): [5..8]
 a3(r187): [6..7]
 a4(r188): [6..9]
 a5(r157): [10..77]
 a6(r136): [11..14]
 a7(r184): [12..13]
 a8(r185): [12..15]
 a9(r181): [16..17]
 a10(r182): [16..18]
 a11(r138): [20..23]
 a12(r179): [21..22]
 a13(r140): [24..27]
 a14(r139): [26..26] [25..25]
 a15(r178): [28..29]
 a16(r176): [30..31]
 a17(r175): [33..35]
 a18(r152): [42..43] [38..41]
 a19(r153): [74..75] [39..46]
 a20(r155): [40..78]
 a21(r146): [44..61]
 a22(r141): [45..48]
 a23(r142): [47..50]
 a24(r166): [48..52]
 a25(r143): [49..56]
 a26(r145): [51..59]
 a27(r156): [76..79] [53..73]
 a28(r147): [54..63]
 a29(r144): [55..57]
 a30(r164): [56..58]
 a31(r162): [59..60]
 a32(r148): [62..64]
 a33(r150): [65..68]
 a34(r149): [67..67] [66..66]
 a35(r160): [69..70]
 a36(r158): [71..72]
+++Allocating 296 bytes for conflict table (uncompressed size 296)
;; a0(r151,l0) conflicts: a5(r157,l0) a17(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a2(r135,l0) a3(r187,l0) a4(r188,l0) a5(r157,l0) a6(r136,l0) a7(r184,l0) a8(r185,l0) a9(r181,l0) a10(r182,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r135,l0) conflicts: a1(r137,l0) a3(r187,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r187,l0) conflicts: a1(r137,l0) a2(r135,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r188,l0) conflicts: a1(r137,l0) a2(r135,l0) a3(r187,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r157,l0) conflicts: a0(r151,l0) a1(r137,l0) a6(r136,l0) a7(r184,l0) a8(r185,l0) a9(r181,l0) a10(r182,l0) a11(r138,l0) a12(r179,l0) a13(r140,l0) a14(r139,l0) a15(r178,l0) a16(r176,l0) a17(r175,l0) a18(r152,l0) a19(r153,l0) a20(r155,l0) a21(r146,l0) a22(r141,l0) a23(r142,l0) a24(r166,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0) a32(r148,l0) a33(r150,l0) a34(r149,l0) a35(r160,l0) a36(r158,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r136,l0) conflicts: a1(r137,l0) a5(r157,l0) a7(r184,l0) a8(r185,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r184,l0) conflicts: a1(r137,l0) a5(r157,l0) a6(r136,l0) a8(r185,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r185,l0) conflicts: a1(r137,l0) a5(r157,l0) a6(r136,l0) a7(r184,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r181,l0) conflicts: a1(r137,l0) a5(r157,l0) a10(r182,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r182,l0) conflicts: a1(r137,l0) a5(r157,l0) a9(r181,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r138,l0) conflicts: a5(r157,l0) a12(r179,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r179,l0) conflicts: a5(r157,l0) a11(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r140,l0) conflicts: a5(r157,l0) a14(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r139,l0) conflicts: a5(r157,l0) a13(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r178,l0) conflicts: a5(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r176,l0) conflicts: a5(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r175,l0) conflicts: a0(r151,l0) a5(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r152,l0) conflicts: a5(r157,l0) a19(r153,l0) a20(r155,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a19(r153,l0) conflicts: a5(r157,l0) a18(r152,l0) a20(r155,l0) a21(r146,l0) a22(r141,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a20(r155,l0) conflicts: a5(r157,l0) a18(r152,l0) a19(r153,l0) a21(r146,l0) a22(r141,l0) a23(r142,l0) a24(r166,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0) a32(r148,l0) a33(r150,l0) a34(r149,l0) a35(r160,l0) a36(r158,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a21(r146,l0) conflicts: a5(r157,l0) a19(r153,l0) a20(r155,l0) a22(r141,l0) a23(r142,l0) a24(r166,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r141,l0) conflicts: a5(r157,l0) a19(r153,l0) a20(r155,l0) a21(r146,l0) a23(r142,l0) a24(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r142,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a22(r141,l0) a24(r166,l0) a25(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r166,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a22(r141,l0) a23(r142,l0) a25(r143,l0) a26(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r143,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a23(r142,l0) a24(r166,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r145,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a24(r166,l0) a25(r143,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r156,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a25(r143,l0) a26(r145,l0) a28(r147,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0) a32(r148,l0) a33(r150,l0) a34(r149,l0) a35(r160,l0) a36(r158,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a28(r147,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a29(r144,l0) a30(r164,l0) a31(r162,l0) a32(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r144,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a30(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r164,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a25(r143,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0) a29(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r162,l0) conflicts: a5(r157,l0) a20(r155,l0) a21(r146,l0) a26(r145,l0) a27(r156,l0) a28(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r148,l0) conflicts: a5(r157,l0) a20(r155,l0) a27(r156,l0) a28(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r150,l0) conflicts: a5(r157,l0) a20(r155,l0) a27(r156,l0) a34(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r149,l0) conflicts: a5(r157,l0) a20(r155,l0) a27(r156,l0) a33(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r160,l0) conflicts: a5(r157,l0) a20(r155,l0) a27(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r158,l0) conflicts: a5(r157,l0) a20(r155,l0) a27(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a4(r188)<->a5(r157)@125:shuffle
  cp1:a0(r151)<->a1(r137)@1000:move
  cp2:a1(r137)<->a11(r138)@1000:move
  cp3:a11(r138)<->a13(r140)@1000:move
  cp4:a13(r140)<->a15(r178)@1000:move
  cp5:a24(r166)<->a27(r156)@125:shuffle
  cp6:a21(r146)<->a32(r148)@1000:move
  cp7:a32(r148)<->a33(r150)@1000:move
  cp8:a33(r150)<->a35(r160)@1000:move
  cp9:a19(r153)<->a27(r156)@1000:move
  regions=1, blocks=18, points=80
    allocnos=37, copies=10, conflicts=2, ranges=45

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r151 1r137 2r135 3r187 4r188 5r157 6r136 7r184 8r185 9r181 10r182 11r138 12r179 13r140 14r139 15r178 16r176 17r175 18r152 19r153 20r155 21r146 22r141 23r142 24r166 25r143 26r145 27r156 28r147 29r144 30r164 31r162 32r148 33r150 34r149 35r160 36r158
    modified regnos: 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 155 156 157 158 160 162 164 166 175 176 178 179 181 182 184 185 187 188
    border:
    Pressure: GENERAL_REGS=8
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 187 of GENERAL_REGS has 1 regs less
    Reg 188 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 181 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
      Pushing a25(r143,l0)
      Pushing a22(r141,l0)
      Pushing a30(r164,l0)
      Pushing a24(r166,l0)
      Pushing a29(r144,l0)
      Pushing a23(r142,l0)
      Pushing a34(r149,l0)
      Pushing a14(r139,l0)
      Pushing a35(r160,l0)
      Pushing a28(r147,l0)
      Pushing a26(r145,l0)
      Pushing a17(r175,l0)
      Pushing a15(r178,l0)
      Pushing a12(r179,l0)
      Pushing a10(r182,l0)
      Pushing a9(r181,l0)
      Pushing a8(r185,l0)
      Pushing a7(r184,l0)
      Pushing a4(r188,l0)
      Pushing a3(r187,l0)
      Pushing a31(r162,l0)
      Pushing a19(r153,l0)
      Pushing a6(r136,l0)
      Pushing a2(r135,l0)
      Pushing a36(r158,l0)
      Pushing a16(r176,l0)
      Pushing a11(r138,l0)
      Pushing a0(r151,l0)
      Pushing a33(r150,l0)
      Pushing a32(r148,l0)
      Pushing a13(r140,l0)
      Pushing a1(r137,l0)
      Pushing a21(r146,l0)
      Pushing a20(r155,l0)
      Pushing a18(r152,l0)
      Pushing a27(r156,l0)
      Pushing a5(r157,l0)
      Popping a5(r157,l0)  -- assign reg 4
      Popping a27(r156,l0)  -- assign reg 1
      Popping a18(r152,l0)  -- assign reg 2
      Popping a20(r155,l0)  -- assign reg 0
      Popping a21(r146,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 0
      Popping a13(r140,l0)  -- assign reg 0
      Popping a32(r148,l0)  -- assign reg 3
      Popping a33(r150,l0)  -- assign reg 3
      Popping a0(r151,l0)  -- assign reg 0
      Popping a11(r138,l0)  -- assign reg 0
      Popping a16(r176,l0)  -- assign reg 3
      Popping a36(r158,l0)  -- assign reg 3
      Popping a2(r135,l0)  -- assign reg 3
      Popping a6(r136,l0)  -- assign reg 3
      Popping a19(r153,l0)  -- assign reg 1
      Popping a31(r162,l0)  -- assign reg 2
      Popping a3(r187,l0)  -- assign reg 2
      Popping a4(r188,l0)  -- assign reg 4
      Popping a7(r184,l0)  -- assign reg 2
      Popping a8(r185,l0)  -- assign reg 1
      Popping a9(r181,l0)  -- assign reg 3
      Popping a10(r182,l0)  -- assign reg 2
      Popping a12(r179,l0)  -- assign reg 3
      Popping a15(r178,l0)  -- assign reg 0
      Popping a17(r175,l0)  -- assign reg 3
      Popping a26(r145,l0)  -- assign reg 12
      Popping a28(r147,l0)  -- assign reg 5
      Popping a35(r160,l0)  -- assign reg 3
      Popping a14(r139,l0)  -- assign reg 3
      Popping a34(r149,l0)  -- assign reg 2
      Popping a23(r142,l0)  -- assign reg 2
      Popping a29(r144,l0)  -- assign reg 2
      Popping a24(r166,l0)  -- assign reg 1
      Popping a30(r164,l0)  -- assign reg 14
      Popping a22(r141,l0)  -- assign reg 12
      Popping a25(r143,l0)  -- assign reg 6
Disposition:
    2:r135 l0     3    6:r136 l0     3    1:r137 l0     0   11:r138 l0     0
   14:r139 l0     3   13:r140 l0     0   22:r141 l0    12   23:r142 l0     2
   25:r143 l0     6   29:r144 l0     2   26:r145 l0    12   21:r146 l0     3
   28:r147 l0     5   32:r148 l0     3   34:r149 l0     2   33:r150 l0     3
    0:r151 l0     0   18:r152 l0     2   19:r153 l0     1   20:r155 l0     0
   27:r156 l0     1    5:r157 l0     4   36:r158 l0     3   35:r160 l0     3
   31:r162 l0     2   30:r164 l0    14   24:r166 l0     1   17:r175 l0     3
   16:r176 l0     3   15:r178 l0     0   12:r179 l0     3    9:r181 l0     3
   10:r182 l0     2    7:r184 l0     2    8:r185 l0     1    3:r187 l0     2
    4:r188 l0     4
New iteration of spill/restore move
+++Costs: overall -20250, reg -20250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=8, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 156
insn=2, live_throughout: 2, 13, 14, 24, 156, dead_or_set: 0, 155
insn=4, live_throughout: 13, 14, 24, 155, 156, dead_or_set: 2, 157
insn=9, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 
insn=11, live_throughout: 13, 155, 157, dead_or_set: 153, 156
insn=129, live_throughout: 13, 153, 155, 157, dead_or_set: 
insn=14, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 
insn=137, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 158
insn=138, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 158
insn=19, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 158, 160
insn=139, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 150, 160
insn=20, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 149, 150
insn=21, live_throughout: 13, 14, 150, 155, 156, 157, dead_or_set: 
insn=22, live_throughout: 13, 14, 150, 155, 156, 157, dead_or_set: 
insn=140, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 148, 150
insn=25, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 147, 148
insn=26, live_throughout: 13, 14, 147, 148, 155, 156, 157, dead_or_set: 
insn=27, live_throughout: 13, 14, 147, 148, 155, 156, 157, dead_or_set: 
insn=141, live_throughout: 13, 14, 147, 155, 156, 157, dead_or_set: 146, 148
insn=29, live_throughout: 13, 14, 146, 147, 155, 156, 157, dead_or_set: 162
insn=31, live_throughout: 13, 14, 147, 155, 156, 157, dead_or_set: 145, 146, 162
insn=32, live_throughout: 13, 14, 145, 146, 147, 155, 156, 157, dead_or_set: 
insn=33, live_throughout: 13, 14, 145, 146, 147, 155, 156, 157, dead_or_set: 
insn=35, live_throughout: 13, 145, 146, 147, 155, 156, 157, dead_or_set: 164
insn=142, live_throughout: 13, 145, 146, 147, 155, 156, 157, 164, dead_or_set: 144
insn=37, live_throughout: 13, 145, 146, 147, 155, 156, 157, dead_or_set: 143, 144, 164
insn=38, live_throughout: 13, 143, 145, 146, 155, 156, 157, dead_or_set: 147
insn=41, live_throughout: 13, 143, 145, 146, 155, 157, dead_or_set: 156, 166
insn=39, live_throughout: 13, 143, 146, 155, 157, 166, dead_or_set: 145
insn=143, live_throughout: 13, 143, 146, 155, 157, 166, dead_or_set: 142
insn=40, live_throughout: 13, 142, 146, 155, 157, 166, dead_or_set: 143
insn=43, live_throughout: 13, 146, 155, 157, dead_or_set: 141, 142, 166
insn=47, live_throughout: 13, 141, 146, 155, 157, dead_or_set: 153
insn=44, live_throughout: 13, 146, 153, 155, 157, dead_or_set: 141
insn=46, live_throughout: 13, 153, 155, 157, dead_or_set: 146
insn=48, live_throughout: 13, 153, 155, 157, dead_or_set: 
insn=50, live_throughout: 13, 153, 155, 157, dead_or_set: 
insn=51, live_throughout: 13, 153, 155, 157, dead_or_set: 
insn=53, live_throughout: 13, 153, 155, 157, dead_or_set: 152
insn=131, live_throughout: 13, 152, 153, 155, 157, dead_or_set: 
insn=56, live_throughout: 13, 153, 155, 157, dead_or_set: 
insn=58, live_throughout: 13, 153, 155, 157, dead_or_set: 152
insn=59, live_throughout: 13, 152, 153, 155, 157, dead_or_set: 
insn=61, live_throughout: 13, 152, 153, 157, dead_or_set: 0, 155
insn=62, live_throughout: 0, 13, 152, 157, dead_or_set: 1, 153
insn=63, live_throughout: 0, 1, 13, 157, dead_or_set: 2, 152
insn=64, live_throughout: 13, 157, dead_or_set: 0, 1, 2, 14
insn=66, live_throughout: 13, 14, 157, dead_or_set: 0, 151
insn=74, live_throughout: 13, 14, 151, 157, dead_or_set: 175
insn=75, live_throughout: 13, 14, 151, 157, dead_or_set: 175
insn=76, live_throughout: 13, 14, 151, 157, dead_or_set: 
insn=135, live_throughout: 13, 14, 157, dead_or_set: 176
insn=136, live_throughout: 13, 14, 157, dead_or_set: 176
insn=81, live_throughout: 13, 14, 157, dead_or_set: 176, 178
insn=144, live_throughout: 13, 14, 157, dead_or_set: 140, 178
insn=82, live_throughout: 13, 14, 157, dead_or_set: 139, 140
insn=83, live_throughout: 13, 14, 140, 157, dead_or_set: 
insn=84, live_throughout: 13, 14, 140, 157, dead_or_set: 
insn=145, live_throughout: 13, 14, 157, dead_or_set: 138, 140
insn=86, live_throughout: 13, 14, 138, 157, dead_or_set: 179
insn=88, live_throughout: 13, 14, 157, dead_or_set: 138, 179
insn=89, live_throughout: 13, 14, 138, 157, dead_or_set: 
insn=90, live_throughout: 13, 14, 138, 157, dead_or_set: 
insn=146, live_throughout: 13, 14, 157, dead_or_set: 137, 138
insn=93, live_throughout: 13, 14, 137, 157, dead_or_set: 182
insn=152, live_throughout: 13, 14, 137, 157, 182, dead_or_set: 181
insn=95, live_throughout: 13, 14, 157, dead_or_set: 137, 181, 182
insn=96, live_throughout: 13, 14, 137, 157, dead_or_set: 
insn=97, live_throughout: 13, 14, 137, 157, dead_or_set: 
insn=100, live_throughout: 13, 14, 137, 157, dead_or_set: 185
insn=147, live_throughout: 13, 14, 137, 157, 185, dead_or_set: 136
insn=151, live_throughout: 13, 14, 136, 137, 157, 185, dead_or_set: 184
insn=102, live_throughout: 13, 14, 137, 157, dead_or_set: 136, 184, 185
insn=104, live_throughout: 13, 14, 137, dead_or_set: 157, 188
insn=148, live_throughout: 13, 14, 137, 188, dead_or_set: 135
insn=150, live_throughout: 13, 14, 135, 137, 188, dead_or_set: 187
insn=106, live_throughout: 13, 14, 137, dead_or_set: 135, 187, 188
insn=107, live_throughout: 13, 14, dead_or_set: 137, 151
insn=133, live_throughout: 13, 14, 151, dead_or_set: 
insn=110, live_throughout: 13, 14, dead_or_set: 
insn=112, live_throughout: 13, 14, dead_or_set: 151
insn=113, live_throughout: 13, 14, 151, dead_or_set: 
insn=119, live_throughout: 13, 14, dead_or_set: 0, 151
insn=125, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 179: (insn_list:REG_DEP_TRUE 86 (nil))
init_insns for 181: (insn_list:REG_DEP_TRUE 152 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 151 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 150 (nil))
changing reg in insn 148
changing reg in insn 106
changing reg in insn 106
changing reg in insn 147
changing reg in insn 102
changing reg in insn 102
changing reg in insn 146
changing reg in insn 95
changing reg in insn 148
changing reg in insn 147
changing reg in insn 95
changing reg in insn 107
changing reg in insn 96
changing reg in insn 145
changing reg in insn 88
changing reg in insn 146
changing reg in insn 88
changing reg in insn 89
changing reg in insn 82
changing reg in insn 144
changing reg in insn 82
changing reg in insn 145
changing reg in insn 82
changing reg in insn 83
changing reg in insn 43
changing reg in insn 44
changing reg in insn 143
changing reg in insn 43
changing reg in insn 43
changing reg in insn 37
changing reg in insn 40
changing reg in insn 142
changing reg in insn 37
changing reg in insn 37
changing reg in insn 31
changing reg in insn 39
changing reg in insn 141
changing reg in insn 31
changing reg in insn 143
changing reg in insn 142
changing reg in insn 31
changing reg in insn 46
changing reg in insn 32
changing reg in insn 25
changing reg in insn 38
changing reg in insn 140
changing reg in insn 25
changing reg in insn 141
changing reg in insn 25
changing reg in insn 26
changing reg in insn 20
changing reg in insn 139
changing reg in insn 20
changing reg in insn 140
changing reg in insn 20
changing reg in insn 21
changing reg in insn 66
changing reg in insn 107
changing reg in insn 112
changing reg in insn 74
changing reg in insn 119
changing reg in insn 53
changing reg in insn 58
changing reg in insn 63
changing reg in insn 11
changing reg in insn 47
changing reg in insn 62
changing reg in insn 2
changing reg in insn 61
changing reg in insn 8
changing reg in insn 25
changing reg in insn 20
changing reg in insn 11
changing reg in insn 41
changing reg in insn 35
changing reg in insn 29
changing reg in insn 4
changing reg in insn 88
changing reg in insn 82
changing reg in insn 74
changing reg in insn 53
changing reg in insn 104
changing reg in insn 100
changing reg in insn 93
changing reg in insn 50
changing reg in insn 138
changing reg in insn 137
changing reg in insn 138
changing reg in insn 19
changing reg in insn 19
changing reg in insn 139
changing reg in insn 29
changing reg in insn 31
changing reg in insn 35
changing reg in insn 37
changing reg in insn 41
changing reg in insn 43
changing reg in insn 74
changing reg in insn 75
changing reg in insn 136
changing reg in insn 135
changing reg in insn 136
changing reg in insn 81
changing reg in insn 81
changing reg in insn 144
changing reg in insn 86
changing reg in insn 88
changing reg in insn 152
changing reg in insn 95
changing reg in insn 93
changing reg in insn 95
changing reg in insn 151
changing reg in insn 102
changing reg in insn 100
changing reg in insn 102
changing reg in insn 150
changing reg in insn 106
changing reg in insn 104
changing reg in insn 106
Spilling for insn 137.
Using reg 2 for reload 0
Spilling for insn 38.
Spilling for insn 39.
Spilling for insn 40.
Spilling for insn 44.
Spilling for insn 46.
Spilling for insn 135.
Using reg 2 for reload 0

Reloads for insn # 137
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 38
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 new_ka.sa.sa_handler+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 new_ka.sa.sa_handler+0 S4 A32])

Reloads for insn # 39
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 new_ka.sa.sa_restorer+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 new_ka.sa.sa_restorer+0 S4 A32])

Reloads for insn # 40
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 new_ka.sa.sa_flags+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 new_ka.sa.sa_flags+0 S4 A32])

Reloads for insn # 44
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 new_ka.sa.sa_mask.sig+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 new_ka.sa.sa_mask.sig+0 S4 A32])

Reloads for insn # 46
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 new_ka.sa.sa_mask.sig+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 new_ka.sa.sa_mask.sig+4 S4 A32])

Reloads for insn # 135
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 2.
deleting insn with uid = 11.
deleting insn with uid = 139.
deleting insn with uid = 140.
deleting insn with uid = 141.
deleting insn with uid = 61.
deleting insn with uid = 62.
deleting insn with uid = 63.
deleting insn with uid = 66.
deleting insn with uid = 144.
deleting insn with uid = 145.
deleting insn with uid = 146.
deleting insn with uid = 107.
deleting insn with uid = 119.


try_optimize_cfg iteration 1

Simplifying condjump 9 around jump 129
deleting insn with uid = 10.
deleting insn with uid = 129.
deleting insn with uid = 130.
deleting block 3
deleting insn with uid = 14.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 64.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 25 count 30 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 25 count 32 (  1.9)


sys_sigaction

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,12u} r1={6d,10u} r2={15d,10u} r3={18d,18u} r4={2d,9u} r5={1d,1u} r6={1d,1u} r12={4d,2u} r13={1d,30u,6d} r14={3d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={21d,9u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 299{189d,104u,6e} in 65{64 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 5 4 2 arch/arm/kernel/signal.c:89 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ act ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:156 act ] [156])
                (reg:SI 1 r1 [ act ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 8 9 2 arch/arm/kernel/signal.c:85 (set (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
        (reg:SI 2 r2 [ oact ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 9 4 15 2 arch/arm/kernel/signal.c:89 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
        (nil)))
;; End of basic block 2 -> ( 4 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [19.1%]  (fallthru)
;; Succ edge  8 [80.9%] 

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [19.1%]  (fallthru)
(note 15 9 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 17 15 154 4 NOTE_INSN_DELETED)

(insn 154 17 137 4 arch/arm/kernel/signal.c:91 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 137 154 138 4 arch/arm/kernel/signal.c:91 (set (reg:SI 3 r3 [158])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 138 137 19 4 arch/arm/kernel/signal.c:91 (set (reg:SI 3 r3 [158])
        (and:SI (reg:SI 3 r3 [158])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 138 20 4 arch/arm/kernel/signal.c:91 (set (reg:SI 3 r3 [orig:160 <variable>.addr_limit ] [160])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [158])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 21 4 arch/arm/kernel/signal.c:91 (parallel [
            (set (reg/v:SI 3 r3 [orig:150 flag ] [150])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 1 r1 [orig:156 act ] [156])
                        (const_int 16 [0x10])
                        (reg/v:SI 3 r3 [orig:150 flag ] [150])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8600470))
            (set (reg/v:SI 2 r2 [orig:149 roksum ] [149])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 1 r1 [orig:156 act ] [156])
                        (const_int 16 [0x10])
                        (reg/v:SI 3 r3 [orig:150 flag ] [150])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8600470))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 21 20 22 4 arch/arm/kernel/signal.c:91 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:150 flag ] [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 4 arch/arm/kernel/signal.c:91 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 4 -> ( 16 5)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  16 [96.0%] 
;; Succ edge  5 [4.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  4 [4.0%]  (fallthru)
(note 23 22 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 26 5 arch/arm/kernel/signal.c:92 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:148 __gu_err ] [148])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/v/f:SI 1 r1 [orig:156 act ] [156])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:148 __gu_err ] [148])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691146))
            (set (reg/v:SI 5 r5 [orig:147 __gu_val ] [147])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/v/f:SI 1 r1 [orig:156 act ] [156])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:148 __gu_err ] [148])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691146))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 26 25 27 5 arch/arm/kernel/signal.c:91 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:148 __gu_err ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 27 26 28 5 arch/arm/kernel/signal.c:91 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 5 -> ( 16 6)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  16 [96.0%] 
;; Succ edge  6 [4.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  5 [4.0%]  (fallthru)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 31 6 arch/arm/kernel/signal.c:93 discrim 4 (set (reg/f:SI 2 r2 [162])
        (plus:SI (reg/v/f:SI 1 r1 [orig:156 act ] [156])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 31 29 32 6 arch/arm/kernel/signal.c:93 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 2 r2 [162])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691151))
            (set (reg/v:SI 12 ip [orig:145 __gu_val ] [145])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 2 r2 [162])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691151))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 32 31 33 6 arch/arm/kernel/signal.c:91 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 33 32 34 6 arch/arm/kernel/signal.c:91 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 6 -> ( 16 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  16 [39.0%] 
;; Succ edge  7 [61.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 6 [r6] 12 [ip] 14 [lr]
;; live  kill	 24 [cc]

;; Pred edge  6 [61.0%]  (fallthru)
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 142 7 arch/arm/kernel/signal.c:95 discrim 4 (set (reg/f:SI 14 lr [164])
        (plus:SI (reg/v/f:SI 1 r1 [orig:156 act ] [156])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 142 35 37 7 arch/arm/kernel/signal.c:95 discrim 4 (set (reg/v:SI 2 r2 [orig:144 __gu_err ] [144])
        (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 37 142 38 7 arch/arm/kernel/signal.c:95 discrim 4 (parallel [
            (set (reg/v:SI 2 r2 [orig:144 __gu_err ] [144])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 14 lr [164])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:144 __gu_err ] [144])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691156))
            (set (reg/v:SI 6 r6 [orig:143 __gu_val ] [143])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 14 lr [164])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:144 __gu_err ] [144])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691156))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 38 37 41 7 arch/arm/kernel/signal.c:92 discrim 5 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 new_ka.sa.sa_handler+0 S4 A32])
        (reg/v:SI 5 r5 [orig:147 __gu_val ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 41 38 39 7 arch/arm/kernel/signal.c:96 discrim 4 (set (reg/f:SI 1 r1 [166])
        (plus:SI (reg/v/f:SI 1 r1 [orig:156 act ] [156])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 39 41 143 7 arch/arm/kernel/signal.c:93 discrim 5 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 new_ka.sa.sa_restorer+0 S4 A32])
        (reg/v:SI 12 ip [orig:145 __gu_val ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 143 39 40 7 arch/arm/kernel/signal.c:96 discrim 4 (set (reg/v:SI 2 r2 [orig:142 __gu_err ] [142])
        (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 40 143 43 7 arch/arm/kernel/signal.c:95 discrim 5 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 new_ka.sa.sa_flags+0 S4 A32])
        (reg/v:SI 6 r6 [orig:143 __gu_val ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 43 40 47 7 arch/arm/kernel/signal.c:96 discrim 4 (parallel [
            (set (reg/v:SI 2 r2 [orig:142 __gu_err ] [142])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 1 r1 [166])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:142 __gu_err ] [142])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691161))
            (set (reg/v:SI 12 ip [orig:141 __gu_val ] [141])
                (asm_operands/v:SI ("1:	ldr	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	mov	%1, #0
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=&r") 1 [
                        (reg/f:SI 1 r1 [166])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 2 r2 [orig:142 __gu_err ] [142])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691161))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 47 43 44 7 arch/arm/kernel/signal.c:100 discrim 1 (set (reg/f:SI 1 r1 [orig:153 iftmp.307 ] [153])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 20 [0x14]))
        (nil)))

(insn 44 47 46 7 include/linux/signal.h:201 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 new_ka.sa.sa_mask.sig+0 S4 A32])
        (reg/v:SI 12 ip [orig:141 __gu_val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 48 7 include/linux/signal.h:206 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 new_ka.sa.sa_mask.sig+4 S4 A32])
        (reg/v:SI 3 r3 [orig:146 __gu_err ] [146])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  2 [80.9%] 
(code_label 48 46 49 8 91 "" [1 uses])

(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 8 arch/arm/kernel/signal.c:100 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 8 arch/arm/kernel/signal.c:100 discrim 3 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  10 [85.0%] 
;; Succ edge  9 [15.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  8 [15.0%]  (fallthru)
(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 131 9 arch/arm/kernel/signal.c:100 discrim 5 (set (reg/f:SI 2 r2 [orig:152 iftmp.308 ] [152])
        (reg/v/f:SI 4 r4 [orig:157 oact ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 131 53 132 9 (set (pc)
        (label_ref 59)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 132 131 56)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  8 [85.0%] 
(code_label 56 132 57 10 93 "" [1 uses])

(note 57 56 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 10 arch/arm/kernel/signal.c:100 discrim 4 (set (reg/f:SI 2 r2 [orig:152 iftmp.308 ] [152])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 59 58 60 11 94 "" [1 uses])

(note 60 59 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 65 60 67 11 NOTE_INSN_DELETED)

(note 67 65 69 11 NOTE_INSN_DELETED)

(note 69 67 70 11 NOTE_INSN_DELETED)

(note 70 69 72 11 NOTE_INSN_DELETED)

(note 72 70 73 11 NOTE_INSN_DELETED)

(note 73 72 64 11 NOTE_INSN_DELETED)

(call_insn 64 73 74 11 arch/arm/kernel/signal.c:100 discrim 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_sigaction") [flags 0x41] <function_decl 0x10f06f80 do_sigaction>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 74 64 75 11 arch/arm/kernel/signal.c:102 (parallel [
            (set (reg:SI 3 r3 [175])
                (and:SI (eq:SI (reg/v:SI 0 r0 [orig:151 ret ] [151])
                        (const_int 0 [0x0]))
                    (ne:SI (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
                        (const_int 0 [0x0]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (nil))

(insn 75 74 76 11 arch/arm/kernel/signal.c:102 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [175])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 76 75 77 11 arch/arm/kernel/signal.c:102 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 11 -> ( 12 17)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  12 [4.0%]  (fallthru)
;; Succ edge  17 [96.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [4.0%]  (fallthru)
(note 77 76 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 79 77 155 12 NOTE_INSN_DELETED)

(insn 155 79 135 12 arch/arm/kernel/signal.c:103 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 135 155 136 12 arch/arm/kernel/signal.c:103 (set (reg:SI 3 r3 [176])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 136 135 81 12 arch/arm/kernel/signal.c:103 (set (reg:SI 3 r3 [176])
        (and:SI (reg:SI 3 r3 [176])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 81 136 82 12 arch/arm/kernel/signal.c:103 (set (reg:SI 0 r0 [orig:178 <variable>.addr_limit ] [178])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [176])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 82 81 83 12 arch/arm/kernel/signal.c:103 (parallel [
            (set (reg/v:SI 0 r0 [orig:140 flag ] [140])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
                        (const_int 16 [0x10])
                        (reg/v:SI 0 r0 [orig:140 flag ] [140])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8602006))
            (set (reg/v:SI 3 r3 [orig:139 roksum ] [139])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
                        (const_int 16 [0x10])
                        (reg/v:SI 0 r0 [orig:140 flag ] [140])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8602006))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 83 82 84 12 arch/arm/kernel/signal.c:103 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:140 flag ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 84 83 85 12 arch/arm/kernel/signal.c:103 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 12 -> ( 16 13)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  16 [96.0%] 
;; Succ edge  13 [4.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  12 [4.0%]  (fallthru)
(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 88 13 arch/arm/kernel/signal.c:104 discrim 4 (set (reg/f:SI 3 r3 [orig:179 old_ka.sa.sa_handler ] [179])
        (mem/s/f/j/c:SI (reg/f:SI 13 sp) [0 old_ka.sa.sa_handler+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (reg/f:SI 13 sp) [0 old_ka.sa.sa_handler+0 S4 A64])
        (nil)))

(insn 88 86 89 13 arch/arm/kernel/signal.c:104 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:138 __pu_err ] [138])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [orig:179 old_ka.sa.sa_handler ] [179])
                        (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:138 __pu_err ] [138])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691172))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 89 88 90 13 arch/arm/kernel/signal.c:103 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:138 __pu_err ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 90 89 91 13 arch/arm/kernel/signal.c:103 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 13 -> ( 16 14)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  16 [96.0%] 
;; Succ edge  14 [4.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  13 [4.0%]  (fallthru)
(note 91 90 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 93 91 152 14 arch/arm/kernel/signal.c:105 discrim 4 (set (reg/f:SI 2 r2 [182])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 152 93 95 14 arch/arm/kernel/signal.c:105 discrim 4 (set (reg/f:SI 3 r3 [orig:181 old_ka.sa.sa_restorer ] [181])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 old_ka.sa.sa_restorer+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 old_ka.sa.sa_restorer+0 S4 A64])
        (nil)))

(insn 95 152 96 14 arch/arm/kernel/signal.c:105 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [orig:137 __pu_err ] [137])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg/f:SI 3 r3 [orig:181 old_ka.sa.sa_restorer ] [181])
                        (reg/f:SI 2 r2 [182])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 0 r0 [orig:137 __pu_err ] [137])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691178))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 96 95 97 14 arch/arm/kernel/signal.c:103 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:137 __pu_err ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 97 96 98 14 arch/arm/kernel/signal.c:103 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 14 -> ( 16 15)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  16 [39.0%] 
;; Succ edge  15 [61.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  14 [61.0%]  (fallthru)
(note 98 97 100 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 100 98 147 15 arch/arm/kernel/signal.c:107 discrim 4 (set (reg/f:SI 1 r1 [185])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 147 100 151 15 arch/arm/kernel/signal.c:107 discrim 4 (set (reg/v:SI 3 r3 [orig:136 __pu_err ] [136])
        (reg/v:SI 0 r0 [orig:137 __pu_err ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 151 147 102 15 arch/arm/kernel/signal.c:107 discrim 4 (set (reg:SI 2 r2 [orig:184 old_ka.sa.sa_flags ] [184])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 old_ka.sa.sa_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 old_ka.sa.sa_flags+0 S4 A32])
        (nil)))

(insn 102 151 104 15 arch/arm/kernel/signal.c:107 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:136 __pu_err ] [136])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 2 r2 [orig:184 old_ka.sa.sa_flags ] [184])
                        (reg/f:SI 1 r1 [185])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:136 __pu_err ] [136])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691184))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 104 102 148 15 arch/arm/kernel/signal.c:108 discrim 4 (set (reg/f:SI 4 r4 [188])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 oact ] [157])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 148 104 150 15 arch/arm/kernel/signal.c:108 discrim 4 (set (reg/v:SI 3 r3 [orig:135 __pu_err ] [135])
        (reg/v:SI 0 r0 [orig:137 __pu_err ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 150 148 106 15 arch/arm/kernel/signal.c:108 discrim 4 (set (reg:SI 2 r2 [orig:187 old_ka.sa.sa_mask.sig ] [187])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 old_ka.sa.sa_mask.sig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 old_ka.sa.sa_mask.sig+0 S4 A32])
        (nil)))

(insn 106 150 133 15 arch/arm/kernel/signal.c:108 discrim 4 (parallel [
            (set (reg/v:SI 3 r3 [orig:135 __pu_err ] [135])
                (asm_operands/v:SI ("1:	str	%1,[%2],#0
2:
	.pushsection .fixup,"ax"
	.align	2
3:	mov	%0, %3
	b	2b
	.popsection
	.pushsection __ex_table,"a"
	.align	3
	.long	1b, 3b
	.popsection") ("=r") 0 [
                        (reg:SI 2 r2 [orig:187 old_ka.sa.sa_mask.sig ] [187])
                        (reg/f:SI 4 r4 [188])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 3 r3 [orig:135 __pu_err ] [135])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("0") 0)
                    ] 8691190))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(jump_insn 133 106 134 15 (set (pc)
        (label_ref 113)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 17)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 134 133 110)

;; Start of basic block ( 5 13 14 4 6 12) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [96.0%] 
;; Pred edge  13 [96.0%] 
;; Pred edge  14 [39.0%] 
;; Pred edge  4 [96.0%] 
;; Pred edge  6 [39.0%] 
;; Pred edge  12 [96.0%] 
(code_label 110 134 111 16 92 "" [6 uses])

(note 111 110 112 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 112 111 113 16 arch/arm/kernel/signal.c:94 (set (reg/v:SI 0 r0 [orig:151 ret ] [151])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 11 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  11 [96.0%] 
;; Pred edge  15 [100.0%] 
(code_label 113 112 114 17 95 "" [2 uses])

(note 114 113 125 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 125 114 149 17 arch/arm/kernel/signal.c:112 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 17 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 149 125 153 NOTE_INSN_DELETED)

(note 153 149 0 NOTE_INSN_DELETED)


;; Function sys_sigsuspend (sys_sigsuspend)[0:1439]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r147,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:142000
  a1(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r170: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r147,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:142000
  a1(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 73(l0): point = 0
   Insn 67(l0): point = 2
   Insn 62(l0): point = 4
   Insn 61(l0): point = 6
   Insn 60(l0): point = 8
   Insn 56(l0): point = 10
   Insn 55(l0): point = 12
   Insn 54(l0): point = 14
   Insn 50(l0): point = 16
   Insn 49(l0): point = 18
   Insn 48(l0): point = 20
   Insn 47(l0): point = 22
   Insn 43(l0): point = 24
   Insn 42(l0): point = 26
   Insn 40(l0): point = 28
   Insn 39(l0): point = 30
   Insn 38(l0): point = 32
   Insn 34(l0): point = 34
   Insn 33(l0): point = 36
   Insn 31(l0): point = 38
   Insn 28(l0): point = 40
   Insn 24(l0): point = 42
   Insn 23(l0): point = 44
   Insn 30(l0): point = 46
   Insn 21(l0): point = 48
   Insn 22(l0): point = 50
   Insn 29(l0): point = 52
   Insn 20(l0): point = 54
   Insn 16(l0): point = 56
   Insn 15(l0): point = 58
   Insn 13(l0): point = 60
   Insn 12(l0): point = 62
   Insn 11(l0): point = 64
   Insn 32(l0): point = 66
   Insn 78(l0): point = 68
   Insn 4(l0): point = 70
   Insn 77(l0): point = 72
 a0(r147): [7..72]
 a1(r161): [9..66]
 a2(r136): [19..22]
 a3(r170): [19..20]
 a4(r167): [27..28]
 a5(r166): [29..30]
 a6(r164): [31..32]
 a7(r139): [37..40]
 a8(r159): [39..46]
 a9(r155): [42..48]
 a10(r156): [45..50]
 a11(r160): [47..52]
 a12(r141): [49..54]
 a13(r146): [53..70]
 a14(r152): [59..60]
 a15(r151): [61..62]
 a16(r149): [63..64]
Compressing live ranges: from 75 to 33 - 44%
Ranges after the compression:
 a0(r147): [0..32]
 a1(r161): [1..30]
 a2(r136): [2..4]
 a3(r170): [2..3]
 a4(r167): [5..6]
 a5(r166): [7..8]
 a6(r164): [9..10]
 a7(r139): [11..13]
 a8(r159): [12..16]
 a9(r155): [14..18]
 a10(r156): [15..20]
 a11(r160): [17..21]
 a12(r141): [19..23]
 a13(r146): [22..31]
 a14(r152): [24..25]
 a15(r151): [26..27]
 a16(r149): [28..29]
+++Allocating 136 bytes for conflict table (uncompressed size 136)
;; a0(r147,l0) conflicts: a1(r161,l0) a3(r170,l0) a2(r136,l0) a4(r167,l0) a5(r166,l0) a6(r164,l0) a7(r139,l0) a8(r159,l0) a9(r155,l0) a10(r156,l0) a11(r160,l0) a12(r141,l0) a13(r146,l0) a14(r152,l0) a15(r151,l0) a16(r149,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r161,l0) conflicts: a0(r147,l0) a3(r170,l0) a2(r136,l0) a4(r167,l0) a5(r166,l0) a6(r164,l0) a7(r139,l0) a8(r159,l0) a9(r155,l0) a10(r156,l0) a11(r160,l0) a12(r141,l0) a13(r146,l0) a14(r152,l0) a15(r151,l0) a16(r149,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r136,l0) conflicts: a0(r147,l0) a1(r161,l0) a3(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r170,l0) conflicts: a0(r147,l0) a1(r161,l0) a2(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r167,l0) conflicts: a0(r147,l0) a1(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r166,l0) conflicts: a0(r147,l0) a1(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r164,l0) conflicts: a0(r147,l0) a1(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r139,l0) conflicts: a0(r147,l0) a1(r161,l0) a8(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r159,l0) conflicts: a0(r147,l0) a1(r161,l0) a7(r139,l0) a9(r155,l0) a10(r156,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a9(r155,l0) conflicts: a0(r147,l0) a1(r161,l0) a8(r159,l0) a10(r156,l0) a11(r160,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a10(r156,l0) conflicts: a0(r147,l0) a1(r161,l0) a8(r159,l0) a9(r155,l0) a11(r160,l0) a12(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r160,l0) conflicts: a0(r147,l0) a1(r161,l0) a9(r155,l0) a10(r156,l0) a12(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r141,l0) conflicts: a0(r147,l0) a1(r161,l0) a10(r156,l0) a11(r160,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r146,l0) conflicts: a0(r147,l0) a1(r161,l0) a12(r141,l0) a14(r152,l0) a15(r151,l0) a16(r149,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r152,l0) conflicts: a0(r147,l0) a1(r161,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r151,l0) conflicts: a0(r147,l0) a1(r161,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r149,l0) conflicts: a0(r147,l0) a1(r161,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a14(r152)<->a15(r151)@125:shuffle
  cp1:a11(r160)<->a13(r146)@125:shuffle
  cp2:a9(r155)<->a12(r141)@125:shuffle
  cp3:a8(r159)<->a11(r160)@125:shuffle
  cp4:a4(r167)<->a5(r166)@125:shuffle
  regions=1, blocks=3, points=33
    allocnos=17, copies=5, conflicts=0, ranges=17

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r147 1r161 2r136 3r170 4r167 5r166 6r164 7r139 8r159 9r155 10r156 11r160 12r141 13r146 14r152 15r151 16r149
    modified regnos: 136 139 141 146 147 149 151 152 155 156 159 160 161 164 166 167 170
    border:
    Pressure: GENERAL_REGS=6
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 161 of GENERAL_REGS has 3 regs less
    Reg 159 of GENERAL_REGS has 2 regs less
    Reg 155 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
      Pushing a16(r149,l0)
      Pushing a15(r151,l0)
      Pushing a14(r152,l0)
      Pushing a11(r160,l0)
      Pushing a6(r164,l0)
      Pushing a5(r166,l0)
      Pushing a4(r167,l0)
      Pushing a3(r170,l0)
      Pushing a2(r136,l0)
      Pushing a12(r141,l0)
      Pushing a10(r156,l0)
      Pushing a7(r139,l0)
      Pushing a13(r146,l0)
      Pushing a8(r159,l0)
      Pushing a9(r155,l0)
      Pushing a1(r161,l0)
      Pushing a0(r147,l0)
      Popping a0(r147,l0)  -- assign reg 4
      Popping a1(r161,l0)  -- assign reg 5
      Popping a9(r155,l0)  -- assign reg 3
      Popping a8(r159,l0)  -- assign reg 2
      Popping a13(r146,l0)  -- assign reg 6
      Popping a7(r139,l0)  -- assign reg 3
      Popping a10(r156,l0)  -- assign reg 1
      Popping a12(r141,l0)  -- assign reg 3
      Popping a2(r136,l0)  -- assign reg 3
      Popping a3(r170,l0)  -- assign reg 2
      Popping a4(r167,l0)  -- assign reg 0
      Popping a5(r166,l0)  -- assign reg 0
      Popping a6(r164,l0)  -- assign reg 3
      Popping a11(r160,l0)  -- assign reg 2
      Popping a14(r152,l0)  -- assign reg 0
      Popping a15(r151,l0)  -- assign reg 0
      Popping a16(r149,l0)  -- assign reg 3
Disposition:
    2:r136 l0     3    7:r139 l0     3   12:r141 l0     3   13:r146 l0     6
    0:r147 l0     4   16:r149 l0     3   15:r151 l0     0   14:r152 l0     0
    9:r155 l0     3   10:r156 l0     1    8:r159 l0     2   11:r160 l0     2
    1:r161 l0     5    6:r164 l0     3    5:r166 l0     0    4:r167 l0     0
    3:r170 l0     2
New iteration of spill/restore move
+++Costs: overall 1500, reg 1500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=77, live_throughout: 2, 13, dead_or_set: 147
insn=4, live_throughout: 13, 147, dead_or_set: 2, 146
insn=78, live_throughout: 13, 146, dead_or_set: 147
insn=32, live_throughout: 13, 146, 147, dead_or_set: 161
insn=11, live_throughout: 13, 146, 147, 161, dead_or_set: 149
insn=12, live_throughout: 13, 146, 147, 161, dead_or_set: 149, 151
insn=13, live_throughout: 13, 146, 147, 161, dead_or_set: 151, 152
insn=15, live_throughout: 13, 146, 147, 161, dead_or_set: 0, 152
insn=16, live_throughout: 13, 146, 147, 161, dead_or_set: 0, 14
insn=20, live_throughout: 13, 146, 147, 161, dead_or_set: 141
insn=29, live_throughout: 13, 141, 147, 161, dead_or_set: 146, 160
insn=22, live_throughout: 13, 141, 147, 160, 161, dead_or_set: 156
insn=21, live_throughout: 13, 147, 156, 160, 161, dead_or_set: 141, 155
insn=30, live_throughout: 13, 147, 155, 156, 161, dead_or_set: 159, 160
insn=23, live_throughout: 13, 147, 155, 159, 161, dead_or_set: 0, 1, 156
insn=24, live_throughout: 13, 147, 159, 161, dead_or_set: 0, 1, 155
insn=28, live_throughout: 13, 147, 159, 161, dead_or_set: 139
insn=31, live_throughout: 13, 139, 147, 161, dead_or_set: 159
insn=33, live_throughout: 13, 147, 161, dead_or_set: 139
insn=34, live_throughout: 13, 147, 161, dead_or_set: 14
insn=38, live_throughout: 13, 147, 161, dead_or_set: 164
insn=39, live_throughout: 13, 147, 161, dead_or_set: 164, 166
insn=40, live_throughout: 13, 147, 161, dead_or_set: 166, 167
insn=42, live_throughout: 13, 147, 161, dead_or_set: 0, 167
insn=43, live_throughout: 13, 147, 161, dead_or_set: 0, 14
insn=47, live_throughout: 13, 147, 161, dead_or_set: 136
insn=48, live_throughout: 13, 136, 147, 161, dead_or_set: 170
insn=49, live_throughout: 13, 147, 161, dead_or_set: 136, 170
insn=50, live_throughout: 13, 147, 161, dead_or_set: 14
insn=54, live_throughout: 13, 147, 161, dead_or_set: 0
insn=55, live_throughout: 0, 13, 147, 161, dead_or_set: 1
insn=56, live_throughout: 13, 147, 161, dead_or_set: 0, 1, 14
insn=60, live_throughout: 13, 147, dead_or_set: 0, 161
insn=61, live_throughout: 0, 13, dead_or_set: 1, 147
insn=62, live_throughout: 13, dead_or_set: 0, 1, 14
insn=67, live_throughout: 13, 14, dead_or_set: 0
insn=73, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 47 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 38 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 48 (nil))
changing reg in insn 47
changing reg in insn 49
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 4
changing reg in insn 29
changing reg in insn 30
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 61
changing reg in insn 55
changing reg in insn 47
changing reg in insn 38
changing reg in insn 28
changing reg in insn 20
changing reg in insn 11
changing reg in insn 47
changing reg in insn 38
changing reg in insn 20
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 21
changing reg in insn 24
changing reg in insn 24
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 60
changing reg in insn 33
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 48
changing reg in insn 49
Spilling for insn 77.
Using reg 3 for reload 0
Spilling for insn 31.
Spilling for insn 33.
Spilling for insn 49.

Reloads for insn # 77
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 31
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                                                        (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                                                        (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])

Reloads for insn # 33
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                                                        (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                                                        (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])

Reloads for insn # 49
Reload 0: reload_out (SI) = (mem/s/v/j:SI (reg/f:SI 3 r3 [orig:136 D.26284 ] [136]) [0 <variable>.state+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/v/j:SI (reg/f:SI 3 r3 [orig:136 D.26284 ] [136]) [0 <variable>.state+0 S4 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 62.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


sys_sigsuspend

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr]
;;  ref usage 	r0={17d,11u} r1={11d,5u} r2={10d,4u} r3={14d,10u} r4={2d,8u,4d} r5={1d,2u} r6={1d,1u,1d} r12={7d} r13={1d,9u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={6d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 793{737d,51u,5e} in 38{32 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 14 2 NOTE_INSN_DELETED)

(note 14 9 41 2 NOTE_INSN_DELETED)

(note 41 14 63 2 NOTE_INSN_DELETED)

(note 63 41 82 2 NOTE_INSN_DELETED)

(insn 82 63 77 2 include/linux/spinlock.h:310 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 82 4 2 include/linux/spinlock.h:310 (set (reg:SI 4 r4 [147])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 4 77 78 2 arch/arm/kernel/signal.c:68 (set (reg/v:SI 6 r6 [orig:146 mask ] [146])
        (reg:SI 2 r2 [ mask ])) 167 {*arm_movsi_insn} (nil))

(insn 78 4 32 2 include/linux/spinlock.h:310 (set (reg:SI 4 r4 [147])
        (and:SI (reg:SI 4 r4 [147])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 32 78 11 2 include/linux/signal.h:206 (set (reg:SI 5 r5 [161])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 11 32 12 2 include/linux/spinlock.h:310 (set (reg/f:SI 3 r3 [orig:149 <variable>.task ] [149])
        (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 12 11 13 2 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [orig:151 <variable>.sighand ] [151])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:149 <variable>.task ] [149])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 15 2 include/linux/spinlock.h:310 (set (reg/f:SI 0 r0 [152])
        (plus:SI (reg/f:SI 0 r0 [orig:151 <variable>.sighand ] [151])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 15 13 16 2 include/linux/spinlock.h:310 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [152])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 16 15 20 2 include/linux/spinlock.h:310 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irq") [flags 0x41] <function_decl 0x10b48280 _raw_spin_lock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 16 29 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/f:SI 3 r3 [orig:141 D.26262 ] [141])
        (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 29 20 22 2 include/linux/signal.h:201 (set (reg:SI 2 r2 [160])
        (and:SI (reg/v:SI 6 r6 [orig:146 mask ] [146])
            (const_int -262145 [0xfffffffffffbffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 22 29 21 2 arch/arm/kernel/signal.c:71 (set (reg/f:SI 1 r1 [156])
        (plus:SI (reg/f:SI 3 r3 [orig:141 D.26262 ] [141])
            (const_int 944 [0x3b0]))) 4 {*arm_addsi3} (nil))

(insn 21 22 30 2 arch/arm/kernel/signal.c:71 (set (reg/f:SI 3 r3 [155])
        (plus:SI (reg/f:SI 3 r3 [orig:141 D.26262 ] [141])
            (const_int 960 [0x3c0]))) 4 {*arm_addsi3} (nil))

(insn 30 21 23 2 include/linux/signal.h:201 (set (reg:SI 2 r2 [159])
        (and:SI (reg:SI 2 r2 [160])
            (const_int -257 [0xfffffffffffffeff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 6 r6 [orig:146 mask ] [146])
            (const_int -262401 [0xfffffffffffbfeff]))
        (nil)))

(insn 23 30 24 2 arch/arm/kernel/signal.c:71 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/j:SI (reg/f:SI 1 r1 [156]) [0 <variable>.blocked+0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [156])
                        (const_int 4 [0x4])) [0 <variable>.blocked+4 S4 A32]))
        ]) 190 {*ldmsi2} (nil))

(insn 24 23 28 2 arch/arm/kernel/signal.c:71 (parallel [
            (set (mem/s/j:SI (reg/f:SI 3 r3 [155]) [0 <variable>.saved_sigmask+0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [155])
                        (const_int 4 [0x4])) [0 <variable>.saved_sigmask+4 S4 A32])
                (reg:SI 1 r1))
        ]) 197 {*stmsi2} (nil))

(insn 28 24 31 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 31 28 33 2 include/linux/signal.h:201 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                (const_int 944 [0x3b0])) [0 <variable>.blocked.sig+0 S4 A64])
        (reg:SI 2 r2 [159])) 167 {*arm_movsi_insn} (nil))

(insn 33 31 34 2 include/linux/signal.h:206 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.26268 ] [139])
                (const_int 948 [0x3b4])) [0 <variable>.blocked.sig+4 S4 A32])
        (reg:SI 5 r5 [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 34 33 38 2 arch/arm/kernel/signal.c:73 (parallel [
            (call (mem:SI (symbol_ref:SI ("recalc_sigpending") [flags 0x41] <function_decl 0x10f2c680 recalc_sigpending>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 38 34 39 2 include/linux/spinlock.h:335 (set (reg/f:SI 3 r3 [orig:164 <variable>.task ] [164])
        (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 39 38 40 2 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [orig:166 <variable>.sighand ] [166])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:164 <variable>.task ] [164])
                (const_int 940 [0x3ac])) [0 <variable>.sighand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 42 2 include/linux/spinlock.h:335 (set (reg/f:SI 0 r0 [167])
        (plus:SI (reg/f:SI 0 r0 [orig:166 <variable>.sighand ] [166])
            (const_int 1280 [0x500]))) 4 {*arm_addsi3} (nil))

(insn 42 40 43 2 include/linux/spinlock.h:335 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [167])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 43 42 47 2 include/linux/spinlock.h:335 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irq") [flags 0x41] <function_decl 0x10b48600 _raw_spin_unlock_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 47 43 48 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/f:SI 3 r3 [orig:136 D.26284 ] [136])
        (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 4 r4 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 48 47 49 2 arch/arm/kernel/signal.c:76 (set (reg:SI 2 r2 [170])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 49 48 50 2 arch/arm/kernel/signal.c:76 (set (mem/s/v/j:SI (reg/f:SI 3 r3 [orig:136 D.26284 ] [136]) [0 <variable>.state+0 S4 A64])
        (reg:SI 2 r2 [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(call_insn 50 49 54 2 arch/arm/kernel/signal.c:77 (parallel [
            (call (mem:SI (symbol_ref:SI ("schedule") [flags 0x41] <function_decl 0x10e69680 schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 54 50 55 2 include/linux/thread_info.h:64 (set (reg:SI 0 r0)
        (const_int 20 [0x14])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 2 include/linux/thread_info.h:64 (set (reg:SI 1 r1)
        (reg:SI 4 r4 [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 56 55 60 2 include/linux/thread_info.h:64 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x109cee80 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 60 56 61 2 include/linux/thread_info.h:64 (set (reg:SI 0 r0)
        (reg:SI 5 r5 [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 60 62 2 include/linux/thread_info.h:64 (set (reg:SI 1 r1)
        (reg:SI 4 r4 [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 62 61 67 2 include/linux/thread_info.h:64 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x109cee80 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 67 62 73 2 arch/arm/kernel/signal.c:80 (set (reg/i:SI 0 r0)
        (const_int -514 [0xfffffffffffffdfe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -514 [0xfffffffffffffdfe])
        (nil)))

(insn 73 67 80 2 arch/arm/kernel/signal.c:80 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 80 73 81 NOTE_INSN_DELETED)

(note 81 80 0 NOTE_INSN_DELETED)

