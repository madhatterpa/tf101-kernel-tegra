
;; Function __aeabi_unwind_cpp_pr0 (__aeabi_unwind_cpp_pr0)[0:851]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




__aeabi_unwind_cpp_pr0

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:55 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function __aeabi_unwind_cpp_pr1 (__aeabi_unwind_cpp_pr1)[0:852]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




__aeabi_unwind_cpp_pr1

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:60 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function __aeabi_unwind_cpp_pr2 (__aeabi_unwind_cpp_pr2)[0:853]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




__aeabi_unwind_cpp_pr2

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:65 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function unwind_init (unwind_init)[0:862] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])


Basic block 3:
IN:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])

OUT:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])


Basic block 4:
IN:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])

OUT:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])


Basic block 5:
IN:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])

OUT:
Stack adjustment: 0
Reg 3: idx+0
Variables:
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:162 idx ] [162])


6 basic blocks, 6 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 900, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 900, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  4 [100.0%] 
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9100, probably never executed.
Predecessors:  4 [91.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  4 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 10000, probably never executed.
Predecessors:  3 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  3 [91.0%]  5 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 900, probably never executed.
Predecessors:  4 [9.0%]  (fallthru,loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 5, loop_depth 0, count 0, freq 900, probably never executed.
Predecessors:  5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,2u} r1={4d,3u} r2={2d,1u} r3={3d,5u,2d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 34{14d,18u,2e} in 12{12 regular + 0 call} insns.
(note 30 0 32 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 32 30 89 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 89 32 31 2 NOTE_INSN_PROLOGUE_END)

(note 31 89 34 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 34 31 99 2 arch/arm/kernel/unwind.c:446 (set (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(note 99 34 47 2 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 47 99 97 2 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg/f:SI 2 r2 [170])
        (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
        (nil)))

(jump_insn 97 47 98 2 arch/arm/kernel/unwind.c:446 (set (pc)
        (label_ref 44)) -1 (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 98 97 46)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  4 [91.0%] 
(code_label 46 98 37 3 9 "" [1 uses])

(note 37 46 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 39 37 38 3 NOTE_INSN_DELETED)

(insn:TI 38 39 40 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 40 38 41 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [166])
        (sign_extract:SI (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn:TI 41 40 42 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [167])
        (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg:SI 1 r1 [166]))) 4 {*arm_addsi3} (nil))

(insn 42 41 44 3 arch/arm/kernel/unwind.c:447 (set (mem/s/j:SI (post_modify:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                    (const_int 8 [0x8]))) [0 <variable>.addr+0 S4 A32])
        (reg:SI 1 r1 [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [167])
        (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 44 42 45 4 8 "" [1 uses])

(note 45 44 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 45 49 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg/f:SI 2 r2 [170]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>))
        (nil)))

(jump_insn:TI 49 48 50 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 50 49 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 50 61 5 arch/arm/kernel/unwind.c:452 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 55 90 5 arch/arm/kernel/unwind.c:452 (use (reg/i:SI 0 r0)) -1 (nil))

(note 90 61 91 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 91 90 92 5 arch/arm/kernel/unwind.c:452 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 92 91 87)

(note 87 92 88 NOTE_INSN_DELETED)

(note 88 87 0 NOTE_INSN_DELETED)


;; Function unwind_table_del (unwind_table_del)[0:861]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tab+0
Variables:
  name: tab
    offset 0
      (reg:SI 0 r0 [ tab ])

OUT:
Stack adjustment: 8
Reg 0: tab+0
Reg 4: tab+0
Variables:
  name: tab
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
      (reg:SI 0 r0 [ tab ])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: tab+0
Reg 4: tab+0
Variables:
  name: tab
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
      (reg:SI 0 r0 [ tab ])

OUT:
Stack adjustment: 8
Reg 4: tab+0
Variables:
  name: tab
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 tab ] [136])


4 basic blocks, 4 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

Successors:  EXIT [21.6%]  3 [78.4%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 1, loop_depth 0, count 0, freq 7836, maybe hot.
Predecessors:  2 [78.4%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


Basic block 1 , prev 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (ab,sibcall) 2 [21.6%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_table_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,1u} r2={5d,2u} r3={7d,4u} r4={2d,7u} r12={3d} r13={2d,7u} r14={3d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,1u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 399{368d,31u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 53 NOTE_INSN_DELETED)

(note 53 1 4 2 ( tab (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tab ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 53 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 45 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 45 3 46 2 arch/arm/kernel/unwind.c:428 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 46 45 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 46 7 2 arch/arm/kernel/unwind.c:431 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0 [ tab ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (reg:SI 0 r0 [ tab ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0 [ tab ])
        (nil)))

(jump_insn:TI 7 6 54 2 arch/arm/kernel/unwind.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2164 [0x874])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [21.6%] 
;; Succ edge  3 [78.4%]  (fallthru)

(note 54 7 8 3 ( tab (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [78.4%]  (fallthru)
(note 8 54 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 8 11 3 arch/arm/kernel/unwind.c:434 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 11 10 13 3 arch/arm/kernel/unwind.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 11 14 3 include/linux/list.h:106 (set (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 13 15 3 include/linux/list.h:106 (set (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 14 16 3 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn:TI 16 15 41 3 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:133 D.15826 ] [133]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
            (nil))))

(insn:TI 41 16 18 3 include/linux/list.h:107 (set (reg:SI 3 r3 [138])
        (const_int 1048832 [0x100100])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1048832 [0x100100])
        (nil)))

(insn:TI 18 41 40 3 include/linux/list.h:107 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg:SI 3 r3 [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (expr_list:REG_EQUAL (const_int 1048832 [0x100100])
            (nil))))

(insn:TI 40 18 20 3 include/linux/list.h:108 (set (reg:SI 3 r3 [139])
        (const_int 2097664 [0x200200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097664 [0x200200])
        (nil)))

(insn:TI 20 40 12 3 include/linux/list.h:108 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg:SI 3 r3 [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [139])
        (expr_list:REG_EQUAL (const_int 2097664 [0x200200])
            (nil))))

(insn:TI 12 20 55 3 arch/arm/kernel/unwind.c:434 (set (reg/v:SI 1 r1 [orig:135 flags ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 55 12 22 3 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:135 flags ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 22 55 24 3 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 24 22 56 3 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 56 24 25 3 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(insn 25 56 49 3 arch/arm/kernel/unwind.c:438 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(note 49 25 50 3 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 50 49 26 3 arch/arm/kernel/unwind.c:439 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 26 50 27 3 arch/arm/kernel/unwind.c:438 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10d76880 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 39)

(note 39 27 42 NOTE_INSN_DELETED)

(note 42 39 0 NOTE_INSN_DELETED)


;; Function unwind_table_add (unwind_table_add)[0:860]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: start+0
Reg 1: size+0
Reg 2: text_addr+0
Reg 3: text_size+0
Variables:
  name: start
    offset 0
      (reg:SI 0 r0 [ start ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: text_addr
    offset 0
      (reg:SI 2 r2 [ text_addr ])
  name: text_size
    offset 0
      (reg:SI 3 r3 [ text_size ])

OUT:
Stack adjustment: 24
Reg 4: start+0
Reg 5: size+0
Reg 6: text_addr+0
Reg 7: tab+0
Reg 8: text_size+0
Variables:
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:141 size ] [141])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: text_size
    offset 0
      (reg/v:SI 8 r8 [orig:143 text_size ] [143])


Basic block 3:
IN:
Stack adjustment: 24
Reg 4: start+0
Reg 5: size+0
Reg 6: text_addr+0
Reg 7: tab+0
Reg 8: text_size+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: text_size
    offset 0
      (reg/v:SI 8 r8 [orig:143 text_size ] [143])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:141 size ] [141])

OUT:
Stack adjustment: 24
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])


Basic block 4:
IN:
Stack adjustment: 24
Reg 3: idx+0
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])

OUT:
Stack adjustment: 24
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])


Basic block 5:
IN:
Stack adjustment: 24
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])

OUT:
Stack adjustment: 24
Reg 3: idx+0
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])


Basic block 6:
IN:
Stack adjustment: 24
Reg 3: idx+0
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: idx
    offset 0
      (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])

OUT:
Stack adjustment: 24
Reg 4: start+0
Reg 6: text_addr+0
Reg 7: tab+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])


Basic block 7:
IN:
Stack adjustment: 24
Reg 4: start+0
Reg 5: size+0
Reg 6: text_addr+0
Reg 7: tab+0
Reg 8: text_size+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: text_size
    offset 0
      (reg/v:SI 8 r8 [orig:143 text_size ] [143])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:141 size ] [141])

OUT:
Stack adjustment: 24
Reg 4: start+0
Reg 5: size+0
Reg 6: text_addr+0
Reg 7: tab+0
Reg 8: text_size+0
Variables:
  name: start
    offset 0
      (reg/v:SI 4 r4 [orig:140 start ] [140])
  name: tab
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
  name: text_addr
    offset 0
      (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
  name: text_size
    offset 0
      (reg/v:SI 8 r8 [orig:143 text_size ] [143])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:141 size ] [141])


8 basic blocks, 9 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1002, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1002, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [10.1%]  3 [89.9%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  2 [89.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	

Successors:  5 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 9100, maybe hot.
Predecessors:  5 [91.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  5 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  (fallthru,dfs_back) 3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

Successors:  4 [91.0%]  6 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  5 [9.0%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 1002, maybe hot.
Predecessors:  2 [10.1%]  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 1002, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_table_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={6d,3u} r2={8d,6u} r3={8d,8u} r4={3d,8u,2d} r5={3d,4u} r6={2d,4u} r7={2d,12u,3d} r8={3d,4u} r12={3d} r13={2d,11u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={5d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{387d,73u,5e} in 41{38 regular + 3 call} insns.
(note 1 0 90 NOTE_INSN_DELETED)

(note 90 1 91 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 90 92 2 ( text_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ text_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 92 91 93 2 ( text_size (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ text_size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 93 92 7 2 ( start (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ start ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 93 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 ("found") NOTE_INSN_DELETED_LABEL 20)

(note 15 9 81 2 NOTE_INSN_DELETED)

(insn/f:TI 81 15 82 2 arch/arm/kernel/unwind.c:400 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 82 81 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 82 79 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 8 r8 [orig:143 text_size ] [143])
        (reg:SI 3 r3 [ text_size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ text_size ])
        (nil)))

(insn:TI 79 5 94 2 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
        (nil)))

(note 94 79 2 2 ( text_size (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:143 text_size ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 2 94 3 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (reg:SI 0 r0 [ start ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ start ])
        (nil)))

(insn:TI 3 2 13 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 5 r5 [orig:141 size ] [141])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn 13 3 95 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(note 95 13 4 2 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:141 size ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 4 95 12 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
        (reg:SI 2 r2 [ text_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ text_addr ])
        (nil)))

(insn:TI 12 4 96 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 4 [0x4])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [144])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
                        (const_int 4 [0x4]))) [0 <variable>.cs_cachep+0 S4 A32])
            (nil))))

(note 96 12 14 2 ( start (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 start ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 14 96 97 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x11024200 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 97 14 17 2 ( text_addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 17 97 98 2 arch/arm/kernel/unwind.c:408 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 98 17 18 2 ( tab (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 18 98 19 2 arch/arm/kernel/unwind.c:408 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 19 18 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 19 99 3 arch/arm/kernel/unwind.c:414 (set (reg:SI 8 r8 [146])
        (plus:SI (reg/v:SI 8 r8 [orig:143 text_size ] [143])
            (reg/v:SI 6 r6 [orig:142 text_addr ] [142]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(note 99 24 21 3 ( text_size (nil)) NOTE_INSN_VAR_LOCATION)

(insn 21 99 100 3 arch/arm/kernel/unwind.c:412 (set (reg:SI 5 r5 [145])
        (plus:SI (reg/v:SI 5 r5 [orig:141 size ] [141])
            (reg/v:SI 4 r4 [orig:140 start ] [140]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(note 100 21 25 3 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 25 100 22 3 arch/arm/kernel/unwind.c:414 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (reg:SI 8 r8 [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 22 25 20 3 arch/arm/kernel/unwind.c:412 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (reg:SI 5 r5 [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 22 23 3 arch/arm/kernel/unwind.c:411 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 20 88 3 arch/arm/kernel/unwind.c:413 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (reg/v:SI 6 r6 [orig:142 text_addr ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 88 23 89 3 arch/arm/kernel/unwind.c:417 (set (pc)
        (label_ref 34)) -1 (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 89 88 101)

(note 101 89 38 4 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 38 101 28 4 23 "" [1 uses])

(note 28 38 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 30 28 29 4 NOTE_INSN_DELETED)

(insn:TI 29 30 31 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
        (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 31 29 32 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [149])
        (sign_extract:SI (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn:TI 32 31 102 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg:SI 2 r2 [149]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [149])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                    (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
            (nil))))

(note 102 32 33 4 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 33 102 34 4 arch/arm/kernel/unwind.c:418 (set (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 34 33 35 5 22 "" [1 uses])

(note 35 34 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 39 35 36 5 arch/arm/kernel/unwind.c:417 (set (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 36 39 103 5 arch/arm/kernel/unwind.c:418 (set (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(note 103 36 37 5 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 37 103 40 5 arch/arm/kernel/unwind.c:418 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 40 37 41 5 arch/arm/kernel/unwind.c:417 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151])
        (nil)))

(jump_insn:TI 41 40 42 5 arch/arm/kernel/unwind.c:417 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 42 41 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 44 42 45 6 arch/arm/kernel/unwind.c:420 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 45 44 104 6 arch/arm/kernel/unwind.c:420 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 104 45 48 6 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 48 104 49 6 include/linux/list.h:76 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 49 48 51 6 include/linux/list.h:76 (set (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 unwind_tables.prev+0 S4 A32])
        (nil)))

(insn:TI 51 49 53 6 include/linux/list.h:41 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 53 51 54 6 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [153])
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
            (nil))))

(insn:TI 54 53 55 6 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 54 46 6 include/linux/list.h:44 (set (mem/s/f/j:SI (reg/f:SI 2 r2 [orig:134 D.15855 ] [134]) [0 <variable>.next+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])
        (nil)))

(insn:TI 46 55 105 6 arch/arm/kernel/unwind.c:420 (set (reg/v:SI 1 r1 [orig:137 flags ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 105 46 57 6 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:137 flags ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 57 105 59 6 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 59 57 106 6 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 106 59 107 6 ( flags (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 107 106 108 7 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:141 size ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 60 7 ( text_size (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:143 text_size ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 60 108 61 7 21 "" [1 uses])

(note 61 60 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 66 61 72 7 arch/arm/kernel/unwind.c:425 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 72 66 83 7 arch/arm/kernel/unwind.c:425 (use (reg/i:SI 0 r0)) -1 (nil))

(note 83 72 84 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 84 83 85 7 arch/arm/kernel/unwind.c:425 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 85 84 78)

(note 78 85 80 NOTE_INSN_DELETED)

(note 80 78 0 NOTE_INSN_DELETED)


;; Function search_index (search_index)[0:854]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: addr+0
Reg 1: first+0
Reg 2: last+0
Variables:
  name: first
    offset 0
      (reg:SI 1 r1 [ first ])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg:SI 0 r0 [ addr ])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 3:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 2: last+0
Variables:
  name: last
    offset 0
      (reg/v/f:SI 2 r2 [orig:139 last ] [139])


Basic block 4:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 5:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 6:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 0: mid+0
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg/v/f:SI 2 r2 [orig:139 last ] [139])
  name: mid
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 7:
IN:
Stack adjustment: 8
Reg 0: mid+0
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: mid
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 8:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg:SI 2 r2 [ last ])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg/v/f:SI 2 r2 [orig:139 last ] [139])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


Basic block 9:
IN:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg/v/f:SI 2 r2 [orig:139 last ] [139])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])

OUT:
Stack adjustment: 8
Reg 1: addr+0
Reg 2: last+0
Reg 3: first+0
Variables:
  name: first
    offset 0
      (reg/v/f:SI 3 r3 [orig:138 first ] [138])
  name: last
    offset 0
      (reg/v/f:SI 2 r2 [orig:139 last ] [139])
  name: addr
    offset 0
      (reg/v:SI 1 r1 [orig:137 addr ] [137])


10 basic blocks, 12 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 738, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 738, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [0.0%]  (fallthru) 4 [100.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

Successors:  9 [100.0%] 
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 738, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  5 [39.0%]  (fallthru) 7 [61.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 288, maybe hot.
Predecessors:  4 [39.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}

Successors:  9 [100.0%] 


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  7 [95.5%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  7 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  4 [61.0%]  6 [100.0%]  (fallthru,dfs_back)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	

Successors:  6 [95.5%]  8 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 450, maybe hot.
Predecessors:  7 [4.5%]  (fallthru,loop_exit)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 1, loop_depth 0, count 0, freq 738, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 3 [100.0%]  5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 9, loop_depth 0, count 0, freq 738, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




search_index

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,13u,1d} r1={3d,5u} r2={5d,5u,1d} r3={4d,7u,1d} r4={1d,2u} r12={3d,2u} r13={2d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 201{146d,52u,3e} in 30{29 regular + 1 call} insns.
(note 1 0 99 NOTE_INSN_DELETED)

(note 99 1 100 2 ( addr (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 100 99 101 2 ( first (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ first ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 101 100 6 2 ( last (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ last ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 101 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 3 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 3 5 2 2 arch/arm/kernel/unwind.c:107 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (reg:SI 1 r1 [ first ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ first ])
        (nil)))

(insn 2 3 102 2 arch/arm/kernel/unwind.c:107 (set (reg/v:SI 1 r1 [orig:137 addr ] [137])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ addr ])
        (nil)))

(note 102 2 84 2 ( first (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:138 first ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn/f:TI 84 102 85 2 arch/arm/kernel/unwind.c:107 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 85 84 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 85 103 2 arch/arm/kernel/unwind.c:110 (set (reg:SI 0 r0 [orig:140 <variable>.addr ] [140])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(note 103 8 9 2 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:137 addr ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 9 103 10 2 arch/arm/kernel/unwind.c:110 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:140 <variable>.addr ] [140]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:140 <variable>.addr ] [140])
        (nil)))

(jump_insn:TI 10 9 11 2 arch/arm/kernel/unwind.c:110 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 13 11 15 3 arch/arm/kernel/unwind.c:111 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)
        (nil)))

(call_insn:TI 15 13 106 3 arch/arm/kernel/unwind.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 106 15 105 3 ( last (nil)) NOTE_INSN_VAR_LOCATION)

(note 105 106 104 3 ( first (nil)) NOTE_INSN_VAR_LOCATION)

(note 104 105 16 3 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 16 104 107 3 arch/arm/kernel/unwind.c:112 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 107 16 94 3 ( last (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:139 last ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 94 107 95 3 arch/arm/kernel/unwind.c:112 (set (pc)
        (label_ref 54)) -1 (nil))
;; End of basic block 3 -> ( 9)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 95 94 108)

(note 108 95 109 4 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:137 addr ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 109 108 19 4 ( first (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:138 first ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 19 109 20 4 28 "" [1 uses])

(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 4 arch/arm/kernel/unwind.c:113 (set (reg:SI 0 r0 [orig:142 <variable>.addr ] [142])
        (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 22 21 23 4 arch/arm/kernel/unwind.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:142 <variable>.addr ] [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:142 <variable>.addr ] [142])
        (nil)))

(jump_insn:TI 23 22 96 4 arch/arm/kernel/unwind.c:113 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  7 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}

;; Pred edge  4 [39.0%]  (fallthru)
(note 96 23 97 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(jump_insn 97 96 98 5 (set (pc)
        (label_ref 54)) -1 (nil))
;; End of basic block 5 -> ( 9)


;; Succ edge  9 [100.0%] 

(barrier 98 97 48)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  7 [95.5%] 
(code_label 48 98 27 6 32 "" [1 uses])

(note 27 48 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 32 27 31 6 NOTE_INSN_DELETED)

(insn:TI 31 32 36 6 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [147])
        (ashiftrt:SI (reg:SI 0 r0 [146])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 36 31 33 6 arch/arm/kernel/unwind.c:119 (set (reg:SI 12 ip [orig:149 <variable>.addr ] [149])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [147])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 3 r3 [orig:138 first ] [138])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 36 110 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
        (plus:SI (mult:SI (reg:SI 0 r0 [147])
                (const_int 8 [0x8]))
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 270 {*arith_shiftsi} (nil))

(note 110 33 71 6 ( mid (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 71 110 74 6 arch/arm/kernel/unwind.c:117 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 12 ip [orig:149 <variable>.addr ] [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:149 <variable>.addr ] [149])
        (nil)))

(insn:TI 74 71 72 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 240 {*movsicc_insn} (nil))

(insn 72 74 111 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

(note 111 72 78 7 ( last (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:139 last ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [61.0%] 
;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
(code_label 78 111 75 7 34 "" [1 uses])

(note 75 78 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 75 112 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [143])
        (minus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 28 {*arm_subsi3_insn} (nil))

(note 112 28 49 7 ( mid (nil)) NOTE_INSN_VAR_LOCATION)

(insn 49 112 50 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/f:SI 12 ip [150])
        (plus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn:TI 50 49 29 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:138 first ] [138])
            (reg/f:SI 12 ip [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [150])
        (nil)))

(insn:TI 29 50 30 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [145])
        (ashiftrt:SI (reg:SI 0 r0 [143])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [143])
            (const_int 8 [0x8]))
        (nil)))

(insn:TI 30 29 51 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [146])
        (plus:SI (reg:SI 0 r0 [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 51 30 52 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  6 [95.5%] 
;; Succ edge  8 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 113 8 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (reg/v/f:SI 3 r3 [orig:138 first ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

(note 113 53 54 9 ( last (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:139 last ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 3 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [100.0%] 
(code_label 54 113 55 9 29 "" [2 uses])

(note 55 54 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 55 66 9 arch/arm/kernel/unwind.c:126 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 2 r2 [orig:139 last ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (nil)))

(insn 66 60 86 9 arch/arm/kernel/unwind.c:126 (use (reg/i:SI 0 r0)) -1 (nil))

(note 86 66 87 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 87 86 88 9 arch/arm/kernel/unwind.c:126 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 88 87 82)

(note 82 88 83 NOTE_INSN_DELETED)

(note 83 82 0 NOTE_INSN_DELETED)


;; Function unwind_get_byte (unwind_get_byte)[0:856]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: ctrl+0
Variables:
  name: ctrl
    offset 0
      (reg:SI 0 r0 [ ctrl ])

OUT:
Stack adjustment: 8
Reg 0: ctrl+0
Reg 3: ctrl+0
Variables:
  name: ctrl
    offset 0
      (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
      (reg:SI 0 r0 [ ctrl ])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: ctrl+0
Reg 3: ctrl+0
Variables:
  name: ctrl
    offset 0
      (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
      (reg:SI 0 r0 [ ctrl ])

OUT:
Stack adjustment: 8
Reg 0: ret+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:133 ret ] [133])


Basic block 4:
IN:
Stack adjustment: 8
Reg 0: ctrl+0
Reg 3: ctrl+0
Variables:
  name: ctrl
    offset 0
      (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
      (reg:SI 0 r0 [ ctrl ])

OUT:
Stack adjustment: 8
Reg 3: ctrl+0
Variables:
  name: ctrl
    offset 0
      (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])


5 basic blocks, 5 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [0.0%]  (fallthru) 4 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 4.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 9996, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  3 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_get_byte

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,9u} r1={4d,4u} r2={5d,8u} r3={3d,4u,3d} r4={2d,3u} r12={3d,4u,1d} r13={2d,6u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,9u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 194{141d,49u,4e} in 26{25 regular + 1 call} insns.
(note 1 0 68 NOTE_INSN_DELETED)

(note 68 1 4 2 ( ctrl (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ ctrl ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 68 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 62 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 62 3 63 2 arch/arm/kernel/unwind.c:162 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 63 62 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 63 2 2 arch/arm/kernel/unwind.c:165 (set (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 2 6 7 2 arch/arm/kernel/unwind.c:162 (set (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
        (reg:SI 0 r0 [ ctrl ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 8 2 arch/arm/kernel/unwind.c:165 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 69 2 arch/arm/kernel/unwind.c:165 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

(note 69 8 9 3 ( ctrl (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 69 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 11 9 12 3 arch/arm/kernel/unwind.c:166 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)
        (nil)))

(call_insn:TI 12 11 70 3 arch/arm/kernel/unwind.c:166 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 70 12 13 3 ( ctrl (nil)) NOTE_INSN_VAR_LOCATION)

(insn 13 70 71 3 arch/arm/kernel/unwind.c:167 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 71 13 64 3 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:133 ret ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 64 71 57 3 arch/arm/kernel/unwind.c:167 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 57 64 72)

(note 72 57 73 4 ( ctrl (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 73 72 16 4 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 16 73 17 4 38 "" [1 uses])

(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 19 4 arch/arm/kernel/unwind.c:170 (set (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 18 21 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 2 r2 [orig:134 D.15482 ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
        (nil)))

(insn:TI 21 19 24 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 4 r4 [142])
        (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])
        (nil)))

(insn 24 21 20 4 arch/arm/kernel/unwind.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 20 24 27 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [140])
        (ashift:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (nil))

(insn 27 20 30 4 arch/arm/kernel/unwind.c:173 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 12 ip [143])
            (plus:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
                (const_int 4 [0x4])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
        (nil)))

(insn:TI 30 27 32 4 arch/arm/kernel/unwind.c:174 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [145])
            (plus:SI (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
                (const_int -1 [0xffffffffffffffff])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
        (nil)))

(insn 32 30 22 4 arch/arm/kernel/unwind.c:175 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [146])
            (plus:SI (reg:SI 2 r2 [146])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn:TI 22 32 38 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [141])
        (lshiftrt:SI (reg:SI 4 r4 [142])
            (reg:SI 0 r0 [140]))) 117 {*arm_shiftsi3} (nil))

(insn 38 22 23 4 arch/arm/kernel/unwind.c:177 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [147])
            (plus:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
                (const_int -1 [0xffffffffffffffff])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
        (nil)))

(insn:TI 23 38 74 4 arch/arm/kernel/unwind.c:170 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (and:SI (reg:SI 0 r0 [141])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(note 74 23 28 4 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:133 ret ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 28 74 31 4 arch/arm/kernel/unwind.c:173 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
            (reg/f:SI 12 ip [143]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg/f:SI 12 ip [143])
        (nil)))

(insn:TI 31 28 33 4 arch/arm/kernel/unwind.c:174 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
            (reg:SI 1 r1 [145]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 1 r1 [145])
        (nil)))

(insn:TI 33 31 39 4 arch/arm/kernel/unwind.c:175 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
            (reg:SI 2 r2 [146]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn:TI 39 33 52 4 arch/arm/kernel/unwind.c:177 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
            (reg:SI 2 r2 [147]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
            (expr_list:REG_DEAD (reg:SI 2 r2 [147])
                (nil)))))

(insn 52 39 75 4 arch/arm/kernel/unwind.c:180 (use (reg/i:SI 0 r0)) -1 (nil))

(note 75 52 67 4 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 67 75 66 4 arch/arm/kernel/unwind.c:180 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 66 67 60)

(note 60 66 61 NOTE_INSN_DELETED)

(note 61 60 0 NOTE_INSN_DELETED)


;; Function unwind_frame (unwind_frame)[0:858]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: frame+0
Variables:
  name: frame
    offset 0
      (reg:SI 0 r0 [ frame ])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])


Basic block 3:
IN:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])


Basic block 4:
IN:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])


Basic block 5:
IN:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 6:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 7:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 8:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 9:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 10:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 11:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 12:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 13:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 14:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 15:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 16:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 17:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 18:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 19:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 20:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 21:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 22:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 23:
IN:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 24:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 25:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 26:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 27:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 28:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 29:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 30:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])


Basic block 31:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])


Basic block 32:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])

OUT:
Stack adjustment: 112
Reg 1: load_sp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 33:
IN:
Stack adjustment: 112
Reg 1: load_sp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 1: load_sp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 34:
IN:
Stack adjustment: 112
Reg 1: load_sp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 1: load_sp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 35:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 36:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 37:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 38:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 39:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 40:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 41:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 42:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 2: reg+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:151 reg ] [151])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 43:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 44:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 45:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 46:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 1: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 47:
IN:
Stack adjustment: 112
Reg 1: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 1: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 48:
IN:
Stack adjustment: 112
Reg 1: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 49:
IN:
Stack adjustment: 112
Reg 1: mask+0
Reg 3: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])

OUT:
Stack adjustment: 112
Reg 1: mask+0
Reg 3: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: vsp
    offset 0
      (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 50:
IN:
Stack adjustment: 112
Reg 1: mask+0
Reg 3: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])

OUT:
Stack adjustment: 112
Reg 1: mask+0
Reg 3: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: vsp
    offset 0
      (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 51:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 52:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 53:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0
Reg 3: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: vsp
    offset 0
      (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])


Basic block 54:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
      (reg:SI 0 r0 [orig:146 insn ] [146])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])

OUT:
Stack adjustment: 112
Reg 1: insn+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])


Basic block 55:
IN:
Stack adjustment: 112
Reg 1: insn+0
Reg 3: mask+0
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])

OUT:
Stack adjustment: 112
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


Basic block 56:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 3: mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: mask
    offset 0
      (reg/v:SI 3 r3 [orig:147 mask ] [147])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: load_sp+0 insn+0 mask+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 57:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: load_sp+0 insn+0 mask+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 58:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: load_sp+0 insn+0 mask+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 59:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: load_sp+0 insn+0 mask+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 60:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: vsp+0 flags+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: urc+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 10: flags+0 vsp+0
Variables:
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: urc
    offset 0
      (reg/v:SI 0 r0 [orig:163 urc ] [163])


Basic block 61:
IN:
Stack adjustment: 112
Reg 0: insn+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: vsp+0 flags+0
Variables:
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: insn
    offset 0
      (reg:SI 0 r0 [orig:146 insn ] [146])
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 0: urc+0
Reg 1: load_sp+0 insn+0 mask+0
Reg 2: vsp+0
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0 vsp+0
Variables:
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: urc
    offset 0
      (reg/v:SI 0 r0 [orig:163 urc ] [163])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])


Basic block 62:
IN:
Stack adjustment: 112
Reg 0: urc+0
Reg 1: mask+0 insn+0 load_sp+0
Reg 2: vsp+0
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: vsp+0 flags+0
Variables:
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: urc
    offset 0
      (reg/v:SI 0 r0 [orig:163 urc ] [163])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])

OUT:
Stack adjustment: 112
Reg 1: load_sp+0 insn+0 mask+0
Reg 2: vsp+0
Reg 4: table+0
Reg 5: frame+0
Reg 6: high+0
Reg 8: low+0
Reg 9: idx+0
Reg 10: flags+0 vsp+0
Variables:
  name: load_sp
    offset 0
      (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
  name: insn
    offset 0
      (reg/v:SI 1 r1 [orig:146 insn ] [146])
  name: vsp
    offset 0
      (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
  name: frame
    offset 0
      (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
  name: vsp
    offset 0
      (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
  name: high
    offset 0
      (reg/v:SI 6 r6 [orig:166 high ] [166])
  name: mask
    offset 0
      (reg/v:SI 1 r1 [orig:152 mask ] [152])
  name: idx
    offset 0
      (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
  name: low
    offset 0
      (reg/v:SI 8 r8 [orig:165 low ] [165])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:157 flags ] [157])
  name: table
    offset 0
      (reg/v/f:SI 4 r4 [orig:158 table ] [158])


63 basic blocks, 92 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 3411, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 3411, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  61 [61.0%]  3 [39.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1330, maybe hot.
Predecessors:  2 [39.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

Successors:  4 [50.0%]  (fallthru) 5 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 665, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 9 [r9]
;; live  kill	 14 [lr]

Successors:  13 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 665, maybe hot.
Predecessors:  3 [50.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 10 [sl]
;; live  kill	 14 [lr]

Successors:  10 [100.0%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  10 [95.5%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  7 [50.0%]  (fallthru) 9 [50.0%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 4775, maybe hot.
Predecessors:  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  8 [4.5%]  (fallthru,loop_exit) 9 [95.5%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 215, maybe hot.
Predecessors:  7 [4.5%]  (fallthru,loop_exit)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

Successors:  12 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 9335, maybe hot.
Predecessors:  6 [50.0%]  7 [95.5%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  10 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  9 [100.0%]  (fallthru,dfs_back) 5 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

Successors:  6 [95.5%]  11 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 450, maybe hot.
Predecessors:  10 [4.5%]  (fallthru,loop_exit)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	

Successors:  12 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 665, maybe hot.
Predecessors:  11 [100.0%]  (fallthru) 8 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  13 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 1330, maybe hot.
Predecessors:  12 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

Successors:  14 [100.0%]  (fallthru) 55 [0.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 1329, maybe hot.
Predecessors:  13 [100.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  61 [19.9%]  15 [80.1%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 1065, maybe hot.
Predecessors:  14 [80.1%]  (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  16 [73.0%]  (fallthru) 17 [27.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 777, maybe hot.
Predecessors:  15 [73.0%]  (fallthru)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 9 [r9]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 9 [r9]
;; live  kill	

Successors:  18 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 287, maybe hot.
Predecessors:  15 [27.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	

Successors:  18 [100.0%]  (fallthru) 23 [0.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 1064, maybe hot.
Predecessors:  17 [100.0%]  (fallthru) 16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  19 [72.0%]  (fallthru) 21 [28.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 766, maybe hot.
Predecessors:  18 [72.0%]  (fallthru)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  20 [100.0%]  (fallthru) 22 [0.0%] 
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 766, maybe hot.
Predecessors:  19 [100.0%]  (fallthru)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  21 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 1064, maybe hot.
Predecessors:  20 [100.0%]  (fallthru) 18 [28.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

Successors:  58 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 0.
Predecessors:  19 [0.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  23 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 0.
Predecessors:  22 [100.0%]  (fallthru) 17 [0.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  61 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 1, count 0, freq 5287, maybe hot.
Predecessors:  58 [97.8%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  25 [50.0%]  (fallthru) 26 [50.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 25 , prev 24, next 26, loop_depth 1, count 0, freq 2643, maybe hot.
Predecessors:  24 [50.0%]  (fallthru)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  28 [100.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 26 , prev 25, next 27, loop_depth 1, count 0, freq 2643, maybe hot.
Predecessors:  24 [50.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  27 [28.0%]  (fallthru) 29 [72.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 27 , prev 26, next 28, loop_depth 1, count 0, freq 740, maybe hot.
Predecessors:  26 [28.0%]  (fallthru)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  28 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 28 , prev 27, next 29, loop_depth 1, count 0, freq 3383, maybe hot.
Predecessors:  27 [100.0%]  (fallthru) 25 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  56 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 29 , prev 28, next 30, loop_depth 1, count 0, freq 1903, maybe hot.
Predecessors:  26 [72.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  30 [13.7%]  (fallthru) 35 [86.3%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 30 , prev 29, next 31, loop_depth 1, count 0, freq 261, maybe hot.
Predecessors:  29 [13.7%]  (fallthru)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

Successors:  31 [0.0%]  (fallthru,loop_exit) 32 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 31 , prev 30, next 32, loop_depth 0, count 0, freq 0.
Predecessors:  30 [0.0%]  (fallthru,loop_exit)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  55 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 32 , prev 31, next 33, loop_depth 1, count 0, freq 261, maybe hot.
Predecessors:  30 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

Successors:  33 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 33 , prev 32, next 34, loop_depth 2, count 0, freq 3131, maybe hot.
Predecessors:  33 [91.7%]  (dfs_back) 32 [100.0%]  (fallthru)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

Successors:  33 [91.7%]  (dfs_back) 34 [8.3%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 34 , prev 33, next 35, loop_depth 1, count 0, freq 261, maybe hot.
Predecessors:  33 [8.3%]  (fallthru,loop_exit)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  56 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 35 , prev 34, next 36, loop_depth 1, count 0, freq 1642, maybe hot.
Predecessors:  29 [86.3%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  36 [28.0%]  (fallthru) 38 [72.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 36 , prev 35, next 37, loop_depth 1, count 0, freq 460, maybe hot.
Predecessors:  35 [28.0%]  (fallthru)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  37 [72.0%]  (fallthru) 43 [28.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 37 , prev 36, next 38, loop_depth 1, count 0, freq 331, maybe hot.
Predecessors:  36 [72.0%]  (fallthru)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  53 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 38 , prev 37, next 39, loop_depth 1, count 0, freq 1182, maybe hot.
Predecessors:  35 [72.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  39 [31.1%]  (fallthru) 43 [69.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 39 , prev 38, next 40, loop_depth 1, count 0, freq 367, maybe hot.
Predecessors:  38 [31.1%]  (fallthru)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

Successors:  41 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 40 , prev 39, next 41, loop_depth 2, count 0, freq 4407, maybe hot.
Predecessors:  41 [92.3%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

Successors:  41 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 41 , prev 40, next 42, loop_depth 2, count 0, freq 4774, maybe hot.
Predecessors:  40 [100.0%]  (fallthru,dfs_back) 39 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  40 [92.3%]  42 [7.7%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 42 , prev 41, next 43, loop_depth 1, count 0, freq 367, maybe hot.
Predecessors:  41 [7.7%]  (fallthru,loop_exit)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

Successors:  56 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 43 , prev 42, next 44, loop_depth 1, count 0, freq 944, maybe hot.
Predecessors:  38 [69.0%]  36 [28.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  44 [28.0%]  (fallthru) 45 [72.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 44 , prev 43, next 45, loop_depth 1, count 0, freq 264, maybe hot.
Predecessors:  43 [28.0%]  (fallthru)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  56 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 45 , prev 44, next 46, loop_depth 1, count 0, freq 680, maybe hot.
Predecessors:  43 [72.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  46 [13.7%]  (fallthru) 51 [86.3%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 46 , prev 45, next 47, loop_depth 1, count 0, freq 93, maybe hot.
Predecessors:  45 [13.7%]  (fallthru)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  48 [0.0%]  (loop_exit) 47 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 47 , prev 46, next 48, loop_depth 1, count 0, freq 93, maybe hot.
Predecessors:  46 [100.0%]  (fallthru)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  48 [0.0%]  (fallthru,loop_exit) 49 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 48 , prev 47, next 49, loop_depth 0, count 0, freq 0.
Predecessors:  46 [0.0%]  (loop_exit) 47 [0.0%]  (fallthru,loop_exit)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  55 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 49 , prev 48, next 50, loop_depth 2, count 0, freq 1491, maybe hot.
Predecessors:  49 [93.8%]  (dfs_back) 47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  49 [93.8%]  (dfs_back) 50 [6.2%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 50 , prev 49, next 51, loop_depth 1, count 0, freq 93, maybe hot.
Predecessors:  49 [6.2%]  (fallthru)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}

Successors:  53 [100.0%] 


Basic block 51 , prev 50, next 52, loop_depth 1, count 0, freq 587, maybe hot.
Predecessors:  45 [86.3%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  52 [100.0%]  (fallthru) 54 [0.0%]  (loop_exit)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 52 , prev 51, next 53, loop_depth 1, count 0, freq 586, maybe hot.
Predecessors:  51 [100.0%]  (fallthru)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

Successors:  53 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 53 , prev 52, next 54, loop_depth 1, count 0, freq 1010, maybe hot.
Predecessors:  52 [100.0%]  (fallthru) 37 [100.0%]  50 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  56 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 54 , prev 53, next 55, loop_depth 0, count 0, freq 0.
Predecessors:  51 [0.0%]  (loop_exit)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  55 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 55 , prev 54, next 56, loop_depth 0, count 0, freq 1.
Predecessors:  54 [100.0%]  (fallthru) 13 [0.0%]  31 [100.0%]  48 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  61 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 56 , prev 55, next 57, loop_depth 1, count 0, freq 2643, maybe hot.
Predecessors:  42 [100.0%]  28 [100.0%]  34 [100.0%]  44 [100.0%]  53 [100.0%] 
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  61 [2.2%]  (loop_exit) 57 [97.8%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 5285, should be 2643

Basic block 57 , prev 56, next 58, loop_depth 1, count 0, freq 5052, maybe hot.
Predecessors:  56 [97.8%]  (fallthru)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  61 [14.0%]  (loop_exit) 58 [86.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 2584, should be 5052

Basic block 58 , prev 57, next 59, loop_depth 1, count 0, freq 5409, maybe hot.
Predecessors:  57 [86.0%]  (fallthru,dfs_back) 21 [100.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  24 [97.8%]  59 [2.2%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 59 , prev 58, next 60, loop_depth 0, count 0, freq 122, maybe hot.
Predecessors:  58 [2.2%]  (fallthru,loop_exit)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  61 [19.9%]  60 [80.1%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 60 , prev 59, next 61, loop_depth 0, count 0, freq 97, maybe hot.
Predecessors:  59 [80.1%]  (fallthru)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  kill	

Successors:  62 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 61 , prev 60, next 62, loop_depth 0, count 0, freq 3314, maybe hot.
Predecessors:  2 [61.0%]  56 [2.2%]  (loop_exit) 14 [19.9%]  59 [19.9%]  57 [14.0%]  (loop_exit) 23 [100.0%]  55 [100.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  62 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 3137, should be 3314

Basic block 62 , prev 61, next 1, loop_depth 0, count 0, freq 3411, maybe hot.
Predecessors:  61 [100.0%]  (fallthru) 60 [100.0%] 
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 1 , prev 62, loop_depth 0, count 0, freq 3411, maybe hot.
Predecessors:  62 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_frame

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,43u} r1={38d,38u} r2={31d,22u,2d} r3={53d,56u,1d} r4={4d,21u,5d} r5={2d,12u,3d} r6={5d,6u} r7={3d,6u} r8={2d,4u,1d} r9={8d,16u} r10={4d,5u} r12={14d,2u} r13={3d,113u,9d} r14={13d,2u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={48d,51u} r25={13d} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} 
;;    total ref usage 2014{1583d,397u,34e} in 251{239 regular + 12 call} insns.
(note 2 0 691 NOTE_INSN_DELETED)

(note 691 2 5 2 ( frame (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ frame ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 691 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 14 2 NOTE_INSN_DELETED)

(note 14 10 553 2 NOTE_INSN_DELETED)

(insn/f:TI 553 14 3 2 arch/arm/kernel/unwind.c:275 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -32 [0xffffffffffffffe0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 8 r8))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 9 r9))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 24 [0x18])) [0 S4 A32])
                                    (reg:SI 10 sl))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 28 [0x1c])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 3 553 7 2 arch/arm/kernel/unwind.c:275 (set (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
        (reg:SI 0 r0 [ frame ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 3 692 2 arch/arm/kernel/unwind.c:281 (set (reg/v:SI 8 r8 [orig:165 low ] [165])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 692 7 554 2 ( low (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:165 low ] [165])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn/f 554 692 555 2 arch/arm/kernel/unwind.c:275 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -80 [0xffffffffffffffb0]))) 4 {*arm_addsi3} (nil))

(note 555 554 12 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 12 555 693 2 arch/arm/kernel/unwind.c:287 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 693 12 13 2 ( frame (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 13 693 8 2 arch/arm/kernel/unwind.c:287 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 8 13 9 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [177])
        (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8128 [0x1fc0]))) 4 {*arm_addsi3} (nil))

(insn:TI 9 8 545 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [176])
        (plus:SI (reg:SI 6 r6 [177])
            (const_int 63 [0x3f]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8191 [0x1fff]))
        (nil)))

(insn:TI 545 9 694 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg:SI 6 r6 [176])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(note 694 545 546 2 ( high (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:166 high ] [166])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 546 694 15 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg/v:SI 6 r6 [orig:166 high ] [166])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 15 546 16 2 arch/arm/kernel/unwind.c:287 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:287 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 2 -> ( 61 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 17 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 17 18 3 NOTE_INSN_DELETED)

(insn:TI 18 21 19 3 arch/arm/kernel/unwind.c:290 (set (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 18 20 3 arch/arm/kernel/unwind.c:135 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 20 19 22 3 arch/arm/kernel/unwind.c:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("core_kernel_text") [flags 0x41] <function_decl 0x10a58180 core_kernel_text>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 22 20 23 3 arch/arm/kernel/unwind.c:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 23 22 24 3 arch/arm/kernel/unwind.c:135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%]  (fallthru)
(note 24 23 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 24 28 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (nil)))

(insn 28 27 29 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(insn:TI 29 28 30 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))
        (nil)))

(call_insn:TI 30 29 31 4 arch/arm/kernel/unwind.c:137 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 31 30 695 4 arch/arm/kernel/unwind.c:137 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(note 695 31 652 4 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 652 695 653 4 (set (pc)
        (label_ref 93)) -1 (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 653 652 696)

(note 696 653 34 5 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
(code_label 34 696 35 5 46 "" [1 uses])

(note 35 34 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 35 38 5 arch/arm/kernel/unwind.c:143 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 38 37 40 5 arch/arm/kernel/unwind.c:143 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 40 38 82 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 82 40 41 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 2 r2 [277])
        (reg/f:SI 3 r3 [182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 41 82 697 5 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [182]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [182])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
            (nil))))

(note 697 41 39 5 ( table (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:158 table ] [158])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 39 697 698 5 arch/arm/kernel/unwind.c:143 (set (reg/v:SI 10 sl [orig:157 flags ] [157])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 698 39 654 5 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:157 flags ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 654 698 655 5 (set (pc)
        (label_ref 78)) -1 (nil))
;; End of basic block 5 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 655 654 81)

;; Start of basic block ( 10) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [95.5%] 
(code_label 81 655 44 6 51 "" [1 uses])

(note 44 81 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 6 arch/arm/kernel/unwind.c:145 (set (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (nil)))

(insn:TI 46 45 47 6 arch/arm/kernel/unwind.c:145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183])
        (nil)))

(jump_insn:TI 47 46 48 6 arch/arm/kernel/unwind.c:145 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/unwind.c:146 (set (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(insn:TI 50 49 51 7 arch/arm/kernel/unwind.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184])
        (nil)))

(jump_insn:TI 51 50 52 7 arch/arm/kernel/unwind.c:146 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [4.5%]  (fallthru,loop_exit)
;; Succ edge  9 [95.5%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 54 52 53 8 NOTE_INSN_DELETED)

(insn:TI 53 54 55 8 arch/arm/kernel/unwind.c:147 (set (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 55 53 56 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (nil)))

(insn:TI 56 55 57 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 57 56 58 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 58 57 60 8 arch/arm/kernel/unwind.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 60 58 61 8 include/linux/list.h:101 (set (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 61 60 62 8 include/linux/list.h:101 (set (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 61 63 8 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])) 167 {*arm_movsi_insn} (nil))

(insn:TI 63 62 65 8 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:161 D.15897 ] [161]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
            (nil))))

(insn:TI 65 63 66 8 include/linux/list.h:62 (set (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
        (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
        (nil)))

(insn:TI 66 65 67 8 include/linux/list.h:41 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(insn:TI 67 66 69 8 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
        (nil)))

(insn:TI 69 67 71 8 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 7 r7 [190])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 71 69 59 8 include/linux/list.h:44 (set (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(insn:TI 59 71 699 8 arch/arm/kernel/unwind.c:147 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 699 59 656 8 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 656 699 657 8 (set (pc)
        (label_ref 87)) -1 (nil))
;; End of basic block 8 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 657 656 700)

(note 700 657 74 9 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [95.5%] 
(code_label 74 700 75 9 49 "" [2 uses])

(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 76 75 78 9 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 78 76 79 10 48 "" [1 uses])

(note 79 78 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 79 494 10 arch/arm/kernel/unwind.c:144 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (reg/f:SI 2 r2 [277]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
        (nil)))

(insn 494 83 84 10 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 7 r7 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(jump_insn:TI 84 494 85 10 arch/arm/kernel/unwind.c:144 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 10 -> ( 6 11)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [95.5%] 
;; Succ edge  11 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	

;; Pred edge  10 [4.5%]  (fallthru,loop_exit)
(note 85 84 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 701 11 arch/arm/kernel/unwind.c:130 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

(note 701 86 87 12 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11 8) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 87 701 88 12 50 "" [1 uses])

(note 88 87 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 88 90 12 include/linux/spinlock.h:340 (set (reg:SI 1 r1)
        (reg/v:SI 10 sl [orig:157 flags ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 90 91 92 12 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 92 90 93 12 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 4) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 93 92 94 13 47 "" [1 uses])

(note 94 93 95 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 95 94 100 13 arch/arm/kernel/unwind.c:291 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 100 95 99 13 arch/arm/kernel/unwind.c:292 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1)
            (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                    (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 99 100 96 13 arch/arm/kernel/unwind.c:292 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0)
            (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x110ea840>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 96 99 106 13 arch/arm/kernel/unwind.c:291 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 597)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 13 -> ( 14 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)
;; Succ edge  55 [0.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
(note 106 96 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 106 111 14 arch/arm/kernel/unwind.c:296 (set (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (nil)))

(insn:TI 111 107 109 14 arch/arm/kernel/unwind.c:298 (set (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 111 108 14 arch/arm/kernel/unwind.c:297 (set (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 108 109 112 14 arch/arm/kernel/unwind.c:296 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])
        (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])
        (nil)))

(insn:TI 112 108 550 14 arch/arm/kernel/unwind.c:298 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])
        (nil)))

(insn 550 112 110 14 arch/arm/kernel/unwind.c:299 (set (reg:SI 3 r3 [196])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 110 550 114 14 arch/arm/kernel/unwind.c:297 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])) 167 {*arm_movsi_insn} (nil))

(insn:TI 114 110 115 14 arch/arm/kernel/unwind.c:299 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (reg:SI 3 r3 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 115 114 116 14 arch/arm/kernel/unwind.c:301 (set (reg:SI 1 r1 [orig:172 D.15626 ] [172])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
                (const_int 4 [0x4])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 116 115 117 14 arch/arm/kernel/unwind.c:301 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 117 116 118 14 arch/arm/kernel/unwind.c:301 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil))))
;; End of basic block 14 -> ( 61 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [19.9%] 
;; Succ edge  15 [80.1%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [80.1%]  (fallthru)
(note 118 117 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 120 118 121 15 arch/arm/kernel/unwind.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(jump_insn:TI 121 120 122 15 arch/arm/kernel/unwind.c:304 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [73.0%]  (fallthru)
;; Succ edge  17 [27.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 9 [r9]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 9 [r9]
;; live  kill	

;; Pred edge  15 [73.0%]  (fallthru)
(note 122 121 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 16 NOTE_INSN_DELETED)

(insn:TI 124 123 125 16 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [198])
        (sign_extract:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 125 124 702 16 arch/arm/kernel/unwind.c:306 (set (reg/f:SI 9 r9 [199])
        (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(note 702 125 126 16 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 126 702 127 16 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [200])
        (plus:SI (reg:SI 1 r1 [198])
            (reg/f:SI 9 r9 [199]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(insn 127 126 658 16 arch/arm/kernel/unwind.c:306 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
        (reg:SI 1 r1 [200])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [200])
        (nil)))

(jump_insn 658 127 659 16 (set (pc)
        (label_ref 150)) -1 (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 659 658 703)

(note 703 659 130 17 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  15 [27.0%] 
(code_label 130 703 131 17 54 "" [1 uses])

(note 131 130 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 132 131 133 17 arch/arm/kernel/unwind.c:307 (set (reg:SI 3 r3 [201])
        (and:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 133 132 136 17 arch/arm/kernel/unwind.c:307 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [201])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [201])
        (nil)))

(insn:TI 136 133 704 17 arch/arm/kernel/unwind.c:309 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 9 r9 [202])
            (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
                (const_int 4 [0x4])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(note 704 136 145 17 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 145 704 705 17 arch/arm/kernel/unwind.c:311 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2)
            (reg/v/f:SI 9 r9 [orig:164 idx ] [164]))) 2345 {neon_vornv2di+78} (nil))

(note 705 145 137 17 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 137 705 706 17 arch/arm/kernel/unwind.c:309 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
            (reg/f:SI 9 r9 [202]))) 2345 {neon_vornv2di+78} (nil))

(note 706 137 143 17 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 143 706 134 17 arch/arm/kernel/unwind.c:311 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0)
            (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10d655a0>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 134 143 150 17 arch/arm/kernel/unwind.c:307 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 608)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 17 -> ( 18 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)
;; Succ edge  23 [0.0%] 

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
(code_label 150 134 151 18 55 "" [1 uses])

(note 151 150 152 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 152 151 153 18 arch/arm/kernel/unwind.c:317 (set (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 153 152 154 18 arch/arm/kernel/unwind.c:317 (set (reg:SI 1 r1 [orig:169 D.15644 ] [169])
        (mem:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 154 153 155 18 arch/arm/kernel/unwind.c:317 (set (reg:SI 3 r3 [orig:168 D.15645 ] [168])
        (and:SI (reg:SI 1 r1 [orig:169 D.15644 ] [169])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 155 154 158 18 arch/arm/kernel/unwind.c:317 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 158 155 159 18 arch/arm/kernel/unwind.c:318 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [204])
            (plus:SI (reg:SI 3 r3 [204])
                (const_int -2147483646 [0xffffffff80000002])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 159 158 160 18 arch/arm/kernel/unwind.c:318 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
            (reg:SI 3 r3 [204]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 160 159 156 18 arch/arm/kernel/unwind.c:319 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [205])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(jump_insn 156 160 165 18 arch/arm/kernel/unwind.c:317 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 574)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  19 [72.0%]  (fallthru)
;; Succ edge  21 [28.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [72.0%]  (fallthru)
(note 165 156 166 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 166 165 167 19 arch/arm/kernel/unwind.c:320 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2130706432 [0xffffffff81000000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:168 D.15645 ] [168])
        (nil)))

(jump_insn:TI 167 166 168 19 arch/arm/kernel/unwind.c:320 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 20 22)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)
;; Succ edge  22 [0.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 168 167 172 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 172 168 173 20 NOTE_INSN_DELETED)

(note 173 172 169 20 NOTE_INSN_DELETED)

(insn:TI 169 173 170 20 arch/arm/kernel/unwind.c:321 (set (reg:SI 3 r3 [206])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 170 169 174 20 arch/arm/kernel/unwind.c:321 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
        (reg:SI 3 r3 [206])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [206])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn:TI 174 170 175 20 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [210])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
                    (const_int 2 [0x2])) [0 S1 A16]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
        (nil)))

(insn:TI 175 174 574 20 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [211])
        (plus:SI (reg:SI 3 r3 [210])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 ctrl.entries+0 S4 A32])
        (nil)))
;; End of basic block 20 -> ( 21)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  18 [28.0%] 
(code_label 574 175 572 21 88 "" [1 uses])

(note 572 574 176 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 176 572 190 21 arch/arm/kernel/unwind.c:322 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 3 r3 [211])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [211])
        (nil)))

(insn 190 176 707 21 arch/arm/kernel/unwind.c:187 (set (reg/f:SI 4 r4 [274])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(note 707 190 340 21 ( table (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 340 707 660 21 arch/arm/kernel/unwind.c:235 (set (reg:SI 7 r7 [275])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(jump_insn 660 340 661 21 (set (pc)
        (label_ref 539)) -1 (nil))
;; End of basic block 21 -> ( 58)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  58 [100.0%] 

(barrier 661 660 708)

(note 708 661 179 22 ( table (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:158 table ] [158])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  19 [0.0%] 
(code_label 179 708 180 22 59 "" [1 uses])

(note 180 179 182 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 182 180 608 22 arch/arm/kernel/unwind.c:324 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 22 17) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  17 [0.0%] 
(code_label 608 182 606 23 90 "" [1 uses])

(note 606 608 185 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 185 606 662 23 arch/arm/kernel/unwind.c:324 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 662 185 663 23 (set (pc)
        (label_ref 458)) -1 (nil))
;; End of basic block 23 -> ( 61)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 663 662 709)

(note 709 663 710 24 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 710 709 711 24 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 711 710 712 24 ( table (nil)) NOTE_INSN_VAR_LOCATION)

(note 712 711 713 24 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 713 712 714 24 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 714 713 429 24 ( load_sp (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 58) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  58 [97.8%] 
(code_label 429 714 189 24 80 "" [1 uses])

(note 189 429 194 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 194 189 191 24 NOTE_INSN_DELETED)

(insn:TI 191 194 715 24 arch/arm/kernel/unwind.c:187 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(note 715 191 192 24 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 192 715 719 24 arch/arm/kernel/unwind.c:187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 719 192 718 24 ( load_sp (nil)) NOTE_INSN_VAR_LOCATION)

(note 718 719 717 24 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(note 717 718 716 24 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 716 717 195 24 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 195 716 720 24 arch/arm/kernel/unwind.c:191 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
                        (const_int 192 [0xc0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [orig:141 D.15954 ] [141])
                (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
                    (const_int 192 [0xc0])))
        ]) 69 {*andsi3_compare0} (nil))

(note 720 195 193 24 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 193 720 722 24 arch/arm/kernel/unwind.c:187 (set (reg/v:SI 1 r1 [orig:146 insn ] [146])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(note 722 193 721 24 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 721 722 196 24 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 196 721 197 24 arch/arm/kernel/unwind.c:191 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  26 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  24 [50.0%]  (fallthru)
(note 197 196 549 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 549 197 200 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 200 549 723 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [216])
        (ashift:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(note 723 200 201 25 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 201 723 199 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [217])
        (and:SI (reg:SI 1 r1 [216])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 199 201 202 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [214])
        (plus:SI (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 202 199 664 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [218])
        (plus:SI (reg:SI 3 r3 [214])
            (reg:SI 1 r1 [217]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [214])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))

(jump_insn 664 202 665 25 (set (pc)
        (label_ref 566)) -1 (nil))
;; End of basic block 25 -> ( 28)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 665 664 724)

(note 724 665 206 26 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  24 [50.0%] 
(code_label 206 724 207 26 60 "" [1 uses])

(note 207 206 208 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 208 207 209 26 arch/arm/kernel/unwind.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 D.15954 ] [141])
            (const_int 64 [0x40]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:141 D.15954 ] [141])
        (nil)))

(jump_insn:TI 209 208 210 26 arch/arm/kernel/unwind.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 26 -> ( 27 29)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  27 [28.0%]  (fallthru)
;; Succ edge  29 [72.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  26 [28.0%]  (fallthru)
(note 210 209 548 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 548 210 213 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 213 548 725 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [221])
        (ashift:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(note 725 213 214 27 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 214 725 212 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [222])
        (and:SI (reg:SI 1 r1 [221])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 212 214 215 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [219])
        (plus:SI (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn:TI 215 212 566 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [223])
        (minus:SI (reg:SI 3 r3 [219])
            (reg:SI 1 r1 [222]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [219])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))
;; End of basic block 27 -> ( 28)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 25) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 566 215 564 28 87 "" [1 uses])

(note 564 566 216 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 216 564 666 28 arch/arm/kernel/unwind.c:194 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 1 r1 [223])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [223])
        (nil)))

(jump_insn 666 216 667 28 (set (pc)
        (label_ref 419)) -1 (nil))
;; End of basic block 28 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 667 666 726)

(note 726 667 219 29 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 26) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  26 [72.0%] 
(code_label 219 726 220 29 62 "" [1 uses])

(note 220 219 221 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn:TI 221 220 222 29 arch/arm/kernel/unwind.c:195 (set (reg:SI 3 r3 [orig:142 D.15946 ] [142])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 240 [0xf0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 222 221 223 29 arch/arm/kernel/unwind.c:195 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 128 [0x80]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 223 222 727 29 arch/arm/kernel/unwind.c:195 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 271)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 29 -> ( 30 35)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  30 [13.7%]  (fallthru)
;; Succ edge  35 [86.3%] 

(note 727 223 224 30 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  29 [13.7%]  (fallthru)
(note 224 727 230 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 230 224 233 30 NOTE_INSN_DELETED)

(note 233 230 228 30 NOTE_INSN_DELETED)

(insn:TI 228 233 728 30 arch/arm/kernel/unwind.c:200 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(note 728 228 226 30 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 226 728 225 30 arch/arm/kernel/unwind.c:200 (set (reg:SI 9 r9 [orig:143 D.15945 ] [143])
        (ashift:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:146 insn ] [146])
        (nil)))

(insn:TI 225 226 729 30 arch/arm/kernel/unwind.c:197 (set (reg:SI 10 sl [orig:136 temp.538 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 729 225 730 30 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(note 730 729 229 30 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn 229 730 731 30 arch/arm/kernel/unwind.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 731 229 231 30 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 231 731 732 30 arch/arm/kernel/unwind.c:200 (set (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
        (ior:SI (reg:SI 0 r0)
            (reg:SI 9 r9 [orig:143 D.15945 ] [143]))) 89 {*arm_iorsi3} (nil))

(note 732 231 232 30 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 232 732 234 30 arch/arm/kernel/unwind.c:201 (set (reg:SI 3 r3 [225])
        (ashift:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 234 232 733 30 arch/arm/kernel/unwind.c:202 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg:SI 3 r3 [225])
                        (const_int 20 [0x14]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg:SI 3 r3 [225])
                    (const_int 20 [0x14])))
        ]) 118 {*shiftsi3_compare0} (nil))

(note 733 234 235 30 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 mask ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 235 733 236 30 arch/arm/kernel/unwind.c:202 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  31 [0.0%]  (fallthru,loop_exit)
;; Succ edge  32 [100.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  30 [0.0%]  (fallthru,loop_exit)
(note 236 235 238 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 238 236 668 31 arch/arm/kernel/unwind.c:203 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)
        (nil)))

(jump_insn 668 238 669 31 (set (pc)
        (label_ref 597)) -1 (nil))
;; End of basic block 31 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%] 

(barrier 669 668 244)

;; Start of basic block ( 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  30 [100.0%] 
(code_label 244 669 245 32 64 "" [1 uses])

(note 245 244 247 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 247 245 734 32 arch/arm/kernel/unwind.c:209 (set (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
        (and:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 512 [0x200]))) 67 {*arm_andsi3_insn} (nil))

(note 734 247 735 32 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(note 735 734 248 32 ( load_sp (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 248 735 261 32 arch/arm/kernel/unwind.c:209 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))
;; End of basic block 32 -> ( 33)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 33 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  33 [91.7%]  (dfs_back)
;; Pred edge  32 [100.0%]  (fallthru)
(code_label 261 248 249 33 66 "" [1 uses])

(note 249 261 250 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 250 249 259 33 NOTE_INSN_DELETED)

(note 259 250 251 33 NOTE_INSN_DELETED)

(insn:TI 251 259 254 33 arch/arm/kernel/unwind.c:211 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 254 251 736 33 arch/arm/kernel/unwind.c:212 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [228])
            (mem:SI (post_inc:SI (reg/v/f:SI 10 sl [orig:148 vsp ] [148])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                    (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
            (nil))))

(note 736 254 255 33 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 255 736 262 33 arch/arm/kernel/unwind.c:212 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                    (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
            (reg:SI 0 r0 [228]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 262 255 260 33 arch/arm/kernel/unwind.c:210 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn:TI 260 262 263 33 arch/arm/kernel/unwind.c:213 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 263 260 264 33 arch/arm/kernel/unwind.c:210 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 261)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9167 [0x23cf])
            (nil))))
;; End of basic block 33 -> ( 33 34)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  33 [91.7%]  (dfs_back)
;; Succ edge  34 [8.3%]  (fallthru,loop_exit)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [8.3%]  (fallthru,loop_exit)
(note 264 263 265 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 265 264 268 34 arch/arm/kernel/unwind.c:216 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
        (nil)))

(insn 268 265 670 34 arch/arm/kernel/unwind.c:217 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
            (reg/v/f:SI 10 sl [orig:148 vsp ] [148]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 670 268 671 34 (set (pc)
        (label_ref 419)) -1 (nil))
;; End of basic block 34 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 671 670 737)

(note 737 671 738 35 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:157 flags ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 738 737 739 35 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 739 738 740 35 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 740 739 271 35 ( load_sp (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 29) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  29 [86.3%] 
(code_label 271 740 272 35 63 "" [1 uses])

(note 272 271 273 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 273 272 274 35 arch/arm/kernel/unwind.c:218 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 144 [0x90]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 274 273 275 35 arch/arm/kernel/unwind.c:218 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  36 [28.0%]  (fallthru)
;; Succ edge  38 [72.0%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  35 [28.0%]  (fallthru)
(note 275 274 276 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 276 275 277 36 arch/arm/kernel/unwind.c:219 (set (reg:SI 3 r3 [229])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 13 [0xd]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 277 276 278 36 arch/arm/kernel/unwind.c:219 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [229])
            (const_int 13 [0xd]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [229])
        (nil)))

(jump_insn:TI 278 277 279 36 arch/arm/kernel/unwind.c:219 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  37 [72.0%]  (fallthru)
;; Succ edge  43 [28.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  36 [72.0%]  (fallthru)
(note 279 278 282 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 282 279 280 37 NOTE_INSN_DELETED)

(insn:TI 280 282 552 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [230])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(insn 552 280 283 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 283 552 285 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [233])
        (plus:SI (mult:SI (reg:SI 1 r1 [230])
                (const_int 4 [0x4]))
            (reg:SI 3 r3))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 285 283 672 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3 [235])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [233])
                (const_int -76 [0xffffffffffffffb4])) [0 ctrl.vrs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [233])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))

(jump_insn 672 285 673 37 (set (pc)
        (label_ref 561)) -1 (nil))
;; End of basic block 37 -> ( 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  53 [100.0%] 

(barrier 673 672 741)

(note 741 673 289 38 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [72.0%] 
(code_label 289 741 290 38 67 "" [1 uses])

(note 290 289 291 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn:TI 291 290 292 38 arch/arm/kernel/unwind.c:221 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 160 [0xa0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:142 D.15946 ] [142])
        (nil)))

(jump_insn:TI 292 291 293 38 arch/arm/kernel/unwind.c:221 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6895 [0x1aef])
            (nil))))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  39 [31.1%]  (fallthru)
;; Succ edge  43 [69.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  38 [31.1%]  (fallthru)
(note 293 292 309 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn:TI 309 293 742 39 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [271])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 7 [0x7]))) 67 {*arm_andsi3_insn} (nil))

(note 742 309 294 39 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 294 742 310 39 arch/arm/kernel/unwind.c:222 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 310 294 492 39 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [272])
        (plus:SI (reg:SI 0 r0 [271])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 492 310 743 39 arch/arm/kernel/unwind.c:226 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(note 743 492 674 39 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:151 reg ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 674 743 675 39 (set (pc)
        (label_ref 304)) -1 (nil))
;; End of basic block 39 -> ( 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [100.0%] 

(barrier 675 674 308)

;; Start of basic block ( 41) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  41 [92.3%] 
(code_label 308 675 298 40 70 "" [1 uses])

(note 298 308 301 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn:TI 301 298 302 40 arch/arm/kernel/unwind.c:227 (set (reg:SI 12 ip [238])
        (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
        (nil)))

(insn:TI 302 301 303 40 arch/arm/kernel/unwind.c:227 (set (mem/s/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
                    (const_int 4 [0x4]))
                (reg/f:SI 4 r4 [274])) [0 ctrl.vrs S4 A32])
        (reg:SI 12 ip [238])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [238])
        (nil)))

(insn 303 302 304 40 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (plus:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 40 -> ( 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 40 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  40 [100.0%]  (fallthru,dfs_back)
;; Pred edge  39 [100.0%] 
(code_label 304 303 305 41 69 "" [1 uses])

(note 305 304 311 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn:TI 311 305 307 41 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (reg:SI 0 r0 [272]))) 219 {*arm_cmpsi_insn} (nil))

(insn 307 311 312 41 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 312 307 313 41 arch/arm/kernel/unwind.c:226 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 308)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9231 [0x240f])
            (nil))))
;; End of basic block 41 -> ( 40 42)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  40 [92.3%] 
;; Succ edge  42 [7.7%]  (fallthru,loop_exit)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  41 [7.7%]  (fallthru,loop_exit)
(note 313 312 315 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 315 313 316 42 NOTE_INSN_DELETED)

(insn:TI 316 315 314 42 arch/arm/kernel/unwind.c:228 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 314 316 744 42 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(note 744 314 745 42 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 745 744 321 42 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 321 745 319 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
            (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (nil)))

(insn:TI 319 321 746 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [242])
            (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                    (const_int -4 [0xfffffffffffffffc])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(note 746 319 324 42 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 324 746 320 42 arch/arm/kernel/unwind.c:230 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (nil)))

(insn:TI 320 324 676 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
            (reg:SI 1 r1 [242]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [242])
            (nil))))

(jump_insn 676 320 677 42 (set (pc)
        (label_ref 419)) -1 (nil))
;; End of basic block 42 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 677 676 747)

(note 747 677 748 43 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(note 748 747 327 43 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 38 36) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  38 [69.0%] 
;; Pred edge  36 [28.0%] 
(code_label 327 748 328 43 68 "" [2 uses])

(note 328 327 329 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn:TI 329 328 330 43 arch/arm/kernel/unwind.c:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 176 [0xb0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 330 329 749 43 arch/arm/kernel/unwind.c:231 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 344)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 43 -> ( 44 45)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  44 [28.0%]  (fallthru)
;; Succ edge  45 [72.0%] 

(note 749 330 331 44 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  43 [28.0%]  (fallthru)
(note 331 749 332 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 332 331 341 44 arch/arm/kernel/unwind.c:232 (set (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn:TI 341 332 333 44 arch/arm/kernel/unwind.c:235 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 7 r7 [275])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 333 341 336 44 arch/arm/kernel/unwind.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 336 333 337 44 arch/arm/kernel/unwind.c:233 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])
            (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn:TI 337 336 678 44 arch/arm/kernel/unwind.c:233 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
            (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])
            (nil))))

(jump_insn 678 337 679 44 (set (pc)
        (label_ref 419)) -1 (nil))
;; End of basic block 44 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 679 678 344)

;; Start of basic block ( 43) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  43 [72.0%] 
(code_label 344 679 345 45 72 "" [1 uses])

(note 345 344 346 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 346 345 347 45 arch/arm/kernel/unwind.c:236 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 177 [0xb1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 347 346 348 45 arch/arm/kernel/unwind.c:236 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 394)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 45 -> ( 46 51)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  46 [13.7%]  (fallthru)
;; Succ edge  51 [86.3%] 

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  45 [13.7%]  (fallthru)
(note 348 347 352 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(note 352 348 350 46 NOTE_INSN_DELETED)

(insn:TI 350 352 351 46 arch/arm/kernel/unwind.c:237 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn:TI 351 350 750 46 arch/arm/kernel/unwind.c:237 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 750 351 353 46 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(insn 353 750 354 46 arch/arm/kernel/unwind.c:238 (set (reg:SI 3 r3 [orig:134 temp.542 ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 354 353 751 46 arch/arm/kernel/unwind.c:241 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(note 751 354 355 46 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 355 751 356 46 arch/arm/kernel/unwind.c:241 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 360)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 46 -> ( 48 47)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  48 [0.0%]  (loop_exit)
;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
(note 356 355 357 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(note 357 356 358 47 NOTE_INSN_DELETED)

(insn:TI 358 357 359 47 arch/arm/kernel/unwind.c:241 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [247])
                (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 359 358 360 47 arch/arm/kernel/unwind.c:241 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 47 -> ( 48 49)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  48 [0.0%]  (fallthru,loop_exit)
;; Succ edge  49 [100.0%] 

;; Start of basic block ( 46 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  46 [0.0%]  (loop_exit)
;; Pred edge  47 [0.0%]  (fallthru,loop_exit)
(code_label 360 359 361 48 75 "" [1 uses])

(note 361 360 363 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 363 361 365 48 NOTE_INSN_DELETED)

(insn:TI 365 363 752 48 arch/arm/kernel/unwind.c:242 (set (reg:SI 1 r1)
        (ior:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
            (const_int 45312 [0xb100]))) 89 {*arm_iorsi3} (nil))

(note 752 365 364 48 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(insn 364 752 680 48 arch/arm/kernel/unwind.c:242 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)
        (nil)))

(jump_insn 680 364 681 48 (set (pc)
        (label_ref 597)) -1 (nil))
;; End of basic block 48 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%] 

(barrier 681 680 753)

(note 753 681 754 49 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 754 753 387 49 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 49 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  49 [93.8%]  (dfs_back)
;; Pred edge  47 [100.0%] 
(code_label 387 754 374 49 78 "" [2 uses])

(note 374 387 375 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(note 375 374 385 49 NOTE_INSN_DELETED)

(note 385 375 376 49 NOTE_INSN_DELETED)

(insn:TI 376 385 380 49 arch/arm/kernel/unwind.c:249 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 380 376 381 49 arch/arm/kernel/unwind.c:250 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [252])
            (mem:SI (post_inc:SI (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                    (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
            (nil))))

(insn:TI 381 380 388 49 arch/arm/kernel/unwind.c:250 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                    (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
            (reg:SI 0 r0 [252]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 388 381 386 49 arch/arm/kernel/unwind.c:248 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn:TI 386 388 389 49 arch/arm/kernel/unwind.c:251 (set (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
        (plus:SI (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 389 386 682 49 arch/arm/kernel/unwind.c:248 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
            (nil))))
;; End of basic block 49 -> ( 49 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  49 [93.8%]  (dfs_back)
;; Succ edge  50 [6.2%]  (fallthru)

;; Start of basic block ( 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}

;; Pred edge  49 [6.2%]  (fallthru)
(note 682 389 683 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(jump_insn 683 682 684 50 (set (pc)
        (label_ref 561)) -1 (nil))
;; End of basic block 50 -> ( 53)


;; Succ edge  53 [100.0%] 

(barrier 684 683 755)

(note 755 684 756 51 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 756 755 757 51 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(note 757 756 394 51 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 45) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  45 [86.3%] 
(code_label 394 757 395 51 74 "" [1 uses])

(note 395 394 396 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn:TI 396 395 397 51 arch/arm/kernel/unwind.c:255 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 178 [0xb2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 397 396 398 51 arch/arm/kernel/unwind.c:255 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 410)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 51 -> ( 52 54)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  52 [100.0%]  (fallthru)
;; Succ edge  54 [0.0%]  (loop_exit)

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  51 [100.0%]  (fallthru)
(note 398 397 402 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(note 402 398 405 52 NOTE_INSN_DELETED)

(note 405 402 400 52 NOTE_INSN_DELETED)

(insn:TI 400 405 401 52 arch/arm/kernel/unwind.c:256 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn:TI 401 400 758 52 arch/arm/kernel/unwind.c:256 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 758 401 403 52 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(insn 403 758 404 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn:TI 404 403 406 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [254])
        (plus:SI (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
            (const_int 516 [0x204]))) 4 {*arm_addsi3} (nil))

(insn:TI 406 404 759 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [257])
        (plus:SI (mult:SI (reg:SI 0 r0)
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [254]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))
;; End of basic block 52 -> ( 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  53 [100.0%]  (fallthru)

(note 759 406 760 53 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 760 759 761 53 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 761 760 561 53 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 52 37 50) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  52 [100.0%]  (fallthru)
;; Pred edge  37 [100.0%] 
;; Pred edge  50 [100.0%] 
(code_label 561 761 559 53 86 "" [2 uses])

(note 559 561 407 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn:TI 407 559 762 53 arch/arm/kernel/unwind.c:258 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 3 r3 [257])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [257])
        (nil)))

(note 762 407 685 53 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 685 762 686 53 (set (pc)
        (label_ref 419)) -1 (nil))
;; End of basic block 53 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 686 685 763)

(note 763 686 764 54 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 764 763 410 54 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 51) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  51 [0.0%]  (loop_exit)
(code_label 410 764 411 54 79 "" [1 uses])

(note 411 410 413 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn:TI 413 411 765 54 arch/arm/kernel/unwind.c:260 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)
        (nil)))
;; End of basic block 54 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%]  (fallthru)

(note 765 413 766 55 ( table (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:158 table ] [158])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 766 765 767 55 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 767 766 597 55 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 mask ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 54 13 31 48) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  54 [100.0%]  (fallthru)
;; Pred edge  13 [0.0%] 
;; Pred edge  31 [100.0%] 
;; Pred edge  48 [100.0%] 
(code_label 597 767 595 55 89 "" [3 uses])

(note 595 597 415 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 415 595 769 55 arch/arm/kernel/unwind.c:260 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 769 415 768 55 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 768 769 687 55 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 687 768 688 55 (set (pc)
        (label_ref 458)) -1 (nil))
;; End of basic block 55 -> ( 61)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 688 687 770)

(note 770 688 771 56 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 771 770 772 56 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 772 771 773 56 ( table (nil)) NOTE_INSN_VAR_LOCATION)

(note 773 772 774 56 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 774 773 775 56 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 775 774 776 56 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 mask ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 776 775 419 56 ( load_sp (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 42 28 34 44 53) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  42 [100.0%] 
;; Pred edge  28 [100.0%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  44 [100.0%] 
;; Pred edge  53 [100.0%] 
(code_label 419 776 420 56 61 "" [5 uses])

(note 420 419 421 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn:TI 421 420 777 56 arch/arm/kernel/unwind.c:333 (set (reg:SI 3 r3 [orig:167 D.15661 ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 777 421 422 56 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 422 777 423 56 arch/arm/kernel/unwind.c:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 8 r8 [orig:165 low ] [165]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 423 422 424 56 arch/arm/kernel/unwind.c:333 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 225 [0xe1])
            (nil))))
;; End of basic block 56 -> ( 61 57)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [2.2%]  (loop_exit)
;; Succ edge  57 [97.8%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  56 [97.8%]  (fallthru)
(note 424 423 425 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn:TI 425 424 426 57 arch/arm/kernel/unwind.c:333 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 6 r6 [orig:166 high ] [166]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:167 D.15661 ] [167])
        (nil)))

(jump_insn:TI 426 425 539 57 arch/arm/kernel/unwind.c:333 discrim 1 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 57 -> ( 61 58)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [14.0%]  (loop_exit)
;; Succ edge  58 [86.0%]  (fallthru,dfs_back)

;; Start of basic block ( 57 21) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  57 [86.0%]  (fallthru,dfs_back)
;; Pred edge  21 [100.0%] 
(code_label 539 426 477 58 85 "" [1 uses])

(note 477 539 430 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn:TI 430 477 431 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (nil)))

(insn:TI 431 430 432 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
        (nil)))

(jump_insn:TI 432 431 433 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 429)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 58 -> ( 24 59)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  24 [97.8%] 
;; Succ edge  59 [2.2%]  (fallthru,loop_exit)

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  58 [2.2%]  (fallthru,loop_exit)
(note 433 432 434 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn:TI 434 433 435 59 arch/arm/kernel/unwind.c:337 (set (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn:TI 435 434 438 59 arch/arm/kernel/unwind.c:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 438 435 439 59 arch/arm/kernel/unwind.c:338 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])
            (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn:TI 439 438 442 59 arch/arm/kernel/unwind.c:338 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
            (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])
            (nil))))

(insn:TI 442 439 778 59 arch/arm/kernel/unwind.c:341 (set (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (nil)))

(note 778 442 443 59 ( vsp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 443 778 444 59 arch/arm/kernel/unwind.c:341 (set (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 444 443 445 59 arch/arm/kernel/unwind.c:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
            (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
        (nil)))

(jump_insn:TI 445 444 446 59 arch/arm/kernel/unwind.c:341 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil))))
;; End of basic block 59 -> ( 61 60)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [19.9%] 
;; Succ edge  60 [80.1%]  (fallthru)

;; Start of basic block ( 59) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  59 [80.1%]  (fallthru)
(note 446 445 447 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn:TI 447 446 455 60 arch/arm/kernel/unwind.c:344 (set (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 455 447 779 60 arch/arm/kernel/unwind.c:349 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 779 455 780 60 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 780 779 449 60 ( urc (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:163 urc ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 449 780 781 60 arch/arm/kernel/unwind.c:345 (set (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 781 449 782 60 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(note 782 781 783 60 ( insn (nil)) NOTE_INSN_VAR_LOCATION)

(note 783 782 451 60 ( load_sp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 451 783 454 60 arch/arm/kernel/unwind.c:346 (set (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (nil)))

(insn:TI 454 451 448 60 arch/arm/kernel/unwind.c:347 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])
        (nil)))

(insn:TI 448 454 450 60 arch/arm/kernel/unwind.c:344 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])
        (nil)))

(insn:TI 450 448 452 60 arch/arm/kernel/unwind.c:345 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])
        (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])
        (nil)))

(insn:TI 452 450 689 60 arch/arm/kernel/unwind.c:346 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])
        (nil)))

(jump_insn 689 452 690 60 arch/arm/kernel/unwind.c:349 (set (pc)
        (label_ref 461)) -1 (nil))
;; End of basic block 60 -> ( 62)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  62 [100.0%] 

(barrier 690 689 784)

(note 784 690 785 61 ( vsp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 785 784 786 61 ( mask (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:152 mask ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 786 785 787 61 ( table (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:158 table ] [158])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 787 786 788 61 ( idx (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 788 787 789 61 ( insn (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 789 788 790 61 ( urc (nil)) NOTE_INSN_VAR_LOCATION)

(note 790 789 458 61 ( load_sp (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 56 14 59 57 23 55) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
;; Pred edge  56 [2.2%]  (loop_exit)
;; Pred edge  14 [19.9%] 
;; Pred edge  59 [19.9%] 
;; Pred edge  57 [14.0%]  (loop_exit)
;; Pred edge  23 [100.0%] 
;; Pred edge  55 [100.0%] 
(code_label 458 790 459 61 45 "" [7 uses])

(note 459 458 460 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn:TI 460 459 791 61 arch/arm/kernel/unwind.c:288 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))
;; End of basic block 61 -> ( 62)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  62 [100.0%]  (fallthru)

(note 791 460 792 62 ( insn (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 insn ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 792 791 461 62 ( urc (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:163 urc ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 61 60) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  61 [100.0%]  (fallthru)
;; Pred edge  60 [100.0%] 
(code_label 461 792 462 62 53 "" [1 uses])

(note 462 461 473 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 473 462 793 62 arch/arm/kernel/unwind.c:350 (use (reg/i:SI 0 r0)) -1 (nil))

(note 793 473 556 62 ( urc (nil)) NOTE_INSN_VAR_LOCATION)

(note 556 793 557 62 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 557 556 558 62 arch/arm/kernel/unwind.c:350 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 62 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 558 557 547)

(note 547 558 551 NOTE_INSN_DELETED)

(note 551 547 0 NOTE_INSN_DELETED)


;; Function unwind_backtrace (unwind_backtrace)[0:859]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: tsk
    offset 0
      (reg:SI 1 r1 [ tsk ])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 3:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])


Basic block 4:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 5:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 6:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 7:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 8:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])


Basic block 9:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: tsk+0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:142 regs ] [142])
  name: tsk
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])

OUT:
Stack adjustment: 0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])


Basic block 10:
IN:
Stack adjustment: 0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])

OUT:
Stack adjustment: 0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])


Basic block 11:
IN:
Stack adjustment: 0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])

OUT:
Stack adjustment: 0
Reg 5: where+0
Variables:
  name: where
    offset 0
      (reg/v:SI 5 r5 [orig:135 where ] [135])


12 basic blocks, 14 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(11){ }d-1(13){ }d-1(14){ }d-1(25){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [69.8%]  (fallthru) 4 [30.2%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 628, maybe hot.
Predecessors:  2 [69.8%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [100.0%] 
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 272, maybe hot.
Predecessors:  2 [30.2%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [6.7%]  (fallthru) 6 [93.3%] 
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 18, maybe hot.
Predecessors:  4 [6.7%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  8 [100.0%] 
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 253, maybe hot.
Predecessors:  4 [93.3%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 881, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

Successors:  8 [100.0%]  (fallthru)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  7 [100.0%]  (fallthru) 5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 10 [100.0%]  (dfs_back)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

Successors:  11 [9.0%]  (loop_exit) 10 [91.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 9100, maybe hot.
Predecessors:  9 [91.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  9 [100.0%]  (dfs_back)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


Basic block 11 , prev 10, next 1, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  9 [9.0%]  (loop_exit)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


Basic block 1 , prev 11, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  11 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(11){ }u-1(13){ }u-1(14){ }u-1(25){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




unwind_backtrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  exit block uses 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,12u} r1={8d,9u,2d} r2={9d,6u} r3={19d,17u} r4={3d,5u,1d} r5={2d,3u} r11={2d,29u,2d} r12={3d} r13={3d,22u} r14={4d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,9u} r25={1d,1u,4d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 524{399d,116u,9e} in 59{56 regular + 3 call} insns.
(note 1 0 148 NOTE_INSN_DELETED)

(note 148 1 149 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 149 148 5 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 149 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 123 2 NOTE_INSN_DELETED)

(insn/f:TI 123 11 7 2 arch/arm/kernel/unwind.c:353 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg/f:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg/f:SI 11 fp))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(insn:TI 7 123 124 2 arch/arm/kernel/unwind.c:359 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ tsk ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (reg:SI 1 r1 [ tsk ]))
        ]) 174 {*movsi_compare0} (nil))

(insn/f:TI 124 7 125 2 arch/arm/kernel/unwind.c:353 (set (reg/f:SI 11 fp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn/f 125 124 121 2 arch/arm/kernel/unwind.c:353 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 121 125 126 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2)
            (reg/f:SI 13 sp))) 2345 {neon_vornv2di+78} (nil))

(insn 126 121 127 2 arch/arm/kernel/unwind.c:353 (set (mem:BLK (scratch) [0 A8])
        (unspec:BLK [
                (reg/f:SI 13 sp)
                (reg/f:SI 11 fp)
            ] 5)) 328 {stack_tie} (nil))

(note 127 126 115 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 115 127 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [144])
            (and:SI (reg:SI 2 r2)
                (const_int -8129 [0xffffffffffffe03f])))) 2295 {neon_vornv2di+28} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 2 115 116 2 arch/arm/kernel/unwind.c:353 (set (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 116 2 13 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [144])
            (and:SI (reg:SI 3 r3 [144])
                (const_int -64 [0xffffffffffffffc0])))) 2295 {neon_vornv2di+28} (nil))

(insn:TI 13 116 150 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
            (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                    (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [144])
            (nil))))

(note 150 13 16 2 ( tsk (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 16 150 17 2 arch/arm/kernel/unwind.c:362 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:142 regs ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 17 16 18 2 arch/arm/kernel/unwind.c:362 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  3 [69.8%]  (fallthru)
;; Succ edge  4 [30.2%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [69.8%]  (fallthru)
(note 18 17 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 27 18 23 3 NOTE_INSN_DELETED)

(insn:TI 23 27 19 3 arch/arm/kernel/unwind.c:365 (set (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 23 151 3 arch/arm/kernel/unwind.c:363 (set (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
        (nil)))

(note 151 19 21 3 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 21 151 25 3 arch/arm/kernel/unwind.c:364 (set (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 21 152 3 arch/arm/kernel/unwind.c:367 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 152 25 24 3 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 24 152 20 3 arch/arm/kernel/unwind.c:365 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])
        (nil)))

(insn:TI 20 24 22 3 arch/arm/kernel/unwind.c:363 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])
        (nil)))

(insn:TI 22 20 26 3 arch/arm/kernel/unwind.c:364 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])
        (nil)))

(call_insn 26 22 28 3 arch/arm/kernel/unwind.c:367 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 28 26 31 3 arch/arm/kernel/unwind.c:367 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 31 28 36 3 arch/arm/kernel/unwind.c:367 discrim 1 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                    (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 36 31 142 3 arch/arm/kernel/unwind.c:367 discrim 2 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                    (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
            (nil))))

(jump_insn 142 36 143 3 (set (pc)
        (label_ref 133)) -1 (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  7 [100.0%] 

(barrier 143 142 153)

(note 153 143 154 4 ( regs (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:142 regs ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 154 153 42 4 ( tsk (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [30.2%] 
(code_label 42 154 43 4 95 "" [1 uses])

(note 43 42 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 45 43 122 4 NOTE_INSN_DELETED)

(insn:TI 122 45 113 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 113 122 114 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 114 113 47 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 47 114 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 48 47 49 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
            (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151])
        (nil)))

(jump_insn:TI 49 48 50 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  5 [6.7%]  (fallthru)
;; Succ edge  6 [93.3%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [6.7%]  (fallthru)
(note 50 49 119 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 119 50 56 5 arch/arm/kernel/unwind.c:373 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
        (nil)))

(insn:TI 56 119 52 5 arch/arm/kernel/unwind.c:372 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 14 lr [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [152])
        (nil)))

(insn:TI 52 56 58 5 arch/arm/kernel/unwind.c:370 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg/f:SI 11 fp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 52 54 5 arch/arm/kernel/unwind.c:373 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [153])
        (expr_list:REG_EQUAL (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
            (nil))))

(insn:TI 54 58 144 5 arch/arm/kernel/unwind.c:371 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(jump_insn 144 54 145 5 (set (pc)
        (label_ref 74)) -1 (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%] 

(barrier 145 144 61)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [93.3%] 
(code_label 61 145 62 6 99 "" [1 uses])

(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 63 62 64 6 arch/arm/kernel/unwind.c:376 (set (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn:TI 64 63 65 6 arch/arm/kernel/unwind.c:376 (set (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
                (const_int 56 [0x38])) [0 <variable>.cpu_context.fp+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.fp+0 S4 A64])
        (nil)))

(insn:TI 65 64 66 6 arch/arm/kernel/unwind.c:376 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])
        (nil)))

(insn:TI 66 65 67 6 arch/arm/kernel/unwind.c:377 (set (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn:TI 67 66 70 6 arch/arm/kernel/unwind.c:377 (set (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
                (const_int 60 [0x3c])) [0 <variable>.cpu_context.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn:TI 70 67 68 6 arch/arm/kernel/unwind.c:382 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg/f:SI 0 r0 [orig:142 regs ] [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:142 regs ] [142])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 68 70 71 6 arch/arm/kernel/unwind.c:377 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])
        (nil)))

(insn:TI 71 68 72 6 arch/arm/kernel/unwind.c:383 (set (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
        (nil)))

(insn:TI 72 71 155 6 arch/arm/kernel/unwind.c:383 (set (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
                (const_int 64 [0x40])) [0 <variable>.cpu_context.pc+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 frame.pc+0 S4 A32])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 155 72 133 7 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 3) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 133 155 131 7 103 "" [1 uses])

(note 131 133 73 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 73 131 74 7 arch/arm/kernel/unwind.c:383 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 74 73 75 8 98 "" [1 uses])

(note 75 74 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 75 156 8 arch/arm/kernel/unwind.c:390 (set (reg/f:SI 4 r4 [164])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  9 [100.0%]  (fallthru)

(note 156 77 157 9 ( regs (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:142 regs ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 157 156 110 9 ( where (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:135 where ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 10) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%]  (dfs_back)
(code_label 110 157 102 9 102 "" [1 uses])

(note 102 110 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 80 102 78 9 NOTE_INSN_DELETED)

(insn:TI 78 80 158 9 arch/arm/kernel/unwind.c:390 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(note 158 78 76 9 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn 76 158 79 9 arch/arm/kernel/unwind.c:388 (set (reg/v:SI 5 r5 [orig:135 where ] [135])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 79 76 159 9 arch/arm/kernel/unwind.c:390 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_frame") [flags 0x3] <function_decl 0x11024e00 unwind_frame>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 159 79 81 9 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 81 159 86 9 arch/arm/kernel/unwind.c:391 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 86 81 82 9 arch/arm/kernel/unwind.c:393 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 where ] [135])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 82 86 83 9 arch/arm/kernel/unwind.c:391 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 97)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  11 [9.0%]  (loop_exit)
;; Succ edge  10 [91.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [91.0%]  (fallthru)
(note 83 82 85 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 85 83 118 10 NOTE_INSN_DELETED)

(insn:TI 118 85 87 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2 [orig:163 frame.sp ] [163])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn:TI 87 118 88 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 88 87 89 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2)
        (plus:SI (reg:SI 2 r2 [orig:163 frame.sp ] [163])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 89 88 146 10 arch/arm/kernel/unwind.c:393 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_backtrace_entry") [flags 0x41] <function_decl 0x11039280 dump_backtrace_entry>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 146 89 147 10 arch/arm/kernel/unwind.c:394 (set (pc)
        (label_ref 110)) -1 (nil))
;; End of basic block 10 -> ( 9)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  9 [100.0%]  (dfs_back)

(barrier 147 146 97)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [9.0%]  (loop_exit)
(code_label 97 147 100 11 101 "" [1 uses])

(note 100 97 128 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 128 100 129 11 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 129 128 130 11 arch/arm/kernel/unwind.c:395 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  EXIT [100.0%] 

(barrier 130 129 117)

(note 117 130 120 NOTE_INSN_DELETED)

(note 120 117 0 NOTE_INSN_DELETED)

