
;; Function armpmu_get_pmu_id (armpmu_get_pmu_id)[0:1305]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_get_pmu_id

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d} r2={1d} r3={3d,3u} r13={1d,2u} r14={1d,1u} r24={1d,2u} 
;;    total ref usage 23{11d,12u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 54 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 54 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 54 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 7 6 10 2 arch/arm/kernel/perf_event.c:100 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 10 7 58 2 arch/arm/kernel/perf_event.c:98 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 id ] [133])
            (const_int -19 [0xffffffffffffffed]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int -19 [0xffffffffffffffed])
        (nil)))

(note 58 10 15 2 ( id (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:133 id ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 15 58 28 2 arch/arm/kernel/perf_event.c:101 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 id ] [133])
            (mem/s/j:SI (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134]) [0 <variable>.id+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
            (nil))))

(insn 28 15 59 2 arch/arm/kernel/perf_event.c:104 (use (reg/i:SI 0 r0)) -1 (nil))

(note 59 28 57 2 ( id (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 57 59 56 2 arch/arm/kernel/perf_event.c:104 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 56 57 52)

(note 52 56 53 NOTE_INSN_DELETED)

(note 53 52 0 NOTE_INSN_DELETED)


;; Function armpmu_get_max_events (armpmu_get_max_events)[0:1306]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_get_max_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 20{10d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 36 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 7 6 15 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 15 7 39 2 arch/arm/kernel/perf_event.c:113 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 max_events ] [133])
            (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
                    (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(note 39 15 28 2 ( max_events (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:133 max_events ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 28 39 40 2 arch/arm/kernel/perf_event.c:116 (use (reg/i:SI 0 r0)) -1 (nil))

(note 40 28 38 2 ( max_events (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 38 40 37 2 arch/arm/kernel/perf_event.c:116 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 37 38 34)

(note 34 37 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function perf_num_counters (perf_num_counters)[0:1307]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




perf_num_counters

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 20{10d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 36 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 7 6 15 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 15 7 39 2 arch/arm/kernel/perf_event.c:113 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 max_events ] [134])
            (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
                    (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(note 39 15 28 2 ( max_events (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 max_events ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 28 39 40 2 arch/arm/kernel/perf_event.c:122 (use (reg/i:SI 0 r0)) -1 (nil))

(note 40 28 38 2 ( max_events (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 38 40 37 2 arch/arm/kernel/perf_event.c:122 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 37 38 34)

(note 34 37 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function armpmu_event_update (armpmu_event_update)[0:1312]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 3: overflow+0
Variables:
  name: overflow
    offset 0
      (reg:SI 3 r3 [ overflow ])
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 3: overflow+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Variables:
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
      (reg:SI 3 r3 [ overflow ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg/f:SI 1 r1 [orig:152 hwc ] [152])
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
      (reg:SI 2 r2 [ idx ])


Basic block 3:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0 oldval+0
Reg 3: overflow+0 oldval+4
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    offset 4
      (reg:SI 3 r3 [ oldval+4 ])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
      (reg:SI 3 r3 [ overflow ])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
      (reg:SI 2 r2 [ idx ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
      (reg/f:SI 1 r1 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Variables:
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 4:
IN:
Stack adjustment: 48
Reg 2: oldval+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 2: oldval+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 5:
IN:
Stack adjustment: 48
Reg 2: oldval+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 2: oldval+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 6:
IN:
Stack adjustment: 48
Reg 2: oldval+0
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 2: oldval+0
Reg 3: oldval+4
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    offset 4
      (reg:SI 3 r3 [ oldval+4 ])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 7:
IN:
Stack adjustment: 48
Reg 2: oldval+0
Reg 3: oldval+4
Reg 4: hwc+0
Reg 5: event+0
Reg 7: idx+0
Reg 9: overflow+0
Reg 10: prev_raw_count+0
Reg 11: prev_raw_count+4
Reg 12: res+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:153 idx ] [153])
  name: overflow
    offset 0
      (reg/v:SI 9 r9 [orig:154 overflow ] [154])
  name: oldval
    offset 0
      (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    offset 4
      (reg:SI 3 r3 [ oldval+4 ])
  name: prev_raw_count
    offset 0
      (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    offset 4
      (reg:SI 11 fp [ prev_raw_count.501+4 ])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 2: delta+0
Reg 3: delta+4
Reg 4: hwc+0
Reg 5: event+0
Reg 6: new_raw_count+0
Reg 7: new_raw_count+4
Reg 8: prev_raw_count+0
Reg 9: prev_raw_count+4
Reg 12: res+0
Variables:
  name: delta
    offset 0
      (reg:SI 2 r2 [orig:146 delta ] [146])
    offset 4
      (reg:SI 3 r3 [ delta+4 ])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: new_raw_count
    offset 0
      (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
    offset 4
      (reg:SI 7 r7 [ new_raw_count.500+4 ])
  name: prev_raw_count
    offset 0
      (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
    offset 4
      (reg:SI 9 r9 [ prev_raw_count+4 ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 8:
IN:
Stack adjustment: 48
Reg 2: delta+0
Reg 3: delta+4
Reg 4: hwc+0
Reg 5: event+0
Reg 6: new_raw_count+0
Reg 7: new_raw_count+4
Reg 8: prev_raw_count+0
Reg 9: prev_raw_count+4
Reg 12: res+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
  name: delta
    offset 0
      (reg:SI 2 r2 [orig:146 delta ] [146])
    offset 4
      (reg:SI 3 r3 [ delta+4 ])
  name: prev_raw_count
    offset 0
      (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
    offset 4
      (reg:SI 9 r9 [ prev_raw_count+4 ])
  name: new_raw_count
    offset 0
      (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
    offset 4
      (reg:SI 7 r7 [ new_raw_count.500+4 ])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])

OUT:
Stack adjustment: 48
Reg 2: delta+0
Reg 3: delta+4
Reg 4: hwc+0
Reg 5: event+0
Reg 6: new_raw_count+0
Reg 7: new_raw_count+4
Reg 8: prev_raw_count+0
Reg 9: prev_raw_count+4
Reg 12: res+0
Variables:
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: delta
    offset 0
      (reg:SI 2 r2 [orig:146 delta ] [146])
    offset 4
      (reg:SI 3 r3 [ delta+4 ])
  name: prev_raw_count
    offset 0
      (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
    offset 4
      (reg:SI 9 r9 [ prev_raw_count+4 ])
  name: new_raw_count
    offset 0
      (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
    offset 4
      (reg:SI 7 r7 [ new_raw_count.500+4 ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


Basic block 9:
IN:
Stack adjustment: 48
Reg 2: delta+0
Reg 3: delta+4
Reg 4: hwc+0
Reg 5: event+0
Reg 6: new_raw_count+0
Reg 7: new_raw_count+4
Reg 8: prev_raw_count+0
Reg 9: prev_raw_count+4
Reg 12: res+0
Variables:
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: delta
    offset 0
      (reg:SI 2 r2 [orig:146 delta ] [146])
    offset 4
      (reg:SI 3 r3 [ delta+4 ])
  name: prev_raw_count
    offset 0
      (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
    offset 4
      (reg:SI 9 r9 [ prev_raw_count+4 ])
  name: new_raw_count
    offset 0
      (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
    offset 4
      (reg:SI 7 r7 [ new_raw_count.500+4 ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])

OUT:
Stack adjustment: 48
Reg 2: delta+0
Reg 3: delta+4
Reg 4: hwc+0
Reg 5: event+0
Reg 6: new_raw_count+0
Reg 7: new_raw_count+4
Reg 8: result+0
Reg 9: prev_raw_count+4
Reg 12: res+0
Variables:
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:142 res ] [142])
  name: delta
    offset 0
      (reg/v:DI 2 r2 [orig:146 delta ] [146])
    offset 4
      (reg:SI 3 r3 [ delta+4 ])
  name: prev_raw_count
    offset 4
      (reg:SI 9 r9 [ prev_raw_count+4 ])
  name: new_raw_count
    offset 0
      (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
    offset 4
      (reg:SI 7 r7 [ new_raw_count.500+4 ])
  name: result
    offset 0
      (reg/v:DI 8 r8 [orig:136 result ] [136])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:151 event ] [151])
  name: hwc
    offset 0
      (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])


10 basic blocks, 13 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 196, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 196, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 1400, maybe hot.
Predecessors:  6 [71.0%]  (dfs_back) 2 [100.0%]  (fallthru) 5 [71.0%]  (dfs_back)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 11 [fp]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 2, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (fallthru) 4 [86.0%]  (dfs_back)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  4 [86.0%]  (dfs_back) 5 [14.0%]  (fallthru,loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 1400, maybe hot.
Predecessors:  4 [14.0%]  (fallthru,loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  3 [71.0%]  (dfs_back) 6 [29.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 406, maybe hot.
Predecessors:  5 [29.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  3 [71.0%]  (dfs_back) 7 [29.0%]  (fallthru,loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 196, maybe hot.
Predecessors:  6 [29.0%]  (fallthru,loop_exit)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

Successors:  8 [39.0%]  (fallthru) 9 [61.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 76, maybe hot.
Predecessors:  7 [39.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 1, loop_depth 0, count 0, freq 196, maybe hot.
Predecessors:  7 [61.0%]  8 [100.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 1 , prev 9, loop_depth 0, count 0, freq 196, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(1){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_event_update

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,11u} r1={9d,13u} r2={9d,15u} r3={10d,11u} r4={2d,5u} r5={2d,5u} r6={4d,8u,1d} r7={4d,7u} r8={5d,8u} r9={5d,4u} r10={2d,4u} r11={2d,4u} r12={2d,1u} r13={2d,14u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={11d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 310{189d,120u,1e} in 50{49 regular + 1 call} insns.
(note 1 0 121 NOTE_INSN_DELETED)

(note 121 1 122 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 122 121 123 2 ( overflow (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ overflow ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 123 122 124 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 124 123 7 2 ( hwc (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ hwc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 124 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 6 109 2 ("again") NOTE_INSN_DELETED_LABEL 20)

(insn/f:TI 109 8 127 2 arch/arm/kernel/perf_event.c:209 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 sl)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                    (set/f (reg/f:SI 13 sp)
                                                        (plus:SI (reg/f:SI 13 sp)
                                                            (const_int -48 [0xffffffffffffffd0])))
                                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                        (reg:SI 0 r0))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 4 [0x4])) [0 S4 A32])
                                                        (reg:SI 1 r1))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 8 [0x8])) [0 S4 A32])
                                                        (reg:SI 2 r2))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 12 [0xc])) [0 S4 A32])
                                                        (reg:SI 4 r4))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 16 [0x10])) [0 S4 A32])
                                                        (reg:SI 5 r5))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 20 [0x14])) [0 S4 A32])
                                                        (reg:SI 6 r6))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 24 [0x18])) [0 S4 A32])
                                                        (reg:SI 7 r7))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 28 [0x1c])) [0 S4 A32])
                                                        (reg:SI 8 r8))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 32 [0x20])) [0 S4 A32])
                                                        (reg:SI 9 r9))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 36 [0x24])) [0 S4 A32])
                                                        (reg:SI 10 sl))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 40 [0x28])) [0 S4 A32])
                                                        (reg:SI 11 fp))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 44 [0x2c])) [0 S4 A32])
                                                        (reg:SI 14 lr))
                                                ])
                                            (nil))))))))))))

(note 127 109 126 2 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(note 126 127 125 2 ( hwc (nil)) NOTE_INSN_VAR_LOCATION)

(note 125 126 110 2 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 110 125 14 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 14 110 3 2 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 6 r6 [167])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 3 14 128 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
        (reg:SI 1 r1 [ hwc ])) 167 {*arm_movsi_insn} (nil))

(note 128 3 2 2 ( hwc (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ hwc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 2 128 129 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 5 r5 [orig:151 event ] [151])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(note 129 2 4 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 4 129 130 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 7 r7 [orig:153 idx ] [153])
        (reg:SI 2 r2 [ idx ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ idx ])
        (nil)))

(note 130 4 5 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 5 130 10 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 9 r9 [orig:154 overflow ] [154])
        (reg:SI 3 r3 [ overflow ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ overflow ])
        (nil)))

(insn:TI 10 5 131 2 arch/arm/kernel/perf_event.c:213 (set (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
        (plus:SI (reg/f:SI 1 r1 [orig:152 hwc ] [152])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:152 hwc ] [152])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

(note 131 10 132 3 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:153 idx ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 132 131 133 3 ( overflow (expr_list:REG_DEP_TRUE (reg/v:SI 9 r9 [orig:154 overflow ] [154])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 133 132 134 3 ( oldval (expr_list:REG_DEP_TRUE (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 134 133 135 3 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:142 res ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 135 134 136 3 ( prev_raw_count (expr_list:REG_DEP_TRUE (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 136 135 137 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:151 event ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 137 136 87 3 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 2 5) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 11 [fp]
;; live  kill	 14 [lr]

;; Pred edge  6 [71.0%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  5 [71.0%]  (dfs_back)
(code_label 87 137 86 3 29 "" [2 uses])

(note 86 87 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 86 19 3 NOTE_INSN_DELETED)

(note 19 16 13 3 NOTE_INSN_DELETED)

(insn:TI 13 19 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                (mem/s/j:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(insn:TI 15 13 138 3 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(note 138 15 17 3 ( oldval (expr_list:REG_DEP_TRUE (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 17 138 18 3 arch/arm/kernel/perf_event.c:214 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:153 idx ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 18 17 140 3 arch/arm/kernel/perf_event.c:214 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
                                (const_int 24 [0x18])) [0 <variable>.read_counter+0 S4 A64]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 140 18 139 3 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(note 139 140 20 3 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 20 139 93 3 arch/arm/kernel/perf_event.c:214 (set (reg:DI 2 r2)
        (zero_extend:DI (reg:SI 0 r0))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 93 20 21 3 arch/arm/kernel/perf_event.c:214 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn:TI 21 93 141 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:356 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2641905)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

(note 141 21 142 4 ( oldval (expr_list:REG_DEP_TRUE (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 142 141 24 4 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:142 res ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 4) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  4 [86.0%]  (dfs_back)
(code_label 24 142 22 4 21 "" [1 uses])

(note 22 24 94 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 22 23 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (set (reg:DI 0 r0)
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 23 94 25 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (parallel [
            (set (reg/v:SI 12 ip [orig:142 res ] [142])
                (asm_operands/v:SI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 0 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (reg/v:DI 2 r2 [orig:141 oldval ] [141])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 1 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=Qo") 2 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 25 23 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:142 res ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:142 res ] [142])
        (nil)))

(jump_insn:TI 26 25 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 4 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [86.0%]  (dfs_back)
;; Succ edge  5 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 30 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:370 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2643697)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 30 28 31 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 oldval ] [141])
            (reg:SI 10 sl [orig:133 prev_raw_count.501 ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 31 30 70 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  6 [29.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [29.0%]  (fallthru)
(note 70 31 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 70 143 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ oldval+4 ])
            (reg:SI 11 fp [ prev_raw_count.501+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(note 143 32 33 6 ( oldval (expr_list:REG_DEP_TRUE (reg/v:DI 2 r2 [orig:141 oldval ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 33 143 34 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  7 [29.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  6 [29.0%]  (fallthru,loop_exit)
(note 34 33 91 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 34 40 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 40 91 95 7 arch/arm/kernel/perf_event.c:223 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 9 r9 [orig:154 overflow ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 9 r9 [orig:154 overflow ] [154])
        (nil)))

(insn:TI 95 40 144 7 arch/arm/kernel/perf_event.c:220 (set (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(note 144 95 36 7 ( new_raw_count (expr_list:REG_DEP_TRUE (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 36 144 37 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [158]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 37 36 105 7 arch/arm/kernel/perf_event.c:220 (set (reg:DI 0 r0 [orig:147 D.25235 ] [147])
        (mem/s/j:DI (plus:SI (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 105 37 145 7 arch/arm/kernel/perf_event.c:220 (set (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (and:SI (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
            (reg:SI 0 r0 [orig:147 D.25235 ] [147]))) 67 {*arm_andsi3_insn} (nil))

(note 145 105 106 7 ( new_raw_count (nil)) NOTE_INSN_VAR_LOCATION)

(insn 106 145 147 7 arch/arm/kernel/perf_event.c:220 (set (reg:SI 7 r7 [ new_raw_count.500+4 ])
        (and:SI (reg:SI 7 r7 [ new_raw_count.500+4 ])
            (reg:SI 1 r1 [ D.25235+4 ]))) 67 {*arm_andsi3_insn} (nil))

(note 147 106 148 7 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 148 147 146 7 ( new_raw_count (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 146 148 107 7 ( new_raw_count (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 107 146 149 7 arch/arm/kernel/perf_event.c:221 (set (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
        (and:SI (reg:SI 2 r2 [orig:141 oldval ] [141])
            (reg:SI 0 r0 [orig:147 D.25235 ] [147]))) 67 {*arm_andsi3_insn} (nil))

(note 149 107 108 7 ( prev_raw_count (parallel [
        (expr_list:REG_DEP_TRUE (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
            (const_int 0 [0x0]))
        (expr_list:REG_DEP_TRUE (reg:SI 11 fp [ prev_raw_count.501+4 ])
            (const_int 4 [0x4]))
    ])) NOTE_INSN_VAR_LOCATION)

(insn 108 149 150 7 arch/arm/kernel/perf_event.c:221 (set (reg:SI 9 r9 [ prev_raw_count+4 ])
        (and:SI (reg:SI 3 r3 [ oldval+4 ])
            (reg:SI 1 r1 [ D.25235+4 ]))) 67 {*arm_andsi3_insn} (nil))

(note 150 108 151 7 ( overflow (nil)) NOTE_INSN_VAR_LOCATION)

(note 151 150 97 7 ( prev_raw_count (expr_list:REG_DEP_TRUE (reg:DI 8 r8 [orig:145 prev_raw_count ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 97 151 152 7 arch/arm/kernel/perf_event.c:226 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [orig:146 delta ] [146])
            (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134]))) 2345 {neon_vornv2di+78} (nil))

(note 152 97 153 7 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(note 153 152 98 7 ( delta (nil)) NOTE_INSN_VAR_LOCATION)

(insn 98 153 154 7 arch/arm/kernel/perf_event.c:226 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [ delta+4 ])
            (reg:SI 7 r7 [ new_raw_count.500+4 ]))) 2345 {neon_vornv2di+78} (nil))

(note 154 98 155 7 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(note 155 154 41 7 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 41 155 42 7 arch/arm/kernel/perf_event.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  9 [61.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [39.0%]  (fallthru)
(note 42 41 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 99 42 156 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 2 r2 [orig:146 delta ] [146])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 156 99 100 8 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 100 156 157 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 157 100 101 8 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 101 157 158 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                        (reg:SI 0 r0 [orig:147 D.25235 ] [147]))
                    (reg:SI 2 r2 [orig:146 delta ] [146])))
            (set (reg:SI 2 r2 [orig:146 delta ] [146])
                (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                    (reg:SI 0 r0 [orig:147 D.25235 ] [147])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:147 D.25235 ] [147])
        (nil)))

(note 158 101 102 8 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 102 158 159 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ delta+4 ])
                (reg:SI 1 r1 [ D.25235+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [ D.25235+4 ])
            (nil))))

(note 159 102 103 8 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 103 159 160 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                        (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134]))
                    (reg:SI 2 r2 [orig:146 delta ] [146])))
            (set (reg:SI 2 r2 [orig:146 delta ] [146])
                (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                    (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])))
        ]) 10 {*addsi3_compare_op1} (nil))

(note 160 103 104 8 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 104 160 161 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ delta+4 ])
                (reg:SI 7 r7 [ new_raw_count.500+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

(note 161 104 116 9 ( delta (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  7 [61.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 116 161 114 9 30 "" [1 uses])

(note 114 116 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 114 162 9 arch/arm/kernel/perf_event.c:226 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (minus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg/v:DI 8 r8 [orig:145 prev_raw_count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(note 162 51 54 9 ( delta (expr_list:REG_DEP_TRUE (reg/v:DI 2 r2 [orig:146 delta ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 54 162 55 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:284 (set (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
        (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn:TI 55 54 164 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:276 (parallel [
            (set (reg/v:DI 8 r8 [orig:139 result ] [139])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (reg/v:SI 0 r0 [orig:140 tmp ] [140])
                (asm_operands/v:SI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                        (const_int 56 [0x38])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:140 tmp ] [140])
                (expr_list:REG_UNUSED (reg/v:DI 8 r8 [orig:139 result ] [139])
                    (nil))))))

(note 164 55 165 9 ( prev_raw_count (nil)) NOTE_INSN_VAR_LOCATION)

(note 165 164 163 9 ( result (expr_list:REG_DEP_TRUE (reg/v:DI 8 r8 [orig:139 result ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 163 165 56 9 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 tmp ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 56 163 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:324 (set (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn:TI 57 56 168 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:316 (parallel [
            (set (reg/v:DI 8 r8 [orig:136 result ] [136])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (reg/v:SI 0 r0 [orig:137 tmp ] [137])
                (asm_operands/v:SI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                        (const_int 104 [0x68])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:137 tmp ] [137])
                (nil)))))

(note 168 57 169 9 ( result (nil)) NOTE_INSN_VAR_LOCATION)

(note 169 168 166 9 ( result (expr_list:REG_DEP_TRUE (reg/v:DI 8 r8 [orig:136 result ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 166 169 167 9 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(note 167 166 77 9 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:137 tmp ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 77 167 76 9 arch/arm/kernel/perf_event.c:232 (set (reg:SI 1 r1 [+4 ])
        (reg:SI 7 r7 [ new_raw_count.500+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 76 77 170 9 arch/arm/kernel/perf_event.c:232 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])) 167 {*arm_movsi_insn} (nil))

(note 170 76 68 9 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(insn 68 170 111 9 arch/arm/kernel/perf_event.c:232 (use (reg/i:DI 0 r0)) -1 (nil))

(note 111 68 112 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 112 111 113 9 arch/arm/kernel/perf_event.c:232 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 113 112 90)

(note 90 113 92 NOTE_INSN_DELETED)

(note 92 90 0 NOTE_INSN_DELETED)


;; Function armpmu_read (armpmu_read)[0:1313]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])

OUT:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])


Basic block 3:
IN:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])

OUT:
Stack adjustment: 0


4 basic blocks, 4 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  EXIT [36.7%]  3 [63.3%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 1, loop_depth 0, count 0, freq 6333, maybe hot.
Predecessors:  2 [63.3%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (ab,sibcall) 2 [36.7%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_read

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d,3u} r1={3d,1u} r2={3d,2u} r3={3d,1u} r12={1d} r13={1d,4u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 33 NOTE_INSN_DELETED)

(note 33 1 4 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 33 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 28 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 28 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 arch/arm/kernel/perf_event.c:240 (set (reg:SI 2 r2 [orig:133 D.25248 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 6 8 2 arch/arm/kernel/perf_event.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.25248 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:240 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  EXIT [36.7%] 
;; Succ edge  3 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [63.3%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 10 9 12 3 NOTE_INSN_DELETED)

(insn:TI 12 10 14 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 14 12 31 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 31 14 32 3 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 32 31 15 3 arch/arm/kernel/perf_event.c:244 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 15 32 34 3 arch/arm/kernel/perf_event.c:243 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 34 15 16 3 ( event (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 34 26)

(note 26 16 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)


;; Function armpmu_stop (armpmu_stop)[0:1314]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: flags+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 event ] [135])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 event ] [135])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:135 event ] [135])
      (reg/v/f:SI 4 r4 [orig:135 event ] [135])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:135 event ] [135])
      (reg/v/f:SI 4 r4 [orig:135 event ] [135])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 4: event+0
Reg 5: hwc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 event ] [135])
  name: hwc
    offset 0
      (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])


5 basic blocks, 6 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

Successors:  EXIT [10.1%]  3 [89.9%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 8986, maybe hot.
Predecessors:  2 [89.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

Successors:  4 [39.0%]  (fallthru) EXIT [61.0%] 
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 3503, maybe hot.
Predecessors:  3 [39.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  2 [10.1%]  3 [61.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={5d,2u} r2={5d,3u} r3={7d,4u} r4={2d,6u,3d} r5={2d,4u} r6={3d,5u} r12={2d} r13={2d,7u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 304{260d,41u,3e} in 23{21 regular + 2 call} insns.
(note 1 0 47 NOTE_INSN_DELETED)

(note 47 1 48 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 48 47 5 2 ( flags (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ flags ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 48 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 41 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 41 4 43 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 43 41 44 2 arch/arm/kernel/perf_event.c:248 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 44 43 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 44 8 2 arch/arm/kernel/perf_event.c:248 (set (reg/v/f:SI 4 r4 [orig:135 event ] [135])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 2 9 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [137])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:251 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 10 9 49 2 arch/arm/kernel/perf_event.c:251 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

(note 49 10 11 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 event ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 49 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 13 11 12 3 NOTE_INSN_DELETED)

(insn:TI 12 13 14 3 arch/arm/kernel/perf_event.c:249 (set (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn:TI 14 12 15 3 arch/arm/kernel/perf_event.c:249 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [138])
                (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 15 14 50 3 arch/arm/kernel/perf_event.c:249 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 3 -> ( 4 1)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  EXIT [61.0%] 

(note 50 15 16 4 ( event (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:135 event ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [39.0%]  (fallthru)
(note 16 50 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 18 16 17 4 NOTE_INSN_DELETED)

(insn:TI 17 18 51 4 arch/arm/kernel/perf_event.c:249 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(note 51 17 20 4 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 20 51 52 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:135 event ] [135])
        (nil)))

(note 52 20 19 4 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 19 52 53 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(note 53 19 21 4 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 event ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 21 53 22 4 arch/arm/kernel/perf_event.c:259 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 22 21 26 4 arch/arm/kernel/perf_event.c:260 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 8564613)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 26 22 24 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 3 r3)
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 24 26 23 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 24 25 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 event ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 25 23 27 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 27 25 28 4 arch/arm/kernel/perf_event.c:261 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 27 29 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn:TI 29 28 30 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [142])
        (ior:SI (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
            (const_int 3 [0x3]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 30 29 46 4 arch/arm/kernel/perf_event.c:262 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [142])
        (nil)))

(jump_insn:TI 46 30 45 4 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 45 46 40)

(note 40 45 42 NOTE_INSN_DELETED)

(note 42 40 0 NOTE_INSN_DELETED)


;; Function validate_event (validate_event)[0:1318]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: cpuc+0
Reg 1: event+0
Variables:
  name: cpuc
    offset 0
      (reg:SI 0 r0 [ cpuc ])
  name: event
    offset 0
      (reg:SI 1 r1 [ event ])

OUT:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])


Basic block 3:
IN:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])

OUT:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])


Basic block 4:
IN:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])

OUT:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])


Basic block 5:
IN:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])

OUT:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])


Basic block 6:
IN:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])

OUT:
Stack adjustment: 152
Reg 4: event+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 event ] [137])


7 basic blocks, 8 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  5 [78.4%]  3 [21.6%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 2163, maybe hot.
Predecessors:  2 [21.6%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [36.7%]  4 [63.3%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1370, maybe hot.
Predecessors:  3 [63.3%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

Successors:  6 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 8630, maybe hot.
Predecessors:  3 [36.7%]  2 [78.4%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  6 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 6, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  6 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




validate_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,4u} r2={5d,2u,1d} r3={7d,4u} r4={2d,4u,1d} r5={2d,2u} r6={2d,3u} r12={2d} r13={3d,14u,3d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{263d,43u,5e} in 26{24 regular + 2 call} insns.
(note 1 0 71 NOTE_INSN_DELETED)

(note 71 1 72 2 ( cpuc (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ cpuc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 72 71 5 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 72 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 61 2 NOTE_INSN_DELETED)

(insn/f:TI 61 8 3 2 arch/arm/kernel/perf_event.c:353 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 3 61 62 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 4 r4 [orig:137 event ] [137])
        (reg:SI 1 r1 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 62 3 63 2 arch/arm/kernel/perf_event.c:353 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -136 [0xffffffffffffff78]))) 4 {*arm_addsi3} (nil))

(note 63 62 12 2 NOTE_INSN_PROLOGUE_END)

(insn 12 63 2 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 2 r2)
        (const_int 136 [0x88])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 136 [0x88])
        (nil)))

(insn:TI 2 12 11 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (reg:SI 0 r0 [ cpuc ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ cpuc ])
        (nil)))

(insn 11 2 73 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 1 r1 [orig:137 event ] [137])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(note 73 11 10 2 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:137 event ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 73 74 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(note 74 10 7 2 ( cpuc (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 7 74 13 2 arch/arm/kernel/perf_event.c:354 (set (reg/f:SI 5 r5 [138])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(call_insn:TI 13 7 16 2 arch/arm/kernel/perf_event.c:354 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x11574200 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 13 59 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])
        (nil)))

(insn:TI 59 16 17 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 17 59 18 2 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (reg/f:SI 3 r3 [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [142])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (expr_list:REG_EQUAL (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
                (nil)))))

(jump_insn:TI 18 17 19 2 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [78.4%] 
;; Succ edge  3 [21.6%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [21.6%]  (fallthru)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 21 3 arch/arm/kernel/perf_event.c:356 (set (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 48 [0x30])) [0 <variable>.state+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 21 20 22 3 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
        (nil)))

(jump_insn:TI 22 21 23 3 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [36.7%] 
;; Succ edge  4 [63.3%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  3 [63.3%]  (fallthru)
(note 23 22 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 27 23 31 4 NOTE_INSN_DELETED)

(note 31 27 32 4 NOTE_INSN_DELETED)

(note 32 31 58 4 NOTE_INSN_DELETED)

(insn:TI 58 32 28 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 28 58 29 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 28 25 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 25 29 30 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn:TI 30 25 33 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 33 30 69 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
                (ge:SI (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(jump_insn 69 33 70 4 arch/arm/kernel/perf_event.c:359 (set (pc)
        (label_ref 39)) -1 (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 70 69 36)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [36.7%] 
;; Pred edge  2 [78.4%] 
(code_label 36 70 37 5 43 "" [2 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 37 39 5 arch/arm/kernel/perf_event.c:357 (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 39 38 40 6 44 "" [1 uses])

(note 40 39 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 40 64 6 arch/arm/kernel/perf_event.c:360 (use (reg/i:SI 0 r0)) -1 (nil))

(note 64 51 65 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 65 64 66 6 arch/arm/kernel/perf_event.c:360 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 66 65 57)

(note 57 66 60 NOTE_INSN_DELETED)

(note 60 57 0 NOTE_INSN_DELETED)


;; Function armpmu_platform_irq (armpmu_platform_irq)[0:1320]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: irq+0
Reg 1: dev+0
Variables:
  name: irq
    offset 0
      (reg:SI 0 r0 [ irq ])
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])

OUT:
Stack adjustment: 8


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_platform_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={4d,2u} r3={5d,4u} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{130d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 39 NOTE_INSN_DELETED)

(note 39 1 40 2 ( irq (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ irq ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 40 39 5 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 40 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 4 7 2 NOTE_INSN_DELETED)

(insn:TI 7 12 34 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 34 7 35 2 arch/arm/kernel/perf_event.c:385 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 35 34 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 35 8 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 11 15 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 8 9 2 arch/arm/kernel/perf_event.c:388 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 15 16 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 16 9 42 2 arch/arm/kernel/perf_event.c:388 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139]) [0 <variable>.handle_irq+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 42 16 41 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 41 42 28 2 ( irq (nil)) NOTE_INSN_VAR_LOCATION)

(insn 28 41 36 2 arch/arm/kernel/perf_event.c:389 (use (reg/i:SI 0 r0)) -1 (nil))

(note 36 28 37 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 37 36 38 2 arch/arm/kernel/perf_event.c:389 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 38 37 32)

(note 32 38 33 NOTE_INSN_DELETED)

(note 33 32 0 NOTE_INSN_DELETED)


;; Function armpmu_enable (armpmu_enable)[0:1326]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: pmu+0
Variables:
  name: pmu
    offset 0
      (reg:SI 0 r0 [ pmu ])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 6: cpuc+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:165 __ptr ] [165])


Basic block 3:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 6: cpuc+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 6: cpuc+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])


Basic block 4:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])


Basic block 5:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])


Basic block 6:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])


Basic block 7:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])

OUT:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])


Basic block 8:
IN:
Stack adjustment: 16
Reg 2: enabled+0
Reg 4: idx+0
Reg 6: cpuc+0
Reg 12: event+0
Variables:
  name: enabled
    offset 0
      (reg/v:SI 2 r2 [orig:167 enabled ] [167])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: event
    offset 0
      (reg/v/f:SI 12 ip [orig:164 event ] [164])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 6: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:168 idx ] [168])


9 basic blocks, 12 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 327, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 327, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [10.1%]  (fallthru) 6 [89.9%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 33, maybe hot.
Predecessors:  2 [10.1%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 9706, maybe hot.
Predecessors:  6 [97.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

Successors:  6 [30.2%]  (dfs_back) 5 [69.8%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 6778, maybe hot.
Predecessors:  4 [69.8%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	 14 [lr]

Successors:  6 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru,dfs_back) 4 [30.2%]  (dfs_back) 2 [89.9%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [97.1%]  7 [2.9%]  (fallthru,loop_exit)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 294, maybe hot.
Predecessors:  6 [2.9%]  (fallthru,loop_exit)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [39.0%]  (fallthru) EXIT [61.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 1, loop_depth 0, count 0, freq 115, maybe hot.
Predecessors:  7 [39.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 8, loop_depth 0, count 0, freq 327, maybe hot.
Predecessors:  8 [100.0%]  7 [61.0%]  3 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,3u,1d} r1={5d,2u} r2={8d,6u} r3={7d,6u,1d} r4={3d,7u} r5={2d,4u,1d} r6={3d,4u} r12={3d,2u} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 325{268d,54u,3e} in 33{31 regular + 2 call} insns.
(note 30 0 114 NOTE_INSN_DELETED)

(note 114 30 33 2 ( pmu (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ pmu ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 114 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 39 2 NOTE_INSN_FUNCTION_BEG)

(note 39 32 101 2 NOTE_INSN_DELETED)

(insn/f:TI 101 39 102 2 arch/arm/kernel/perf_event.c:584 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 102 101 100 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 100 102 95 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 95 100 44 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 44 95 96 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 5 r5 [176])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 96 44 98 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 2 r2 [172])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 98 96 35 2 arch/arm/kernel/perf_event.c:587 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 35 98 115 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(note 115 35 41 2 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 41 115 116 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [172])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [172])
        (nil)))

(note 116 41 45 2 ( pmu (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 45 116 36 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 36 45 46 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8606498)) -1 (nil))

(insn:TI 46 36 42 2 arch/arm/kernel/perf_event.c:589 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 42 46 49 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 6 r6 [175])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [171])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [171])
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 49 42 117 2 arch/arm/kernel/perf_event.c:589 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(note 117 49 43 2 ( enabled (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:167 enabled ] [167])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 43 117 118 2 arch/arm/kernel/perf_event.c:587 (set (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
        (plus:SI (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            (reg:SI 6 r6 [175]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (nil)))

(note 118 43 50 2 ( cpuc (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 50 118 119 2 arch/arm/kernel/perf_event.c:589 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (reg/v:SI 2 r2 [orig:167 enabled ] [167]))) 2345 {neon_vornv2di+78} (nil))

(note 119 50 47 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:168 idx ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 47 119 111 2 arch/arm/kernel/perf_event.c:589 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [10.1%]  (fallthru)
;; Succ edge  6 [89.9%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [10.1%]  (fallthru)
(note 111 47 112 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 112 111 113 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 113 112 120)

(note 120 113 121 4 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(note 121 120 72 4 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 12 ip [orig:164 event ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  6 [97.1%] 
(code_label 72 121 53 4 56 "" [1 uses])

(note 53 72 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 53 67 4 arch/arm/kernel/perf_event.c:593 (set (reg/v/f:SI 12 ip [orig:164 event ] [164])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 67 55 56 4 arch/arm/kernel/perf_event.c:592 (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
        (plus:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 56 67 61 4 arch/arm/kernel/perf_event.c:595 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 12 ip [orig:164 event ] [164])
        (nil)))

(insn 61 56 57 4 arch/arm/kernel/perf_event.c:598 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 57 61 58 4 arch/arm/kernel/perf_event.c:595 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [30.2%]  (dfs_back)
;; Succ edge  5 [69.8%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 58 57 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 5 NOTE_INSN_DELETED)

(note 60 59 63 5 NOTE_INSN_DELETED)

(call_insn:TI 63 60 123 5 arch/arm/kernel/perf_event.c:598 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 123 63 122 5 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(note 122 123 92 5 ( enabled (nil)) NOTE_INSN_VAR_LOCATION)

(insn 92 122 124 5 arch/arm/kernel/perf_event.c:599 (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

(note 124 92 125 6 ( enabled (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:167 enabled ] [167])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 125 124 126 6 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 126 125 68 6 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 12 ip [orig:164 event ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 4 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [30.2%]  (dfs_back)
;; Pred edge  2 [89.9%] 
(code_label 68 126 69 6 54 "" [2 uses])

(note 69 68 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 69 127 6 arch/arm/kernel/perf_event.c:592 discrim 1 (set (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(note 127 71 62 6 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 62 127 73 6 arch/arm/kernel/perf_event.c:598 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:168 idx ] [168])) 167 {*arm_movsi_insn} (nil))

(insn:TI 73 62 74 6 arch/arm/kernel/perf_event.c:592 (set (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])
        (nil)))

(insn:TI 74 73 75 6 arch/arm/kernel/perf_event.c:592 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182])
        (nil)))

(jump_insn:TI 75 74 76 6 arch/arm/kernel/perf_event.c:592 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [97.1%] 
;; Succ edge  7 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [2.9%]  (fallthru,loop_exit)
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 76 78 7 arch/arm/kernel/perf_event.c:602 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:167 enabled ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (nil)))

(jump_insn:TI 78 77 79 7 arch/arm/kernel/perf_event.c:602 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 7 -> ( 8 1)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  EXIT [61.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  7 [39.0%]  (fallthru)
(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 80 79 81 8 NOTE_INSN_DELETED)

(call_insn:TI 81 80 129 8 arch/arm/kernel/perf_event.c:603 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 32 [0x20])) [0 <variable>.start+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (nil))
    (nil))

(note 129 81 128 8 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(note 128 129 104 8 ( enabled (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 104 128 103 8 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 103 104 97)

(note 97 103 99 NOTE_INSN_DELETED)

(note 99 97 0 NOTE_INSN_DELETED)


;; Function armpmu_disable (armpmu_disable)[0:1327]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: pmu+0
Variables:
  name: pmu
    offset 0
      (reg:SI 0 r0 [ pmu ])

OUT:
Stack adjustment: 8
Reg 0: pmu+0
Variables:
  name: pmu
    offset 0
      (reg:SI 0 r0 [ pmu ])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: pmu+0
Variables:
  name: pmu
    offset 0
      (reg:SI 0 r0 [ pmu ])

OUT:
Stack adjustment: 8


4 basic blocks, 4 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [78.3%]  (fallthru) EXIT [21.6%] 
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 1, loop_depth 0, count 0, freq 7835, maybe hot.
Predecessors:  2 [78.3%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


Basic block 1 , prev 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  2 [21.6%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r3={4d,3u} r4={1d,2u} r12={1d} r13={2d,5u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{128d,13u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 28 NOTE_INSN_DELETED)

(note 28 1 4 2 ( pmu (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ pmu ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 28 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 24 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 24 6 25 2 arch/arm/kernel/perf_event.c:607 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 25 24 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 25 8 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [135]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:608 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:608 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [78.3%]  (fallthru)
;; Succ edge  EXIT [21.6%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  2 [78.3%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 11 10 12 3 NOTE_INSN_DELETED)

(call_insn:TI 12 11 29 3 arch/arm/kernel/perf_event.c:609 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
        (nil))
    (nil))

(note 29 12 27 3 ( pmu (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 27 29 26 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 26 27 22)

(note 22 26 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)


;; Function callchain_trace (callchain_trace)[0:1361]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])

OUT:
Stack adjustment: 16
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])

OUT:
Stack adjustment: 16
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])

OUT:
Stack adjustment: 16
Reg 1: data+0
Variables:
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])


Basic block 5:
IN:
Stack adjustment: 16
Reg 0: fr+0
Reg 1: data+0
Variables:
  name: fr
    offset 0
      (reg:SI 0 r0 [ fr ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])

OUT:
Stack adjustment: 16
Reg 1: data+0
Variables:
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])


6 basic blocks, 7 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  5 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  5 [50.0%]  4 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 5000, should be 2500

Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1250, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  (fallthru) 2 [50.0%]  3 [50.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 7500, should be 10000

Basic block 1 , prev 5, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




callchain_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d,4u} r2={2d,4u} r3={2d,3u} r4={3d,6u} r5={3d,4u} r6={2d,3u} r12={1d,1u} r13={2d,6u} r14={1d,2u} r24={3d,3u} 
;;    total ref usage 64{23d,41u,0e} in 19{19 regular + 0 call} insns.
(note 1 0 67 NOTE_INSN_DELETED)

(note 67 1 68 2 ( fr (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ fr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 68 67 5 2 ( data (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ data ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 68 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 4 62 2 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:133 D.26372 ] [133])
        (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn/f:TI 62 9 63 2 arch/arm/kernel/perf_event.c:765 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 63 62 10 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 10 63 8 2 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26372+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 8 10 11 2 arch/arm/kernel/perf_event.c:767 (set (reg:SI 6 r6 [orig:135 D.26217 ] [135])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ fr ])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ fr ])
        (nil)))

(jump_insn:TI 11 8 45 2 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 45 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 14 45 15 3 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 46 3 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 15 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 23 46 22 4 NOTE_INSN_DELETED)

(insn:TI 22 23 69 4 include/linux/perf_event.h:1097 (set (reg:SI 0 r0 [139])
        (plus:SI (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 69 22 58 4 ( fr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 58 69 60 4 include/linux/perf_event.h:1097 (set (reg:SI 4 r4 [144])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 58 59 4 include/linux/perf_event.h:1097 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [144])
                        (reg:SI 2 r2 [orig:133 D.26372 ] [133]))
                    (reg:SI 4 r4 [144])))
            (set (reg:SI 4 r4 [144])
                (plus:SI (reg:SI 4 r4 [144])
                    (reg:SI 2 r2 [orig:133 D.26372 ] [133])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:133 D.26372 ] [133])
        (nil)))

(insn 59 60 24 4 include/linux/perf_event.h:1097 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 59 54 4 include/linux/perf_event.h:1097 (set (reg/f:SI 12 ip [141])
        (plus:SI (mult:SI (reg:SI 0 r0 [139])
                (const_int 8 [0x8]))
            (reg/v/f:SI 1 r1 [orig:138 data ] [138]))) 270 {*arith_shiftsi} (nil))

(insn 54 24 61 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [139])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 1 r1 [orig:138 data ] [138])) [0 <variable>.ip S4 A64])
        (reg:SI 6 r6 [orig:135 D.26217 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [139])
        (nil)))

(insn:TI 61 54 55 4 include/linux/perf_event.h:1097 (set (reg:SI 5 r5 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [+4 ])
                (reg:SI 3 r3 [ D.26372+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 55 61 29 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 12 ip [141])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26372+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [141])
        (expr_list:REG_DEAD (reg:SI 3 r3 [ D.26372+4 ])
            (nil))))

(insn:TI 29 55 70 4 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

(note 70 29 30 5 ( fr (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ fr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
(code_label 30 70 31 5 66 "" [2 uses])

(note 31 30 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 31 71 5 arch/arm/kernel/perf_event.c:769 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 71 36 42 5 ( fr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 42 71 64 5 arch/arm/kernel/perf_event.c:769 (use (reg/i:SI 0 r0)) -1 (nil))

(note 64 42 65 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 65 64 66 5 arch/arm/kernel/perf_event.c:769 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 66 65 56)

(note 56 66 57 NOTE_INSN_DELETED)

(note 57 56 0 NOTE_INSN_DELETED)


;; Function armpmu_reset (armpmu_reset)[0:1357] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


Basic block 3:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


Basic block 4:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


Basic block 5:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


6 basic blocks, 7 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  3 [89.9%]  (fallthru) 5 [10.1%] 
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 8986, probably never executed.
Predecessors:  2 [89.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  4 [78.3%]  (fallthru) 5 [21.6%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 7041, probably never executed.
Predecessors:  3 [78.3%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 2959, probably never executed.
Predecessors:  2 [10.1%]  3 [21.6%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 5, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  4 [100.0%]  (ab,sibcall) 5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,3u} r12={1d} r13={1d,6u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{130d,19u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 40 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 40 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 7 6 8 2 arch/arm/kernel/perf_event.c:635 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:635 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [89.9%]  (fallthru)
;; Succ edge  5 [10.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 9 11 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
                (const_int 40 [0x28])) [0 <variable>.reset+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
        (nil)))

(insn:TI 11 10 12 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 12 11 13 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [78.3%]  (fallthru)
;; Succ edge  5 [21.6%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  3 [78.3%]  (fallthru)
(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 13 16 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 44 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 44 16 45 4 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 45 44 17 4 arch/arm/kernel/perf_event.c:638 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 17 45 18 4 arch/arm/kernel/perf_event.c:636 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("on_each_cpu") [flags 0x41] <function_decl 0x10b3a780 on_each_cpu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 18 17 20)

;; Start of basic block ( 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  3 [21.6%] 
(code_label 20 18 21 5 71 "" [2 uses])

(note 21 20 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 21 34 5 arch/arm/kernel/perf_event.c:638 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 28 41 5 arch/arm/kernel/perf_event.c:638 (use (reg/i:SI 0 r0)) -1 (nil))

(note 41 34 42 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 42 41 43 5 arch/arm/kernel/perf_event.c:638 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 42 38)

(note 38 43 39 NOTE_INSN_DELETED)

(note 39 38 0 NOTE_INSN_DELETED)


;; Function armv7pmu_write_counter (armv7pmu_write_counter)[0:1338]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 3:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 4:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 5:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
      (reg:SI 0 r0 [ idx ])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 6:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 7:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 8:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])


Basic block 9:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])


Basic block 10:
IN:
Stack adjustment: 0
Reg 0: idx+0
Reg 1: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:137 idx ] [137])
      (reg/v:SI 2 r2 [orig:137 idx ] [137])
  name: value
    offset 0
      (reg:SI 1 r1 [ value ])

OUT:
Stack adjustment: 0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])


Basic block 11:
IN:
Stack adjustment: 0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:137 idx ] [137])

OUT:
Stack adjustment: 0


12 basic blocks, 16 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  3 [19.9%]  (fallthru) 4 [80.1%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1991, maybe hot.
Predecessors:  2 [19.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 8009, maybe hot.
Predecessors:  2 [80.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  5 [100.0%]  (fallthru) 10 [0.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 8006, maybe hot.
Predecessors:  4 [100.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [100.0%]  (fallthru) 10 [0.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 8003, maybe hot.
Predecessors:  5 [100.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [0.0%]  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 7999, maybe hot.
Predecessors:  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [0.0%]  (fallthru) 9 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 6.
Predecessors:  6 [0.0%]  7 [0.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

Successors:  11 [100.0%] 
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 7996, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 6.
Predecessors:  5 [0.0%]  4 [0.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

Successors:  11 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 11 , prev 10, next 1, loop_depth 0, count 0, freq 12, maybe hot.
Predecessors:  10 [100.0%]  (fallthru) 8 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 11, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  11 [100.0%]  (ab,sibcall) 3 [100.0%]  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_write_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,7u} r1={5d,5u} r2={5d,3u} r3={10d,8u} r12={1d} r13={1d,14u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 186{142d,44u,0e} in 34{33 regular + 1 call} insns.
(note 1 0 101 NOTE_INSN_DELETED)

(note 101 1 102 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 102 101 5 2 ( value (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ value ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 102 83 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 83 5 4 2 NOTE_INSN_PROLOGUE_END)

(note 4 83 7 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 7 4 2 2 arch/arm/kernel/perf_event_v7.c:832 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 7 8 2 arch/arm/kernel/perf_event_v7.c:831 (set (reg/v:SI 2 r2 [orig:137 idx ] [137])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 8 2 103 2 arch/arm/kernel/perf_event_v7.c:832 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

(note 103 8 9 3 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 9 103 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 9 84 3 arch/arm/kernel/perf_event_v7.c:833 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 0") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912595) -1 (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:138 value ] [138])
        (nil)))

(jump_insn:TI 84 10 72 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 72 84 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 13 72 14 4 76 "" [1 uses])

(note 14 13 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 16 14 17 4 arch/arm/kernel/perf_event_v7.c:834 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 19 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [139]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 20 19 21 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 21 20 22 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:136 D.25836 ] [136])
        (plus:SI (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 22 21 23 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 23 22 104 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

(note 104 23 24 6 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 24 104 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 24 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 27 26 28 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 31)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:136 D.25836 ] [136])
        (nil)))

(jump_insn:TI 30 29 31 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 31 30 32 8 79 "" [1 uses])

(note 32 31 35 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 35 32 81 8 NOTE_INSN_DELETED)

(insn:TI 81 35 105 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 105 81 37 8 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(insn 37 105 106 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(note 106 37 77 8 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 77 106 78 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 78 77 99 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 3 r3 [143])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 99 78 100 8 (set (pc)
        (label_ref 94)) -1 (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 100 99 107)

(note 107 100 108 9 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 42 9 ( value (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ value ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 42 108 43 9 80 "" [1 uses])

(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 44 43 45 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [145])
        (plus:SI (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:137 idx ] [137])
        (nil)))

(insn:TI 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (and:SI (reg:SI 2 r2 [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [146])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (expr_list:REG_DEAD (reg:SI 2 r2 [146])
        (nil)))

(insn:TI 47 46 48 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 48 47 85 9 arch/arm/kernel/perf_event_v7.c:836 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 2") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912980) -1 (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:138 value ] [138])
        (nil)))

(jump_insn:TI 85 48 74 9 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 74 85 109)

(note 109 74 51 10 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 51 109 52 10 78 "" [2 uses])

(note 52 51 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 55 52 82 10 NOTE_INSN_DELETED)

(insn:TI 82 55 110 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 110 82 57 10 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(insn 57 110 111 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)
        (nil)))

(note 111 57 75 10 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 idx ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 75 111 76 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 76 75 94 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 8) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 94 76 92 11 82 "" [1 uses])

(note 92 94 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 92 88 11 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [148])
        (nil)))

(note 88 58 89 11 NOTE_INSN_EPILOGUE_BEG)

(insn 89 88 60 11 arch/arm/kernel/perf_event_v7.c:841 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 60 89 112 11 arch/arm/kernel/perf_event_v7.c:839 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 112 60 61 11 ( idx (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 11 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 61 112 79)

(note 79 61 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)


;; Function armv7pmu_read_counter (armv7pmu_read_counter)[0:1337]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [ idx ])

OUT:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
      (reg:SI 0 r0 [ idx ])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
      (reg:SI 0 r0 [ idx ])

OUT:
Stack adjustment: 8
Reg 0: value+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
  name: value
    offset 0
      (reg/v:SI 0 r0 [orig:135 value ] [135])


Basic block 4:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
      (reg:SI 0 r0 [ idx ])

OUT:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
      (reg:SI 0 r0 [ idx ])


Basic block 5:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 2 r2 [orig:139 idx ] [139])
      (reg:SI 0 r0 [ idx ])

OUT:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])


Basic block 6:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])

OUT:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])


Basic block 7:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])

OUT:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])


Basic block 8:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])

OUT:
Stack adjustment: 8
Reg 0: value+0
Variables:
  name: value
    offset 0
      (reg/v:SI 0 r0 [orig:135 value ] [135])


Basic block 9:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])

OUT:
Stack adjustment: 8
Reg 0: value+0
Variables:
  name: value
    offset 0
      (reg/v:SI 0 r0 [orig:135 value ] [135])


Basic block 10:
IN:
Stack adjustment: 8
Reg 0: idx+0
Reg 2: idx+0
Variables:
  name: idx
    offset 0
      (reg:SI 0 r0 [orig:139 idx ] [139])
      (reg/v:SI 2 r2 [orig:139 idx ] [139])

OUT:
Stack adjustment: 8


11 basic blocks, 15 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [19.9%]  (fallthru) 4 [80.1%] 
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1991, maybe hot.
Predecessors:  2 [19.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 8009, maybe hot.
Predecessors:  2 [80.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  5 [100.0%]  (fallthru) 10 [0.0%] 
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 8006, maybe hot.
Predecessors:  4 [100.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [100.0%]  (fallthru) 10 [0.0%] 
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 8003, maybe hot.
Predecessors:  5 [100.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [0.0%]  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 7999, maybe hot.
Predecessors:  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [0.0%]  (fallthru) 9 [100.0%] 
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 6.
Predecessors:  6 [0.0%]  7 [0.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 7996, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 1, loop_depth 0, count 0, freq 6.
Predecessors:  5 [0.0%]  4 [0.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 10, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  10 [100.0%]  3 [100.0%]  9 [100.0%]  8 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_read_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,10u} r1={7d,4u} r2={6d,4u} r3={11d,9u} r4={1d,2u} r12={2d} r13={2d,15u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 318{267d,51u,0e} in 40{38 regular + 2 call} insns.
(note 1 0 100 NOTE_INSN_DELETED)

(note 100 1 4 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 100 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 2 2 arch/arm/kernel/perf_event_v7.c:817 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 6 93 2 arch/arm/kernel/perf_event_v7.c:814 (set (reg/v:SI 2 r2 [orig:139 idx ] [139])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 93 2 94 2 arch/arm/kernel/perf_event_v7.c:814 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 94 93 7 2 NOTE_INSN_PROLOGUE_END)

(jump_insn:TI 7 94 101 2 arch/arm/kernel/perf_event_v7.c:817 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

(note 101 7 8 3 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 8 101 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 9 8 102 3 arch/arm/kernel/perf_event_v7.c:818 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 0") ("=r") 0 []
             [] 8910675)) -1 (nil))

(note 102 9 95 3 ( value (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 value ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 95 102 80 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 80 95 103)

(note 103 80 104 4 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(note 104 103 12 4 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 12 104 13 4 86 "" [1 uses])

(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 15 13 16 4 arch/arm/kernel/perf_event_v7.c:819 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 18 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 18 17 19 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [140]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 19 21 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:137 D.25815 ] [137])
        (plus:SI (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 21 20 22 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 105 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

(note 105 22 23 6 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 23 105 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 26 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 26 25 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 29 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:137 D.25815 ] [137])
        (nil)))

(jump_insn:TI 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 30 29 31 8 89 "" [1 uses])

(note 31 30 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 34 31 91 8 NOTE_INSN_DELETED)

(insn:TI 91 34 36 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 91 106 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(note 106 36 87 8 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 87 106 88 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 88 87 37 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 88 39 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [144])
        (nil)))

(call_insn:TI 39 37 107 8 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 107 39 40 8 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 40 107 108 8 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 108 40 97 8 ( value (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 value ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 97 108 82 8 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 82 97 109)

(note 109 82 110 9 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(note 110 109 43 9 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 43 110 44 9 90 "" [1 uses])

(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:139 idx ] [139])
        (nil)))

(insn:TI 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [147])
        (and:SI (reg:SI 2 r2 [146])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 47 46 48 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [147])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (expr_list:REG_DEAD (reg:SI 2 r2 [147])
        (nil)))

(insn:TI 48 47 49 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 49 48 111 9 arch/arm/kernel/perf_event_v7.c:821 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 2") ("=r") 0 []
             [] 8911060)) -1 (nil))

(note 111 49 112 9 ( value (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 value ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 112 111 96 9 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 96 112 84 9 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 84 96 113)

(note 113 84 114 10 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(note 114 113 52 10 ( idx (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 52 114 53 10 88 "" [2 uses])

(note 53 52 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 56 53 92 10 NOTE_INSN_DELETED)

(insn:TI 92 56 58 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 58 92 115 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)
        (nil)))

(note 115 58 85 10 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:139 idx ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 85 115 86 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 86 85 59 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 59 86 61 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (nil)))

(call_insn:TI 61 59 116 10 arch/arm/kernel/perf_event_v7.c:824 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 116 61 62 10 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 62 116 117 10 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 117 62 75 10 ( value (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 value ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 75 117 118 10 arch/arm/kernel/perf_event_v7.c:828 (use (reg/i:SI 0 r0)) -1 (nil))

(note 118 75 99 10 ( value (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 99 118 98 10 arch/arm/kernel/perf_event_v7.c:828 (return) 260 {return} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 98 99 89)

(note 89 98 90 NOTE_INSN_DELETED)

(note 90 89 0 NOTE_INSN_DELETED)


;; Function init_hw_perf_events (init_hw_perf_events)[0:1358] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])


Basic block 3:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8


Basic block 4:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 5:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 6:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 7:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 8:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 9:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 10:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 11:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 12:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 13:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 14:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 15:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 16:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 17:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 18:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 19:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


Basic block 20:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])


Basic block 21:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])


Basic block 22:
IN:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])


Basic block 23:
IN:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])


Basic block 24:
IN:
Stack adjustment: 8
Reg 3: implementor+0
Variables:
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8


Basic block 25:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Reg 3: implementor+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
  name: implementor
    offset 0
      (reg/v:SI 3 r3 [orig:137 implementor ] [137])

OUT:
Stack adjustment: 8
Reg 2: cpuid+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])


Basic block 26:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])

OUT:
Stack adjustment: 8


Basic block 27:
IN:
Stack adjustment: 8
Reg 2: cpuid+0
Variables:
  name: cpuid
    offset 0
      (reg/v:SI 2 r2 [orig:138 cpuid ] [138])

OUT:
Stack adjustment: 8


Basic block 28:
IN:
Stack adjustment: 8

OUT:
Stack adjustment: 8


29 basic blocks, 42 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 9999, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 9999, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

Successors:  3 [28.0%]  (fallthru) 20 [72.0%] 
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 2800, probably never executed.
Predecessors:  2 [28.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  24 [29.0%]  4 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1988, probably never executed.
Predecessors:  3 [71.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  8 [50.0%]  5 [50.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 994, probably never executed.
Predecessors:  4 [50.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  24 [29.0%]  6 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 706, probably never executed.
Predecessors:  5 [71.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  24 [29.0%]  7 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 501, probably never executed.
Predecessors:  6 [71.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  23 [100.0%] 
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 994, probably never executed.
Predecessors:  4 [50.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  15 [29.0%]  9 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 706, probably never executed.
Predecessors:  8 [71.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  12 [50.0%]  10 [50.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 353, probably never executed.
Predecessors:  9 [50.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  11 [29.0%]  (fallthru) 25 [71.0%] 
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 102, probably never executed.
Predecessors:  10 [29.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

Successors:  17 [100.0%] 


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 353, probably never executed.
Predecessors:  9 [50.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  16 [29.0%]  13 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 251, probably never executed.
Predecessors:  12 [71.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  14 [29.0%]  (fallthru) 25 [71.0%] 
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 73, probably never executed.
Predecessors:  13 [29.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}

Successors:  18 [100.0%] 


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 400, probably never executed.
Predecessors:  8 [29.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

Successors:  19 [100.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 288, should be 400

Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 400, probably never executed.
Predecessors:  12 [29.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

Successors:  19 [100.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 102, should be 400

Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 400, probably never executed.
Predecessors:  11 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

Successors:  19 [100.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 102, should be 400

Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 400, probably never executed.
Predecessors:  14 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

Successors:  19 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 73, should be 400

Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 1600, probably never executed.
Predecessors:  18 [100.0%]  (fallthru) 15 [100.0%]  16 [100.0%]  17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  25 [100.0%] 
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 7200, probably never executed.
Predecessors:  2 [72.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  21 [28.0%]  (fallthru) 25 [72.0%] 
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 2016, probably never executed.
Predecessors:  20 [28.0%]  (fallthru)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  24 [29.0%]  22 [71.0%]  (fallthru)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 1431, probably never executed.
Predecessors:  21 [71.0%]  (fallthru)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  23 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 1932, probably never executed.
Predecessors:  22 [100.0%]  (fallthru) 7 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  24 [29.0%]  (fallthru) 25 [71.0%] 
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 0, count 0, freq 2144, probably never executed.
Predecessors:  23 [29.0%]  (fallthru) 21 [29.0%]  5 [29.0%]  6 [29.0%]  3 [29.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  25 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 2450, should be 2144

Basic block 25 , prev 24, next 26, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  10 [71.0%]  20 [72.0%]  23 [71.0%]  13 [71.0%]  24 [100.0%]  (fallthru) 19 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  26 [80.0%]  (fallthru) 27 [20.0%] 
;; lr  out 	 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]

Invalid sum of incoming frequencies 10729, should be 10000

Basic block 26 , prev 25, next 27, loop_depth 0, count 0, freq 8000, probably never executed.
Predecessors:  25 [80.0%]  (fallthru)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  28 [100.0%] 
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 27 , prev 26, next 28, loop_depth 0, count 0, freq 2000, probably never executed.
Predecessors:  25 [20.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  28 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


Basic block 28 , prev 27, next 1, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  27 [100.0%]  (fallthru) 26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 28, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  28 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




init_hw_perf_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={18d,11u} r2={25d,30u} r3={15d,29u,9d} r4={1d,2u} r12={3d} r13={2d,32u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={17d,14u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 557{423d,125u,9e} in 104{101 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 392 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cputype.h:60 (parallel [
            (set (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 8511357))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(note 392 5 6 2 ( cpuid (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 6 392 393 2 arch/arm/kernel/perf_event.c:645 (set (reg/v:SI 3 r3 [orig:137 implementor ] [137])
        (lshiftrt:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 24 [0x18]))) 117 {*arm_shiftsi3} (nil))

(note 393 6 7 2 ( implementor (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:137 implementor ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 7 393 317 2 arch/arm/kernel/perf_event.c:649 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 65 [0x41]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 317 7 318 2 arch/arm/kernel/perf_event.c:643 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 318 317 8 2 NOTE_INSN_PROLOGUE_END)

(jump_insn:TI 8 318 9 2 arch/arm/kernel/perf_event.c:649 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 20)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  20 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 9 8 290 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 290 9 394 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (const_int 65520 [0xfff0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 65520 [0xfff0])
        (nil)))

(note 394 290 291 3 ( implementor (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 291 394 311 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (and:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (reg:SI 3 r3 [141]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
        (nil)))

(insn 311 291 395 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [143])
        (const_int 46944 [0xb760])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 46944 [0xb760])
        (nil)))

(note 395 311 13 3 ( cpuid (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 395 14 3 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46944 [0xb760]))
        (nil)))

(jump_insn:TI 14 13 239 3 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 3 -> ( 24 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  24 [29.0%] 
;; Succ edge  4 [71.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 239 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 17 239 240 4 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  8 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 240 17 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 240 19 5 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [145])
        (plus:SI (reg:SI 2 r2 [145])
            (const_int -1024 [0xfffffffffffffc00]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 45920 [0xb360])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 45920 [0xb360]))
        (nil)))

(jump_insn:TI 20 19 241 5 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 5 -> ( 24 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  6 [71.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%]  (fallthru)
(note 241 20 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 241 22 6 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 2 r2 [146])
            (const_int 512 [0x200]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 46432 [0xb560])
        (nil)))

(insn:TI 22 21 23 6 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46432 [0xb560]))
        (nil)))

(jump_insn:TI 23 22 242 6 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 6 -> ( 24 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  7 [71.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  6 [71.0%]  (fallthru)
(note 242 23 24 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 242 25 7 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [147])
        (plus:SI (reg:SI 2 r2 [147])
            (const_int -1344 [0xfffffffffffffac0]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 45088 [0xb020])
        (nil)))

(insn:TI 25 24 372 7 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [147]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [147])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 45088 [0xb020]))
                (nil)))))

(jump_insn 372 25 373 7 (set (pc)
        (label_ref 345)) -1 (nil))
;; End of basic block 7 -> ( 23)
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  23 [100.0%] 

(barrier 373 372 29)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 29 373 244 8 103 "" [1 uses])

(note 244 29 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 30 244 31 8 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [148])
        (const_int 49280 [0xc080])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49280 [0xc080])
        (nil)))

(insn:TI 31 30 32 8 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [148]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49280 [0xc080]))
        (nil)))

(jump_insn:TI 32 31 245 8 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  15 [29.0%] 
;; Succ edge  9 [71.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [71.0%]  (fallthru)
(note 245 32 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 35 245 246 9 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 12 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 246 35 36 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 246 37 10 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [150])
        (plus:SI (reg:SI 2 r2 [150])
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 49232 [0xc050])
        (nil)))

(insn:TI 37 36 38 10 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [150])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 49232 [0xc050]))
                (nil)))))

(jump_insn:TI 38 37 374 10 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

;; Pred edge  10 [29.0%]  (fallthru)
(note 374 38 376 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 376 374 377 11 (set (pc)
        (label_ref 375)) -1 (nil))
;; End of basic block 11 -> ( 17)


;; Succ edge  17 [100.0%] 

(barrier 377 376 41)

;; Start of basic block ( 9) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%] 
(code_label 41 377 248 12 104 "" [1 uses])

(note 248 41 42 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 248 43 12 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [151])
        (const_int 49296 [0xc090])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49296 [0xc090])
        (nil)))

(insn:TI 43 42 44 12 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49296 [0xc090]))
        (nil)))

(jump_insn:TI 44 43 249 12 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 12 -> ( 16 13)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  16 [29.0%] 
;; Succ edge  13 [71.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [71.0%]  (fallthru)
(note 249 44 45 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 249 46 13 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [152])
        (plus:SI (reg:SI 2 r2 [152])
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 49392 [0xc0f0])
        (nil)))

(insn:TI 46 45 47 13 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [152]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [152])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 49392 [0xc0f0]))
                (nil)))))

(jump_insn:TI 47 46 378 13 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 13 -> ( 14 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  14 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}

;; Pred edge  13 [29.0%]  (fallthru)
(note 378 47 380 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 380 378 381 14 (set (pc)
        (label_ref 379)) -1 (nil))
;; End of basic block 14 -> ( 18)


;; Succ edge  18 [100.0%] 

(barrier 381 380 64)

;; Start of basic block ( 8) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  8 [29.0%] 
(code_label 64 381 65 15 100 "" [1 uses])

(note 65 64 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 81 65 66 15 NOTE_INSN_DELETED)

(insn:TI 66 81 308 15 arch/arm/kernel/perf_event_v7.c:1193 (set (reg/f:SI 3 r3 [157])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 308 66 73 15 arch/arm/kernel/perf_event_v7.c:1193 (set (reg:SI 1 r1 [158])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn:TI 73 308 68 15 arch/arm/kernel/perf_event_v7.c:1195 (set (reg/f:SI 2 r2 [162])
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(insn:TI 68 73 77 15 arch/arm/kernel/perf_event_v7.c:1193 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [158])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [158])
        (expr_list:REG_EQUAL (const_int 4 [0x4])
            (nil))))

(insn 77 68 78 15 arch/arm/kernel/perf_event_v7.c:1196 (set (reg/f:SI 1 r1 [165])
        (plus:SI (reg/f:SI 2 r2 [162])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 168 [0xa8])))
        (nil)))

(insn:TI 78 77 307 15 arch/arm/kernel/perf_event_v7.c:1196 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [165])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [165])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 168 [0xa8])))
            (nil))))

(insn:TI 307 78 382 15 arch/arm/kernel/perf_event_v7.c:1194 (set (reg/f:SI 1 r1 [160])
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)
        (nil)))

(jump_insn 382 307 383 15 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 15 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 383 382 91)

;; Start of basic block ( 12) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [29.0%] 
(code_label 91 383 92 16 101 "" [1 uses])

(note 92 91 109 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 109 92 93 16 NOTE_INSN_DELETED)

(insn:TI 93 109 305 16 arch/arm/kernel/perf_event_v7.c:1203 (set (reg/f:SI 3 r3 [173])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 305 93 101 16 arch/arm/kernel/perf_event_v7.c:1203 (set (reg:SI 1 r1 [174])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 101 305 95 16 arch/arm/kernel/perf_event_v7.c:1205 (set (reg/f:SI 2 r2 [179])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))
        (nil)))

(insn:TI 95 101 105 16 arch/arm/kernel/perf_event_v7.c:1203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [174])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [174])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn 105 95 106 16 arch/arm/kernel/perf_event_v7.c:1206 (set (reg/f:SI 1 r1 [182])
        (plus:SI (reg/f:SI 2 r2 [179])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 372 [0x174])))
        (nil)))

(insn:TI 106 105 304 16 arch/arm/kernel/perf_event_v7.c:1206 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [182])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [182])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 372 [0x174])))
            (nil))))

(insn:TI 304 106 384 16 arch/arm/kernel/perf_event_v7.c:1204 (set (reg/f:SI 1 r1 [176])
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)
        (nil)))

(jump_insn 384 304 385 16 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 16 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 385 384 375)

;; Start of basic block ( 11) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 375 385 120 17 115 "" [1 uses])

(note 120 375 137 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 137 120 121 17 NOTE_INSN_DELETED)

(insn:TI 121 137 302 17 arch/arm/kernel/perf_event_v7.c:1213 (set (reg/f:SI 3 r3 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 302 121 129 17 arch/arm/kernel/perf_event_v7.c:1213 (set (reg:SI 1 r1 [191])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn:TI 129 302 123 17 arch/arm/kernel/perf_event_v7.c:1215 (set (reg/f:SI 2 r2 [196])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))
        (nil)))

(insn:TI 123 129 133 17 arch/arm/kernel/perf_event_v7.c:1213 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [191])
        (expr_list:REG_EQUAL (const_int 6 [0x6])
            (nil))))

(insn 133 123 134 17 arch/arm/kernel/perf_event_v7.c:1216 (set (reg/f:SI 1 r1 [199])
        (plus:SI (reg/f:SI 2 r2 [196])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 576 [0x240])))
        (nil)))

(insn:TI 134 133 301 17 arch/arm/kernel/perf_event_v7.c:1216 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [199])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [199])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 576 [0x240])))
            (nil))))

(insn:TI 301 134 386 17 arch/arm/kernel/perf_event_v7.c:1214 (set (reg/f:SI 1 r1 [193])
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)
        (nil)))

(jump_insn 386 301 387 17 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 17 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 387 386 379)

;; Start of basic block ( 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 379 387 148 18 116 "" [1 uses])

(note 148 379 165 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 165 148 149 18 NOTE_INSN_DELETED)

(insn:TI 149 165 299 18 arch/arm/kernel/perf_event_v7.c:1223 (set (reg/f:SI 3 r3 [207])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 299 149 157 18 arch/arm/kernel/perf_event_v7.c:1223 (set (reg:SI 1 r1 [208])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn:TI 157 299 151 18 arch/arm/kernel/perf_event_v7.c:1225 (set (reg/f:SI 2 r2 [213])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))
        (nil)))

(insn:TI 151 157 161 18 arch/arm/kernel/perf_event_v7.c:1223 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [208])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [208])
        (expr_list:REG_EQUAL (const_int 7 [0x7])
            (nil))))

(insn 161 151 162 18 arch/arm/kernel/perf_event_v7.c:1226 (set (reg/f:SI 1 r1 [216])
        (plus:SI (reg/f:SI 2 r2 [213])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 780 [0x30c])))
        (nil)))

(insn:TI 162 161 298 18 arch/arm/kernel/perf_event_v7.c:1226 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [216])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [216])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 780 [0x30c])))
            (nil))))

(insn:TI 298 162 324 18 arch/arm/kernel/perf_event_v7.c:1224 (set (reg/f:SI 1 r1 [210])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 15 16 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
;; Pred edge  16 [100.0%] 
;; Pred edge  17 [100.0%] 
(code_label 324 298 322 19 110 "" [3 uses])

(note 322 324 154 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 154 322 158 19 arch/arm/kernel/perf_event_v7.c:1224 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [210])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [210])
        (nil)))

(insn:TI 158 154 163 19 arch/arm/kernel/perf_event_v7.c:1225 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [213])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [213])
        (nil)))

(insn:TI 163 158 396 19 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(note 396 163 166 19 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 166 396 397 19 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [219])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:133 val ] [133])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(note 397 166 167 19 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 167 397 168 19 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [220])
        (plus:SI (reg:SI 2 r2 [219])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 168 167 297 19 arch/arm/kernel/perf_event_v7.c:1227 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [220])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [220])
        (nil)))

(insn:TI 297 168 171 19 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 2 r2 [221])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 171 297 172 19 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 3 r3 [223])
        (plus:SI (reg/f:SI 3 r3 [207])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn:TI 172 171 388 19 arch/arm/kernel/perf_event.c:669 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [221]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [223])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [223])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [221])
            (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 80 [0x50])))
                (nil)))))

(jump_insn 388 172 389 19 (set (pc)
        (label_ref 200)) -1 (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 389 388 398)

(note 398 389 399 20 ( implementor (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:137 implementor ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 399 398 175 20 ( cpuid (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 175 399 176 20 95 "" [1 uses])

(note 176 175 177 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 177 176 178 20 arch/arm/kernel/perf_event.c:673 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 105 [0x69]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:137 implementor ] [137])
        (nil)))

(jump_insn:TI 178 177 179 20 arch/arm/kernel/perf_event.c:673 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 20 -> ( 21 25)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  21 [28.0%]  (fallthru)
;; Succ edge  25 [72.0%] 

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  20 [28.0%]  (fallthru)
(note 179 178 180 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 180 179 181 21 NOTE_INSN_DELETED)

(insn:TI 181 180 400 21 arch/arm/kernel/perf_event.c:675 (set (reg:SI 2 r2 [225])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 3 [0x3])
            (const_int 13 [0xd]))) 124 {extzv_t2} (nil))

(note 400 181 182 21 ( cpuid (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 182 400 183 21 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 183 182 251 21 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 21 -> ( 24 22)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  22 [71.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%]  (fallthru)
(note 251 183 184 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 184 251 345 22 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [225])
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 22 7) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 345 184 343 23 112 "" [1 uses])

(note 343 345 185 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 185 343 195 23 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 23 21 5 6 3) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  23 [29.0%]  (fallthru)
;; Pred edge  21 [29.0%] 
;; Pred edge  5 [29.0%] 
;; Pred edge  6 [29.0%] 
;; Pred edge  3 [29.0%] 
(code_label 195 185 196 24 106 "" [4 uses])

(note 196 195 295 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 295 196 401 24 arch/arm/kernel/perf_event.c:680 (set (reg/f:SI 3 r3 [228])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 401 295 198 24 ( implementor (nil)) NOTE_INSN_VAR_LOCATION)

(insn 198 401 199 24 arch/arm/kernel/perf_event.c:680 (set (reg:SI 2 r2 [229])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 199 198 402 24 arch/arm/kernel/perf_event.c:680 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [228]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [229])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [228])
        (expr_list:REG_DEAD (reg:SI 2 r2 [229])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 24 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru)

(note 402 199 403 25 ( implementor (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:137 implementor ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 403 402 200 25 ( cpuid (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10 20 23 13 24 19) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [71.0%] 
;; Pred edge  20 [72.0%] 
;; Pred edge  23 [71.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 200 403 201 25 96 "" [5 uses])

(note 201 200 202 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 202 201 404 25 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [230])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 404 202 203 25 ( implementor (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 203 404 204 25 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [230]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 204 203 205 25 arch/arm/kernel/perf_event.c:685 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 205 204 206 25 arch/arm/kernel/perf_event.c:685 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 214)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2000 [0x7d0])
            (nil))))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  26 [80.0%]  (fallthru)
;; Succ edge  27 [20.0%] 

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  25 [80.0%]  (fallthru)
(note 206 205 210 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 206 405 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(note 405 210 209 26 ( cpuid (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 209 405 208 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
        (nil)))

(insn:TI 208 209 211 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)
        (nil)))

(call_insn:TI 211 208 390 26 arch/arm/kernel/perf_event.c:686 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 390 211 391 26 (set (pc)
        (label_ref 219)) -1 (nil))
;; End of basic block 26 -> ( 28)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 391 390 406)

(note 406 391 214 27 ( cpuid (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  25 [20.0%] 
(code_label 214 406 215 27 107 "" [1 uses])

(note 215 214 217 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 217 215 218 27 arch/arm/kernel/perf_event.c:689 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)
        (nil)))

(call_insn:TI 218 217 407 27 arch/arm/kernel/perf_event.c:689 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 407 218 219 27 ( cpuid (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 27 -> ( 28)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 219 407 220 28 108 "" [1 uses])

(note 220 219 225 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 225 220 224 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 2 r2)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 224 225 223 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)
        (nil)))

(insn:TI 223 224 226 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn:TI 226 223 231 28 arch/arm/kernel/perf_event.c:692 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_pmu_register") [flags 0x41] <function_decl 0x113ba880 perf_pmu_register>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 231 226 237 28 arch/arm/kernel/perf_event.c:695 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 237 231 319 28 arch/arm/kernel/perf_event.c:695 (use (reg/i:SI 0 r0)) -1 (nil))

(note 319 237 320 28 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 320 319 321 28 arch/arm/kernel/perf_event.c:695 (return) 260 {return} (nil))
;; End of basic block 28 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 321 320 294)

(note 294 321 312 NOTE_INSN_DELETED)

(note 312 294 0 NOTE_INSN_DELETED)


;; Function armpmu_event_set_period (armpmu_event_set_period)[0:1311]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 3:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 4:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 5:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 6:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg/v:DI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 7:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 8:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 9:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 10:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Variables:
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 11:
IN:
Stack adjustment: 40
Reg 0: event+0
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
      (reg:SI 0 r0 [ event ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])

OUT:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 12:
IN:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])


Basic block 13:
IN:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])

OUT:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 14:
IN:
Stack adjustment: 40
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])

OUT:
Stack adjustment: 40
Reg 0: left+4
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Reg 12: left+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:162 left.797 ] [162])
      (reg:SI 12 ip [orig:160 left.797 ] [160])
    offset 4
      (reg:SI 7 r7 [ left.797+4 ])
      (reg:SI 0 r0 [orig:161 left.797+4 ] [161])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


Basic block 15:
IN:
Stack adjustment: 40
Reg 0: left+4
Reg 1: hwc+0
Reg 2: idx+0
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Reg 12: left+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:135 tmp ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: hwc
    offset 0
      (reg:SI 1 r1 [ hwc ])
  name: idx
    offset 0
      (reg:SI 2 r2 [ idx ])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
      (reg:SI 12 ip [orig:160 left.797 ] [160])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
      (reg:SI 0 r0 [orig:161 left.797+4 ] [161])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])

OUT:
Stack adjustment: 40
Reg 4: event+0
Reg 5: ret+0
Reg 6: left+0
Reg 7: left+4
Reg 10: tmp+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:146 event ] [146])
  name: tmp
    offset 0
      (reg/v:DI 10 sl [orig:134 tmp ] [134])
  name: left
    offset 0
      (reg:SI 6 r6 [orig:141 left ] [141])
    offset 4
      (reg:SI 7 r7 [ left+4 ])
  name: ret
    offset 0
      (reg/v:SI 5 r5 [orig:139 ret ] [139])


16 basic blocks, 24 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  6 [71.0%]  4 [29.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1450, maybe hot.
Predecessors:  3 [29.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  5 [50.0%]  (fallthru) 6 [50.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 9996, maybe hot.
Predecessors:  4 [50.0%]  (fallthru) 2 [50.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

Invalid sum of incoming frequencies 5725, should be 9996

Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 4.
Predecessors:  3 [71.0%]  4 [50.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

Invalid sum of incoming frequencies 4275, should be 4

Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  11 [79.0%]  8 [21.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 2100, maybe hot.
Predecessors:  7 [21.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  10 [50.0%]  9 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 1050, maybe hot.
Predecessors:  8 [50.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  11 [50.0%]  10 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 4.
Predecessors:  9 [50.0%]  (fallthru) 8 [50.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

Successors:  11 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

Invalid sum of incoming frequencies 1575, should be 4

Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  10 [100.0%]  (fallthru) 7 [79.0%]  9 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  14 [50.0%]  12 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]

Invalid sum of incoming frequencies 8429, should be 10000

Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  11 [50.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  15 [71.0%]  13 [29.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 1450, maybe hot.
Predecessors:  12 [29.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  14 [50.0%]  (fallthru) 15 [50.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 5725, maybe hot.
Predecessors:  11 [50.0%]  13 [50.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

Successors:  15 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 15 , prev 14, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  12 [71.0%]  13 [50.0%]  14 [100.0%]  (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 1 , prev 15, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  15 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_event_set_period

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={4d,10u} r2={3d,1u} r3={6d,8u} r4={2d,3u} r5={4d,3u} r6={6d,11u} r7={6d,8u} r8={3d,10u} r9={3d,9u} r10={4d,3u} r11={4d,3u} r12={3d,2u} r13={2d,18u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={14d,10u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 404{295d,109u,0e} in 50{48 regular + 2 call} insns.
(note 1 0 144 NOTE_INSN_DELETED)

(note 144 1 145 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 145 144 146 2 ( hwc (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ hwc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 146 145 6 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 146 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 135 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 135 5 136 2 arch/arm/kernel/perf_event.c:174 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] 2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 sl)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_DEAD (reg:SI 3 r3)
                                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                        (set/f (reg/f:SI 13 sp)
                                                            (plus:SI (reg/f:SI 13 sp)
                                                                (const_int -40 [0xffffffffffffffd8])))
                                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                            (reg:SI 3 r3))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 4 [0x4])) [0 S4 A32])
                                                            (reg:SI 4 r4))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 8 [0x8])) [0 S4 A32])
                                                            (reg:SI 5 r5))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 12 [0xc])) [0 S4 A32])
                                                            (reg:SI 6 r6))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 16 [0x10])) [0 S4 A32])
                                                            (reg:SI 7 r7))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 20 [0x14])) [0 S4 A32])
                                                            (reg:SI 8 r8))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 24 [0x18])) [0 S4 A32])
                                                            (reg:SI 9 r9))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                                            (reg:SI 10 sl))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 32 [0x20])) [0 S4 A32])
                                                            (reg:SI 11 fp))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 36 [0x24])) [0 S4 A32])
                                                            (reg:SI 14 lr))
                                                    ])
                                                (nil)))))))))))))

(note 136 135 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 136 8 2 arch/arm/kernel/perf_event.c:174 (set (reg/v/f:SI 4 r4 [orig:146 event ] [146])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(insn:TI 8 2 10 2 arch/arm/kernel/perf_event.c:175 (set (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 8 147 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 6 r6 [orig:141 left ] [141])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(note 147 10 12 2 ( left (expr_list:REG_DEP_TRUE (reg/v:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 12 147 14 2 arch/arm/kernel/perf_event.c:176 (set (reg:DI 8 r8 [orig:143 D.25193 ] [143])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 88 [0x58])) [0 <variable>.sample_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 14 12 15 2 arch/arm/kernel/perf_event.c:179 (parallel [
            (set (reg:DI 10 sl [149])
                (neg:DI (reg:DI 8 r8 [orig:143 D.25193 ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 15 14 148 2 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (reg:SI 11 fp [+4 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 11 fp [+4 ])
        (nil)))

(note 148 15 16 2 ( left (expr_list:REG_DEP_TRUE (reg/v:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 16 148 149 2 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

(note 149 16 95 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:146 event ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 95 149 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 18 95 96 3 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 96 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 96 20 4 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (reg:SI 10 sl [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 10 sl [149])
        (nil)))

(jump_insn:TI 20 19 113 4 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 113 20 26 5 128 "" [1 uses])

(note 26 113 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 150 5 arch/arm/kernel/perf_event.c:177 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 150 27 142 5 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 ret ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 142 150 143 5 (set (pc)
        (label_ref 36)) -1 (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 143 142 151)

(note 151 143 30 6 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [50.0%] 
(code_label 30 151 31 6 120 "" [2 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 152 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:136 tmp ] [136])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:DI 6 r6 [orig:136 tmp ] [136])
            (nil))))

(note 152 32 153 6 ( left (nil)) NOTE_INSN_VAR_LOCATION)

(note 153 152 35 6 ( tmp (expr_list:REG_DEP_TRUE (reg/v:DI 6 r6 [orig:136 tmp ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 35 153 154 6 arch/arm/kernel/perf_event.c:183 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(note 154 35 133 6 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 ret ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 133 154 155 6 arch/arm/kernel/perf_event.c:180 (set (reg:SI 6 r6 [orig:141 left ] [141])
        (reg:SI 8 r8 [orig:143 D.25193 ] [143])) 167 {*arm_movsi_insn} (nil))

(note 155 133 156 6 ( left (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 156 155 134 6 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 134 156 157 6 arch/arm/kernel/perf_event.c:180 (set (reg:SI 7 r7 [ left+4 ])
        (reg:SI 9 r9 [ D.25193+4 ])) 167 {*arm_movsi_insn} (nil))

(note 157 134 33 6 ( left (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 33 157 36 6 arch/arm/kernel/perf_event.c:182 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 36 33 37 7 122 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 37 39 7 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 39 38 100 7 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
        (nil)))
;; End of basic block 7 -> ( 11 8)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]


;; Succ edge  11 [79.0%] 
;; Succ edge  8 [21.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [21.0%]  (fallthru)
(note 100 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 41 100 101 8 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 101 41 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 101 43 9 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 43 42 114 9 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [50.0%]  (fallthru)
;; Pred edge  8 [50.0%] 
(code_label 114 43 49 10 129 "" [1 uses])

(note 49 114 131 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 131 49 158 10 arch/arm/kernel/perf_event.c:187 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 6 r6 [orig:141 left ] [141])
                        (reg:SI 8 r8 [orig:143 D.25193 ] [143]))
                    (reg:SI 6 r6 [orig:141 left ] [141])))
            (set (reg:SI 6 r6 [orig:141 left ] [141])
                (plus:SI (reg:SI 6 r6 [orig:141 left ] [141])
                    (reg:SI 8 r8 [orig:143 D.25193 ] [143])))
        ]) 10 {*addsi3_compare_op1} (nil))

(note 158 131 132 10 ( left (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 132 158 159 10 arch/arm/kernel/perf_event.c:187 (set (reg:SI 7 r7 [ left+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 7 r7 [ left+4 ])
                (reg:SI 9 r9 [ D.25193+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(note 159 132 51 10 ( left (expr_list:REG_DEP_TRUE (reg:DI 6 r6 [orig:141 left ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 51 159 160 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:135 tmp ] [135])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:DI 10 sl [orig:135 tmp ] [135])
                (nil)))))

(note 160 51 53 10 ( tmp (expr_list:REG_DEP_TRUE (reg/v:DI 10 sl [orig:135 tmp ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 53 160 52 10 arch/arm/kernel/perf_event.c:190 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 52 53 54 10 arch/arm/kernel/perf_event.c:189 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [79.0%] 
;; Pred edge  9 [50.0%] 
(code_label 54 52 55 11 123 "" [2 uses])

(note 55 54 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 129 55 57 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 57 129 116 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [150]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 116 57 115 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 0 r0 [orig:158+4 ] [158])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 68 [0x44])) [0 <variable>.max_period+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 115 116 60 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 12 ip [orig:157 <variable>.max_period ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 115 61 11 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left.797+4 ])
            (reg:SI 0 r0 [orig:158+4 ] [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 61 60 105 11 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]


;; Succ edge  14 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 105 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 63 105 106 12 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 15 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  15 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [29.0%]  (fallthru)
(note 106 63 64 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 64 106 65 13 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:133 left.797 ] [133])
            (reg:SI 12 ip [orig:157 <variable>.max_period ] [157]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 65 64 70 13 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 11 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 70 65 109 14 126 "" [1 uses])

(note 109 70 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 109 126 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 6 r6 [orig:162 left.797 ] [162])
        (reg:SI 12 ip [orig:160 left.797 ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:160 left.797 ] [160])
        (nil)))

(insn 126 125 72 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 7 r7 [ left.797+4 ])
        (reg:SI 0 r0 [orig:161 left.797+4 ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:161 left.797+4 ] [161])
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 12 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  12 [71.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 72 126 110 15 125 "" [2 uses])

(note 110 72 76 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 76 110 77 15 NOTE_INSN_DELETED)

(note 77 76 74 15 NOTE_INSN_DELETED)

(insn:TI 74 77 73 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg:DI 8 r8 [153])
                (neg:DI (reg/v:DI 6 r6 [orig:133 left.797 ] [133])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 73 74 75 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 0 r0 [152])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 75 73 161 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:134 tmp ] [134])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 80 [0x50])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [152])
            (expr_list:REG_UNUSED (reg:QI 24 cc)
                (nil)))))

(note 161 75 162 15 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(note 162 161 78 15 ( tmp (expr_list:REG_DEP_TRUE (reg/v:DI 10 sl [orig:134 tmp ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 78 162 79 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 0 r0)
        (reg/v:SI 2 r2 [orig:148 idx ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:148 idx ] [148])
        (nil)))

(insn 79 78 163 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 1 r1)
        (neg:SI (reg:SI 6 r6 [orig:133 left.797 ] [133]))) 127 {*arm_negsi2} (nil))

(note 163 79 80 15 ( hwc (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 80 163 164 15 arch/arm/kernel/perf_event.c:198 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                            (const_int 28 [0x1c])) [0 <variable>.write_counter+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 164 80 81 15 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn 81 164 82 15 arch/arm/kernel/perf_event.c:200 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:146 event ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 82 81 87 15 arch/arm/kernel/perf_event.c:200 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 87 82 93 15 arch/arm/kernel/perf_event.c:203 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:139 ret ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 93 87 137 15 arch/arm/kernel/perf_event.c:203 (use (reg/i:SI 0 r0)) -1 (nil))

(note 137 93 138 15 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 138 137 139 15 arch/arm/kernel/perf_event.c:203 (return) 260 {return} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 139 138 128)

(note 128 139 130 NOTE_INSN_DELETED)

(note 130 128 0 NOTE_INSN_DELETED)


;; Function armpmu_start (armpmu_start)[0:1315]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: flags+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:134 event ] [134])
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 5:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:134 event ] [134])
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:134 event ] [134])
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])


Basic block 6:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:134 event ] [134])
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])


Basic block 7:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 1: flags+0
Reg 4: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 4: event+0
Reg 5: hwc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 event ] [134])


8 basic blocks, 11 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

Successors:  EXIT [10.1%]  3 [89.9%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 8986, maybe hot.
Predecessors:  2 [89.9%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  (fallthru) 7 [50.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4493, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [0.0%]  (fallthru) 7 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 2.
Predecessors:  4 [0.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru) 7 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 [0.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 8986, maybe hot.
Predecessors:  3 [50.0%]  5 [100.0%]  4 [100.0%]  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  2 [10.1%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,1u} r3={11d,7u} r4={2d,7u,1d} r5={3d,7u,1d} r6={1d,2u} r12={3d} r13={2d,11u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 434{382d,50u,2e} in 32{29 regular + 3 call} insns.
(note 1 0 73 NOTE_INSN_DELETED)

(note 73 1 74 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 74 73 5 2 ( flags (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ flags ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 74 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 68 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 68 4 69 2 arch/arm/kernel/perf_event.c:268 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 69 68 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 69 2 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 5 r5 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 2 7 8 2 arch/arm/kernel/perf_event.c:268 (set (reg/v/f:SI 4 r4 [orig:134 event ] [134])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 2 9 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:271 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (nil)))

(jump_insn:TI 10 9 75 2 arch/arm/kernel/perf_event.c:271 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

(note 75 10 11 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:134 event ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 75 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 11 13 3 NOTE_INSN_DELETED)

(insn:TI 13 12 14 3 arch/arm/kernel/perf_event.c:278 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:135 flags ] [135])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:135 flags ] [135])
        (nil)))

(jump_insn:TI 14 13 15 3 arch/arm/kernel/perf_event.c:278 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 15 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 17 15 16 4 NOTE_INSN_DELETED)

(insn:TI 16 17 18 4 arch/arm/kernel/perf_event.c:269 (set (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:134 event ] [134])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                    (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
            (nil))))

(insn:TI 18 16 19 4 arch/arm/kernel/perf_event.c:269 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
        (nil)))

(jump_insn:TI 19 18 76 4 arch/arm/kernel/perf_event.c:269 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

(note 76 19 20 5 ( event (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:134 event ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 20 76 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 24 20 25 5 NOTE_INSN_DELETED)

(note 25 24 26 5 NOTE_INSN_DELETED)

(note 26 25 22 5 NOTE_INSN_DELETED)

(insn:TI 22 26 27 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:SI 3 r3 [orig:143 __warned ] [143])
        (zero_extend:SI (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                    (const_int 8 [0x8])) [0 __warned+0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:QI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 __warned+0 S1 A8]))
        (nil)))

(insn:TI 27 22 28 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:143 __warned ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:143 __warned ] [143])
        (nil)))

(jump_insn:TI 28 27 29 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 29 28 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 29 77 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(note 77 32 33 6 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:134 event ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 33 77 78 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 1 r1)
        (const_int 279 [0x117])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 279 [0x117])
        (nil)))

(note 78 33 34 6 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 34 78 36 6 arch/arm/kernel/perf_event.c:279 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 34 38 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (reg:SI 3 r3 [150])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 38 36 79 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                (const_int 8 [0x8])) [0 __warned+0 S1 A8])
        (reg:QI 3 r3 [150])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/f:SI 5 r5 [136])
        (expr_list:REG_DEAD (reg:QI 3 r3 [150])
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 79 38 80 7 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:134 event ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 80 79 39 7 ( flags (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ flags ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 5 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 39 80 40 7 134 "" [3 uses])

(note 40 39 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 50 40 41 7 NOTE_INSN_DELETED)

(insn:TI 41 50 81 7 arch/arm/kernel/perf_event.c:269 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(note 81 41 42 7 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 42 81 45 7 arch/arm/kernel/perf_event.c:281 (set (reg:SI 3 r3 [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 45 42 82 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(note 82 45 43 7 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(insn 43 82 44 7 arch/arm/kernel/perf_event.c:281 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [152])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 44 43 46 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 event ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 47 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 47 46 65 7 arch/arm/kernel/perf_event.c:289 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 65 47 51 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 51 65 52 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 49 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 49 52 53 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn:TI 53 49 71 7 arch/arm/kernel/perf_event.c:290 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 71 53 70 7 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 71 64)

(note 64 70 66 NOTE_INSN_DELETED)

(note 66 64 0 NOTE_INSN_DELETED)


;; Function armpmu_del (armpmu_del)[0:1316]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: flags+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 16
Reg 0: event+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 5: event+0
Reg 6: cpuc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 event ] [137])
      (reg:SI 0 r0 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:135 idx ] [135])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:134 __ptr ] [134])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 5: event+0
Reg 6: cpuc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 event ] [137])
      (reg:SI 0 r0 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:135 idx ] [135])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:134 __ptr ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: event+0
Reg 6: cpuc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 event ] [137])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:135 idx ] [135])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: event+0
Reg 3: __ptr+0
Reg 4: idx+0
Reg 5: event+0
Reg 6: cpuc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 event ] [137])
      (reg:SI 0 r0 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:135 idx ] [135])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:134 __ptr ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: event+0
Reg 6: cpuc+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 event ] [137])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:135 idx ] [135])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])


5 basic blocks, 5 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [0.0%]  (fallthru) 4 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 4.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  3 [100.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={11d,5u,1d} r2={8d,2u} r3={11d,5u} r4={2d,6u} r5={2d,4u} r6={3d,6u} r12={5d} r13={2d,11u} r14={5d,3u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={6d,1u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 667{616d,50u,1e} in 31{26 regular + 5 call} insns.
(note 1 0 58 NOTE_INSN_DELETED)

(note 58 1 59 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 59 58 5 2 ( flags (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ flags ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 59 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 54 2 NOTE_INSN_DELETED)

(insn/f:TI 54 11 55 2 arch/arm/kernel/perf_event.c:295 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 55 54 53 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 53 55 49 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 49 53 51 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 51 49 50 2 arch/arm/kernel/perf_event.c:296 (set (reg/f:SI 2 r2 [140])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 50 51 16 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 50 60 2 arch/arm/kernel/perf_event.c:298 (set (reg/v:SI 4 r4 [orig:135 idx ] [135])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 event ] [137])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:137 event ] [137])
        (nil)))

(note 60 16 2 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:135 idx ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 2 60 13 2 arch/arm/kernel/perf_event.c:295 (set (reg/v/f:SI 5 r5 [orig:137 event ] [137])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 2 61 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (nil)))

(note 61 13 17 2 ( flags (nil)) NOTE_INSN_VAR_LOCATION)

(insn 17 61 7 2 arch/arm/kernel/perf_event.c:300 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:135 idx ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 7 17 62 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(note 62 7 8 2 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 8 62 14 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8569250)) -1 (nil))

(insn:TI 14 8 15 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 6 r6 [144])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [140])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [140])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 15 14 63 2 arch/arm/kernel/perf_event.c:296 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [144]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (nil)))

(note 63 15 18 2 ( cpuc (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 18 63 64 2 arch/arm/kernel/perf_event.c:300 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

(note 64 18 19 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:137 event ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 19 64 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 19 22 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(insn 22 21 23 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 1 r1)
        (const_int 300 [0x12c])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 23 22 65 3 arch/arm/kernel/perf_event.c:300 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 65 23 66 3 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

(note 66 65 67 4 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:137 event ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 67 66 24 4 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 24 67 25 4 139 "" [1 uses])

(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 26 25 35 4 NOTE_INSN_DELETED)

(note 35 26 28 4 NOTE_INSN_DELETED)

(insn:TI 28 35 27 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn 27 28 29 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 29 27 68 4 arch/arm/kernel/perf_event.c:302 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 68 29 30 4 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 30 68 31 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 31 30 32 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 1 r1)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 32 31 36 4 arch/arm/kernel/perf_event.c:303 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_stop") [flags 0x3] <function_decl 0x114a1880 armpmu_stop>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 32 33 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 36 37 4 arch/arm/kernel/perf_event.c:304 (set (reg:SI 3 r3 [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 37 33 34 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (nil))

(insn:TI 34 37 38 4 arch/arm/kernel/perf_event.c:304 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:135 idx ] [135])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) [0 <variable>.events S4 A32])
        (reg:SI 3 r3 [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [147])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 38 34 39 4 arch/arm/kernel/perf_event.c:305 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 39 38 56 4 arch/arm/kernel/perf_event.c:307 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(note 56 39 57 4 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 57 56 40 4 arch/arm/kernel/perf_event.c:308 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 40 57 41 4 arch/arm/kernel/perf_event.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 41 40 52)

(note 52 41 0 NOTE_INSN_DELETED)


;; Function armpmu_add (armpmu_add)[0:1317]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Reg 1: flags+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])
  name: flags
    offset 0
      (reg:SI 1 r1 [ flags ])

OUT:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])


Basic block 3:
IN:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])

OUT:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])


Basic block 4:
IN:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])

OUT:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])


Basic block 5:
IN:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])

OUT:
Stack adjustment: 32
Reg 4: event+0
Reg 5: err+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: err
    offset 0
      (reg/v:SI 5 r5 [orig:135 err ] [135])
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])


Basic block 6:
IN:
Stack adjustment: 32
Reg 4: event+0
Reg 5: idx+0 err+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: err
    offset 0
      (reg/v:SI 5 r5 [orig:135 err ] [135])

OUT:
Stack adjustment: 32
Reg 4: event+0
Reg 5: err+0 idx+0
Reg 6: cpuc+0
Reg 8: hwc+0
Reg 10: flags+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 4 r4 [orig:140 event ] [140])
  name: flags
    offset 0
      (reg/v:SI 10 sl [orig:141 flags ] [141])
  name: cpuc
    offset 0
      (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:136 idx ] [136])
  name: err
    offset 0
      (reg/v:SI 5 r5 [orig:135 err ] [135])


7 basic blocks, 8 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  6 [36.7%]  3 [63.3%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6333, maybe hot.
Predecessors:  2 [63.3%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  4 [29.0%]  (fallthru) 5 [71.0%] 
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1837, maybe hot.
Predecessors:  3 [29.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 6333, maybe hot.
Predecessors:  3 [71.0%]  4 [100.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]

Successors:  6 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru) 2 [36.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 1 , prev 6, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  6 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,14u} r1={13d,6u} r2={11d,3u} r3={14d,6u,1d} r4={2d,8u} r5={3d,7u} r6={3d,6u} r7={2d,4u,1d} r8={2d,4u} r9={1d,2u} r10={2d,3u} r12={7d} r13={2d,15u} r14={8d,2u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={9d,2u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 949{865d,82u,2e} in 46{39 regular + 7 call} insns.
(note 1 0 91 NOTE_INSN_DELETED)

(note 91 1 92 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 92 91 5 2 ( flags (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ flags ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 92 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 21 2 NOTE_INSN_DELETED)

(note 21 11 25 2 NOTE_INSN_DELETED)

(note 25 21 86 2 NOTE_INSN_DELETED)

(insn/f:TI 86 25 87 2 arch/arm/kernel/perf_event.c:312 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 87 86 85 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 85 87 80 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 80 85 3 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 3 80 81 2 arch/arm/kernel/perf_event.c:312 (set (reg/v:SI 10 sl [orig:141 flags ] [141])
        (reg:SI 1 r1 [ flags ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ flags ])
        (nil)))

(insn:TI 81 3 83 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 83 81 93 2 arch/arm/kernel/perf_event.c:313 (set (reg/f:SI 1 r1 [143])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(note 93 83 19 2 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:141 flags ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 19 93 16 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 7 r7 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 16 19 94 2 arch/arm/kernel/perf_event.c:314 (set (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
        (plus:SI (reg/f:SI 0 r0 [orig:140 event ] [140])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(note 94 16 13 2 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 94 2 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 2 13 7 2 arch/arm/kernel/perf_event.c:312 (set (reg/v/f:SI 4 r4 [orig:140 event ] [140])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 95 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(note 95 7 17 2 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 17 95 96 2 arch/arm/kernel/perf_event.c:318 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 96 17 14 2 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:140 event ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 14 96 8 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 6 r6 [147])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [143])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
        (expr_list:REG_DEAD (reg/f:SI 1 r1 [143])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 8 14 15 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8571426)) -1 (nil))

(insn:TI 15 8 97 2 arch/arm/kernel/perf_event.c:313 (set (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
        (plus:SI (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [147]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (nil)))

(note 97 15 18 2 ( cpuc (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn 18 97 98 2 arch/arm/kernel/perf_event.c:318 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_disable") [flags 0x41] <function_decl 0x113bae00 perf_pmu_disable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 98 18 20 2 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 20 98 22 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 22 20 23 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 22 24 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 24 23 26 2 arch/arm/kernel/perf_event.c:321 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 26 24 99 2 arch/arm/kernel/perf_event.c:322 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 5 r5 [orig:136 idx ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 99 26 27 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:136 idx ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 27 99 33 2 arch/arm/kernel/perf_event.c:322 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [36.7%] 
;; Succ edge  3 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [63.3%]  (fallthru)
(note 33 27 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 37 33 42 3 NOTE_INSN_DELETED)

(note 42 37 48 3 NOTE_INSN_DELETED)

(note 48 42 34 3 NOTE_INSN_DELETED)

(insn:TI 34 48 38 3 arch/arm/kernel/perf_event.c:331 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 38 34 36 3 arch/arm/kernel/perf_event.c:332 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 36 38 39 3 arch/arm/kernel/perf_event.c:332 (set (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 39 36 40 3 arch/arm/kernel/perf_event.c:332 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 40 39 41 3 arch/arm/kernel/perf_event.c:332 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 41 40 43 3 arch/arm/kernel/perf_event.c:333 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:136 idx ] [136])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) [0 <variable>.events S4 A32])
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 41 44 3 arch/arm/kernel/perf_event.c:334 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 5 r5 [orig:136 idx ] [136])
        (nil)))

(insn 44 43 45 3 arch/arm/kernel/perf_event.c:334 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 45 44 49 3 arch/arm/kernel/perf_event.c:334 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x512e0000 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 45 46 3 arch/arm/kernel/perf_event.c:337 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 10 sl [orig:141 flags ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 46 49 47 3 arch/arm/kernel/perf_event.c:336 (set (reg:SI 3 r3 [155])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 47 46 50 3 arch/arm/kernel/perf_event.c:336 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [155])
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(jump_insn:TI 50 47 51 3 arch/arm/kernel/perf_event.c:337 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [29.0%]  (fallthru)
;; Succ edge  5 [71.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (fallthru)
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 53 4 arch/arm/kernel/perf_event.c:338 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 4 arch/arm/kernel/perf_event.c:338 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 54 53 55 4 arch/arm/kernel/perf_event.c:338 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_start") [flags 0x3] <function_decl 0x114a1980 armpmu_start>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 55 54 56 5 146 "" [1 uses])

(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 59 5 arch/arm/kernel/perf_event.c:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 59 57 100 5 arch/arm/kernel/perf_event.c:316 (set (reg/v:SI 5 r5 [orig:135 err ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 100 59 101 5 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 101 100 58 5 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:135 err ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 58 101 102 5 arch/arm/kernel/perf_event.c:341 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

(note 102 58 60 6 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:136 idx ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  2 [36.7%] 
(code_label 60 102 61 6 145 ("out") [1 uses])

(note 61 60 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 62 61 63 6 arch/arm/kernel/perf_event.c:344 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 63 62 68 6 arch/arm/kernel/perf_event.c:344 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_enable") [flags 0x41] <function_decl 0x113bae80 perf_pmu_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 63 74 6 arch/arm/kernel/perf_event.c:346 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 err ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 74 68 88 6 arch/arm/kernel/perf_event.c:346 (use (reg/i:SI 0 r0)) -1 (nil))

(note 88 74 89 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 89 88 90 6 arch/arm/kernel/perf_event.c:346 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 90 89 82)

(note 82 90 84 NOTE_INSN_DELETED)

(note 84 82 0 NOTE_INSN_DELETED)


;; Function validate_group (validate_group)[0:1319]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 3:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 4:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 5:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 6:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 7:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 8:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


Basic block 9:
IN:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])

OUT:
Stack adjustment: 176
Reg 4: sibling+0
Reg 6: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 event ] [142])
  name: sibling
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])


10 basic blocks, 13 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1442, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1442, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  6 [61.0%]  3 [39.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 562, maybe hot.
Predecessors:  2 [39.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}

Successors:  8 [100.0%] 


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  6 [95.5%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  8 [4.5%]  (loop_exit) 5 [95.5%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9120, maybe hot.
Predecessors:  4 [95.5%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  6 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru,dfs_back) 2 [61.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

Successors:  4 [95.5%]  7 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 450, maybe hot.
Predecessors:  6 [4.5%]  (fallthru,loop_exit)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  9 [61.0%]  8 [39.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 1167, maybe hot.
Predecessors:  7 [39.0%]  (fallthru) 4 [4.5%]  (loop_exit) 3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 9 , prev 8, next 1, loop_depth 0, count 0, freq 1442, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 7 [61.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 1 , prev 9, loop_depth 0, count 0, freq 1442, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




validate_group

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,11u} r1={9d,4u} r2={5d} r3={5d} r4={4d,9u} r5={3d,6u} r6={2d,4u} r7={2d,4u} r12={4d} r13={3d,17u,1d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={8d,7u} r25={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 569{500d,64u,5e} in 32{28 regular + 4 call} insns.
(note 1 0 96 NOTE_INSN_DELETED)

(note 96 1 4 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 96 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 3 81 2 NOTE_INSN_DELETED)

(insn/f:TI 81 15 2 2 arch/arm/kernel/perf_event.c:364 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -20 [0xffffffffffffffec])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 2 81 82 2 arch/arm/kernel/perf_event.c:364 (set (reg/v/f:SI 6 r6 [orig:142 event ] [142])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(insn/f:TI 82 2 83 2 arch/arm/kernel/perf_event.c:364 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -156 [0xffffffffffffff64]))) 4 {*arm_addsi3} (nil))

(note 83 82 9 2 NOTE_INSN_PROLOGUE_END)

(insn 9 83 7 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 1 r1)
        (const_int 148 [0x94])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 9 6 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg/f:SI 4 r4 [143])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn 6 7 97 2 arch/arm/kernel/perf_event.c:365 (set (reg/v/f:SI 5 r5 [orig:134 leader ] [134])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:142 event ] [142])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(note 97 6 8 2 ( leader (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:134 leader ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 8 97 98 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(note 98 8 10 2 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:142 event ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 10 98 12 2 arch/arm/kernel/perf_event.c:368 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10a9ce80 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 12 10 13 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn:TI 13 12 14 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:134 leader ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 14 13 16 2 arch/arm/kernel/perf_event.c:370 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 16 14 71 2 arch/arm/kernel/perf_event.c:370 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 71 16 19 2 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 7 r7 [149])
            (reg/f:SI 4 r4 [143]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn:TI 19 71 100 2 arch/arm/kernel/perf_event.c:373 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
            (mem/s/f/j:SI (pre_modify:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                    (plus:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                        (const_int 16 [0x10]))) [0 <variable>.sibling_list.next+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
        (nil)))

(note 100 19 99 2 ( sibling (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 99 100 17 2 ( leader (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 17 99 93 2 arch/arm/kernel/perf_event.c:370 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}

;; Pred edge  2 [39.0%]  (fallthru)
(note 93 17 94 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn 94 93 95 3 (set (pc)
        (label_ref 51)) -1 (nil))
;; End of basic block 3 -> ( 8)


;; Succ edge  8 [100.0%] 

(barrier 95 94 36)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 36 95 23 4 153 "" [1 uses])

(note 23 36 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 27 4 NOTE_INSN_DELETED)

(call_insn:TI 27 28 29 4 arch/arm/kernel/perf_event.c:374 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 29 27 30 4 arch/arm/kernel/perf_event.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 30 29 31 4 arch/arm/kernel/perf_event.c:374 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [4.5%]  (loop_exit)
;; Succ edge  5 [95.5%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [95.5%]  (fallthru)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 34 5 arch/arm/kernel/perf_event.c:373 (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 sibling ] [135]) [0 <variable>.group_entry.next+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [61.0%] 
(code_label 34 32 35 6 152 "" [1 uses])

(note 35 34 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 35 26 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
            (reg/f:SI 5 r5 [orig:137 D.25400 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(insn 26 37 25 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 26 38 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(jump_insn:TI 38 25 39 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 39 38 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 44 39 42 7 NOTE_INSN_DELETED)

(insn:TI 42 44 43 7 arch/arm/kernel/perf_event.c:378 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:142 event ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 45 7 arch/arm/kernel/perf_event.c:378 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 45 43 48 7 arch/arm/kernel/perf_event.c:378 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 48 45 46 7 arch/arm/kernel/perf_event.c:381 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 46 48 51 7 arch/arm/kernel/perf_event.c:378 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [61.0%] 
;; Succ edge  8 [39.0%]  (fallthru)

;; Start of basic block ( 7 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [39.0%]  (fallthru)
;; Pred edge  4 [4.5%]  (loop_exit)
;; Pred edge  3 [100.0%] 
(code_label 51 46 52 8 151 "" [2 uses])

(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 54 8 arch/arm/kernel/perf_event.c:371 (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
        (const_int -28 [0xffffffffffffffe4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -28 [0xffffffffffffffe4])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [61.0%] 
(code_label 54 53 55 9 154 "" [1 uses])

(note 55 54 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 66 55 84 9 arch/arm/kernel/perf_event.c:382 (use (reg/i:SI 0 r0)) -1 (nil))

(note 84 66 85 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 85 84 86 9 arch/arm/kernel/perf_event.c:382 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 86 85 79)

(note 79 86 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)


;; Function hw_perf_event_destroy (hw_perf_event_destroy)[0:1323]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])

OUT:
Stack adjustment: 16


Basic block 3:
IN:
Stack adjustment: 16

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])


Basic block 4:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])


Basic block 5:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])


Basic block 6:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])


Basic block 7:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:133 i ] [133])


8 basic blocks, 10 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1475, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1475, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [61.0%]  (fallthru) EXIT [39.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	

Successors:  6 [100.0%] 
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 9100, maybe hot.
Predecessors:  6 [91.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  5 [52.5%]  (fallthru) 6 [47.5%]  (dfs_back)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 4776, maybe hot.
Predecessors:  4 [52.5%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  6 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru,dfs_back) 4 [47.5%]  (dfs_back) 3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

Successors:  4 [91.0%]  7 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  6 [9.0%]  (fallthru,loop_exit)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 1475, maybe hot.
Predecessors:  7 [100.0%]  (ab,sibcall) 2 [39.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




hw_perf_event_destroy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={10d,4u} r2={7d} r3={10d,3u} r4={5d,9u} r5={2d,4u,1d} r6={2d,3u} r12={6d} r13={2d,14u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={9d,3u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 781{730d,50u,1e} in 31{25 regular + 6 call} insns.
(note 1 0 87 NOTE_INSN_DELETED)

(note 87 1 4 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 87 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 3 76 2 NOTE_INSN_DELETED)

(insn/f:TI 76 13 77 2 arch/arm/kernel/perf_event.c:466 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 77 76 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 77 11 2 arch/arm/kernel/perf_event.c:467 (set (reg/f:SI 4 r4 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 11 6 10 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn:TI 10 11 88 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [137])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(note 88 10 12 2 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 12 88 14 2 arch/arm/kernel/perf_event.c:467 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("atomic_dec_and_mutex_lock") [flags 0x41] <function_decl 0x10d7c480 atomic_dec_and_mutex_lock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 14 12 15 2 arch/arm/kernel/perf_event.c:467 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 15 14 16 2 arch/arm/kernel/perf_event.c:467 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 16 68 3 arch/arm/kernel/perf_event.c:450 (set (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn 68 18 19 3 (set (reg/f:SI 6 r6 [153])
        (reg/f:SI 4 r4 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [137])
        (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
            (nil))))

(insn:TI 19 68 20 3 arch/arm/kernel/perf_event.c:450 (set (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
        (nil)))

(insn:TI 20 19 89 3 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(note 89 20 85 3 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:133 i ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 85 89 86 3 (set (pc)
        (label_ref 38)) -1 (nil))
;; End of basic block 3 -> ( 6)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 86 85 40)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [91.0%] 
(code_label 40 86 23 4 160 "" [1 uses])

(note 23 40 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 25 4 NOTE_INSN_DELETED)

(insn:TI 25 28 27 4 arch/arm/kernel/perf_event.c:451 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [153])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn:TI 27 25 71 4 arch/arm/kernel/perf_event.c:451 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 71 27 29 4 arch/arm/kernel/perf_event.c:453 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 71 30 4 arch/arm/kernel/perf_event.c:452 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (reg:SI 1 r1))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 30 29 31 4 arch/arm/kernel/perf_event.c:452 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  5 [52.5%]  (fallthru)
;; Succ edge  6 [47.5%]  (dfs_back)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [52.5%]  (fallthru)
(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 34 31 38 5 arch/arm/kernel/perf_event.c:453 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [47.5%]  (dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 38 34 39 6 158 "" [2 uses])

(note 39 38 82 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 82 39 70 6 arch/arm/kernel/perf_event.c:450 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 4 r4 [orig:133 i ] [133])
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1)
                (reg/v:SI 4 r4 [orig:133 i ] [133]))
        ]) 174 {*movsi_compare0} (nil))

(insn 70 82 37 6 (set (reg/f:SI 5 r5 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 37 70 42 6 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg/v:SI 4 r4 [orig:133 i ] [133])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 42 37 43 6 arch/arm/kernel/perf_event.c:450 discrim 1 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  7 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [9.0%]  (fallthru,loop_exit)
(note 43 42 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 46 43 45 7 NOTE_INSN_DELETED)

(insn:TI 45 46 47 7 arch/arm/kernel/perf_event.c:455 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(call_insn:TI 47 45 48 7 arch/arm/kernel/perf_event.c:455 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (nil))
    (nil))

(insn 48 47 49 7 arch/arm/kernel/perf_event.c:457 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 49 48 51 7 arch/arm/kernel/perf_event.c:457 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 51 49 55 7 arch/arm/kernel/perf_event.c:458 (set (reg:SI 3 r3 [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 55 51 52 7 arch/arm/kernel/perf_event.c:469 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn:TI 52 55 80 7 arch/arm/kernel/perf_event.c:458 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [152])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 3 r3 [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(note 80 52 81 7 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 81 80 56 7 arch/arm/kernel/perf_event.c:471 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 56 81 57 7 arch/arm/kernel/perf_event.c:469 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 57 56 74)

(note 74 57 75 NOTE_INSN_DELETED)

(note 75 74 0 NOTE_INSN_DELETED)


;; Function armpmu_event_init (armpmu_event_init)[0:1325]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: event+0
Variables:
  name: event
    offset 0
      (reg:SI 0 r0 [ event ])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])


Basic block 3:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])


Basic block 4:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])


Basic block 5:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])


Basic block 6:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 0: event+0
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/f:SI 0 r0 [orig:163 event ] [163])
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 7:
IN:
Stack adjustment: 48
Reg 0: oldval+0 event+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 0: event+0 oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])


Basic block 8:
IN:
Stack adjustment: 48
Reg 0: oldval+0 event+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 0: event+0 oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])


Basic block 9:
IN:
Stack adjustment: 48
Reg 0: oldval+0 event+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])


Basic block 10:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])


Basic block 11:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])


Basic block 12:
IN:
Stack adjustment: 48
Reg 0: oldval+0 event+0
Reg 4: c+0
Reg 5: event+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 13:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 14:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])


Basic block 15:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])


Basic block 16:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 2: plat+0
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: plat
    offset 0
      (reg/v/f:SI 2 r2 [orig:151 plat ] [151])


Basic block 17:
IN:
Stack adjustment: 48
Reg 2: plat+0
Reg 4: c+0
Reg 5: event+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: plat
    offset 0
      (reg/v/f:SI 2 r2 [orig:151 plat ] [151])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])


Basic block 18:
IN:
Stack adjustment: 48
Reg 2: plat+0
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: plat
    offset 0
      (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])


Basic block 19:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])


Basic block 20:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 21:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 7: handle_irq+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])


Basic block 22:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 23:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 24:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 25:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 26:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 27:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])


Basic block 28:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])


Basic block 29:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])


Basic block 30:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])


Basic block 31:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])


Basic block 32:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:135 i.966 ] [135])


Basic block 33:
IN:
Stack adjustment: 48
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: tmp+0
Reg 1: result+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: result
    offset 0
      (reg/v:SI 1 r1 [orig:148 result ] [148])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: tmp
    offset 0
      (reg/v:SI 0 r0 [orig:147 tmp ] [147])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 34:
IN:
Stack adjustment: 48
Reg 0: tmp+0
Reg 1: result+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: tmp
    offset 0
      (reg/v:SI 0 r0 [orig:147 tmp ] [147])
  name: result
    offset 0
      (reg/v:SI 1 r1 [orig:148 result ] [148])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 35:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 36:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 37:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 38:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 39:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 40:
IN:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 41:
IN:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 2: cache_result+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: cache_result
    offset 0
      (reg/v:SI 2 r2 [orig:143 cache_result ] [143])


Basic block 42:
IN:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 2: cache_result+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: cache_result
    offset 0
      (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])


Basic block 43:
IN:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])


Basic block 44:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0 c+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 45:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 46:
IN:
Stack adjustment: 48
Reg 0: cache_type+0 oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0 cache_type+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 47:
IN:
Stack adjustment: 48
Reg 0: cache_type+0 oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0 cache_type+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 48:
IN:
Stack adjustment: 48
Reg 0: cache_type+0 oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 49:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 50:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: tmp+0 i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0 tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 51:
IN:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: tmp+0 i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0 tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 52:
IN:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 2: cache_result+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: tmp+0 i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: cache_result
    offset 0
      (reg/v:SI 2 r2 [orig:143 cache_result ] [143])

OUT:
Stack adjustment: 48
Reg 0: cache_type+0
Reg 1: cache_op+0
Reg 2: cache_result+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0 tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_result
    offset 0
      (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])


Basic block 53:
IN:
Stack adjustment: 48
Reg 0: cache_type+0 oldval+0
Reg 1: cache_op+0
Reg 2: cache_result+0
Reg 4: err+0
Reg 5: event+0
Reg 6: tmp+0 i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: cache_op
    offset 0
      (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: cache_type
    offset 0
      (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: cache_result
    offset 0
      (reg/v:SI 2 r2 [orig:143 cache_result ] [143])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0 tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Variables:
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])


Basic block 54:
IN:
Stack adjustment: 48
Reg 0: event+0
Reg 4: err+0
Reg 5: event+0
Reg 6: tmp+0 i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])
      (reg/f:SI 0 r0 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0 tmp+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: tmp
    offset 0
      (reg/v:DI 6 r6 [orig:146 tmp ] [146])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


Basic block 55:
IN:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: c+0 err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: c
    offset 0
      (reg/v:SI 4 r4 [orig:157 c ] [157])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])

OUT:
Stack adjustment: 48
Reg 0: oldval+0
Reg 4: err+0
Reg 5: event+0
Reg 6: i+0
Reg 7: handle_irq+0
Reg 11: irq+0
Reg 12: res+0
Variables:
  name: err
    offset 0
      (reg/v:SI 4 r4 [orig:160 err ] [160])
  name: handle_irq
    offset 0
      (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
  name: i
    offset 0
      (reg/v:SI 6 r6 [orig:153 i ] [153])
  name: irq
    offset 0
      (reg/v:SI 11 fp [orig:154 irq ] [154])
  name: oldval
    offset 0
      (reg/v:SI 0 r0 [orig:155 oldval ] [155])
  name: res
    offset 0
      (reg/v:SI 12 ip [orig:156 res ] [156])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:163 event ] [163])


56 basic blocks, 87 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 7288, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 7288, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 3644, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [50.0%]  4 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 6996, maybe hot.
Predecessors:  3 [50.0%]  (fallthru) 2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  54 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 5466, should be 6996

Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 292, maybe hot.
Predecessors:  3 [50.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

Successors:  6 [89.9%]  (fallthru) 54 [10.1%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 1822, should be 292

Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 262, maybe hot.
Predecessors:  5 [89.9%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 1466, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 11 [100.0%]  (dfs_back)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [95.5%]  (fallthru) 12 [4.5%]  (loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 1400, maybe hot.
Predecessors:  7 [95.5%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 10, loop_depth 2, count 0, freq 10000, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 9 [86.0%]  (dfs_back)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  9 [86.0%]  (dfs_back) 10 [14.0%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 1400, maybe hot.
Predecessors:  9 [14.0%]  (fallthru,loop_exit)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  11 [86.0%]  (fallthru) 35 [14.0%]  (loop_exit)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 11 , prev 10, next 12, loop_depth 1, count 0, freq 1204, maybe hot.
Predecessors:  10 [86.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  7 [100.0%]  (dfs_back)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 76, maybe hot.
Predecessors:  7 [4.5%]  (loop_exit)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  13 [29.0%]  (fallthru) 33 [71.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  12 [29.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [0.0%]  (fallthru) 16 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  13 [0.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

Successors:  15 (fallthru) 34 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  14 (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}

Successors:  33 [100.0%] 


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  17 [85.0%]  (fallthru) 18 [15.0%] 
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 19, maybe hot.
Predecessors:  16 [85.0%]  (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7] 24 [cc]
;; live  kill	

Successors:  18 [15.0%]  (fallthru) 19 [85.0%] 
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 6.
Predecessors:  16 [15.0%]  17 [15.0%]  (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7]
;; live  kill	

Successors:  19 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  18 [100.0%]  (fallthru) 17 [85.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  21 [0.0%]  20 [100.0%]  (fallthru)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  19 [100.0%]  (fallthru)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	

Successors:  26 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 0.
Predecessors:  19 [0.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]

Successors:  34 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 22 , prev 21, next 23, loop_depth 1, count 0, freq 465, maybe hot.
Predecessors:  26 [95.5%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  25 [47.5%]  23 [52.5%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 23 , prev 22, next 24, loop_depth 1, count 0, freq 244, maybe hot.
Predecessors:  22 [52.5%]  (fallthru)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

Successors:  24 [0.0%]  (fallthru,loop_exit) 25 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 0, count 0, freq 0.
Predecessors:  23 [0.0%]  (fallthru,loop_exit)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  28 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 25 , prev 24, next 26, loop_depth 1, count 0, freq 465, maybe hot.
Predecessors:  22 [47.5%]  23 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  26 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 26 , prev 25, next 27, loop_depth 1, count 0, freq 487, maybe hot.
Predecessors:  25 [100.0%]  (fallthru,dfs_back) 20 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

Successors:  22 [95.5%]  27 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 27 , prev 26, next 28, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  26 [4.5%]  (fallthru,loop_exit)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  28 [50.0%]  (fallthru) 33 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 28 , prev 27, next 29, loop_depth 0, count 0, freq 11, maybe hot.
Predecessors:  27 [50.0%]  (fallthru) 24 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

Successors:  31 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 29 , prev 28, next 30, loop_depth 1, count 0, freq 111, maybe hot.
Predecessors:  31 [91.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  30 [52.5%]  (fallthru) 31 [47.5%]  (dfs_back)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 30 , prev 29, next 31, loop_depth 1, count 0, freq 58, maybe hot.
Predecessors:  29 [52.5%]  (fallthru)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  31 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 31 , prev 30, next 32, loop_depth 1, count 0, freq 122, maybe hot.
Predecessors:  30 [100.0%]  (fallthru,dfs_back) 29 [47.5%]  (dfs_back) 28 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	

Successors:  29 [91.0%]  32 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 32 , prev 31, next 33, loop_depth 0, count 0, freq 11, maybe hot.
Predecessors:  31 [9.0%]  (fallthru,loop_exit)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  34 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 33 , prev 32, next 34, loop_depth 0, count 0, freq 38, maybe hot.
Predecessors:  27 [50.0%]  12 [71.0%]  15 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]

Successors:  34 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 34 , prev 33, next 35, loop_depth 0, count 0, freq 76, maybe hot.
Predecessors:  14 [100.0%]  33 [100.0%]  (fallthru) 21 [100.0%]  32 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  54 [100.0%]  35 (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 35 , prev 34, next 36, loop_depth 0, count 0, freq 160, maybe hot.
Predecessors:  34 (fallthru) 10 [14.0%]  (loop_exit)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  36 [50.0%]  (fallthru) 38 [50.0%] 
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 36 , prev 35, next 37, loop_depth 0, count 0, freq 80, maybe hot.
Predecessors:  35 [50.0%]  (fallthru)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

Successors:  46 [72.0%]  37 [28.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 37 , prev 36, next 38, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  36 [28.0%]  (fallthru)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}

Successors:  55 [100.0%] 


Basic block 38 , prev 37, next 39, loop_depth 0, count 0, freq 80, maybe hot.
Predecessors:  35 [50.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  39 [28.0%]  (fallthru) 44 [72.0%] 
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 39 , prev 38, next 40, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  38 [28.0%]  (fallthru)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	

Successors:  52 [50.0%]  40 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 40 , prev 39, next 41, loop_depth 0, count 0, freq 11, maybe hot.
Predecessors:  39 [50.0%]  (fallthru)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

Successors:  52 [50.0%]  41 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 41 , prev 40, next 42, loop_depth 0, count 0, freq 6.
Predecessors:  40 [50.0%]  (fallthru)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  52 [73.0%]  42 [27.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 42 , prev 41, next 43, loop_depth 0, count 0, freq 2.
Predecessors:  41 [27.0%]  (fallthru)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

Successors:  46 [72.0%]  43 [28.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 43 , prev 42, next 44, loop_depth 0, count 0, freq 1.
Predecessors:  42 [28.0%]  (fallthru)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}

Successors:  53 [100.0%] 


Basic block 44 , prev 43, next 45, loop_depth 0, count 0, freq 58, maybe hot.
Predecessors:  38 [72.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  45 [28.0%]  (fallthru) 55 [72.0%] 
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 45 , prev 44, next 46, loop_depth 0, count 0, freq 16, maybe hot.
Predecessors:  44 [28.0%]  (fallthru)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

Successors:  46 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 46 , prev 45, next 47, loop_depth 0, count 0, freq 74, maybe hot.
Predecessors:  36 [72.0%]  45 [100.0%]  (fallthru) 42 [72.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  53 47 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 47 , prev 46, next 48, loop_depth 0, count 0, freq 86, maybe hot.
Predecessors:  46 [100.0%]  (fallthru)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

Successors:  48 [50.0%]  (fallthru) 53 [50.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 48 , prev 47, next 49, loop_depth 0, count 0, freq 43, maybe hot.
Predecessors:  47 [50.0%]  (fallthru)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 2 [r2]

Successors:  49 [50.0%]  (fallthru) 50 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 49 , prev 48, next 50, loop_depth 0, count 0, freq 22, maybe hot.
Predecessors:  48 [50.0%]  (fallthru)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

Successors:  50 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 50 , prev 49, next 51, loop_depth 0, count 0, freq 43, maybe hot.
Predecessors:  48 [50.0%]  49 [100.0%]  (fallthru)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

Successors:  54 [30.2%]  51 [69.8%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 51 , prev 50, next 52, loop_depth 0, count 0, freq 30, maybe hot.
Predecessors:  50 [69.8%]  (fallthru)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

Successors:  52 [50.0%]  (fallthru) 54 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 52 , prev 51, next 53, loop_depth 0, count 0, freq 36, maybe hot.
Predecessors:  51 [50.0%]  (fallthru) 41 [73.0%]  39 [50.0%]  40 [50.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  53 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 53 , prev 52, next 54, loop_depth 0, count 0, freq 42, maybe hot.
Predecessors:  46 47 [50.0%]  43 [100.0%]  52 [100.0%]  (fallthru) 55 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  54 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 144, should be 42

Basic block 54 , prev 53, next 55, loop_depth 0, count 0, freq 7288, maybe hot.
Predecessors:  5 [10.1%]  50 [30.2%]  34 [100.0%]  53 [100.0%]  (fallthru) 51 [50.0%]  4 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 7172, should be 7288

Basic block 55 , prev 54, next 1, loop_depth 0, count 0, freq 64, maybe hot.
Predecessors:  44 [72.0%]  37 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  53 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 1 , prev 55, loop_depth 0, count 0, freq 7288, maybe hot.
Predecessors:  54 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armpmu_event_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,38u} r1={29d,17u} r2={31d,22u} r3={43d,40u,1d} r4={20d,21u,2d} r5={2d,20u,5d} r6={8d,18u,1d} r7={5d,5u} r8={2d,3u,1d} r9={2d,3u} r10={2d,4u} r11={2d,3u} r12={16d,2u} r13={2d,72u} r14={15d,2u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={49d,37u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2120{1803d,307u,10e} in 211{197 regular + 14 call} insns.
(note 1 0 545 NOTE_INSN_DELETED)

(note 545 1 4 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 545 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 477 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 477 3 546 2 arch/arm/kernel/perf_event.c:544 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -48 [0xffffffffffffffd0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 0 r0))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 1 r1))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 2 r2))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 24 [0x18])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 28 [0x1c])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 32 [0x20])) [0 S4 A32])
                                (reg:SI 9 r9))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 36 [0x24])) [0 S4 A32])
                                (reg:SI 10 sl))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 40 [0x28])) [0 S4 A32])
                                (reg:SI 11 fp))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 44 [0x2c])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 546 477 478 2 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(note 478 546 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 478 547 2 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(note 547 6 2 2 ( event (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:163 event ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 2 547 7 2 arch/arm/kernel/perf_event.c:544 (set (reg/v/f:SI 5 r5 [orig:163 event ] [163])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 8 2 arch/arm/kernel/perf_event.c:547 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 548 2 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

(note 548 8 394 3 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:163 event ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 394 548 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 394 9 3 NOTE_INSN_DELETED)

(insn:TI 9 12 11 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 2 r2 [166])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 11 9 13 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [165])
        (ashift:SI (reg:SI 2 r2 [166])
            (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [166])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))
            (nil))))

(insn:TI 13 11 14 3 arch/arm/kernel/perf_event.c:547 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [165])
                        (const_int 25 [0x19]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [165])
        (nil)))

(jump_insn:TI 14 13 17 3 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 17 14 18 4 165 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 18 549 4 arch/arm/kernel/perf_event.c:554 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -2 [0xfffffffffffffffe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2 [0xfffffffffffffffe])
        (nil)))

(note 549 19 520 4 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 520 549 521 4 (set (pc)
        (label_ref 370)) -1 (nil))
;; End of basic block 4 -> ( 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  54 [100.0%] 

(barrier 521 520 550)

(note 550 521 22 5 ( err (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
(code_label 22 550 23 5 166 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 25 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 6 r6 [169])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 25 24 26 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 26 25 29 5 arch/arm/kernel/perf_event.c:557 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
        (nil)))

(insn:TI 29 26 551 5 arch/arm/kernel/perf_event.c:558 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -19 [0xffffffffffffffed]))) 2345 {neon_vornv2di+78} (nil))

(note 551 29 27 5 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 27 551 33 5 arch/arm/kernel/perf_event.c:557 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 5 -> ( 6 54)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  6 [89.9%]  (fallthru)
;; Succ edge  54 [10.1%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  5 [89.9%]  (fallthru)
(note 33 27 470 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 470 33 46 6 arch/arm/kernel/perf_event.c:560 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
        (nil)))

(insn 46 470 48 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 3 r3 [263])
        (reg/f:SI 6 r6 [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 48 46 35 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 2 r2 [264])
        (plus:SI (reg/f:SI 6 r6 [169])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn:TI 35 48 38 6 arch/arm/kernel/perf_event.c:560 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:163 event ] [163])
                (const_int 500 [0x1f4])) [0 <variable>.destroy+0 S4 A32])
        (reg/f:SI 1 r1 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [171])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:163 event ] [163])
            (expr_list:REG_EQUAL (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
                (nil)))))

(insn:TI 38 35 552 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:215 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru)

(note 552 38 553 7 ( err (nil)) NOTE_INSN_VAR_LOCATION)

(note 553 552 554 7 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 554 553 555 7 ( oldval (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:155 oldval ] [155])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 555 554 61 7 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:156 res ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 11) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%]  (dfs_back)
(code_label 61 555 39 7 172 "" [1 uses])

(note 39 61 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 7 -> ( 8 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [95.5%]  (fallthru)
;; Succ edge  12 [4.5%]  (loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  7 [95.5%]  (fallthru)
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 42 44 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:SI 1 r1 [orig:158 D.26586 ] [158])
        (plus:SI (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 44 43 51 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:117 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2611313)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  9 [86.0%]  (dfs_back)
(code_label 51 44 45 9 170 "" [1 uses])

(note 45 51 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 45 52 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (parallel [
            (set (reg/v:SI 12 ip [orig:156 res ] [156])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 0 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (reg/v:SI 0 r0 [orig:155 oldval ] [155])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 1 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 52 50 53 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:156 res ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:156 res ] [156])
        (nil)))

(jump_insn:TI 53 52 54 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 9 -> ( 9 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [86.0%]  (dfs_back)
;; Succ edge  10 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [14.0%]  (fallthru,loop_exit)
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 57 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:130 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2612977)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 57 55 58 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:155 oldval ] [155])
            (reg/v:SI 4 r4 [orig:157 c ] [157]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:157 c ] [157])
        (nil)))

(jump_insn:TI 58 57 59 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 224)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 10 -> ( 11 35)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  11 [86.0%]  (fallthru)
;; Succ edge  35 [14.0%]  (loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  10 [86.0%]  (fallthru)
(note 59 58 60 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 59 522 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:132 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (reg/v:SI 0 r0 [orig:155 oldval ] [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:155 oldval ] [155])
        (nil)))

(jump_insn 522 60 523 11 (set (pc)
        (label_ref 61)) -1 (nil))
;; End of basic block 11 -> ( 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (dfs_back)

(barrier 523 522 556)

(note 556 523 64 12 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:163 event ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [4.5%]  (loop_exit)
(code_label 64 556 65 12 169 "" [1 uses])

(note 65 64 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 68 65 557 12 arch/arm/kernel/perf_event.c:563 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(note 557 68 69 12 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 69 557 558 12 arch/arm/kernel/perf_event.c:563 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_lock") [flags 0x41] <function_decl 0x10d7c200 mutex_lock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 558 69 70 12 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(insn 70 558 71 12 arch/arm/kernel/perf_event.c:564 (set (reg:SI 3 r3 [orig:161 D.25549 ] [161])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))

(insn:TI 71 70 72 12 arch/arm/kernel/perf_event.c:564 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:161 D.25549 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:161 D.25549 ] [161])
        (nil)))

(jump_insn:TI 72 71 73 12 arch/arm/kernel/perf_event.c:564 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  33 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 73 72 74 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 74 73 77 13 arch/arm/kernel/perf_event.c:398 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 77 74 75 13 arch/arm/kernel/perf_event.c:398 (set (reg/f:SI 6 r6 [179])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 75 77 79 13 arch/arm/kernel/perf_event.c:398 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("reserve_pmu") [flags 0x41] <function_decl 0x1147bb00 reserve_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 79 75 78 13 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 78 79 80 13 arch/arm/kernel/perf_event.c:398 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])
        (nil)))

(jump_insn:TI 80 78 81 13 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 13 -> ( 14 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [0.0%]  (fallthru)
;; Succ edge  16 [100.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [0.0%]  (fallthru)
(note 81 80 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 81 84 14 arch/arm/kernel/perf_event.c:400 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)
        (nil)))

(call_insn:TI 84 83 86 14 arch/arm/kernel/perf_event.c:400 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 86 84 559 14 include/linux/err.h:29 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(note 559 86 560 14 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 560 559 87 14 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 87 560 88 14 arch/arm/kernel/perf_event.c:568 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 88 87 524 14 arch/arm/kernel/perf_event.c:568 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 216)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 14 -> ( 15 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 (fallthru)
;; Succ edge  34 [100.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}

;; Pred edge  14 (fallthru)
(note 524 88 525 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn 525 524 526 15 (set (pc)
        (label_ref 208)) -1 (nil))
;; End of basic block 15 -> ( 33)


;; Succ edge  33 [100.0%] 

(barrier 526 525 561)

(note 561 526 562 16 ( err (nil)) NOTE_INSN_VAR_LOCATION)

(note 562 561 92 16 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [100.0%] 
(code_label 92 562 93 16 174 "" [1 uses])

(note 93 92 94 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 93 95 16 arch/arm/kernel/perf_event.c:404 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:157 c ] [157])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 95 94 97 16 arch/arm/kernel/perf_event.c:404 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_pmu") [flags 0x41] <function_decl 0x1147bc00 init_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 97 95 98 16 arch/arm/kernel/perf_event.c:406 (set (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn:TI 98 97 563 16 arch/arm/kernel/perf_event.c:406 (set (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 563 98 99 16 ( plat (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 99 563 100 16 arch/arm/kernel/perf_event.c:407 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 100 99 101 16 arch/arm/kernel/perf_event.c:407 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [85.0%]  (fallthru)
;; Succ edge  18 [15.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  16 [85.0%]  (fallthru)
(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 102 101 564 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
        (mem/s/f/j:SI (reg/v/f:SI 2 r2 [orig:151 plat ] [151]) [0 <variable>.handle_irq+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 564 102 103 17 ( plat (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 103 564 106 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
        (nil)))

(insn:TI 106 103 565 17 arch/arm/kernel/perf_event.c:408 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
            (symbol_ref:SI ("armpmu_platform_irq") [flags 0x3] <function_decl 0x114a1e80 armpmu_platform_irq>))) 2345 {neon_vornv2di+78} (nil))

(note 565 106 104 17 ( handle_irq (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 104 565 566 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [15.0%]  (fallthru)
;; Succ edge  19 [85.0%] 

(note 566 104 109 18 ( plat (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7]
;; live  kill	

;; Pred edge  16 [15.0%] 
;; Pred edge  17 [15.0%]  (fallthru)
(code_label 109 566 110 18 176 "" [1 uses])

(note 110 109 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 111 110 567 18 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [184])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 567 111 112 18 ( plat (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 112 567 113 18 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 113 112 114 18 arch/arm/kernel/perf_event.c:410 (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  17 [85.0%] 
(code_label 114 113 115 19 177 "" [1 uses])

(note 115 114 116 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 116 115 117 19 arch/arm/kernel/perf_event.c:412 (set (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 117 116 118 19 arch/arm/kernel/perf_event.c:412 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
        (nil)))

(jump_insn:TI 118 117 119 19 arch/arm/kernel/perf_event.c:412 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 124)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 119 118 121 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 121 119 568 20 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 568 121 120 20 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 i ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 120 568 569 20 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(note 569 120 570 20 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 570 569 165 20 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 165 570 142 20 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 8 r8 [257])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 142 165 140 20 include/linux/interrupt.h:135 (set (reg:SI 10 sl [259])
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 140 142 527 20 include/linux/interrupt.h:135 (set (reg/f:SI 9 r9 [258])
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(jump_insn 527 140 528 20 (set (pc)
        (label_ref 162)) -1 (nil))
;; End of basic block 20 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 528 527 571)

(note 571 528 572 21 ( err (nil)) NOTE_INSN_VAR_LOCATION)

(note 572 571 573 21 ( i (nil)) NOTE_INSN_VAR_LOCATION)

(note 573 572 124 21 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  19 [0.0%] 
(code_label 124 573 125 21 178 "" [1 uses])

(note 125 124 127 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 127 125 129 21 arch/arm/kernel/perf_event.c:413 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)
        (nil)))

(insn 129 127 574 21 arch/arm/kernel/perf_event.c:414 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(note 574 129 575 21 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 575 574 128 21 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 128 575 529 21 arch/arm/kernel/perf_event.c:413 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 529 128 530 21 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 21 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 530 529 576)

(note 576 530 577 22 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 i ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 577 576 167 22 ( irq (expr_list:REG_DEP_TRUE (reg/v:SI 11 fp [orig:154 irq ] [154])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 26) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  26 [95.5%] 
(code_label 167 577 132 22 182 "" [1 uses])

(note 132 167 136 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 136 132 135 22 NOTE_INSN_DELETED)

(call_insn:TI 135 136 145 22 arch/arm/kernel/perf_event.c:418 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 145 135 146 22 include/linux/interrupt.h:135 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])) 167 {*arm_movsi_insn} (nil))

(insn:TI 146 145 410 22 include/linux/interrupt.h:135 (set (reg:SI 2 r2)
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 410 146 137 22 include/linux/interrupt.h:135 (set (reg:SI 3 r3)
        (const_int 2080 [0x820])) 167 {*arm_movsi_insn} (nil))

(insn:TI 137 410 138 22 arch/arm/kernel/perf_event.c:419 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 11 fp [orig:154 irq ] [154])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn:TI 138 137 139 22 arch/arm/kernel/perf_event.c:419 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 22 -> ( 25 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  25 [47.5%] 
;; Succ edge  23 [52.5%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  22 [52.5%]  (fallthru)
(note 139 138 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 149 139 141 23 NOTE_INSN_DELETED)

(insn:TI 141 149 143 23 include/linux/interrupt.h:135 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 9 r9 [258])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(insn:TI 143 141 148 23 include/linux/interrupt.h:135 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 148 143 150 23 include/linux/interrupt.h:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("request_threaded_irq") [flags 0x41] <function_decl 0x10cec680 request_threaded_irq>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 150 148 151 23 arch/arm/kernel/perf_event.c:425 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 151 150 152 23 arch/arm/kernel/perf_event.c:425 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [0.0%]  (fallthru,loop_exit)
;; Succ edge  25 [100.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  23 [0.0%]  (fallthru,loop_exit)
(note 152 151 155 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 155 152 154 24 arch/arm/kernel/perf_event.c:426 (set (reg:SI 1 r1)
        (reg/v:SI 11 fp [orig:154 irq ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 154 155 156 24 arch/arm/kernel/perf_event.c:426 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)
        (nil)))

(call_insn:TI 156 154 531 24 arch/arm/kernel/perf_event.c:426 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 531 156 532 24 (set (pc)
        (label_ref 175)) -1 (nil))
;; End of basic block 24 -> ( 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 532 531 159)

;; Start of basic block ( 22 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  22 [47.5%] 
;; Pred edge  23 [100.0%] 
(code_label 159 532 160 25 180 "" [2 uses])

(note 160 159 161 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 161 160 162 25 arch/arm/kernel/perf_event.c:417 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 25 20) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru,dfs_back)
;; Pred edge  20 [100.0%] 
(code_label 162 161 163 26 179 "" [1 uses])

(note 163 162 166 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 166 163 134 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
            (nil))))

(insn 134 166 133 26 arch/arm/kernel/perf_event.c:418 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (nil))

(insn:TI 133 134 168 26 arch/arm/kernel/perf_event.c:418 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 168 133 169 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 169 168 170 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:153 i ] [153])
            (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192])
        (nil)))

(jump_insn:TI 170 169 171 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 26 -> ( 22 27)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [95.5%] 
;; Succ edge  27 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [4.5%]  (fallthru,loop_exit)
(note 171 170 173 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 173 171 174 27 arch/arm/kernel/perf_event.c:432 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 174 173 175 27 arch/arm/kernel/perf_event.c:432 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 27 -> ( 28 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 27 24) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 175 174 176 28 181 "" [1 uses])

(note 176 175 177 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 177 176 578 28 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(note 578 177 401 28 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 401 578 579 28 (set (reg/f:SI 7 r7 [255])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 579 401 533 28 ( handle_irq (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 533 579 534 28 (set (pc)
        (label_ref 195)) -1 (nil))
;; End of basic block 28 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%] 

(barrier 534 533 197)

;; Start of basic block ( 31) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  31 [91.0%] 
(code_label 197 534 180 29 185 "" [1 uses])

(note 180 197 185 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 185 180 182 29 NOTE_INSN_DELETED)

(insn:TI 182 185 184 29 arch/arm/kernel/perf_event.c:434 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [255])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn:TI 184 182 406 29 arch/arm/kernel/perf_event.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 406 184 186 29 arch/arm/kernel/perf_event.c:436 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 186 406 187 29 arch/arm/kernel/perf_event.c:435 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (reg:SI 1 r1))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 187 186 188 29 arch/arm/kernel/perf_event.c:435 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  30 [52.5%]  (fallthru)
;; Succ edge  31 [47.5%]  (dfs_back)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  29 [52.5%]  (fallthru)
(note 188 187 191 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 191 188 195 30 arch/arm/kernel/perf_event.c:436 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 30 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 30 29 28) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  30 [100.0%]  (fallthru,dfs_back)
;; Pred edge  29 [47.5%]  (dfs_back)
;; Pred edge  28 [100.0%] 
(code_label 195 191 196 31 183 "" [2 uses])

(note 196 195 198 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 198 196 183 31 arch/arm/kernel/perf_event.c:433 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 183 198 194 31 arch/arm/kernel/perf_event.c:434 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:135 i.966 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 194 183 199 31 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 199 194 200 31 arch/arm/kernel/perf_event.c:433 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 31 -> ( 29 32)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  29 [91.0%] 
;; Succ edge  32 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  31 [9.0%]  (fallthru,loop_exit)
(note 200 199 201 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 201 200 202 32 arch/arm/kernel/perf_event.c:438 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 202 201 468 32 arch/arm/kernel/perf_event.c:438 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 468 202 469 32 arch/arm/kernel/perf_event.c:439 (set (reg/f:SI 3 r3 [254])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 469 468 205 32 arch/arm/kernel/perf_event.c:439 (set (reg:SI 2 r2 [195])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 205 469 535 32 arch/arm/kernel/perf_event.c:439 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [254])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 2 r2 [195])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [254])
        (expr_list:REG_DEAD (reg:SI 2 r2 [195])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(jump_insn 535 205 536 32 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 32 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 536 535 580)

(note 580 536 581 33 ( handle_irq (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 581 580 208 33 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 27 12 15) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  27 [50.0%] 
;; Pred edge  12 [71.0%] 
;; Pred edge  15 [100.0%] 
(code_label 208 581 209 33 173 "" [3 uses])

(note 209 208 210 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 209 212 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 3 r3 [196])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 212 210 214 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 2 r2 [198])
        (plus:SI (reg/f:SI 3 r3 [196])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn:TI 214 212 583 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (parallel [
            (set (reg/v:SI 1 r1 [orig:148 result ] [148])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (reg/v:SI 0 r0 [orig:147 tmp ] [147])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 3 r3 [196])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [198])
            (expr_list:REG_UNUSED (reg:QI 24 cc)
                (expr_list:REG_UNUSED (reg/v:SI 1 r1 [orig:148 result ] [148])
                    (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:147 tmp ] [147])
                        (nil)))))))

(note 583 214 582 33 ( result (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:148 result ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 582 583 215 33 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:147 tmp ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 215 582 584 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru)

(note 584 215 216 34 ( c (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 14 33 21 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [100.0%] 
;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
;; Pred edge  32 [100.0%] 
(code_label 216 584 217 34 175 "" [3 uses])

(note 217 216 220 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 220 217 585 34 arch/arm/kernel/perf_event.c:570 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(note 585 220 221 34 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 221 585 586 34 arch/arm/kernel/perf_event.c:570 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 586 221 222 34 ( result (nil)) NOTE_INSN_VAR_LOCATION)

(insn 222 586 223 34 arch/arm/kernel/perf_event.c:573 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 223 222 587 34 arch/arm/kernel/perf_event.c:573 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 34 -> ( 54 35)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  54 [100.0%] 
;; Succ edge  35 (fallthru)

(note 587 223 588 35 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 588 587 589 35 ( oldval (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:155 oldval ] [155])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 589 588 224 35 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:156 res ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 34 10) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  34 (fallthru)
;; Pred edge  10 [14.0%]  (loop_exit)
(code_label 224 589 225 35 171 "" [1 uses])

(note 225 224 226 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 226 225 227 35 arch/arm/kernel/perf_event.c:480 (set (reg:SI 3 r3 [orig:140 D.26654 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 227 226 228 35 arch/arm/kernel/perf_event.c:480 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 228 227 229 35 arch/arm/kernel/perf_event.c:480 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  36 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  35 [50.0%]  (fallthru)
(note 229 228 467 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 467 229 233 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [202])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 233 467 231 36 arch/arm/kernel/perf_event.c:160 (set (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(insn:TI 231 233 232 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [202]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 232 231 234 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
                (const_int 48 [0x30])) [0 <variable>.event_map+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 234 232 590 36 arch/arm/kernel/perf_event.c:160 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
            (nil))))

(note 590 234 466 36 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn 466 590 236 36 arch/arm/kernel/perf_event.c:161 (set (reg:SI 3 r3 [206])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn:TI 236 466 237 36 arch/arm/kernel/perf_event.c:161 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (reg:SI 3 r3 [206]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [206])
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
                (const_int 65535 [0xffff]))
            (nil))))

(jump_insn:TI 237 236 537 36 arch/arm/kernel/perf_event.c:161 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 36 -> ( 46 37)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [72.0%] 
;; Succ edge  37 [28.0%]  (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}

;; Pred edge  36 [28.0%]  (fallthru)
(note 537 237 538 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 538 537 539 37 (set (pc)
        (label_ref 439)) -1 (nil))
;; End of basic block 37 -> ( 55)


;; Succ edge  55 [100.0%] 

(barrier 539 538 591)

(note 591 539 241 38 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [50.0%] 
(code_label 241 591 242 38 186 "" [1 uses])

(note 242 241 243 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn:TI 243 242 244 38 arch/arm/kernel/perf_event.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 3 [0x3]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 244 243 245 38 arch/arm/kernel/perf_event.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 288)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 38 -> ( 39 44)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  39 [28.0%]  (fallthru)
;; Succ edge  44 [72.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  38 [28.0%]  (fallthru)
(note 245 244 398 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn:TI 398 245 247 39 arch/arm/kernel/perf_event.c:483 (set (reg:SI 2 r2 [orig:248 temp.969 ] [248])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 247 398 592 39 arch/arm/kernel/perf_event.c:137 (set (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
        (and:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(note 592 247 593 39 ( cache_type (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 593 592 248 39 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 248 593 249 39 arch/arm/kernel/perf_event.c:138 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
            (const_int 6 [0x6]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 249 248 250 39 arch/arm/kernel/perf_event.c:138 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 39 -> ( 52 40)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [50.0%] 
;; Succ edge  40 [50.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  39 [50.0%]  (fallthru)
(note 250 249 251 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(note 251 250 252 40 NOTE_INSN_DELETED)

(note 252 251 253 40 NOTE_INSN_DELETED)

(note 253 252 255 40 NOTE_INSN_DELETED)

(insn:TI 255 253 594 40 arch/arm/kernel/perf_event.c:141 (set (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(note 594 255 256 40 ( cache_op (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 256 594 257 40 arch/arm/kernel/perf_event.c:142 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 257 256 258 40 arch/arm/kernel/perf_event.c:142 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 40 -> ( 52 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  40 [50.0%]  (fallthru)
(note 258 257 259 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 259 258 260 41 NOTE_INSN_DELETED)

(note 260 259 261 41 NOTE_INSN_DELETED)

(note 261 260 263 41 NOTE_INSN_DELETED)

(insn:TI 263 261 595 41 arch/arm/kernel/perf_event.c:145 (set (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 16 [0x10]))) 124 {extzv_t2} (nil))

(note 595 263 264 41 ( cache_result (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 264 595 265 41 arch/arm/kernel/perf_event.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 265 264 266 41 arch/arm/kernel/perf_event.c:146 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
            (nil))))
;; End of basic block 41 -> ( 52 42)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [73.0%] 
;; Succ edge  42 [27.0%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  41 [27.0%]  (fallthru)
(note 266 265 271 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 271 266 273 42 NOTE_INSN_DELETED)

(note 273 271 272 42 NOTE_INSN_DELETED)

(insn:TI 272 273 465 42 arch/arm/kernel/perf_event.c:149 (set (reg:SI 3 r3 [218])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:140 D.26654 ] [140])
                (reg/v:SI 0 r0 [orig:145 cache_type ] [145]))
            (reg/v:SI 1 r1 [orig:144 cache_op ] [144]))) 40 {*mulsi3addsi_v6} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
        (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
            (nil))))

(insn:TI 465 272 596 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [213])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 596 465 268 42 ( cache_op (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 268 596 274 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [213]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 274 268 597 42 arch/arm/kernel/perf_event.c:149 (set (reg:SI 2 r2 [220])
        (plus:SI (mult:SI (reg:SI 3 r3 [218])
                (const_int 2 [0x2]))
            (reg/v:SI 2 r2 [orig:143 cache_result ] [143]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [218])
        (nil)))

(note 597 274 464 42 ( cache_result (nil)) NOTE_INSN_VAR_LOCATION)

(insn 464 597 269 42 arch/arm/kernel/perf_event.c:151 (set (reg:SI 3 r3 [221])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn:TI 269 464 598 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
                (const_int 44 [0x2c])) [0 <variable>.cache_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
        (nil)))

(note 598 269 275 42 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 275 598 599 42 arch/arm/kernel/perf_event.c:149 (set (reg/v:SI 4 r4 [orig:142 ret ] [142])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [220])
                    (const_int 4 [0x4]))
                (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])
        (expr_list:REG_DEAD (reg:SI 2 r2 [220])
            (nil))))

(note 599 275 600 42 ( err (nil)) NOTE_INSN_VAR_LOCATION)

(note 600 599 601 42 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:142 ret ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 601 600 277 42 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 277 601 280 42 arch/arm/kernel/perf_event.c:151 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
            (reg:SI 3 r3 [221]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [221])
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
                (const_int 65535 [0xffff]))
            (nil))))

(insn:TI 280 277 602 42 arch/arm/kernel/perf_event.c:152 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -2 [0xfffffffffffffffe]))) 2345 {neon_vornv2di+78} (nil))

(note 602 280 603 42 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 603 602 278 42 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 278 603 540 42 arch/arm/kernel/perf_event.c:151 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 42 -> ( 46 43)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [72.0%] 
;; Succ edge  43 [28.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}

;; Pred edge  42 [28.0%]  (fallthru)
(note 540 278 541 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(jump_insn 541 540 542 43 (set (pc)
        (label_ref 366)) -1 (nil))
;; End of basic block 43 -> ( 53)


;; Succ edge  53 [100.0%] 

(barrier 542 541 604)

(note 604 542 605 44 ( cache_type (nil)) NOTE_INSN_VAR_LOCATION)

(note 605 604 606 44 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 606 605 607 44 ( oldval (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:155 oldval ] [155])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 607 606 288 44 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:156 res ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 38) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  38 [72.0%] 
(code_label 288 607 289 44 189 "" [1 uses])

(note 289 288 290 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 290 289 291 44 arch/arm/kernel/perf_event.c:484 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 D.26654 ] [140])
        (nil)))

(jump_insn:TI 291 290 297 44 arch/arm/kernel/perf_event.c:484 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 439)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 44 -> ( 45 55)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  45 [28.0%]  (fallthru)
;; Succ edge  55 [72.0%] 

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  44 [28.0%]  (fallthru)
(note 297 291 463 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 463 297 300 45 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 300 463 608 45 arch/arm/kernel/perf_event.c:167 (set (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(note 608 300 609 45 ( err (nil)) NOTE_INSN_VAR_LOCATION)

(note 609 608 299 45 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 299 609 301 45 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 301 299 302 45 arch/arm/kernel/perf_event.c:167 (set (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
                (const_int 52 [0x34])) [0 <variable>.raw_event_mask+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 302 301 610 45 arch/arm/kernel/perf_event.c:167 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (and:SI (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
            (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225])
        (nil)))
;; End of basic block 45 -> ( 46)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [100.0%]  (fallthru)

(note 610 302 611 46 ( err (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:160 err ] [160])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 611 610 303 46 ( cache_type (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 36 45 42) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  36 [72.0%] 
;; Pred edge  45 [100.0%]  (fallthru)
;; Pred edge  42 [72.0%] 
(code_label 303 611 304 46 187 "" [2 uses])

(note 304 303 305 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn:TI 305 304 306 46 arch/arm/kernel/perf_event.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 306 305 307 46 arch/arm/kernel/perf_event.c:491 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 366)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 46 -> ( 53 47)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  53
;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
(note 307 306 310 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(note 310 307 311 47 NOTE_INSN_DELETED)

(note 311 310 312 47 NOTE_INSN_DELETED)

(note 312 311 308 47 NOTE_INSN_DELETED)

(insn:TI 308 312 313 47 arch/arm/kernel/perf_event.c:502 (set (reg:SI 3 r3 [227])
        (zero_extend:SI (mem/s:QI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                    (const_int 160 [0xa0])) [0 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 313 308 316 47 arch/arm/kernel/perf_event.c:502 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [227])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [230])
                (and:SI (reg:SI 3 r3 [227])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 316 313 314 47 arch/arm/kernel/perf_event.c:506 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -1 [0xffffffffffffffff]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 314 316 320 47 arch/arm/kernel/perf_event.c:502 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 366)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 47 -> ( 48 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  48 [50.0%]  (fallthru)
;; Succ edge  53 [50.0%] 

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 2 [r2]

;; Pred edge  47 [50.0%]  (fallthru)
(note 320 314 334 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 334 320 329 48 NOTE_INSN_DELETED)

(insn:TI 329 334 462 48 arch/arm/kernel/perf_event.c:527 (set (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])
        (nil)))

(insn 462 329 612 48 arch/arm/kernel/perf_event.c:515 (set (reg:SI 0 r0 [231])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(note 612 462 613 48 ( cache_type (nil)) NOTE_INSN_VAR_LOCATION)

(note 613 612 333 48 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 333 613 322 48 arch/arm/kernel/perf_event.c:527 (set (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])
        (nil)))

(insn:TI 322 333 473 48 arch/arm/kernel/perf_event.c:515 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg:SI 0 r0 [231])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [231])
        (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
            (nil))))

(insn 473 322 335 48 arch/arm/kernel/perf_event.c:524 (set (reg:SI 0 r0 [232])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 335 473 323 48 arch/arm/kernel/perf_event.c:527 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
                        (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
            (expr_list:REG_UNUSED (reg:SI 2 r2)
                (nil)))))

(insn 323 335 474 48 arch/arm/kernel/perf_event.c:523 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 216 [0xd8])) [0 <variable>.hw.D.23168.D.23159.config_base+0 S4 A64])
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn:TI 474 323 327 48 arch/arm/kernel/perf_event.c:524 (set (reg:SI 1 r1 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 327 474 325 48 arch/arm/kernel/perf_event.c:525 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 220 [0xdc])) [0 <variable>.hw.D.23168.D.23159.event_base+0 S4 A32])
        (reg:SI 3 r3 [230])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [230])
        (nil)))

(insn:TI 325 327 336 48 arch/arm/kernel/perf_event.c:524 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 200 [0xc8])) [0 <variable>.hw.D.23168.D.23159.config+0 S8 A64])
        (reg:DI 0 r0 [232])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 336 325 337 48 arch/arm/kernel/perf_event.c:527 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 348)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 48 -> ( 49 50)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  49 [50.0%]  (fallthru)
;; Succ edge  50 [50.0%] 

;; Start of basic block ( 48) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  48 [50.0%]  (fallthru)
(note 337 336 460 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn:TI 460 337 459 49 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [240])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 459 460 346 49 arch/arm/kernel/perf_event.c:528 (set (reg:SI 0 r0 [234])
        (const_int 288 [0x120])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 288 [0x120])
        (nil)))

(insn:TI 346 459 339 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 1 r1 [245])
        (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
            (const_int 304 [0x130]))) 4 {*arm_addsi3} (nil))

(insn:TI 339 346 340 49 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [240]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 340 339 342 49 arch/arm/kernel/perf_event.c:528 (set (reg:DI 2 r2 [orig:141 D.26647 ] [141])
        (mem/s/j:DI (plus:SI (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 342 340 458 49 arch/arm/kernel/perf_event.c:528 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [234])) [0 <variable>.hw.sample_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (nil))

(insn 458 342 344 49 arch/arm/kernel/perf_event.c:529 (set (reg:SI 0 r0 [243])
        (plus:SI (reg:SI 0 r0 [243])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn:TI 344 458 347 49 arch/arm/kernel/perf_event.c:529 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [243])) [0 <variable>.hw.last_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:SI 0 r0 [243])
        (nil)))

(insn:TI 347 344 614 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:146 tmp ] [146])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (reg:SI 1 r1 [0]) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [245])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))
;; End of basic block 49 -> ( 50)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  50 [100.0%]  (fallthru)

(note 614 347 615 50 ( tmp (expr_list:REG_DEP_TRUE (reg/v:DI 6 r6 [orig:146 tmp ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 615 614 616 50 ( i (nil)) NOTE_INSN_VAR_LOCATION)

(note 616 615 348 50 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 i ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 48 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  48 [50.0%] 
;; Pred edge  49 [100.0%]  (fallthru)
(code_label 348 616 349 50 195 "" [1 uses])

(note 349 348 350 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn:TI 350 349 351 50 arch/arm/kernel/perf_event.c:534 (set (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])
        (nil)))

(insn:TI 351 350 354 50 arch/arm/kernel/perf_event.c:534 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
            (reg/v/f:SI 5 r5 [orig:163 event ] [163]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
        (nil)))

(insn:TI 354 351 352 50 arch/arm/kernel/perf_event.c:534 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 352 354 358 50 arch/arm/kernel/perf_event.c:534 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 50 -> ( 54 51)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  54 [30.2%] 
;; Succ edge  51 [69.8%]  (fallthru)

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  50 [69.8%]  (fallthru)
(note 358 352 361 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(note 361 358 359 51 NOTE_INSN_DELETED)

(insn:TI 359 361 360 51 arch/arm/kernel/perf_event.c:535 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 360 359 617 51 arch/arm/kernel/perf_event.c:535 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_group") [flags 0x3] <function_decl 0x114a1d80 validate_group>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 617 360 362 51 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 362 617 363 51 arch/arm/kernel/perf_event.c:536 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 363 362 618 51 arch/arm/kernel/perf_event.c:536 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 51 -> ( 52 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  52 [50.0%]  (fallthru)
;; Succ edge  54 [50.0%] 

(note 618 363 619 52 ( cache_type (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 619 618 620 52 ( cache_op (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 620 619 621 52 ( cache_result (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 621 620 622 52 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 622 621 486 52 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:156 res ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 51 41 39 40) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  51 [50.0%]  (fallthru)
;; Pred edge  41 [73.0%] 
;; Pred edge  39 [50.0%] 
;; Pred edge  40 [50.0%] 
(code_label 486 622 364 52 200 "" [3 uses])

(note 364 486 365 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn:TI 365 364 623 52 arch/arm/kernel/perf_event.c:537 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 52 -> ( 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  53 [100.0%]  (fallthru)

(note 623 365 624 53 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(note 624 623 366 53 ( oldval (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:155 oldval ] [155])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 46 47 43 52 55) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  46
;; Pred edge  47 [50.0%] 
;; Pred edge  43 [100.0%] 
;; Pred edge  52 [100.0%]  (fallthru)
;; Pred edge  55 [100.0%] 
(code_label 366 624 367 53 192 "" [4 uses])

(note 367 366 368 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn:TI 368 367 625 53 arch/arm/kernel/perf_event.c:578 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(note 625 368 626 53 ( cache_type (nil)) NOTE_INSN_VAR_LOCATION)

(note 626 625 369 53 ( oldval (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 369 626 629 53 arch/arm/kernel/perf_event.c:578 (parallel [
            (call (mem:SI (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 629 369 628 53 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(note 628 629 627 53 ( cache_result (nil)) NOTE_INSN_VAR_LOCATION)

(note 627 628 630 53 ( cache_op (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 53 -> ( 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  54 [100.0%]  (fallthru)

(note 630 627 631 54 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:156 res ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 631 630 370 54 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:163 event ] [163])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 50 34 53 51 4) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [10.1%] 
;; Pred edge  50 [30.2%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  53 [100.0%]  (fallthru)
;; Pred edge  51 [50.0%] 
;; Pred edge  4 [100.0%] 
(code_label 370 631 371 54 167 "" [5 uses])

(note 371 370 386 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn:TI 386 371 392 54 arch/arm/kernel/perf_event.c:581 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 392 386 479 54 arch/arm/kernel/perf_event.c:581 (use (reg/i:SI 0 r0)) -1 (nil))

(note 479 392 480 54 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 480 479 481 54 arch/arm/kernel/perf_event.c:581 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 54 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 481 480 632)

(note 632 481 633 55 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(note 633 632 634 55 ( c (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:157 c ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 634 633 439 55 ( oldval (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:155 oldval ] [155])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 44 37) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  44 [72.0%] 
;; Pred edge  37 [100.0%] 
(code_label 439 634 376 55 199 "" [2 uses])

(note 376 439 377 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn:TI 377 376 635 55 arch/arm/kernel/perf_event.c:161 discrim 2 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -95 [0xffffffffffffffa1])) 167 {*arm_movsi_insn} (nil))

(note 635 377 543 55 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 543 635 544 55 (set (pc)
        (label_ref 366)) -1 (nil))
;; End of basic block 55 -> ( 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  53 [100.0%] 

(barrier 544 543 471)

(note 471 544 0 NOTE_INSN_DELETED)


;; Function armv7pmu_stop (armv7pmu_stop)[0:1349]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 8


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={5d,2u} r4={1d,2u} r12={2d} r13={2d,5u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 262{246d,16u,0e} in 11{9 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 14 2 NOTE_INSN_DELETED)

(note 14 6 15 2 NOTE_INSN_DELETED)

(note 15 14 28 2 NOTE_INSN_DELETED)

(insn/f:TI 28 15 29 2 arch/arm/kernel/perf_event_v7.c:1119 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 29 28 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 29 8 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 9 8 32 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 32 9 10 2 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:134 flags ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 32 33 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(note 33 10 11 2 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 33 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 12 11 34 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (and:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 62 [0x3e]))) 67 {*arm_andsi3_insn} (nil))

(note 34 12 13 2 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 34 16 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [137])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(insn:TI 16 13 30 2 arch/arm/kernel/perf_event_v7.c:1125 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 30 16 31 2 NOTE_INSN_EPILOGUE_BEG)

(insn 31 30 18 2 arch/arm/kernel/perf_event_v7.c:1126 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 18 31 35 2 arch/arm/kernel/perf_event_v7.c:1125 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 35 18 19 2 ( flags (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 19 35 27)

(note 27 19 0 NOTE_INSN_DELETED)


;; Function armv7pmu_start (armv7pmu_start)[0:1348]


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 8


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={6d,3u} r4={1d,2u} r12={2d} r13={2d,5u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 264{247d,17u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 15 2 NOTE_INSN_DELETED)

(note 15 6 16 2 NOTE_INSN_DELETED)

(note 16 15 29 2 NOTE_INSN_DELETED)

(insn/f:TI 29 16 30 2 arch/arm/kernel/perf_event_v7.c:1109 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 30 29 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 30 8 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1112 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 9 8 33 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 33 9 10 2 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:134 flags ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 33 34 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(note 34 10 11 2 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 34 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 12 11 35 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (ior:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(note 35 12 13 2 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 35 14 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (and:SI (reg:SI 3 r3 [137])
            (const_int 63 [0x3f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 14 13 17 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (nil)))

(insn:TI 17 14 31 2 arch/arm/kernel/perf_event_v7.c:1115 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 31 17 32 2 NOTE_INSN_EPILOGUE_BEG)

(insn 32 31 19 2 arch/arm/kernel/perf_event_v7.c:1116 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 19 32 36 2 arch/arm/kernel/perf_event_v7.c:1115 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 36 19 20 2 ( flags (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 36 28)

(note 28 20 0 NOTE_INSN_DELETED)


;; Function armv7pmu_disable_event (armv7pmu_disable_event)[0:1346]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: hwc+0
Reg 1: idx+0
Variables:
  name: hwc
    offset 0
      (reg:SI 0 r0 [ hwc ])
  name: idx
    offset 0
      (reg:SI 1 r1 [ idx ])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 3:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 4:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 5:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 6:
IN:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 7:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])


Basic block 8:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0 val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: val+0 idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 9:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0 val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: val+0 idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 10:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0 val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: val+0 idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


Basic block 11:
IN:
Stack adjustment: 16
Reg 4: idx+0 val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])


Basic block 12:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])

OUT:
Stack adjustment: 16
Reg 3: val+0
Reg 4: val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])


Basic block 13:
IN:
Stack adjustment: 16
Reg 3: val+0
Reg 4: idx+0 val+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])

OUT:
Stack adjustment: 16
Reg 4: val+0 idx+0
Reg 5: flags+0
Variables:
  name: val
    offset 0
      (reg/v:SI 4 r4 [orig:133 val ] [133])
  name: flags
    offset 0
      (reg/v:SI 5 r5 [orig:138 flags ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:140 idx ] [140])


14 basic blocks, 19 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [28.0%]  3 [72.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  2 [72.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  5 [0.0%]  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  3 [100.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [0.0%]  (fallthru) 6 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 6.
Predecessors:  3 [0.0%]  4 [0.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  8 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 7196, maybe hot.
Predecessors:  4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 9994, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 2 [28.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

Successors:  12 [28.0%]  8 [72.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  7 [72.0%]  (fallthru) 5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  10 [0.0%]  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  8 [100.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  10 [0.0%]  (fallthru) 11 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 6.
Predecessors:  8 [0.0%]  9 [0.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  13 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 7196, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

Successors:  12 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 9994, maybe hot.
Predecessors:  11 [100.0%]  (fallthru) 7 [28.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  13 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 13 , prev 12, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  12 [100.0%]  (fallthru) 10 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 13, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  13 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_disable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={10d,5u} r3={20d,15u,1d} r4={5d,14u,1d} r5={2d,3u} r6={2d,4u} r12={4d} r13={2d,20u} r14={4d,3u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={9d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 598{515d,81u,2e} in 54{50 regular + 4 call} insns.
(note 1 0 131 NOTE_INSN_DELETED)

(note 131 1 132 2 ( hwc (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ hwc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 132 131 5 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 132 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 119 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 119 4 120 2 arch/arm/kernel/perf_event_v7.c:1024 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 120 119 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 120 3 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/f:SI 6 r6 [141])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 3 7 9 2 arch/arm/kernel/perf_event_v7.c:1024 (set (reg/v:SI 4 r4 [orig:140 idx ] [140])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ idx ])
        (nil)))

(insn:TI 9 3 133 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 6 r6 [141])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 133 9 10 2 ( hwc (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 10 133 134 2 arch/arm/kernel/perf_event_v7.c:1030 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 134 10 13 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 13 134 16 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 13 135 2 arch/arm/kernel/perf_event_v7.c:885 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:135 val ] [135])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(note 135 16 11 2 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 135 136 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/v:SI 5 r5 [orig:138 flags ] [138])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 136 11 14 2 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 flags ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 14 136 20 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  7 [28.0%] 
;; Succ edge  3 [72.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 20 14 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 22 20 23 3 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 23 22 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 137 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [141]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(note 137 25 26 4 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 26 137 27 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 26 28 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 28 27 29 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [145])
        (nil)))

(jump_insn:TI 29 28 138 4 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

(note 138 29 30 5 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 30 138 31 5 214 "" [1 uses])

(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 34 31 117 5 NOTE_INSN_DELETED)

(insn:TI 117 34 36 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 117 112 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn:TI 112 36 139 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 139 112 38 5 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 38 139 113 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 113 38 37 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 113 39 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [148])
        (nil)))

(call_insn:TI 39 37 127 5 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 127 39 128 5 (set (pc)
        (label_ref 56)) -1 (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 128 127 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 42 128 43 6 215 "" [1 uses])

(note 43 42 115 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 115 43 44 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [151])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 44 115 46 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 46 44 140 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [151])
            (reg:SI 3 r3 [150]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [151])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [150]))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 140 46 47 7 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [28.0%] 
(code_label 47 140 48 7 213 "" [1 uses])

(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:135 val ] [135])
        (nil)))

(insn:TI 50 49 53 7 arch/arm/kernel/perf_event_v7.c:919 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 53 50 141 7 arch/arm/kernel/perf_event_v7.c:927 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:133 val ] [133])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(note 141 53 142 7 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 142 141 51 7 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 51 142 143 7 arch/arm/kernel/perf_event_v7.c:919 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2802 [0xaf2])
            (nil))))
;; End of basic block 7 -> ( 12 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [28.0%] 
;; Succ edge  8 [72.0%]  (fallthru)

(note 143 51 56 8 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 56 143 57 8 216 "" [1 uses])

(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 57 59 8 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 59 58 60 8 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [0.0%] 
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 144 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 144 61 62 9 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 62 144 63 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 63 62 64 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 64 63 65 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 65 64 66 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [154]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [154])
        (nil)))

(jump_insn:TI 66 65 145 9 arch/arm/kernel/perf_event_v7.c:920 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

(note 145 66 67 10 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [0.0%] 
;; Pred edge  9 [0.0%]  (fallthru)
(code_label 67 145 68 10 218 "" [1 uses])

(note 68 67 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 71 68 118 10 NOTE_INSN_DELETED)

(insn:TI 118 71 73 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 73 118 110 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)
        (nil)))

(insn:TI 110 73 146 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 146 110 75 10 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 75 146 111 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 111 75 74 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 3 r3 [157])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 74 111 76 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [157])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [157])
        (nil)))

(call_insn:TI 76 74 129 10 arch/arm/kernel/perf_event_v7.c:921 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 129 76 130 10 (set (pc)
        (label_ref 87)) -1 (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 130 129 79)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  9 [100.0%] 
(code_label 79 130 80 11 219 "" [1 uses])

(note 80 79 114 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 114 80 81 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 3 r3 [160])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 81 114 147 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 4 r4 [159])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(note 147 81 148 11 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 148 147 83 11 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 83 148 149 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg/v:SI 4 r4 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [160])
            (reg:SI 4 r4 [159]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [160])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 4 r4 [159]))
            (nil))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

(note 149 83 150 12 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 150 149 84 12 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  7 [28.0%] 
(code_label 84 150 85 12 217 "" [1 uses])

(note 85 84 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 151 12 arch/arm/kernel/perf_event_v7.c:931 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 2") ("") 0 [
            (reg/v:SI 4 r4 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8925138) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

(note 151 86 87 13 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 87 151 88 13 220 "" [1 uses])

(note 88 87 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 92 88 91 13 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:138 flags ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 91 92 121 13 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 121 91 122 13 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 122 121 93 13 arch/arm/kernel/perf_event_v7.c:1043 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 93 122 152 13 arch/arm/kernel/perf_event_v7.c:1042 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 152 93 94 13 ( val (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 13 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 94 152 116)

(note 116 94 0 NOTE_INSN_DELETED)


;; Function armv7pmu_reset (armv7pmu_reset)[0:1351]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: info+0
Variables:
  name: info
    offset 0
      (reg:SI 0 r0 [ info ])

OUT:
Stack adjustment: 16
Reg 0: info+0
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: info
    offset 0
      (reg:SI 0 r0 [ info ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 3:
IN:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: info+0
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: info
    offset 0
      (reg:SI 0 r0 [ info ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 5:
IN:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Reg 5: nb_cnt+0
Variables:
  name: nb_cnt
    offset 0
      (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


6 basic blocks, 6 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

Successors:  4 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9100, maybe hot.
Predecessors:  4 [91.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

Successors:  3 [91.0%]  5 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  4 [9.0%]  (fallthru,loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 5, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r3={5d,3u} r4={3d,5u} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,7u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 161{136d,25u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 48 NOTE_INSN_DELETED)

(note 48 1 4 2 ( info (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ info ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 48 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 37 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 37 3 39 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 39 37 40 2 arch/arm/kernel/perf_event_v7.c:1155 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 40 39 9 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 9 40 49 2 arch/arm/kernel/perf_event_v7.c:1159 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(note 49 9 7 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:134 idx ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 7 49 8 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 8 7 50 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (nil)))

(note 50 8 46 2 ( nb_cnt (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 46 50 47 2 arch/arm/kernel/perf_event_v7.c:1159 (set (pc)
        (label_ref 17)) -1 (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 47 46 51)

(note 51 47 19 3 ( info (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 19 51 12 3 226 "" [1 uses])

(note 12 19 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 15 12 52 3 arch/arm/kernel/perf_event_v7.c:1160 (parallel [
            (call (mem:SI (symbol_ref:SI ("armv7pmu_disable_event") [flags 0x3] <function_decl 0x1150d880 armv7pmu_disable_event>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

(note 52 15 17 4 ( info (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ info ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 17 52 18 4 225 "" [1 uses])

(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 14 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(insn 14 20 33 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 14 53 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 53 33 16 4 ( info (nil)) NOTE_INSN_VAR_LOCATION)

(insn 16 53 21 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 2 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 21 16 22 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 5 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 24 23 25 5 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn:TI 25 24 41 5 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (nil)))

(note 41 25 42 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 42 41 43 5 arch/arm/kernel/perf_event_v7.c:1164 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 42 36)

(note 36 43 38 NOTE_INSN_DELETED)

(note 38 36 0 NOTE_INSN_DELETED)


;; Function armv7pmu_enable_event (armv7pmu_enable_event)[0:1345]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: hwc+0
Reg 1: idx+0
Variables:
  name: hwc
    offset 0
      (reg:SI 0 r0 [ hwc ])
  name: idx
    offset 0
      (reg:SI 1 r1 [ idx ])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 3:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 4:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 5:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 6:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 7:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 8:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 9:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 10:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 11:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 12:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 13:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 14:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 15:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:138 val ] [138])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 16:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])


Basic block 17:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 18:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 19:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])


Basic block 20:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])


Basic block 21:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0 val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: val+0 idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])


Basic block 22:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0 val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: val+0 idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])


Basic block 23:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0 val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: val+0 idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])


Basic block 24:
IN:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: idx+0 val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])


Basic block 25:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])

OUT:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])


Basic block 26:
IN:
Stack adjustment: 24
Reg 3: val+0
Reg 4: idx+0
Reg 5: idx+0 val+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: val
    offset 0
      (reg/v:SI 3 r3 [orig:135 val ] [135])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])

OUT:
Stack adjustment: 24
Reg 4: idx+0
Reg 5: val+0 idx+0
Reg 6: flags+0
Reg 7: hwc+0
Variables:
  name: flags
    offset 0
      (reg/v:SI 6 r6 [orig:141 flags ] [141])
  name: idx
    offset 0
      (reg/v:SI 5 r5 [orig:140 idx ] [140])
  name: hwc
    offset 0
      (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:144 idx ] [144])
  name: val
    offset 0
      (reg/v:SI 5 r5 [orig:133 val ] [133])


27 basic blocks, 39 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [28.0%]  3 [72.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  2 [72.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  5 [0.0%]  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  3 [100.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [0.0%]  (fallthru) 6 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 6.
Predecessors:  3 [0.0%]  4 [0.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  8 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 7196, maybe hot.
Predecessors:  4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 9994, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 2 [28.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  8 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  (fallthru) 5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  9 [72.0%]  (fallthru) 15 [28.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  8 [72.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 7 [r7] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7]
;; live  kill	

Successors:  11 [0.0%]  10 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  9 [100.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  11 [0.0%]  (fallthru) 12 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 6.
Predecessors:  9 [0.0%]  10 [0.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

Successors:  13 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 7194, maybe hot.
Predecessors:  10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  13 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  12 [100.0%]  (fallthru) 11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  14 [28.0%]  (fallthru) 15 [72.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 2016, maybe hot.
Predecessors:  13 [28.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

Successors:  17 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 7984, maybe hot.
Predecessors:  8 [28.0%]  13 [72.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  20 [35.1%]  16 [64.9%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 5184, maybe hot.
Predecessors:  15 [64.9%]  (fallthru)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  18 [0.1%]  17 [99.9%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  16 [99.9%]  (fallthru) 14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  18 [0.0%]  (fallthru) 19 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 6.
Predecessors:  16 [0.1%]  17 [0.0%]  (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  21 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 7196, maybe hot.
Predecessors:  17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  20 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 9994, maybe hot.
Predecessors:  19 [100.0%]  (fallthru) 15 [35.1%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

Successors:  25 [28.0%]  21 [72.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  20 [72.0%]  (fallthru) 18 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  23 [0.0%]  22 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 7197, maybe hot.
Predecessors:  21 [100.0%]  (fallthru)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  23 [0.0%]  (fallthru) 24 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 6.
Predecessors:  21 [0.0%]  22 [0.0%]  (fallthru)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  26 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 0, count 0, freq 7196, maybe hot.
Predecessors:  22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

Successors:  25 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 25 , prev 24, next 26, loop_depth 0, count 0, freq 9994, maybe hot.
Predecessors:  24 [100.0%]  (fallthru) 20 [28.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  26 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 26 , prev 25, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  25 [100.0%]  (fallthru) 23 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 1 , prev 26, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  26 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_enable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,8u} r1={12d,7u} r2={17d,10u} r3={39d,32u,2d} r4={3d,11u} r5={5d,15u,1d} r6={2d,3u} r7={4d,5u} r8={2d,4u} r12={6d} r13={2d,37u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,16u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 941{787d,151u,3e} in 106{100 regular + 6 call} insns.
(note 1 0 241 NOTE_INSN_DELETED)

(note 241 1 242 2 ( hwc (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ hwc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 242 241 5 2 ( idx (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ idx ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 242 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 217 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 217 4 218 2 arch/arm/kernel/perf_event_v7.c:989 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 218 217 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 218 2 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/f:SI 8 r8 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 2 7 3 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
        (reg:SI 0 r0 [ hwc ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ hwc ])
        (nil)))

(insn 3 2 9 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 3 243 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 8 r8 [145])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 243 9 12 2 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 12 243 244 2 arch/arm/kernel/perf_event_v7.c:1001 (set (reg/v:SI 5 r5 [orig:140 idx ] [140])
        (reg:SI 1 r1 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:144 idx ] [144])
        (nil)))

(note 244 12 10 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 10 244 245 2 arch/arm/kernel/perf_event_v7.c:996 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 245 10 13 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:144 idx ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 13 245 16 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 13 246 2 arch/arm/kernel/perf_event_v7.c:885 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:138 val ] [138])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(note 246 16 11 2 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:138 val ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 246 247 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/v:SI 6 r6 [orig:141 flags ] [141])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 247 11 14 2 ( flags (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:141 flags ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 14 247 20 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  7 [28.0%] 
;; Succ edge  3 [72.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 20 14 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 22 20 23 3 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 23 22 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 248 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(note 248 25 26 4 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 26 248 27 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 26 28 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [149])
        (plus:SI (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 28 27 29 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (nil)))

(jump_insn:TI 29 28 249 4 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

(note 249 29 30 5 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:138 val ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 30 249 31 5 233 "" [1 uses])

(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 34 31 213 5 NOTE_INSN_DELETED)

(insn:TI 213 34 36 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 213 207 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn:TI 207 36 250 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 250 207 38 5 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 38 250 208 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 208 38 37 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 3 r3 [152])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 208 39 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [152])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [152])
        (nil)))

(call_insn:TI 39 37 231 5 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 231 39 232 5 (set (pc)
        (label_ref 50)) -1 (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 232 231 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 42 232 43 6 234 "" [1 uses])

(note 43 42 211 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 211 43 44 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [155])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 44 211 46 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [154])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 46 44 251 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:138 val ] [138])
        (ashift:SI (reg:SI 2 r2 [155])
            (reg:SI 3 r3 [154]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [155])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [154]))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 251 46 47 7 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:138 val ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [28.0%] 
(code_label 47 251 48 7 232 "" [1 uses])

(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:138 val ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 50 49 51 8 235 "" [1 uses])

(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 53 8 arch/arm/kernel/perf_event_v7.c:1007 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 53 52 54 8 arch/arm/kernel/perf_event_v7.c:1007 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 8 -> ( 9 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  9 [72.0%]  (fallthru)
;; Succ edge  15 [28.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 7 [r7] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  8 [72.0%]  (fallthru)
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 252 9 arch/arm/kernel/perf_event_v7.c:1008 (set (reg:SI 7 r7 [orig:142 D.25960 ] [142])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(note 252 55 57 9 ( hwc (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 57 252 58 9 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 65)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [0.0%] 
;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 59 58 253 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 253 59 60 10 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 60 253 61 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [156]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 61 60 62 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 61 63 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [158])
        (plus:SI (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 63 62 64 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [158]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [158])
        (nil)))

(jump_insn:TI 64 63 254 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

(note 254 64 65 11 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:138 val ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%] 
;; Pred edge  10 [0.0%]  (fallthru)
(code_label 65 254 66 11 237 "" [1 uses])

(note 66 65 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 69 66 214 11 NOTE_INSN_DELETED)

(insn:TI 214 69 71 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 71 214 205 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn:TI 205 71 255 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 255 205 73 11 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 73 255 206 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (nil)))

(insn:TI 206 73 75 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 3 r3 [161])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 75 206 72 11 arch/arm/kernel/perf_event_v7.c:803 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn:TI 72 75 74 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [161])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [161])
        (nil)))

(call_insn:TI 74 72 233 11 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 233 74 234 11 (set (pc)
        (label_ref 84)) -1 (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 234 233 78)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 78 234 79 12 238 "" [1 uses])

(note 79 78 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 80 79 81 12 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [163])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 81 80 82 12 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [164])
        (and:SI (reg:SI 3 r3 [163])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 82 81 83 12 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 3 r3 [164])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (nil))

(insn:TI 83 82 84 12 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 84 83 85 13 239 "" [1 uses])

(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 87 13 arch/arm/kernel/perf_event_v7.c:845 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg/v:SI 5 r5 [orig:140 idx ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 87 86 88 13 arch/arm/kernel/perf_event_v7.c:845 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  13 [28.0%]  (fallthru)
(note 88 87 89 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 89 88 90 14 arch/arm/kernel/perf_event_v7.c:847 (set (reg:SI 7 r7 [165])
        (and:SI (reg:SI 7 r7 [orig:142 D.25960 ] [142])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 90 89 235 14 arch/arm/kernel/perf_event_v7.c:847 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 1") ("") 0 [
            (reg:SI 7 r7 [165])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8914387) -1 (nil))

(jump_insn 235 90 236 14 (set (pc)
        (label_ref 105)) -1 (nil))
;; End of basic block 14 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 236 235 256)

(note 256 236 257 15 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:138 val ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 257 256 93 15 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [28.0%] 
;; Pred edge  13 [72.0%] 
(code_label 93 257 94 15 236 "" [2 uses])

(note 94 93 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 95 94 98 15 arch/arm/kernel/perf_event_v7.c:898 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 98 95 258 15 arch/arm/kernel/perf_event_v7.c:906 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:135 val ] [135])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(note 258 98 259 15 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(note 259 258 96 15 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 96 259 102 15 arch/arm/kernel/perf_event_v7.c:898 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3507 [0xdb3])
        (nil)))
;; End of basic block 15 -> ( 20 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  20 [35.1%] 
;; Succ edge  16 [64.9%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [64.9%]  (fallthru)
(note 102 96 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 104 102 105 16 arch/arm/kernel/perf_event_v7.c:898 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6 [0x6])
            (nil))))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [0.1%] 
;; Succ edge  17 [99.9%]  (fallthru)

;; Start of basic block ( 16 14) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [99.9%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 105 104 106 17 240 "" [1 uses])

(note 106 105 107 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 106 260 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [166])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 260 107 108 17 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 108 260 109 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [166]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 109 108 110 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 110 109 111 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [168])
        (plus:SI (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 111 110 112 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [168]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [168])
        (nil)))

(jump_insn:TI 112 111 261 17 arch/arm/kernel/perf_event_v7.c:899 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

(note 261 112 113 18 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  16 [0.1%] 
;; Pred edge  17 [0.0%]  (fallthru)
(code_label 113 261 114 18 243 "" [1 uses])

(note 114 113 117 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 117 114 215 18 NOTE_INSN_DELETED)

(insn:TI 215 117 119 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 119 215 203 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)
        (nil)))

(insn:TI 203 119 262 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 262 203 121 18 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 121 262 204 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 204 121 120 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 3 r3 [171])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 120 204 122 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [171])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [171])
        (nil)))

(call_insn:TI 122 120 237 18 arch/arm/kernel/perf_event_v7.c:900 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 237 122 238 18 (set (pc)
        (label_ref 139)) -1 (nil))
;; End of basic block 18 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 238 237 125)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  17 [100.0%] 
(code_label 125 238 126 19 244 "" [1 uses])

(note 126 125 210 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 126 127 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 2 r2 [174])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 127 210 129 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 3 r3 [173])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 129 127 263 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [174])
            (reg:SI 3 r3 [173]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [174])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [173]))
            (nil))))
;; End of basic block 19 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)

(note 263 129 130 20 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19 15) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  15 [35.1%] 
(code_label 130 263 131 20 242 "" [1 uses])

(note 131 130 132 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 132 131 133 20 arch/arm/kernel/perf_event_v7.c:910 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 1") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8922450) -1 (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:135 val ] [135])
        (nil)))

(insn:TI 133 132 136 20 arch/arm/kernel/perf_event_v7.c:855 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 136 133 264 20 arch/arm/kernel/perf_event_v7.c:863 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 5 r5 [orig:133 val ] [133])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(note 264 136 265 20 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 265 264 134 20 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 134 265 266 20 arch/arm/kernel/perf_event_v7.c:855 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2802 [0xaf2])
            (nil))))
;; End of basic block 20 -> ( 25 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

(note 266 134 139 21 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  20 [72.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 139 266 140 21 245 "" [1 uses])

(note 140 139 141 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 141 140 142 21 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 142 141 143 21 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 21 -> ( 23 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [0.0%] 
;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [100.0%]  (fallthru)
(note 143 142 144 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 144 143 267 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 267 144 145 22 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 145 267 146 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [175]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 146 145 147 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 147 146 148 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 148 147 149 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [177]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [177])
        (nil)))

(jump_insn:TI 149 148 268 22 arch/arm/kernel/perf_event_v7.c:856 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 22 -> ( 23 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [0.0%]  (fallthru)
;; Succ edge  24 [100.0%] 

(note 268 149 150 23 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  21 [0.0%] 
;; Pred edge  22 [0.0%]  (fallthru)
(code_label 150 268 151 23 247 "" [1 uses])

(note 151 150 154 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 154 151 216 23 NOTE_INSN_DELETED)

(insn:TI 216 154 156 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 156 216 201 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)
        (nil)))

(insn:TI 201 156 269 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(note 269 201 158 23 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn 158 269 202 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 202 158 157 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 3 r3 [180])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 157 202 159 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [180])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [180])
        (nil)))

(call_insn:TI 159 157 239 23 arch/arm/kernel/perf_event_v7.c:857 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 239 159 240 23 (set (pc)
        (label_ref 170)) -1 (nil))
;; End of basic block 23 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 240 239 162)

;; Start of basic block ( 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  22 [100.0%] 
(code_label 162 240 163 24 248 "" [1 uses])

(note 163 162 209 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 209 163 164 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 3 r3 [183])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 164 209 270 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 5 r5 [182])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(note 270 164 271 24 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 271 270 166 24 ( val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 166 271 272 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg/v:SI 5 r5 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [183])
            (reg:SI 5 r5 [182]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [183])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 5 r5 [182]))
            (nil))))
;; End of basic block 24 -> ( 25)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru)

(note 272 166 273 25 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:133 val ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 273 272 167 25 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 val ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 24 20) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  20 [28.0%] 
(code_label 167 273 168 25 246 "" [1 uses])

(note 168 167 169 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 169 168 274 25 arch/arm/kernel/perf_event_v7.c:867 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 1") ("") 0 [
            (reg/v:SI 5 r5 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8916946) -1 (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru)

(note 274 169 170 26 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 idx ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 25 23) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  23 [100.0%] 
(code_label 170 274 171 26 249 "" [1 uses])

(note 171 170 175 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 175 171 174 26 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:141 flags ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 174 175 219 26 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 219 174 220 26 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 220 219 176 26 arch/arm/kernel/perf_event_v7.c:1021 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 176 220 275 26 arch/arm/kernel/perf_event_v7.c:1020 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 275 176 177 26 ( val (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 26 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 177 275 212)

(note 212 177 0 NOTE_INSN_DELETED)


;; Function armv7pmu_get_event_idx (armv7pmu_get_event_idx)[0:1350]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: cpuc+0
Reg 1: event+0
Variables:
  name: cpuc
    offset 0
      (reg:SI 0 r0 [ cpuc ])
  name: event
    offset 0
      (reg:SI 1 r1 [ event ])

OUT:
Stack adjustment: 16
Reg 0: cpuc+0
Reg 1: event+0
Reg 4: idx+0
Variables:
  name: cpuc
    offset 0
      (reg:SI 0 r0 [ cpuc ])
  name: event
    offset 0
      (reg:SI 1 r1 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: cpuc+0
Reg 1: event+0
Reg 4: idx+0
Variables:
  name: cpuc
    offset 0
      (reg:SI 0 r0 [ cpuc ])
  name: event
    offset 0
      (reg:SI 1 r1 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 4:
IN:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 5:
IN:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 6:
IN:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 7:
IN:
Stack adjustment: 16
Reg 0: cpuc+0
Reg 1: event+0
Reg 4: idx+0
Variables:
  name: cpuc
    offset 0
      (reg:SI 0 r0 [ cpuc ])
  name: event
    offset 0
      (reg:SI 1 r1 [ event ])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 8:
IN:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


Basic block 9:
IN:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])

OUT:
Stack adjustment: 16
Reg 4: idx+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:134 idx ] [134])


10 basic blocks, 13 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1020, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1020, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [86.3%]  3 [13.7%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 140, maybe hot.
Predecessors:  2 [13.7%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

Successors:  9 [50.0%]  4 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 70, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

Successors:  8 [100.0%] 


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  7 [95.5%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  9 [4.5%]  (loop_exit) 6 [95.5%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 9120, maybe hot.
Predecessors:  5 [95.5%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  7 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  6 [100.0%]  (fallthru,dfs_back) 2 [86.3%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [95.5%]  8 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 520, maybe hot.
Predecessors:  7 [4.5%]  (fallthru,loop_exit) 4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 1, loop_depth 0, count 0, freq 1020, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 5 [4.5%]  (loop_exit) 3 [50.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 9, loop_depth 0, count 0, freq 1020, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_get_event_idx

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={3d} r3={6d,3u} r4={5d,8u} r5={2d,4u} r6={2d,4u,1d} r12={2d} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,7u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{262d,50u,1e} in 28{26 regular + 2 call} insns.
(note 1 0 88 NOTE_INSN_DELETED)

(note 88 1 89 2 ( cpuc (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ cpuc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 89 88 5 2 ( event (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 89 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 74 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 74 4 75 2 arch/arm/kernel/perf_event_v7.c:1130 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 75 74 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 75 65 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ event ])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ event ])
        (nil)))

(insn:TI 65 7 8 2 (set (reg/f:SI 5 r5 [146])
        (plus:SI (reg:SI 0 r0 [ cpuc ])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [ cpuc ])
        (nil)))

(insn:TI 8 65 12 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
        (nil)))

(insn:TI 12 8 90 2 arch/arm/kernel/perf_event_v7.c:1145 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 2 [0x2]))) 2345 {neon_vornv2di+78} (nil))

(note 90 12 40 2 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:134 idx ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 40 90 9 2 arch/arm/kernel/perf_event_v7.c:1144 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 6 r6 [147])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 9 40 16 2 arch/arm/kernel/perf_event_v7.c:1134 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [86.3%] 
;; Succ edge  3 [13.7%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [13.7%]  (fallthru)
(note 16 9 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 16 19 3 NOTE_INSN_DELETED)

(insn:TI 19 21 91 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(note 91 19 18 3 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(insn 18 91 92 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 92 18 20 3 ( cpuc (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 20 92 22 3 arch/arm/kernel/perf_event_v7.c:1135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 22 20 25 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 25 22 23 3 arch/arm/kernel/perf_event_v7.c:1138 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 23 25 85 3 arch/arm/kernel/perf_event_v7.c:1135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 9 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

;; Pred edge  3 [50.0%]  (fallthru)
(note 85 23 86 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 86 85 87 4 (set (pc)
        (label_ref 45)) -1 (nil))
;; End of basic block 4 -> ( 8)


;; Succ edge  8 [100.0%] 

(barrier 87 86 39)

;; Start of basic block ( 7) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [95.5%] 
(code_label 39 87 28 5 258 "" [1 uses])

(note 28 39 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 32 28 31 5 NOTE_INSN_DELETED)

(call_insn:TI 31 32 33 5 arch/arm/kernel/perf_event_v7.c:1145 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 33 31 34 5 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 34 33 35 5 arch/arm/kernel/perf_event_v7.c:1145 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [4.5%]  (loop_exit)
;; Succ edge  6 [95.5%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  5 [95.5%]  (fallthru)
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 35 93 6 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

(note 93 36 94 7 ( cpuc (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ cpuc ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 94 93 37 7 ( event (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ event ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [86.3%] 
(code_label 37 94 38 7 255 "" [1 uses])

(note 38 37 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 41 38 29 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 29 41 95 7 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(note 95 29 30 7 ( cpuc (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 30 95 96 7 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(note 96 30 42 7 ( event (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 42 96 43 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 42 44 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144])
        (nil)))

(jump_insn:TI 44 43 45 7 arch/arm/kernel/perf_event_v7.c:1144 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 5 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [95.5%] 
;; Succ edge  8 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
;; Pred edge  4 [100.0%] 
(code_label 45 44 46 8 256 "" [1 uses])

(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 46 48 8 arch/arm/kernel/perf_event_v7.c:1136 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int -11 [0xfffffffffffffff5])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 3) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [4.5%]  (loop_exit)
;; Pred edge  3 [50.0%] 
(code_label 48 47 49 9 257 "" [2 uses])

(note 49 48 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 49 60 9 arch/arm/kernel/perf_event_v7.c:1152 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 60 54 76 9 arch/arm/kernel/perf_event_v7.c:1152 (use (reg/i:SI 0 r0)) -1 (nil))

(note 76 60 77 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 77 76 78 9 arch/arm/kernel/perf_event_v7.c:1152 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 78 77 72)

(note 72 78 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)


;; Function armv7pmu_handle_irq (armv7pmu_handle_irq)[0:1347]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: irq_num+0
Reg 1: dev+0
Variables:
  name: irq_num
    offset 0
      (reg:SI 0 r0 [ irq_num ])
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])

OUT:
Stack adjustment: 144
Reg 1: dev+0
Reg 5: pmnc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])


Basic block 3:
IN:
Stack adjustment: 144
Reg 1: dev+0
Reg 5: pmnc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])

OUT:
Stack adjustment: 144
Reg 3: __ptr+0
Reg 4: idx+0
Reg 5: pmnc+0
Reg 11: cpuc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])


Basic block 4:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: pmnc+0 event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 5:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 6:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 7:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 8:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 9:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 10:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 11:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 12:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 13:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 14:
IN:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 3: ret+0
Reg 4: idx+0
Reg 5: event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 15:
IN:
Stack adjustment: 144
Reg 3: __ptr+0 ret+0
Reg 4: idx+0
Reg 5: pmnc+0 event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 3 r3 [orig:134 ret ] [134])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: __ptr
    offset 0
      (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0 pmnc+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 16:
IN:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: pmnc+0 event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 4: idx+0
Reg 5: event+0 pmnc+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


Basic block 17:
IN:
Stack adjustment: 144
Reg 1: dev+0
Reg 4: idx+0
Reg 5: pmnc+0 event+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])

OUT:
Stack adjustment: 144
Reg 1: dev+0
Reg 4: idx+0
Reg 5: event+0 pmnc+0
Reg 10: hwc+0
Reg 11: cpuc+0
Variables:
  name: idx
    offset 0
      (reg/v:SI 4 r4 [orig:145 idx ] [145])
  name: pmnc
    offset 0
      (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
  name: cpuc
    offset 0
      (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
  name: hwc
    offset 0
      (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
  name: dev
    offset 0
      (reg:SI 1 r1 [ dev ])
  name: event
    offset 0
      (reg/v/f:SI 5 r5 [orig:143 event ] [143])


18 basic blocks, 26 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 482, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 482, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [61.0%]  (fallthru) 17 [39.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 294, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	

Successors:  15 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 9706, maybe hot.
Predecessors:  15 [97.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

Successors:  14 [50.0%]  5 [50.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 4853, maybe hot.
Predecessors:  4 [50.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [72.0%]  (fallthru) 10 [28.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 3494, maybe hot.
Predecessors:  5 [72.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

Successors:  7 [100.0%]  (fallthru) 9 [0.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 3493, maybe hot.
Predecessors:  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  8 [100.0%]  (fallthru) 9 [0.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 3491, maybe hot.
Predecessors:  7 [100.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	

Successors:  10 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 3.
Predecessors:  6 [0.0%]  7 [0.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  14 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 4850, maybe hot.
Predecessors:  5 [28.0%]  8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  14 [71.0%]  11 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 1, count 0, freq 1407, maybe hot.
Predecessors:  10 [29.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [71.0%]  12 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 408, maybe hot.
Predecessors:  11 [29.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

Successors:  13 [29.0%]  (fallthru) 14 [71.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 1, count 0, freq 118, maybe hot.
Predecessors:  12 [29.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

Successors:  14 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 1, count 0, freq 9706, maybe hot.
Predecessors:  4 [50.0%]  10 [71.0%]  11 [71.0%]  12 [71.0%]  13 [100.0%]  (fallthru) 9 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  15 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  14 [100.0%]  (fallthru,dfs_back) 3 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [97.1%]  16 [2.9%]  (fallthru,loop_exit)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 294, maybe hot.
Predecessors:  15 [2.9%]  (fallthru,loop_exit)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  17 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 17 , prev 16, next 1, loop_depth 0, count 0, freq 482, maybe hot.
Predecessors:  16 [100.0%]  (fallthru) 2 [39.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 1 , prev 17, loop_depth 0, count 0, freq 482, maybe hot.
Predecessors:  17 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




armv7pmu_handle_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,14u,1d} r1={19d,13u} r2={16d,10u} r3={17d,11u} r4={3d,14u} r5={3d,12u} r6={3d,4u} r7={5d,7u,1d} r8={2d,4u,2d} r9={2d,3u} r10={2d,5u} r11={4d,6u} r12={6d} r13={3d,41u,1d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={14d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 946{784d,157u,5e} in 96{90 regular + 6 call} insns.
(note 1 0 214 NOTE_INSN_DELETED)

(note 214 1 215 2 ( irq_num (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ irq_num ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 215 214 5 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 215 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 196 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 196 4 197 2 arch/arm/kernel/perf_event_v7.c:1046 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -36 [0xffffffffffffffdc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 7 r7))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 16 [0x10])) [0 S4 A32])
                        (reg:SI 8 r8))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 20 [0x14])) [0 S4 A32])
                        (reg:SI 9 r9))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 24 [0x18])) [0 S4 A32])
                        (reg:SI 10 sl))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 28 [0x1c])) [0 S4 A32])
                        (reg:SI 11 fp))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 32 [0x20])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 197 196 198 2 arch/arm/kernel/perf_event_v7.c:1046 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -108 [0xffffffffffffff94]))) 4 {*arm_addsi3} (nil))

(note 198 197 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 198 216 2 arch/arm/kernel/perf_event_v7.c:941 (set (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 3") ("=r") 0 []
             [] 8926418)) -1 (nil))

(note 216 7 8 2 ( pmnc (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 8 216 9 2 arch/arm/kernel/perf_event_v7.c:945 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 3") ("") 0 [
            (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8926930) -1 (nil))

(insn:TI 9 8 12 2 arch/arm/kernel/perf_event_v7.c:1061 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 12 9 217 2 arch/arm/kernel/perf_event_v7.c:1062 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
            (reg/v:SI 5 r5 [orig:148 pmnc ] [148]))) 2345 {neon_vornv2di+78} (nil))

(note 217 12 10 2 ( irq_num (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 10 217 16 2 arch/arm/kernel/perf_event_v7.c:1061 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 141)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  17 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 10 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 16 99 3 NOTE_INSN_DELETED)

(note 99 21 112 3 NOTE_INSN_DELETED)

(note 112 99 185 3 NOTE_INSN_DELETED)

(insn:TI 185 112 179 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 179 185 218 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(note 218 179 175 3 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 175 218 30 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 0 r0)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 30 175 219 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(note 219 30 176 3 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 11 fp [orig:144 __ptr ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 176 219 17 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 7 r7 [159])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 17 176 220 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)
        (nil)))

(note 220 17 31 3 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 31 220 23 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8943066)) -1 (nil))

(insn:TI 23 31 28 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
        (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])
        (nil)))

(insn 28 23 18 3 include/linux/perf_event.h:996 (set (reg:SI 2 r2 [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 18 28 43 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8985755)) -1 (nil))

(insn:TI 43 18 221 3 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 221 43 101 3 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:145 idx ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 101 221 24 3 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:SI 9 r9 [194])
        (const_int 296 [0x128])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn:TI 24 101 194 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1 [162])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [158])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
        (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
            (nil))))

(insn 194 24 132 3 include/linux/perf_event.h:995 (set (reg:SI 0 r0 [163])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 132 194 38 3 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 8 r8 [192])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 38 132 222 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
        (plus:SI (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            (reg:SI 1 r1 [162]))) 4 {*arm_addsi3} (nil))

(note 222 38 223 3 ( cpuc (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 223 222 25 3 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 25 223 29 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1)
        (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
                (reg:SI 1 r1 [162])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (nil)))

(insn:TI 29 25 63 3 include/linux/perf_event.h:996 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 100 [0x64])) [0 data.raw+0 S4 A32])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [164])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 63 29 182 3 arch/arm/kernel/perf_event_v7.c:786 (set (reg:SI 2 r2)
        (and:SI (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int -2147483648 [0xffffffff80000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 182 63 186 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])
        (reg/v:SI 5 r5 [orig:148 pmnc ] [148])) 167 {*arm_movsi_insn} (nil))

(insn:TI 186 182 39 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn 39 186 188 3 arch/arm/kernel/perf_event_v7.c:1076 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn:TI 188 39 187 3 arch/arm/kernel/perf_event_v7.c:786 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-84 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 187 188 195 3 arch/arm/kernel/perf_event_v7.c:1076 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn 195 187 183 3 include/linux/perf_event.h:995 (set (reg:SI 1 r1 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 183 195 27 3 (set (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])
        (reg:SI 7 r7 [159])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 183 208 3 include/linux/perf_event.h:995 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 data.addr+0 S8 A64])
        (reg:DI 0 r0 [163])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 208 27 209 3 arch/arm/kernel/perf_event_v7.c:1072 (set (pc)
        (label_ref 130)) -1 (nil))
;; End of basic block 3 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 209 208 224)

(note 224 209 225 4 ( event (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:143 event ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 225 224 226 4 ( hwc (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 226 225 135 4 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 15) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  15 [97.1%] 
(code_label 135 226 46 4 270 "" [1 uses])

(note 46 135 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 56 46 189 4 NOTE_INSN_DELETED)

(insn:TI 189 56 50 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 6 r6)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 50 189 54 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [173])
        (ashiftrt:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 54 50 49 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [175])
        (and:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 49 54 227 4 arch/arm/kernel/perf_event_v7.c:1073 (set (reg/v/f:SI 5 r5 [orig:143 event ] [143])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 227 49 53 4 ( pmnc (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 53 227 55 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:138 D.26785 ] [138])
        (mem/v:SI (plus:SI (mult:SI (reg:SI 1 r1 [173])
                    (const_int 4 [0x4]))
                (reg:SI 6 r6)) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 53 57 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [176])
        (lshiftrt:SI (reg:SI 1 r1 [orig:138 D.26785 ] [138])
            (reg:SI 2 r2 [175]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:138 D.26785 ] [138])
        (nil)))

(insn:TI 57 55 58 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [176])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [176])
        (nil)))

(jump_insn:TI 58 57 59 4 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 14 5)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 59 164 5 arch/arm/kernel/perf_event_v7.c:785 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 164 60 228 5 arch/arm/kernel/perf_event_v7.c:786 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 20 [0x14])) [0 %sfp+-84 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(note 228 164 61 5 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 61 228 67 5 arch/arm/kernel/perf_event_v7.c:785 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 90)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  6 [72.0%]  (fallthru)
;; Succ edge  10 [28.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [72.0%]  (fallthru)
(note 67 61 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 69 67 70 6 arch/arm/kernel/perf_event_v7.c:787 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 70 229 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:SI 3 r3 [178])
        (plus:SI (reg:SI 3 r3 [orig:149 D.26022 ] [149])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 229 71 72 7 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 72 229 73 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [178]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [178])
        (nil)))

(jump_insn:TI 73 72 74 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
(note 74 73 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 77 74 190 8 NOTE_INSN_DELETED)

(insn:TI 190 77 191 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 7 r7)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 191 190 75 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 75 191 78 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 3 r3 [179])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 78 75 230 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (and:SI (ashift:SI (reg:SI 0 r0)
                (reg:SI 3 r3 [179]))
            (reg:SI 7 r7))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 230 78 210 8 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 210 230 211 8 (set (pc)
        (label_ref 90)) -1 (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 211 210 81)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%] 
(code_label 81 211 82 9 269 "" [2 uses])

(note 82 81 192 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 192 82 162 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 162 192 85 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x11737a20>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 85 162 86 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 2 r2)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 86 85 87 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 87 86 231 9 arch/arm/kernel/perf_event_v7.c:790 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 231 87 212 9 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 212 231 213 9 (set (pc)
        (label_ref 127)) -1 (nil))
;; End of basic block 9 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 213 212 232)

(note 232 213 90 10 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [28.0%] 
;; Pred edge  8 [100.0%] 
(code_label 90 232 91 10 268 "" [2 uses])

(note 91 90 92 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 92 91 93 10 arch/arm/kernel/perf_event_v7.c:1083 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (nil)))

(jump_insn:TI 93 92 94 10 arch/arm/kernel/perf_event_v7.c:1083 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7098 [0x1bba])
            (nil))))
;; End of basic block 10 -> ( 14 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 94 93 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 108 94 102 11 NOTE_INSN_DELETED)

(note 102 108 95 11 NOTE_INSN_DELETED)

(insn:TI 95 102 98 11 arch/arm/kernel/perf_event_v7.c:1086 (set (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
        (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 98 95 158 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 158 98 233 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 3 r3)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 233 158 96 11 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(insn 96 233 97 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn:TI 97 96 100 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 100 97 193 11 arch/arm/kernel/perf_event_v7.c:1087 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 193 100 104 11 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:DI 6 r6)
        (mem/s/j/c:DI (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
                (reg:SI 9 r9 [194])) [0 <variable>.hw.last_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 104 193 105 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 105 104 106 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 106 105 103 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 103 106 107 11 arch/arm/kernel/perf_event_v7.c:1088 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 data.period+0 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(call_insn 107 103 109 11 arch/arm/kernel/perf_event_v7.c:1089 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 109 107 110 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 110 109 111 11 arch/arm/kernel/perf_event_v7.c:1089 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [71.0%] 
;; Succ edge  12 [29.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 111 110 117 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 117 111 113 12 NOTE_INSN_DELETED)

(insn:TI 113 117 114 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))
        (nil)))

(insn:TI 115 114 116 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 116 115 118 12 arch/arm/kernel/perf_event_v7.c:1092 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_event_overflow") [flags 0x41] <function_decl 0x113da480 perf_event_overflow>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 118 116 119 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 119 118 120 12 arch/arm/kernel/perf_event_v7.c:1092 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  14 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 120 119 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 123 120 124 13 NOTE_INSN_DELETED)

(insn:TI 124 123 122 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 122 124 125 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 125 122 126 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 126 125 234 13 arch/arm/kernel/perf_event_v7.c:1093 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

(note 234 126 127 14 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 10 11 12 13 9) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  11 [71.0%] 
;; Pred edge  12 [71.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 127 234 128 14 266 "" [5 uses])

(note 128 127 129 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 129 128 235 14 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

(note 235 129 236 15 ( pmnc (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 236 235 130 15 ( __ptr (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 14 3) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 130 236 131 15 265 "" [1 uses])

(note 131 130 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 133 131 237 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(note 237 133 238 15 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 238 237 134 15 ( __ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 134 238 136 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:SI 3 r3 [orig:149 D.26022 ] [149])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 136 134 137 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [orig:149 D.26022 ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 137 136 138 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
            (nil))))
;; End of basic block 15 -> ( 4 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [97.1%] 
;; Succ edge  16 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [2.9%]  (fallthru,loop_exit)
(note 138 137 139 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 139 138 140 16 arch/arm/kernel/perf_event_v7.c:1103 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_work_run") [flags 0x41] <function_decl 0x113ba780 irq_work_run>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 140 139 239 16 arch/arm/kernel/perf_event_v7.c:1105 (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

(note 239 140 141 17 ( dev (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 16 2) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 141 239 142 17 264 "" [1 uses])

(note 142 141 153 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 153 142 199 17 arch/arm/kernel/perf_event_v7.c:1106 (use (reg/i:SI 0 r0)) -1 (nil))

(note 199 153 200 17 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 200 199 201 17 arch/arm/kernel/perf_event_v7.c:1106 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 17 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 201 200 177)

(note 177 201 184 NOTE_INSN_DELETED)

(note 184 177 0 NOTE_INSN_DELETED)


;; Function perf_callchain_kernel (perf_callchain_kernel)[0:1362]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: entry+0
Reg 1: regs+0
Variables:
  name: entry
    offset 0
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])

OUT:
Stack adjustment: 24


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




perf_callchain_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,3u} r1={3d,6u} r2={3d,2u} r3={3d,2u} r4={2d,3u} r12={2d,1u} r13={2d,9u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 162{132d,29u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 35 NOTE_INSN_DELETED)

(note 35 1 36 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 36 35 5 2 ( entry (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ entry ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 36 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 16 2 NOTE_INSN_DELETED)

(note 16 15 30 2 NOTE_INSN_DELETED)

(insn/f:TI 30 16 38 2 arch/arm/kernel/perf_event.c:773 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 3 r3))
            (use (reg:SI 4 r4))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_DEAD (reg:SI 3 r3)
                (expr_list:REG_DEAD (reg:SI 2 r2)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -24 [0xffffffffffffffe8])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 0 r0))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 1 r1))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 2 r2))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 3 r3))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 38 30 37 2 ( entry (nil)) NOTE_INSN_VAR_LOCATION)

(note 37 38 31 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(note 31 37 13 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 13 31 39 2 arch/arm/kernel/perf_event.c:779 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 39 13 7 2 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 7 39 2 2 arch/arm/kernel/perf_event.c:776 (set (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 2 7 40 2 arch/arm/kernel/perf_event.c:773 (set (reg/v/f:SI 2 r2 [orig:133 entry ] [133])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ entry ])
        (nil)))

(note 40 2 9 2 ( entry (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ entry ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 9 40 17 2 arch/arm/kernel/perf_event.c:777 (set (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 17 9 41 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 41 17 11 2 ( entry (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:133 entry ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 41 18 2 arch/arm/kernel/perf_event.c:778 (set (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
        (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -8 [0xfffffffffffffff8])) [0 fr.lr+0 S4 A64])
            (nil))))

(insn:TI 18 11 42 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 1 r1)
        (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)
        (nil)))

(note 42 18 8 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 8 42 10 2 arch/arm/kernel/perf_event.c:776 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 fr.fp+0 S4 A64])
        (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 8 12 2 arch/arm/kernel/perf_event.c:777 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 fr.sp+0 S4 A32])
        (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])
        (nil)))

(insn:TI 12 10 14 2 arch/arm/kernel/perf_event.c:778 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 fr.lr+0 S4 A64])
        (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])
        (nil)))

(insn:TI 14 12 20 2 arch/arm/kernel/perf_event.c:779 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 fr.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (nil)))

(call_insn 20 14 43 2 arch/arm/kernel/perf_event.c:780 (parallel [
            (call (mem:SI (symbol_ref:SI ("walk_stackframe") [flags 0x41] <function_decl 0x1147bd00 walk_stackframe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 43 20 32 2 ( entry (nil)) NOTE_INSN_VAR_LOCATION)

(note 32 43 33 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 33 32 34 2 arch/arm/kernel/perf_event.c:781 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 34 33 28)

(note 28 34 29 NOTE_INSN_DELETED)

(note 29 28 0 NOTE_INSN_DELETED)


;; Function perf_callchain_user (perf_callchain_user)[0:1360]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: entry+0
Reg 1: regs+0
Variables:
  name: entry
    offset 0
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 5: entry+0
Reg 6: tail+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])


Basic block 3:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0 regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])


Basic block 4:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 5:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 6:
IN:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 7:
IN:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 8:
IN:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 9:
IN:
Stack adjustment: 48
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 5: entry+0
Reg 6: tail+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])


Basic block 10:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 11:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 12:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])


Basic block 13:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0 regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0 roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])


Basic block 14:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0 regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0 roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])


Basic block 15:
IN:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: roksum+0 regs+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: flag+0 tail+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])

OUT:
Stack adjustment: 48
Reg 0: entry+0
Reg 1: regs+0 roksum+0
Reg 4: tail+0
Reg 5: entry+0
Reg 6: tail+0 flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 6 r6 [orig:139 flag ] [139])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:140 roksum ] [140])
  name: tail
    offset 0
      (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
      (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
  name: entry
    offset 0
      (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
      (reg:SI 0 r0 [ entry ])


16 basic blocks, 22 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

Successors:  10 [100.0%] 
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 2, count 0, freq 9120, maybe hot.
Predecessors:  14 [95.5%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

Successors:  4 [71.0%]  (fallthru) 5 [29.0%]  (loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 2, count 0, freq 6475, maybe hot.
Predecessors:  3 [71.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  13 [100.0%]  (dfs_back)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 2645, maybe hot.
Predecessors:  3 [29.0%]  (loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

Successors:  10 [50.0%]  (dfs_back) 6 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 1322, maybe hot.
Predecessors:  5 [50.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  9 [50.0%]  7 [50.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 331, maybe hot.
Predecessors:  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  9 [50.0%]  8 [50.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

Invalid sum of incoming frequencies 661, should be 331

Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 166, maybe hot.
Predecessors:  7 [50.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 1322, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 6 [50.0%]  7 [50.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

Successors:  10 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 993, should be 1322

Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 3525, maybe hot.
Predecessors:  9 [100.0%]  (fallthru,dfs_back) 5 [50.0%]  (dfs_back) 2 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  12 [50.0%]  11 [50.0%]  (fallthru)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 11 , prev 10, next 12, loop_depth 1, count 0, freq 1763, maybe hot.
Predecessors:  10 [50.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  12 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 3527, maybe hot.
Predecessors:  10 [50.0%]  11 [100.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

Successors:  13 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 13 , prev 12, next 14, loop_depth 2, count 0, freq 10000, maybe hot.
Predecessors:  12 [100.0%]  (fallthru) 4 [100.0%]  (dfs_back)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

Successors:  14 [95.5%]  (fallthru) 15 [4.5%]  (loop_exit)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 14 , prev 13, next 15, loop_depth 2, count 0, freq 9550, maybe hot.
Predecessors:  13 [95.5%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  3 [95.5%]  15 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 15 , prev 14, next 1, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  14 [4.5%]  (fallthru,loop_exit) 13 [4.5%]  (loop_exit)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 1 , prev 15, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  15 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




perf_callchain_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={5d,5u} r2={8d,10u} r3={7d,8u} r4={4d,9u} r5={2d,8u,2d} r6={8d,10u} r7={3d,4u,1d} r8={2d,3u} r10={3d,6u} r11={3d,4u} r12={2d,1u} r13={2d,21u,1d} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={13d,11u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 290{178d,107u,5e} in 56{55 regular + 1 call} insns.
(note 1 0 181 NOTE_INSN_DELETED)

(note 181 1 182 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 182 181 5 2 ( entry (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ entry ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 182 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 56 2 NOTE_INSN_DELETED)

(note 56 10 168 2 NOTE_INSN_DELETED)

(insn/f:TI 168 56 184 2 arch/arm/kernel/perf_event.c:746 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 3 r3))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_DEAD (reg:SI 3 r3)
                            (expr_list:REG_DEAD (reg:SI 2 r2)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -48 [0xffffffffffffffd0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 0 r0))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 1 r1))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 2 r2))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 3 r3))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0 S4 A32])
                                                (reg:SI 11 fp))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 44 [0x2c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 184 168 183 2 ( entry (nil)) NOTE_INSN_VAR_LOCATION)

(note 183 184 169 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(note 169 183 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 169 185 2 arch/arm/kernel/perf_event.c:750 (set (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(note 185 7 162 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 162 185 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 2 162 186 2 arch/arm/kernel/perf_event.c:746 (set (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ entry ])
        (nil)))

(note 186 2 157 2 ( entry (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ entry ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 157 186 8 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 8 157 187 2 arch/arm/kernel/perf_event.c:750 (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
        (plus:SI (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
            (const_int -12 [0xfffffffffffffff4]))) 4 {*arm_addsi3} (nil))

(note 187 8 158 2 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 158 187 27 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 27 158 177 2 arch/arm/kernel/perf_event.c:729 (set (reg/f:SI 8 r8 [179])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(jump_insn 177 27 178 2 arch/arm/kernel/perf_event.c:752 (set (pc)
        (label_ref 150)) -1 (nil))
;; End of basic block 2 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%] 

(barrier 178 177 188)

(note 188 178 189 3 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 189 188 190 3 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 flag ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 190 189 191 3 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:140 roksum ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 191 190 107 3 ( entry (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 14) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  14 [95.5%] 
(code_label 107 191 14 3 288 "" [1 uses])

(note 14 107 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 192 3 arch/arm/kernel/perf_event.c:727 (set (reg:SI 6 r6 [orig:150 <variable>.addr_limit ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])
        (nil)))

(note 192 15 16 3 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 16 192 194 3 arch/arm/kernel/perf_event.c:727 (parallel [
            (set (reg/v:SI 6 r6 [orig:139 flag ] [139])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (set (reg/v:SI 1 r1 [orig:140 roksum ] [140])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 1 r1 [orig:140 roksum ] [140])
            (nil))))

(note 194 16 193 3 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(note 193 194 18 3 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 flag ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 18 193 19 3 arch/arm/kernel/perf_event.c:727 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:139 flag ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 19 18 20 3 arch/arm/kernel/perf_event.c:727 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [71.0%]  (fallthru)
;; Succ edge  5 [29.0%]  (loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 20 19 143 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 143 20 179 4 arch/arm/kernel/perf_event.c:728 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg:SI 2 r2 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [171])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 179 143 180 4 (set (pc)
        (label_ref 96)) -1 (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (dfs_back)

(barrier 180 179 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (loop_exit)
(code_label 24 180 25 5 280 "" [1 uses])

(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 32 25 28 5 NOTE_INSN_DELETED)

(insn:TI 28 32 29 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 0 r0)
        (reg/f:SI 8 r8 [179])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 29 28 195 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])) 167 {*arm_movsi_insn} (nil))

(note 195 29 145 5 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 145 195 31 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 31 145 34 5 arch/arm/kernel/perf_event.c:729 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x11466780 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 34 31 35 5 arch/arm/kernel/perf_event.c:729 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 35 34 36 5 arch/arm/kernel/perf_event.c:729 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 10 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [50.0%]  (dfs_back)
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 36 35 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 36 37 6 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:143 D.26828 ] [143])
        (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 37 38 39 6 arch/arm/kernel/perf_event.c:732 (set (reg:SI 12 ip [orig:137 D.26836 ] [137])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0+8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 39 37 40 6 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26828+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 40 39 119 6 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 119 40 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 119 44 7 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 44 43 120 7 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 120 44 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 120 51 8 NOTE_INSN_DELETED)

(insn:TI 51 52 164 8 include/linux/perf_event.h:1097 (set (reg:SI 1 r1 [152])
        (plus:SI (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 164 51 166 8 include/linux/perf_event.h:1097 (set (reg:SI 10 sl [157])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 166 164 165 8 include/linux/perf_event.h:1097 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 10 sl [157])
                        (reg:SI 2 r2 [orig:143 D.26828 ] [143]))
                    (reg:SI 10 sl [157])))
            (set (reg:SI 10 sl [157])
                (plus:SI (reg:SI 10 sl [157])
                    (reg:SI 2 r2 [orig:143 D.26828 ] [143])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:143 D.26828 ] [143])
        (nil)))

(insn 165 166 53 8 include/linux/perf_event.h:1097 (set (reg:SI 11 fp [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 53 165 134 8 include/linux/perf_event.h:1097 (set (reg/f:SI 0 r0 [154])
        (plus:SI (mult:SI (reg:SI 1 r1 [152])
                (const_int 8 [0x8]))
            (reg/v/f:SI 5 r5 [orig:146 entry ] [146]))) 270 {*arith_shiftsi} (nil))

(insn 134 53 167 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [152])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 5 r5 [orig:146 entry ] [146])) [0 <variable>.ip S4 A64])
        (reg:SI 12 ip [orig:137 D.26836 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:137 D.26836 ] [137])
        (expr_list:REG_DEAD (reg:SI 1 r1 [152])
            (nil))))

(insn:TI 167 134 135 8 include/linux/perf_event.h:1097 (set (reg:SI 11 fp [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 11 fp [+4 ])
                (reg:SI 3 r3 [ D.26828+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 135 167 58 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [154])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26828+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ D.26828+4 ])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [154])
            (nil))))

(insn:TI 58 135 59 8 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 10 sl [157])) 163 {*arm_movdi} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  7 [50.0%] 
(code_label 59 58 60 9 282 "" [2 uses])

(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 196 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 196 61 62 9 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(insn 62 196 197 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 4 r4 [158])
        (plus:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(note 197 62 63 9 ( tail (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 63 197 146 9 arch/arm/kernel/perf_event.c:738 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
            (reg/f:SI 4 r4 [158]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [158])
        (nil)))

(insn:TI 146 63 198 9 arch/arm/kernel/perf_event.c:739 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(note 198 146 71 9 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 71 198 200 9 arch/arm/kernel/perf_event.c:741 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
            (plus:SI (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
                (const_int -12 [0xfffffffffffffff4])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(note 200 71 199 9 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 199 200 201 9 ( tail (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 9 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

(note 201 199 202 10 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 202 201 203 10 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 203 202 204 10 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 flag ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 204 203 150 10 ( entry (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9 5 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [50.0%]  (dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 150 204 149 10 293 "" [2 uses])

(note 149 150 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 76 149 140 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])
        (nil)))

(insn 140 76 77 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:QI 3 r3 [159])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 77 140 78 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
        (nil)))

(jump_insn:TI 78 77 123 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 123 78 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 82 123 83 11 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])
        (nil)))

(insn:TI 83 82 141 11 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
        (nil)))

(insn:TI 141 83 93 11 arch/arm/kernel/perf_event.c:752 discrim 1 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:QI 3 r3 [159])
            (const_int 1 [0x1]))) 2350 {neon_vornv2di+83} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  10 [50.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 93 141 128 12 285 "" [1 uses])

(note 128 93 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 128 95 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 3 r3 [orig:145 D.26206 ] [145])
        (zero_extend:SI (reg:QI 3 r3 [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 95 94 205 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

(note 205 95 206 13 ( tail (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 206 205 96 13 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:140 roksum ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12 4) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%]  (dfs_back)
(code_label 96 206 97 13 281 "" [1 uses])

(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 98 97 99 13 NOTE_INSN_DELETED)

(note 99 98 101 13 NOTE_INSN_DELETED)

(note 101 99 102 13 NOTE_INSN_DELETED)

(note 102 101 103 13 NOTE_INSN_DELETED)

(insn:TI 103 102 104 13 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:SI 2 r2 [170])
                (and:SI (ne:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 0 [0x0]))
                    (reg:SI 3 r3 [orig:145 D.26206 ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 104 103 105 13 arch/arm/kernel/perf_event.c:753 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [170])
        (nil)))

(jump_insn:TI 105 104 106 13 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  14 [95.5%]  (fallthru)
;; Succ edge  15 [4.5%]  (loop_exit)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  13 [95.5%]  (fallthru)
(note 106 105 108 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 108 106 109 14 NOTE_INSN_DELETED)

(insn:TI 109 108 110 14 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [171])
                (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 110 109 116 14 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 14 -> ( 3 15)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  15 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  14 [4.5%]  (fallthru,loop_exit)
;; Pred edge  13 [4.5%]  (loop_exit)
(code_label 116 110 130 15 289 "" [1 uses])

(note 130 116 170 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 170 130 171 15 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 171 170 172 15 arch/arm/kernel/perf_event.c:755 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 172 171 160)

(note 160 172 161 NOTE_INSN_DELETED)

(note 161 160 0 NOTE_INSN_DELETED)

