
;; Function swp_emulation_init (swp_emulation_init)[0:1327] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 8
Reg 3: res+0
Variables:
  name: res
    offset 0
      (reg/v/f:SI 3 r3 [orig:133 res ] [133])


Basic block 3:
IN:
Stack adjustment: 8
Reg 3: res+0
Variables:
  name: res
    offset 0
      (reg/v/f:SI 3 r3 [orig:133 res ] [133])

OUT:
Stack adjustment: 8


4 basic blocks, 4 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [0.0%]  (fallthru) EXIT [100.0%] 
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]


Basic block 3 , prev 2, next 1, loop_depth 0, count 0, freq 4, probably never executed.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 3, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  3 [100.0%]  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




swp_emulation_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,8u} r1={5d,1u} r2={6d,2u} r3={5d,1u} r4={1d,2u} r12={3d} r13={2d,7u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 394{369d,25u,0e} in 17{14 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 2 67 2 NOTE_INSN_DELETED)

(insn/f:TI 67 10 68 2 arch/arm/kernel/swp_emulate.c:249 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 68 67 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 68 7 2 arch/arm/kernel/swp_emulate.c:253 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114cfe40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114cfe40>)
        (nil)))

(insn:TI 7 6 8 2 arch/arm/kernel/swp_emulate.c:253 (set (reg:SI 1 r1)
        (const_int 292 [0x124])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 arch/arm/kernel/swp_emulate.c:253 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 9 8 11 2 arch/arm/kernel/swp_emulate.c:253 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("create_proc_entry") [flags 0x41] <function_decl 0x10f11180 create_proc_entry>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 11 9 74 2 arch/arm/kernel/swp_emulate.c:255 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 3 r3 [orig:133 res ] [133])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(note 74 11 14 2 ( res (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:133 res ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 14 74 12 2 arch/arm/kernel/swp_emulate.c:256 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:134 D.26102 ] [134])
            (const_int -12 [0xfffffffffffffff4]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 12 14 18 2 arch/arm/kernel/swp_emulate.c:255 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  EXIT [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 18 12 65 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 65 18 22 3 arch/arm/kernel/swp_emulate.c:258 (set (reg/f:SI 2 r2 [137])
        (symbol_ref:SI ("proc_read_status") [flags 0x3] <function_decl 0x1149ce80 proc_read_status>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("proc_read_status") [flags 0x3] <function_decl 0x1149ce80 proc_read_status>)
        (nil)))

(insn:TI 22 65 20 3 arch/arm/kernel/swp_emulate.c:261 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114e8230>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114e8230>)
        (nil)))

(insn:TI 20 22 23 3 arch/arm/kernel/swp_emulate.c:258 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:133 res ] [133])
                (const_int 48 [0x30])) [0 <variable>.read_proc+0 S4 A64])
        (reg/f:SI 2 r2 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:133 res ] [133])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [137])
            (expr_list:REG_EQUAL (symbol_ref:SI ("proc_read_status") [flags 0x3] <function_decl 0x1149ce80 proc_read_status>)
                (nil)))))

(call_insn:TI 23 20 75 3 arch/arm/kernel/swp_emulate.c:261 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 75 23 25 3 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(insn 25 75 26 3 arch/arm/kernel/swp_emulate.c:262 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 26 25 27 3 arch/arm/kernel/swp_emulate.c:262 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11491b80 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 27 26 40 3 arch/arm/kernel/swp_emulate.c:264 (set (reg:SI 0 r0 [orig:134 D.26102 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 40 27 71 3 arch/arm/kernel/swp_emulate.c:265 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 71 40 70 3 arch/arm/kernel/swp_emulate.c:265 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 71 64)

(note 64 70 66 NOTE_INSN_DELETED)

(note 66 64 0 NOTE_INSN_DELETED)


;; Function set_segfault (set_segfault)[0:1324]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: addr+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: addr
    offset 0
      (reg:SI 1 r1 [ addr ])

OUT:
Stack adjustment: 144
Reg 4: regs+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 regs ] [135])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




set_segfault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,4u} r1={4d,2u} r2={7d,4u} r3={10d,9u,2d} r4={2d,4u} r12={3d,3u} r13={3d,14u} r14={5d,4u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,2u} r25={1d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{262d,46u,3e} in 30{28 regular + 2 call} insns.
(note 1 0 78 NOTE_INSN_DELETED)

(note 78 1 79 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 79 78 5 2 ( addr (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 79 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 14 2 NOTE_INSN_DELETED)

(note 14 8 35 2 NOTE_INSN_DELETED)

(note 35 14 67 2 NOTE_INSN_DELETED)

(insn/f:TI 67 35 68 2 arch/arm/kernel/swp_emulate.c:108 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -8 [0xfffffffffffffff8])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(insn/f:TI 68 67 69 2 arch/arm/kernel/swp_emulate.c:108 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -136 [0xffffffffffffff78]))) 4 {*arm_addsi3} (nil))

(note 69 68 64 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 64 69 2 2 arch/arm/kernel/swp_emulate.c:111 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 2 64 60 2 arch/arm/kernel/swp_emulate.c:108 (set (reg/v/f:SI 4 r4 [orig:135 regs ] [135])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn:TI 60 2 61 2 arch/arm/kernel/swp_emulate.c:111 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 61 60 10 2 arch/arm/kernel/swp_emulate.c:111 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 10 61 11 2 arch/arm/kernel/swp_emulate.c:111 (set (reg/f:SI 3 r3 [orig:139 <variable>.task ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 10 80 2 arch/arm/kernel/swp_emulate.c:111 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 <variable>.task ] [139])
                (const_int 492 [0x1ec])) [0 <variable>.mm+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 <variable>.task ] [139])
        (nil)))

(note 80 11 13 2 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 regs ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 13 80 81 2 arch/arm/kernel/swp_emulate.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("find_vma") [flags 0x41] <function_decl 0x11285480 find_vma>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 81 13 30 2 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 30 81 40 2 arch/arm/kernel/swp_emulate.c:117 (set (reg:SI 12 ip [143])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 40 30 39 2 arch/arm/kernel/swp_emulate.c:121 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 39 40 15 2 arch/arm/kernel/swp_emulate.c:121 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:135 regs ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 39 38 2 arch/arm/kernel/swp_emulate.c:111 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 38 15 18 2 arch/arm/kernel/swp_emulate.c:121 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114fa5d0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114fa5d0>)
        (nil)))

(insn:TI 18 38 24 2 arch/arm/kernel/swp_emulate.c:112 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [140])
            (const_int 196609 [0x30001]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(insn:TI 24 18 25 2 arch/arm/kernel/swp_emulate.c:114 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [141])
            (const_int 196610 [0x30002]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUIV (const_int 196610 [0x30002])
            (nil))))

(insn:TI 25 24 41 2 arch/arm/kernel/swp_emulate.c:114 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])
        (reg:SI 3 r3 [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (nil)))

(insn 41 25 32 2 arch/arm/kernel/swp_emulate.c:121 (set (reg:SI 3 r3)
        (reg:SI 12 ip [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 32 41 31 2 arch/arm/kernel/swp_emulate.c:118 (set (reg:SI 14 lr [orig:144 <variable>.uregs+60 ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 regs ] [135])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (nil)))

(insn:TI 31 32 37 2 arch/arm/kernel/swp_emulate.c:117 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])
        (reg:SI 12 ip [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 37 31 33 2 arch/arm/kernel/swp_emulate.c:121 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [143])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [143])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 33 37 28 2 arch/arm/kernel/swp_emulate.c:118 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 14 lr [orig:144 <variable>.uregs+60 ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:144 <variable>.uregs+60 ] [144])
        (nil)))

(insn 28 33 29 2 arch/arm/kernel/swp_emulate.c:116 (set (reg:SI 14 lr [142])
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 11 [0xb])
        (nil)))

(insn:TI 29 28 42 2 arch/arm/kernel/swp_emulate.c:116 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])
        (reg:SI 14 lr [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [142])
        (expr_list:REG_EQUAL (const_int 11 [0xb])
            (nil))))

(call_insn 42 29 43 2 arch/arm/kernel/swp_emulate.c:121 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512a9d00 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 43 42 45 2 arch/arm/kernel/swp_emulate.c:123 (set (reg/f:SI 3 r3 [148])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 45 43 46 2 arch/arm/kernel/swp_emulate.c:123 (set (reg:SI 2 r2 [orig:150 abtcounter ] [150])
        (mem/c/i:SI (reg/f:SI 3 r3 [148]) [0 abtcounter+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [148]) [0 abtcounter+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 abtcounter+0 S4 A32])
            (nil))))

(insn:TI 46 45 47 2 arch/arm/kernel/swp_emulate.c:123 (set (reg:SI 2 r2 [151])
        (plus:SI (reg:SI 2 r2 [orig:150 abtcounter ] [150])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [148]) [0 abtcounter+0 S4 A32])
        (nil)))

(insn 47 46 70 2 arch/arm/kernel/swp_emulate.c:123 (set (mem/c/i:SI (reg/f:SI 3 r3 [148]) [0 abtcounter+0 S4 A32])
        (reg:SI 2 r2 [151])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [148])
        (expr_list:REG_DEAD (reg:SI 2 r2 [151])
            (nil))))

(note 70 47 71 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 71 70 72 2 arch/arm/kernel/swp_emulate.c:124 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 72 71 62)

(note 62 72 63 NOTE_INSN_DELETED)

(note 63 62 0 NOTE_INSN_DELETED)


;; Function swp_handler (swp_handler)[0:1326]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: instr+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: instr
    offset 0
      (reg:SI 1 r1 [ instr ])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: instr+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
      (reg:SI 1 r1 [ instr ])


Basic block 3:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: instr+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
      (reg:SI 1 r1 [ instr ])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: regs+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])


Basic block 4:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: regs+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])

OUT:
Stack adjustment: 120
Reg 1: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])


Basic block 5:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: regs+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])

OUT:
Stack adjustment: 120
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])


Basic block 6:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: instr+0
Reg 4: regs+0
Reg 5: instr+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
      (reg:SI 1 r1 [ instr ])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 7:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Variables:
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 8:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 9:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 10:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: flag+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 11:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 12:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:137 temp ] [137])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 13:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 14:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 15:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 16:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])


Basic block 17:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 18:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 19:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 20:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 4: regs+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 21:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])


Basic block 22:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: flag+0 res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])
  name: flag
    offset 0
      (reg/v:SI 3 r3 [orig:149 flag ] [149])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])

OUT:
Stack adjustment: 120
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])


Basic block 23:
IN:
Stack adjustment: 120
Reg 0: regs+0
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
      (reg/f:SI 0 r0 [orig:156 regs ] [156])

OUT:
Stack adjustment: 120
Reg 1: roksum+0
Reg 2: temp+0
Reg 3: res+0
Reg 4: regs+0
Reg 5: instr+0
Reg 6: address+0
Reg 7: data+0
Reg 8: type+0
Variables:
  name: instr
    offset 0
      (reg/v:SI 5 r5 [orig:157 instr ] [157])
  name: temp
    offset 0
      (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
  name: address
    offset 0
      (reg/v:SI 6 r6 [orig:153 address ] [153])
  name: data
    offset 0
      (reg/v:SI 7 r7 [orig:152 data ] [152])
  name: type
    offset 0
      (reg/v:SI 8 r8 [orig:151 type ] [151])
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
  name: roksum
    offset 0
      (reg/v:SI 1 r1 [orig:148 roksum ] [148])
  name: res
    offset 0
      (reg/v:SI 3 r3 [orig:136 res ] [136])


24 basic blocks, 34 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [0.0%]  (fallthru) 6 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 4.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

Successors:  5 [93.3%]  4 [6.7%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 336, maybe hot.
Predecessors:  3 [6.7%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 7 [r7]
;; live  kill	 14 [lr]

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 0, should be 336

Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  4 [100.0%]  (fallthru) 3 [93.3%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  6 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 340, should be 5000

Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  5 [100.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

Successors:  22 [50.0%]  7 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 14996, should be 10000

Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

Successors:  9 [72.0%]  8 [28.0%]  (fallthru)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 3200, maybe hot.
Predecessors:  9 [50.0%]  7 [28.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 10 [sl]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 10 [sl]
;; live  kill	

Successors:  11 [100.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 3600, maybe hot.
Predecessors:  7 [72.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  10 [50.0%]  (fallthru) 8 [50.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 1800, maybe hot.
Predecessors:  9 [50.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}

Successors:  22 [100.0%] 


Basic block 11 , prev 10, next 12, loop_depth 1, count 0, freq 3201, maybe hot.
Predecessors:  8 [100.0%]  16 [100.0%]  (dfs_back)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  12 [28.0%]  (fallthru) 13 [72.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 896, maybe hot.
Predecessors:  11 [28.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

Successors:  14 [100.0%] 
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 13 , prev 12, next 14, loop_depth 1, count 0, freq 2305, maybe hot.
Predecessors:  11 [72.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

Successors:  14 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 14 , prev 13, next 15, loop_depth 1, count 0, freq 3201, maybe hot.
Predecessors:  13 [100.0%]  (fallthru) 12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  17 [100.0%]  (loop_exit) 15 [0.0%]  (fallthru)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 15 , prev 14, next 16, loop_depth 1, count 0, freq 1.
Predecessors:  14 [0.0%]  (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  19 [0.0%]  (loop_exit) 16 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 16 , prev 15, next 17, loop_depth 1, count 0, freq 1.
Predecessors:  15 [100.0%]  (fallthru)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  11 [100.0%]  (dfs_back)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 3200, maybe hot.
Predecessors:  14 [100.0%]  (loop_exit)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  18 [50.0%]  (fallthru) 19 [50.0%] 
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 1600, maybe hot.
Predecessors:  17 [50.0%]  (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

Successors:  19 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 3200, maybe hot.
Predecessors:  17 [50.0%]  15 [0.0%]  (loop_exit) 18 [100.0%]  (fallthru)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  20 [78.0%]  (fallthru) 21 [22.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 3900, maybe hot.
Predecessors:  19 [78.0%]  (fallthru)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

Successors:  23 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 2496, should be 3900

Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 1100, maybe hot.
Predecessors:  19 [22.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  22 (fallthru) 23 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 704, should be 1100

Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 1214, maybe hot.
Predecessors:  21 (fallthru) 6 [50.0%]  10 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  23 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 6800, should be 1214

Basic block 23 , prev 22, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  22 [100.0%]  (fallthru) 21 [100.0%]  20 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 6214, should be 10000

Basic block 1 , prev 23, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  23 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




swp_handler

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,9u} r1={17d,16u} r2={17d,14u,5d} r3={21d,19u} r4={2d,8u,2d} r5={3d,7u} r6={3d,8u} r7={5d,7u} r8={2d,5u} r10={3d,4u,1d} r12={4d} r13={3d,37u,1d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={20d,19u} r25={2d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 720{554d,155u,11e} in 98{94 regular + 4 call} insns.
(note 1 0 255 NOTE_INSN_DELETED)

(note 255 1 256 2 ( instr (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ instr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 256 255 5 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 256 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 220 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 220 4 227 2 include/linux/jump_label.h:67 (set (reg/f:SI 3 r3 [orig:147 D.26228 ] [147])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1141fd20 perf_swevent_enabled>)
                (const_int 32 [0x20])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1141fd20 perf_swevent_enabled>)
                (const_int 32 [0x20])))
        (nil)))

(insn/f:TI 227 220 2 2 arch/arm/kernel/swp_emulate.c:182 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 7 r7)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -28 [0xffffffffffffffe4])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 8 r8))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 10 sl))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 24 [0x18])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 2 227 9 2 arch/arm/kernel/swp_emulate.c:182 (set (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 2 228 2 include/linux/jump_label.h:67 (set (reg:SI 3 r3 [orig:146 D.26229 ] [146])
        (mem/v:SI (reg/f:SI 3 r3 [orig:147 D.26228 ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1141fd20 perf_swevent_enabled>)
                    (const_int 32 [0x20]))) [0 S4 A32])
        (nil)))

(insn/f 228 9 229 2 arch/arm/kernel/swp_emulate.c:182 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -92 [0xffffffffffffffa4]))) 4 {*arm_addsi3} (nil))

(note 229 228 3 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 3 229 7 2 arch/arm/kernel/swp_emulate.c:182 (set (reg/v:SI 5 r5 [orig:157 instr ] [157])
        (reg:SI 1 r1 [ instr ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 10 2 arch/arm/kernel/swp_emulate.c:186 (set (reg:SI 6 r6 [orig:154 D.26063 ] [154])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:156 regs ] [156])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 7 11 2 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:146 D.26229 ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:146 D.26229 ] [146])
        (nil)))

(jump_insn:TI 11 10 257 2 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

(note 257 11 12 3 ( instr (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:157 instr ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 12 257 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 13 12 16 3 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:156 regs ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 13 14 3 include/linux/perf_event.h:1054 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
            (reg/f:SI 0 r0 [orig:156 regs ] [156]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:156 regs ] [156])
        (nil)))

(jump_insn:TI 14 16 258 3 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [93.3%] 
;; Succ edge  4 [6.7%]  (fallthru)

(note 258 14 20 4 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  3 [6.7%]  (fallthru)
(note 20 258 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 23 4 include/linux/perf_event.h:1043 discrim 1 (set (reg/f:SI 7 r7 [158])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))
        (nil)))

(insn 23 21 259 4 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(note 259 23 22 4 ( regs (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 22 259 260 4 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [158])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))

(note 260 22 24 4 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 24 260 25 4 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10b7a080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 25 24 261 4 include/linux/perf_event.h:1056 (set (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
        (reg/f:SI 7 r7 [158])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 7 r7 [158])
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -72 [0xffffffffffffffb8]))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

(note 261 25 262 5 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 262 261 26 5 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [93.3%] 
(code_label 26 262 27 5 18 "" [1 uses])

(note 27 26 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 31 27 225 5 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(insn 225 31 226 5 include/linux/perf_event.h:1058 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 226 225 28 5 include/linux/perf_event.h:1058 (set (reg:SI 3 r3 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 28 226 189 5 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:135 regs.419 ] [135])
        (nil)))

(insn:TI 189 28 219 5 include/linux/perf_event.h:1058 (set (mem/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A64])
        (reg:SI 6 r6 [orig:154 D.26063 ] [154])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [orig:154 D.26063 ] [154])
        (nil)))

(insn 219 189 263 5 include/linux/perf_event.h:1058 (set (reg:SI 1 r1 [orig:197+4 ] [197])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(note 263 219 190 5 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 190 263 33 5 include/linux/perf_event.h:1058 (set (mem/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 1 r1 [orig:197+4 ] [197])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:197+4 ] [197])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 33 190 264 5 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11426880 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

(note 264 33 265 6 ( instr (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:157 instr ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 265 264 34 6 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 34 265 35 6 16 "" [1 uses])

(note 35 34 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 37 35 55 6 NOTE_INSN_DELETED)

(note 55 37 62 6 NOTE_INSN_DELETED)

(note 62 55 222 6 NOTE_INSN_DELETED)

(insn:TI 222 62 215 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 215 222 40 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 40 215 216 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 2 r2 [164])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 216 40 39 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 3 r3 [161])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 39 216 42 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:163 <variable>.task ] [163])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [161])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 42 39 41 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 1 r1 [orig:166 previous_pid ] [166])
        (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [164])
                (const_int 4 [0x4])) [0 previous_pid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [164])
                (const_int 4 [0x4])) [0 previous_pid+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 previous_pid+0 S4 A32])
            (nil))))

(insn:TI 41 42 43 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:165 <variable>.pid ] [165])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:163 <variable>.task ] [163])
                (const_int 532 [0x214])) [0 <variable>.pid+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 41 58 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:165 <variable>.pid ] [165])
            (reg:SI 1 r1 [orig:166 previous_pid ] [166]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:166 previous_pid ] [166])
        (nil)))

(insn 58 43 52 6 arch/arm/kernel/swp_emulate.c:195 (set (reg:SI 1 r1 [174])
        (and:SI (reg/v:SI 5 r5 [orig:157 instr ] [157])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 52 58 223 6 arch/arm/kernel/swp_emulate.c:191 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [164])
                    (const_int 4 [0x4])) [0 previous_pid+0 S4 A32])
            (reg:SI 3 r3 [orig:165 <variable>.pid ] [165]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:165 <variable>.pid ] [165])
            (expr_list:REG_DEAD (reg/f:SI 2 r2 [164])
                (nil)))))

(insn 223 52 213 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 213 223 56 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:SI 3 r3 [176])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 56 213 214 6 arch/arm/kernel/swp_emulate.c:194 (set (reg:SI 2 r2 [173])
        (zero_extract:SI (reg/v:SI 5 r5 [orig:157 instr ] [157])
            (const_int 4 [0x4])
            (const_int 16 [0x10]))) 124 {extzv_t2} (nil))

(insn:TI 214 56 59 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:SI 3 r3 [176])
        (and:SI (reg:SI 3 r3 [176])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 59 214 266 6 arch/arm/kernel/swp_emulate.c:195 (set (reg/v:SI 7 r7 [orig:152 data ] [152])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [174])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:156 regs ] [156])) [0 <variable>.uregs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [174])
        (nil)))

(note 266 59 57 6 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:152 data ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 57 266 267 6 arch/arm/kernel/swp_emulate.c:194 (set (reg/v:SI 6 r6 [orig:153 address ] [153])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [173])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:156 regs ] [156])) [0 <variable>.uregs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [173])
        (nil)))

(note 267 57 64 6 ( address (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 address ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 64 267 61 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:SI 3 r3 [orig:178 <variable>.addr_limit ] [178])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [176])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 61 64 65 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:SI 2 r2 [175])
        (and:SI (reg/v:SI 6 r6 [orig:153 address ] [153])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 65 61 269 6 arch/arm/kernel/swp_emulate.c:205 (parallel [
            (set (reg/v:SI 3 r3 [orig:149 flag ] [149])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg:SI 2 r2 [175])
                        (const_int 4 [0x4])
                        (reg/v:SI 3 r3 [orig:149 flag ] [149])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8651859))
            (set (reg/v:SI 1 r1 [orig:148 roksum ] [148])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg:SI 2 r2 [175])
                        (const_int 4 [0x4])
                        (reg/v:SI 3 r3 [orig:149 flag ] [149])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8651859))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 2 r2 [175])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(note 269 65 268 6 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:148 roksum ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 268 269 66 6 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:149 flag ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 66 268 67 6 arch/arm/kernel/swp_emulate.c:205 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:149 flag ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:149 flag ] [149])
        (nil)))

(jump_insn:TI 67 66 68 6 arch/arm/kernel/swp_emulate.c:205 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 22 7)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  22 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 69 68 270 7 arch/arm/kernel/swp_emulate.c:198 (set (reg/v:SI 8 r8 [orig:151 type ] [151])
        (and:SI (reg/v:SI 5 r5 [orig:157 instr ] [157])
            (const_int 4194304 [0x400000]))) 67 {*arm_andsi3_insn} (nil))

(note 270 69 70 7 ( type (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:151 type ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 70 270 71 7 arch/arm/kernel/swp_emulate.c:131 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:151 type ] [151])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 71 70 80 7 arch/arm/kernel/swp_emulate.c:131 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [72.0%] 
;; Succ edge  8 [28.0%]  (fallthru)

;; Start of basic block ( 9 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 10 [sl]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 10 [sl]
;; live  kill	

;; Pred edge  9 [50.0%] 
;; Pred edge  7 [28.0%]  (fallthru)
(code_label 80 71 72 8 23 "" [1 uses])

(note 72 80 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 74 72 224 8 NOTE_INSN_DELETED)

(insn:TI 224 74 271 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 271 224 211 8 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 211 271 212 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 10 sl [orig:139 D.26290 ] [139])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 212 211 244 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 10 sl [orig:139 D.26290 ] [139])
        (and:SI (reg/f:SI 10 sl [orig:139 D.26290 ] [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 244 212 245 8 (set (pc)
        (label_ref 88)) -1 (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 245 244 272)

(note 272 245 78 9 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:149 flag ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%] 
(code_label 78 272 79 9 21 "" [1 uses])

(note 79 78 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 81 79 82 9 NOTE_INSN_DELETED)

(insn:TI 82 81 83 9 arch/arm/kernel/swp_emulate.c:131 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:153 address ] [153])
                (const_int 2 [0x2])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 83 82 246 9 arch/arm/kernel/swp_emulate.c:131 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 8)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}

;; Pred edge  9 [50.0%]  (fallthru)
(note 246 83 247 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(jump_insn 247 246 248 10 (set (pc)
        (label_ref 165)) -1 (nil))
;; End of basic block 10 -> ( 22)


;; Succ edge  22 [100.0%] 

(barrier 248 247 273)

(note 273 248 88 11 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 16) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%] 
;; Pred edge  16 [100.0%]  (dfs_back)
(code_label 88 273 89 11 22 "" [2 uses])

(note 89 88 90 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 90 89 91 11 arch/arm/kernel/swp_emulate.c:146 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 8644303)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 91 90 92 11 arch/arm/kernel/swp_emulate.c:148 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:151 type ] [151])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 92 91 93 11 arch/arm/kernel/swp_emulate.c:148 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 97)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  13 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  11 [28.0%]  (fallthru)
(note 93 92 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 93 275 12 arch/arm/kernel/swp_emulate.c:149 (parallel [
            (set (reg/v:SI 3 r3 [orig:136 res ] [136])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrexb	%1, [%3]
1:	strexb	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=&r") 0 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644688))
            (set (reg/v:SI 7 r7 [orig:152 data ] [152])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrexb	%1, [%3]
1:	strexb	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=r") 1 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644688))
            (set (reg/v:SI 2 r2 [orig:137 temp ] [137])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrexb	%1, [%3]
1:	strexb	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=&r") 2 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644688))
            (clobber (mem:BLK (scratch) [0 A8]))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 2 r2 [orig:137 temp ] [137])
            (nil))))

(note 275 94 274 12 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 res ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 274 275 249 12 ( temp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 temp ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 249 274 250 12 (set (pc)
        (label_ref 100)) -1 (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%] 

(barrier 250 249 276)

(note 276 250 277 13 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(note 277 276 97 13 ( temp (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  11 [72.0%] 
(code_label 97 277 98 13 25 "" [1 uses])

(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 99 98 279 13 arch/arm/kernel/swp_emulate.c:151 (parallel [
            (set (reg/v:SI 3 r3 [orig:136 res ] [136])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrex	%1, [%3]
1:	strex	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=&r") 0 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644944))
            (set (reg/v:SI 7 r7 [orig:152 data ] [152])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrex	%1, [%3]
1:	strex	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=r") 1 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644944))
            (set (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
                (asm_operands/v:SI ("	mov		%2, %1
0:	ldrex	%1, [%3]
1:	strex	%0, %2, [%3]
	cmp		%0, #0
	movne		%0, %4
2:
	.section	 .fixup,"ax"
	.align		2
3:	mov		%0, %5
	b		2b
	.previous
	.section	 __ex_table,"a"
	.align		3
	.long		0b, 3b
	.long		1b, 3b
	.previous") ("=&r") 2 [
                        (reg/v:SI 6 r6 [orig:153 address ] [153])
                        (const_int -11 [0xfffffffffffffff5])
                        (const_int -14 [0xfffffffffffffff2])
                        (reg/v:SI 7 r7 [orig:152 data ] [152])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("i") 0)
                        (asm_input:SI ("1") 0)
                    ] 8644944))
            (clobber (mem:BLK (scratch) [0 A8]))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
            (nil))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%]  (fallthru)

(note 279 99 278 14 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 res ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 278 279 100 14 ( temp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 100 278 101 14 26 "" [1 uses])

(note 101 100 102 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 102 101 103 14 arch/arm/kernel/swp_emulate.c:153 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 res ] [136])
            (const_int -11 [0xfffffffffffffff5]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 103 102 104 14 arch/arm/kernel/swp_emulate.c:153 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 115)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 14 -> ( 17 15)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%]  (loop_exit)
;; Succ edge  15 [0.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  14 [0.0%]  (fallthru)
(note 104 103 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 108 104 105 15 NOTE_INSN_DELETED)

(insn:TI 105 108 280 15 include/linux/thread_info.h:84 (set (reg/f:SI 2 r2 [orig:181 <variable>.task ] [181])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 10 sl [orig:139 D.26290 ] [139])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/f:SI 10 sl [orig:139 D.26290 ] [139])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(note 280 105 106 15 ( temp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 106 280 107 15 include/linux/thread_info.h:84 (set (reg/f:SI 2 r2 [orig:141 D.26284 ] [141])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:181 <variable>.task ] [181])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 107 106 109 15 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [orig:140 D.26286 ] [140])
        (mem/v:SI (reg/f:SI 2 r2 [orig:141 D.26284 ] [141]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 107 110 15 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:140 D.26286 ] [140])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:140 D.26286 ] [140])
        (nil)))

(jump_insn:TI 110 109 111 15 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 15 -> ( 19 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [0.0%]  (loop_exit)
;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [100.0%]  (fallthru)
(note 111 110 112 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 112 111 282 16 arch/arm/kernel/swp_emulate.c:156 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_cond_resched") [flags 0x41] <function_decl 0x1111f080 _cond_resched>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(note 282 112 281 16 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(note 281 282 251 16 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 251 281 252 16 (set (pc)
        (label_ref 88)) -1 (nil))
;; End of basic block 16 -> ( 11)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%]  (dfs_back)

(barrier 252 251 283)

(note 283 252 284 17 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 res ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 284 283 285 17 ( temp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 285 284 286 17 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:148 roksum ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 286 285 115 17 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 14) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (loop_exit)
(code_label 115 286 116 17 27 "" [1 uses])

(note 116 115 118 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 118 116 119 17 arch/arm/kernel/swp_emulate.c:159 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 res ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 119 118 120 17 arch/arm/kernel/swp_emulate.c:159 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 120 119 121 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 121 120 192 18 arch/arm/kernel/swp_emulate.c:165 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 8646735)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 192 121 287 18 (set (reg/f:SI 2 r2 [198])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(note 287 192 122 18 ( temp (nil)) NOTE_INSN_VAR_LOCATION)

(insn 122 287 127 18 arch/arm/kernel/swp_emulate.c:167 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:151 type ] [151])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 127 122 288 18 arch/arm/kernel/swp_emulate.c:168 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [orig:185 swpbcounter ] [185])
            (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                    (const_int 8 [0x8])) [0 swpbcounter+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                (const_int 8 [0x8])) [0 swpbcounter+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 8 [0x8]))) [0 swpbcounter+0 S4 A32])
            (nil))))

(note 288 127 136 18 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 136 288 128 18 arch/arm/kernel/swp_emulate.c:170 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [orig:189 swpcounter ] [189])
            (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                    (const_int 12 [0xc])) [0 swpcounter+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                (const_int 12 [0xc])) [0 swpcounter+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 12 [0xc]))) [0 swpcounter+0 S4 A32])
            (nil))))

(insn:TI 128 136 137 18 arch/arm/kernel/swp_emulate.c:168 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [186])
            (plus:SI (reg:SI 1 r1 [orig:185 swpbcounter ] [185])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                (const_int 8 [0x8])) [0 swpbcounter+0 S4 A32])
        (nil)))

(insn:TI 137 128 129 18 arch/arm/kernel/swp_emulate.c:170 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [190])
            (plus:SI (reg:SI 1 r1 [orig:189 swpcounter ] [189])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                (const_int 12 [0xc])) [0 swpcounter+0 S4 A32])
        (nil)))

(insn 129 137 138 18 arch/arm/kernel/swp_emulate.c:168 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                    (const_int 8 [0x8])) [0 swpbcounter+0 S4 A32])
            (reg:SI 1 r1 [186]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 138 129 289 18 arch/arm/kernel/swp_emulate.c:170 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [198])
                    (const_int 12 [0xc])) [0 swpcounter+0 S4 A32])
            (reg:SI 1 r1 [190]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [198])
            (expr_list:REG_DEAD (reg:SI 1 r1 [190])
                (nil)))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%]  (fallthru)

(note 289 138 290 19 ( temp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 290 289 144 19 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:148 roksum ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 17 15 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  17 [50.0%] 
;; Pred edge  15 [0.0%]  (loop_exit)
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 144 290 145 19 30 "" [2 uses])

(note 145 144 150 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 150 145 151 19 arch/arm/kernel/swp_emulate.c:213 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 res ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 151 150 152 19 arch/arm/kernel/swp_emulate.c:213 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2200 [0x898])
            (nil))))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  20 [78.0%]  (fallthru)
;; Succ edge  21 [22.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  19 [78.0%]  (fallthru)
(note 152 151 156 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 156 152 153 20 NOTE_INSN_DELETED)

(insn:TI 153 156 291 20 arch/arm/kernel/swp_emulate.c:219 (set (reg:SI 3 r3 [orig:191 <variable>.uregs+60 ] [191])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(note 291 153 157 20 ( res (nil)) NOTE_INSN_VAR_LOCATION)

(insn 157 291 292 20 arch/arm/kernel/swp_emulate.c:220 (set (reg:SI 5 r5 [194])
        (zero_extract:SI (reg/v:SI 5 r5 [orig:157 instr ] [157])
            (const_int 4 [0x4])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(note 292 157 154 20 ( instr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 154 292 155 20 arch/arm/kernel/swp_emulate.c:219 (set (reg:SI 3 r3 [192])
        (plus:SI (reg:SI 3 r3 [orig:191 <variable>.uregs+60 ] [191])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 155 154 158 20 arch/arm/kernel/swp_emulate.c:219 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg:SI 3 r3 [192])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [192])
        (nil)))

(insn:TI 158 155 253 20 arch/arm/kernel/swp_emulate.c:220 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [194])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:156 regs ] [156])) [0 <variable>.uregs S4 A32])
        (reg/v:SI 7 r7 [orig:152 data ] [152])) 167 {*arm_movsi_insn} (nil))

(jump_insn 253 158 254 20 (set (pc)
        (label_ref 170)) -1 (nil))
;; End of basic block 20 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  23 [100.0%] 

(barrier 254 253 293)

(note 293 254 294 21 ( instr (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:157 instr ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 294 293 161 21 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 res ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [22.0%] 
(code_label 161 294 162 21 31 "" [1 uses])

(note 162 161 163 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 163 162 164 21 arch/arm/kernel/swp_emulate.c:221 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 res ] [136])
            (const_int -14 [0xfffffffffffffff2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:136 res ] [136])
        (nil)))

(jump_insn:TI 164 163 295 21 arch/arm/kernel/swp_emulate.c:221 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 170)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  22 (fallthru)
;; Succ edge  23 [100.0%] 

(note 295 164 165 22 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:149 flag ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 21 6 10) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  21 (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  10 [100.0%] 
(code_label 165 295 166 22 20 "" [2 uses])

(note 166 165 167 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 167 166 168 22 arch/arm/kernel/swp_emulate.c:226 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:156 regs ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 168 167 296 22 arch/arm/kernel/swp_emulate.c:226 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 address ] [153])) 167 {*arm_movsi_insn} (nil))

(note 296 168 169 22 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 169 296 299 22 arch/arm/kernel/swp_emulate.c:226 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_segfault") [flags 0x3] <function_decl 0x1149cf80 set_segfault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 299 169 298 22 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(note 298 299 297 22 ( temp (nil)) NOTE_INSN_VAR_LOCATION)

(note 297 298 300 22 ( res (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

(note 300 297 301 23 ( res (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 res ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 301 300 302 23 ( temp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 temp.420 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 302 301 303 23 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:148 roksum ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 303 302 170 23 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:156 regs ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 22 21 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
;; Pred edge  20 [100.0%] 
(code_label 170 303 171 23 32 "" [2 uses])

(note 171 170 176 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 176 171 182 23 arch/arm/kernel/swp_emulate.c:230 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 182 176 230 23 arch/arm/kernel/swp_emulate.c:230 (use (reg/i:SI 0 r0)) -1 (nil))

(note 230 182 231 23 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 231 230 232 23 arch/arm/kernel/swp_emulate.c:230 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 232 231 218)

(note 218 232 221 NOTE_INSN_DELETED)

(note 221 218 0 NOTE_INSN_DELETED)


;; Function proc_read_status (proc_read_status)[0:1323]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: page+0
Reg 1: start+0
Reg 2: off+0
Reg 3: count+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: eof
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])
  name: page
    offset 0
      (reg:SI 0 r0 [ page ])
  name: start
    offset 0
      (reg:SI 1 r1 [ start ])
  name: off
    offset 0
      (reg:SI 2 r2 [ off ])

OUT:
Stack adjustment: 32
Reg 4: p+0
Reg 5: off+0
Reg 6: start+0
Reg 7: page+0
Reg 8: count+0
Variables:
  name: p
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 p ] [137])
  name: page
    offset 0
      (reg/v/f:SI 7 r7 [orig:144 page ] [144])
  name: start
    offset 0
      (reg/v/f:SI 6 r6 [orig:145 start ] [145])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:146 off ] [146])
  name: count
    offset 0
      (reg/v:SI 8 r8 [orig:147 count ] [147])
  name: eof
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])


Basic block 3:
IN:
Stack adjustment: 32
Reg 4: p+0
Reg 5: off+0
Reg 6: start+0
Reg 7: page+0
Reg 8: count+0
Variables:
  name: p
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 p ] [137])
  name: page
    offset 0
      (reg/v/f:SI 7 r7 [orig:144 page ] [144])
  name: start
    offset 0
      (reg/v/f:SI 6 r6 [orig:145 start ] [145])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:146 off ] [146])
  name: count
    offset 0
      (reg/v:SI 8 r8 [orig:147 count ] [147])
  name: eof
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: p+0
Reg 5: off+0
Reg 6: start+0
Reg 7: page+0
Reg 8: count+0
Variables:
  name: p
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 p ] [137])
  name: page
    offset 0
      (reg/v/f:SI 7 r7 [orig:144 page ] [144])
  name: start
    offset 0
      (reg/v/f:SI 6 r6 [orig:145 start ] [145])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:146 off ] [146])
  name: count
    offset 0
      (reg/v:SI 8 r8 [orig:147 count ] [147])
  name: eof
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 32
Reg 4: p+0
Reg 5: off+0
Reg 6: start+0
Reg 7: page+0
Reg 8: count+0
Variables:
  name: p
    offset 0
      (reg/v/f:SI 4 r4 [orig:137 p ] [137])
  name: page
    offset 0
      (reg/v/f:SI 7 r7 [orig:144 page ] [144])
  name: start
    offset 0
      (reg/v/f:SI 6 r6 [orig:145 start ] [145])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:146 off ] [146])
  name: count
    offset 0
      (reg/v:SI 8 r8 [orig:147 count ] [147])
  name: eof
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 3: eof+0
Reg 6: start+0
Variables:
  name: start
    offset 0
      (reg/v/f:SI 6 r6 [orig:145 start ] [145])
  name: eof
    offset 0
      (reg/v/f:SI 3 r3 [orig:148 eof ] [148])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 eof+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 eof+0 S4 A32])
  name: data
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 data+0 S4 A32])


5 basic blocks, 5 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [29.0%]  (fallthru) 4 [71.0%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 2900, maybe hot.
Predecessors:  2 [29.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [71.0%]  3 [100.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8]
;; live  kill	 24 [cc]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




proc_read_status

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,12u} r1={9d,5u} r2={9d,6u} r3={6d,2u} r4={5d,10u} r5={3d,5u} r6={2d,3u} r7={3d,6u} r8={3d,4u} r9={1d,2u} r10={3d,6u} r12={4d} r13={2d,10u,1d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={6d,1u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 585{510d,74u,1e} in 37{33 regular + 4 call} insns.
(note 1 0 83 NOTE_INSN_DELETED)

(note 83 1 84 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 84 83 85 2 ( start (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ start ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 85 84 86 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 86 85 87 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 87 86 88 2 ( eof (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 eof+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 88 87 9 2 ( data (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 data+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 88 8 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 8 9 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 8 26 2 NOTE_INSN_DELETED)

(note 26 17 35 2 NOTE_INSN_DELETED)

(note 35 26 78 2 NOTE_INSN_DELETED)

(insn/f:TI 78 35 79 2 arch/arm/kernel/swp_emulate.c:83 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 79 78 12 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 12 79 3 2 arch/arm/kernel/swp_emulate.c:87 (set (reg/f:SI 4 r4 [151])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 3 12 4 2 arch/arm/kernel/swp_emulate.c:83 (set (reg/v/f:SI 6 r6 [orig:145 start ] [145])
        (reg:SI 1 r1 [ start ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ start ])
        (nil)))

(insn 4 3 14 2 arch/arm/kernel/swp_emulate.c:83 (set (reg/v:SI 5 r5 [orig:146 off ] [146])
        (reg:SI 2 r2 [ off ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ off ])
        (nil)))

(insn:TI 14 4 89 2 arch/arm/kernel/swp_emulate.c:87 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114cf0f0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114cf0f0>)
        (nil)))

(note 89 14 5 2 ( start (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:145 start ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 5 89 15 2 arch/arm/kernel/swp_emulate.c:83 (set (reg/v:SI 8 r8 [orig:147 count ] [147])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn:TI 15 5 90 2 arch/arm/kernel/swp_emulate.c:87 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [151])
                (const_int 12 [0xc])) [0 swpcounter+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 12 [0xc]))) [0 swpcounter+0 S4 A32])
        (nil)))

(note 90 15 2 2 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:146 off ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 2 90 16 2 arch/arm/kernel/swp_emulate.c:83 (set (reg/v/f:SI 7 r7 [orig:144 page ] [144])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 16 2 92 2 arch/arm/kernel/swp_emulate.c:87 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintf") [flags 0x41] <function_decl 0x5115e780 sprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 92 16 91 2 ( count (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:147 count ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 92 24 2 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:144 page ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 24 91 23 2 arch/arm/kernel/swp_emulate.c:88 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [151])
                (const_int 8 [0x8])) [0 swpbcounter+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 8 [0x8]))) [0 swpbcounter+0 S4 A32])
        (nil)))

(insn:TI 23 24 19 2 arch/arm/kernel/swp_emulate.c:88 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114cf2a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114cf2a0>)
        (nil)))

(insn:TI 19 23 93 2 arch/arm/kernel/swp_emulate.c:87 (set (reg/v/f:SI 10 sl [orig:135 p.446 ] [135])
        (plus:SI (reg/v/f:SI 7 r7 [orig:144 page ] [144])
            (reg:SI 0 r0))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 93 19 22 2 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:135 p.446 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 22 93 25 2 arch/arm/kernel/swp_emulate.c:88 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:135 p.446 ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 25 22 33 2 arch/arm/kernel/swp_emulate.c:88 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintf") [flags 0x41] <function_decl 0x5115e780 sprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 33 25 32 2 arch/arm/kernel/swp_emulate.c:89 (set (reg:SI 2 r2)
        (mem/c/i:SI (reg/f:SI 4 r4 [151]) [0 abtcounter+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 abtcounter+0 S4 A32])
        (nil)))

(insn:TI 32 33 28 2 arch/arm/kernel/swp_emulate.c:89 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11523330>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11523330>)
        (nil)))

(insn:TI 28 32 94 2 arch/arm/kernel/swp_emulate.c:88 (set (reg/v/f:SI 10 sl [orig:134 p.447 ] [134])
        (plus:SI (reg/v/f:SI 10 sl [orig:135 p.446 ] [135])
            (reg:SI 0 r0))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 94 28 31 2 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:134 p.447 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 31 94 34 2 arch/arm/kernel/swp_emulate.c:89 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:134 p.447 ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 34 31 39 2 arch/arm/kernel/swp_emulate.c:89 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintf") [flags 0x41] <function_decl 0x5115e780 sprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 34 40 2 arch/arm/kernel/swp_emulate.c:90 (set (reg:SI 2 r2 [orig:139 previous_pid.323 ] [139])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [151])
                (const_int 4 [0x4])) [0 previous_pid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [151])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 previous_pid+0 S4 A32])
            (nil))))

(insn:TI 40 39 37 2 arch/arm/kernel/swp_emulate.c:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:139 previous_pid.323 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 37 40 95 2 arch/arm/kernel/swp_emulate.c:89 (set (reg/v/f:SI 4 r4 [orig:137 p ] [137])
        (plus:SI (reg/v/f:SI 10 sl [orig:134 p.447 ] [134])
            (reg:SI 0 r0))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 95 37 41 2 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:137 p ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 41 95 42 2 arch/arm/kernel/swp_emulate.c:90 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  3 [29.0%]  (fallthru)
;; Succ edge  4 [71.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%]  (fallthru)
(note 42 41 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 48 42 44 3 NOTE_INSN_DELETED)

(insn:TI 44 48 45 3 arch/arm/kernel/swp_emulate.c:91 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:137 p ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 45 44 47 3 arch/arm/kernel/swp_emulate.c:91 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11523630>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11523630>)
        (nil)))

(call_insn:TI 47 45 50 3 arch/arm/kernel/swp_emulate.c:91 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintf") [flags 0x41] <function_decl 0x5115e780 sprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 50 47 51 3 arch/arm/kernel/swp_emulate.c:91 (set (reg/v/f:SI 4 r4 [orig:137 p ] [137])
        (plus:SI (reg/v/f:SI 4 r4 [orig:137 p ] [137])
            (reg:SI 0 r0))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8]
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 51 50 52 4 37 "" [1 uses])

(note 52 51 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 56 52 53 4 NOTE_INSN_DELETED)

(insn:TI 53 56 96 4 arch/arm/kernel/swp_emulate.c:93 (set (reg:SI 4 r4 [162])
        (minus:SI (reg/v/f:SI 4 r4 [orig:137 p ] [137])
            (reg/v/f:SI 7 r7 [orig:144 page ] [144]))) 28 {*arm_subsi3_insn} (nil))

(note 96 53 76 4 ( p (nil)) NOTE_INSN_VAR_LOCATION)

(insn 76 96 59 4 arch/arm/kernel/swp_emulate.c:97 (set (reg/v/f:SI 3 r3 [orig:148 eof ] [148])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 eof+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 eof+0 S4 A32])
        (nil)))

(insn:TI 59 76 97 4 arch/arm/kernel/swp_emulate.c:98 (set (reg:SI 7 r7 [164])
        (plus:SI (reg/v/f:SI 7 r7 [orig:144 page ] [144])
            (reg/v:SI 5 r5 [orig:146 off ] [146]))) 4 {*arm_addsi3} (nil))

(note 97 59 54 4 ( page (nil)) NOTE_INSN_VAR_LOCATION)

(insn 54 97 98 4 arch/arm/kernel/swp_emulate.c:93 (set (reg/v:SI 5 r5 [orig:136 len ] [136])
        (minus:SI (reg:SI 4 r4 [162])
            (reg/v:SI 5 r5 [orig:146 off ] [146]))) 28 {*arm_subsi3_insn} (nil))

(note 98 54 99 4 ( len (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:136 len ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 99 98 55 4 ( off (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 55 99 100 4 arch/arm/kernel/swp_emulate.c:93 (set (reg/v:SI 0 r0 [orig:133 len.448 ] [133])
        (smax:SI (reg/v:SI 5 r5 [orig:136 len ] [136])
            (const_int 0 [0x0]))) 101 {*smax_0} (nil))

(note 100 55 57 4 ( len (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:133 len.448 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 57 100 101 4 arch/arm/kernel/swp_emulate.c:97 (parallel [
            (set (reg:SI 8 r8 [163])
                (le:SI (reg/v:SI 0 r0 [orig:133 len.448 ] [133])
                    (reg/v:SI 8 r8 [orig:147 count ] [147])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(note 101 57 58 4 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn 58 101 60 4 arch/arm/kernel/swp_emulate.c:97 (set (mem:SI (reg/v/f:SI 3 r3 [orig:148 eof ] [148]) [0 S4 A32])
        (reg:SI 8 r8 [163])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:148 eof ] [148])
        (nil)))

(insn:TI 60 58 71 4 arch/arm/kernel/swp_emulate.c:98 (set (mem/f:SI (reg/v/f:SI 6 r6 [orig:145 start ] [145]) [0 S4 A32])
        (reg:SI 7 r7 [164])) 167 {*arm_movsi_insn} (nil))

(insn 71 60 102 4 arch/arm/kernel/swp_emulate.c:101 (use (reg/i:SI 0 r0)) -1 (nil))

(note 102 71 80 4 ( len (nil)) NOTE_INSN_VAR_LOCATION)

(note 80 102 81 4 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 81 80 82 4 arch/arm/kernel/swp_emulate.c:101 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 82 81 75)

(note 75 82 77 NOTE_INSN_DELETED)

(note 77 75 0 NOTE_INSN_DELETED)

