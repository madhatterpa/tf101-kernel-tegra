
;; Function regs_query_register_name (regs_query_register_name)[0:1537]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a6 (r171,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r168,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r171,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r171: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS

  a0(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r171,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 64(l0): point = 0
   Insn 58(l0): point = 2
   Insn 89(l0): point = 5
   Insn 47(l0): point = 7
   Insn 35(l0): point = 9
   Insn 31(l0): point = 11
   Insn 51(l1): point = 14
   Insn 50(l1): point = 16
   Insn 42(l1): point = 18
   Insn 48(l1): point = 20
   Insn 40(l1): point = 22
   Insn 44(l1): point = 25
   Insn 43(l1): point = 27
   Insn 41(l1): point = 29
 a0(r163): [3..4]
 a1(r171): [5..7]
 a2(r162): [5..9]
 a3(r166): [5..11]
 a4(r162): [14..31]
 a5(r166): [14..31]
 a6(r171): [14..31]
 a7(r163): [25..31] [14..20]
 a8(r168): [30..31] [14..22]
 a9(r164): [28..29]
 Rebuilding regno allocno list for 168
 Rebuilding regno allocno list for 164
Compressing live ranges: from 32 to 14 - 43%
Ranges after the compression:
 a0(r163): [9..13] [6..7] [0..1]
 a1(r171): [6..13] [2..3]
 a2(r162): [6..13] [2..4]
 a3(r166): [6..13] [2..5]
 a8(r168): [12..13] [6..8]
 a9(r164): [10..11]
+++Allocating 48 bytes for conflict table (uncompressed size 80)
;; a0(r163,l0) conflicts: a1(r171,l0) a2(r162,l0) a3(r166,l0) a8(r168,l0) a9(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r171,l0) conflicts: a0(r163,l0) a2(r162,l0) a3(r166,l0) a8(r168,l0) a9(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r162,l0) conflicts: a0(r163,l0) a1(r171,l0) a3(r166,l0) a8(r168,l0) a9(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r166,l0) conflicts: a0(r163,l0) a1(r171,l0) a2(r162,l0) a8(r168,l0) a9(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r168,l0) conflicts: a0(r163,l0) a1(r171,l0) a2(r162,l0) a3(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r164,l0) conflicts: a0(r163,l0) a1(r171,l0) a2(r162,l0) a3(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=2, blocks=6, points=14
    allocnos=10, copies=0, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r163 1r171 2r162 3r166 8r168 9r164
    modified regnos: 162 163 164 166 168 171
    border:
    Pressure: GENERAL_REGS=6
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
      Pushing a9(r164,l0)
      Pushing a8(r168,l0)
      Pushing a3(r166,l0)
      Pushing a1(r171,l0)
      Pushing a0(r163,l0)
      Pushing a2(r162,l0)
      Popping a2(r162,l0)  -- assign reg 3
      Popping a0(r163,l0)  -- assign reg 2
      Popping a1(r171,l0)  -- assign reg 1
      Popping a3(r166,l0)  -- assign reg 0
      Popping a8(r168,l0)  -- assign reg 12
      Popping a9(r164,l0)  -- assign reg 12
Disposition:
    2:r162 l0     3    0:r163 l0     2    9:r164 l0    12    3:r166 l0     0
    8:r168 l0    12    1:r171 l0     1
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=31, live_throughout: 13, 14, dead_or_set: 0, 166
insn=35, live_throughout: 13, 14, 166, dead_or_set: 162
insn=47, live_throughout: 13, 14, 162, 166, dead_or_set: 171
insn=89, live_throughout: 13, 14, 162, 166, 171, dead_or_set: 
insn=49, live_throughout: 13, 14, 162, 163, 166, 168, 171, dead_or_set: 
insn=41, live_throughout: 13, 14, 162, 163, 166, 171, dead_or_set: 164, 168
insn=43, live_throughout: 13, 14, 162, 163, 166, 171, dead_or_set: 164
insn=44, live_throughout: 13, 14, 162, 163, 166, 171, dead_or_set: 
insn=45, live_throughout: 13, 14, 162, 166, 171, dead_or_set: 
insn=40, live_throughout: 13, 14, 162, 166, 171, dead_or_set: 168
insn=48, live_throughout: 13, 14, 162, 166, 168, 171, dead_or_set: 163
insn=42, live_throughout: 13, 14, 163, 166, 168, 171, dead_or_set: 162
insn=50, live_throughout: 13, 14, 162, 163, 166, 168, 171, dead_or_set: 
insn=51, live_throughout: 13, 14, 162, 163, 166, 168, 171, dead_or_set: 
insn=52, live_throughout: 13, 14, 163, dead_or_set: 
insn=58, live_throughout: 13, 14, dead_or_set: 0, 163
insn=64, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 171: (insn_list:REG_DEP_TRUE 47 (nil))
changing reg in insn 42
changing reg in insn 35
changing reg in insn 48
changing reg in insn 40
changing reg in insn 42
changing reg in insn 48
changing reg in insn 40
changing reg in insn 48
changing reg in insn 58
changing reg in insn 50
changing reg in insn 41
changing reg in insn 43
changing reg in insn 31
changing reg in insn 43
changing reg in insn 40
changing reg in insn 41
changing reg in insn 47
changing reg in insn 48
changing reg in insn 40
deleting insn with uid = 31.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


regs_query_register_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 24[cc]
;;  ref usage 	r0={2d,3u} r1={2d,2u} r2={2d,2u} r3={3d,3u,2d} r12={3d,2u} r13={1d,5u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 38{16d,20u,2e} in 13{13 regular + 0 call} insns.
(note 30 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 30 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 35 2 NOTE_INSN_FUNCTION_BEG)

(insn 35 32 47 2 arch/arm/kernel/ptrace.c:111 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 47 35 89 2 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 89 47 90 2 arch/arm/kernel/ptrace.c:113 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 90 89 49)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [95.5%] 
(code_label 49 90 38 3 4 "" [1 uses])

(note 38 49 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 41 38 43 3 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [orig:164 D.26791 ] [164])
        (mem/s/j:SI (plus:SI (reg:SI 12 ip [168])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 43 41 44 3 arch/arm/kernel/ptrace.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:164 D.26791 ] [164])
            (reg/v:SI 0 r0 [orig:166 offset ] [166]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 45 3 arch/arm/kernel/ptrace.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [4.5%]  (loop_exit)
;; Succ edge  4 [95.5%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 45 44 46 4 2 "" [1 uses])

(note 46 45 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 40 46 48 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [168])
        (plus:SI (reg/f:SI 1 r1 [171])
            (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))
        (nil)))

(insn 48 40 42 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [171])
                (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 42 48 50 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 50 42 51 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  5 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (loop_exit)
;; Pred edge  4 [4.5%]  (fallthru,loop_exit)
(code_label 52 51 53 5 3 "" [1 uses])

(note 53 52 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 58 53 64 5 arch/arm/kernel/ptrace.c:117 (set (reg/i:SI 0 r0)
        (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])) 167 {*arm_movsi_insn} (nil))

(insn 64 58 91 5 arch/arm/kernel/ptrace.c:117 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 91 64 92 NOTE_INSN_DELETED)

(note 92 91 0 NOTE_INSN_DELETED)


;; Function regs_within_kernel_stack (regs_within_kernel_stack)[0:1538]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 25(l0): point = 0
   Insn 19(l0): point = 2
   Insn 30(l0): point = 4
   Insn 29(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
 a0(r139): [3..6]
 a1(r137): [7..8]
 a2(r138): [9..10]
Compressing live ranges: from 13 to 6 - 46%
Ranges after the compression:
 a0(r139): [0..1]
 a1(r137): [2..3]
 a2(r138): [4..5]
+++Allocating 0 bytes for conflict table (uncompressed size 24)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r138,l0) conflicts:
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14

  cp0:a1(r137)<->a2(r138)@125:shuffle
  cp1:a0(r139)<->a1(r137)@125:shuffle
  regions=1, blocks=3, points=6
    allocnos=3, copies=2, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r139 1r137 2r138
    modified regnos: 137 138 139
    border:
    Pressure: GENERAL_REGS=3
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 2 regs less
      Pushing a1(r137,l0)
      Pushing a0(r139,l0)
      Pushing a2(r138,l0)
      Popping a2(r138,l0)  -- assign reg 3
      Popping a0(r139,l0)  -- assign reg 0
      Popping a1(r137,l0)  -- assign reg 3
Disposition:
    1:r137 l0     3    2:r138 l0     3    0:r139 l0     0
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 1, 13, 14, dead_or_set: 0, 138
insn=8, live_throughout: 13, 14, dead_or_set: 1, 137, 138
insn=29, live_throughout: 13, 14, dead_or_set: 137, 139
insn=30, live_throughout: 13, 14, dead_or_set: 139
insn=19, live_throughout: 13, 14, dead_or_set: 0, 139
insn=25, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 8
changing reg in insn 29
changing reg in insn 7
changing reg in insn 8
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 19


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


regs_within_kernel_stack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 24[cc]
;;  ref usage 	r0={4d,5u} r1={1d,1u} r2={1d} r3={3d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r24={1d} 
;;    total ref usage 24{13d,11u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 7 2 NOTE_INSN_DELETED)

(insn 7 14 8 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 29 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [137])
        (xor:SI (reg:SI 1 r1 [ addr ])
            (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138]))) 96 {*arm_xorsi3} (nil))

(insn 29 8 30 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 30 29 19 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 0 r0 [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 30 25 2 arch/arm/kernel/ptrace.c:131 (parallel [
            (set (reg/i:SI 0 r0)
                (eq:SI (reg:SI 0 r0 [139])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 25 19 31 2 arch/arm/kernel/ptrace.c:131 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 31 25 32 NOTE_INSN_DELETED)

(note 32 31 0 NOTE_INSN_DELETED)


;; Function regs_get_kernel_stack_nth (regs_get_kernel_stack_nth)[0:1539]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 35(l0): point = 0
   Insn 29(l0): point = 2
   Insn 22(l0): point = 5
   Insn 39(l0): point = 8
   Insn 17(l0): point = 10
   Insn 15(l0): point = 13
   Insn 14(l0): point = 15
   Insn 42(l0): point = 17
   Insn 41(l0): point = 19
   Insn 11(l0): point = 21
   Insn 10(l0): point = 23
   Insn 3(l0): point = 25
   Insn 7(l0): point = 27
 a0(r136): [8..10] [3..5]
 a1(r134): [13..27] [6..7]
 a2(r139): [13..25] [6..7]
 a3(r142): [16..19]
 a4(r141): [20..21]
 a5(r133): [22..23]
Compressing live ranges: from 30 to 15 - 50%
Ranges after the compression:
 a0(r136): [4..5] [0..1]
 a1(r134): [6..14] [2..3]
 a2(r139): [6..13] [2..3]
 a3(r142): [7..8]
 a4(r141): [9..10]
 a5(r133): [11..12]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a2(r139,l0) a3(r142,l0) a4(r141,l0) a5(r133,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a2(r139,l0) conflicts: a1(r134,l0) a3(r142,l0) a4(r141,l0) a5(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r142,l0) conflicts: a2(r139,l0) a1(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r141,l0) conflicts: a2(r139,l0) a1(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r133,l0) conflicts: a2(r139,l0) a1(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a4(r141)<->a5(r133)@125:shuffle
  cp1:a3(r142)<->a4(r141)@125:shuffle
  regions=1, blocks=6, points=15
    allocnos=6, copies=2, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r136 1r134 2r139 3r142 4r141 5r133
    modified regnos: 133 134 136 139 141 142
    border:
    Pressure: GENERAL_REGS=4
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a5(r133,l0)
      Pushing a4(r141,l0)
      Pushing a2(r139,l0)
      Pushing a0(r136,l0)
      Pushing a3(r142,l0)
      Pushing a1(r134,l0)
      Popping a1(r134,l0)  -- assign reg 3
      Popping a3(r142,l0)  -- assign reg 2
      Popping a0(r136,l0)  -- assign reg 0
      Popping a2(r139,l0)  -- assign reg 1
      Popping a4(r141,l0)  -- assign reg 2
      Popping a5(r133,l0)  -- assign reg 2
Disposition:
    5:r133 l0     2    1:r134 l0     3    0:r136 l0     0    2:r139 l0     1
    4:r141 l0     2    3:r142 l0     2
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 1, 13, 14, dead_or_set: 0, 134
insn=3, live_throughout: 13, 14, 134, dead_or_set: 1, 139
insn=10, live_throughout: 13, 14, 134, 139, dead_or_set: 133
insn=11, live_throughout: 13, 14, 134, 139, dead_or_set: 133, 141
insn=41, live_throughout: 13, 14, 134, 139, dead_or_set: 141, 142
insn=42, live_throughout: 13, 14, 134, 139, dead_or_set: 142
insn=14, live_throughout: 13, 14, 134, 139, dead_or_set: 142
insn=15, live_throughout: 13, 14, 134, 139, dead_or_set: 
insn=17, live_throughout: 13, 14, dead_or_set: 136
insn=39, live_throughout: 13, 14, 136, dead_or_set: 
insn=20, live_throughout: 13, 14, 134, 139, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 134, 136, 139
insn=23, live_throughout: 13, 14, 136, dead_or_set: 
insn=29, live_throughout: 13, 14, dead_or_set: 0, 136
insn=35, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 10
changing reg in insn 11
changing reg in insn 7
changing reg in insn 10
changing reg in insn 22
changing reg in insn 11
changing reg in insn 22
changing reg in insn 17
changing reg in insn 29
changing reg in insn 3
changing reg in insn 10
changing reg in insn 22
changing reg in insn 11
changing reg in insn 41
changing reg in insn 42
changing reg in insn 41
changing reg in insn 42
changing reg in insn 14
deleting insn with uid = 3.
deleting insn with uid = 29.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


regs_get_kernel_stack_nth

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,3u} r1={1d,2u} r2={5d,4u} r3={2d,3u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 34{15d,19u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 12 2 NOTE_INSN_DELETED)

(note 12 9 7 2 NOTE_INSN_DELETED)

(insn 7 12 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:244 (set (reg:SI 3 r3 [orig:134 D.27412 ] [134])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 7 11 2 arch/arm/kernel/ptrace.c:145 (set (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
        (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 270 {*arith_shiftsi} (nil))

(insn 11 10 41 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [141])
        (xor:SI (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 96 {*arm_xorsi3} (nil))

(insn 41 11 42 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [141])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 42 41 14 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [142])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 42 15 2 arch/arm/kernel/ptrace.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 arch/arm/kernel/ptrace.c:146 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 39 3 arch/arm/kernel/ptrace.c:149 (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 39 17 40 3 (set (pc)
        (label_ref 23)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 40 39 20)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 20 40 21 4 12 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 arch/arm/kernel/ptrace.c:147 (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                    (const_int 4 [0x4]))
                (reg:SI 3 r3 [orig:134 D.27412 ] [134])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 23 22 24 5 13 "" [1 uses])

(note 24 23 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 35 24 43 5 arch/arm/kernel/ptrace.c:150 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 43 35 44 NOTE_INSN_DELETED)

(note 44 43 0 NOTE_INSN_DELETED)


;; Function ptrace_disable (ptrace_disable)[0:1542]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ptrace_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 10{7d,3u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 13 3 14 NOTE_INSN_DELETED)

(note 14 13 0 NOTE_INSN_DELETED)


;; Function ptrace_write_user (ptrace_write_user)[0:1547]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a4 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r172: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 96(l0): point = 0
   Insn 90(l0): point = 2
   Insn 83(l0): point = 5
   Insn 104(l0): point = 8
   Insn 78(l0): point = 10
   Insn 77(l0): point = 12
   Insn 74(l0): point = 15
   Insn 73(l0): point = 17
   Insn 72(l0): point = 19
   Insn 68(l0): point = 21
   Insn 65(l0): point = 23
   Insn 64(l0): point = 25
   Insn 59(l0): point = 28
   Insn 58(l0): point = 30
   Insn 57(l0): point = 32
   Insn 55(l0): point = 35
   Insn 54(l0): point = 37
   Insn 52(l0): point = 39
   Insn 51(l0): point = 41
   Insn 49(l0): point = 43
   Insn 45(l0): point = 45
   Insn 43(l0): point = 47
   Insn 38(l0): point = 49
   Insn 37(l0): point = 51
   Insn 44(l0): point = 53
   Insn 42(l0): point = 55
   Insn 35(l0): point = 57
   Insn 36(l0): point = 59
   Insn 102(l0): point = 62
   Insn 30(l0): point = 64
   Insn 28(l0): point = 67
   Insn 27(l0): point = 69
   Insn 100(l0): point = 72
   Insn 22(l0): point = 74
   Insn 20(l0): point = 77
   Insn 19(l0): point = 79
   Insn 18(l0): point = 81
   Insn 107(l0): point = 83
   Insn 4(l0): point = 85
   Insn 106(l0): point = 87
   Insn 2(l0): point = 89
   Insn 3(l0): point = 91
 a0(r134): [72..74] [62..64] [8..10] [3..5]
 a1(r133): [13..49]
 a2(r137): [13..57]
 a3(r141): [77..85] [67..71] [13..61]
 a4(r172): [18..19]
 a5(r168): [20..21]
 a6(r135): [20..32]
 a7(r166): [22..23]
 a8(r164): [24..25]
 a9(r136): [33..39]
 a10(r159): [42..43]
 a11(r152): [50..51]
 a12(r151): [52..59]
 a13(r140): [77..91] [67..71] [58..61]
 a14(r139): [77..89] [67..71] [60..61]
 a15(r150): [77..81] [65..71]
 a16(r144): [82..87]
Compressing live ranges: from 94 to 41 - 43%
Ranges after the compression:
 a0(r134): [32..33] [27..28] [2..3] [0..1]
 a1(r133): [4..18]
 a2(r137): [4..22]
 a3(r141): [34..37] [30..31] [4..26]
 a4(r172): [5..6]
 a5(r168): [7..8]
 a6(r135): [7..13]
 a7(r166): [9..10]
 a8(r164): [11..12]
 a9(r136): [14..15]
 a10(r159): [16..17]
 a11(r152): [19..20]
 a12(r151): [21..24]
 a13(r140): [34..40] [30..31] [23..26]
 a14(r139): [34..39] [30..31] [25..26]
 a15(r150): [34..35] [29..31]
 a16(r144): [36..38]
+++Allocating 136 bytes for conflict table (uncompressed size 136)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts: a2(r137,l0) a3(r141,l0) a4(r172,l0) a5(r168,l0) a6(r135,l0) a7(r166,l0) a8(r164,l0) a9(r136,l0) a10(r159,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r137,l0) conflicts: a1(r133,l0) a3(r141,l0) a4(r172,l0) a5(r168,l0) a6(r135,l0) a7(r166,l0) a8(r164,l0) a9(r136,l0) a10(r159,l0) a11(r152,l0) a12(r151,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r141,l0) conflicts: a1(r133,l0) a2(r137,l0) a4(r172,l0) a5(r168,l0) a6(r135,l0) a7(r166,l0) a8(r164,l0) a9(r136,l0) a10(r159,l0) a11(r152,l0) a12(r151,l0) a13(r140,l0) a14(r139,l0) a15(r150,l0) a16(r144,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r172,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r168,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r135,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0) a5(r168,l0) a7(r166,l0) a8(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r166,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r164,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r136,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r159,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r152,l0) conflicts: a2(r137,l0) a3(r141,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a12(r151,l0) conflicts: a2(r137,l0) a3(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a13(r140,l0) conflicts: a3(r141,l0) a12(r151,l0) a14(r139,l0) a15(r150,l0) a16(r144,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a14(r139,l0) conflicts: a3(r141,l0) a13(r140,l0) a15(r150,l0) a16(r144,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a15(r150,l0) conflicts: a3(r141,l0) a13(r140,l0) a14(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r144,l0) conflicts: a3(r141,l0) a13(r140,l0) a14(r139,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14

  cp0:a5(r168)<->a7(r166)@125:shuffle
  cp1:a4(r172)<->a5(r168)@125:shuffle
  cp2:a4(r172)<->a6(r135)@125:shuffle
  cp3:a6(r135)<->a9(r136)@125:shuffle
  cp4:a2(r137)<->a13(r140)@125:shuffle
  cp5:a11(r152)<->a12(r151)@125:shuffle
  cp6:a1(r133)<->a11(r152)@125:shuffle
  cp7:a0(r134)<->a15(r150)@1000:move
  cp8:a15(r150)<->a16(r144)@125:shuffle
  regions=1, blocks=12, points=41
    allocnos=17, copies=9, conflicts=0, ranges=27

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 11 10 9 8 7 6 5 4 3 2
    all: 0r134 1r133 2r137 3r141 4r172 5r168 6r135 7r166 8r164 9r136 10r159 11r152 12r151 13r140 14r139 15r150 16r144
    modified regnos: 133 134 135 136 137 139 140 141 144 150 151 152 159 164 166 168 172
    border:
    Pressure: GENERAL_REGS=7
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 151 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
      Pushing a10(r159,l0)
      Pushing a8(r164,l0)
      Pushing a7(r166,l0)
      Pushing a5(r168,l0)
      Pushing a4(r172,l0)
      Pushing a15(r150,l0)
      Pushing a9(r136,l0)
      Pushing a6(r135,l0)
      Pushing a0(r134,l0)
      Pushing a14(r139,l0)
      Pushing a12(r151,l0)
      Pushing a11(r152,l0)
      Pushing a16(r144,l0)
      Pushing a13(r140,l0)
      Pushing a3(r141,l0)
      Pushing a2(r137,l0)
      Pushing a1(r133,l0)
      Popping a1(r133,l0)  -- assign reg 4
      Popping a2(r137,l0)  -- assign reg 5
      Popping a3(r141,l0)  -- assign reg 6
      Popping a13(r140,l0)  -- assign reg 1
      Popping a16(r144,l0)  -- assign reg 3
      Popping a11(r152,l0)  -- assign reg 4
      Popping a12(r151,l0)  -- assign reg 4
      Popping a14(r139,l0)  -- assign reg 0
      Popping a0(r134,l0)  -- assign reg 0
      Popping a6(r135,l0)  -- assign reg 3
      Popping a9(r136,l0)  -- assign reg 3
      Popping a15(r150,l0)  -- assign reg 3
      Popping a4(r172,l0)  -- assign reg 3
      Popping a5(r168,l0)  -- assign reg 2
      Popping a7(r166,l0)  -- assign reg 2
      Popping a8(r164,l0)  -- assign reg 2
      Popping a10(r159,l0)  -- assign reg 3
Disposition:
    1:r133 l0     4    0:r134 l0     0    6:r135 l0     3    9:r136 l0     3
    2:r137 l0     5   14:r139 l0     0   13:r140 l0     1    3:r141 l0     6
   16:r144 l0     3   15:r150 l0     3   12:r151 l0     4   11:r152 l0     4
   10:r159 l0     3    8:r164 l0     2    7:r166 l0     2    5:r168 l0     2
    4:r172 l0     3
New iteration of spill/restore move
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 140
insn=2, live_throughout: 2, 13, 14, 140, dead_or_set: 0, 139
insn=106, live_throughout: 2, 13, 14, 139, 140, dead_or_set: 144
insn=4, live_throughout: 13, 14, 24, 139, 140, 144, dead_or_set: 2, 141
insn=107, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 144
insn=18, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 144, 150
insn=19, live_throughout: 13, 14, 139, 140, 141, 150, dead_or_set: 
insn=20, live_throughout: 13, 14, 139, 140, 141, 150, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 134
insn=100, live_throughout: 13, 14, 134, dead_or_set: 
insn=25, live_throughout: 13, 14, 139, 140, 141, 150, dead_or_set: 
insn=27, live_throughout: 13, 14, 139, 140, 141, 150, dead_or_set: 
insn=28, live_throughout: 13, 14, 139, 140, 141, 150, dead_or_set: 
insn=30, live_throughout: 13, 14, dead_or_set: 134, 150
insn=102, live_throughout: 13, 14, 134, dead_or_set: 
insn=33, live_throughout: 13, 139, 140, 141, dead_or_set: 
insn=36, live_throughout: 13, 140, 141, dead_or_set: 139, 151
insn=35, live_throughout: 13, 141, 151, dead_or_set: 137, 140
insn=42, live_throughout: 13, 137, 141, 151, dead_or_set: 0
insn=44, live_throughout: 0, 13, 137, 141, 151, dead_or_set: 2
insn=37, live_throughout: 0, 2, 13, 137, 141, dead_or_set: 151, 152
insn=38, live_throughout: 0, 2, 13, 137, 141, dead_or_set: 133, 152
insn=43, live_throughout: 0, 2, 13, 133, 137, 141, dead_or_set: 1
insn=45, live_throughout: 13, 133, 137, 141, dead_or_set: 0, 1, 2, 14
insn=49, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 159
insn=51, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 159
insn=52, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 136
insn=54, live_throughout: 13, 14, 133, 136, 137, 141, dead_or_set: 
insn=55, live_throughout: 13, 14, 133, 136, 137, 141, dead_or_set: 
insn=57, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 135, 136
insn=58, live_throughout: 13, 14, 133, 135, 137, 141, dead_or_set: 
insn=59, live_throughout: 13, 14, 133, 135, 137, 141, dead_or_set: 
insn=64, live_throughout: 13, 14, 133, 135, 137, 141, dead_or_set: 164
insn=65, live_throughout: 13, 14, 133, 135, 137, 141, dead_or_set: 164, 166
insn=68, live_throughout: 13, 14, 133, 135, 137, 141, dead_or_set: 166, 168
insn=72, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 135, 168, 172
insn=73, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 172
insn=74, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 
insn=75, live_throughout: 13, 14, 133, 137, 141, dead_or_set: 
insn=77, live_throughout: 13, 14, dead_or_set: 133, 137, 141
insn=78, live_throughout: 13, 14, dead_or_set: 134
insn=104, live_throughout: 13, 14, 134, dead_or_set: 
insn=81, live_throughout: 13, 14, dead_or_set: 
insn=83, live_throughout: 13, 14, dead_or_set: 134
insn=84, live_throughout: 13, 14, 134, dead_or_set: 
insn=90, live_throughout: 13, 14, dead_or_set: 0, 134
insn=96, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 164: (insn_list:REG_DEP_TRUE 64 (nil))
changing reg in insn 38
changing reg in insn 43
changing reg in insn 77
changing reg in insn 30
changing reg in insn 83
changing reg in insn 78
changing reg in insn 22
changing reg in insn 90
changing reg in insn 57
changing reg in insn 72
changing reg in insn 58
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 35
changing reg in insn 49
changing reg in insn 77
changing reg in insn 2
changing reg in insn 36
changing reg in insn 3
changing reg in insn 106
changing reg in insn 106
changing reg in insn 18
changing reg in insn 35
changing reg in insn 27
changing reg in insn 4
changing reg in insn 51
changing reg in insn 77
changing reg in insn 107
changing reg in insn 106
changing reg in insn 107
changing reg in insn 18
changing reg in insn 18
changing reg in insn 30
changing reg in insn 19
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 37
changing reg in insn 38
changing reg in insn 49
changing reg in insn 51
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 68
changing reg in insn 68
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
Spilling for insn 49.
Using reg 2 for reload 0
Spilling for insn 51.
Spilling for insn 77.

Reloads for insn # 49
Reload 0: reload_in (SI) = (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 72 [0x48]))
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 72 [0x48]))
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 51
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg:SI 3 r3 [159])
                                                        (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg:SI 3 r3 [159])
                                                        (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])

Reloads for insn # 77
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) [0 <variable>.uregs S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) [0 <variable>.uregs S4 A32])
deleting insn with uid = 3.
deleting insn with uid = 2.
deleting insn with uid = 90.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 45.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)


ptrace_write_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,4u} r1={3d,6u} r2={7d,6u} r3={9d,10u} r4={3d,4u,1d} r5={1d,2u} r6={1d,2u} r12={2d} r13={1d,15u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,6u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 212{155d,56u,1e} in 40{39 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 12 2 NOTE_INSN_DELETED)

(note 12 9 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 106 2 NOTE_INSN_DELETED)

(insn 106 17 4 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [144])
                (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 4 106 107 2 arch/arm/kernel/ptrace.c:280 (set (reg/v:SI 6 r6 [orig:141 val ] [141])
        (reg:SI 2 r2 [ val ])) 167 {*arm_movsi_insn} (nil))

(insn 107 4 18 2 arch/arm/kernel/ptrace.c:281 (set (reg:SI 3 r3 [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [144])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (nil))

(insn 18 107 19 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:SI 3 r3 [150])
                (ior:SI (geu:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 296 [0x128]))
                    (reg:SI 3 r3 [144])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 19 18 20 2 arch/arm/kernel/ptrace.c:281 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 20 19 21 2 arch/arm/kernel/ptrace.c:281 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 100 3 arch/arm/kernel/ptrace.c:282 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -5 [0xfffffffffffffffb])
        (nil)))

(jump_insn 100 22 101 3 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 101 100 25)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 25 101 26 4 18 "" [1 uses])

(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 4 arch/arm/kernel/ptrace.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 28 27 29 4 arch/arm/kernel/ptrace.c:284 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 102 5 arch/arm/kernel/ptrace.c:285 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 102 30 103 5 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 103 102 33)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [61.0%] 
(code_label 33 103 34 6 20 "" [1 uses])

(note 34 33 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 39 34 48 6 NOTE_INSN_DELETED)

(note 48 39 50 6 NOTE_INSN_DELETED)

(note 50 48 53 6 NOTE_INSN_DELETED)

(note 53 50 36 6 NOTE_INSN_DELETED)

(insn 36 53 35 6 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 35 36 42 6 arch/arm/kernel/ptrace.c:287 (set (reg:SI 5 r5 [orig:137 D.26920 ] [137])
        (lshiftrt:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 42 35 44 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 44 42 37 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 37 44 38 6 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [152])
        (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn 38 37 43 6 arch/arm/kernel/ptrace.c:172 (set (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
        (plus:SI (reg/f:SI 4 r4 [152])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8112 [0x1fb0]))
        (nil)))

(insn 43 38 45 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 43 110 6 arch/arm/kernel/ptrace.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 110 45 49 6 arch/arm/kernel/ptrace.c:176 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 72 [0x48]))) 4 {*arm_addsi3} (nil))

(insn 49 110 51 6 arch/arm/kernel/ptrace.c:176 (set (reg:SI 3 r3 [159])
        (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                (const_int 4 [0x4]))
            (reg:SI 2 r2))) 270 {*arith_shiftsi} (nil))

(insn 51 49 52 6 arch/arm/kernel/ptrace.c:176 (set (mem/s/j:SI (plus:SI (reg:SI 3 r3 [159])
                (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 54 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 3 r3 [orig:136 D.27452 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 54 52 55 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 55 54 56 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 3 r3 [orig:135 mode ] [135])
        (and:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 58 57 59 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 59 58 60 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [28.0%] 
;; Succ edge  8 [72.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  7 [72.0%]  (fallthru)
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 8 NOTE_INSN_DELETED)

(note 62 61 66 8 NOTE_INSN_DELETED)

(note 66 62 70 8 NOTE_INSN_DELETED)

(note 70 66 71 8 NOTE_INSN_DELETED)

(note 71 70 64 8 NOTE_INSN_DELETED)

(insn 64 71 65 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 2 r2 [164])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn 65 64 68 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
        (mem/c/i:SI (reg/f:SI 2 r2 [164]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 68 65 72 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [168])
        (zero_extract:SI (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 72 68 73 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 3 r3 [172])
                (and:SI (eq:SI (reg/v:SI 3 r3 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 2 r2 [168])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 73 72 74 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 74 73 75 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [28.0%] 
;; Pred edge  8 [50.0%]  (fallthru)
(code_label 75 74 76 9 22 "" [1 uses])

(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 9 arch/arm/kernel/ptrace.c:179 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) [0 <variable>.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 104 9 arch/arm/kernel/ptrace.c:180 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 104 78 105 9 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 105 104 81)

;; Start of basic block ( 6 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  8 [50.0%] 
(code_label 81 105 82 10 21 "" [2 uses])

(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 84 10 arch/arm/kernel/ptrace.c:173 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 5 3 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  3 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 84 83 85 11 19 "" [3 uses])

(note 85 84 96 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 96 85 108 11 arch/arm/kernel/ptrace.c:288 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 108 96 109 NOTE_INSN_DELETED)

(note 109 108 0 NOTE_INSN_DELETED)


;; Function task_user_regset_view (task_user_regset_view)[0:1563]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 18(l0): point = 0
   Insn 12(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=2
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 13, 14, dead_or_set: 0
insn=18, live_throughout: 0, 13, 14, dead_or_set: 


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


task_user_regset_view

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 13{8d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 12 2 NOTE_INSN_DELETED)

(insn 12 7 18 2 arch/arm/kernel/ptrace.c:786 (set (reg/i:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn 18 12 22 2 arch/arm/kernel/ptrace.c:786 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 22 18 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)


;; Function ptrace_break_init (ptrace_break_init)[0:1545] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 26(l0): point = 0
   Insn 20(l0): point = 2
   Insn 15(l0): point = 4
   Insn 14(l0): point = 6
   Insn 11(l0): point = 8
   Insn 10(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 5(l0): point = 16
 a0(r134): [7..16]
Compressing live ranges: from 19 to 2 - 10%
Ranges after the compression:
 a0(r134): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r134
    modified regnos: 134
    border:
    Pressure: GENERAL_REGS=3
    Reg 134 of GENERAL_REGS has 2 regs less
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 4
Disposition:
    0:r134 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 134
insn=6, live_throughout: 13, 134, dead_or_set: 0
insn=7, live_throughout: 13, 134, dead_or_set: 0, 14
insn=10, live_throughout: 13, 134, dead_or_set: 0
insn=11, live_throughout: 13, 134, dead_or_set: 0, 14
insn=14, live_throughout: 13, dead_or_set: 0, 134
insn=15, live_throughout: 13, dead_or_set: 0, 14
insn=20, live_throughout: 13, 14, dead_or_set: 0
insn=26, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 134: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 5
changing reg in insn 14
changing reg in insn 10
changing reg in insn 6


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ptrace_break_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r3={4d} r4={1d,3u} r12={4d} r13={1d,5u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 377{363d,14u,0e} in 9{6 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 13 2 NOTE_INSN_DELETED)

(note 13 9 16 2 NOTE_INSN_DELETED)

(note 16 13 5 2 NOTE_INSN_DELETED)

(insn 5 16 6 2 arch/arm/kernel/ptrace.c:241 (set (reg/f:SI 4 r4 [134])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/ptrace.c:241 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 7 6 10 2 arch/arm/kernel/ptrace.c:241 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 10 7 11 2 arch/arm/kernel/ptrace.c:242 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn 11 10 14 2 arch/arm/kernel/ptrace.c:242 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 11 15 2 arch/arm/kernel/ptrace.c:243 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 56 [0x38])))
        (nil)))

(call_insn 15 14 20 2 arch/arm/kernel/ptrace.c:243 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 15 26 2 arch/arm/kernel/ptrace.c:245 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 20 30 2 arch/arm/kernel/ptrace.c:245 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 30 26 31 NOTE_INSN_DELETED)

(note 31 30 0 NOTE_INSN_DELETED)


;; Function syscall_trace (syscall_trace)[0:1565]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r177,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a7(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r177,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a7(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 94(l0): point = 0
   Insn 88(l0): point = 2
   Insn 81(l0): point = 5
   Insn 101(l0): point = 7
   Insn 77(l0): point = 9
   Insn 100(l0): point = 11
   Insn 74(l0): point = 14
   Insn 73(l0): point = 16
   Insn 72(l0): point = 18
   Insn 68(l0): point = 20
   Insn 67(l0): point = 22
   Insn 66(l0): point = 24
   Insn 65(l0): point = 26
   Insn 56(l0): point = 29
   Insn 55(l0): point = 31
   Insn 54(l0): point = 33
   Insn 53(l0): point = 35
   Insn 49(l0): point = 37
   Insn 48(l0): point = 39
   Insn 37(l0): point = 41
   Insn 35(l0): point = 43
   Insn 26(l0): point = 45
   Insn 25(l0): point = 47
   Insn 30(l0): point = 49
   Insn 23(l0): point = 52
   Insn 22(l0): point = 54
   Insn 20(l0): point = 56
   Insn 19(l0): point = 58
   Insn 14(l0): point = 61
   Insn 13(l0): point = 63
   Insn 11(l0): point = 65
   Insn 4(l0): point = 67
   Insn 3(l0): point = 69
   Insn 103(l0): point = 71
   Insn 2(l0): point = 73
   Insn 102(l0): point = 75
 a0(r149): [50..67] [3..5]
 a1(r177): [6..11]
 a2(r148): [10..69]
 a3(r144): [10..47]
 a4(r175): [15..18]
 a5(r176): [15..16]
 a6(r141): [19..75]
 a7(r166): [25..35]
 a8(r167): [27..33]
 a9(r163): [42..43]
 a10(r154): [44..58]
 a11(r147): [46..73]
 a12(r156): [55..56]
 a13(r142): [64..65]
Compressing live ranges: from 78 to 28 - 35%
Ranges after the compression:
 a0(r149): [18..24] [0..1]
 a1(r177): [2..4]
 a2(r148): [3..25]
 a3(r144): [3..17]
 a4(r175): [5..7]
 a5(r176): [5..6]
 a6(r141): [8..27]
 a7(r166): [9..12]
 a8(r167): [10..11]
 a9(r163): [13..14]
 a10(r154): [15..21]
 a11(r147): [16..26]
 a12(r156): [19..20]
 a13(r142): [22..23]
+++Allocating 112 bytes for conflict table (uncompressed size 112)
;; a0(r149,l0) conflicts: a2(r148,l0) a6(r141,l0) a10(r154,l0) a11(r147,l0) a12(r156,l0) a13(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r177,l0) conflicts: a3(r144,l0) a2(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r148,l0) conflicts: a0(r149,l0) a1(r177,l0) a3(r144,l0) a5(r176,l0) a4(r175,l0) a6(r141,l0) a7(r166,l0) a8(r167,l0) a9(r163,l0) a10(r154,l0) a11(r147,l0) a12(r156,l0) a13(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r144,l0) conflicts: a1(r177,l0) a2(r148,l0) a5(r176,l0) a4(r175,l0) a6(r141,l0) a7(r166,l0) a8(r167,l0) a9(r163,l0) a10(r154,l0) a11(r147,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r175,l0) conflicts: a3(r144,l0) a2(r148,l0) a5(r176,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r176,l0) conflicts: a3(r144,l0) a2(r148,l0) a4(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r141,l0) conflicts: a0(r149,l0) a3(r144,l0) a2(r148,l0) a7(r166,l0) a8(r167,l0) a9(r163,l0) a10(r154,l0) a11(r147,l0) a12(r156,l0) a13(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r166,l0) conflicts: a3(r144,l0) a2(r148,l0) a6(r141,l0) a8(r167,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a8(r167,l0) conflicts: a3(r144,l0) a2(r148,l0) a6(r141,l0) a7(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r163,l0) conflicts: a3(r144,l0) a2(r148,l0) a6(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r154,l0) conflicts: a0(r149,l0) a3(r144,l0) a2(r148,l0) a6(r141,l0) a11(r147,l0) a12(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r147,l0) conflicts: a0(r149,l0) a3(r144,l0) a2(r148,l0) a6(r141,l0) a10(r154,l0) a12(r156,l0) a13(r142,l0)
;;     total conflict hard regs: 1 2 14
;;     conflict hard regs: 1 2 14
;; a12(r156,l0) conflicts: a0(r149,l0) a2(r148,l0) a6(r141,l0) a10(r154,l0) a11(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r142,l0) conflicts: a0(r149,l0) a2(r148,l0) a6(r141,l0) a11(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=8, points=28
    allocnos=14, copies=0, conflicts=0, ranges=15

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r149 1r177 2r148 3r144 4r175 5r176 6r141 7r166 8r167 9r163 10r154 11r147 12r156 13r142
    modified regnos: 141 142 144 147 148 149 154 156 163 166 167 175 176 177
    border:
    Pressure: GENERAL_REGS=7
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 166 of GENERAL_REGS has 2 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 3 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
      Pushing a9(r163,l0)
      Pushing a13(r142,l0)
      Pushing a12(r156,l0)
      Pushing a5(r176,l0)
      Pushing a4(r175,l0)
      Pushing a10(r154,l0)
      Pushing a8(r167,l0)
      Pushing a1(r177,l0)
      Pushing a0(r149,l0)
      Pushing a7(r166,l0)
      Pushing a11(r147,l0)
      Pushing a3(r144,l0)
      Pushing a2(r148,l0)
      Pushing a6(r141,l0)
      Popping a6(r141,l0)  -- assign reg 4
      Popping a2(r148,l0)  -- assign reg 5
      Popping a3(r144,l0)  -- assign reg 6
      Popping a11(r147,l0)  -- assign reg 3
      Popping a7(r166,l0)  -- assign reg 1
      Popping a0(r149,l0)  -- assign reg 2
      Popping a1(r177,l0)  -- assign reg 3
      Popping a8(r167,l0)  -- assign reg 0
      Popping a10(r154,l0)  -- assign reg 1
      Popping a4(r175,l0)  -- assign reg 3
      Popping a5(r176,l0)  -- assign reg 2
      Popping a12(r156,l0)  -- assign reg 0
      Popping a13(r142,l0)  -- assign reg 1
      Popping a9(r163,l0)  -- assign reg 3
Disposition:
    6:r141 l0     4   13:r142 l0     1    3:r144 l0     6   11:r147 l0     3
    2:r148 l0     5    0:r149 l0     2   10:r154 l0     1   12:r156 l0     0
    9:r163 l0     3    7:r166 l0     1    8:r167 l0     0    4:r175 l0     3
    5:r176 l0     2    1:r177 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=102, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 141
insn=2, live_throughout: 1, 2, 13, 14, 141, dead_or_set: 0, 147
insn=103, live_throughout: 1, 2, 13, 14, 147, dead_or_set: 141
insn=3, live_throughout: 2, 13, 14, 141, 147, dead_or_set: 1, 148
insn=4, live_throughout: 13, 14, 141, 147, 148, dead_or_set: 2, 149
insn=11, live_throughout: 13, 14, 141, 147, 148, 149, dead_or_set: 142
insn=13, live_throughout: 13, 14, 141, 147, 148, 149, dead_or_set: 142
insn=14, live_throughout: 13, 14, 141, 147, 148, 149, dead_or_set: 
insn=19, live_throughout: 13, 14, 141, 147, 148, 149, dead_or_set: 154
insn=20, live_throughout: 13, 14, 141, 147, 148, 149, 154, dead_or_set: 156
insn=22, live_throughout: 13, 14, 141, 147, 148, 149, 154, dead_or_set: 156
insn=23, live_throughout: 13, 14, 141, 147, 148, 149, 154, dead_or_set: 
insn=30, live_throughout: 13, 141, 147, 148, 154, dead_or_set: 149
insn=25, live_throughout: 13, 141, 147, 148, 154, dead_or_set: 144
insn=26, live_throughout: 13, 141, 144, 148, 154, dead_or_set: 147
insn=35, live_throughout: 13, 141, 144, 148, dead_or_set: 154, 163
insn=37, live_throughout: 13, 141, 144, 148, dead_or_set: 163
insn=48, live_throughout: 13, 141, 144, 148, dead_or_set: 0
insn=49, live_throughout: 13, 141, 144, 148, dead_or_set: 0, 14
insn=53, live_throughout: 13, 14, 141, 144, 148, dead_or_set: 166
insn=54, live_throughout: 13, 14, 141, 144, 148, 166, dead_or_set: 167
insn=55, live_throughout: 13, 14, 141, 144, 148, 166, 167, dead_or_set: 
insn=56, live_throughout: 13, 14, 141, 144, 148, 166, 167, dead_or_set: 
insn=65, live_throughout: 13, 141, 144, 148, 166, dead_or_set: 0, 167
insn=66, live_throughout: 0, 13, 141, 144, 148, dead_or_set: 1, 166
insn=67, live_throughout: 0, 1, 13, 141, 144, 148, dead_or_set: 2
insn=68, live_throughout: 13, 141, 144, 148, dead_or_set: 0, 1, 2, 14
insn=72, live_throughout: 13, 14, 144, 148, dead_or_set: 141, 175
insn=73, live_throughout: 13, 14, 144, 148, 175, dead_or_set: 176
insn=74, live_throughout: 13, 14, 144, 148, dead_or_set: 175, 176
insn=75, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=100, live_throughout: 13, 14, 144, 148, dead_or_set: 177
insn=77, live_throughout: 13, 14, 177, dead_or_set: 144, 148
insn=101, live_throughout: 13, 14, dead_or_set: 177
insn=81, live_throughout: 13, 14, dead_or_set: 149, 177
insn=82, live_throughout: 13, 14, 149, dead_or_set: 
insn=88, live_throughout: 13, 14, dead_or_set: 0, 149
insn=94, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 156: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 73 (nil))
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 72
changing reg in insn 53
changing reg in insn 30
changing reg in insn 19
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 25
changing reg in insn 77
changing reg in insn 2
changing reg in insn 26
changing reg in insn 3
changing reg in insn 77
changing reg in insn 26
changing reg in insn 25
changing reg in insn 81
changing reg in insn 4
changing reg in insn 88
changing reg in insn 30
changing reg in insn 19
changing reg in insn 35
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 35
changing reg in insn 37
changing reg in insn 53
changing reg in insn 66
changing reg in insn 54
changing reg in insn 54
changing reg in insn 65
changing reg in insn 55
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 101
changing reg in insn 100
changing reg in insn 101
changing reg in insn 81
Spilling for insn 102.
Using reg 3 for reload 0
Spilling for insn 30.
Spilling for insn 26.
Spilling for insn 74.
Spilling for insn 100.
Using reg 2 for reload 0
Spilling for insn 77.

Reloads for insn # 102
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                                                        (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                                                        (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])

Reloads for insn # 26
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])

Reloads for insn # 74
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
                                                        (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
                                                        (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])

Reloads for insn # 100
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 77
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                                                        (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
deleting insn with uid = 4.
deleting insn with uid = 65.
deleting insn with uid = 66.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 68.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


syscall_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={6d,6u,1d} r2={7d,5u} r3={9d,6u} r4={2d,6u} r5={1d,3u} r6={1d,1u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 317{266d,50u,1e} in 35{33 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 12 2 NOTE_INSN_DELETED)

(note 12 9 106 2 NOTE_INSN_DELETED)

(insn 106 12 102 2 include/linux/thread_info.h:84 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 102 106 2 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 102 103 2 arch/arm/kernel/ptrace.c:905 (set (reg/v:SI 3 r3 [orig:147 why ] [147])
        (reg:SI 0 r0 [ why ])) 167 {*arm_movsi_insn} (nil))

(insn 103 2 3 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 3 103 11 2 arch/arm/kernel/ptrace.c:905 (set (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 11 3 13 2 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:142 D.27480 ] [142])
        (mem/v:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 11 14 2 arch/arm/kernel/ptrace.c:908 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:142 D.27480 ] [142])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 14 13 15 2 arch/arm/kernel/ptrace.c:908 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 15 14 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 15 19 3 NOTE_INSN_DELETED)

(insn 19 21 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])
        (nil)))

(insn 22 20 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 23 22 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  4 [61.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 24 23 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 36 24 99 4 NOTE_INSN_DELETED)

(note 99 36 30 4 NOTE_INSN_DELETED)

(insn 30 99 25 4 arch/arm/kernel/ptrace.c:920 (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 25 30 26 4 arch/arm/kernel/ptrace.c:917 (set (reg/v:SI 6 r6 [orig:144 ip ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 35 4 arch/arm/kernel/ptrace.c:918 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 3 r3 [orig:147 why ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 35 26 37 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 37 35 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 48 37 49 4 arch/arm/kernel/ptrace.c:924 discrim 3 (set (reg:SI 0 r0)
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 133 [0x85])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))

(call_insn 49 48 53 4 arch/arm/kernel/ptrace.c:924 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_notify") [flags 0x41] <function_decl 0x1109c700 ptrace_notify>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 53 49 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 56 55 57 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 57 56 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 67 57 68 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 68 67 72 5 arch/arm/kernel/ptrace.c:932 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig") [flags 0x41] <function_decl 0x10f01b80 send_sig>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 72 68 73 5 arch/arm/kernel/ptrace.c:933 (set (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 73 72 74 5 arch/arm/kernel/ptrace.c:933 (set (reg:SI 2 r2 [176])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 74 73 75 5 arch/arm/kernel/ptrace.c:933 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])
        (reg:SI 2 r2 [176])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 75 74 76 6 38 "" [1 uses])

(note 76 75 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 79 76 107 6 NOTE_INSN_DELETED)

(insn 107 79 100 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 100 107 77 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 77 100 101 6 arch/arm/kernel/ptrace.c:935 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 6 r6 [orig:144 ip ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 101 77 81 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 3 r3 [177])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 81 101 82 6 arch/arm/kernel/ptrace.c:937 (set (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [177])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 82 81 83 7 35 "" [2 uses])

(note 83 82 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 88 83 94 7 arch/arm/kernel/ptrace.c:938 (set (reg/i:SI 0 r0)
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 94 88 104 7 arch/arm/kernel/ptrace.c:938 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 104 94 105 NOTE_INSN_DELETED)

(note 105 104 0 NOTE_INSN_DELETED)


;; Function vfp_set (vfp_set)[0:1562]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a8 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r161: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 152(l0): point = 0
   Insn 130(l0): point = 3
   Insn 129(l0): point = 5
   Insn 141(l0): point = 8
   Insn 135(l0): point = 10
   Insn 119(l0): point = 13
   Insn 149(l0): point = 16
   Insn 114(l0): point = 18
   Insn 113(l0): point = 20
   Insn 112(l0): point = 22
   Insn 110(l0): point = 24
   Insn 107(l0): point = 26
   Insn 109(l0): point = 28
   Insn 108(l0): point = 30
   Insn 103(l0): point = 32
   Insn 102(l0): point = 34
   Insn 99(l0): point = 37
   Insn 98(l0): point = 39
   Insn 96(l0): point = 41
   Insn 95(l0): point = 43
   Insn 94(l0): point = 45
   Insn 93(l0): point = 47
   Insn 147(l0): point = 50
   Insn 87(l0): point = 52
   Insn 86(l0): point = 54
   Insn 85(l0): point = 56
   Insn 84(l0): point = 58
   Insn 79(l0): point = 61
   Insn 77(l0): point = 63
   Insn 78(l0): point = 65
   Insn 73(l0): point = 67
   Insn 76(l0): point = 69
   Insn 72(l0): point = 71
   Insn 69(l0): point = 74
   Insn 68(l0): point = 76
   Insn 67(l0): point = 78
   Insn 63(l0): point = 81
   Insn 62(l0): point = 83
   Insn 61(l0): point = 85
   Insn 59(l0): point = 88
   Insn 58(l0): point = 90
   Insn 54(l0): point = 93
   Insn 52(l0): point = 96
   Insn 51(l0): point = 98
   Insn 49(l0): point = 100
   Insn 48(l0): point = 102
   Insn 47(l0): point = 104
   Insn 46(l0): point = 106
   Insn 145(l0): point = 109
   Insn 39(l0): point = 111
   Insn 41(l0): point = 113
   Insn 38(l0): point = 115
   Insn 37(l0): point = 117
   Insn 36(l0): point = 119
   Insn 31(l0): point = 122
   Insn 30(l0): point = 124
   Insn 27(l0): point = 126
   Insn 29(l0): point = 128
   Insn 26(l0): point = 130
   Insn 24(l0): point = 133
   Insn 23(l0): point = 135
   Insn 21(l0): point = 138
   Insn 20(l0): point = 140
   Insn 18(l0): point = 142
   Insn 7(l0): point = 144
   Insn 6(l0): point = 146
   Insn 17(l0): point = 148
   Insn 16(l0): point = 150
   Insn 15(l0): point = 152
   Insn 4(l0): point = 154
   Insn 5(l0): point = 156
   Insn 12(l0): point = 158
   Insn 11(l0): point = 160
 a0(r139): [81..160] [23..73] [0..7]
 a1(r144): [81..154] [70..73] [3..7]
 a2(r145): [81..156] [68..73] [3..7]
 a3(r146): [81..146] [57..73] [3..7]
 a4(r147): [81..144] [61..73] [46..49] [3..7]
 a5(r140): [16..18] [11..13]
 a6(r134): [55..71] [44..49]
 a7(r135): [59..63] [48..49]
 a8(r161): [64..69]
 a9(r137): [86..130]
 a10(r138): [120..128] [107..108]
 a11(r148): [129..158]
Compressing live ranges: from 163 to 37 - 22%
Ranges after the compression:
 a0(r139): [23..36] [7..22] [0..2]
 a1(r144): [23..33] [20..22] [1..2]
 a2(r145): [23..34] [18..22] [1..2]
 a3(r146): [23..32] [13..22] [1..2]
 a4(r147): [23..31] [15..22] [9..11] [1..2]
 a5(r140): [5..6] [3..4]
 a6(r134): [12..21] [8..11]
 a7(r135): [14..16] [10..11]
 a8(r161): [17..19]
 a9(r137): [24..30]
 a10(r138): [27..28] [25..26]
 a11(r148): [29..35]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r139,l0) conflicts: a4(r147,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a6(r134,l0) a7(r135,l0) a8(r161,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r144,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a2(r145,l0) a6(r134,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r145,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a1(r144,l0) a6(r134,l0) a8(r161,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r146,l0) conflicts: a0(r139,l0) a4(r147,l0) a1(r144,l0) a2(r145,l0) a6(r134,l0) a7(r135,l0) a8(r161,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r147,l0) conflicts: a0(r139,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a6(r134,l0) a7(r135,l0) a8(r161,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r140,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r134,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a7(r135,l0) a8(r161,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a7(r135,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a6(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r161,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a2(r145,l0) a6(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r137,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a10(r138,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a9(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r148,l0) conflicts: a0(r139,l0) a4(r147,l0) a3(r146,l0) a1(r144,l0) a2(r145,l0) a9(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14

  cp0:a1(r144)<->a8(r161)@125:shuffle
  cp1:a7(r135)<->a8(r161)@125:shuffle
  cp2:a10(r138)<->a11(r148)@125:shuffle
  regions=1, blocks=19, points=37
    allocnos=12, copies=3, conflicts=0, ranges=27

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r139 1r144 2r145 3r146 4r147 5r140 6r134 7r135 8r161 9r137 10r138 11r148
    modified regnos: 134 135 137 138 139 140 144 145 146 147 148 161
    border:
    Pressure: GENERAL_REGS=10
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
      Pushing a8(r161,l0)
      Pushing a10(r138,l0)
      Pushing a7(r135,l0)
      Pushing a5(r140,l0)
      Pushing a6(r134,l0)
      Pushing a11(r148,l0)(potential spill: pri=2500, cost=30000)
      Pushing a4(r147,l0)
      Pushing a3(r146,l0)
      Pushing a2(r145,l0)
      Pushing a9(r137,l0)
      Pushing a1(r144,l0)
      Pushing a0(r139,l0)
      Popping a0(r139,l0)  -- assign reg 4
      Popping a1(r144,l0)  -- assign reg 5
      Popping a9(r137,l0)  -- assign reg 6
      Popping a2(r145,l0)  -- assign reg 7
      Popping a3(r146,l0)  -- assign reg 8
      Popping a4(r147,l0)  -- assign reg 10
      Popping a11(r148,l0)  -- assign reg 9
      Popping a6(r134,l0)  -- assign reg 2
      Popping a5(r140,l0)  -- assign reg 0
      Popping a7(r135,l0)  -- assign reg 0
      Popping a10(r138,l0)  -- assign reg 0
      Popping a8(r161,l0)  -- assign reg 5
Disposition:
    6:r134 l0     2    7:r135 l0     0    9:r137 l0     6   10:r138 l0     0
    0:r139 l0     4    5:r140 l0     0    1:r144 l0     5    2:r145 l0     7
    3:r146 l0     8    4:r147 l0    10   11:r148 l0     9    8:r161 l0     5
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 2, 3, 13, dead_or_set: 0, 139
insn=12, live_throughout: 2, 3, 13, 139, dead_or_set: 148
insn=5, live_throughout: 2, 13, 139, 148, dead_or_set: 3, 145
insn=4, live_throughout: 13, 139, 145, 148, dead_or_set: 2, 144
insn=15, live_throughout: 13, 139, 144, 145, 148, dead_or_set: 0
insn=16, live_throughout: 0, 13, 139, 144, 145, 148, dead_or_set: 1
insn=17, live_throughout: 0, 1, 13, 139, 144, 145, 148, dead_or_set: 2
insn=6, live_throughout: 0, 1, 2, 13, 139, 144, 145, 148, dead_or_set: 146
insn=7, live_throughout: 0, 1, 2, 13, 139, 144, 145, 146, 148, dead_or_set: 147
insn=18, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 0, 1, 2, 14
insn=20, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 
insn=21, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 
insn=23, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 
insn=24, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 
insn=26, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 137
insn=29, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 138, 148
insn=27, live_throughout: 13, 138, 139, 144, 145, 146, 147, dead_or_set: 137
insn=30, live_throughout: 13, 137, 138, 139, 144, 145, 146, 147, dead_or_set: 
insn=31, live_throughout: 13, 137, 138, 139, 144, 145, 146, 147, dead_or_set: 
insn=36, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 138
insn=37, live_throughout: 0, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 1
insn=38, live_throughout: 0, 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 2
insn=41, live_throughout: 0, 1, 2, 13, 137, 139, 144, 145, 147, dead_or_set: 146
insn=39, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 1, 2, 14
insn=145, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=44, live_throughout: 13, 137, 138, 139, 144, 145, 146, 147, dead_or_set: 
insn=46, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 138
insn=47, live_throughout: 0, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 1
insn=48, live_throughout: 0, 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 2
insn=49, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 1, 2, 14
insn=51, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 0
insn=52, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=54, live_throughout: 13, 137, 139, 144, 145, 146, dead_or_set: 147
insn=55, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=58, live_throughout: 13, 137, 139, 144, 146, 147, dead_or_set: 145
insn=59, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=61, live_throughout: 13, 139, 145, 146, 147, dead_or_set: 137, 144
insn=62, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=63, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=67, live_throughout: 13, dead_or_set: 0
insn=68, live_throughout: 0, 13, dead_or_set: 1
insn=69, live_throughout: 13, dead_or_set: 0, 1, 14
insn=127, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=72, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 134
insn=76, live_throughout: 13, 134, 139, 145, 146, 147, dead_or_set: 144, 161
insn=73, live_throughout: 13, 139, 146, 147, 161, dead_or_set: 134, 145
insn=78, live_throughout: 13, 134, 139, 146, 147, 161, dead_or_set: 
insn=77, live_throughout: 13, 24, 134, 139, 146, 147, dead_or_set: 135, 161
insn=79, live_throughout: 13, 134, 135, 139, 146, 147, dead_or_set: 
insn=84, live_throughout: 13, 134, 139, 146, dead_or_set: 0, 135
insn=85, live_throughout: 0, 13, 134, 139, dead_or_set: 1, 146
insn=86, live_throughout: 0, 1, 13, 139, dead_or_set: 2, 134
insn=87, live_throughout: 13, 139, dead_or_set: 0, 1, 2, 14
insn=147, live_throughout: 13, 139, dead_or_set: 
insn=91, live_throughout: 13, 134, 135, 139, 147, dead_or_set: 
insn=93, live_throughout: 13, 134, 139, 147, dead_or_set: 0, 135
insn=94, live_throughout: 0, 13, 134, 139, dead_or_set: 1, 147
insn=95, live_throughout: 0, 1, 13, 139, dead_or_set: 2, 134
insn=96, live_throughout: 13, 139, dead_or_set: 0, 1, 2, 14
insn=98, live_throughout: 13, 14, 139, dead_or_set: 0
insn=99, live_throughout: 13, 14, 139, dead_or_set: 
insn=100, live_throughout: 13, 139, dead_or_set: 
insn=102, live_throughout: 13, 139, dead_or_set: 0
insn=103, live_throughout: 13, 139, dead_or_set: 0, 14
insn=108, live_throughout: 13, 139, dead_or_set: 1
insn=109, live_throughout: 1, 13, 139, dead_or_set: 2
insn=107, live_throughout: 1, 2, 13, 139, dead_or_set: 0
insn=110, live_throughout: 13, 139, dead_or_set: 0, 1, 2, 14
insn=112, live_throughout: 13, dead_or_set: 0, 139
insn=113, live_throughout: 13, dead_or_set: 0, 14
insn=114, live_throughout: 13, 14, dead_or_set: 140
insn=149, live_throughout: 13, 14, 140, dead_or_set: 
insn=117, live_throughout: 13, 14, dead_or_set: 
insn=119, live_throughout: 13, 14, dead_or_set: 140
insn=120, live_throughout: 13, 14, 140, dead_or_set: 
insn=135, live_throughout: 13, 14, dead_or_set: 0, 140
insn=141, live_throughout: 0, 13, 14, dead_or_set: 
insn=125, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=129, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=130, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=152, live_throughout: 13, 139, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 12 (nil))
changing reg in insn 73
changing reg in insn 72
changing reg in insn 86
changing reg in insn 95
changing reg in insn 73
changing reg in insn 77
changing reg in insn 84
changing reg in insn 93
changing reg in insn 27
changing reg in insn 26
changing reg in insn 58
changing reg in insn 58
changing reg in insn 38
changing reg in insn 61
changing reg in insn 54
changing reg in insn 48
changing reg in insn 41
changing reg in insn 27
changing reg in insn 29
changing reg in insn 36
changing reg in insn 46
changing reg in insn 11
changing reg in insn 107
changing reg in insn 16
changing reg in insn 112
changing reg in insn 102
changing reg in insn 119
changing reg in insn 114
changing reg in insn 135
changing reg in insn 61
changing reg in insn 4
changing reg in insn 129
changing reg in insn 76
changing reg in insn 29
changing reg in insn 72
changing reg in insn 62
changing reg in insn 61
changing reg in insn 26
changing reg in insn 23
changing reg in insn 58
changing reg in insn 5
changing reg in insn 58
changing reg in insn 58
changing reg in insn 73
changing reg in insn 27
changing reg in insn 20
changing reg in insn 41
changing reg in insn 6
changing reg in insn 85
changing reg in insn 37
changing reg in insn 78
changing reg in insn 41
changing reg in insn 30
changing reg in insn 54
changing reg in insn 7
changing reg in insn 94
changing reg in insn 54
changing reg in insn 47
changing reg in insn 12
changing reg in insn 29
changing reg in insn 15
changing reg in insn 76
changing reg in insn 77
Spilling for insn 76.
Using reg 3 for reload 0

Reloads for insn # 76
Reload 0: reload_in (SI) = (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 280 [0x118]))
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 280 [0x118]))
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 36.
deleting insn with uid = 46.
deleting insn with uid = 84.
deleting insn with uid = 86.
deleting insn with uid = 93.
deleting insn with uid = 95.
deleting insn with uid = 135.


try_optimize_cfg iteration 1

Forwarding edge 17->18 to 14 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 113.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 32 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 36 (  1.9)


vfp_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,14u} r1={17d,7u} r2={16d,8u} r3={11d,2u} r4={1d,4u} r5={3d,9u} r6={2d,8u} r7={2d,5u} r8={2d,5u} r9={1d,1u} r10={2d,3u} r12={10d} r13={1d,33u,4d} r14={10d,1u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,9u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1220{1107d,109u,4e} in 67{58 regular + 9 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 8 11 2 NOTE_INSN_DELETED)

(insn 11 13 12 2 arch/arm/kernel/ptrace.c:700 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 5 2 arch/arm/kernel/ptrace.c:701 (set (reg/f:SI 9 r9 [148])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 5 12 4 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (nil))

(insn 4 5 15 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 15 4 16 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 16 15 17 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 17 16 6 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 6 17 7 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 18 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 18 7 20 2 arch/arm/kernel/ptrace.c:701 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 20 18 21 2 include/linux/regset.h:249 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 14 3)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 29 4 include/linux/regset.h:254 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 29 26 27 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 9 r9 [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(insn 27 29 30 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 30 27 31 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 32 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 32 31 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 37 32 38 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 38 37 41 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 41 38 39 5 include/linux/regset.h:258 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 39 41 145 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 145 39 146 5 (set (pc)
        (label_ref 55)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 146 145 44)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 44 146 45 6 43 "" [1 uses])

(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 50 45 47 6 NOTE_INSN_DELETED)

(insn 47 50 48 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 49 48 51 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 51 49 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 53 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 15 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 7 include/linux/regset.h:262 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 55 54 56 8 44 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 57 56 58 8 NOTE_INSN_DELETED)

(insn 58 57 59 8 include/linux/regset.h:305 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn 59 58 60 8 include/linux/regset.h:305 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 14 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  14
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 9 include/linux/regset.h:263 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(insn 62 61 63 9 include/linux/regset.h:307 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 63 62 64 9 include/linux/regset.h:307 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
        (nil)))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 64 63 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 67 64 68 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 68 67 69 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 1 r1)
        (const_int 307 [0x133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 307 [0x133])
        (nil)))

(call_insn 69 68 70 10 include/linux/regset.h:307 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 70 69 127)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 127 70 71 11 48 "" [1 uses])

(note 71 127 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 74 71 75 11 NOTE_INSN_DELETED)

(note 75 74 72 11 NOTE_INSN_DELETED)

(insn 72 75 156 11 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 156 72 76 11 include/linux/regset.h:255 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 280 [0x118]))) 4 {*arm_addsi3} (nil))

(insn 76 156 73 11 include/linux/regset.h:255 (set (reg:SI 5 r5 [161])
        (plus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(insn 73 76 78 11 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 78 73 77 11 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 77 78 79 11 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:135 data ] [135])
        (plus:SI (reg:SI 5 r5 [161])
            (const_int -276 [0xfffffffffffffeec]))) 4 {*arm_addsi3} (nil))

(jump_insn 79 77 80 11 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 80 79 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 85 80 87 12 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 87 85 147 12 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 147 87 148 12 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 148 147 91)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 91 148 92 13 46 "" [1 uses])

(note 92 91 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 97 92 94 13 NOTE_INSN_DELETED)

(insn 94 97 96 13 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 96 94 98 13 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 98 96 99 13 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 99 98 100 13 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 12 2 8 13 18) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%] 
;; Pred edge  2 [50.0%] 
;; Pred edge  8
;; Pred edge  13 [50.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 100 99 101 14 41 "" [4 uses])

(note 101 100 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 104 101 105 14 NOTE_INSN_DELETED)

(note 105 104 102 14 NOTE_INSN_DELETED)

(insn 102 105 103 14 arch/arm/kernel/ptrace.c:725 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 103 102 108 14 arch/arm/kernel/ptrace.c:725 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 108 103 109 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 109 108 107 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 107 109 110 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn 110 107 112 14 arch/arm/kernel/ptrace.c:726 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 112 110 113 14 arch/arm/kernel/ptrace.c:727 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 113 112 114 14 arch/arm/kernel/ptrace.c:727 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_flush_hwstate") [flags 0x41] <function_decl 0x10a83b80 vfp_flush_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 114 113 149 14 arch/arm/kernel/ptrace.c:729 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 149 114 150 14 arch/arm/kernel/ptrace.c:729 (set (pc)
        (label_ref 120)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 150 149 117)

;; Start of basic block ( 6 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%] 
(code_label 117 150 118 15 45 "" [2 uses])

(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 15 include/linux/regset.h:260 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 120 119 121 16 47 "" [1 uses])

(note 121 120 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 141 121 125 16 arch/arm/kernel/ptrace.c:730 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 125 141 126 17 42 "" [2 uses])

(note 126 125 128 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 128 126 129 17 NOTE_INSN_DELETED)

(insn 129 128 130 17 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 130 129 151 17 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 151 130 152 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 152 151 153 18 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 14)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 153 152 155)

(note 155 153 0 NOTE_INSN_DELETED)


;; Function fpa_set (fpa_set)[0:1560]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 45.
deleting insn with uid = 45.
deleting insn with uid = 7.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)

Pass 0 for finding allocno costs

    a5 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 70(l0): point = 0
   Insn 64(l0): point = 2
   Insn 57(l0): point = 5
   Insn 76(l0): point = 8
   Insn 52(l0): point = 10
   Insn 50(l0): point = 13
   Insn 49(l0): point = 15
   Insn 47(l0): point = 17
   Insn 46(l0): point = 19
   Insn 45(l0): point = 21
   Insn 44(l0): point = 23
   Insn 74(l0): point = 26
   Insn 39(l0): point = 28
   Insn 37(l0): point = 30
   Insn 36(l0): point = 32
   Insn 35(l0): point = 34
   Insn 34(l0): point = 36
   Insn 29(l0): point = 39
   Insn 27(l0): point = 41
   Insn 28(l0): point = 43
   Insn 25(l0): point = 45
   Insn 26(l0): point = 47
   Insn 24(l0): point = 49
   Insn 22(l0): point = 52
   Insn 21(l0): point = 54
   Insn 19(l0): point = 57
   Insn 14(l0): point = 59
   Insn 17(l0): point = 61
   Insn 12(l0): point = 63
   Insn 6(l0): point = 65
   Insn 4(l0): point = 67
   Insn 18(l0): point = 69
   Insn 11(l0): point = 71
 a0(r135): [26..28] [8..10] [3..5]
 a1(r134): [33..49] [20..25]
 a2(r136): [37..41] [24..25]
 a3(r143): [35..65]
 a4(r141): [42..67]
 a5(r149): [42..47]
 a6(r142): [46..69]
 a7(r137): [48..71]
 a8(r145): [60..63]
Compressing live ranges: from 74 to 24 - 32%
Ranges after the compression:
 a0(r135): [7..8] [2..3] [0..1]
 a1(r134): [9..17] [4..6]
 a2(r136): [11..12] [5..6]
 a3(r143): [10..20]
 a4(r141): [13..21]
 a5(r149): [13..15]
 a6(r142): [14..22]
 a7(r137): [16..23]
 a8(r145): [18..19]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a2(r136,l0) a3(r143,l0) a5(r149,l0) a4(r141,l0) a6(r142,l0) a7(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r136,l0) conflicts: a1(r134,l0) a3(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r143,l0) conflicts: a1(r134,l0) a2(r136,l0) a5(r149,l0) a4(r141,l0) a6(r142,l0) a7(r137,l0) a8(r145,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r141,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r149,l0) a6(r142,l0) a7(r137,l0) a8(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r149,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a6(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r142,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r149,l0) a4(r141,l0) a7(r137,l0) a8(r145,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a7(r137,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a6(r142,l0) a8(r145,l0)
;;     total conflict hard regs: 2 3 14
;;     conflict hard regs: 2 3 14
;; a8(r145,l0) conflicts: a3(r143,l0) a4(r141,l0) a6(r142,l0) a7(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a5(r149)<->a7(r137)@125:shuffle
  cp1:a2(r136)<->a5(r149)@125:shuffle
  cp2:a2(r136)<->a4(r141)@125:shuffle
  regions=1, blocks=10, points=24
    allocnos=9, copies=3, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r135 1r134 2r136 3r143 4r141 5r149 6r142 7r137 8r145
    modified regnos: 134 135 136 137 141 142 143 145 149
    border:
    Pressure: GENERAL_REGS=6
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
      Pushing a5(r149,l0)
      Pushing a2(r136,l0)
      Pushing a8(r145,l0)
      Pushing a4(r141,l0)
      Pushing a0(r135,l0)
      Pushing a6(r142,l0)
      Pushing a3(r143,l0)
      Pushing a1(r134,l0)
      Pushing a7(r137,l0)
      Popping a7(r137,l0)  -- assign reg 12
      Popping a1(r134,l0)  -- assign reg 2
      Popping a3(r143,l0)  -- assign reg 1
      Popping a6(r142,l0)  -- assign reg 3
      Popping a0(r135,l0)  -- assign reg 0
      Popping a4(r141,l0)  -- assign reg 0
      Popping a8(r145,l0)  -- assign reg 2
      Popping a2(r136,l0)  -- assign reg 0
      Popping a5(r149,l0)  -- assign reg 12
Disposition:
    1:r134 l0     2    0:r135 l0     0    2:r136 l0     0    7:r137 l0    12
    4:r141 l0     0    6:r142 l0     3    3:r143 l0     1    8:r145 l0     2
    5:r149 l0    12
New iteration of spill/restore move
+++Costs: overall -24250, reg -24250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 2, 3, 13, 14, dead_or_set: 0, 137
insn=18, live_throughout: 2, 13, 14, 137, dead_or_set: 3, 142
insn=4, live_throughout: 13, 14, 24, 137, 142, dead_or_set: 2, 141
insn=6, live_throughout: 13, 14, 24, 137, 141, 142, dead_or_set: 143
insn=12, live_throughout: 13, 14, 24, 137, 141, 142, 143, dead_or_set: 145
insn=17, live_throughout: 13, 14, 24, 137, 141, 142, 143, 145, dead_or_set: 
insn=14, live_throughout: 13, 14, 24, 137, 141, 142, 143, dead_or_set: 145
insn=19, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=21, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=22, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=24, live_throughout: 13, 137, 141, 142, 143, dead_or_set: 134
insn=26, live_throughout: 13, 134, 141, 142, 143, dead_or_set: 137, 149
insn=25, live_throughout: 13, 141, 143, 149, dead_or_set: 134, 142
insn=28, live_throughout: 13, 134, 141, 143, 149, dead_or_set: 
insn=27, live_throughout: 13, 24, 134, 143, dead_or_set: 136, 141, 149
insn=29, live_throughout: 13, 134, 136, 143, dead_or_set: 
insn=34, live_throughout: 13, 134, 143, dead_or_set: 0, 136
insn=35, live_throughout: 0, 13, 134, dead_or_set: 1, 143
insn=36, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=37, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=39, live_throughout: 13, 14, dead_or_set: 135
insn=74, live_throughout: 13, 14, 135, dead_or_set: 
insn=42, live_throughout: 13, 134, 136, dead_or_set: 
insn=44, live_throughout: 13, 134, dead_or_set: 0, 136
insn=45, live_throughout: 0, 13, 134, dead_or_set: 1
insn=46, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=47, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=49, live_throughout: 13, 14, dead_or_set: 0
insn=50, live_throughout: 13, 14, dead_or_set: 
insn=52, live_throughout: 13, 14, dead_or_set: 135
insn=76, live_throughout: 13, 14, 135, dead_or_set: 
insn=55, live_throughout: 13, 14, dead_or_set: 
insn=57, live_throughout: 13, 14, dead_or_set: 135
insn=58, live_throughout: 13, 14, 135, dead_or_set: 
insn=64, live_throughout: 13, 14, dead_or_set: 0, 135
insn=70, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 12 (nil))
changing reg in insn 25
changing reg in insn 24
changing reg in insn 36
changing reg in insn 46
changing reg in insn 25
changing reg in insn 57
changing reg in insn 52
changing reg in insn 39
changing reg in insn 64
changing reg in insn 27
changing reg in insn 34
changing reg in insn 44
changing reg in insn 11
changing reg in insn 17
changing reg in insn 14
changing reg in insn 26
changing reg in insn 4
changing reg in insn 27
changing reg in insn 24
changing reg in insn 21
changing reg in insn 18
changing reg in insn 25
changing reg in insn 6
changing reg in insn 35
changing reg in insn 28
changing reg in insn 12
changing reg in insn 26
changing reg in insn 27
Spilling for insn 17.
Spilling for insn 14.

Reloads for insn # 17
Reload 0: reload_out (QI) = (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                                                        (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                                                        (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])

Reloads for insn # 14
Reload 0: reload_out (QI) = (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                                                        (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                                                        (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
deleting insn with uid = 34.
deleting insn with uid = 35.
deleting insn with uid = 36.
deleting insn with uid = 44.
deleting insn with uid = 46.
deleting insn with uid = 64.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)


fpa_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={5d,3u} r2={6d,6u} r3={4d,3u} r12={5d,4u} r13={1d,13u,1d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 303{259d,43u,1e} in 27{25 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 18 2 arch/arm/kernel/ptrace.c:625 (set (reg/v/f:SI 12 ip [orig:137 thread ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 18 11 4 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 18 6 2 arch/arm/kernel/ptrace.c:624 (set (reg/v:SI 0 r0 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 6 4 12 2 arch/arm/kernel/ptrace.c:624 (set (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 12 6 17 2 arch/arm/kernel/ptrace.c:627 (set (reg:SI 2 r2 [145])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 17 12 14 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 14 17 19 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 19 14 20 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 26 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 26 24 25 4 include/linux/regset.h:255 (set (reg/f:SI 12 ip [149])
        (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn 25 26 28 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 28 25 27 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 27 28 29 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [149])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (nil))

(jump_insn 29 27 30 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 73 [0x49])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 30 29 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 37 30 39 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 37 74 5 include/linux/regset.h:266 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 74 39 75 5 (set (pc)
        (label_ref 58)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 75 74 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 42 75 43 6 54 "" [1 uses])

(note 43 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 48 43 45 6 NOTE_INSN_DELETED)

(insn 45 48 47 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 47 45 49 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 49 47 50 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 50 49 51 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 76 7 include/linux/regset.h:260 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 76 52 77 7 (set (pc)
        (label_ref 58)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 77 76 55)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 55 77 56 8 53 "" [3 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 8 include/linux/regset.h:250 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 58 57 59 9 55 "" [2 uses])

(note 59 58 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 70 59 78 9 arch/arm/kernel/ptrace.c:632 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 78 70 79 NOTE_INSN_DELETED)

(note 79 78 0 NOTE_INSN_DELETED)


;; Function gpr_set (gpr_set)[0:1558]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 37.
deleting insn with uid = 37.
deleting insn with uid = 7.
scanning new insn with uid = 117.
rescanning insn with uid = 117.
deleting insn with uid = 117.
deleting insn with uid = 19.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)

Pass 0 for finding allocno costs

    a1 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 104(l0): point = 0
   Insn 98(l0): point = 2
   Insn 91(l0): point = 5
   Insn 112(l0): point = 8
   Insn 86(l0): point = 10
   Insn 84(l0): point = 12
   Insn 115(l0): point = 14
   Insn 114(l0): point = 16
   Insn 75(l0): point = 18
   Insn 83(l0): point = 20
   Insn 82(l0): point = 22
   Insn 76(l0): point = 24
   Insn 72(l0): point = 27
   Insn 71(l0): point = 29
   Insn 70(l0): point = 31
   Insn 66(l0): point = 33
   Insn 63(l0): point = 35
   Insn 62(l0): point = 37
   Insn 57(l0): point = 40
   Insn 56(l0): point = 42
   Insn 55(l0): point = 44
   Insn 53(l0): point = 47
   Insn 50(l0): point = 49
   Insn 52(l0): point = 51
   Insn 49(l0): point = 53
   Insn 110(l0): point = 56
   Insn 44(l0): point = 58
   Insn 42(l0): point = 61
   Insn 41(l0): point = 63
   Insn 39(l0): point = 65
   Insn 38(l0): point = 67
   Insn 37(l0): point = 69
   Insn 36(l0): point = 71
   Insn 108(l0): point = 74
   Insn 30(l0): point = 76
   Insn 29(l0): point = 78
   Insn 28(l0): point = 80
   Insn 27(l0): point = 82
   Insn 22(l0): point = 85
   Insn 20(l0): point = 87
   Insn 117(l0): point = 89
   Insn 21(l0): point = 91
   Insn 18(l0): point = 93
   Insn 17(l0): point = 95
   Insn 15(l0): point = 98
   Insn 14(l0): point = 100
   Insn 12(l0): point = 103
   Insn 6(l0): point = 105
   Insn 4(l0): point = 107
   Insn 2(l0): point = 109
   Insn 11(l0): point = 111
 a0(r139): [56..58] [8..10] [3..5]
 a1(r164): [17..24]
 a2(r134): [19..49]
 a3(r141): [61..109] [25..55]
 a4(r163): [30..31]
 a5(r159): [32..33]
 a6(r135): [32..44]
 a7(r157): [34..35]
 a8(r155): [36..37]
 a9(r133): [45..53]
 a10(r137): [79..95] [68..73]
 a11(r138): [83..87] [72..73]
 a12(r145): [81..105]
 a13(r143): [88..107]
 a14(r147): [88..89]
 a15(r144): [94..111]
Compressing live ranges: from 114 to 39 - 34%
Ranges after the compression:
 a0(r139): [21..22] [2..3] [0..1]
 a1(r164): [4..6]
 a2(r134): [5..18]
 a3(r141): [23..37] [7..20]
 a4(r163): [8..9]
 a5(r159): [10..11]
 a6(r135): [10..16]
 a7(r157): [12..13]
 a8(r155): [14..15]
 a9(r133): [17..19]
 a10(r137): [27..34] [24..26]
 a11(r138): [29..30] [25..26]
 a12(r145): [28..35]
 a13(r143): [31..36]
 a14(r147): [31..32]
 a15(r144): [33..38]
+++Allocating 128 bytes for conflict table (uncompressed size 128)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r164,l0) conflicts: a2(r134,l0)
;;     total conflict hard regs: 1 2
;;     conflict hard regs: 1 2
;; a2(r134,l0) conflicts: a1(r164,l0) a3(r141,l0) a4(r163,l0) a5(r159,l0) a6(r135,l0) a7(r157,l0) a8(r155,l0) a9(r133,l0)
;;     total conflict hard regs: 1 2 14
;;     conflict hard regs: 1 2 14
;; a3(r141,l0) conflicts: a2(r134,l0) a4(r163,l0) a5(r159,l0) a6(r135,l0) a7(r157,l0) a8(r155,l0) a9(r133,l0) a10(r137,l0) a11(r138,l0) a12(r145,l0) a14(r147,l0) a13(r143,l0) a15(r144,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r163,l0) conflicts: a2(r134,l0) a3(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r159,l0) conflicts: a2(r134,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r135,l0) conflicts: a2(r134,l0) a3(r141,l0) a5(r159,l0) a7(r157,l0) a8(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r157,l0) conflicts: a2(r134,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r155,l0) conflicts: a2(r134,l0) a3(r141,l0) a6(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r133,l0) conflicts: a2(r134,l0) a3(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r137,l0) conflicts: a3(r141,l0) a11(r138,l0) a12(r145,l0) a14(r147,l0) a13(r143,l0) a15(r144,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a11(r138,l0) conflicts: a3(r141,l0) a10(r137,l0) a12(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r145,l0) conflicts: a3(r141,l0) a10(r137,l0) a11(r138,l0) a14(r147,l0) a13(r143,l0) a15(r144,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a13(r143,l0) conflicts: a3(r141,l0) a10(r137,l0) a12(r145,l0) a14(r147,l0) a15(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r147,l0) conflicts: a3(r141,l0) a10(r137,l0) a12(r145,l0) a13(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r144,l0) conflicts: a3(r141,l0) a10(r137,l0) a12(r145,l0) a13(r143,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14

  cp0:a5(r159)<->a7(r157)@125:shuffle
  cp1:a4(r163)<->a5(r159)@125:shuffle
  cp2:a4(r163)<->a6(r135)@125:shuffle
  cp3:a6(r135)<->a9(r133)@125:shuffle
  cp4:a11(r138)<->a14(r147)@125:shuffle
  cp5:a11(r138)<->a13(r143)@125:shuffle
  regions=1, blocks=14, points=39
    allocnos=16, copies=6, conflicts=1, ranges=21

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r139 1r164 2r134 3r141 4r163 5r159 6r135 7r157 8r155 9r133 10r137 11r138 12r145 13r143 14r147 15r144
    modified regnos: 133 134 135 137 138 139 141 143 144 145 147 155 157 159 163 164
    border:
    Pressure: GENERAL_REGS=5
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 145 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
      Pushing a14(r147,l0)
      Pushing a11(r138,l0)
      Pushing a8(r155,l0)
      Pushing a7(r157,l0)
      Pushing a5(r159,l0)
      Pushing a4(r163,l0)
      Pushing a6(r135,l0)
      Pushing a13(r143,l0)
      Pushing a9(r133,l0)
      Pushing a0(r139,l0)
      Pushing a1(r164,l0)
      Pushing a12(r145,l0)
      Pushing a10(r137,l0)
      Pushing a15(r144,l0)
      Pushing a2(r134,l0)
      Pushing a3(r141,l0)
      Popping a3(r141,l0)  -- assign reg 4
      Popping a2(r134,l0)  -- assign reg 3
      Popping a15(r144,l0)  -- assign reg 3
      Popping a10(r137,l0)  -- assign reg 2
      Popping a12(r145,l0)  -- assign reg 1
      Popping a1(r164,l0)  -- assign reg 0
      Popping a0(r139,l0)  -- assign reg 0
      Popping a9(r133,l0)  -- assign reg 2
      Popping a13(r143,l0)  -- assign reg 0
      Popping a6(r135,l0)  -- assign reg 2
      Popping a4(r163,l0)  -- assign reg 2
      Popping a5(r159,l0)  -- assign reg 1
      Popping a7(r157,l0)  -- assign reg 1
      Popping a8(r155,l0)  -- assign reg 1
      Popping a11(r138,l0)  -- assign reg 0
      Popping a14(r147,l0)  -- assign reg 3
Disposition:
    9:r133 l0     2    2:r134 l0     3    6:r135 l0     2   10:r137 l0     2
   11:r138 l0     0    0:r139 l0     0    3:r141 l0     4   13:r143 l0     0
   15:r144 l0     3   12:r145 l0     1   14:r147 l0     3    8:r155 l0     1
    7:r157 l0     1    5:r159 l0     1    4:r163 l0     2    1:r164 l0     0
New iteration of spill/restore move
+++Costs: overall -24500, reg -24500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 0, 2, 13, 14, dead_or_set: 3, 144
insn=2, live_throughout: 2, 13, 14, 24, 144, dead_or_set: 0, 141
insn=4, live_throughout: 13, 14, 24, 141, 144, dead_or_set: 2, 143
insn=6, live_throughout: 13, 14, 24, 141, 143, 144, dead_or_set: 145
insn=12, live_throughout: 13, 14, 141, 143, 144, 145, dead_or_set: 
insn=14, live_throughout: 13, 14, 141, 143, 144, 145, dead_or_set: 
insn=15, live_throughout: 13, 14, 141, 143, 144, 145, dead_or_set: 
insn=17, live_throughout: 13, 141, 143, 144, 145, dead_or_set: 137
insn=18, live_throughout: 13, 141, 143, 145, dead_or_set: 137, 144
insn=21, live_throughout: 13, 137, 141, 143, 145, dead_or_set: 
insn=117, live_throughout: 13, 24, 137, 141, 143, 145, dead_or_set: 147
insn=20, live_throughout: 13, 24, 137, 141, 145, dead_or_set: 138, 143, 147
insn=22, live_throughout: 13, 137, 138, 141, 145, dead_or_set: 
insn=27, live_throughout: 13, 137, 141, 145, dead_or_set: 0, 138
insn=28, live_throughout: 0, 13, 137, 141, dead_or_set: 1, 145
insn=29, live_throughout: 0, 1, 13, 141, dead_or_set: 2, 137
insn=30, live_throughout: 13, 141, dead_or_set: 0, 1, 2, 14
insn=108, live_throughout: 13, 14, 141, dead_or_set: 
insn=34, live_throughout: 13, 137, 138, 141, dead_or_set: 
insn=36, live_throughout: 13, 137, 141, dead_or_set: 0, 138
insn=37, live_throughout: 0, 13, 137, 141, dead_or_set: 1
insn=38, live_throughout: 0, 1, 13, 141, dead_or_set: 2, 137
insn=39, live_throughout: 13, 141, dead_or_set: 0, 1, 2, 14
insn=41, live_throughout: 13, 14, 141, dead_or_set: 0
insn=42, live_throughout: 13, 14, 141, dead_or_set: 
insn=44, live_throughout: 13, 14, dead_or_set: 139
insn=110, live_throughout: 13, 14, 139, dead_or_set: 
insn=47, live_throughout: 13, 14, 141, dead_or_set: 
insn=49, live_throughout: 13, 14, 141, dead_or_set: 133
insn=52, live_throughout: 13, 14, 133, 141, dead_or_set: 
insn=50, live_throughout: 13, 14, 24, 133, 141, dead_or_set: 134
insn=53, live_throughout: 13, 14, 133, 134, 141, dead_or_set: 
insn=55, live_throughout: 13, 14, 134, 141, dead_or_set: 133, 135
insn=56, live_throughout: 13, 14, 134, 135, 141, dead_or_set: 
insn=57, live_throughout: 13, 14, 134, 135, 141, dead_or_set: 
insn=62, live_throughout: 13, 14, 134, 135, 141, dead_or_set: 155
insn=63, live_throughout: 13, 14, 134, 135, 141, dead_or_set: 155, 157
insn=66, live_throughout: 13, 14, 134, 135, 141, dead_or_set: 157, 159
insn=70, live_throughout: 13, 14, 134, 141, dead_or_set: 135, 159, 163
insn=71, live_throughout: 13, 14, 134, 141, dead_or_set: 163
insn=72, live_throughout: 13, 14, 134, 141, dead_or_set: 
insn=73, live_throughout: 13, 134, 141, dead_or_set: 
insn=76, live_throughout: 13, 134, dead_or_set: 141, 164
insn=82, live_throughout: 13, 134, 164, dead_or_set: 1
insn=83, live_throughout: 1, 13, 134, 164, dead_or_set: 2
insn=75, live_throughout: 1, 2, 13, 164, dead_or_set: 134
insn=114, live_throughout: 1, 2, 13, dead_or_set: 0, 164
insn=115, live_throughout: 1, 2, 13, dead_or_set: 0
insn=84, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=86, live_throughout: 13, 14, dead_or_set: 139
insn=112, live_throughout: 13, 14, 139, dead_or_set: 
insn=89, live_throughout: 13, 14, dead_or_set: 
insn=91, live_throughout: 13, 14, dead_or_set: 139
insn=92, live_throughout: 13, 14, 139, dead_or_set: 
insn=98, live_throughout: 13, 14, dead_or_set: 0, 139
insn=104, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 145: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 117 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 62 (nil))
changing reg in insn 49
changing reg in insn 52
changing reg in insn 55
changing reg in insn 50
changing reg in insn 50
changing reg in insn 75
changing reg in insn 55
changing reg in insn 70
changing reg in insn 56
changing reg in insn 18
changing reg in insn 17
changing reg in insn 29
changing reg in insn 38
changing reg in insn 18
changing reg in insn 20
changing reg in insn 27
changing reg in insn 36
changing reg in insn 91
changing reg in insn 86
changing reg in insn 44
changing reg in insn 98
changing reg in insn 2
changing reg in insn 76
changing reg in insn 4
changing reg in insn 20
changing reg in insn 17
changing reg in insn 14
changing reg in insn 11
changing reg in insn 18
changing reg in insn 6
changing reg in insn 28
changing reg in insn 21
changing reg in insn 117
changing reg in insn 20
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 66
changing reg in insn 66
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 114
Spilling for insn 75.

Reloads for insn # 75
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])
deleting insn with uid = 27.
deleting insn with uid = 28.
deleting insn with uid = 29.
deleting insn with uid = 36.
deleting insn with uid = 38.
deleting insn with uid = 98.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 84.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)


gpr_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,12u} r1={10d,7u} r2={10d,11u} r3={7d,5u} r4={1d,1u} r12={4d} r13={1d,22u,2d} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,7u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 459{391d,66u,2e} in 45{42 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 9 8 2 NOTE_INSN_DELETED)

(note 8 5 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 2 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:144 count ] [144])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 2 11 4 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 4 r4 [orig:141 target ] [141])
        (reg:SI 0 r0 [ target ])) 167 {*arm_movsi_insn} (nil))

(insn 4 2 6 2 arch/arm/kernel/ptrace.c:593 (set (reg/v:SI 0 r0 [orig:143 pos ] [143])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 6 4 12 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 12 6 13 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:143 pos ] [143])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
        (minus:SI (const_int 72 [0x48])
            (reg/v:SI 0 r0 [orig:143 pos ] [143]))) 28 {*arm_subsi3_insn} (nil))

(insn 18 17 21 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 2 r2 [orig:137 copy ] [137])
                    (reg/v:SI 3 r3 [orig:144 count ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 21 18 117 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 117 21 20 4 include/linux/regset.h:255 (set (reg/f:SI 3 r3 [147])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 20 117 22 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 3 r3 [147])
            (reg/v:SI 0 r0 [orig:143 pos ] [143]))) 4 {*arm_addsi3} (nil))

(jump_insn 22 20 23 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 23 22 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 30 23 108 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 108 30 109 5 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 109 108 34)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 34 109 35 6 59 "" [1 uses])

(note 35 34 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 40 35 37 6 NOTE_INSN_DELETED)

(insn 37 40 39 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 39 37 41 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 41 39 42 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 42 41 43 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 110 7 include/linux/regset.h:260 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 110 44 111 7 (set (pc)
        (label_ref 92)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 111 110 47)

;; Start of basic block ( 2 3 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [50.0%] 
;; Pred edge  5 [100.0%] 
(code_label 47 111 48 8 58 "" [4 uses])

(note 48 47 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 51 48 49 8 NOTE_INSN_DELETED)

(insn 49 51 52 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 2 r2 [orig:133 D.27667 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 52 49 50 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 50 52 53 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 3 r3 [orig:134 D.27666 ] [134])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 53 50 54 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 2 r2 [orig:135 mode ] [135])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 56 55 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 57 56 58 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  11 [28.0%] 
;; Succ edge  10 [72.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [72.0%]  (fallthru)
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 10 NOTE_INSN_DELETED)

(note 60 59 64 10 NOTE_INSN_DELETED)

(note 64 60 68 10 NOTE_INSN_DELETED)

(note 68 64 69 10 NOTE_INSN_DELETED)

(note 69 68 62 10 NOTE_INSN_DELETED)

(insn 62 69 63 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 1 r1 [155])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn 63 62 66 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
        (mem/c/i:SI (reg/f:SI 1 r1 [155]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 66 63 70 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [159])
        (zero_extract:SI (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 70 66 71 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 2 r2 [163])
                (and:SI (eq:SI (reg/v:SI 2 r2 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 1 r1 [159])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 71 70 72 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [28.0%] 
;; Pred edge  10 [50.0%]  (fallthru)
(code_label 73 72 74 11 62 "" [1 uses])

(note 74 73 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 78 74 79 11 NOTE_INSN_DELETED)

(note 79 78 76 11 NOTE_INSN_DELETED)

(insn 76 79 82 11 arch/arm/kernel/ptrace.c:606 (set (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 target ] [141])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 82 76 83 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 83 82 75 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 75 83 114 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])
        (reg:SI 3 r3 [orig:134 D.27666 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 114 75 115 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn 115 114 84 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(call_insn 84 115 86 11 arch/arm/kernel/ptrace.c:606 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 86 84 112 11 arch/arm/kernel/ptrace.c:607 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 112 86 113 11 arch/arm/kernel/ptrace.c:607 (set (pc)
        (label_ref 92)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 113 112 89)

;; Start of basic block ( 8 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [50.0%] 
;; Pred edge  10 [50.0%] 
(code_label 89 113 90 12 61 "" [2 uses])

(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 12 arch/arm/kernel/ptrace.c:604 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 7 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 92 91 93 13 60 "" [2 uses])

(note 93 92 104 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 104 93 116 13 arch/arm/kernel/ptrace.c:608 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 116 104 118 NOTE_INSN_DELETED)

(note 118 116 0 NOTE_INSN_DELETED)


;; Function clear_ptrace_hw_breakpoint (clear_ptrace_hw_breakpoint)[0:1551]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=3
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, 14, dead_or_set: 0
insn=8, live_throughout: 0, 13, 14, dead_or_set: 1
insn=9, live_throughout: 13, 14, dead_or_set: 0, 1


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


clear_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 13[sp]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={2d} r3={2d} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 132{125d,7u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn 7 6 8 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0 [ tsk ])
            (const_int 796 [0x31c]))) 4 {*arm_addsi3} (nil))

(insn 8 7 9 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 9 8 10 2 arch/arm/kernel/ptrace.c:407 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 18)

(note 18 10 0 NOTE_INSN_DELETED)


;; Function vfp_get (vfp_get)[0:1561]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a8 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r156: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 134(l0): point = 0
   Insn 112(l0): point = 3
   Insn 111(l0): point = 5
   Insn 123(l0): point = 8
   Insn 117(l0): point = 10
   Insn 101(l0): point = 13
   Insn 131(l0): point = 16
   Insn 96(l0): point = 18
   Insn 93(l0): point = 21
   Insn 92(l0): point = 23
   Insn 90(l0): point = 25
   Insn 89(l0): point = 27
   Insn 88(l0): point = 29
   Insn 87(l0): point = 31
   Insn 129(l0): point = 34
   Insn 82(l0): point = 36
   Insn 80(l0): point = 38
   Insn 79(l0): point = 40
   Insn 78(l0): point = 42
   Insn 77(l0): point = 44
   Insn 72(l0): point = 47
   Insn 70(l0): point = 49
   Insn 71(l0): point = 51
   Insn 67(l0): point = 53
   Insn 69(l0): point = 55
   Insn 66(l0): point = 57
   Insn 63(l0): point = 60
   Insn 62(l0): point = 62
   Insn 61(l0): point = 64
   Insn 57(l0): point = 67
   Insn 56(l0): point = 69
   Insn 54(l0): point = 72
   Insn 51(l0): point = 74
   Insn 53(l0): point = 76
   Insn 48(l0): point = 79
   Insn 46(l0): point = 82
   Insn 45(l0): point = 84
   Insn 43(l0): point = 86
   Insn 42(l0): point = 88
   Insn 40(l0): point = 90
   Insn 41(l0): point = 92
   Insn 127(l0): point = 95
   Insn 33(l0): point = 97
   Insn 35(l0): point = 99
   Insn 32(l0): point = 101
   Insn 30(l0): point = 103
   Insn 31(l0): point = 105
   Insn 25(l0): point = 108
   Insn 23(l0): point = 110
   Insn 24(l0): point = 112
   Insn 21(l0): point = 114
   Insn 22(l0): point = 116
   Insn 20(l0): point = 118
   Insn 18(l0): point = 121
   Insn 17(l0): point = 123
   Insn 15(l0): point = 126
   Insn 14(l0): point = 128
   Insn 13(l0): point = 130
   Insn 7(l0): point = 132
   Insn 12(l0): point = 134
   Insn 6(l0): point = 136
   Insn 4(l0): point = 138
   Insn 5(l0): point = 140
   Insn 11(l0): point = 142
 a0(r144): [67..138] [56..59] [3..7]
 a1(r139): [67..142] [56..59] [3..7]
 a2(r145): [67..140] [54..59] [3..7]
 a3(r146): [67..136] [45..59] [3..7]
 a4(r147): [67..132] [47..59] [32..33] [3..7]
 a5(r140): [34..36] [16..18] [11..13]
 a6(r134): [41..57] [28..33]
 a7(r135): [43..49] [30..33]
 a8(r156): [50..55]
 a9(r137): [75..118]
 a10(r138): [106..110] [93..94]
 a11(r148): [111..116]
Compressing live ranges: from 145 to 37 - 25%
Ranges after the compression:
 a0(r144): [23..34] [20..22] [0..1]
 a1(r139): [23..36] [20..22] [0..1]
 a2(r145): [23..35] [18..22] [0..1]
 a3(r146): [23..33] [14..22] [0..1]
 a4(r147): [23..32] [15..22] [8..9] [0..1]
 a5(r140): [10..11] [4..5] [2..3]
 a6(r134): [12..21] [6..9]
 a7(r135): [13..16] [7..9]
 a8(r156): [17..19]
 a9(r137): [24..31]
 a10(r138): [27..28] [25..26]
 a11(r148): [29..30]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r144,l0) conflicts: a4(r147,l0) a3(r146,l0) a2(r145,l0) a1(r139,l0) a6(r134,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r139,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a2(r145,l0) a6(r134,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r145,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a1(r139,l0) a6(r134,l0) a8(r156,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r146,l0) conflicts: a4(r147,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a6(r134,l0) a7(r135,l0) a8(r156,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r147,l0) conflicts: a3(r146,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a6(r134,l0) a7(r135,l0) a8(r156,l0) a9(r137,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r140,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r134,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a7(r135,l0) a8(r156,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a7(r135,l0) conflicts: a4(r147,l0) a3(r146,l0) a6(r134,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a8(r156,l0) conflicts: a4(r147,l0) a3(r146,l0) a2(r145,l0) a6(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r137,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a10(r138,l0) a11(r148,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a10(r138,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a9(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r148,l0) conflicts: a4(r147,l0) a3(r146,l0) a0(r144,l0) a2(r145,l0) a1(r139,l0) a9(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a1(r139)<->a8(r156)@125:shuffle
  cp1:a0(r144)<->a8(r156)@125:shuffle
  cp2:a7(r135)<->a8(r156)@125:shuffle
  cp3:a10(r138)<->a11(r148)@125:shuffle
  regions=1, blocks=19, points=37
    allocnos=12, copies=4, conflicts=0, ranges=28

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r144 1r139 2r145 3r146 4r147 5r140 6r134 7r135 8r156 9r137 10r138 11r148
    modified regnos: 134 135 137 138 139 140 144 145 146 147 148 156
    border:
    Pressure: GENERAL_REGS=10
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
      Pushing a11(r148,l0)
      Pushing a8(r156,l0)
      Pushing a10(r138,l0)
      Pushing a7(r135,l0)
      Pushing a5(r140,l0)
      Pushing a6(r134,l0)
      Pushing a4(r147,l0)
      Pushing a3(r146,l0)
      Pushing a2(r145,l0)
      Pushing a9(r137,l0)
      Pushing a0(r144,l0)
      Pushing a1(r139,l0)
      Popping a1(r139,l0)  -- assign reg 4
      Popping a0(r144,l0)  -- assign reg 5
      Popping a9(r137,l0)  -- assign reg 6
      Popping a2(r145,l0)  -- assign reg 7
      Popping a3(r146,l0)  -- assign reg 8
      Popping a4(r147,l0)  -- assign reg 10
      Popping a6(r134,l0)  -- assign reg 2
      Popping a5(r140,l0)  -- assign reg 0
      Popping a7(r135,l0)  -- assign reg 1
      Popping a10(r138,l0)  -- assign reg 1
      Popping a8(r156,l0)  -- assign reg 4
      Popping a11(r148,l0)  -- assign reg 1
Disposition:
    6:r134 l0     2    7:r135 l0     1    9:r137 l0     6   10:r138 l0     1
    1:r139 l0     4    5:r140 l0     0    0:r144 l0     5    2:r145 l0     7
    3:r146 l0     8    4:r147 l0    10   11:r148 l0     1    8:r156 l0     4
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 2, 3, 13, dead_or_set: 0, 139
insn=5, live_throughout: 2, 13, 139, dead_or_set: 3, 145
insn=4, live_throughout: 13, 139, 145, dead_or_set: 2, 144
insn=6, live_throughout: 13, 139, 144, 145, dead_or_set: 146
insn=12, live_throughout: 13, 139, 144, 145, 146, dead_or_set: 0
insn=7, live_throughout: 0, 13, 139, 144, 145, 146, dead_or_set: 147
insn=13, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 0, 14
insn=14, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=15, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=17, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=18, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=20, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 137
insn=22, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 148
insn=21, live_throughout: 13, 139, 144, 145, 146, 147, 148, dead_or_set: 137
insn=24, live_throughout: 13, 137, 139, 144, 145, 146, 147, 148, dead_or_set: 
insn=23, live_throughout: 13, 24, 137, 139, 144, 145, 146, 147, dead_or_set: 138, 148
insn=25, live_throughout: 13, 137, 138, 139, 144, 145, 146, 147, dead_or_set: 
insn=31, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 1, 138
insn=30, live_throughout: 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0
insn=32, live_throughout: 0, 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 2
insn=35, live_throughout: 0, 1, 2, 13, 137, 139, 144, 145, 147, dead_or_set: 146
insn=33, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 1, 2, 14
insn=127, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=38, live_throughout: 13, 137, 138, 139, 144, 145, 146, 147, dead_or_set: 
insn=41, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 1, 138
insn=40, live_throughout: 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0
insn=42, live_throughout: 0, 1, 13, 137, 139, 144, 145, 146, 147, dead_or_set: 2
insn=43, live_throughout: 13, 137, 139, 144, 145, 146, 147, dead_or_set: 0, 1, 2, 14
insn=45, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 0
insn=46, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=48, live_throughout: 13, 14, 137, 139, 144, 145, 146, dead_or_set: 147
insn=49, live_throughout: 13, 14, 137, 139, 144, 145, 146, 147, dead_or_set: 
insn=53, live_throughout: 13, 14, 137, 139, 144, 146, 147, dead_or_set: 145
insn=51, live_throughout: 13, 14, 24, 139, 145, 146, 147, dead_or_set: 137, 144
insn=54, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=56, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=57, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=61, live_throughout: 13, dead_or_set: 0
insn=62, live_throughout: 0, 13, dead_or_set: 1
insn=63, live_throughout: 13, dead_or_set: 0, 1, 14
insn=109, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 
insn=66, live_throughout: 13, 139, 144, 145, 146, 147, dead_or_set: 134
insn=69, live_throughout: 13, 134, 145, 146, 147, dead_or_set: 139, 144, 156
insn=67, live_throughout: 13, 146, 147, 156, dead_or_set: 134, 145
insn=71, live_throughout: 13, 134, 146, 147, 156, dead_or_set: 
insn=70, live_throughout: 13, 24, 134, 146, 147, dead_or_set: 135, 156
insn=72, live_throughout: 13, 134, 135, 146, 147, dead_or_set: 
insn=77, live_throughout: 13, 134, 135, dead_or_set: 0, 146
insn=78, live_throughout: 0, 13, 134, dead_or_set: 1, 135
insn=79, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=80, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=82, live_throughout: 13, 14, dead_or_set: 140
insn=129, live_throughout: 13, 14, 140, dead_or_set: 
insn=85, live_throughout: 13, 134, 135, 147, dead_or_set: 
insn=87, live_throughout: 13, 134, 135, dead_or_set: 0, 147
insn=88, live_throughout: 0, 13, 134, dead_or_set: 1, 135
insn=89, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=90, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=92, live_throughout: 13, 14, dead_or_set: 0
insn=93, live_throughout: 13, 14, dead_or_set: 
insn=94, live_throughout: 13, 14, dead_or_set: 
insn=96, live_throughout: 13, 14, dead_or_set: 140
insn=131, live_throughout: 13, 14, 140, dead_or_set: 
insn=99, live_throughout: 13, 14, dead_or_set: 
insn=101, live_throughout: 13, 14, dead_or_set: 140
insn=102, live_throughout: 13, 14, 140, dead_or_set: 
insn=117, live_throughout: 13, 14, dead_or_set: 0, 140
insn=123, live_throughout: 0, 13, 14, dead_or_set: 
insn=107, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=111, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=112, live_throughout: 13, 14, 139, 144, 145, 146, 147, dead_or_set: 
insn=134, live_throughout: 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 67
changing reg in insn 66
changing reg in insn 79
changing reg in insn 89
changing reg in insn 67
changing reg in insn 70
changing reg in insn 78
changing reg in insn 88
changing reg in insn 21
changing reg in insn 20
changing reg in insn 53
changing reg in insn 53
changing reg in insn 32
changing reg in insn 51
changing reg in insn 48
changing reg in insn 42
changing reg in insn 35
changing reg in insn 21
changing reg in insn 23
changing reg in insn 31
changing reg in insn 41
changing reg in insn 11
changing reg in insn 69
changing reg in insn 22
changing reg in insn 12
changing reg in insn 101
changing reg in insn 96
changing reg in insn 82
changing reg in insn 117
changing reg in insn 51
changing reg in insn 4
changing reg in insn 111
changing reg in insn 69
changing reg in insn 66
changing reg in insn 56
changing reg in insn 51
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 53
changing reg in insn 5
changing reg in insn 53
changing reg in insn 53
changing reg in insn 67
changing reg in insn 21
changing reg in insn 14
changing reg in insn 35
changing reg in insn 6
changing reg in insn 77
changing reg in insn 30
changing reg in insn 71
changing reg in insn 35
changing reg in insn 24
changing reg in insn 48
changing reg in insn 7
changing reg in insn 87
changing reg in insn 48
changing reg in insn 40
changing reg in insn 22
changing reg in insn 23
changing reg in insn 69
changing reg in insn 70
deleting insn with uid = 31.
deleting insn with uid = 41.
deleting insn with uid = 78.
deleting insn with uid = 79.
deleting insn with uid = 88.
deleting insn with uid = 89.
deleting insn with uid = 117.


try_optimize_cfg iteration 1

Forwarding edge 17->18 to 15 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 90.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 33 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 26 count 36 (  1.9)


vfp_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,11u} r1={11d,6u} r2={11d,6u} r3={7d,1u} r4={2d,4u} r5={2d,8u} r6={2d,8u} r7={2d,5u} r8={2d,5u} r10={2d,3u} r12={7d} r13={1d,26u,2d} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={17d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 844{749d,93u,2e} in 57{51 regular + 6 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 5 2 arch/arm/kernel/ptrace.c:663 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 5 11 4 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (nil))

(insn 4 5 6 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 6 4 12 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 12 6 7 2 arch/arm/kernel/ptrace.c:668 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 7 12 13 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 13 7 14 2 arch/arm/kernel/ptrace.c:668 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 13 15 2 include/linux/regset.h:224 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 15 3)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 18 17 19 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 22 4 include/linux/regset.h:229 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 22 20 21 4 include/linux/regset.h:230 (set (reg/f:SI 1 r1 [148])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 21 22 24 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 24 21 23 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 23 24 25 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 1 r1 [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(jump_insn 25 23 26 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 26 25 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 26 32 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 32 30 35 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 35 32 33 5 include/linux/regset.h:233 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 33 35 127 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 127 33 128 5 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 128 127 38)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 38 128 39 6 71 "" [1 uses])

(note 39 38 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 39 40 6 NOTE_INSN_DELETED)

(insn 40 44 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 42 40 43 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 45 43 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 7 include/linux/regset.h:237 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 49 48 50 8 72 "" [1 uses])

(note 50 49 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 50 53 8 NOTE_INSN_DELETED)

(insn 53 52 51 8 include/linux/regset.h:279 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(insn 51 53 54 8 include/linux/regset.h:238 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(jump_insn 54 51 55 8 include/linux/regset.h:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  15
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 9 include/linux/regset.h:281 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 57 56 58 9 include/linux/regset.h:281 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
        (nil)))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 58 57 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 61 58 62 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 62 61 63 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 1 r1)
        (const_int 281 [0x119])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 281 [0x119])
        (nil)))

(call_insn 63 62 64 10 include/linux/regset.h:281 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 64 63 109)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 109 64 65 11 76 "" [1 uses])

(note 65 109 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 68 65 66 11 NOTE_INSN_DELETED)

(insn 66 68 69 11 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 69 66 67 11 include/linux/regset.h:230 (set (reg:SI 4 r4 [156])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(insn 67 69 71 11 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 71 67 70 11 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 70 71 72 11 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:135 data ] [135])
        (plus:SI (reg:SI 4 r4 [156])
            (const_int 436 [0x1b4]))) 4 {*arm_addsi3} (nil))

(jump_insn 72 70 73 11 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 2 [r2] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 73 72 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 77 73 80 12 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 80 77 82 12 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 82 80 129 12 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 129 82 130 12 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 16)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 130 129 85)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 85 130 86 13 74 "" [1 uses])

(note 86 85 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 86 87 13 NOTE_INSN_DELETED)

(insn 87 91 90 13 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 90 87 92 13 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 92 90 93 13 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 93 92 94 13 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 6 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 94 93 95 14 73 "" [1 uses])

(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 131 14 include/linux/regset.h:235 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 131 96 132 14 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 132 131 99)

;; Start of basic block ( 2 13 8 18) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  8
;; Pred edge  18 [100.0%] 
(code_label 99 132 100 15 69 "" [4 uses])

(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 101 100 102 15 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 12 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
;; Pred edge  14 [100.0%] 
(code_label 102 101 103 16 75 "" [2 uses])

(note 103 102 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 123 103 107 16 arch/arm/kernel/ptrace.c:687 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 107 123 108 17 70 "" [2 uses])

(note 108 107 110 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 110 108 111 17 NOTE_INSN_DELETED)

(insn 111 110 112 17 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 133 17 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 133 112 134 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 134 133 135 18 (set (pc)
        (label_ref 99)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 15)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 135 134 137)

(note 137 135 0 NOTE_INSN_DELETED)


;; Function fpa_get (fpa_get)[0:1559]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 38.
deleting insn with uid = 38.
deleting insn with uid = 7.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)

Pass 0 for finding allocno costs

    a5 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 64(l0): point = 0
   Insn 58(l0): point = 2
   Insn 51(l0): point = 5
   Insn 70(l0): point = 8
   Insn 46(l0): point = 10
   Insn 44(l0): point = 13
   Insn 43(l0): point = 15
   Insn 41(l0): point = 17
   Insn 40(l0): point = 19
   Insn 39(l0): point = 21
   Insn 38(l0): point = 23
   Insn 68(l0): point = 26
   Insn 33(l0): point = 28
   Insn 31(l0): point = 30
   Insn 30(l0): point = 32
   Insn 29(l0): point = 34
   Insn 28(l0): point = 36
   Insn 23(l0): point = 39
   Insn 21(l0): point = 41
   Insn 22(l0): point = 43
   Insn 19(l0): point = 45
   Insn 20(l0): point = 47
   Insn 18(l0): point = 49
   Insn 16(l0): point = 52
   Insn 15(l0): point = 54
   Insn 13(l0): point = 57
   Insn 6(l0): point = 59
   Insn 11(l0): point = 61
   Insn 4(l0): point = 63
   Insn 12(l0): point = 65
 a0(r135): [26..28] [8..10] [3..5]
 a1(r134): [33..49] [20..25]
 a2(r136): [35..41] [22..25]
 a3(r143): [37..59]
 a4(r141): [42..63]
 a5(r145): [42..47]
 a6(r142): [46..65]
 a7(r137): [48..61]
Compressing live ranges: from 68 to 22 - 32%
Ranges after the compression:
 a0(r135): [7..8] [2..3] [0..1]
 a1(r134): [9..17] [4..6]
 a2(r136): [10..12] [5..6]
 a3(r143): [11..18]
 a4(r141): [13..20]
 a5(r145): [13..15]
 a6(r142): [14..21]
 a7(r137): [16..19]
+++Allocating 64 bytes for conflict table (uncompressed size 64)
;; a0(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a2(r136,l0) a3(r143,l0) a5(r145,l0) a4(r141,l0) a6(r142,l0) a7(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r136,l0) conflicts: a1(r134,l0) a3(r143,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a3(r143,l0) conflicts: a1(r134,l0) a2(r136,l0) a5(r145,l0) a4(r141,l0) a6(r142,l0) a7(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r141,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r145,l0) a6(r142,l0) a7(r137,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a5(r145,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a6(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r142,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r145,l0) a4(r141,l0) a7(r137,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a7(r137,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a6(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a5(r145)<->a7(r137)@125:shuffle
  cp1:a2(r136)<->a5(r145)@125:shuffle
  cp2:a2(r136)<->a4(r141)@125:shuffle
  regions=1, blocks=10, points=22
    allocnos=8, copies=3, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r135 1r134 2r136 3r143 4r141 5r145 6r142 7r137
    modified regnos: 134 135 136 137 141 142 143 145
    border:
    Pressure: GENERAL_REGS=5
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a5(r145,l0)
      Pushing a7(r137,l0)
      Pushing a3(r143,l0)
      Pushing a2(r136,l0)
      Pushing a0(r135,l0)
      Pushing a4(r141,l0)
      Pushing a1(r134,l0)
      Pushing a6(r142,l0)
      Popping a6(r142,l0)  -- assign reg 3
      Popping a1(r134,l0)  -- assign reg 2
      Popping a4(r141,l0)  -- assign reg 1
      Popping a0(r135,l0)  -- assign reg 0
      Popping a2(r136,l0)  -- assign reg 1
      Popping a3(r143,l0)  -- assign reg 0
      Popping a7(r137,l0)  -- assign reg 12
      Popping a5(r145,l0)  -- assign reg 12
Disposition:
    1:r134 l0     2    0:r135 l0     0    2:r136 l0     1    7:r137 l0    12
    4:r141 l0     1    6:r142 l0     3    3:r143 l0     0    5:r145 l0    12
New iteration of spill/restore move
+++Costs: overall -24250, reg -24250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 0, 2, 13, 14, dead_or_set: 3, 142
insn=4, live_throughout: 0, 13, 14, 24, 142, dead_or_set: 2, 141
insn=11, live_throughout: 13, 14, 24, 141, 142, dead_or_set: 0, 137
insn=6, live_throughout: 13, 14, 24, 137, 141, 142, dead_or_set: 143
insn=13, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=15, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=16, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=18, live_throughout: 13, 137, 141, 142, 143, dead_or_set: 134
insn=20, live_throughout: 13, 134, 141, 142, 143, dead_or_set: 137, 145
insn=19, live_throughout: 13, 141, 143, 145, dead_or_set: 134, 142
insn=22, live_throughout: 13, 134, 141, 143, 145, dead_or_set: 
insn=21, live_throughout: 13, 24, 134, 143, dead_or_set: 136, 141, 145
insn=23, live_throughout: 13, 134, 136, 143, dead_or_set: 
insn=28, live_throughout: 13, 134, 136, dead_or_set: 0, 143
insn=29, live_throughout: 0, 13, 134, dead_or_set: 1, 136
insn=30, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=31, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=33, live_throughout: 13, 14, dead_or_set: 135
insn=68, live_throughout: 13, 14, 135, dead_or_set: 
insn=36, live_throughout: 13, 134, 136, dead_or_set: 
insn=38, live_throughout: 13, 134, 136, dead_or_set: 0
insn=39, live_throughout: 0, 13, 134, dead_or_set: 1, 136
insn=40, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=41, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=43, live_throughout: 13, 14, dead_or_set: 0
insn=44, live_throughout: 13, 14, dead_or_set: 
insn=46, live_throughout: 13, 14, dead_or_set: 135
insn=70, live_throughout: 13, 14, 135, dead_or_set: 
insn=49, live_throughout: 13, 14, dead_or_set: 
insn=51, live_throughout: 13, 14, dead_or_set: 135
insn=52, live_throughout: 13, 14, 135, dead_or_set: 
insn=58, live_throughout: 13, 14, dead_or_set: 0, 135
insn=64, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 6 (nil))
changing reg in insn 19
changing reg in insn 18
changing reg in insn 30
changing reg in insn 40
changing reg in insn 19
changing reg in insn 51
changing reg in insn 46
changing reg in insn 33
changing reg in insn 58
changing reg in insn 21
changing reg in insn 29
changing reg in insn 39
changing reg in insn 11
changing reg in insn 20
changing reg in insn 4
changing reg in insn 21
changing reg in insn 18
changing reg in insn 15
changing reg in insn 12
changing reg in insn 19
changing reg in insn 6
changing reg in insn 28
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 28.
deleting insn with uid = 29.
deleting insn with uid = 30.
deleting insn with uid = 39.
deleting insn with uid = 40.
deleting insn with uid = 58.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)


fpa_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,7u} r1={5d,5u} r2={5d,4u} r3={4d,3u} r12={5d,2u} r13={1d,13u,1d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 298{258d,39u,1e} in 24{22 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 11 2 arch/arm/kernel/ptrace.c:614 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 11 4 6 2 arch/arm/kernel/ptrace.c:616 (set (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 6 11 13 2 arch/arm/kernel/ptrace.c:614 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 13 6 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn 19 20 22 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 22 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 21 22 23 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (nil))

(jump_insn 23 21 24 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 73 [0x49])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 24 23 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 31 24 33 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 33 31 68 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 68 33 69 5 (set (pc)
        (label_ref 52)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 69 68 36)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 36 69 37 6 82 "" [1 uses])

(note 37 36 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 42 37 38 6 NOTE_INSN_DELETED)

(insn 38 42 41 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 41 38 43 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 43 41 44 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 45 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 70 7 include/linux/regset.h:235 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 70 46 71 7 (set (pc)
        (label_ref 52)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 71 70 49)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 49 71 50 8 81 "" [3 uses])

(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 8 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 52 51 53 9 83 "" [2 uses])

(note 53 52 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 53 72 9 arch/arm/kernel/ptrace.c:618 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 72 64 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)


;; Function gpr_get (gpr_get)[0:1557]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 39.
deleting insn with uid = 39.
deleting insn with uid = 7.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)

Pass 0 for finding allocno costs

    a6 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 65(l0): point = 0
   Insn 59(l0): point = 2
   Insn 52(l0): point = 5
   Insn 71(l0): point = 8
   Insn 47(l0): point = 10
   Insn 45(l0): point = 13
   Insn 44(l0): point = 15
   Insn 42(l0): point = 17
   Insn 41(l0): point = 19
   Insn 40(l0): point = 21
   Insn 39(l0): point = 23
   Insn 69(l0): point = 26
   Insn 34(l0): point = 28
   Insn 32(l0): point = 30
   Insn 31(l0): point = 32
   Insn 30(l0): point = 34
   Insn 29(l0): point = 36
   Insn 24(l0): point = 39
   Insn 22(l0): point = 41
   Insn 21(l0): point = 43
   Insn 23(l0): point = 45
   Insn 19(l0): point = 47
   Insn 20(l0): point = 49
   Insn 18(l0): point = 51
   Insn 16(l0): point = 54
   Insn 15(l0): point = 56
   Insn 13(l0): point = 59
   Insn 6(l0): point = 61
   Insn 11(l0): point = 63
   Insn 4(l0): point = 65
   Insn 12(l0): point = 67
 a0(r135): [26..28] [8..10] [3..5]
 a1(r134): [33..51] [20..25]
 a2(r136): [35..41] [22..25]
 a3(r143): [37..61]
 a4(r141): [42..65]
 a5(r145): [42..43]
 a6(r146): [44..49]
 a7(r142): [48..67]
 a8(r137): [50..63]
Compressing live ranges: from 70 to 24 - 34%
Ranges after the compression:
 a0(r135): [7..8] [2..3] [0..1]
 a1(r134): [9..19] [4..6]
 a2(r136): [10..12] [5..6]
 a3(r143): [11..20]
 a4(r141): [13..22]
 a5(r145): [13..14]
 a6(r146): [15..17]
 a7(r142): [16..23]
 a8(r137): [18..21]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a2(r136,l0) a3(r143,l0) a5(r145,l0) a4(r141,l0) a6(r146,l0) a7(r142,l0) a8(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r136,l0) conflicts: a1(r134,l0) a3(r143,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a3(r143,l0) conflicts: a1(r134,l0) a2(r136,l0) a5(r145,l0) a4(r141,l0) a6(r146,l0) a7(r142,l0) a8(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r141,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r145,l0) a6(r146,l0) a7(r142,l0) a8(r137,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a5(r145,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r146,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a7(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r142,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a6(r146,l0) a8(r137,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a8(r137,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r141,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a6(r146)<->a8(r137)@125:shuffle
  cp1:a5(r145)<->a6(r146)@125:shuffle
  cp2:a2(r136)<->a5(r145)@125:shuffle
  cp3:a2(r136)<->a4(r141)@125:shuffle
  regions=1, blocks=10, points=24
    allocnos=9, copies=4, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r135 1r134 2r136 3r143 4r141 5r145 6r146 7r142 8r137
    modified regnos: 134 135 136 137 141 142 143 145 146
    border:
    Pressure: GENERAL_REGS=5
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a6(r146,l0)
      Pushing a5(r145,l0)
      Pushing a8(r137,l0)
      Pushing a3(r143,l0)
      Pushing a2(r136,l0)
      Pushing a0(r135,l0)
      Pushing a4(r141,l0)
      Pushing a1(r134,l0)
      Pushing a7(r142,l0)
      Popping a7(r142,l0)  -- assign reg 3
      Popping a1(r134,l0)  -- assign reg 2
      Popping a4(r141,l0)  -- assign reg 1
      Popping a0(r135,l0)  -- assign reg 0
      Popping a2(r136,l0)  -- assign reg 1
      Popping a3(r143,l0)  -- assign reg 0
      Popping a8(r137,l0)  -- assign reg 12
      Popping a5(r145,l0)  -- assign reg 12
      Popping a6(r146,l0)  -- assign reg 12
Disposition:
    1:r134 l0     2    0:r135 l0     0    2:r136 l0     1    8:r137 l0    12
    4:r141 l0     1    7:r142 l0     3    3:r143 l0     0    5:r145 l0    12
    6:r146 l0    12
New iteration of spill/restore move
+++Costs: overall -24250, reg -24250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 0, 2, 13, 14, dead_or_set: 3, 142
insn=4, live_throughout: 0, 13, 14, 24, 142, dead_or_set: 2, 141
insn=11, live_throughout: 13, 14, 24, 141, 142, dead_or_set: 0, 137
insn=6, live_throughout: 13, 14, 24, 137, 141, 142, dead_or_set: 143
insn=13, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=15, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=16, live_throughout: 13, 14, 137, 141, 142, 143, dead_or_set: 
insn=18, live_throughout: 13, 137, 141, 142, 143, dead_or_set: 134
insn=20, live_throughout: 13, 134, 141, 142, 143, dead_or_set: 137, 146
insn=19, live_throughout: 13, 141, 143, 146, dead_or_set: 134, 142
insn=23, live_throughout: 13, 134, 141, 143, 146, dead_or_set: 
insn=21, live_throughout: 13, 24, 134, 141, 143, dead_or_set: 145, 146
insn=22, live_throughout: 13, 24, 134, 143, dead_or_set: 136, 141, 145
insn=24, live_throughout: 13, 134, 136, 143, dead_or_set: 
insn=29, live_throughout: 13, 134, 136, dead_or_set: 0, 143
insn=30, live_throughout: 0, 13, 134, dead_or_set: 1, 136
insn=31, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=32, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=34, live_throughout: 13, 14, dead_or_set: 135
insn=69, live_throughout: 13, 14, 135, dead_or_set: 
insn=37, live_throughout: 13, 134, 136, dead_or_set: 
insn=39, live_throughout: 13, 134, 136, dead_or_set: 0
insn=40, live_throughout: 0, 13, 134, dead_or_set: 1, 136
insn=41, live_throughout: 0, 1, 13, dead_or_set: 2, 134
insn=42, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=44, live_throughout: 13, 14, dead_or_set: 0
insn=45, live_throughout: 13, 14, dead_or_set: 
insn=47, live_throughout: 13, 14, dead_or_set: 135
insn=71, live_throughout: 13, 14, 135, dead_or_set: 
insn=50, live_throughout: 13, 14, dead_or_set: 
insn=52, live_throughout: 13, 14, dead_or_set: 135
insn=53, live_throughout: 13, 14, 135, dead_or_set: 
insn=59, live_throughout: 13, 14, dead_or_set: 0, 135
insn=65, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 6 (nil))
changing reg in insn 19
changing reg in insn 18
changing reg in insn 31
changing reg in insn 41
changing reg in insn 19
changing reg in insn 52
changing reg in insn 47
changing reg in insn 34
changing reg in insn 59
changing reg in insn 22
changing reg in insn 30
changing reg in insn 40
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 4
changing reg in insn 22
changing reg in insn 18
changing reg in insn 15
changing reg in insn 12
changing reg in insn 19
changing reg in insn 6
changing reg in insn 29
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 29.
deleting insn with uid = 30.
deleting insn with uid = 31.
deleting insn with uid = 40.
deleting insn with uid = 41.
deleting insn with uid = 59.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)


gpr_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,7u} r1={5d,5u} r2={5d,4u} r3={4d,3u} r12={6d,3u,1d} r13={1d,13u,1d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 301{259d,40u,2e} in 25{23 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 11 2 arch/arm/kernel/ptrace.c:581 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(insn 11 4 6 2 arch/arm/kernel/ptrace.c:582 (set (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 6 11 13 2 arch/arm/kernel/ptrace.c:581 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(jump_insn 13 6 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:141 pos ] [141])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 72 [0x48])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [146])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn 19 20 23 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 23 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 21 23 22 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [146])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8112 [0x1fb0]))
        (nil)))

(insn 22 21 24 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (nil))

(jump_insn 24 22 25 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 73 [0x49])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 32 25 34 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 32 69 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 69 34 70 5 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 70 69 37)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 37 70 38 6 87 "" [1 uses])

(note 38 37 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 43 38 39 6 NOTE_INSN_DELETED)

(insn 39 43 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 42 39 44 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 44 42 45 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 45 44 46 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 71 7 include/linux/regset.h:235 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(jump_insn 71 47 72 7 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 72 71 50)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 50 72 51 8 86 "" [3 uses])

(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 8 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 53 52 54 9 88 "" [2 uses])

(note 54 53 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 65 54 73 9 arch/arm/kernel/ptrace.c:587 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 73 65 74 NOTE_INSN_DELETED)

(note 74 73 0 NOTE_INSN_DELETED)


;; Function ptrace_hbp_create (ptrace_hbp_create)[0:1554]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a5 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 58(l0): point = 0
   Insn 46(l0): point = 2
   Insn 32(l0): point = 4
   Insn 31(l0): point = 6
   Insn 30(l0): point = 8
   Insn 29(l0): point = 10
   Insn 22(l0): point = 12
   Insn 21(l0): point = 14
   Insn 14(l0): point = 16
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 11(l0): point = 22
   Insn 39(l0): point = 24
   Insn 37(l0): point = 26
   Insn 33(l0): point = 28
   Insn 44(l0): point = 30
   Insn 43(l0): point = 32
   Insn 45(l0): point = 34
   Insn 42(l0): point = 36
   Insn 15(l0): point = 38
   Insn 10(l0): point = 40
   Insn 9(l0): point = 42
   Insn 8(l0): point = 44
   Insn 3(l0): point = 46
   Insn 2(l0): point = 48
   Insn 7(l0): point = 50
 a0(r150): [5..6]
 a1(r149): [9..10]
 a2(r144): [13..14]
 a3(r139): [17..18]
 a4(r138): [21..22]
 a5(r153): [25..26]
 a6(r141): [27..38]
 a7(r136): [29..46]
 a8(r135): [35..48]
 a9(r137): [37..50]
Compressing live ranges: from 53 to 20 - 37%
Ranges after the compression:
 a0(r150): [0..1]
 a1(r149): [2..3]
 a2(r144): [4..5]
 a3(r139): [6..7]
 a4(r138): [8..9]
 a5(r153): [10..11]
 a6(r141): [12..16]
 a7(r136): [13..17]
 a8(r135): [14..18]
 a9(r137): [15..19]
+++Allocating 32 bytes for conflict table (uncompressed size 80)
;; a0(r150,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r149,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r144,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r138,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r153,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a6(r141,l0) conflicts: a7(r136,l0) a8(r135,l0) a9(r137,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a7(r136,l0) conflicts: a6(r141,l0) a8(r135,l0) a9(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r135,l0) conflicts: a6(r141,l0) a7(r136,l0) a9(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r137,l0) conflicts: a6(r141,l0) a7(r136,l0) a8(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a5(r153)<->a6(r141)@125:shuffle
  regions=1, blocks=3, points=20
    allocnos=10, copies=1, conflicts=0, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r150 1r149 2r144 3r139 4r138 5r153 6r141 7r136 8r135 9r137
    modified regnos: 135 136 137 138 139 141 144 149 150 153
    border:
    Pressure: GENERAL_REGS=6
    Reg 150 of GENERAL_REGS has 4 regs less
    Reg 149 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 153 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
      Pushing a8(r135,l0)
      Pushing a9(r137,l0)
      Pushing a6(r141,l0)
      Pushing a5(r153,l0)
      Pushing a4(r138,l0)
      Pushing a3(r139,l0)
      Pushing a2(r144,l0)
      Pushing a1(r149,l0)
      Pushing a0(r150,l0)
      Pushing a7(r136,l0)
      Popping a7(r136,l0)  -- assign reg 4
      Popping a0(r150,l0)  -- assign reg 4
      Popping a1(r149,l0)  -- assign reg 4
      Popping a2(r144,l0)  -- assign reg 4
      Popping a3(r139,l0)  -- assign reg 12
      Popping a4(r138,l0)  -- assign reg 12
      Popping a5(r153,l0)  -- assign reg 12
      Popping a6(r141,l0)  -- assign reg 12
      Popping a9(r137,l0)  -- assign reg 5
      Popping a8(r135,l0)  -- assign reg 6
Disposition:
    8:r135 l0     6    7:r136 l0     4    9:r137 l0     5    4:r138 l0    12
    3:r139 l0    12    6:r141 l0    12    2:r144 l0     4    1:r149 l0     4
    0:r150 l0     4    5:r153 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 137
insn=2, live_throughout: 1, 13, 137, dead_or_set: 0, 135
insn=3, live_throughout: 13, 135, 137, dead_or_set: 1, 136
insn=8, live_throughout: 13, 135, 136, 137, dead_or_set: 0
insn=9, live_throughout: 0, 13, 135, 136, 137, dead_or_set: 1
insn=10, live_throughout: 13, 135, 136, 137, dead_or_set: 0, 1, 14
insn=15, live_throughout: 13, 135, 136, 137, dead_or_set: 141
insn=42, live_throughout: 13, 135, 136, 141, dead_or_set: 0, 137
insn=45, live_throughout: 0, 13, 136, 141, dead_or_set: 3, 135
insn=43, live_throughout: 0, 3, 13, 136, 141, dead_or_set: 1
insn=44, live_throughout: 0, 1, 3, 13, 136, 141, dead_or_set: 2
insn=33, live_throughout: 0, 1, 2, 3, 13, 141, dead_or_set: 136
insn=37, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 141, 153
insn=39, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 153
insn=11, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 138
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 138
insn=13, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=14, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=21, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 144
insn=22, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 144
insn=29, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 149
insn=30, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 149
insn=31, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 150
insn=32, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 150
insn=46, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=58, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 31 (nil))
changing reg in insn 2
changing reg in insn 45
changing reg in insn 3
changing reg in insn 33
changing reg in insn 7
changing reg in insn 42
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 37
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 37
Spilling for insn 33.
Spilling for insn 39.
Spilling for insn 12.
Spilling for insn 14.
Spilling for insn 22.
Spilling for insn 30.
Spilling for insn 32.

Reloads for insn # 33
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 52 [0x34])) [0 attr.bp_type+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 52 [0x34])) [0 attr.bp_type+0 S4 A32])

Reloads for insn # 39
Reload 0: reload_out (QI) = (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0+40 S1 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0+40 S1 A64])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 attr.type+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 attr.type+0 S4 A64])

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 attr.size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 attr.size+0 S4 A32])

Reloads for insn # 22
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 attr.D.23422.sample_period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 attr.D.23422.sample_period+0 S8 A64])

Reloads for insn # 30
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 attr.D.23452.bp_addr+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 attr.D.23452.bp_addr+0 S8 A64])

Reloads for insn # 32
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 attr.D.23456.bp_len+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 attr.D.23456.bp_len+0 S8 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ptrace_hbp_create

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={5d,3u} r2={4d,1u} r3={4d,1u} r4={4d,4u} r5={4d,3u} r6={1d,1u} r12={7d,4u} r13={1d,15u,3d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 301{260d,38u,3e} in 26{24 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 62 2 NOTE_INSN_DELETED)

(note 62 18 23 2 NOTE_INSN_DELETED)

(note 23 62 26 2 NOTE_INSN_DELETED)

(note 26 23 63 2 NOTE_INSN_DELETED)

(note 63 26 34 2 NOTE_INSN_DELETED)

(note 34 63 41 2 NOTE_INSN_DELETED)

(note 41 34 7 2 NOTE_INSN_DELETED)

(insn 7 41 2 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg/f:SI 5 r5 [137])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 2 7 3 2 arch/arm/kernel/ptrace.c:449 (set (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 8 2 arch/arm/kernel/ptrace.c:449 (set (reg/v:SI 4 r4 [orig:136 type ] [136])
        (reg:SI 1 r1 [ type ])) 167 {*arm_movsi_insn} (nil))

(insn 8 3 9 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 9 8 10 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 15 2 include/linux/hw_breakpoint.h:40 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 10 42 2 include/linux/hw_breakpoint.h:48 (set (reg:SI 12 ip [orig:141+40 ] [141])
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                    (const_int 40 [0x28])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 42 15 45 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 45 42 43 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 3 r3)
        (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 43 45 44 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 1 r1)
        (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)
        (nil)))

(insn 44 43 33 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 33 44 37 2 arch/arm/kernel/ptrace.c:457 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 attr.bp_type+0 S4 A32])
        (reg/v:SI 4 r4 [orig:136 type ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 37 33 39 2 arch/arm/kernel/ptrace.c:458 (set (reg:SI 12 ip [153])
        (ior:SI (reg:SI 12 ip [orig:141+40 ] [141])
            (const_int 37 [0x25]))) 89 {*arm_iorsi3} (nil))

(insn 39 37 11 2 arch/arm/kernel/ptrace.c:458 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0+40 S1 A64])
        (reg:QI 12 ip [153])) 178 {*arm_movqi_insn} (nil))

(insn 11 39 12 2 include/linux/hw_breakpoint.h:42 (set (reg:SI 12 ip [138])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 12 11 13 2 include/linux/hw_breakpoint.h:42 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 attr.type+0 S4 A64])
        (reg:SI 12 ip [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 13 12 14 2 include/linux/hw_breakpoint.h:43 (set (reg:SI 12 ip [139])
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 72 [0x48])
        (nil)))

(insn 14 13 21 2 include/linux/hw_breakpoint.h:43 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 attr.size+0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 21 14 22 2 include/linux/hw_breakpoint.h:49 (set (reg:DI 4 r4 [144])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 22 21 29 2 include/linux/hw_breakpoint.h:49 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 attr.D.23422.sample_period+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 29 22 30 2 arch/arm/kernel/ptrace.c:455 (set (reg:DI 4 r4 [149])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 30 29 31 2 arch/arm/kernel/ptrace.c:455 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 attr.D.23452.bp_addr+0 S8 A64])
        (reg:DI 4 r4 [149])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 31 30 32 2 arch/arm/kernel/ptrace.c:456 (set (reg:DI 4 r4 [150])
        (const_int 4 [0x4])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn 32 31 46 2 arch/arm/kernel/ptrace.c:456 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 4 r4 [150])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(call_insn 46 32 58 2 arch/arm/kernel/ptrace.c:460 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524700 register_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 58 46 64 2 arch/arm/kernel/ptrace.c:462 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 64 58 65 NOTE_INSN_DELETED)

(note 65 64 0 NOTE_INSN_DELETED)


;; Function arch_ptrace (arch_ptrace)[0:1564]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 647.
rescanning insn with uid = 647.
deleting insn with uid = 647.
deleting insn with uid = 500.
scanning new insn with uid = 648.
verify found no changes in insn with uid = 648.
deleting insn with uid = 40.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 66 n_edges 102 count 129 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 66 n_edges 102 count 131 (    2)

Pass 0 for finding allocno costs

    a19 (r338,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r333,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r332,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r327,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r326,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r312,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r306,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r286,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r283,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r282,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r280,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r278,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r274,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r271,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r270,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r250,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r235,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r191,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r190,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r188,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r185,l1) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:220000
  a1(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:200000
  a2(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a3(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:190000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a6(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r333,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:230000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a17(r312,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r306,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r338,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r286,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r283,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r282,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a27(r278,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r280,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a33(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a38(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a40(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a42(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a50(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r243,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a53(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a54(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a55(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r236,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a57(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a60(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a61(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r227,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a63(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a64(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r220,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a67(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a68(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a69(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r214,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a71(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a72(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a73(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r208,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a75(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a81(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a82(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a84(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r185,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a87(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a88(r191,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0


Pass 1 for finding allocno costs

    r338: preferred GENERAL_REGS, alternative NO_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:220000
  a1(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:200000
  a2(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a3(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:190000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a6(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r333,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:230000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a17(r312,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r306,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r338,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r286,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r283,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r282,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a27(r278,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r280,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a33(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a38(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a40(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a42(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a50(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r243,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a53(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a54(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a55(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r236,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a57(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a60(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a61(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r227,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a63(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a64(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r220,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a67(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a68(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a69(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r214,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a71(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a72(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a73(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r208,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a75(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a76(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a81(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a82(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a84(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r185,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a87(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a88(r191,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0

   Insn 560(l0): point = 0
   Insn 554(l0): point = 2
   Insn 547(l0): point = 5
   Insn 623(l0): point = 8
   Insn 542(l0): point = 10
   Insn 621(l0): point = 13
   Insn 537(l0): point = 15
   Insn 536(l0): point = 17
   Insn 535(l0): point = 19
   Insn 534(l0): point = 21
   Insn 533(l0): point = 23
   Insn 532(l0): point = 25
   Insn 619(l0): point = 28
   Insn 527(l0): point = 30
   Insn 526(l0): point = 32
   Insn 523(l0): point = 35
   Insn 617(l0): point = 38
   Insn 518(l0): point = 40
   Insn 517(l0): point = 42
   Insn 516(l0): point = 44
   Insn 515(l0): point = 46
   Insn 502(l0): point = 49
   Insn 501(l0): point = 51
   Insn 647(l0): point = 53
   Insn 511(l0): point = 55
   Insn 503(l0): point = 57
   Insn 510(l0): point = 59
   Insn 507(l0): point = 61
   Insn 509(l0): point = 63
   Insn 498(l0): point = 66
   Insn 497(l0): point = 68
   Insn 496(l0): point = 70
   Insn 495(l0): point = 72
   Insn 493(l0): point = 75
   Insn 492(l0): point = 77
   Insn 490(l0): point = 79
   Insn 487(l0): point = 81
   Insn 489(l0): point = 83
   Insn 484(l0): point = 85
   Insn 488(l0): point = 87
   Insn 476(l0): point = 89
   Insn 479(l0): point = 91
   Insn 474(l0): point = 93
   Insn 475(l0): point = 95
   Insn 466(l0): point = 97
   Insn 469(l0): point = 99
   Insn 458(l0): point = 101
   Insn 461(l0): point = 103
   Insn 570(l0): point = 105
   Insn 615(l0): point = 108
   Insn 567(l0): point = 110
   Insn 565(l0): point = 112
   Insn 566(l0): point = 114
   Insn 444(l0): point = 117
   Insn 443(l0): point = 119
   Insn 440(l0): point = 121
   Insn 439(l0): point = 123
   Insn 438(l0): point = 125
   Insn 437(l0): point = 127
   Insn 431(l0): point = 130
   Insn 613(l0): point = 133
   Insn 421(l0): point = 135
   Insn 419(l0): point = 138
   Insn 418(l0): point = 140
   Insn 417(l0): point = 142
   Insn 416(l0): point = 144
   Insn 415(l0): point = 146
   Insn 414(l0): point = 148
   Insn 412(l0): point = 151
   Insn 411(l0): point = 153
   Insn 410(l0): point = 155
   Insn 408(l0): point = 157
   Insn 405(l0): point = 159
   Insn 611(l0): point = 162
   Insn 400(l0): point = 164
   Insn 398(l0): point = 167
   Insn 395(l0): point = 169
   Insn 397(l0): point = 171
   Insn 394(l0): point = 173
   Insn 393(l0): point = 175
   Insn 391(l0): point = 178
   Insn 390(l0): point = 180
   Insn 389(l0): point = 182
   Insn 388(l0): point = 184
   Insn 385(l0): point = 187
   Insn 384(l0): point = 189
   Insn 609(l0): point = 192
   Insn 379(l0): point = 194
   Insn 378(l0): point = 196
   Insn 376(l0): point = 199
   Insn 607(l0): point = 202
   Insn 370(l0): point = 204
   Insn 368(l0): point = 207
   Insn 367(l0): point = 209
   Insn 364(l0): point = 212
   Insn 363(l0): point = 214
   Insn 361(l0): point = 216
   Insn 360(l0): point = 218
   Insn 605(l0): point = 221
   Insn 355(l0): point = 223
   Insn 354(l0): point = 225
   Insn 569(l0): point = 228
   Insn 568(l0): point = 230
   Insn 341(l0): point = 232
   Insn 340(l0): point = 234
   Insn 339(l0): point = 236
   Insn 336(l0): point = 239
   Insn 332(l0): point = 241
   Insn 328(l0): point = 243
   Insn 325(l0): point = 245
   Insn 324(l0): point = 247
   Insn 334(l0): point = 249
   Insn 330(l0): point = 251
   Insn 320(l0): point = 253
   Insn 323(l0): point = 255
   Insn 317(l0): point = 257
   Insn 603(l0): point = 260
   Insn 312(l0): point = 262
   Insn 310(l0): point = 265
   Insn 309(l0): point = 267
   Insn 601(l0): point = 270
   Insn 294(l0): point = 272
   Insn 292(l0): point = 274
   Insn 599(l0): point = 277
   Insn 287(l0): point = 279
   Insn 285(l0): point = 282
   Insn 284(l0): point = 284
   Insn 283(l0): point = 286
   Insn 281(l0): point = 288
   Insn 597(l0): point = 291
   Insn 273(l0): point = 293
   Insn 271(l0): point = 296
   Insn 270(l0): point = 298
   Insn 269(l0): point = 300
   Insn 268(l0): point = 302
   Insn 265(l0): point = 305
   Insn 595(l0): point = 308
   Insn 260(l0): point = 310
   Insn 258(l0): point = 313
   Insn 593(l0): point = 316
   Insn 252(l0): point = 318
   Insn 249(l0): point = 320
   Insn 246(l0): point = 322
   Insn 251(l0): point = 324
   Insn 248(l0): point = 326
   Insn 242(l0): point = 328
   Insn 240(l0): point = 330
   Insn 239(l0): point = 332
   Insn 238(l0): point = 334
   Insn 237(l0): point = 336
   Insn 236(l0): point = 338
   Insn 235(l0): point = 340
   Insn 234(l0): point = 342
   Insn 233(l0): point = 344
   Insn 231(l0): point = 347
   Insn 230(l0): point = 349
   Insn 227(l0): point = 352
   Insn 226(l0): point = 354
   Insn 224(l0): point = 356
   Insn 223(l0): point = 358
   Insn 591(l0): point = 361
   Insn 218(l0): point = 363
   Insn 217(l0): point = 365
   Insn 211(l0): point = 367
   Insn 212(l0): point = 369
   Insn 216(l0): point = 371
   Insn 214(l0): point = 373
   Insn 215(l0): point = 375
   Insn 213(l0): point = 377
   Insn 205(l0): point = 380
   Insn 204(l0): point = 382
   Insn 203(l0): point = 384
   Insn 645(l0): point = 389
   Insn 202(l0): point = 391
   Insn 626(l0): point = 393
   Insn 625(l0): point = 395
   Insn 589(l0): point = 398
   Insn 194(l0): point = 400
   Insn 193(l0): point = 402
   Insn 187(l0): point = 404
   Insn 188(l0): point = 406
   Insn 192(l0): point = 408
   Insn 190(l0): point = 410
   Insn 191(l0): point = 412
   Insn 189(l0): point = 414
   Insn 181(l0): point = 417
   Insn 180(l0): point = 419
   Insn 179(l0): point = 421
   Insn 644(l0): point = 426
   Insn 178(l0): point = 428
   Insn 628(l0): point = 430
   Insn 627(l0): point = 432
   Insn 587(l0): point = 435
   Insn 169(l0): point = 437
   Insn 170(l0): point = 439
   Insn 168(l0): point = 441
   Insn 585(l0): point = 444
   Insn 163(l0): point = 446
   Insn 162(l0): point = 448
   Insn 160(l0): point = 450
   Insn 161(l0): point = 452
   Insn 159(l0): point = 454
   Insn 583(l0): point = 457
   Insn 154(l0): point = 459
   Insn 153(l0): point = 461
   Insn 147(l0): point = 463
   Insn 148(l0): point = 465
   Insn 152(l0): point = 467
   Insn 150(l0): point = 469
   Insn 151(l0): point = 471
   Insn 149(l0): point = 473
   Insn 141(l0): point = 476
   Insn 140(l0): point = 478
   Insn 139(l0): point = 480
   Insn 643(l0): point = 485
   Insn 138(l0): point = 487
   Insn 630(l0): point = 489
   Insn 629(l0): point = 491
   Insn 581(l0): point = 494
   Insn 130(l0): point = 496
   Insn 129(l0): point = 498
   Insn 123(l0): point = 500
   Insn 124(l0): point = 502
   Insn 128(l0): point = 504
   Insn 126(l0): point = 506
   Insn 127(l0): point = 508
   Insn 125(l0): point = 510
   Insn 117(l0): point = 513
   Insn 116(l0): point = 515
   Insn 115(l0): point = 517
   Insn 642(l0): point = 522
   Insn 114(l0): point = 524
   Insn 632(l0): point = 526
   Insn 631(l0): point = 528
   Insn 579(l0): point = 531
   Insn 106(l0): point = 533
   Insn 105(l0): point = 535
   Insn 99(l0): point = 537
   Insn 100(l0): point = 539
   Insn 104(l0): point = 541
   Insn 102(l0): point = 543
   Insn 103(l0): point = 545
   Insn 101(l0): point = 547
   Insn 94(l0): point = 550
   Insn 93(l0): point = 552
   Insn 92(l0): point = 554
   Insn 641(l0): point = 559
   Insn 91(l0): point = 561
   Insn 634(l0): point = 563
   Insn 633(l0): point = 565
   Insn 577(l0): point = 568
   Insn 83(l0): point = 570
   Insn 82(l0): point = 572
   Insn 76(l0): point = 574
   Insn 77(l0): point = 576
   Insn 81(l0): point = 578
   Insn 79(l0): point = 580
   Insn 80(l0): point = 582
   Insn 78(l0): point = 584
   Insn 71(l0): point = 587
   Insn 70(l0): point = 589
   Insn 69(l0): point = 591
   Insn 640(l0): point = 596
   Insn 68(l0): point = 598
   Insn 636(l0): point = 600
   Insn 635(l0): point = 602
   Insn 575(l0): point = 605
   Insn 60(l0): point = 607
   Insn 59(l0): point = 609
   Insn 58(l0): point = 611
   Insn 57(l0): point = 613
   Insn 56(l0): point = 615
   Insn 573(l0): point = 618
   Insn 51(l0): point = 620
   Insn 50(l0): point = 622
   Insn 49(l0): point = 624
   Insn 48(l0): point = 626
   Insn 45(l0): point = 629
   Insn 648(l0): point = 631
   Insn 43(l0): point = 633
   Insn 42(l0): point = 635
   Insn 39(l0): point = 637
   Insn 571(l0): point = 640
   Insn 34(l0): point = 642
   Insn 32(l0): point = 645
   Insn 31(l0): point = 647
   Insn 29(l0): point = 650
   Insn 28(l0): point = 652
   Insn 27(l0): point = 654
   Insn 639(l0): point = 656
   Insn 638(l0): point = 658
   Insn 11(l0): point = 661
   Insn 5(l0): point = 663
   Insn 4(l0): point = 665
   Insn 10(l0): point = 667
   Insn 2(l0): point = 669
   Insn 3(l0): point = 671
   Insn 306(l1): point = 674
   Insn 305(l1): point = 676
   Insn 300(l1): point = 679
 a0(r181): [618..620] [605..607] [568..570] [531..533] [494..496] [457..459] [444..446] [435..439] [398..400] [361..363] [291..293] [221..228] [202..204] [162..164] [133..135] [75..77] [38..40] [28..35] [13..15] [8..10] [3..5]
 a1(r191): [625..663] [612..617] [577..604] [540..567] [503..530] [466..493] [453..456] [438..443] [407..434] [370..397] [296..360] [235..290] [207..220] [176..201] [20..27]
 a2(r190): [645..665] [636..639] [614..617] [345..360] [296..315] [282..290] [268..276] [205..220] [167..201] [138..161] [120..132] [22..27]
 a3(r189): [661..671] [24..27]
 a4(r188): [645..669] [638..639] [616..617] [585..604] [548..567] [511..530] [474..493] [455..456] [442..443] [415..434] [378..397] [226..360] [33..220] [26..27]
 a5(r148): [151..155] [136..142] [47..132]
 a6(r327): [50..51]
 a7(r326): [52..53]
 a8(r333): [56..63]
 a9(r144): [58..70]
 a10(r332): [60..61]
 a11(r184): [62..105]
 a12(r143): [69..72]
 a13(r146): [192..194] [167..187] [138..161] [117..132] [71..107]
 a14(r319): [86..91]
 a15(r133): [90..95]
 a16(r147): [167..169] [138..161] [115..132] [92..107]
 a17(r312): [94..99]
 a18(r306): [98..103]
 a19(r338): [111..112]
 a20(r286): [138..157] [131..132]
 a21(r283): [158..159]
 a22(r145): [167..182] [160..161]
 a23(r282): [183..184]
 a24(r135): [192..196] [185..189]
 a25(r151): [229..230]
 a26(r152): [316..318] [277..279] [260..262] [237..239]
 a27(r278): [240..241]
 a28(r280): [240..249]
 a29(r274): [242..243]
 a30(r276): [242..251]
 a31(r271): [244..245]
 a32(r185): [265..274] [244..259]
 a33(r270): [246..247]
 a34(r266): [246..253]
 a35(r269): [248..255]
 a36(r141): [265..272] [258..259]
 a37(r154): [280..286] [263..276]
 a38(r259): [287..288]
 a39(r153): [296..300] [289..290]
 a40(r255): [301..302]
 a41(r136): [308..310] [303..305]
 a42(r254): [319..324]
 a43(r137): [319..320]
 a44(r252): [321..326]
 a45(r139): [321..322]
 a46(r250): [323..330]
 a47(r159): [325..340]
 a48(r158): [327..334]
 a49(r161): [368..389]
 a50(r162): [386..386] [384..384]
 a51(r245): [390..391]
 a52(r243): [392..395]
 a53(r164): [405..426]
 a54(r165): [423..423] [421..421]
 a55(r238): [427..428]
 a56(r236): [429..432]
 a57(r235): [438..441]
 a58(r234): [451..454]
 a59(r167): [464..485]
 a60(r168): [482..482] [480..480]
 a61(r229): [486..487]
 a62(r227): [488..491]
 a63(r170): [501..522]
 a64(r171): [519..519] [517..517]
 a65(r222): [523..524]
 a66(r220): [525..528]
 a67(r173): [538..559]
 a68(r174): [556..556] [554..554]
 a69(r216): [560..561]
 a70(r214): [562..565]
 a71(r176): [575..596]
 a72(r177): [593..593] [591..591]
 a73(r210): [597..598]
 a74(r208): [599..602]
 a75(r179): [640..642] [627..629]
 a76(r203): [630..631]
 a77(r206): [630..633]
 a78(r205): [634..635]
 a79(r202): [634..637]
 a80(r201): [643..654]
 a81(r195): [655..658]
 a82(r192): [662..667]
 a83(r141): [674..681]
 a84(r154): [674..681]
 a85(r185): [674..681]
 a86(r188): [674..681]
 a87(r190): [674..681]
 a88(r191): [674..681]
Compressing live ranges: from 682 to 277 - 40%
Ranges after the compression:
 a0(r181): [247..248] [241..242] [228..229] [215..216] [202..203] [189..190] [182..183] [176..178] [163..164] [150..151] [123..124] [83..85] [78..79] [63..64] [51..52] [31..32] [14..15] [11..13] [4..5] [2..3] [0..1]
 a1(r191): [275..276] [249..270] [243..246] [231..240] [218..227] [205..214] [192..201] [185..188] [177..181] [166..175] [153..162] [125..149] [88..122] [81..82] [67..77] [6..10]
 a2(r190): [275..276] [264..271] [257..260] [244..246] [148..149] [125..133] [117..122] [110..113] [80..82] [65..77] [54..62] [48..50] [7..10]
 a3(r189): [268..274] [8..10]
 a4(r188): [275..276] [264..273] [259..260] [245..246] [232..240] [219..227] [206..214] [193..201] [187..188] [180..181] [167..175] [154..162] [84..149] [12..82] [9..10]
 a5(r148): [56..57] [53..55] [16..50]
 a6(r327): [17..18]
 a7(r326): [19..20]
 a8(r333): [21..26]
 a9(r144): [22..28]
 a10(r332): [23..24]
 a11(r184): [25..42]
 a12(r143): [27..30]
 a13(r146): [74..75] [65..72] [54..62] [47..50] [29..43]
 a14(r319): [33..35]
 a15(r133): [34..38]
 a16(r147): [65..66] [54..62] [46..50] [36..43]
 a17(r312): [37..40]
 a18(r306): [39..41]
 a19(r338): [44..45]
 a20(r286): [54..58] [49..50]
 a21(r283): [59..60]
 a22(r145): [65..68] [61..62]
 a23(r282): [69..70]
 a24(r135): [74..76] [71..73]
 a25(r151): [86..87]
 a26(r152): [134..135] [114..115] [106..107] [89..90]
 a27(r278): [91..92]
 a28(r280): [91..100]
 a29(r274): [93..94]
 a30(r276): [93..101]
 a31(r271): [95..96]
 a32(r185): [275..276] [109..112] [95..105]
 a33(r270): [97..98]
 a34(r266): [97..102]
 a35(r269): [99..103]
 a36(r141): [275..276] [109..111] [104..105]
 a37(r154): [275..276] [116..118] [108..113]
 a38(r259): [119..120]
 a39(r153): [125..126] [121..122]
 a40(r255): [127..128]
 a41(r136): [131..132] [129..130]
 a42(r254): [136..141]
 a43(r137): [136..137]
 a44(r252): [138..143]
 a45(r139): [138..139]
 a46(r250): [140..145]
 a47(r159): [142..147]
 a48(r158): [144..146]
 a49(r161): [152..157]
 a50(r162): [156..156] [155..155]
 a51(r245): [158..159]
 a52(r243): [160..161]
 a53(r164): [165..170]
 a54(r165): [169..169] [168..168]
 a55(r238): [171..172]
 a56(r236): [173..174]
 a57(r235): [177..179]
 a58(r234): [184..186]
 a59(r167): [191..196]
 a60(r168): [195..195] [194..194]
 a61(r229): [197..198]
 a62(r227): [199..200]
 a63(r170): [204..209]
 a64(r171): [208..208] [207..207]
 a65(r222): [210..211]
 a66(r220): [212..213]
 a67(r173): [217..222]
 a68(r174): [221..221] [220..220]
 a69(r216): [223..224]
 a70(r214): [225..226]
 a71(r176): [230..235]
 a72(r177): [234..234] [233..233]
 a73(r210): [236..237]
 a74(r208): [238..239]
 a75(r179): [261..262] [250..251]
 a76(r203): [252..253]
 a77(r206): [252..254]
 a78(r205): [255..256]
 a79(r202): [255..258]
 a80(r201): [263..265]
 a81(r195): [266..267]
 a82(r192): [269..272]
+++Allocating 880 bytes for conflict table (uncompressed size 1424)
;; a0(r181,l0) conflicts: a1(r191,l0) a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a57(r235,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r191,l0) conflicts: a0(r181,l0) a2(r190,l0) a3(r189,l0) a4(r188,l0) a13(r146,l0) a22(r145,l0) a23(r282,l0) a24(r135,l0) a26(r152,l0) a27(r278,l0) a28(r280,l0) a29(r274,l0) a30(r276,l0) a31(r271,l0) a32(r185,l0) a33(r270,l0) a34(r266,l0) a35(r269,l0) a36(r141,l0) a37(r154,l0) a38(r259,l0) a39(r153,l0) a40(r255,l0) a41(r136,l0) a43(r137,l0) a42(r254,l0) a45(r139,l0) a44(r252,l0) a46(r250,l0) a47(r159,l0) a48(r158,l0) a49(r161,l0) a50(r162,l0) a51(r245,l0) a52(r243,l0) a53(r164,l0) a54(r165,l0) a55(r238,l0) a56(r236,l0) a57(r235,l0) a58(r234,l0) a59(r167,l0) a60(r168,l0) a61(r229,l0) a62(r227,l0) a63(r170,l0) a64(r171,l0) a65(r222,l0) a66(r220,l0) a67(r173,l0) a68(r174,l0) a69(r216,l0) a70(r214,l0) a71(r176,l0) a72(r177,l0) a73(r210,l0) a74(r208,l0) a75(r179,l0) a76(r203,l0) a77(r206,l0) a78(r205,l0) a79(r202,l0) a80(r201,l0) a81(r195,l0) a82(r192,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r190,l0) conflicts: a1(r191,l0) a3(r189,l0) a4(r188,l0) a5(r148,l0) a13(r146,l0) a16(r147,l0) a20(r286,l0) a21(r283,l0) a22(r145,l0) a23(r282,l0) a24(r135,l0) a32(r185,l0) a36(r141,l0) a37(r154,l0) a38(r259,l0) a39(r153,l0) a40(r255,l0) a41(r136,l0) a79(r202,l0) a80(r201,l0) a81(r195,l0) a82(r192,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r189,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a82(r192,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a4(r188,l0) conflicts: a0(r181,l0) a1(r191,l0) a2(r190,l0) a3(r189,l0) a5(r148,l0) a6(r327,l0) a7(r326,l0) a8(r333,l0) a9(r144,l0) a10(r332,l0) a11(r184,l0) a12(r143,l0) a13(r146,l0) a14(r319,l0) a15(r133,l0) a16(r147,l0) a17(r312,l0) a18(r306,l0) a19(r338,l0) a20(r286,l0) a21(r283,l0) a22(r145,l0) a23(r282,l0) a24(r135,l0) a25(r151,l0) a26(r152,l0) a27(r278,l0) a28(r280,l0) a29(r274,l0) a30(r276,l0) a31(r271,l0) a32(r185,l0) a33(r270,l0) a34(r266,l0) a35(r269,l0) a36(r141,l0) a37(r154,l0) a38(r259,l0) a39(r153,l0) a40(r255,l0) a41(r136,l0) a43(r137,l0) a42(r254,l0) a45(r139,l0) a44(r252,l0) a46(r250,l0) a47(r159,l0) a48(r158,l0) a49(r161,l0) a50(r162,l0) a51(r245,l0) a52(r243,l0) a53(r164,l0) a54(r165,l0) a55(r238,l0) a56(r236,l0) a59(r167,l0) a60(r168,l0) a61(r229,l0) a62(r227,l0) a63(r170,l0) a64(r171,l0) a65(r222,l0) a66(r220,l0) a67(r173,l0) a68(r174,l0) a69(r216,l0) a70(r214,l0) a71(r176,l0) a72(r177,l0) a73(r210,l0) a74(r208,l0) a80(r201,l0) a81(r195,l0) a82(r192,l0)
;;     total conflict hard regs: 0-3 12 14
;;     conflict hard regs: 0-3 12 14
;; a5(r148,l0) conflicts: a0(r181,l0) a2(r190,l0) a4(r188,l0) a6(r327,l0) a7(r326,l0) a8(r333,l0) a9(r144,l0) a10(r332,l0) a11(r184,l0) a12(r143,l0) a13(r146,l0) a14(r319,l0) a15(r133,l0) a16(r147,l0) a17(r312,l0) a18(r306,l0) a19(r338,l0) a20(r286,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r327,l0) conflicts: a4(r188,l0) a5(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r326,l0) conflicts: a4(r188,l0) a5(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r333,l0) conflicts: a4(r188,l0) a5(r148,l0) a9(r144,l0) a10(r332,l0) a11(r184,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r144,l0) conflicts: a4(r188,l0) a5(r148,l0) a8(r333,l0) a10(r332,l0) a11(r184,l0) a12(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r332,l0) conflicts: a4(r188,l0) a5(r148,l0) a8(r333,l0) a9(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r184,l0) conflicts: a0(r181,l0) a4(r188,l0) a5(r148,l0) a8(r333,l0) a9(r144,l0) a12(r143,l0) a13(r146,l0) a14(r319,l0) a15(r133,l0) a16(r147,l0) a17(r312,l0) a18(r306,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a12(r143,l0) conflicts: a4(r188,l0) a5(r148,l0) a9(r144,l0) a11(r184,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r146,l0) conflicts: a0(r181,l0) a1(r191,l0) a2(r190,l0) a4(r188,l0) a5(r148,l0) a11(r184,l0) a12(r143,l0) a14(r319,l0) a15(r133,l0) a16(r147,l0) a17(r312,l0) a18(r306,l0) a20(r286,l0) a21(r283,l0) a22(r145,l0) a23(r282,l0) a24(r135,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a14(r319,l0) conflicts: a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a15(r133,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a15(r133,l0) conflicts: a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a14(r319,l0) a16(r147,l0) a17(r312,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r147,l0) conflicts: a2(r190,l0) a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a15(r133,l0) a17(r312,l0) a18(r306,l0) a20(r286,l0) a21(r283,l0) a22(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r312,l0) conflicts: a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a15(r133,l0) a16(r147,l0) a18(r306,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r306,l0) conflicts: a4(r188,l0) a5(r148,l0) a11(r184,l0) a13(r146,l0) a16(r147,l0) a17(r312,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r338,l0) conflicts: a4(r188,l0) a5(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r286,l0) conflicts: a2(r190,l0) a4(r188,l0) a5(r148,l0) a13(r146,l0) a16(r147,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a21(r283,l0) conflicts: a2(r190,l0) a4(r188,l0) a13(r146,l0) a16(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r145,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a13(r146,l0) a16(r147,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a23(r282,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r135,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a13(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r151,l0) conflicts: a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r152,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r278,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r280,l0) conflicts: a1(r191,l0) a4(r188,l0) a27(r278,l0) a29(r274,l0) a30(r276,l0) a31(r271,l0) a32(r185,l0) a33(r270,l0) a34(r266,l0) a35(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r274,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r276,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a29(r274,l0) a31(r271,l0) a32(r185,l0) a33(r270,l0) a34(r266,l0) a35(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r271,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0) a32(r185,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r185,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0) a31(r271,l0) a33(r270,l0) a34(r266,l0) a35(r269,l0) a36(r141,l0) a37(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r270,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0) a32(r185,l0) a34(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r266,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0) a32(r185,l0) a33(r270,l0) a35(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r269,l0) conflicts: a1(r191,l0) a4(r188,l0) a28(r280,l0) a30(r276,l0) a32(r185,l0) a34(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r141,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a32(r185,l0) a37(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r154,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0) a32(r185,l0) a36(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r259,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r153,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r255,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r136,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r254,l0) conflicts: a1(r191,l0) a4(r188,l0) a43(r137,l0) a45(r139,l0) a44(r252,l0) a46(r250,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a43(r137,l0) conflicts: a1(r191,l0) a4(r188,l0) a42(r254,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r252,l0) conflicts: a1(r191,l0) a4(r188,l0) a42(r254,l0) a45(r139,l0) a46(r250,l0) a47(r159,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a45(r139,l0) conflicts: a1(r191,l0) a4(r188,l0) a42(r254,l0) a44(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r250,l0) conflicts: a1(r191,l0) a4(r188,l0) a42(r254,l0) a44(r252,l0) a47(r159,l0) a48(r158,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a47(r159,l0) conflicts: a1(r191,l0) a4(r188,l0) a44(r252,l0) a46(r250,l0) a48(r158,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a48(r158,l0) conflicts: a1(r191,l0) a4(r188,l0) a46(r250,l0) a47(r159,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a49(r161,l0) conflicts: a1(r191,l0) a4(r188,l0) a50(r162,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a50(r162,l0) conflicts: a1(r191,l0) a4(r188,l0) a49(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a51(r245,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a52(r243,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a53(r164,l0) conflicts: a1(r191,l0) a4(r188,l0) a54(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a54(r165,l0) conflicts: a1(r191,l0) a4(r188,l0) a53(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a55(r238,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a56(r236,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a57(r235,l0) conflicts: a0(r181,l0) a1(r191,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a58(r234,l0) conflicts: a1(r191,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a59(r167,l0) conflicts: a1(r191,l0) a4(r188,l0) a60(r168,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a60(r168,l0) conflicts: a1(r191,l0) a4(r188,l0) a59(r167,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a61(r229,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a62(r227,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a63(r170,l0) conflicts: a1(r191,l0) a4(r188,l0) a64(r171,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a64(r171,l0) conflicts: a1(r191,l0) a4(r188,l0) a63(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a65(r222,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a66(r220,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a67(r173,l0) conflicts: a1(r191,l0) a4(r188,l0) a68(r174,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a68(r174,l0) conflicts: a1(r191,l0) a4(r188,l0) a67(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a69(r216,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a70(r214,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a71(r176,l0) conflicts: a1(r191,l0) a4(r188,l0) a72(r177,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a72(r177,l0) conflicts: a1(r191,l0) a4(r188,l0) a71(r176,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a73(r210,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a74(r208,l0) conflicts: a1(r191,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a75(r179,l0) conflicts: a1(r191,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a76(r203,l0) conflicts: a1(r191,l0) a77(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a77(r206,l0) conflicts: a1(r191,l0) a76(r203,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a78(r205,l0) conflicts: a1(r191,l0) a79(r202,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a79(r202,l0) conflicts: a1(r191,l0) a2(r190,l0) a78(r205,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r201,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a81(r195,l0) conflicts: a1(r191,l0) a2(r190,l0) a4(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a82(r192,l0) conflicts: a1(r191,l0) a2(r190,l0) a3(r189,l0) a4(r188,l0)
;;     total conflict hard regs: 2 3 14
;;     conflict hard regs: 2 3 14

  cp0:a10(r332)<->a11(r184)@125:shuffle
  cp1:a6(r327)<->a7(r326)@125:shuffle
  cp2:a9(r144)<->a13(r146)@125:shuffle
  cp3:a14(r319)<->a16(r147)@125:shuffle
  cp4:a21(r283)<->a22(r145)@125:shuffle
  cp5:a20(r286)<->a21(r283)@125:shuffle
  cp6:a23(r282)<->a24(r135)@125:shuffle
  cp7:a22(r145)<->a23(r282)@125:shuffle
  cp8:a0(r181)<->a2(r190)@1000:move
  cp9:a0(r181)<->a25(r151)@125:shuffle
  cp10:a33(r270)<->a35(r269)@125:shuffle
  cp11:a31(r271)<->a33(r270)@125:shuffle
  cp12:a31(r271)<->a34(r266)@125:shuffle
  cp13:a29(r274)<->a31(r271)@125:shuffle
  cp14:a29(r274)<->a32(r185)@125:shuffle
  cp15:a27(r278)<->a29(r274)@125:shuffle
  cp16:a27(r278)<->a30(r276)@125:shuffle
  cp17:a26(r152)<->a27(r278)@125:shuffle
  cp18:a26(r152)<->a28(r280)@125:shuffle
  cp19:a26(r152)<->a37(r154)@1000:move
  cp20:a38(r259)<->a39(r153)@125:shuffle
  cp21:a40(r255)<->a41(r136)@125:shuffle
  cp22:a39(r153)<->a40(r255)@125:shuffle
  cp23:a44(r252)<->a48(r158)@125:shuffle
  cp24:a42(r254)<->a47(r159)@125:shuffle
  cp25:a45(r139)<->a46(r250)@125:shuffle
  cp26:a43(r137)<->a44(r252)@125:shuffle
  cp27:a43(r137)<->a45(r139)@125:shuffle
  cp28:a26(r152)<->a42(r254)@125:shuffle
  cp29:a26(r152)<->a43(r137)@125:shuffle
  cp30:a49(r161)<->a51(r245)@1000:move
  cp31:a53(r164)<->a55(r238)@1000:move
  cp32:a59(r167)<->a61(r229)@1000:move
  cp33:a63(r170)<->a65(r222)@1000:move
  cp34:a67(r173)<->a69(r216)@1000:move
  cp35:a71(r176)<->a73(r210)@1000:move
  cp36:a2(r190)<->a78(r205)@125:shuffle
  cp37:a77(r206)<->a79(r202)@125:shuffle
  cp38:a77(r206)<->a78(r205)@125:shuffle
  cp39:a75(r179)<->a80(r201)@1000:move
  cp40:a80(r201)<->a81(r195)@125:shuffle
  regions=2, blocks=66, points=277
    allocnos=89, copies=41, conflicts=53, ranges=175

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r181 1r191 2r190 3r189 4r188 5r148 6r327 7r326 8r333 9r144 10r332 11r184 12r143 13r146 14r319 15r133 16r147 17r312 18r306 19r338 20r286 21r283 22r145 23r282 24r135 25r151 26r152 27r278 28r280 29r274 30r276 31r271 32r185 33r270 34r266 35r269 36r141 37r154 38r259 39r153 40r255 41r136 42r254 43r137 44r252 45r139 46r250 47r159 48r158 49r161 50r162 51r245 52r243 53r164 54r165 55r238 56r236 57r235 58r234 59r167 60r168 61r229 62r227 63r170 64r171 65r222 66r220 67r173 68r174 69r216 70r214 71r176 72r177 73r210 74r208 75r179 76r203 77r206 78r205 79r202 80r201 81r195 82r192
    modified regnos: 133 135 136 137 139 141 143 144 145 146 147 148 151 152 153 154 158 159 161 162 164 165 167 168 170 171 173 174 176 177 179 181 184 185 188 189 190 191 192 195 201 202 203 205 206 208 210 214 216 220 222 227 229 234 235 236 238 243 245 250 252 254 255 259 266 269 270 271 274 276 278 280 282 283 286 306 312 319 326 327 332 333 338
    border:
    Pressure: GENERAL_REGS=9
    Reg 181 of GENERAL_REGS has 2 regs less
    Reg 191 of GENERAL_REGS has 5 regs less
    Reg 190 of GENERAL_REGS has 5 regs less
    Reg 189 of GENERAL_REGS has 4 regs less
    Reg 188 of GENERAL_REGS has 6 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 184 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 319 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 286 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 254 of GENERAL_REGS has 1 regs less
    Reg 252 of GENERAL_REGS has 1 regs less
    Reg 250 of GENERAL_REGS has 2 regs less
    Reg 159 of GENERAL_REGS has 2 regs less
    Reg 158 of GENERAL_REGS has 2 regs less
    Reg 161 of GENERAL_REGS has 5 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
    Reg 243 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 5 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 238 of GENERAL_REGS has 1 regs less
    Reg 236 of GENERAL_REGS has 1 regs less
    Reg 235 of GENERAL_REGS has 1 regs less
    Reg 234 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 5 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 229 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 5 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 5 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 214 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 5 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 210 of GENERAL_REGS has 1 regs less
    Reg 208 of GENERAL_REGS has 1 regs less
    Reg 201 of GENERAL_REGS has 1 regs less
    Reg 195 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 3 regs less
      Pushing a79(r202,l0)
      Pushing a78(r205,l0)
      Pushing a77(r206,l0)
      Pushing a76(r203,l0)
      Pushing a45(r139,l0)
      Pushing a43(r137,l0)
      Pushing a40(r255,l0)
      Pushing a38(r259,l0)
      Pushing a35(r269,l0)
      Pushing a34(r266,l0)
      Pushing a33(r270,l0)
      Pushing a31(r271,l0)
      Pushing a30(r276,l0)
      Pushing a29(r274,l0)
      Pushing a28(r280,l0)
      Pushing a27(r278,l0)
      Pushing a25(r151,l0)
      Pushing a23(r282,l0)
      Pushing a21(r283,l0)
      Pushing a19(r338,l0)
      Pushing a18(r306,l0)
      Pushing a17(r312,l0)
      Pushing a15(r133,l0)
      Pushing a10(r332,l0)
      Pushing a7(r326,l0)
      Pushing a6(r327,l0)
      Pushing a75(r179,l0)
      Pushing a41(r136,l0)
      Pushing a39(r153,l0)
      Pushing a24(r135,l0)
      Pushing a12(r143,l0)
      Pushing a9(r144,l0)
      Pushing a8(r333,l0)
      Pushing a37(r154,l0)
      Pushing a36(r141,l0)
      Pushing a26(r152,l0)
      Pushing a32(r185,l0)
      Pushing a72(r177,l0)
      Pushing a68(r174,l0)
      Pushing a64(r171,l0)
      Pushing a60(r168,l0)
      Pushing a54(r165,l0)
      Pushing a50(r162,l0)
      Pushing a73(r210,l0)
      Pushing a69(r216,l0)
      Pushing a65(r222,l0)
      Pushing a61(r229,l0)
      Pushing a58(r234,l0)
      Pushing a57(r235,l0)
      Pushing a55(r238,l0)
      Pushing a51(r245,l0)
      Pushing a44(r252,l0)
      Pushing a42(r254,l0)
      Pushing a14(r319,l0)
      Pushing a80(r201,l0)
      Pushing a81(r195,l0)
      Pushing a74(r208,l0)
      Pushing a70(r214,l0)
      Pushing a66(r220,l0)
      Pushing a62(r227,l0)
      Pushing a56(r236,l0)
      Pushing a52(r243,l0)
      Pushing a48(r158,l0)
      Pushing a47(r159,l0)
      Pushing a46(r250,l0)
      Pushing a0(r181,l0)
      Pushing a82(r192,l0)
      Pushing a22(r145,l0)
      Pushing a20(r286,l0)
      Pushing a3(r189,l0)
      Pushing a16(r147,l0)
      Pushing a13(r146,l0)
      Pushing a11(r184,l0)
      Pushing a5(r148,l0)
      Pushing a71(r176,l0)
      Pushing a67(r173,l0)
      Pushing a63(r170,l0)
      Pushing a59(r167,l0)
      Pushing a53(r164,l0)
      Pushing a49(r161,l0)
      Pushing a2(r190,l0)
      Pushing a1(r191,l0)
      Pushing a4(r188,l0)
      Popping a4(r188,l0)  -- assign reg 4
      Popping a1(r191,l0)  -- assign reg 5
      Popping a2(r190,l0)  -- assign reg 6
      Popping a49(r161,l0)  -- assign reg 12
      Popping a53(r164,l0)  -- assign reg 12
      Popping a59(r167,l0)  -- assign reg 12
      Popping a63(r170,l0)  -- assign reg 12
      Popping a67(r173,l0)  -- assign reg 12
      Popping a71(r176,l0)  -- assign reg 12
      Popping a5(r148,l0)  -- assign reg 5
      Popping a11(r184,l0)  -- assign reg 7
      Popping a13(r146,l0)  -- assign reg 8
      Popping a16(r147,l0)  -- assign reg 10
      Popping a3(r189,l0)  -- assign reg 1
      Popping a20(r286,l0)  -- assign reg 7
      Popping a22(r145,l0)  -- assign reg 7
      Popping a82(r192,l0)  -- assign reg 0
      Popping a0(r181,l0)  -- assign reg 6
      Popping a46(r250,l0)  -- assign reg 6
      Popping a47(r159,l0)  -- assign reg 7
      Popping a48(r158,l0)  -- assign reg 8
      Popping a52(r243,l0)  -- assign reg 3
      Popping a56(r236,l0)  -- assign reg 3
      Popping a62(r227,l0)  -- assign reg 3
      Popping a66(r220,l0)  -- assign reg 3
      Popping a70(r214,l0)  -- assign reg 3
      Popping a74(r208,l0)  -- assign reg 3
      Popping a81(r195,l0)  -- assign reg 2
      Popping a80(r201,l0)  -- assign reg 2
      Popping a14(r319,l0)  -- assign reg 10
      Popping a42(r254,l0)  -- assign reg 7
      Popping a44(r252,l0)  -- assign reg 8
      Popping a51(r245,l0)  -- assign reg 12
      Popping a55(r238,l0)  -- assign reg 12
      Popping a57(r235,l0)  -- assign reg 3
      Popping a58(r234,l0)  -- assign reg 3
      Popping a61(r229,l0)  -- assign reg 12
      Popping a65(r222,l0)  -- assign reg 12
      Popping a69(r216,l0)  -- assign reg 12
      Popping a73(r210,l0)  -- assign reg 12
      Popping a50(r162,l0)  -- assign reg 3
      Popping a54(r165,l0)  -- assign reg 3
      Popping a60(r168,l0)  -- assign reg 3
      Popping a64(r171,l0)  -- assign reg 3
      Popping a68(r174,l0)  -- assign reg 3
      Popping a72(r177,l0)  -- assign reg 3
      Popping a32(r185,l0)  -- assign reg 3
      Popping a26(r152,l0)  -- assign reg 2
      Popping a36(r141,l0)  -- assign reg 1
      Popping a37(r154,l0)  -- assign reg 2
      Popping a8(r333,l0)  -- assign reg 3
      Popping a9(r144,l0)  -- assign reg 8
      Popping a12(r143,l0)  -- assign reg 3
      Popping a24(r135,l0)  -- assign reg 7
      Popping a39(r153,l0)  -- assign reg 3
      Popping a41(r136,l0)  -- assign reg 3
      Popping a75(r179,l0)  -- assign reg 2
      Popping a6(r327,l0)  -- assign reg 2
      Popping a7(r326,l0)  -- assign reg 2
      Popping a10(r332,l0)  -- assign reg 7
      Popping a15(r133,l0)  -- assign reg 3
      Popping a17(r312,l0)  -- assign reg 2
      Popping a18(r306,l0)  -- assign reg 3
      Popping a19(r338,l0)  -- assign reg 3
      Popping a21(r283,l0)  -- assign reg 7
      Popping a23(r282,l0)  -- assign reg 7
      Popping a25(r151,l0)  -- assign reg 6
      Popping a27(r278,l0)  -- assign reg 3
      Popping a28(r280,l0)  -- assign reg 2
      Popping a29(r274,l0)  -- assign reg 3
      Popping a30(r276,l0)  -- assign reg 7
      Popping a31(r271,l0)  -- assign reg 1
      Popping a33(r270,l0)  -- assign reg 1
      Popping a34(r266,l0)  -- assign reg 0
      Popping a35(r269,l0)  -- assign reg 1
      Popping a38(r259,l0)  -- assign reg 3
      Popping a40(r255,l0)  -- assign reg 3
      Popping a43(r137,l0)  -- assign reg 8
      Popping a45(r139,l0)  -- assign reg 6
      Popping a76(r203,l0)  -- assign reg 3
      Popping a77(r206,l0)  -- assign reg 6
      Popping a78(r205,l0)  -- assign reg 6
      Popping a79(r202,l0)  -- assign reg 3
Disposition:
   15:r133 l0     3   24:r135 l0     7   41:r136 l0     3   43:r137 l0     8
   45:r139 l0     6   36:r141 l0     1   12:r143 l0     3    9:r144 l0     8
   22:r145 l0     7   13:r146 l0     8   16:r147 l0    10    5:r148 l0     5
   25:r151 l0     6   26:r152 l0     2   39:r153 l0     3   37:r154 l0     2
   48:r158 l0     8   47:r159 l0     7   49:r161 l0    12   50:r162 l0     3
   53:r164 l0    12   54:r165 l0     3   59:r167 l0    12   60:r168 l0     3
   63:r170 l0    12   64:r171 l0     3   67:r173 l0    12   68:r174 l0     3
   71:r176 l0    12   72:r177 l0     3   75:r179 l0     2    0:r181 l0     6
   11:r184 l0     7   32:r185 l0     3    4:r188 l0     4    3:r189 l0     1
    2:r190 l0     6    1:r191 l0     5   82:r192 l0     0   81:r195 l0     2
   80:r201 l0     2   79:r202 l0     3   76:r203 l0     3   78:r205 l0     6
   77:r206 l0     6   74:r208 l0     3   73:r210 l0    12   70:r214 l0     3
   69:r216 l0    12   66:r220 l0     3   65:r222 l0    12   62:r227 l0     3
   61:r229 l0    12   58:r234 l0     3   57:r235 l0     3   56:r236 l0     3
   55:r238 l0    12   52:r243 l0     3   51:r245 l0    12   46:r250 l0     6
   44:r252 l0     8   42:r254 l0     7   40:r255 l0     3   38:r259 l0     3
   34:r266 l0     0   35:r269 l0     1   33:r270 l0     1   31:r271 l0     1
   29:r274 l0     3   30:r276 l0     7   27:r278 l0     3   28:r280 l0     2
   23:r282 l0     7   21:r283 l0     7   20:r286 l0     7   18:r306 l0     3
   17:r312 l0     2   14:r319 l0    10    7:r326 l0     2    6:r327 l0     2
   10:r332 l0     7    8:r333 l0     3   19:r338 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1, 189
insn=2, live_throughout: 2, 3, 13, 14, 189, dead_or_set: 0, 188
insn=10, live_throughout: 2, 3, 13, 14, 188, 189, dead_or_set: 192
insn=4, live_throughout: 3, 13, 14, 188, 189, 192, dead_or_set: 2, 190
insn=5, live_throughout: 13, 14, 188, 189, 190, 192, dead_or_set: 3, 191
insn=11, live_throughout: 13, 14, 188, 189, 190, 191, dead_or_set: 192
insn=12, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 
insn=13, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 
insn=15, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 
insn=638, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 195
insn=639, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 195
insn=27, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 195, 201
insn=28, live_throughout: 13, 14, 188, 190, 191, 201, dead_or_set: 
insn=29, live_throughout: 13, 14, 188, 190, 191, 201, dead_or_set: 
insn=31, live_throughout: 13, 188, 190, 191, 201, dead_or_set: 
insn=32, live_throughout: 13, 188, 190, 191, 201, dead_or_set: 
insn=34, live_throughout: 13, 191, dead_or_set: 179, 201
insn=571, live_throughout: 13, 179, 191, dead_or_set: 
insn=37, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=39, live_throughout: 13, 190, 191, dead_or_set: 188, 202
insn=42, live_throughout: 13, 191, 202, dead_or_set: 190, 205
insn=43, live_throughout: 13, 191, dead_or_set: 202, 205, 206
insn=648, live_throughout: 13, 191, 206, dead_or_set: 203
insn=45, live_throughout: 13, 191, dead_or_set: 179, 203, 206
insn=46, live_throughout: 13, 179, 191, dead_or_set: 
insn=48, live_throughout: 13, 191, dead_or_set: 2, 179
insn=49, live_throughout: 2, 13, dead_or_set: 0, 191
insn=50, live_throughout: 13, dead_or_set: 0, 2, 12, 14
insn=51, live_throughout: 13, 14, dead_or_set: 0, 181
insn=573, live_throughout: 13, 14, 181, dead_or_set: 
insn=54, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=56, live_throughout: 13, 190, 191, dead_or_set: 0, 188
insn=57, live_throughout: 0, 13, 191, dead_or_set: 1, 190
insn=58, live_throughout: 0, 1, 13, dead_or_set: 2, 191
insn=59, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=60, live_throughout: 13, 14, dead_or_set: 0, 181
insn=575, live_throughout: 13, 14, 181, dead_or_set: 
insn=63, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=635, live_throughout: 13, 14, 188, 191, dead_or_set: 208
insn=636, live_throughout: 13, 14, 188, 191, dead_or_set: 208
insn=68, live_throughout: 13, 14, 188, 191, dead_or_set: 208, 210
insn=640, live_throughout: 13, 14, 188, 191, dead_or_set: 176, 210
insn=69, live_throughout: 13, 14, 188, 191, dead_or_set: 176, 177
insn=70, live_throughout: 13, 14, 176, 188, 191, dead_or_set: 
insn=71, live_throughout: 13, 14, 176, 188, 191, dead_or_set: 
insn=78, live_throughout: 13, 176, 191, dead_or_set: 0, 188
insn=80, live_throughout: 0, 13, 176, 191, dead_or_set: 2
insn=79, live_throughout: 0, 2, 13, 176, 191, dead_or_set: 1
insn=81, live_throughout: 0, 1, 2, 13, 176, 191, dead_or_set: 3
insn=77, live_throughout: 0, 1, 2, 3, 13, 176, dead_or_set: 191
insn=76, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 176
insn=82, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=83, live_throughout: 13, 14, dead_or_set: 0, 181
insn=577, live_throughout: 13, 14, 181, dead_or_set: 
insn=86, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=633, live_throughout: 13, 14, 188, 191, dead_or_set: 214
insn=634, live_throughout: 13, 14, 188, 191, dead_or_set: 214
insn=91, live_throughout: 13, 14, 188, 191, dead_or_set: 214, 216
insn=641, live_throughout: 13, 14, 188, 191, dead_or_set: 173, 216
insn=92, live_throughout: 13, 14, 188, 191, dead_or_set: 173, 174
insn=93, live_throughout: 13, 14, 173, 188, 191, dead_or_set: 
insn=94, live_throughout: 13, 14, 173, 188, 191, dead_or_set: 
insn=101, live_throughout: 13, 173, 191, dead_or_set: 0, 188
insn=103, live_throughout: 0, 13, 173, 191, dead_or_set: 2
insn=102, live_throughout: 0, 2, 13, 173, 191, dead_or_set: 1
insn=104, live_throughout: 0, 1, 2, 13, 173, 191, dead_or_set: 3
insn=100, live_throughout: 0, 1, 2, 3, 13, 173, dead_or_set: 191
insn=99, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 173
insn=105, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=106, live_throughout: 13, 14, dead_or_set: 0, 181
insn=579, live_throughout: 13, 14, 181, dead_or_set: 
insn=109, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=631, live_throughout: 13, 14, 188, 191, dead_or_set: 220
insn=632, live_throughout: 13, 14, 188, 191, dead_or_set: 220
insn=114, live_throughout: 13, 14, 188, 191, dead_or_set: 220, 222
insn=642, live_throughout: 13, 14, 188, 191, dead_or_set: 170, 222
insn=115, live_throughout: 13, 14, 188, 191, dead_or_set: 170, 171
insn=116, live_throughout: 13, 14, 170, 188, 191, dead_or_set: 
insn=117, live_throughout: 13, 14, 170, 188, 191, dead_or_set: 
insn=125, live_throughout: 13, 170, 191, dead_or_set: 0, 188
insn=127, live_throughout: 0, 13, 170, 191, dead_or_set: 2
insn=126, live_throughout: 0, 2, 13, 170, 191, dead_or_set: 1
insn=128, live_throughout: 0, 1, 2, 13, 170, 191, dead_or_set: 3
insn=124, live_throughout: 0, 1, 2, 3, 13, 170, dead_or_set: 191
insn=123, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 170
insn=129, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=130, live_throughout: 13, 14, dead_or_set: 0, 181
insn=581, live_throughout: 13, 14, 181, dead_or_set: 
insn=133, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=629, live_throughout: 13, 14, 188, 191, dead_or_set: 227
insn=630, live_throughout: 13, 14, 188, 191, dead_or_set: 227
insn=138, live_throughout: 13, 14, 188, 191, dead_or_set: 227, 229
insn=643, live_throughout: 13, 14, 188, 191, dead_or_set: 167, 229
insn=139, live_throughout: 13, 14, 188, 191, dead_or_set: 167, 168
insn=140, live_throughout: 13, 14, 167, 188, 191, dead_or_set: 
insn=141, live_throughout: 13, 14, 167, 188, 191, dead_or_set: 
insn=149, live_throughout: 13, 167, 191, dead_or_set: 0, 188
insn=151, live_throughout: 0, 13, 167, 191, dead_or_set: 2
insn=150, live_throughout: 0, 2, 13, 167, 191, dead_or_set: 1
insn=152, live_throughout: 0, 1, 2, 13, 167, 191, dead_or_set: 3
insn=148, live_throughout: 0, 1, 2, 3, 13, 167, dead_or_set: 191
insn=147, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 167
insn=153, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=154, live_throughout: 13, 14, dead_or_set: 0, 181
insn=583, live_throughout: 13, 14, 181, dead_or_set: 
insn=157, live_throughout: 13, 188, 191, dead_or_set: 
insn=159, live_throughout: 13, 191, dead_or_set: 188, 234
insn=161, live_throughout: 13, 234, dead_or_set: 0, 191
insn=160, live_throughout: 0, 13, dead_or_set: 2, 234
insn=162, live_throughout: 13, dead_or_set: 0, 2, 12, 14
insn=163, live_throughout: 13, 14, dead_or_set: 0, 181
insn=585, live_throughout: 13, 14, 181, dead_or_set: 
insn=166, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=168, live_throughout: 13, 14, 191, dead_or_set: 188, 235
insn=170, live_throughout: 13, 14, 191, 235, dead_or_set: 181
insn=169, live_throughout: 13, 14, 181, dead_or_set: 191, 235
insn=587, live_throughout: 13, 14, 181, dead_or_set: 
insn=173, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=627, live_throughout: 13, 14, 188, 191, dead_or_set: 236
insn=628, live_throughout: 13, 14, 188, 191, dead_or_set: 236
insn=178, live_throughout: 13, 14, 188, 191, dead_or_set: 236, 238
insn=644, live_throughout: 13, 14, 188, 191, dead_or_set: 164, 238
insn=179, live_throughout: 13, 14, 188, 191, dead_or_set: 164, 165
insn=180, live_throughout: 13, 14, 164, 188, 191, dead_or_set: 
insn=181, live_throughout: 13, 14, 164, 188, 191, dead_or_set: 
insn=189, live_throughout: 13, 164, 191, dead_or_set: 0, 188
insn=191, live_throughout: 0, 13, 164, 191, dead_or_set: 2
insn=190, live_throughout: 0, 2, 13, 164, 191, dead_or_set: 1
insn=192, live_throughout: 0, 1, 2, 13, 164, 191, dead_or_set: 3
insn=188, live_throughout: 0, 1, 2, 3, 13, 164, dead_or_set: 191
insn=187, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 164
insn=193, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=194, live_throughout: 13, 14, dead_or_set: 0, 181
insn=589, live_throughout: 13, 14, 181, dead_or_set: 
insn=197, live_throughout: 13, 14, 188, 191, dead_or_set: 
insn=625, live_throughout: 13, 14, 188, 191, dead_or_set: 243
insn=626, live_throughout: 13, 14, 188, 191, dead_or_set: 243
insn=202, live_throughout: 13, 14, 188, 191, dead_or_set: 243, 245
insn=645, live_throughout: 13, 14, 188, 191, dead_or_set: 161, 245
insn=203, live_throughout: 13, 14, 188, 191, dead_or_set: 161, 162
insn=204, live_throughout: 13, 14, 161, 188, 191, dead_or_set: 
insn=205, live_throughout: 13, 14, 161, 188, 191, dead_or_set: 
insn=213, live_throughout: 13, 161, 191, dead_or_set: 0, 188
insn=215, live_throughout: 0, 13, 161, 191, dead_or_set: 2
insn=214, live_throughout: 0, 2, 13, 161, 191, dead_or_set: 1
insn=216, live_throughout: 0, 1, 2, 13, 161, 191, dead_or_set: 3
insn=212, live_throughout: 0, 1, 2, 3, 13, 161, dead_or_set: 191
insn=211, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 161
insn=217, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=218, live_throughout: 13, 14, dead_or_set: 0, 181
insn=591, live_throughout: 13, 14, 181, dead_or_set: 
insn=221, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=223, live_throughout: 13, 188, 190, 191, dead_or_set: 0
insn=224, live_throughout: 13, 188, 190, 191, dead_or_set: 0, 14
insn=226, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 0
insn=227, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 
insn=230, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=231, live_throughout: 13, 24, 188, 190, 191, dead_or_set: 
insn=233, live_throughout: 13, 188, 191, dead_or_set: 0, 190
insn=234, live_throughout: 13, 188, 191, dead_or_set: 0, 14
insn=235, live_throughout: 13, 188, 191, dead_or_set: 0, 159
insn=236, live_throughout: 13, 159, 188, 191, dead_or_set: 0
insn=237, live_throughout: 13, 159, 188, 191, dead_or_set: 0, 14
insn=238, live_throughout: 13, 159, 188, 191, dead_or_set: 0, 158
insn=239, live_throughout: 13, 158, 159, 188, 191, dead_or_set: 0, 14
insn=240, live_throughout: 13, 158, 159, 188, 191, dead_or_set: 0, 250
insn=242, live_throughout: 13, 158, 159, 188, 191, 250, dead_or_set: 0, 14
insn=248, live_throughout: 0, 13, 159, 188, 191, 250, dead_or_set: 158, 252
insn=251, live_throughout: 0, 13, 188, 191, 250, 252, dead_or_set: 159, 254
insn=246, live_throughout: 13, 188, 191, 252, 254, dead_or_set: 0, 139, 250
insn=249, live_throughout: 13, 188, 191, 254, dead_or_set: 137, 139, 252
insn=252, live_throughout: 13, 188, 191, dead_or_set: 137, 152, 254
insn=593, live_throughout: 13, 152, 188, 191, dead_or_set: 
insn=255, live_throughout: 13, 24, 188, 190, 191, dead_or_set: 
insn=258, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=260, live_throughout: 13, 188, 190, 191, dead_or_set: 136
insn=595, live_throughout: 13, 136, 188, 190, 191, dead_or_set: 
insn=263, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=265, live_throughout: 13, 188, 190, 191, dead_or_set: 136
insn=266, live_throughout: 13, 136, 188, 190, 191, dead_or_set: 
insn=268, live_throughout: 13, 188, 190, 191, dead_or_set: 136, 255
insn=269, live_throughout: 13, 188, 190, 191, dead_or_set: 153, 255
insn=270, live_throughout: 13, 153, 188, 190, 191, dead_or_set: 
insn=271, live_throughout: 13, 153, 188, 190, 191, dead_or_set: 
insn=273, live_throughout: 13, 188, dead_or_set: 181
insn=597, live_throughout: 13, 181, 188, dead_or_set: 
insn=276, live_throughout: 13, 153, 188, 190, 191, dead_or_set: 
insn=281, live_throughout: 13, 188, 190, 191, dead_or_set: 153, 259
insn=283, live_throughout: 13, 188, 190, 191, dead_or_set: 154, 259
insn=284, live_throughout: 13, 154, 188, 190, 191, dead_or_set: 
insn=285, live_throughout: 13, 154, 188, 190, 191, dead_or_set: 
insn=287, live_throughout: 13, 188, 191, dead_or_set: 152, 154
insn=599, live_throughout: 13, 152, 188, 191, dead_or_set: 
insn=290, live_throughout: 13, 154, 188, 190, 191, dead_or_set: 
insn=292, live_throughout: 13, 154, 188, 190, 191, dead_or_set: 185
insn=294, live_throughout: 13, 154, 185, 188, 190, 191, dead_or_set: 141
insn=601, live_throughout: 13, 141, 154, 185, 188, 190, 191, dead_or_set: 
insn=303, live_throughout: 13, 141, 154, 185, 188, 190, 191, dead_or_set: 
insn=300, live_throughout: 13, 154, 185, 188, 190, 191, dead_or_set: 141
insn=301, live_throughout: 13, 141, 154, 185, 188, 190, 191, dead_or_set: 
insn=305, live_throughout: 13, 141, 154, 185, 188, 190, 191, dead_or_set: 
insn=306, live_throughout: 13, 141, 154, 185, 188, 190, 191, dead_or_set: 
insn=309, live_throughout: 13, 141, 154, 185, 188, 191, dead_or_set: 190
insn=310, live_throughout: 13, 141, 154, 185, 188, 191, dead_or_set: 
insn=312, live_throughout: 13, 188, 191, dead_or_set: 152, 154
insn=603, live_throughout: 13, 152, 188, 191, dead_or_set: 
insn=315, live_throughout: 13, 141, 185, 188, 191, dead_or_set: 
insn=317, live_throughout: 13, 185, 188, 191, dead_or_set: 141, 185
insn=323, live_throughout: 13, 185, 188, 191, dead_or_set: 269
insn=320, live_throughout: 13, 185, 188, 191, 269, dead_or_set: 266
insn=330, live_throughout: 13, 185, 188, 191, 266, 269, dead_or_set: 276
insn=334, live_throughout: 13, 185, 188, 191, 266, 269, 276, dead_or_set: 280
insn=324, live_throughout: 13, 185, 188, 191, 266, 276, 280, dead_or_set: 269, 270
insn=325, live_throughout: 13, 185, 188, 191, 276, 280, dead_or_set: 266, 270, 271
insn=328, live_throughout: 13, 188, 191, 276, 280, dead_or_set: 185, 271, 274
insn=332, live_throughout: 13, 188, 191, 280, dead_or_set: 274, 276, 278
insn=336, live_throughout: 13, 188, 191, dead_or_set: 152, 278, 280
insn=337, live_throughout: 13, 152, 188, 191, dead_or_set: 
insn=339, live_throughout: 13, 188, 191, dead_or_set: 2, 152
insn=340, live_throughout: 2, 13, 188, dead_or_set: 0, 191
insn=341, live_throughout: 13, 188, dead_or_set: 0, 2, 12, 14
insn=568, live_throughout: 13, 188, dead_or_set: 0, 151
insn=569, live_throughout: 13, 188, dead_or_set: 151, 181
insn=352, live_throughout: 13, 181, 188, dead_or_set: 
insn=354, live_throughout: 13, 181, dead_or_set: 0, 188
insn=355, live_throughout: 13, 181, dead_or_set: 0, 14
insn=605, live_throughout: 13, 14, 181, dead_or_set: 
insn=358, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=360, live_throughout: 13, 188, 190, 191, dead_or_set: 0
insn=361, live_throughout: 13, 188, 190, 191, dead_or_set: 0, 14
insn=363, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 0
insn=364, live_throughout: 13, 14, 188, 190, 191, dead_or_set: 
insn=367, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=368, live_throughout: 13, 24, 188, 190, 191, dead_or_set: 
insn=370, live_throughout: 13, 188, dead_or_set: 181, 190
insn=607, live_throughout: 13, 181, 188, dead_or_set: 
insn=373, live_throughout: 13, 24, 188, 190, 191, dead_or_set: 
insn=376, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=378, live_throughout: 13, 188, 190, 191, dead_or_set: 135
insn=379, live_throughout: 13, 135, 188, 190, 191, dead_or_set: 146
insn=609, live_throughout: 13, 135, 146, 188, 190, 191, dead_or_set: 
insn=382, live_throughout: 13, 188, 190, 191, dead_or_set: 
insn=384, live_throughout: 13, 188, 190, 191, dead_or_set: 135
insn=385, live_throughout: 13, 135, 188, 190, 191, dead_or_set: 146
insn=386, live_throughout: 13, 135, 146, 188, 190, 191, dead_or_set: 
insn=388, live_throughout: 13, 146, 188, 190, 191, dead_or_set: 135, 282
insn=389, live_throughout: 13, 146, 188, 190, 191, dead_or_set: 145, 282
insn=390, live_throughout: 13, 145, 146, 188, 190, 191, dead_or_set: 
insn=391, live_throughout: 13, 145, 146, 188, 190, 191, dead_or_set: 
insn=393, live_throughout: 13, 145, 146, 188, 190, dead_or_set: 0, 191
insn=394, live_throughout: 13, 145, 146, 188, 190, dead_or_set: 0, 2, 14
insn=397, live_throughout: 2, 13, 145, 146, 188, 190, dead_or_set: 0
insn=395, live_throughout: 13, 24, 145, 146, 188, 190, dead_or_set: 2, 147
insn=398, live_throughout: 13, 145, 146, 147, 188, 190, dead_or_set: 
insn=400, live_throughout: 13, 188, dead_or_set: 181
insn=611, live_throughout: 13, 181, 188, dead_or_set: 
insn=403, live_throughout: 13, 145, 146, 147, 188, 190, dead_or_set: 
insn=405, live_throughout: 13, 146, 147, 188, 190, dead_or_set: 145, 283
insn=408, live_throughout: 13, 146, 147, 188, 190, dead_or_set: 283, 286
insn=410, live_throughout: 13, 146, 147, 188, 190, 286, dead_or_set: 148
insn=411, live_throughout: 13, 146, 147, 148, 188, 190, 286, dead_or_set: 
insn=412, live_throughout: 13, 146, 147, 148, 188, 190, 286, dead_or_set: 
insn=414, live_throughout: 13, 146, 147, 188, 190, 286, dead_or_set: 0
insn=415, live_throughout: 0, 13, 146, 147, 188, 190, 286, dead_or_set: 1
insn=416, live_throughout: 13, 146, 147, 188, 190, 286, dead_or_set: 0, 1, 14
insn=417, live_throughout: 13, 146, 147, 188, 190, 286, dead_or_set: 0, 148
insn=418, live_throughout: 13, 146, 147, 148, 188, 190, 286, dead_or_set: 
insn=419, live_throughout: 13, 146, 147, 148, 188, 190, 286, dead_or_set: 
insn=421, live_throughout: 13, 188, dead_or_set: 148, 181
insn=613, live_throughout: 13, 181, 188, dead_or_set: 
insn=424, live_throughout: 13, 146, 147, 148, 188, 190, 286, dead_or_set: 
insn=431, live_throughout: 13, 146, 147, 148, 188, 190, dead_or_set: 286
insn=432, live_throughout: 13, 146, 147, 148, 188, 190, dead_or_set: 
insn=437, live_throughout: 13, 146, 147, 148, 188, 190, dead_or_set: 0
insn=438, live_throughout: 0, 13, 146, 147, 148, 188, 190, dead_or_set: 1
insn=439, live_throughout: 0, 1, 13, 146, 147, 148, 188, 190, dead_or_set: 2
insn=440, live_throughout: 13, 146, 147, 148, 188, 190, dead_or_set: 0, 1, 2, 14
insn=443, live_throughout: 13, 146, 147, 148, 188, dead_or_set: 190
insn=444, live_throughout: 13, 146, 147, 148, 188, dead_or_set: 
insn=566, live_throughout: 13, 148, 188, dead_or_set: 147
insn=565, live_throughout: 13, 148, 188, dead_or_set: 338
insn=567, live_throughout: 13, 148, 188, dead_or_set: 338
insn=615, live_throughout: 13, 148, 188, dead_or_set: 
insn=450, live_throughout: 13, 146, 147, 148, 188, dead_or_set: 
insn=570, live_throughout: 13, 146, 147, 148, 188, dead_or_set: 184
insn=461, live_throughout: 13, 146, 147, 148, 184, 188, dead_or_set: 306
insn=458, live_throughout: 13, 146, 147, 148, 184, 188, 306, dead_or_set: 184
insn=469, live_throughout: 13, 146, 147, 148, 184, 188, 306, dead_or_set: 312
insn=466, live_throughout: 13, 146, 147, 148, 184, 188, 312, dead_or_set: 184, 306
insn=475, live_throughout: 13, 146, 147, 148, 184, 188, 312, dead_or_set: 133
insn=474, live_throughout: 13, 133, 146, 147, 148, 184, 188, dead_or_set: 184, 312
insn=479, live_throughout: 13, 133, 146, 148, 184, 188, dead_or_set: 147, 319
insn=476, live_throughout: 13, 146, 148, 184, 188, 319, dead_or_set: 133, 184
insn=488, live_throughout: 13, 146, 148, 184, 188, 319, dead_or_set: 1
insn=484, live_throughout: 1, 13, 146, 148, 184, 188, dead_or_set: 184, 319
insn=489, live_throughout: 1, 13, 146, 148, 184, 188, dead_or_set: 2
insn=487, live_throughout: 1, 2, 13, 146, 148, 184, 188, dead_or_set: 0
insn=490, live_throughout: 13, 146, 148, 184, 188, dead_or_set: 0, 1, 2, 14
insn=492, live_throughout: 13, 146, 148, 184, 188, dead_or_set: 0, 181
insn=493, live_throughout: 13, 146, 148, 181, 184, 188, dead_or_set: 
insn=495, live_throughout: 13, 146, 148, 184, 188, dead_or_set: 143
insn=496, live_throughout: 13, 143, 148, 184, 188, dead_or_set: 144, 146
insn=497, live_throughout: 13, 144, 148, 184, 188, dead_or_set: 143
insn=498, live_throughout: 13, 144, 148, 184, 188, dead_or_set: 
insn=509, live_throughout: 13, 144, 148, 184, 188, dead_or_set: 333
insn=507, live_throughout: 13, 144, 148, 188, 333, dead_or_set: 184, 332
insn=510, live_throughout: 13, 144, 148, 188, 333, dead_or_set: 332, 333
insn=503, live_throughout: 13, 148, 188, 333, dead_or_set: 144
insn=511, live_throughout: 13, 148, 188, dead_or_set: 333
insn=647, live_throughout: 13, 148, 188, dead_or_set: 326
insn=501, live_throughout: 13, 148, 188, dead_or_set: 326, 327
insn=502, live_throughout: 13, 148, 188, dead_or_set: 327
insn=512, live_throughout: 13, 148, 188, dead_or_set: 
insn=515, live_throughout: 13, 188, dead_or_set: 0, 148
insn=516, live_throughout: 0, 13, 188, dead_or_set: 1
insn=517, live_throughout: 13, 188, dead_or_set: 0, 1, 14
insn=518, live_throughout: 13, 188, dead_or_set: 0, 181
insn=617, live_throughout: 13, 181, 188, dead_or_set: 
insn=521, live_throughout: 13, 188, dead_or_set: 
insn=523, live_throughout: 13, 188, dead_or_set: 181
insn=524, live_throughout: 13, 181, 188, dead_or_set: 
insn=526, live_throughout: 13, 181, dead_or_set: 0, 188
insn=527, live_throughout: 13, 181, dead_or_set: 0, 14
insn=619, live_throughout: 13, 14, 181, dead_or_set: 
insn=530, live_throughout: 13, 188, 189, 190, 191, dead_or_set: 
insn=532, live_throughout: 13, 189, 190, 191, dead_or_set: 0, 188
insn=533, live_throughout: 0, 13, 190, 191, dead_or_set: 1, 189
insn=534, live_throughout: 0, 1, 13, 191, dead_or_set: 2, 190
insn=535, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 191
insn=536, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=537, live_throughout: 13, 14, dead_or_set: 0, 181
insn=621, live_throughout: 13, 14, 181, dead_or_set: 
insn=540, live_throughout: 13, 14, dead_or_set: 
insn=542, live_throughout: 13, 14, dead_or_set: 181
insn=623, live_throughout: 13, 14, 181, dead_or_set: 
insn=545, live_throughout: 13, 14, dead_or_set: 
insn=547, live_throughout: 13, 14, dead_or_set: 181
insn=548, live_throughout: 13, 14, 181, dead_or_set: 
insn=554, live_throughout: 13, 14, dead_or_set: 0, 181
insn=560, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 495 (nil))
init_insns for 203: (insn_list:REG_DEP_TRUE 648 (nil))
init_insns for 326: (insn_list:REG_DEP_TRUE 647 (nil))
init_insns for 327: (insn_list:REG_DEP_TRUE 502 (nil))
init_insns for 338: (insn_list:REG_DEP_TRUE 565 (nil))
changing reg in insn 475
changing reg in insn 476
changing reg in insn 384
changing reg in insn 378
changing reg in insn 388
changing reg in insn 265
changing reg in insn 260
changing reg in insn 268
changing reg in insn 249
changing reg in insn 252
changing reg in insn 246
changing reg in insn 249
changing reg in insn 300
changing reg in insn 294
changing reg in insn 305
changing reg in insn 300
changing reg in insn 317
changing reg in insn 495
changing reg in insn 497
changing reg in insn 496
changing reg in insn 496
changing reg in insn 503
changing reg in insn 497
changing reg in insn 389
changing reg in insn 405
changing reg in insn 390
changing reg in insn 385
changing reg in insn 379
changing reg in insn 496
changing reg in insn 415
changing reg in insn 395
changing reg in insn 479
changing reg in insn 469
changing reg in insn 461
changing reg in insn 458
changing reg in insn 566
changing reg in insn 475
changing reg in insn 417
changing reg in insn 410
changing reg in insn 438
changing reg in insn 431
changing reg in insn 515
changing reg in insn 421
changing reg in insn 418
changing reg in insn 411
changing reg in insn 568
changing reg in insn 569
changing reg in insn 336
changing reg in insn 252
changing reg in insn 287
changing reg in insn 312
changing reg in insn 339
changing reg in insn 269
changing reg in insn 281
changing reg in insn 270
changing reg in insn 283
changing reg in insn 287
changing reg in insn 312
changing reg in insn 292
changing reg in insn 284
changing reg in insn 238
changing reg in insn 235
changing reg in insn 645
changing reg in insn 203
changing reg in insn 203
changing reg in insn 215
changing reg in insn 211
changing reg in insn 204
changing reg in insn 203
changing reg in insn 644
changing reg in insn 179
changing reg in insn 179
changing reg in insn 191
changing reg in insn 187
changing reg in insn 180
changing reg in insn 179
changing reg in insn 643
changing reg in insn 139
changing reg in insn 139
changing reg in insn 151
changing reg in insn 147
changing reg in insn 140
changing reg in insn 139
changing reg in insn 642
changing reg in insn 115
changing reg in insn 115
changing reg in insn 127
changing reg in insn 123
changing reg in insn 116
changing reg in insn 115
changing reg in insn 641
changing reg in insn 92
changing reg in insn 92
changing reg in insn 103
changing reg in insn 99
changing reg in insn 93
changing reg in insn 92
changing reg in insn 640
changing reg in insn 69
changing reg in insn 69
changing reg in insn 80
changing reg in insn 76
changing reg in insn 70
changing reg in insn 69
changing reg in insn 34
changing reg in insn 45
changing reg in insn 48
changing reg in insn 492
changing reg in insn 569
changing reg in insn 370
changing reg in insn 547
changing reg in insn 542
changing reg in insn 537
changing reg in insn 523
changing reg in insn 518
changing reg in insn 421
changing reg in insn 400
changing reg in insn 273
changing reg in insn 218
changing reg in insn 194
changing reg in insn 170
changing reg in insn 163
changing reg in insn 154
changing reg in insn 130
changing reg in insn 106
changing reg in insn 83
changing reg in insn 60
changing reg in insn 51
changing reg in insn 554
changing reg in insn 458
changing reg in insn 570
changing reg in insn 484
changing reg in insn 474
changing reg in insn 466
changing reg in insn 476
changing reg in insn 507
changing reg in insn 458
changing reg in insn 484
changing reg in insn 474
changing reg in insn 466
changing reg in insn 487
changing reg in insn 476
changing reg in insn 317
changing reg in insn 292
changing reg in insn 334
changing reg in insn 330
changing reg in insn 328
changing reg in insn 323
changing reg in insn 320
changing reg in insn 294
changing reg in insn 317
changing reg in insn 2
changing reg in insn 408
changing reg in insn 281
changing reg in insn 532
changing reg in insn 526
changing reg in insn 414
changing reg in insn 360
changing reg in insn 354
changing reg in insn 223
changing reg in insn 213
changing reg in insn 189
changing reg in insn 168
changing reg in insn 159
changing reg in insn 149
changing reg in insn 125
changing reg in insn 101
changing reg in insn 78
changing reg in insn 56
changing reg in insn 39
changing reg in insn 3
changing reg in insn 533
changing reg in insn 10
changing reg in insn 4
changing reg in insn 638
changing reg in insn 638
changing reg in insn 443
changing reg in insn 309
changing reg in insn 42
changing reg in insn 27
changing reg in insn 384
changing reg in insn 378
changing reg in insn 265
changing reg in insn 260
changing reg in insn 370
changing reg in insn 367
changing reg in insn 233
changing reg in insn 230
changing reg in insn 534
changing reg in insn 57
changing reg in insn 31
changing reg in insn 5
changing reg in insn 203
changing reg in insn 179
changing reg in insn 139
changing reg in insn 115
changing reg in insn 92
changing reg in insn 69
changing reg in insn 393
changing reg in insn 340
changing reg in insn 212
changing reg in insn 188
changing reg in insn 161
changing reg in insn 148
changing reg in insn 124
changing reg in insn 100
changing reg in insn 77
changing reg in insn 49
changing reg in insn 535
changing reg in insn 169
changing reg in insn 58
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 639
changing reg in insn 638
changing reg in insn 639
changing reg in insn 27
changing reg in insn 27
changing reg in insn 34
changing reg in insn 28
changing reg in insn 39
changing reg in insn 43
changing reg in insn 648
changing reg in insn 45
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 636
changing reg in insn 635
changing reg in insn 636
changing reg in insn 68
changing reg in insn 68
changing reg in insn 640
changing reg in insn 634
changing reg in insn 633
changing reg in insn 634
changing reg in insn 91
changing reg in insn 91
changing reg in insn 641
changing reg in insn 632
changing reg in insn 631
changing reg in insn 632
changing reg in insn 114
changing reg in insn 114
changing reg in insn 642
changing reg in insn 630
changing reg in insn 629
changing reg in insn 630
changing reg in insn 138
changing reg in insn 138
changing reg in insn 643
changing reg in insn 159
changing reg in insn 160
changing reg in insn 168
changing reg in insn 169
changing reg in insn 628
changing reg in insn 627
changing reg in insn 628
changing reg in insn 178
changing reg in insn 178
changing reg in insn 644
changing reg in insn 626
changing reg in insn 625
changing reg in insn 626
changing reg in insn 202
changing reg in insn 202
changing reg in insn 645
changing reg in insn 240
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 268
changing reg in insn 269
changing reg in insn 281
changing reg in insn 283
changing reg in insn 320
changing reg in insn 325
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 328
changing reg in insn 328
changing reg in insn 332
changing reg in insn 330
changing reg in insn 332
changing reg in insn 332
changing reg in insn 336
changing reg in insn 334
changing reg in insn 336
changing reg in insn 388
changing reg in insn 389
changing reg in insn 405
changing reg in insn 408
changing reg in insn 408
changing reg in insn 431
changing reg in insn 410
changing reg in insn 461
changing reg in insn 466
changing reg in insn 469
changing reg in insn 474
changing reg in insn 479
changing reg in insn 484
changing reg in insn 647
changing reg in insn 501
changing reg in insn 501
changing reg in insn 502
changing reg in insn 507
changing reg in insn 510
changing reg in insn 509
changing reg in insn 511
changing reg in insn 565
changing reg in insn 567
Spilling for insn 635.
Using reg 2 for reload 0
Spilling for insn 77.
Spilling for insn 76.
Spilling for insn 633.
Using reg 2 for reload 0
Spilling for insn 100.
Spilling for insn 99.
Spilling for insn 631.
Using reg 2 for reload 0
Spilling for insn 124.
Spilling for insn 123.
Spilling for insn 629.
Using reg 2 for reload 0
Spilling for insn 148.
Spilling for insn 147.
Spilling for insn 169.
Spilling for insn 627.
Using reg 2 for reload 0
Spilling for insn 188.
Spilling for insn 187.
Spilling for insn 625.
Using reg 2 for reload 0
Spilling for insn 212.
Spilling for insn 211.
Spilling for insn 431.
Spilling for insn 566.
Spilling for insn 567.
Spilling for insn 503.
Spilling for insn 511.
Spilling for insn 502.

Reloads for insn # 635
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 77
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 76
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 633
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 100
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 99
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 631
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 124
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 123
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 629
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 148
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 147
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 169
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
                                                        (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
                                                        (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])

Reloads for insn # 627
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 188
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 187
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 625
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 212
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 211
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 431
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                                                        (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                                                        (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])

Reloads for insn # 566
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 attr.D.23452.bp_addr+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 attr.D.23452.bp_addr+0 S4 A64])

Reloads for insn # 567
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 attr.D.23452.bp_addr+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 attr.D.23452.bp_addr+4 S4 A32])

Reloads for insn # 503
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 attr.bp_type+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 attr.bp_type+0 S4 A32])

Reloads for insn # 511
Reload 0: reload_out (QI) = (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0+40 S1 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0+40 S1 A64])

Reloads for insn # 502
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 attr.D.23456.bp_len+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 attr.D.23456.bp_len+0 S8 A64])
deleting insn with uid = 3.
deleting insn with uid = 34.
deleting insn with uid = 48.
deleting insn with uid = 640.
deleting insn with uid = 641.
deleting insn with uid = 642.
deleting insn with uid = 643.
deleting insn with uid = 644.
deleting insn with uid = 645.
deleting insn with uid = 287.
deleting insn with uid = 339.
deleting insn with uid = 370.
deleting insn with uid = 533.


try_optimize_cfg iteration 1

Simplifying condjump 32 around jump 571
deleting insn with uid = 33.
deleting insn with uid = 571.
deleting insn with uid = 572.
deleting block 5
deleting insn with uid = 37.
Deleted label in block 6.
Simplifying condjump 285 around jump 599
deleting insn with uid = 286.
deleting insn with uid = 599.
deleting insn with uid = 600.
deleting block 32
deleting insn with uid = 290.
Deleted label in block 33.
Simplifying condjump 368 around jump 607
deleting insn with uid = 369.
deleting insn with uid = 607.
deleting insn with uid = 608.
deleting block 43
deleting insn with uid = 373.
Deleted label in block 44.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 153.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 217.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 355.
verify found no changes in insn with uid = 361.
verify found no changes in insn with uid = 416.
verify found no changes in insn with uid = 440.
verify found no changes in insn with uid = 490.
verify found no changes in insn with uid = 517.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 536.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 63 n_edges 99 count 124 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 63 n_edges 99 count 125 (    2)


arch_ptrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={50d,51u} r1={37d,19u} r2={51d,31u} r3={66d,46u} r4={1d,18u} r5={3d,25u} r6={26d,22u,1d} r7={16d,18u} r8={6d,7u} r10={2d,7u} r12={36d,24u} r13={1d,112u,2d} r14={25d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={58d,27u} r25={1d} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} 
;;    total ref usage 2990{2578d,408u,4e} in 290{270 regular + 20 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 6 10 2 arch/arm/kernel/ptrace.c:790 (set (reg/v/f:SI 4 r4 [orig:188 child ] [188])
        (reg:SI 0 r0 [ child ])) 167 {*arm_movsi_insn} (nil))

(insn 10 2 4 2 arch/arm/kernel/ptrace.c:794 (set (reg:SI 0 r0 [192])
        (plus:SI (reg/v:SI 1 r1 [orig:189 request ] [189])
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (nil))

(insn 4 10 5 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (reg:SI 2 r2 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 11 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 5 r5 [orig:191 data ] [191])
        (reg:SI 3 r3 [ data ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 11 5 12 2 arch/arm/kernel/ptrace.c:794 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 0 r0 [192])
                        (const_int 27 [0x1b]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 0 r0 [192])
                                (const_int 4 [0x4]))
                            (label_ref 12)) [0 S4 A32])
                    (label_ref 530)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 12))
        ]) 265 {arm_casesi_internal} (insn_list:REG_LABEL_TARGET 530 (nil)))
;; End of basic block 2 -> ( 62 3 8 9 11 13 15 17 18 19 21 23 41)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  62 [7.7%] 
;; Succ edge  3 [7.7%] 
;; Succ edge  8 [7.7%] 
;; Succ edge  9 [7.7%] 
;; Succ edge  11 [7.7%] 
;; Succ edge  13 [7.7%] 
;; Succ edge  15 [7.7%] 
;; Succ edge  17 [7.7%] 
;; Succ edge  18 [7.7%] 
;; Succ edge  19 [7.7%] 
;; Succ edge  21 [7.7%] 
;; Succ edge  23 [7.7%] 
;; Succ edge  41 [7.7%] 

;; Insn is not within a basic block
(code_label 12 11 13 108 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 13 12 14 arch/arm/kernel/ptrace.c:794 (addr_vec:SI [
            (label_ref:SI 15)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 54)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 63)
            (label_ref:SI 86)
            (label_ref:SI 109)
            (label_ref:SI 133)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 157)
            (label_ref:SI 166)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 173)
            (label_ref:SI 197)
            (label_ref:SI 221)
            (label_ref:SI 358)
        ]) -1 (nil))

(barrier 14 13 15)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 15 14 16 3 96 "" [1 uses])

(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(note 18 17 21 3 NOTE_INSN_DELETED)

(note 21 18 22 3 NOTE_INSN_DELETED)

(note 22 21 23 3 NOTE_INSN_DELETED)

(note 23 22 25 3 NOTE_INSN_DELETED)

(note 25 23 26 3 NOTE_INSN_DELETED)

(note 26 25 638 3 NOTE_INSN_DELETED)

(insn 638 26 639 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [195])
                (and:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 639 638 27 3 arch/arm/kernel/ptrace.c:258 (set (reg:SI 2 r2 [195])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 2 r2 [195])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (nil))

(insn 27 639 28 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:SI 2 r2 [201])
                (ior:SI (geu:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                        (const_int 296 [0x128]))
                    (reg:SI 2 r2 [195])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 28 27 29 3 arch/arm/kernel/ptrace.c:258 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [201])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 3 arch/arm/kernel/ptrace.c:258 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 64 4)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  64 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 4 arch/arm/kernel/ptrace.c:268 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 32 31 38 4 arch/arm/kernel/ptrace.c:268 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 6 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 38 32 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 41 38 39 6 NOTE_INSN_DELETED)

(insn 39 41 42 6 arch/arm/kernel/ptrace.c:160 (set (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 39 43 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 6 r6 [205])
        (and:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 43 42 648 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 6 r6 [206])
        (plus:SI (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
            (reg:SI 6 r6 [205]))) 4 {*arm_addsi3} (nil))

(insn 648 43 45 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 3 r3 [203])
        (const_int 8112 [0x1fb0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 8112 [0x1fb0])
        (nil)))

(insn 45 648 46 6 arch/arm/kernel/ptrace.c:160 (set (reg/v:SI 2 r2 [orig:179 tmp ] [179])
        (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                (reg:SI 3 r3 [203])) [0 <variable>.uregs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                (const_int 8112 [0x1fb0])) [0 <variable>.uregs S4 A32])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [50.0%] 
(code_label 46 45 47 7 111 "" [1 uses])

(note 47 46 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 49 47 50 7 arch/arm/kernel/ptrace.c:271 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 50 49 51 7 arch/arm/kernel/ptrace.c:271 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592343))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 51 50 573 7 arch/arm/kernel/ptrace.c:271 discrim 6 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg/v:SI 0 r0 [ __e ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 573 51 574 7 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 574 573 54)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 54 574 55 8 97 "" [1 uses])

(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (nil))

(insn 58 57 59 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(call_insn 59 58 60 8 arch/arm/kernel/ptrace.c:800 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_write_user") [flags 0x3] <function_decl 0x1155b480 ptrace_write_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 60 59 575 8 arch/arm/kernel/ptrace.c:800 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 575 60 576 8 arch/arm/kernel/ptrace.c:801 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 576 575 63)

;; Start of basic block ( 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 63 576 64 9 98 "" [1 uses])

(note 64 63 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 66 64 650 9 NOTE_INSN_DELETED)

(insn 650 66 635 9 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 635 650 636 9 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 636 635 68 9 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 3 r3 [208])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 68 636 69 9 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:210 <variable>.addr_limit ] [210])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [208])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 69 68 70 9 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:176 flag ] [176])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:177 roksum ] [177])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 70 69 71 9 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:176 flag ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 71 70 72 9 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 9 -> ( 64 10)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  10 [29.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  9 [29.0%]  (fallthru)
(note 72 71 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 78 72 80 10 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 80 78 79 10 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 79 80 81 10 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 81 79 77 10 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 77 81 76 10 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 76 77 82 10 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (nil))

(call_insn 82 76 83 10 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_get") [flags 0x3] <function_decl 0x1155be80 gpr_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 83 82 577 10 include/linux/regset.h:341 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 577 83 578 10 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 578 577 86)

;; Start of basic block ( 2) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 86 578 87 11 99 "" [1 uses])

(note 87 86 89 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 89 87 651 11 NOTE_INSN_DELETED)

(insn 651 89 633 11 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 633 651 634 11 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 634 633 91 11 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 3 r3 [214])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 91 634 92 11 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:216 <variable>.addr_limit ] [216])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [214])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 92 91 93 11 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:173 flag ] [173])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:174 roksum ] [174])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 93 92 94 11 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:173 flag ] [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 94 93 95 11 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 11 -> ( 64 12)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  12 [29.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 95 94 101 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 101 95 103 12 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 102 12 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 102 103 104 12 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 104 102 100 12 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 100 104 99 12 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 99 100 105 12 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (nil))

(call_insn 105 99 106 12 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_set") [flags 0x3] <function_decl 0x1155bf80 gpr_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 106 105 579 12 include/linux/regset.h:364 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 579 106 580 12 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 580 579 109)

;; Start of basic block ( 2) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 109 580 110 13 100 "" [1 uses])

(note 110 109 112 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 112 110 652 13 NOTE_INSN_DELETED)

(insn 652 112 631 13 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 631 652 632 13 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 632 631 114 13 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 3 r3 [220])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 114 632 115 13 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:222 <variable>.addr_limit ] [222])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [220])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 115 114 116 13 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:170 flag ] [170])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:171 roksum ] [171])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 116 115 117 13 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:170 flag ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 117 116 118 13 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 13 -> ( 64 14)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  14 [29.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  13 [29.0%]  (fallthru)
(note 118 117 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 125 118 127 14 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 127 125 126 14 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 126 127 128 14 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 128 126 124 14 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn 124 128 123 14 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 123 124 129 14 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (nil))

(call_insn 129 123 130 14 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_get") [flags 0x3] <function_decl 0x11582080 fpa_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 130 129 581 14 include/linux/regset.h:341 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 581 130 582 14 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 582 581 133)

;; Start of basic block ( 2) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 133 582 134 15 101 "" [1 uses])

(note 134 133 136 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 136 134 653 15 NOTE_INSN_DELETED)

(insn 653 136 629 15 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 629 653 630 15 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 630 629 138 15 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 3 r3 [227])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 138 630 139 15 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:229 <variable>.addr_limit ] [229])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [227])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 139 138 140 15 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:167 flag ] [167])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:168 roksum ] [168])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 140 139 141 15 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:167 flag ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 141 140 142 15 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 15 -> ( 64 16)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  16 [29.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  15 [29.0%]  (fallthru)
(note 142 141 149 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 149 142 151 16 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 151 149 150 16 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 150 151 152 16 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 152 150 148 16 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn 148 152 147 16 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 147 148 153 16 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (nil))

(call_insn 153 147 154 16 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_set") [flags 0x3] <function_decl 0x11582180 fpa_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 154 153 583 16 include/linux/regset.h:364 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 583 154 584 16 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 584 583 157)

;; Start of basic block ( 2) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 157 584 158 17 102 "" [1 uses])

(note 158 157 159 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 159 158 161 17 arch/arm/kernel/ptrace.c:842 (set (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 161 159 160 17 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 160 161 162 17 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 2 r2 [ __r2 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
                (const_int 96 [0x60])) [0 <variable>.tp_value+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 162 160 163 17 arch/arm/kernel/ptrace.c:842 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592319))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 163 162 585 17 arch/arm/kernel/ptrace.c:842 discrim 6 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg/v:SI 0 r0 [ __e ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 585 163 586 17 arch/arm/kernel/ptrace.c:844 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 586 585 166)

;; Start of basic block ( 2) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6]
;; live  kill	

;; Pred edge  2 [7.7%] 
(code_label 166 586 167 18 103 "" [1 uses])

(note 167 166 168 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 168 167 170 18 arch/arm/kernel/ptrace.c:847 (set (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 170 168 169 18 arch/arm/kernel/ptrace.c:848 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 169 170 587 18 arch/arm/kernel/ptrace.c:847 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(jump_insn 587 169 588 18 arch/arm/kernel/ptrace.c:849 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  65 [100.0%] 

(barrier 588 587 173)

;; Start of basic block ( 2) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 173 588 174 19 104 "" [1 uses])

(note 174 173 176 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 176 174 654 19 NOTE_INSN_DELETED)

(insn 654 176 627 19 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 627 654 628 19 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 628 627 178 19 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 3 r3 [236])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 178 628 179 19 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:238 <variable>.addr_limit ] [238])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [236])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 179 178 180 19 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:164 flag ] [164])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:165 roksum ] [165])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 180 179 181 19 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:164 flag ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 181 180 182 19 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 19 -> ( 64 20)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  20 [29.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  19 [29.0%]  (fallthru)
(note 182 181 189 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 189 182 191 20 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 191 189 190 20 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 190 191 192 20 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 192 190 188 20 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn 188 192 187 20 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 187 188 193 20 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (nil))

(call_insn 193 187 194 20 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get") [flags 0x3] <function_decl 0x11582280 vfp_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 194 193 589 20 include/linux/regset.h:341 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 589 194 590 20 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 590 589 197)

;; Start of basic block ( 2) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 197 590 198 21 105 "" [1 uses])

(note 198 197 200 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 200 198 655 21 NOTE_INSN_DELETED)

(insn 655 200 625 21 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 625 655 626 21 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 626 625 202 21 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 3 r3 [243])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 202 626 203 21 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:245 <variable>.addr_limit ] [245])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [243])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 203 202 204 21 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:161 flag ] [161])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:162 roksum ] [162])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 204 203 205 21 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:161 flag ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 205 204 206 21 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 21 -> ( 64 22)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  64 [71.0%] 
;; Succ edge  22 [29.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%]  (fallthru)
(note 206 205 213 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 213 206 215 22 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 215 213 214 22 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 214 215 216 22 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 216 214 212 22 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn 212 216 211 22 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 211 212 217 22 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (nil))

(call_insn 217 211 218 22 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_set") [flags 0x3] <function_decl 0x11582380 vfp_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 218 217 591 22 include/linux/regset.h:364 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 591 218 592 22 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 592 591 221)

;; Start of basic block ( 2) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 221 592 222 23 106 "" [1 uses])

(note 222 221 225 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 225 222 223 23 NOTE_INSN_DELETED)

(insn 223 225 224 23 arch/arm/kernel/ptrace.c:879 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn 224 223 226 23 arch/arm/kernel/ptrace.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 226 224 227 23 arch/arm/kernel/ptrace.c:879 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 227 226 228 23 arch/arm/kernel/ptrace.c:879 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1912 [0x778])
        (nil)))
;; End of basic block 23 -> ( 63 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  63 [19.1%] 
;; Succ edge  24 [80.9%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  23 [80.9%]  (fallthru)
(note 228 227 230 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 230 228 231 24 arch/arm/kernel/ptrace.c:472 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 231 230 232 24 arch/arm/kernel/ptrace.c:472 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  25 [29.0%]  (fallthru)
;; Succ edge  26 [71.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  24 [29.0%]  (fallthru)
(note 232 231 243 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(note 243 232 245 25 NOTE_INSN_DELETED)

(note 245 243 247 25 NOTE_INSN_DELETED)

(note 247 245 250 25 NOTE_INSN_DELETED)

(note 250 247 233 25 NOTE_INSN_DELETED)

(insn 233 250 234 25 arch/arm/kernel/ptrace.c:432 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 234 233 235 25 arch/arm/kernel/ptrace.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 235 234 236 25 arch/arm/kernel/ptrace.c:432 (set (reg:SI 7 r7 [orig:159 D.28052 ] [159])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 236 235 237 25 arch/arm/kernel/ptrace.c:433 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 237 236 238 25 arch/arm/kernel/ptrace.c:433 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 238 237 239 25 arch/arm/kernel/ptrace.c:433 (set (reg:SI 8 r8 [orig:158 D.28053 ] [158])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(call_insn 239 238 240 25 arch/arm/kernel/ptrace.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_debug_arch") [flags 0x41] <function_decl 0x10ad9400 arch_get_debug_arch>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 240 239 242 25 arch/arm/kernel/ptrace.c:434 (set (reg:SI 6 r6 [250])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(call_insn 242 240 248 25 arch/arm/kernel/ptrace.c:435 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_max_wp_len") [flags 0x41] <function_decl 0x10ad9480 arch_get_max_wp_len>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 248 242 251 25 arch/arm/kernel/ptrace.c:441 (set (reg:SI 8 r8 [orig:252 D.28053 ] [252])
        (zero_extend:SI (reg:QI 8 r8 [orig:158 D.28053 ] [158]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 251 248 246 25 arch/arm/kernel/ptrace.c:443 (set (reg:SI 7 r7 [orig:254 D.28052 ] [254])
        (zero_extend:SI (reg:QI 7 r7 [orig:159 D.28052 ] [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 246 251 249 25 arch/arm/kernel/ptrace.c:439 (set (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
        (ior:SI (ashift:SI (reg:SI 6 r6 [250])
                (const_int 8 [0x8]))
            (reg:SI 0 r0))) 270 {*arith_shiftsi} (nil))

(insn 249 246 252 25 arch/arm/kernel/ptrace.c:441 (set (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
        (ior:SI (ashift:SI (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
                (const_int 8 [0x8]))
            (reg:SI 8 r8 [orig:252 D.28053 ] [252]))) 270 {*arith_shiftsi} (nil))

(insn 252 249 593 25 arch/arm/kernel/ptrace.c:443 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
                (const_int 8 [0x8]))
            (reg:SI 7 r7 [orig:254 D.28052 ] [254]))) 270 {*arith_shiftsi} (nil))

(jump_insn 593 252 594 25 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 39)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 594 593 255)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [71.0%] 
(code_label 255 594 256 26 114 "" [1 uses])

(note 256 255 258 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(jump_insn 258 256 259 26 arch/arm/kernel/ptrace.c:358 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 263)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
        (nil)))
;; End of basic block 26 -> ( 28 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  28 [27.0%] 
;; Succ edge  27 [73.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  26 [73.0%]  (fallthru)
(note 259 258 260 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 595 27 arch/arm/kernel/ptrace.c:358 (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (nil))

(jump_insn 595 260 596 27 (set (pc)
        (label_ref 266)) 242 {*arm_jump} (nil))
;; End of basic block 27 -> ( 29)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  29 [100.0%] 

(barrier 596 595 263)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  26 [27.0%] 
(code_label 263 596 264 28 116 "" [1 uses])

(note 264 263 265 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 265 264 266 28 arch/arm/kernel/ptrace.c:359 (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  29 [100.0%]  (fallthru)

;; Start of basic block ( 28 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  28 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
(code_label 266 265 267 29 117 "" [1 uses])

(note 267 266 268 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 268 267 269 29 arch/arm/kernel/ptrace.c:360 (set (reg:SI 3 r3 [255])
        (plus:SI (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 269 268 270 29 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 3 r3 [orig:153 idx ] [153])
        (ashiftrt:SI (reg:SI 3 r3 [255])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 270 269 271 29 arch/arm/kernel/ptrace.c:476 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:153 idx ] [153])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 271 270 272 29 arch/arm/kernel/ptrace.c:476 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 272 271 273 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 273 272 597 30 arch/arm/kernel/ptrace.c:477 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(jump_insn 597 273 598 30 (set (pc)
        (label_ref 352)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 40)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  40 [100.0%] 

(barrier 598 597 276)

;; Start of basic block ( 29) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  29 [50.0%] 
(code_label 276 598 277 31 118 "" [1 uses])

(note 277 276 278 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 278 277 280 31 NOTE_INSN_DELETED)

(note 280 278 281 31 NOTE_INSN_DELETED)

(insn 281 280 283 31 arch/arm/kernel/ptrace.c:481 (set (reg:SI 3 r3 [259])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:153 idx ] [153])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(insn 283 281 284 31 arch/arm/kernel/ptrace.c:481 (set (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [259])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 284 283 285 31 arch/arm/kernel/ptrace.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 285 284 291 31 arch/arm/kernel/ptrace.c:482 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 337)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 31 -> ( 39 33)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  39 [15.0%] 
;; Succ edge  33 [85.0%]  (fallthru)

;; Start of basic block ( 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  31 [85.0%]  (fallthru)
(note 291 285 293 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 293 291 292 33 NOTE_INSN_DELETED)

(insn 292 293 294 33 arch/arm/kernel/ptrace.c:487 (set (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                (const_int 212 [0xd4])) [0 <variable>.hw.D.25978.D.25977.info.ctrl+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 294 292 601 33 arch/arm/kernel/ptrace.c:487 (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(jump_insn 601 294 602 33 (set (pc)
        (label_ref 301)) 242 {*arm_jump} (nil))
;; End of basic block 33 -> ( 35)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  35 [100.0%] 

(barrier 602 601 303)

;; Start of basic block ( 35) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  35 [91.0%] 
(code_label 303 602 298 34 122 "" [1 uses])

(note 298 303 299 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 299 298 300 34 NOTE_INSN_DELETED)

(insn 300 299 301 34 arch/arm/kernel/ptrace.c:494 (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (lshiftrt:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 34 -> ( 35)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  35 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 34 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  34 [100.0%]  (fallthru,dfs_back)
;; Pred edge  33 [100.0%] 
(code_label 301 300 302 35 121 "" [1 uses])

(note 302 301 304 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(note 304 302 305 35 NOTE_INSN_DELETED)

(insn 305 304 306 35 arch/arm/kernel/ptrace.c:493 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 306 305 307 35 arch/arm/kernel/ptrace.c:493 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 35 -> ( 34 36)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  34 [91.0%] 
;; Succ edge  36 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [9.0%]  (fallthru,loop_exit)
(note 307 306 308 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 308 307 309 36 NOTE_INSN_DELETED)

(insn 309 308 310 36 arch/arm/kernel/ptrace.c:496 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 310 309 311 36 arch/arm/kernel/ptrace.c:496 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 315)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 37 38)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 311 310 312 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 312 311 603 37 arch/arm/kernel/ptrace.c:497 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                (const_int 176 [0xb0])) [0 <variable>.attr.D.23452.bp_addr+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(jump_insn 603 312 604 37 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 39)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 604 603 315)

;; Start of basic block ( 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  36 [50.0%] 
(code_label 315 604 316 38 123 "" [1 uses])

(note 316 315 319 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 319 316 321 38 NOTE_INSN_DELETED)

(note 321 319 322 38 NOTE_INSN_DELETED)

(note 322 321 326 38 NOTE_INSN_DELETED)

(note 326 322 327 38 NOTE_INSN_DELETED)

(note 327 326 329 38 NOTE_INSN_DELETED)

(note 329 327 331 38 NOTE_INSN_DELETED)

(note 331 329 333 38 NOTE_INSN_DELETED)

(note 333 331 335 38 NOTE_INSN_DELETED)

(note 335 333 317 38 NOTE_INSN_DELETED)

(insn 317 335 323 38 arch/arm/kernel/ptrace.c:497 (set (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])) 77 {insv_t2} (nil))

(insn 323 317 320 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [269])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(insn 320 323 330 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 0 r0 [266])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))) 124 {extzv_t2} (nil))

(insn 330 320 334 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 7 r7 [276])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))) 124 {extzv_t2} (nil))

(insn 334 330 324 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 2 r2 [280])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))) 124 {extzv_t2} (nil))

(insn 324 334 325 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [270])
        (ashift:SI (reg:SI 1 r1 [269])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 325 324 328 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [271])
        (ior:SI (ashift:SI (reg:SI 0 r0 [266])
                (const_int 22 [0x16]))
            (reg:SI 1 r1 [270]))) 270 {*arith_shiftsi} (nil))

(insn 328 325 332 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [274])
        (ior:SI (lshiftrt:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
                (const_int 31 [0x1f]))
            (reg:SI 1 r1 [271]))) 270 {*arith_shiftsi} (nil))

(insn 332 328 336 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [278])
        (ior:SI (ashift:SI (reg:SI 7 r7 [276])
                (const_int 3 [0x3]))
            (reg:SI 3 r3 [274]))) 270 {*arith_shiftsi} (nil))

(insn 336 332 337 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg:SI 2 r2 [280])
                (const_int 1 [0x1]))
            (reg:SI 3 r3 [278]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 38 -> ( 39)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  39 [100.0%]  (fallthru)

;; Start of basic block ( 38 25 31 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  38 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
;; Pred edge  31 [15.0%] 
;; Pred edge  37 [100.0%] 
(code_label 337 336 338 39 115 ("put") [3 uses])

(note 338 337 342 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 342 338 340 39 NOTE_INSN_DELETED)

(insn 340 342 341 39 arch/arm/kernel/ptrace.c:503 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 341 340 568 39 arch/arm/kernel/ptrace.c:503 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592350))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 568 341 569 39 arch/arm/kernel/ptrace.c:504 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 0 r0 [ __e ])
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [orig:151 D.28058 ] [151])
                (reg/v:SI 0 r0 [ __e ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 569 568 352 39 arch/arm/kernel/ptrace.c:504 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 6 r6 [orig:151 D.28058 ] [151])
            (const_int -14 [0xfffffffffffffff2]))) 240 {*movsicc_insn} (nil))
;; End of basic block 39 -> ( 40)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  40 [100.0%]  (fallthru)

;; Start of basic block ( 39 30) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  39 [100.0%]  (fallthru)
;; Pred edge  30 [100.0%] 
(code_label 352 569 353 40 119 ("out") [1 uses])

(note 353 352 354 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 354 353 355 40 arch/arm/kernel/ptrace.c:884 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn 355 354 605 40 arch/arm/kernel/ptrace.c:884 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 605 355 606 40 arch/arm/kernel/ptrace.c:885 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 40 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 606 605 358)

;; Start of basic block ( 2) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 358 606 359 41 107 "" [1 uses])

(note 359 358 362 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 362 359 360 41 NOTE_INSN_DELETED)

(insn 360 362 361 41 arch/arm/kernel/ptrace.c:887 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn 361 360 363 41 arch/arm/kernel/ptrace.c:887 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 363 361 364 41 arch/arm/kernel/ptrace.c:887 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 364 363 365 41 arch/arm/kernel/ptrace.c:887 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1912 [0x778])
        (nil)))
;; End of basic block 41 -> ( 63 42)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  63 [19.1%] 
;; Succ edge  42 [80.9%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  41 [80.9%]  (fallthru)
(note 365 364 367 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 367 365 368 42 arch/arm/kernel/ptrace.c:519 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 368 367 374 42 arch/arm/kernel/ptrace.c:519 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 61 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  61 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 374 368 376 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(jump_insn 376 374 377 44 arch/arm/kernel/ptrace.c:521 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 382)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
        (nil)))
;; End of basic block 44 -> ( 46 45)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  46 [27.0%] 
;; Succ edge  45 [73.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 7 [r7] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  44 [73.0%]  (fallthru)
(note 377 376 378 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 378 377 379 45 arch/arm/kernel/ptrace.c:521 (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (nil))

(insn 379 378 609 45 arch/arm/kernel/ptrace.c:524 (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(jump_insn 609 379 610 45 (set (pc)
        (label_ref 386)) 242 {*arm_jump} (nil))
;; End of basic block 45 -> ( 47)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  47 [100.0%] 

(barrier 610 609 382)

;; Start of basic block ( 44) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 7 [r7] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  44 [27.0%] 
(code_label 382 610 383 46 127 "" [1 uses])

(note 383 382 384 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 384 383 385 46 arch/arm/kernel/ptrace.c:359 (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 28 {*arm_subsi3_insn} (nil))

(insn 385 384 386 46 arch/arm/kernel/ptrace.c:522 (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))
;; End of basic block 46 -> ( 47)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46 45) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
;; Pred edge  45 [100.0%] 
(code_label 386 385 387 47 128 "" [1 uses])

(note 387 386 388 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 388 387 389 47 arch/arm/kernel/ptrace.c:360 (set (reg:SI 7 r7 [282])
        (plus:SI (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 389 388 390 47 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 7 r7 [orig:145 idx ] [145])
        (ashiftrt:SI (reg:SI 7 r7 [282])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 390 389 391 47 arch/arm/kernel/ptrace.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 391 390 392 47 arch/arm/kernel/ptrace.c:527 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 47 -> ( 60 48)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  60 [50.0%] 
;; Succ edge  48 [50.0%]  (fallthru)

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 10 [sl] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  47 [50.0%]  (fallthru)
(note 392 391 396 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 396 392 393 48 NOTE_INSN_DELETED)

(insn 393 396 394 48 arch/arm/kernel/ptrace.c:532 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn 394 393 397 48 arch/arm/kernel/ptrace.c:532 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (set (reg/v:SI 2 r2 [ __r2 ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=r") 1 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
        ]) -1 (nil))

(insn 397 394 395 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [ __e ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 395 397 398 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg/v:SI 10 sl [orig:147 user_val ] [147])
        (reg/v:SI 2 r2 [ __r2 ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 398 395 399 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 403)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 48 -> ( 49 50)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [50.0%]  (fallthru)
;; Succ edge  50 [50.0%] 

;; Start of basic block ( 48) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  48 [50.0%]  (fallthru)
(note 399 398 400 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 400 399 611 49 arch/arm/kernel/ptrace.c:533 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 611 400 612 49 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 49 -> ( 61)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 612 611 403)

;; Start of basic block ( 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  48 [50.0%] 
(code_label 403 612 404 50 130 "" [1 uses])

(note 404 403 407 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(note 407 404 405 50 NOTE_INSN_DELETED)

(insn 405 407 408 50 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [283])
        (plus:SI (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 198 [0xc6]))) 4 {*arm_addsi3} (nil))

(insn 408 405 410 50 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [286])
        (plus:SI (mult:SI (reg:SI 7 r7 [283])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(insn 410 408 411 50 arch/arm/kernel/ptrace.c:537 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 411 410 412 50 arch/arm/kernel/ptrace.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 412 411 413 50 arch/arm/kernel/ptrace.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 432)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
        (nil)))
;; End of basic block 50 -> ( 51 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  51 [6.7%]  (fallthru)
;; Succ edge  54 [93.3%] 

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  50 [6.7%]  (fallthru)
(note 413 412 414 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 414 413 415 51 arch/arm/kernel/ptrace.c:539 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 415 414 416 51 arch/arm/kernel/ptrace.c:539 (set (reg:SI 1 r1)
        (reg/v:SI 8 r8 [orig:146 implied_type ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 416 415 417 51 arch/arm/kernel/ptrace.c:539 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_hbp_create") [flags 0x3] <function_decl 0x1155bb80 ptrace_hbp_create>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 417 416 418 51 arch/arm/kernel/ptrace.c:539 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 418 417 419 51 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 419 418 420 51 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 424)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 51 -> ( 52 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  52 [0.0%]  (fallthru)
;; Succ edge  53 [100.0%] 

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  51 [0.0%]  (fallthru)
(note 420 419 421 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 421 420 613 52 include/linux/err.h:29 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg/v/f:SI 5 r5 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (nil))

(jump_insn 613 421 614 52 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 52 -> ( 61)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 614 613 424)

;; Start of basic block ( 51) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  51 [100.0%] 
(code_label 424 614 425 53 132 "" [1 uses])

(note 425 424 431 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 431 425 432 53 arch/arm/kernel/ptrace.c:544 (set (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg/v/f:SI 5 r5 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 53 -> ( 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  54 [100.0%]  (fallthru)

;; Start of basic block ( 50 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  50 [93.3%] 
;; Pred edge  53 [100.0%]  (fallthru)
(code_label 432 431 433 54 131 "" [1 uses])

(note 433 432 434 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(note 434 433 435 54 NOTE_INSN_DELETED)

(note 435 434 442 54 NOTE_INSN_DELETED)

(note 442 435 437 54 NOTE_INSN_DELETED)

(insn 437 442 438 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 438 437 439 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(insn 439 438 440 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(call_insn 440 439 443 54 arch/arm/kernel/ptrace.c:547 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 443 440 444 54 arch/arm/kernel/ptrace.c:549 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 444 443 445 54 arch/arm/kernel/ptrace.c:549 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 450)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 54 -> ( 55 56)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  55 [71.0%]  (fallthru)
;; Succ edge  56 [29.0%] 

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  54 [71.0%]  (fallthru)
(note 445 444 566 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 566 445 565 55 arch/arm/kernel/ptrace.c:551 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 attr.D.23452.bp_addr+0 S4 A64])
        (reg/v:SI 10 sl [orig:147 user_val ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 565 566 567 55 arch/arm/kernel/ptrace.c:551 (set (reg:SI 3 r3 [orig:338+4 ] [338])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 567 565 615 55 arch/arm/kernel/ptrace.c:551 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 attr.D.23452.bp_addr+4 S4 A32])
        (reg:SI 3 r3 [orig:338+4 ] [338])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 615 567 616 55 (set (pc)
        (label_ref 512)) 242 {*arm_jump} (nil))
;; End of basic block 55 -> ( 59)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  59 [100.0%] 

(barrier 616 615 450)

;; Start of basic block ( 54) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  54 [29.0%] 
(code_label 450 616 451 56 133 "" [1 uses])

(note 451 450 453 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(note 453 451 459 56 NOTE_INSN_DELETED)

(note 459 453 467 56 NOTE_INSN_DELETED)

(note 467 459 477 56 NOTE_INSN_DELETED)

(note 477 467 485 56 NOTE_INSN_DELETED)

(note 485 477 486 56 NOTE_INSN_DELETED)

(note 486 485 491 56 NOTE_INSN_DELETED)

(note 491 486 570 56 NOTE_INSN_DELETED)

(insn 570 491 461 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 461 570 458 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (reg:SI 3 r3 [306])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 1 [0x1]))) 124 {extzv_t2} (nil))

(insn 458 461 469 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 31 [0x1f]))
        (reg/v:SI 10 sl [orig:147 user_val ] [147])) 77 {insv_t2} (nil))

(insn 469 458 466 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (reg:SI 2 r2 [312])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 466 469 475 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))
        (reg:SI 3 r3 [306])) 77 {insv_t2} (nil))

(insn 475 466 474 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:41 (set (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
        (lshiftrt:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 474 475 479 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))
        (reg:SI 2 r2 [312])) 77 {insv_t2} (nil))

(insn 479 474 476 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (reg:SI 10 sl [319])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 1 [0x1])
            (const_int 22 [0x16]))) 124 {extzv_t2} (nil))

(insn 476 479 488 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:42 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])) 77 {insv_t2} (nil))

(insn 488 476 484 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn 484 488 489 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))
        (reg:SI 10 sl [319])) 77 {insv_t2} (nil))

(insn 489 484 487 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn 487 489 490 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:184 ctrl ] [184])) 167 {*arm_movsi_insn} (nil))

(call_insn 490 487 492 56 arch/arm/kernel/ptrace.c:555 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_bp_generic_fields") [flags 0x41] <function_decl 0x10ad9200 arch_bp_generic_fields>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 492 490 493 56 arch/arm/kernel/ptrace.c:556 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 493 492 494 56 arch/arm/kernel/ptrace.c:556 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56 -> ( 61 57)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  61 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  56 [50.0%]  (fallthru)
(note 494 493 495 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 495 494 496 57 arch/arm/kernel/ptrace.c:559 (set (reg:SI 3 r3 [orig:143 gen_type.377 ] [143])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])
        (nil)))

(insn 496 495 497 57 arch/arm/kernel/ptrace.c:559 (set (reg:SI 8 r8 [orig:144 D.28101 ] [144])
        (and:SI (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 67 {*arm_andsi3_insn} (nil))

(insn 497 496 498 57 arch/arm/kernel/ptrace.c:559 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:144 D.28101 ] [144])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 498 497 499 57 arch/arm/kernel/ptrace.c:559 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 57 -> ( 60 58)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  60 [72.0%] 
;; Succ edge  58 [28.0%]  (fallthru)

;; Start of basic block ( 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  57 [28.0%]  (fallthru)
(note 499 498 504 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 504 499 505 58 NOTE_INSN_DELETED)

(note 505 504 506 58 NOTE_INSN_DELETED)

(note 506 505 508 58 NOTE_INSN_DELETED)

(note 508 506 509 58 NOTE_INSN_DELETED)

(insn 509 508 507 58 arch/arm/kernel/ptrace.c:566 (set (reg:QI 3 r3 [orig:333+40 ] [333])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0+40 S1 A64])) 178 {*arm_movqi_insn} (nil))

(insn 507 509 510 58 arch/arm/kernel/ptrace.c:566 (parallel [
            (set (reg:SI 7 r7 [332])
                (ge:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 510 507 503 58 arch/arm/kernel/ptrace.c:566 (set (zero_extract:SI (reg:SI 3 r3 [orig:333+40 ] [333])
            (const_int 1 [0x1])
            (const_int 0 [0x0]))
        (reg:SI 7 r7 [332])) 77 {insv_t2} (nil))

(insn 503 510 511 58 arch/arm/kernel/ptrace.c:565 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 attr.bp_type+0 S4 A32])
        (reg:SI 8 r8 [orig:144 D.28101 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 511 503 647 58 arch/arm/kernel/ptrace.c:566 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0+40 S1 A64])
        (reg:QI 3 r3 [orig:333+40 ] [333])) 178 {*arm_movqi_insn} (nil))

(insn 647 511 501 58 arch/arm/kernel/ptrace.c:564 (set (reg:SI 2 r2 [orig:326 gen_len ] [326])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])
        (nil)))

(insn 501 647 502 58 arch/arm/kernel/ptrace.c:564 (set (reg:DI 2 r2 [orig:327 gen_len ] [327])
        (sign_extend:DI (reg:SI 2 r2 [orig:326 gen_len ] [326]))) 140 {*arm_extendsidi2} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 attr.D.23456.bp_len+0 S8 A64])
        (nil)))

(insn 502 501 512 58 arch/arm/kernel/ptrace.c:564 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 2 r2 [orig:327 gen_len ] [327])) 163 {*arm_movdi} (nil))
;; End of basic block 58 -> ( 59)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  59 [100.0%]  (fallthru)

;; Start of basic block ( 58 55) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  58 [100.0%]  (fallthru)
;; Pred edge  55 [100.0%] 
(code_label 512 502 513 59 134 "" [1 uses])

(note 513 512 514 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(note 514 513 515 59 NOTE_INSN_DELETED)

(insn 515 514 516 59 arch/arm/kernel/ptrace.c:569 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 516 515 517 59 arch/arm/kernel/ptrace.c:569 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 517 516 518 59 arch/arm/kernel/ptrace.c:569 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("modify_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524780 modify_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 518 517 617 59 arch/arm/kernel/ptrace.c:569 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 617 518 618 59 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 59 -> ( 61)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 618 617 521)

;; Start of basic block ( 57 47) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  57 [72.0%] 
;; Pred edge  47 [50.0%] 
(code_label 521 618 522 60 129 ("out") [2 uses])

(note 522 521 523 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 523 522 524 60 arch/arm/kernel/ptrace.c:528 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 60 -> ( 61)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  61 [100.0%]  (fallthru)

;; Start of basic block ( 60 49 52 42 56 59) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  60 [100.0%]  (fallthru)
;; Pred edge  49 [100.0%] 
;; Pred edge  52 [100.0%] 
;; Pred edge  42 [50.0%] 
;; Pred edge  56 [50.0%] 
;; Pred edge  59 [100.0%] 
(code_label 524 523 525 61 126 "" [5 uses])

(note 525 524 526 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 526 525 527 61 arch/arm/kernel/ptrace.c:892 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn 527 526 619 61 arch/arm/kernel/ptrace.c:892 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 619 527 620 61 arch/arm/kernel/ptrace.c:893 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 61 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 620 619 530)

;; Start of basic block ( 2) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 530 620 531 62 95 "" [17 uses])

(note 531 530 532 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 532 531 534 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 534 532 535 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (nil))

(insn 535 534 536 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 3 r3)
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(call_insn 536 535 537 62 arch/arm/kernel/ptrace.c:897 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_request") [flags 0x41] <function_decl 0x1109c680 ptrace_request>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 537 536 621 62 arch/arm/kernel/ptrace.c:897 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 621 537 622 62 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 62 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 622 621 540)

;; Start of basic block ( 23 41) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  23 [19.1%] 
;; Pred edge  41 [19.1%] 
(code_label 540 622 541 63 113 "" [2 uses])

(note 541 540 542 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 542 541 623 63 arch/arm/kernel/ptrace.c:880 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -3 [0xfffffffffffffffd])) 167 {*arm_movsi_insn} (nil))

(jump_insn 623 542 624 63 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 63 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 624 623 545)

;; Start of basic block ( 21 19 3 9 11 13 15) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  21 [71.0%] 
;; Pred edge  19 [71.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  9 [71.0%] 
;; Pred edge  11 [71.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  15 [71.0%] 
(code_label 545 624 546 64 109 "" [7 uses])

(note 546 545 547 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 547 546 548 64 include/linux/regset.h:362 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 64 -> ( 65)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  65 [100.0%]  (fallthru)

;; Start of basic block ( 64 62 7 61 40 22 20 18 17 16 14 12 10 8 63) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  64 [100.0%]  (fallthru)
;; Pred edge  62 [100.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  61 [100.0%] 
;; Pred edge  40 [100.0%] 
;; Pred edge  22 [100.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  16 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  63 [100.0%] 
(code_label 548 547 549 65 112 "" [14 uses])

(note 549 548 554 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 554 549 560 65 arch/arm/kernel/ptrace.c:902 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:181 ret ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 560 554 646 65 arch/arm/kernel/ptrace.c:902 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 65 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 646 560 649 NOTE_INSN_DELETED)

(note 649 646 0 NOTE_INSN_DELETED)


;; Function ptrace_hbptriggered (ptrace_hbptriggered)[0:1550]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 14 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 21 (  2.1)
scanning new insn with uid = 80.
verify found no changes in insn with uid = 80.
deleting insn with uid = 48.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 14 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 21 (  2.1)

Pass 0 for finding allocno costs

    a4 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a10(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a10(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 59(l0): point = 0
   Insn 46(l0): point = 2
   Insn 51(l0): point = 4
   Insn 49(l0): point = 6
   Insn 80(l0): point = 8
   Insn 47(l0): point = 10
   Insn 58(l0): point = 12
   Insn 56(l0): point = 14
   Insn 57(l0): point = 16
   Insn 45(l0): point = 18
   Insn 76(l0): point = 20
   Insn 50(l0): point = 22
   Insn 75(l0): point = 24
   Insn 42(l0): point = 27
   Insn 72(l0): point = 30
   Insn 37(l0): point = 32
   Insn 70(l0): point = 35
   Insn 25(l0): point = 38
   Insn 24(l0): point = 40
   Insn 23(l0): point = 42
   Insn 22(l0): point = 44
   Insn 15(l0): point = 47
   Insn 16(l0): point = 49
   Insn 78(l0): point = 51
   Insn 6(l0): point = 53
   Insn 77(l0): point = 55
   Insn 35(l1): point = 58
   Insn 34(l1): point = 60
   Insn 31(l1): point = 62
   Insn 20(l1): point = 65
   Insn 19(l1): point = 67
   Insn 32(l1): point = 69
   Insn 18(l1): point = 71
 a0(r149): [3..18]
 a1(r151): [5..22]
 a2(r150): [7..8]
 a3(r141): [35..42] [11..32]
 a4(r153): [13..24]
 a5(r142): [23..53]
 a6(r148): [43..44]
 a7(r140): [45..49]
 a8(r137): [47..47]
 a9(r145): [48..55]
 a10(r137): [58..73]
 a11(r140): [58..73]
 a12(r142): [58..73]
 a13(r147): [68..71]
 Rebuilding regno allocno list for 147
Compressing live ranges: from 74 to 25 - 33%
Ranges after the compression:
 a0(r149): [0..6]
 a1(r151): [1..7]
 a2(r150): [2..3]
 a3(r141): [11..12] [4..10]
 a4(r153): [5..9]
 a5(r142): [21..24] [8..19]
 a6(r148): [13..14]
 a7(r140): [21..24] [15..18]
 a8(r137): [21..24] [16..16]
 a9(r145): [17..20]
 a13(r147): [22..23]
+++Allocating 88 bytes for conflict table (uncompressed size 112)
;; a0(r149,l0) conflicts: a1(r151,l0) a2(r150,l0) a3(r141,l0) a4(r153,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r151,l0) conflicts: a0(r149,l0) a2(r150,l0) a3(r141,l0) a4(r153,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r150,l0) conflicts: a0(r149,l0) a1(r151,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a3(r141,l0) conflicts: a0(r149,l0) a1(r151,l0) a4(r153,l0) a5(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a4(r153,l0) conflicts: a0(r149,l0) a1(r151,l0) a3(r141,l0) a5(r142,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a5(r142,l0) conflicts: a3(r141,l0) a4(r153,l0) a6(r148,l0) a7(r140,l0) a8(r137,l0) a9(r145,l0) a13(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r148,l0) conflicts: a5(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r140,l0) conflicts: a5(r142,l0) a8(r137,l0) a9(r145,l0) a13(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r137,l0) conflicts: a5(r142,l0) a7(r140,l0) a13(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r145,l0) conflicts: a5(r142,l0) a7(r140,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a13(r147,l0) conflicts: a5(r142,l0) a7(r140,l0) a8(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a6(r148)<->a7(r140)@125:shuffle
  cp1:a3(r141)<->a6(r148)@125:shuffle
  regions=2, blocks=10, points=25
    allocnos=14, copies=2, conflicts=1, ranges=15

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 5 4 6 3 2
    all: 0r149 1r151 2r150 3r141 4r153 5r142 6r148 7r140 8r137 9r145 13r147
    modified regnos: 137 140 141 142 145 147 148 149 150 151 153
    border:
    Pressure: GENERAL_REGS=6
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 151 of GENERAL_REGS has 3 regs less
    Reg 150 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 2 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
      Pushing a13(r147,l0)
      Pushing a6(r148,l0)
      Pushing a5(r142,l0)
      Pushing a8(r137,l0)
      Pushing a7(r140,l0)
      Pushing a9(r145,l0)
      Pushing a4(r153,l0)
      Pushing a2(r150,l0)
      Pushing a1(r151,l0)
      Pushing a0(r149,l0)
      Pushing a3(r141,l0)
      Popping a3(r141,l0)  -- assign reg 3
      Popping a0(r149,l0)  -- assign reg 12
      Popping a1(r151,l0)  -- assign reg 14
      Popping a2(r150,l0)  -- assign reg 3
      Popping a4(r153,l0)  -- assign reg 2
      Popping a9(r145,l0)  -- assign reg 2
      Popping a7(r140,l0)  -- assign reg 3
      Popping a8(r137,l0)  -- assign reg 2
      Popping a5(r142,l0)  -- assign reg 0
      Popping a6(r148,l0)  -- assign reg 3
      Popping a13(r147,l0)  -- assign reg 1
Disposition:
    8:r137 l0     2    7:r140 l0     3    3:r141 l0     3    5:r142 l0     0
    9:r145 l0     2   13:r147 l0     1    6:r148 l0     3    0:r149 l0    12
    2:r150 l0     3    1:r151 l0    14    4:r153 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=77, live_throughout: 0, 13, dead_or_set: 145
insn=6, live_throughout: 13, 145, dead_or_set: 0, 142
insn=78, live_throughout: 13, 142, dead_or_set: 145
insn=16, live_throughout: 13, 142, 145, dead_or_set: 140
insn=15, live_throughout: 13, 140, 142, dead_or_set: 137, 145
insn=33, live_throughout: 13, 137, 140, 142, dead_or_set: 
insn=18, live_throughout: 13, 137, 140, 142, dead_or_set: 147
insn=32, live_throughout: 13, 140, 142, 147, dead_or_set: 137
insn=19, live_throughout: 13, 137, 140, 142, dead_or_set: 147
insn=20, live_throughout: 13, 137, 140, 142, dead_or_set: 
insn=22, live_throughout: 13, 142, dead_or_set: 140, 148
insn=23, live_throughout: 13, 142, dead_or_set: 141, 148
insn=24, live_throughout: 13, 141, 142, dead_or_set: 
insn=25, live_throughout: 13, 141, 142, dead_or_set: 
insn=70, live_throughout: 13, 141, 142, dead_or_set: 
insn=29, live_throughout: 13, 137, 140, 142, dead_or_set: 
insn=31, live_throughout: 13, 137, 142, dead_or_set: 140
insn=34, live_throughout: 13, 137, 140, 142, dead_or_set: 
insn=35, live_throughout: 13, 137, 140, 142, dead_or_set: 
insn=37, live_throughout: 13, 142, dead_or_set: 141
insn=72, live_throughout: 13, 141, 142, dead_or_set: 
insn=40, live_throughout: 13, 141, 142, dead_or_set: 
insn=42, live_throughout: 13, 142, dead_or_set: 141
insn=43, live_throughout: 13, 141, 142, dead_or_set: 
insn=75, live_throughout: 13, 141, 142, dead_or_set: 153
insn=50, live_throughout: 13, 141, 153, dead_or_set: 142, 151
insn=76, live_throughout: 13, 141, 151, dead_or_set: 153
insn=45, live_throughout: 13, 141, 151, 153, dead_or_set: 149
insn=57, live_throughout: 13, 141, 149, 151, 153, dead_or_set: 1
insn=56, live_throughout: 1, 13, 141, 149, 151, 153, dead_or_set: 0
insn=58, live_throughout: 0, 1, 13, 141, 149, 151, dead_or_set: 2, 153
insn=47, live_throughout: 0, 1, 2, 13, 149, 151, dead_or_set: 141
insn=80, live_throughout: 0, 1, 2, 13, 149, 151, dead_or_set: 150
insn=49, live_throughout: 0, 1, 2, 13, 149, 151, dead_or_set: 150
insn=51, live_throughout: 0, 1, 2, 13, 149, dead_or_set: 151
insn=46, live_throughout: 0, 1, 2, 13, dead_or_set: 149
insn=59, live_throughout: 13, dead_or_set: 0, 1, 2, 14
init_insns for 149: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 80 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 51 (nil))
changing reg in insn 32
changing reg in insn 15
changing reg in insn 32
changing reg in insn 18
changing reg in insn 31
changing reg in insn 16
changing reg in insn 34
changing reg in insn 31
changing reg in insn 22
changing reg in insn 42
changing reg in insn 37
changing reg in insn 23
changing reg in insn 47
changing reg in insn 42
changing reg in insn 24
changing reg in insn 6
changing reg in insn 50
changing reg in insn 19
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 45
changing reg in insn 56
changing reg in insn 46
changing reg in insn 80
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 58
Spilling for insn 77.
Using reg 3 for reload 0
Spilling for insn 75.
Using reg 1 for reload 0
Spilling for insn 47.
Spilling for insn 49.
Spilling for insn 51.
Spilling for insn 46.

Reloads for insn # 77
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 75
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 47
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])

Reloads for insn # 49
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])

Reloads for insn # 51
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])

Reloads for insn # 46
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
deleting insn with uid = 6.


try_optimize_cfg iteration 1

Forwarding edge 4->5 to 9 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 15 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 21 (  2.1)


ptrace_hbptriggered

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={6d,4u} r2={9d,7u} r3={9d,8u} r12={3d,2u} r13={1d,17u} r14={3d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 195{148d,46u,1e} in 34{33 regular + 1 call} insns.
(note 5 0 10 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 10 5 9 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 9 10 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 9 82 2 NOTE_INSN_DELETED)

(insn 82 13 77 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 82 78 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 78 77 16 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 2 r2 [145])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 78 15 2 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 16 33 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [145])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 6 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  6 [96.7%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 33 15 17 3 143 "" [1 uses])

(note 17 33 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 32 3 arch/arm/kernel/ptrace.c:387 (set (reg/f:SI 1 r1 [147])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 18 19 3 arch/arm/kernel/ptrace.c:386 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 19 32 20 3 arch/arm/kernel/ptrace.c:387 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [147])
            (reg/v/f:SI 0 r0 [orig:142 bp ] [142]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 20 19 21 3 arch/arm/kernel/ptrace.c:387 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  6 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 arch/arm/kernel/ptrace.c:370 (set (reg:SI 3 r3 [148])
        (ashift:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 23 22 24 4 arch/arm/kernel/ptrace.c:370 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (plus:SI (reg:SI 3 r3 [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 24 23 25 4 arch/arm/kernel/ptrace.c:371 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:141 num ] [141])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 25 24 69 4 arch/arm/kernel/ptrace.c:371 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  8 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 69 25 70 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(jump_insn 70 69 71 5 (set (pc)
        (label_ref 43)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 71 70 29)

;; Start of basic block ( 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 29 71 30 6 140 "" [1 uses])

(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 34 6 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (plus:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 34 31 35 6 arch/arm/kernel/ptrace.c:386 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 35 34 36 6 arch/arm/kernel/ptrace.c:386 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9673 [0x25c9])
        (nil)))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [96.7%]  (dfs_back)
;; Succ edge  7 [3.3%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  6 [3.3%]  (fallthru,loop_exit)
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 72 7 arch/arm/kernel/ptrace.c:390 discrim 2 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 72 37 73 7 (set (pc)
        (label_ref 43)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 73 72 40)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 40 73 41 8 141 "" [1 uses])

(note 41 40 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 8 arch/arm/kernel/ptrace.c:371 discrim 1 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 3 r3 [orig:141 num ] [141]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 43 42 44 9 142 "" [2 uses])

(note 44 43 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 53 44 54 9 NOTE_INSN_DELETED)

(note 54 53 83 9 NOTE_INSN_DELETED)

(insn 83 54 75 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 75 83 50 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 50 75 76 9 arch/arm/kernel/ptrace.c:395 (set (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:142 bp ] [142])
                (const_int 204 [0xcc])) [0 <variable>.hw.D.25978.D.25977.info.trigger+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (nil)))

(insn 76 50 45 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 2 r2 [153])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 76 57 9 arch/arm/kernel/ptrace.c:392 (set (reg:SI 12 ip [149])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 57 45 56 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 56 57 58 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 0 r0)
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 58 56 47 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [153])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 47 58 80 9 arch/arm/kernel/ptrace.c:393 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg/v:SI 3 r3 [orig:141 num ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 80 47 49 9 arch/arm/kernel/ptrace.c:394 (set (reg:SI 3 r3 [150])
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196612 [0x30004])
        (nil)))

(insn 49 80 51 9 arch/arm/kernel/ptrace.c:394 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196612 [0x30004])
        (nil)))

(insn 51 49 46 9 arch/arm/kernel/ptrace.c:395 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 46 51 59 9 arch/arm/kernel/ptrace.c:392 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(call_insn 59 46 79 9 arch/arm/kernel/ptrace.c:397 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 59 81 NOTE_INSN_DELETED)

(note 81 79 0 NOTE_INSN_DELETED)


;; Function ptrace_break (ptrace_break)[0:1543]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 29.
verify found no changes in insn with uid = 29.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 19(l0): point = 0
   Insn 14(l0): point = 2
   Insn 17(l0): point = 4
   Insn 18(l0): point = 6
   Insn 13(l0): point = 8
   Insn 16(l0): point = 10
   Insn 12(l0): point = 12
   Insn 29(l0): point = 14
   Insn 2(l0): point = 16
   Insn 10(l0): point = 18
   Insn 9(l0): point = 20
   Insn 8(l0): point = 22
   Insn 7(l0): point = 24
 a0(r138): [3..8]
 a1(r133): [7..16]
 a2(r135): [11..24]
 a3(r137): [13..14]
 a4(r136): [19..20]
Compressing live ranges: from 27 to 10 - 37%
Ranges after the compression:
 a0(r138): [0..2]
 a1(r133): [1..6]
 a2(r135): [3..9]
 a3(r137): [4..5]
 a4(r136): [7..8]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r138,l0) conflicts: a1(r133,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r133,l0) conflicts: a0(r138,l0) a2(r135,l0) a3(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r135,l0) conflicts: a1(r133,l0) a3(r137,l0) a4(r136,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a3(r137,l0) conflicts: a1(r133,l0) a2(r135,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a4(r136,l0) conflicts: a2(r135,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  regions=1, blocks=3, points=10
    allocnos=5, copies=0, conflicts=2, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r138 1r133 2r135 3r137 4r136
    modified regnos: 133 135 136 137 138
    border:
    Pressure: GENERAL_REGS=4
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
      Pushing a3(r137,l0)
      Pushing a4(r136,l0)
      Pushing a1(r133,l0)
      Pushing a2(r135,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 3
      Popping a2(r135,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 2
      Popping a4(r136,l0)  -- assign reg 2
      Popping a3(r137,l0)  -- assign reg 0
Disposition:
    1:r133 l0     2    2:r135 l0     3    4:r136 l0     2    3:r137 l0     0
    0:r138 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 135
insn=8, live_throughout: 0, 1, 13, 135, dead_or_set: 
insn=9, live_throughout: 0, 1, 13, 135, dead_or_set: 136
insn=10, live_throughout: 0, 1, 13, 135, dead_or_set: 136
insn=2, live_throughout: 1, 13, 135, dead_or_set: 0, 133
insn=29, live_throughout: 1, 13, 133, 135, dead_or_set: 137
insn=12, live_throughout: 1, 13, 133, 135, dead_or_set: 137
insn=16, live_throughout: 1, 13, 133, dead_or_set: 0, 135
insn=13, live_throughout: 0, 13, 133, dead_or_set: 1, 138
insn=18, live_throughout: 0, 13, 138, dead_or_set: 2, 133
insn=17, live_throughout: 0, 2, 13, 138, dead_or_set: 1
insn=14, live_throughout: 0, 1, 2, 13, dead_or_set: 138
insn=19, live_throughout: 13, dead_or_set: 0, 1, 2, 14
init_insns for 135: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 136: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 14 (nil))
changing reg in insn 2
changing reg in insn 18
changing reg in insn 7
changing reg in insn 16
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 29
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
Spilling for insn 8.
Spilling for insn 10.
Spilling for insn 12.
Spilling for insn 14.

Reloads for insn # 8
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
deleting insn with uid = 18.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ptrace_break

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={4d,3u} r1={3d,2u} r2={4d,2u} r3={4d,3u} r12={2d} r13={1d,8u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 151{131d,19u,1e} in 12{11 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 7 2 NOTE_INSN_DELETED)

(insn 7 15 8 2 arch/arm/kernel/ptrace.c:201 (set (reg:SI 3 r3 [135])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 8 7 9 2 arch/arm/kernel/ptrace.c:201 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/ptrace.c:202 (set (reg:SI 2 r2 [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 10 9 2 2 arch/arm/kernel/ptrace.c:202 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg:SI 2 r2 [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 2 10 29 2 arch/arm/kernel/ptrace.c:198 (set (reg/v/f:SI 2 r2 [orig:133 tsk ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (nil))

(insn 29 2 12 2 arch/arm/kernel/ptrace.c:203 (set (reg:SI 0 r0 [137])
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(insn 12 29 16 2 arch/arm/kernel/ptrace.c:203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 0 r0 [137])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196609 [0x30001])
        (nil)))

(insn 16 12 13 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 13 16 17 2 arch/arm/kernel/ptrace.c:204 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (nil)))

(insn 17 13 14 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 14 17 19 2 arch/arm/kernel/ptrace.c:204 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn 19 14 28 2 arch/arm/kernel/ptrace.c:206 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 28 19 30 NOTE_INSN_DELETED)

(note 30 28 0 NOTE_INSN_DELETED)


;; Function break_trap (break_trap)[0:1544]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 23(l0): point = 0
   Insn 17(l0): point = 2
   Insn 12(l0): point = 4
   Insn 10(l0): point = 6
   Insn 11(l0): point = 8
   Insn 28(l0): point = 10
   Insn 2(l0): point = 12
   Insn 27(l0): point = 14
 a0(r137): [7..14]
 a1(r135): [9..12]
Compressing live ranges: from 17 to 4 - 23%
Ranges after the compression:
 a0(r137): [0..3]
 a1(r135): [1..2]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r137,l0) conflicts: a1(r135,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a1(r135,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=2, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r137 1r135
    modified regnos: 135 137
    border:
    Pressure: GENERAL_REGS=3
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a1(r135,l0)
      Pushing a0(r137,l0)
      Popping a0(r137,l0)  -- assign reg 3
      Popping a1(r135,l0)  -- assign reg 1
Disposition:
    1:r135 l0     1    0:r137 l0     3
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=27, live_throughout: 0, 13, dead_or_set: 137
insn=2, live_throughout: 13, 137, dead_or_set: 0, 135
insn=28, live_throughout: 13, 135, dead_or_set: 137
insn=11, live_throughout: 13, 137, dead_or_set: 1, 135
insn=10, live_throughout: 1, 13, dead_or_set: 0, 137
insn=12, live_throughout: 13, dead_or_set: 0, 1, 14
insn=17, live_throughout: 13, 14, dead_or_set: 0
insn=23, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 2
changing reg in insn 11
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 10
Spilling for insn 27.
Using reg 2 for reload 0
Spilling for insn 27.
Using reg 2 for reload 0

Reloads for insn # 27
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


break_trap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 143{130d,13u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 13 2 NOTE_INSN_DELETED)

(note 13 8 31 2 NOTE_INSN_DELETED)

(insn 31 13 27 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 27 31 2 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 27 28 2 arch/arm/kernel/ptrace.c:210 (set (reg/v/f:SI 1 r1 [orig:135 regs ] [135])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 28 2 10 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 10 28 12 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 12 10 17 2 arch/arm/kernel/ptrace.c:211 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_break") [flags 0x3] <function_decl 0x11539900 ptrace_break>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 12 23 2 arch/arm/kernel/ptrace.c:213 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 17 29 2 arch/arm/kernel/ptrace.c:213 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 29 23 30 NOTE_INSN_DELETED)

(note 30 29 0 NOTE_INSN_DELETED)


;; Function flush_ptrace_hw_breakpoint (flush_ptrace_hw_breakpoint)[0:1552]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 14 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a5 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 15(l0): point = 1
   Insn 2(l0): point = 3
   Insn 7(l0): point = 5
   Insn 23(l1): point = 8
   Insn 20(l1): point = 10
   Insn 22(l1): point = 12
   Insn 16(l1): point = 15
   Insn 14(l1): point = 17
   Insn 11(l1): point = 20
   Insn 13(l1): point = 22
   Insn 10(l1): point = 24
   Insn 19(l1): point = 26
   Insn 9(l1): point = 28
 a0(r138): [1..1]
 a1(r134): [1..5]
 a2(r133): [1..3]
 a3(r133): [8..30]
 a4(r134): [8..30]
 a5(r138): [8..30]
 a6(r135): [23..28]
 Rebuilding regno allocno list for 135
Compressing live ranges: from 31 to 7 - 22%
Ranges after the compression:
 a0(r138): [3..6] [0..0]
 a1(r134): [3..6] [0..2]
 a2(r133): [3..6] [0..1]
 a6(r135): [4..5]
+++Allocating 32 bytes for conflict table (uncompressed size 56)
;; a0(r138,l0) conflicts: a1(r134,l0) a2(r133,l0) a6(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r134,l0) conflicts: a0(r138,l0) a2(r133,l0) a6(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r133,l0) conflicts: a0(r138,l0) a1(r134,l0) a6(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a6(r135,l0) conflicts: a0(r138,l0) a1(r134,l0) a2(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=2, blocks=7, points=7
    allocnos=7, copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r138 1r134 2r133 6r135
    modified regnos: 133 134 135 138
    border:
    Pressure: GENERAL_REGS=5
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a6(r135,l0)
      Pushing a0(r138,l0)
      Pushing a2(r133,l0)
      Pushing a1(r134,l0)
      Popping a1(r134,l0)  -- assign reg 4
      Popping a2(r133,l0)  -- assign reg 5
      Popping a0(r138,l0)  -- assign reg 6
      Popping a6(r135,l0)  -- assign reg 0
Disposition:
    2:r133 l0     5    1:r134 l0     4    6:r135 l0     0    0:r138 l0     6
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 134
insn=2, live_throughout: 13, 14, 134, dead_or_set: 0, 133
insn=15, live_throughout: 13, 14, 133, 134, dead_or_set: 138
insn=21, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 
insn=9, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 135
insn=19, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 134
insn=10, live_throughout: 13, 14, 133, 134, 135, 138, dead_or_set: 
insn=13, live_throughout: 13, 14, 24, 133, 134, 138, dead_or_set: 0, 135
insn=11, live_throughout: 0, 13, 14, 133, 134, 138, dead_or_set: 
insn=14, live_throughout: 13, 133, 134, 138, dead_or_set: 0, 14
insn=16, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 
insn=17, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 
insn=22, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 
insn=20, live_throughout: 13, 14, 24, 134, 138, dead_or_set: 133
insn=23, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 
init_insns for 135: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 15 (nil))
changing reg in insn 2
changing reg in insn 20
changing reg in insn 16
changing reg in insn 20
changing reg in insn 9
changing reg in insn 9
changing reg in insn 19
changing reg in insn 7
changing reg in insn 15
changing reg in insn 22
changing reg in insn 19
changing reg in insn 9
changing reg in insn 13
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
Spilling for insn 16.

Reloads for insn # 16
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                                                        (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                                                        (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
deleting insn with uid = 13.


try_optimize_cfg iteration 1

Deleting fallthru block 6.
deleting insn with uid = 31.
deleting block 6


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 13 (  2.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


flush_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r3={2d} r4={2d,3u} r5={2d,3u,1d} r6={1d,1u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 152{132d,19u,1e} in 12{11 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 2 2 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 2 7 15 2 arch/arm/kernel/ptrace.c:415 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (nil))

(insn 15 2 21 2 arch/arm/kernel/ptrace.c:422 (set (reg:SI 6 r6 [138])
        (reg/v:SI 4 r4 [orig:134 i ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [96.9%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 21 15 8 3 156 "" [1 uses])

(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 19 3 arch/arm/kernel/ptrace.c:420 (set (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
        (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (nil)))

(insn 19 9 10 3 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 10 19 11 3 arch/arm/kernel/ptrace.c:420 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 3 arch/arm/kernel/ptrace.c:420 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 14 12 16 4 arch/arm/kernel/ptrace.c:421 (parallel [
            (call (mem:SI (symbol_ref:SI ("unregister_hw_breakpoint") [flags 0x41] <function_decl 0x11524a00 unregister_hw_breakpoint>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 16 14 17 4 arch/arm/kernel/ptrace.c:422 (set (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 17 16 18 5 155 "" [1 uses])

(note 18 17 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 22 18 20 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 22 23 5 arch/arm/kernel/ptrace.c:419 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 23 20 35 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
        (nil)))
;; End of basic block 5 -> ( 3 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [96.9%]  (dfs_back)
;; Succ edge  EXIT [3.1%]  (fallthru,loop_exit)

(note 35 23 36 NOTE_INSN_DELETED)

(note 36 35 0 NOTE_INSN_DELETED)


;; Function regs_query_register_offset (regs_query_register_offset)[0:1536]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 17 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 20 (  2.2)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a4 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 45(l0): point = 0
   Insn 39(l0): point = 2
   Insn 32(l0): point = 5
   Insn 51(l0): point = 8
   Insn 19(l0): point = 10
   Insn 49(l0): point = 13
   Insn 6(l0): point = 15
   Insn 2(l0): point = 17
   Insn 30(l1): point = 20
   Insn 29(l1): point = 22
   Insn 11(l1): point = 24
   Insn 27(l1): point = 26
   Insn 12(l1): point = 28
   Insn 24(l1): point = 31
   Insn 17(l1): point = 34
   Insn 16(l1): point = 36
   Insn 13(l1): point = 38
 a0(r134): [8..10] [3..5]
 a1(r133): [11..15]
 a2(r138): [13..17]
 a3(r133): [20..40]
 a4(r138): [20..40]
 a5(r136): [23..26]
 Rebuilding regno allocno list for 136
Compressing live ranges: from 41 to 12 - 29%
Ranges after the compression:
 a0(r134): [2..3] [0..1]
 a1(r133): [8..11] [4..6]
 a2(r138): [8..11] [5..7]
 a5(r136): [9..10]
+++Allocating 24 bytes for conflict table (uncompressed size 48)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts: a2(r138,l0) a5(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r138,l0) conflicts: a1(r133,l0) a5(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r136,l0) conflicts: a1(r133,l0) a2(r138,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  regions=2, blocks=9, points=12
    allocnos=6, copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 4 6 5 3 2
    all: 0r134 1r133 2r138 5r136
    modified regnos: 133 134 136 138
    border:
    Pressure: GENERAL_REGS=6
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
      Pushing a0(r134,l0)
      Pushing a2(r138,l0)
      Pushing a5(r136,l0)
      Pushing a1(r133,l0)
      Popping a1(r133,l0)  -- assign reg 4
      Popping a5(r136,l0)  -- assign reg 3
      Popping a2(r138,l0)  -- assign reg 5
      Popping a0(r134,l0)  -- assign reg 0
Disposition:
    1:r133 l0     4    0:r134 l0     0    5:r136 l0     3    2:r138 l0     5
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 138
insn=6, live_throughout: 13, 14, 138, dead_or_set: 133
insn=49, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=28, live_throughout: 0, 1, 13, 133, 138, dead_or_set: 
insn=13, live_throughout: 13, 133, 138, dead_or_set: 0, 1, 14
insn=16, live_throughout: 13, 14, 133, 138, dead_or_set: 0
insn=17, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 133, 134
insn=51, live_throughout: 13, 14, 134, dead_or_set: 
insn=22, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=24, live_throughout: 13, 14, 138, dead_or_set: 133
insn=25, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=12, live_throughout: 13, 14, 133, 138, dead_or_set: 1
insn=27, live_throughout: 1, 13, 14, 133, 138, dead_or_set: 136
insn=11, live_throughout: 1, 13, 14, 133, 136, 138, dead_or_set: 0
insn=29, live_throughout: 0, 1, 13, 14, 133, 138, dead_or_set: 136
insn=30, live_throughout: 0, 1, 13, 14, 133, 138, dead_or_set: 
insn=32, live_throughout: 13, 14, dead_or_set: 134
insn=33, live_throughout: 13, 14, 134, dead_or_set: 
insn=39, live_throughout: 13, 14, dead_or_set: 0, 134
insn=45, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 27 (nil))
changing reg in insn 6
changing reg in insn 24
changing reg in insn 27
changing reg in insn 24
changing reg in insn 19
changing reg in insn 27
changing reg in insn 32
changing reg in insn 19
changing reg in insn 39
changing reg in insn 27
changing reg in insn 29
changing reg in insn 11
changing reg in insn 2
changing reg in insn 12
deleting insn with uid = 39.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 17 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 20 (  2.2)


regs_query_register_offset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={3d,2u} r4={2d,3u,1d} r5={1d,1u} r12={2d} r13={1d,9u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 159{134d,24u,1e} in 16{15 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/ptrace.c:95 (set (reg/v/f:SI 5 r5 [orig:138 name ] [138])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 49 2 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 49 6 50 2 arch/arm/kernel/ptrace.c:97 (set (pc)
        (label_ref 25)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 50 49 28)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 28 50 10 3 163 "" [1 uses])

(note 10 28 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 10 13 3 NOTE_INSN_DELETED)

(call_insn/i 13 14 16 3 arch/arm/kernel/ptrace.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 13 17 3 arch/arm/kernel/ptrace.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 arch/arm/kernel/ptrace.c:98 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 51 4 arch/arm/kernel/ptrace.c:99 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 51 19 52 4 arch/arm/kernel/ptrace.c:99 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 52 51 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 22 52 23 5 161 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 5 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 25 24 26 6 160 "" [1 uses])

(note 26 25 12 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 12 26 27 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:138 name ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 27 12 11 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 11 27 29 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 29 11 30 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 7 arch/arm/kernel/ptrace.c:100 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 33 32 34 8 162 "" [1 uses])

(note 34 33 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 45 34 53 8 arch/arm/kernel/ptrace.c:101 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 53 45 54 NOTE_INSN_DELETED)

(note 54 53 0 NOTE_INSN_DELETED)

