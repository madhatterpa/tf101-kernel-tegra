
;; Function armpmu_get_pmu_id (armpmu_get_pmu_id)[0:1305]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 57 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->     6 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  6-->    10 (!cc) r0=0xffffffffffffffed       :cortex_a8_default
;;	  7-->    15 (cc) r0=[r3]                      :cortex_a8_load_store_1
;;	  7-->    28 use r0                            :nothing
;;	  8-->    57 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 5
;;   new tail = 57





armpmu_get_pmu_id

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d} r2={1d} r3={3d,3u} r13={1d,2u} r14={1d,1u} r24={1d,2u} 
;;    total ref usage 23{11d,12u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 54 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 54 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 54 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 7 6 10 2 arch/arm/kernel/perf_event.c:100 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 10 7 15 2 arch/arm/kernel/perf_event.c:98 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 id ] [133])
            (const_int -19 [0xffffffffffffffed]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int -19 [0xffffffffffffffed])
        (nil)))

(insn:TI 15 10 28 2 arch/arm/kernel/perf_event.c:101 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 id ] [133])
            (mem/s/j:SI (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134]) [0 <variable>.id+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
            (nil))))

(insn 28 15 57 2 arch/arm/kernel/perf_event.c:104 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 57 28 56 2 arch/arm/kernel/perf_event.c:104 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 56 57 52)

(note 52 56 53 NOTE_INSN_DELETED)

(note 53 52 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_get_max_events (armpmu_get_max_events)[0:1306]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 38 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->     6 r0=[r3]                           :cortex_a8_load_store_1
;;	  5-->     7 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  7-->    15 (cc) r0=[r0+0x38]                 :cortex_a8_load_store_1
;;	  7-->    28 use r0                            :nothing
;;	  8-->    38 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 5
;;   new tail = 38





armpmu_get_max_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 20{10d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 36 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 7 6 15 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 15 7 28 2 arch/arm/kernel/perf_event.c:113 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:133 max_events ] [133])
            (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
                    (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 28 15 38 2 arch/arm/kernel/perf_event.c:116 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 38 28 37 2 arch/arm/kernel/perf_event.c:116 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 37 38 34)

(note 34 37 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function perf_num_counters (perf_num_counters)[0:1307]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 38 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->     6 r0=[r3]                           :cortex_a8_load_store_1
;;	  5-->     7 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  7-->    15 (cc) r0=[r0+0x38]                 :cortex_a8_load_store_1
;;	  7-->    28 use r0                            :nothing
;;	  8-->    38 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 5
;;   new tail = 38





perf_num_counters

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 20{10d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 36 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 7 6 15 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 15 7 28 2 arch/arm/kernel/perf_event.c:113 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 max_events ] [134])
            (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
                    (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 28 15 38 2 arch/arm/kernel/perf_event.c:122 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 38 28 37 2 arch/arm/kernel/perf_event.c:122 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 37 38 34)

(note 34 37 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_event_update (armpmu_event_update)[0:1312]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 17 (  1.7)


armpmu_event_update

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,11u} r1={9d,13u} r2={9d,15u} r3={10d,11u} r4={2d,5u} r5={2d,5u} r6={4d,8u,1d} r7={4d,7u} r8={5d,8u} r9={5d,4u} r10={2d,4u} r11={2d,4u} r12={2d,1u} r13={2d,14u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={11d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 310{189d,120u,1e} in 50{49 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 6 2 5 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 11 [fp]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 3 4 )->[4]->( 4 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 4 )->[5]->( 3 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 )->[6]->( 3 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 8 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(1){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 109 to worklist
  Adding insn 21 to worklist
  Adding insn 93 to worklist
  Adding insn 18 to worklist
  Adding insn 13 to worklist
  Adding insn 26 to worklist
  Adding insn 23 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 33 to worklist
  Adding insn 41 to worklist
  Adding insn 112 to worklist
  Adding insn 68 to worklist
  Adding insn 57 to worklist
  Adding insn 55 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 76 to worklist
  Adding insn 77 to worklist
  Adding insn 56 to worklist
  Adding insn 54 to worklist
  Adding insn 51 to worklist
processing block 8 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 95 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 91 to worklist
  Adding insn 40 to worklist
processing block 6 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 32 to worklist
processing block 5 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 30 to worklist
processing block 4 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 25 to worklist
  Adding insn 94 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 20 to worklist
  Adding insn 17 to worklist
  Adding insn 15 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
  Adding insn 10 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 2 to worklist
  Adding insn 14 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 109 to 10 -- after reload
;;   ======================================================

;;	  0-->   109 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->    14 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->     3 r4=r1                             :cortex_a8_default
;;	  2-->     2 r5=r0                             :cortex_a8_default
;;	  3-->     4 r7=r2                             :cortex_a8_default
;;	  3-->     5 r9=r3                             :cortex_a8_default
;;	  4-->    10 r8=r1+0x50                        :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 109
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 13 to 21 -- after reload
;;   ======================================================

;;	  0-->    13 sl=asm_operands                   :nothing
;;	  1-->    15 r3=[r6]                           :cortex_a8_load_store_1
;;	  1-->    17 r0=r7                             :cortex_a8_default
;;	  2-->    18 r0=call [[r3+0x18]]               :cortex_a8_issue_branch
;;	 34-->    20 r2=zxn(r0)                        :cortex_a8_default
;;	 34-->    93 [sp]=r2                           :cortex_a8_load_store_1
;;	 35-->    21 {asm_operands;clobber [scratch];} :nothing
;;	Ready list (final):  
;;   total time = 35
;;   new head = 13
;;   new tail = 21

;;   ======================================================
;;   -- basic block 4 from 94 to 26 -- after reload
;;   ======================================================

;;	  0-->    94 r0=[sp]                           :cortex_a8_load_store_1
;;	  1-->    23 {ip=asm_operands;r2=asm_operands;[:nothing
;;	  2-->    25 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  4-->    26 pc={(cc!=0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 94
;;   new tail = 26

;;   ======================================================
;;   -- basic block 5 from 28 to 31 -- after reload
;;   ======================================================

;;	  0-->    28 {asm_operands;clobber [scratch];} :nothing
;;	  1-->    30 cc=cmp(r2,sl)                     :cortex_a8_default
;;	  3-->    31 pc={(cc!=0x0)?L87:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 28
;;   new tail = 31

;;   ======================================================
;;   -- basic block 6 from 32 to 33 -- after reload
;;   ======================================================

;;	  0-->    32 cc=cmp(r3,fp)                     :cortex_a8_default
;;	  2-->    33 pc={(cc!=0x0)?L87:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 32
;;   new tail = 33

;;   ======================================================
;;   -- basic block 7 from 40 to 41 -- after reload
;;   ======================================================

;;	  0-->    91 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    40 cc=cmp(r9,0x0)                    :cortex_a8_default
;;	  1-->    95 r6=[sp]                           :cortex_a8_load_store_1
;;	  3-->    36 r1=[r1]                           :cortex_a8_load_store_1
;;	  6-->    37 r0=[r1+0x40]                      :cortex_a8_load_store_1
;;	  8-->   105 r6=r6&r0                          :cortex_a8_default
;;	  8-->   106 r7=r7&r1                          :cortex_a8_default
;;	  9-->   107 r8=r2&r0                          :cortex_a8_default
;;	  9-->   108 r9=r3&r1                          :cortex_a8_default
;;	 10-->    97 (!cc) r2=r6                       :cortex_a8_default
;;	 10-->    98 (!cc) r3=r7                       :cortex_a8_default
;;	 11-->    41 pc={(cc==0x0)?L116:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 40
;;   new tail = 41

;;   ======================================================
;;   -- basic block 8 from 99 to 104 -- after reload
;;   ======================================================

;;	  0-->    99 r2=0x1                            :cortex_a8_default
;;	  0-->   100 r3=0x0                            :cortex_a8_default
;;	  1-->   101 {cc=cmp(r2+r0,r2);r2=r2+r0;}      :cortex_a8_default
;;	  2-->   102 r3=ltu(cc,0x0)+r3+r1              :cortex_a8_default
;;	  2-->   103 {cc=cmp(r2+r6,r2);r2=r2+r6;}      :cortex_a8_default
;;	  3-->   104 r3=ltu(cc,0x0)+r3+r7              :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 99
;;   new tail = 104

;;   ======================================================
;;   -- basic block 9 from 51 to 112 -- after reload
;;   ======================================================

;;	  0-->    51 {r2=r2-r8;clobber cc;}            :cortex_a8_default
;;	  0-->    54 r1=r5+0x38                        :cortex_a8_default
;;	  1-->    55 {r8=asm_operands;r0=asm_operands;[:nothing
;;	  2-->    56 r1=r4+0x68                        :cortex_a8_default
;;	  3-->    57 {r8=asm_operands;r0=asm_operands;[:nothing
;;	  4-->    77 r1=r7                             :cortex_a8_default
;;	  4-->    76 r0=r6                             :cortex_a8_default
;;	  5-->    68 use r0                            :nothing
;;	  5-->   112 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 5
;;   new head = 51
;;   new tail = 112





armpmu_event_update

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,11u} r1={9d,13u} r2={9d,15u} r3={10d,11u} r4={2d,5u} r5={2d,5u} r6={4d,8u,1d} r7={4d,7u} r8={5d,8u} r9={5d,4u} r10={2d,4u} r11={2d,4u} r12={2d,1u} r13={2d,14u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={11d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 310{189d,120u,1e} in 50{49 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 6 109 2 ("again") NOTE_INSN_DELETED_LABEL 20)

(insn/f:TI 109 8 110 2 arch/arm/kernel/perf_event.c:209 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 sl)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                    (set/f (reg/f:SI 13 sp)
                                                        (plus:SI (reg/f:SI 13 sp)
                                                            (const_int -48 [0xffffffffffffffd0])))
                                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                        (reg:SI 0 r0))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 4 [0x4])) [0 S4 A32])
                                                        (reg:SI 1 r1))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 8 [0x8])) [0 S4 A32])
                                                        (reg:SI 2 r2))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 12 [0xc])) [0 S4 A32])
                                                        (reg:SI 4 r4))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 16 [0x10])) [0 S4 A32])
                                                        (reg:SI 5 r5))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 20 [0x14])) [0 S4 A32])
                                                        (reg:SI 6 r6))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 24 [0x18])) [0 S4 A32])
                                                        (reg:SI 7 r7))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 28 [0x1c])) [0 S4 A32])
                                                        (reg:SI 8 r8))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 32 [0x20])) [0 S4 A32])
                                                        (reg:SI 9 r9))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 36 [0x24])) [0 S4 A32])
                                                        (reg:SI 10 sl))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 40 [0x28])) [0 S4 A32])
                                                        (reg:SI 11 fp))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 44 [0x2c])) [0 S4 A32])
                                                        (reg:SI 14 lr))
                                                ])
                                            (nil))))))))))))

(note 110 109 14 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 14 110 3 2 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 6 r6 [167])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 3 14 2 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
        (reg:SI 1 r1 [ hwc ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 4 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 5 r5 [orig:151 event ] [151])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(insn:TI 4 2 5 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 7 r7 [orig:153 idx ] [153])
        (reg:SI 2 r2 [ idx ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ idx ])
        (nil)))

(insn 5 4 10 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 9 r9 [orig:154 overflow ] [154])
        (reg:SI 3 r3 [ overflow ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ overflow ])
        (nil)))

(insn:TI 10 5 87 2 arch/arm/kernel/perf_event.c:213 (set (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
        (plus:SI (reg/f:SI 1 r1 [orig:152 hwc ] [152])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:152 hwc ] [152])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 6 2 5) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 11 [fp]
;; live  kill	 14 [lr]

;; Pred edge  6 [71.0%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  5 [71.0%]  (dfs_back)
(code_label 87 10 86 3 29 "" [2 uses])

(note 86 87 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 86 19 3 NOTE_INSN_DELETED)

(note 19 16 13 3 NOTE_INSN_DELETED)

(insn:TI 13 19 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                (mem/s/j:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(insn:TI 15 13 17 3 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 17 15 18 3 arch/arm/kernel/perf_event.c:214 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:153 idx ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 18 17 20 3 arch/arm/kernel/perf_event.c:214 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
                                (const_int 24 [0x18])) [0 <variable>.read_counter+0 S4 A64]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 20 18 93 3 arch/arm/kernel/perf_event.c:214 (set (reg:DI 2 r2)
        (zero_extend:DI (reg:SI 0 r0))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 93 20 21 3 arch/arm/kernel/perf_event.c:214 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn:TI 21 93 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:356 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2641905)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  4 [86.0%]  (dfs_back)
(code_label 24 21 22 4 21 "" [1 uses])

(note 22 24 94 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 22 23 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (set (reg:DI 0 r0)
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 23 94 25 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (parallel [
            (set (reg/v:SI 12 ip [orig:142 res ] [142])
                (asm_operands/v:SI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 0 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (reg/v:DI 2 r2 [orig:141 oldval ] [141])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 1 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=Qo") 2 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 25 23 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:142 res ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:142 res ] [142])
        (nil)))

(jump_insn:TI 26 25 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 4 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [86.0%]  (dfs_back)
;; Succ edge  5 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 30 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:370 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2643697)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 30 28 31 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 oldval ] [141])
            (reg:SI 10 sl [orig:133 prev_raw_count.501 ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 31 30 70 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  6 [29.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [29.0%]  (fallthru)
(note 70 31 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 70 33 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ oldval+4 ])
            (reg:SI 11 fp [ prev_raw_count.501+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 33 32 34 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  7 [29.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  6 [29.0%]  (fallthru,loop_exit)
(note 34 33 91 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 34 40 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 40 91 95 7 arch/arm/kernel/perf_event.c:223 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 9 r9 [orig:154 overflow ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 9 r9 [orig:154 overflow ] [154])
        (nil)))

(insn:TI 95 40 36 7 arch/arm/kernel/perf_event.c:220 (set (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 36 95 37 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [158]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 37 36 105 7 arch/arm/kernel/perf_event.c:220 (set (reg:DI 0 r0 [orig:147 D.25235 ] [147])
        (mem/s/j:DI (plus:SI (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 105 37 106 7 arch/arm/kernel/perf_event.c:220 (set (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (and:SI (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])
            (reg:SI 0 r0 [orig:147 D.25235 ] [147]))) 67 {*arm_andsi3_insn} (nil))

(insn 106 105 107 7 arch/arm/kernel/perf_event.c:220 (set (reg:SI 7 r7 [ new_raw_count.500+4 ])
        (and:SI (reg:SI 7 r7 [ new_raw_count.500+4 ])
            (reg:SI 1 r1 [ D.25235+4 ]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 107 106 108 7 arch/arm/kernel/perf_event.c:221 (set (reg:SI 8 r8 [orig:145 prev_raw_count ] [145])
        (and:SI (reg:SI 2 r2 [orig:141 oldval ] [141])
            (reg:SI 0 r0 [orig:147 D.25235 ] [147]))) 67 {*arm_andsi3_insn} (nil))

(insn 108 107 97 7 arch/arm/kernel/perf_event.c:221 (set (reg:SI 9 r9 [ prev_raw_count+4 ])
        (and:SI (reg:SI 3 r3 [ oldval+4 ])
            (reg:SI 1 r1 [ D.25235+4 ]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 97 108 98 7 arch/arm/kernel/perf_event.c:226 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [orig:146 delta ] [146])
            (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134]))) 2345 {neon_vornv2di+78} (nil))

(insn 98 97 41 7 arch/arm/kernel/perf_event.c:226 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [ delta+4 ])
            (reg:SI 7 r7 [ new_raw_count.500+4 ]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 41 98 42 7 arch/arm/kernel/perf_event.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  9 [61.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [39.0%]  (fallthru)
(note 42 41 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 99 42 100 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 2 r2 [orig:146 delta ] [146])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 100 99 101 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 101 100 102 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                        (reg:SI 0 r0 [orig:147 D.25235 ] [147]))
                    (reg:SI 2 r2 [orig:146 delta ] [146])))
            (set (reg:SI 2 r2 [orig:146 delta ] [146])
                (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                    (reg:SI 0 r0 [orig:147 D.25235 ] [147])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:147 D.25235 ] [147])
        (nil)))

(insn:TI 102 101 103 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ delta+4 ])
                (reg:SI 1 r1 [ D.25235+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [ D.25235+4 ])
            (nil))))

(insn 103 102 104 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                        (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134]))
                    (reg:SI 2 r2 [orig:146 delta ] [146])))
            (set (reg:SI 2 r2 [orig:146 delta ] [146])
                (plus:SI (reg:SI 2 r2 [orig:146 delta ] [146])
                    (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn:TI 104 103 116 8 arch/arm/kernel/perf_event.c:224 (set (reg:SI 3 r3 [ delta+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ delta+4 ])
                (reg:SI 7 r7 [ new_raw_count.500+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  7 [61.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 116 104 114 9 30 "" [1 uses])

(note 114 116 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 114 54 9 arch/arm/kernel/perf_event.c:226 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (minus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg/v:DI 8 r8 [orig:145 prev_raw_count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 54 51 55 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:284 (set (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
        (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn:TI 55 54 56 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:276 (parallel [
            (set (reg/v:DI 8 r8 [orig:139 result ] [139])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (reg/v:SI 0 r0 [orig:140 tmp ] [140])
                (asm_operands/v:SI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                        (const_int 56 [0x38])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:140 tmp ] [140])
                (expr_list:REG_UNUSED (reg/v:DI 8 r8 [orig:139 result ] [139])
                    (nil))))))

(insn:TI 56 55 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:324 (set (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn:TI 57 56 77 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:316 (parallel [
            (set (reg/v:DI 8 r8 [orig:136 result ] [136])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (reg/v:SI 0 r0 [orig:137 tmp ] [137])
                (asm_operands/v:SI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                        (const_int 104 [0x68])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:137 tmp ] [137])
                (nil)))))

(insn:TI 77 57 76 9 arch/arm/kernel/perf_event.c:232 (set (reg:SI 1 r1 [+4 ])
        (reg:SI 7 r7 [ new_raw_count.500+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 76 77 68 9 arch/arm/kernel/perf_event.c:232 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 68 76 111 9 arch/arm/kernel/perf_event.c:232 (use (reg/i:DI 0 r0)) -1 (nil))

(note 111 68 112 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 112 111 113 9 arch/arm/kernel/perf_event.c:232 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 113 112 90)

(note 90 113 92 NOTE_INSN_DELETED)

(note 92 90 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_read (armpmu_read)[0:1313]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 4 n_edges 4 count 5 (  1.2)


armpmu_read

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d,3u} r1={3d,1u} r2={3d,2u} r3={3d,1u} r12={1d} r13={1d,4u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 7{6 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

( 0 )->[2]->( 1 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]

( 2 )->[3]->( 1 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 3 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 15 to worklist
  Adding insn 32 to worklist
Finished finding needed instructions:
processing block 3 lr out =  13 [sp] 14 [lr]
  Adding insn 14 to worklist
  Adding insn 12 to worklist
processing block 2 lr out =  0 [r0] 2 [r2] 13 [sp] 14 [lr]
  Adding insn 7 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 4 n_edges 4 count 6 (  1.5)
;;   ======================================================
;;   -- basic block 2 from 6 to 8 -- after reload
;;   ======================================================

;;	  0-->     6 r2=[r0+0xe0]                      :cortex_a8_load_store_1
;;	  2-->     7 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->     8 pc={(cc<0x0)?return:pc}           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 6
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 12 to 15 -- after reload
;;   ======================================================

;;	  0-->    12 r1=r0+0xc8                        :cortex_a8_default
;;	  0-->    14 r3=0x0                            :cortex_a8_default
;;	  1-->    32 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  2-->    15 r0=call [`armpmu_event_update']   :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 12
;;   new tail = 15





armpmu_read

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d,3u} r1={3d,1u} r2={3d,2u} r3={3d,1u} r12={1d} r13={1d,4u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 28 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 28 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 arch/arm/kernel/perf_event.c:240 (set (reg:SI 2 r2 [orig:133 D.25248 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 6 8 2 arch/arm/kernel/perf_event.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.25248 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:240 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  EXIT [36.7%] 
;; Succ edge  3 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [63.3%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 10 9 12 3 NOTE_INSN_DELETED)

(insn:TI 12 10 14 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 14 12 31 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 31 14 32 3 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 32 31 15 3 arch/arm/kernel/perf_event.c:244 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 15 32 16 3 arch/arm/kernel/perf_event.c:243 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 15 26)

(note 26 16 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_stop (armpmu_stop)[0:1314]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 43 to 10 -- after reload
;;   ======================================================

;;	  0-->    41 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    43 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->     2 r4=r0                             :cortex_a8_default
;;	  3-->     8 r2=[r3]                           :cortex_a8_load_store_1
;;	  5-->     9 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  7-->    10 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 43
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 12 to 15 -- after reload
;;   ======================================================

;;	  0-->    12 r6=[r0+0x110]                     :cortex_a8_load_store_1
;;	  2-->    14 {cc=cmp(r6&0x1,0x0);r6=r6&0x1;}   :cortex_a8_default
;;	  4-->    15 pc={(cc!=0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 12
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 17 to 46 -- after reload
;;   ======================================================

;;	  0-->    17 r5=r0+0xc8                        :cortex_a8_default
;;	  0-->    20 r1=[r0+0xe0]                      :cortex_a8_load_store_1
;;	  1-->    19 r0=r5                             :cortex_a8_default
;;	  2-->    21 call [[r2+0x10]]                  :cortex_a8_issue_branch
;;	  3-->    22 {asm_operands;clobber [scratch];} :nothing
;;	  4-->    26 r3=r6                             :cortex_a8_default
;;	  4-->    24 r1=r5                             :cortex_a8_default
;;	  5-->    23 r0=r4                             :cortex_a8_default
;;	  5-->    25 r2=[r4+0xe0]                      :cortex_a8_load_store_1
;;	  6-->    27 r0=call [`armpmu_event_update']   :cortex_a8_issue_branch
;;	  6-->    28 r3=[r4+0x110]                     :cortex_a8_load_store_1
;;	  8-->    29 r3=r3|0x3                         :cortex_a8_default
;;	  8-->    30 [r4+0x110]=r3                     :cortex_a8_load_store_1
;;	  9-->    46 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 9
;;   new head = 17
;;   new tail = 46





armpmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={5d,2u} r2={5d,3u} r3={7d,4u} r4={2d,6u,3d} r5={2d,4u} r6={3d,5u} r12={2d} r13={2d,7u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 304{260d,41u,3e} in 23{21 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 41 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 41 4 43 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 43 41 44 2 arch/arm/kernel/perf_event.c:248 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 44 43 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 44 8 2 arch/arm/kernel/perf_event.c:248 (set (reg/v/f:SI 4 r4 [orig:135 event ] [135])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 2 9 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [137])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:251 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 10 9 11 2 arch/arm/kernel/perf_event.c:251 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 13 11 12 3 NOTE_INSN_DELETED)

(insn:TI 12 13 14 3 arch/arm/kernel/perf_event.c:249 (set (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn:TI 14 12 15 3 arch/arm/kernel/perf_event.c:249 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [138])
                (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 15 14 16 3 arch/arm/kernel/perf_event.c:249 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 3 -> ( 4 1)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  EXIT [61.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [39.0%]  (fallthru)
(note 16 15 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 18 16 17 4 NOTE_INSN_DELETED)

(insn:TI 17 18 20 4 arch/arm/kernel/perf_event.c:249 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 20 17 19 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:135 event ] [135])
        (nil)))

(insn:TI 19 20 21 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 21 19 22 4 arch/arm/kernel/perf_event.c:259 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 22 21 26 4 arch/arm/kernel/perf_event.c:260 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 8564613)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 26 22 24 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 3 r3)
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 24 26 23 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 24 25 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 event ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 25 23 27 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 27 25 28 4 arch/arm/kernel/perf_event.c:261 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 27 29 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn:TI 29 28 30 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [142])
        (ior:SI (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
            (const_int 3 [0x3]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 30 29 46 4 arch/arm/kernel/perf_event.c:262 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [142])
        (nil)))

(jump_insn:TI 46 30 45 4 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 45 46 40)

(note 40 45 42 NOTE_INSN_DELETED)

(note 42 40 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function validate_event (validate_event)[0:1318]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)


validate_event

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,4u} r2={5d,2u,1d} r3={7d,4u} r4={2d,4u,1d} r5={2d,2u} r6={2d,3u} r12={2d} r13={3d,14u,3d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{263d,43u,5e} in 26{24 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 2 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 4 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 13 to worklist
  Adding insn 61 to worklist
  Adding insn 22 to worklist
  Adding insn 67 to worklist
  Adding insn 30 to worklist
  Adding insn 65 to worklist
  Adding insn 51 to worklist
Finished finding needed instructions:
processing block 6 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 38 to worklist
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 33 to worklist
  Adding insn 25 to worklist
  Adding insn 58 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 21 to worklist
  Adding insn 20 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 17 to worklist
  Adding insn 59 to worklist
  Adding insn 16 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
  Adding insn 11 to worklist
  Adding insn 2 to worklist
  Adding insn 7 to worklist
  Adding insn 3 to worklist
  Adding insn 62 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 61 to 18 -- after reload
;;   ======================================================

;;	  0-->    61 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     3 r4=r1                             :cortex_a8_default
;;	  2-->    62 sp=sp-0x88                        :cortex_a8_default
;;	  2-->    12 r2=0x88                           :cortex_a8_default
;;	  3-->     2 r6=r0                             :cortex_a8_default
;;	  3-->    11 r1=r1+0xc8                        :cortex_a8_default
;;	  4-->    10 r0=sp                             :cortex_a8_default
;;	  4-->     7 r5=sp                             :cortex_a8_default
;;	  5-->    13 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  5-->    16 r2=[r4+0x2c]                      :cortex_a8_load_store_1
;;	  6-->    59 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  8-->    17 cc=cmp(r2,r3)                     :cortex_a8_default
;;	 10-->    18 pc={(cc!=0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 61
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 20 to 22 -- after reload
;;   ======================================================

;;	  0-->    20 r3=[r4+0x30]                      :cortex_a8_load_store_1
;;	  2-->    21 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    22 pc={(cc<0x0)?L36:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 28 to 67 -- after reload
;;   ======================================================

;;	  0-->    58 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    28 r0=r6                             :cortex_a8_default
;;	  1-->    29 r1=sp                             :cortex_a8_default
;;	  3-->    25 r3=[r3]                           :cortex_a8_load_store_1
;;	  4-->    30 r0=call [[r3+0x14]]               :cortex_a8_issue_branch
;;	 36-->    33 {r0=r0>=0x0;clobber cc;}          :cortex_a8_default
;;	 36-->    67 pc=L39                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 36
;;   new head = 28
;;   new tail = 67

;;   ======================================================
;;   -- basic block 5 from 38 to 38 -- after reload
;;   ======================================================

;;	  0-->    38 r0=0x1                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 38
;;   new tail = 38

;;   ======================================================
;;   -- basic block 6 from 51 to 65 -- after reload
;;   ======================================================

;;	  0-->    51 use r0                            :nothing
;;	  0-->    65 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 65





validate_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,4u} r2={5d,2u,1d} r3={7d,4u} r4={2d,4u,1d} r5={2d,2u} r6={2d,3u} r12={2d} r13={3d,14u,3d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{263d,43u,5e} in 26{24 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 61 2 NOTE_INSN_DELETED)

(insn/f:TI 61 8 3 2 arch/arm/kernel/perf_event.c:353 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 3 61 62 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 4 r4 [orig:137 event ] [137])
        (reg:SI 1 r1 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 62 3 63 2 arch/arm/kernel/perf_event.c:353 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -136 [0xffffffffffffff78]))) 4 {*arm_addsi3} (nil))

(note 63 62 12 2 NOTE_INSN_PROLOGUE_END)

(insn 12 63 2 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 2 r2)
        (const_int 136 [0x88])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 136 [0x88])
        (nil)))

(insn:TI 2 12 11 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (reg:SI 0 r0 [ cpuc ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ cpuc ])
        (nil)))

(insn 11 2 10 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 1 r1 [orig:137 event ] [137])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 11 7 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 7 10 13 2 arch/arm/kernel/perf_event.c:354 (set (reg/f:SI 5 r5 [138])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(call_insn:TI 13 7 16 2 arch/arm/kernel/perf_event.c:354 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x11574200 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 13 59 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])
        (nil)))

(insn:TI 59 16 17 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 17 59 18 2 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (reg/f:SI 3 r3 [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [142])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (expr_list:REG_EQUAL (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
                (nil)))))

(jump_insn:TI 18 17 19 2 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [78.4%] 
;; Succ edge  3 [21.6%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [21.6%]  (fallthru)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 21 3 arch/arm/kernel/perf_event.c:356 (set (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 48 [0x30])) [0 <variable>.state+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 21 20 22 3 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
        (nil)))

(jump_insn:TI 22 21 23 3 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [36.7%] 
;; Succ edge  4 [63.3%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  3 [63.3%]  (fallthru)
(note 23 22 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 27 23 31 4 NOTE_INSN_DELETED)

(note 31 27 32 4 NOTE_INSN_DELETED)

(note 32 31 58 4 NOTE_INSN_DELETED)

(insn:TI 58 32 28 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 28 58 29 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 28 25 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 25 29 30 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn:TI 30 25 33 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 33 30 67 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
                (ge:SI (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(jump_insn 67 33 68 4 arch/arm/kernel/perf_event.c:359 (set (pc)
        (label_ref 39)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 68 67 36)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [36.7%] 
;; Pred edge  2 [78.4%] 
(code_label 36 68 37 5 43 "" [2 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 37 39 5 arch/arm/kernel/perf_event.c:357 (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 39 38 40 6 44 "" [1 uses])

(note 40 39 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 40 64 6 arch/arm/kernel/perf_event.c:360 (use (reg/i:SI 0 r0)) -1 (nil))

(note 64 51 65 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 65 64 66 6 arch/arm/kernel/perf_event.c:360 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 66 65 57)

(note 57 66 60 NOTE_INSN_DELETED)

(note 60 57 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_platform_irq (armpmu_platform_irq)[0:1320]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 34 to 37 -- after reload
;;   ======================================================

;;	  0-->     7 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    34 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  3-->    11 r2=[r3]                           :cortex_a8_load_store_1
;;	  4-->     8 r3=[r3+0x4]                       :cortex_a8_load_store_1
;;	  6-->    15 r2=[r2+0x8]                       :cortex_a8_load_store_1
;;	  7-->     9 r3=[r3+0x5c]                      :cortex_a8_load_store_1
;;	  8-->    16 r0=call [[r3]]                    :cortex_a8_issue_branch
;;	  8-->    28 use r0                            :nothing
;;	  8-->    37 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 34
;;   new tail = 37





armpmu_platform_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={4d,2u} r3={5d,4u} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{130d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 4 7 2 NOTE_INSN_DELETED)

(insn:TI 7 12 34 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 34 7 35 2 arch/arm/kernel/perf_event.c:385 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 35 34 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 35 8 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 11 15 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 8 9 2 arch/arm/kernel/perf_event.c:388 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 15 16 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 16 9 28 2 arch/arm/kernel/perf_event.c:388 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139]) [0 <variable>.handle_irq+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 28 16 36 2 arch/arm/kernel/perf_event.c:389 (use (reg/i:SI 0 r0)) -1 (nil))

(note 36 28 37 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 37 36 38 2 arch/arm/kernel/perf_event.c:389 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 38 37 32)

(note 32 38 33 NOTE_INSN_DELETED)

(note 33 32 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_enable (armpmu_enable)[0:1326]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)


armpmu_enable

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,3u,1d} r1={5d,2u} r2={8d,6u} r3={7d,6u,1d} r4={3d,7u} r5={2d,4u,1d} r6={3d,4u} r12={3d,2u} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 325{268d,54u,3e} in 33{31 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 2 )->[3]->( 1 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 6 )->[4]->( 6 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 4 2 )->[6]->( 4 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 6 )->[7]->( 8 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 7 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 7 3 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 47 to worklist
  Adding insn 101 to worklist
  Adding insn 112 to worklist
  Adding insn 57 to worklist
  Adding insn 63 to worklist
  Adding insn 75 to worklist
  Adding insn 78 to worklist
  Adding insn 104 to worklist
  Adding insn 81 to worklist
Finished finding needed instructions:
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 5 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 92 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 56 to worklist
  Adding insn 61 to worklist
  Adding insn 67 to worklist
  Adding insn 55 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 7 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 77 to worklist
processing block 6 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 62 to worklist
  Adding insn 71 to worklist
processing block 2 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 43 to worklist
  Adding insn 46 to worklist
  Adding insn 42 to worklist
  Adding insn 98 to worklist
  Adding insn 36 to worklist
  Adding insn 45 to worklist
  Adding insn 41 to worklist
  Adding insn 35 to worklist
  Adding insn 96 to worklist
  Adding insn 44 to worklist
  Adding insn 95 to worklist
  Adding insn 100 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 18 (    2)
;;   ======================================================
;;   -- basic block 2 from 101 to 47 -- after reload
;;   ======================================================

;;	  0-->   101 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->   100 r3=sp                             :cortex_a8_default
;;	  2-->    95 r2=r3&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    44 r5=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    96 r2=r2&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->    98 r1=`__per_cpu_offset'             :cortex_a8_load_store_1
;;	  4-->    35 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  5-->    41 r0=[r2+0x14]                      :cortex_a8_load_store_1
;;	  6-->    45 r2=[r5]                           :cortex_a8_load_store_1
;;	  7-->    36 r3=asm_operands                   :nothing
;;	  8-->    46 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  8-->    42 r6=[r0*0x4+r1]                    :cortex_a8_load_store_1
;;	  9-->    49 (cc) r2=0x0                       :cortex_a8_default
;;	 10-->    43 r6=r3+r6                          :cortex_a8_default
;;	 10-->    50 (cc) r4=r2                        :cortex_a8_default
;;	 11-->    47 pc={(cc!=0x0)?L68:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 101
;;   new tail = 47

;;   ======================================================
;;   -- basic block 3 from 112 to 112 -- after reload
;;   ======================================================

;;	  0-->   112 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 112
;;   new tail = 112

;;   ======================================================
;;   -- basic block 4 from 55 to 57 -- after reload
;;   ======================================================

;;	  0-->    55 ip=[r4*0x4+r6]                    :cortex_a8_load_store_1
;;	  0-->    67 r4=r4+0x1                         :cortex_a8_default
;;	  2-->    56 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  2-->    61 r0=ip+0xc8                        :cortex_a8_default
;;	  4-->    57 pc={(cc==0x0)?L68:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 55
;;   new tail = 57

;;   ======================================================
;;   -- basic block 5 from 63 to 92 -- after reload
;;   ======================================================

;;	  0-->    63 call [[r3+0xc]]                   :cortex_a8_issue_branch
;;	  0-->    92 r2=0x1                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 63
;;   new tail = 92

;;   ======================================================
;;   -- basic block 6 from 71 to 75 -- after reload
;;   ======================================================

;;	  0-->    71 r3=[r5]                           :cortex_a8_load_store_1
;;	  0-->    62 r1=r4                             :cortex_a8_default
;;	  3-->    73 r0=[r3+0x38]                      :cortex_a8_load_store_1
;;	  5-->    74 cc=cmp(r4,r0)                     :cortex_a8_default
;;	  7-->    75 pc={(cc<=0x0)?L72:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 71
;;   new tail = 75

;;   ======================================================
;;   -- basic block 7 from 77 to 78 -- after reload
;;   ======================================================

;;	  0-->    77 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  2-->    78 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 77
;;   new tail = 78

;;   ======================================================
;;   -- basic block 8 from 81 to 104 -- after reload
;;   ======================================================

;;	  0-->    81 call [[r3+0x20]]                  :cortex_a8_issue_branch
;;	  0-->   104 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 81
;;   new tail = 104





armpmu_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,3u,1d} r1={5d,2u} r2={8d,6u} r3={7d,6u,1d} r4={3d,7u} r5={2d,4u,1d} r6={3d,4u} r12={3d,2u} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 325{268d,54u,3e} in 33{31 regular + 2 call} insns.
(note 30 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 30 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 39 2 NOTE_INSN_FUNCTION_BEG)

(note 39 32 101 2 NOTE_INSN_DELETED)

(insn/f:TI 101 39 102 2 arch/arm/kernel/perf_event.c:584 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 102 101 100 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 100 102 95 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 95 100 44 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 44 95 96 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 5 r5 [176])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 96 44 98 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 2 r2 [172])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 98 96 35 2 arch/arm/kernel/perf_event.c:587 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 35 98 41 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 41 35 45 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [172])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [172])
        (nil)))

(insn:TI 45 41 36 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 36 45 46 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8606498)) -1 (nil))

(insn:TI 46 36 42 2 arch/arm/kernel/perf_event.c:589 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 42 46 49 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 6 r6 [175])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [171])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [171])
        (expr_list:REG_DEAD (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 49 42 43 2 arch/arm/kernel/perf_event.c:589 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 43 49 50 2 arch/arm/kernel/perf_event.c:587 (set (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
        (plus:SI (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            (reg:SI 6 r6 [175]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (nil)))

(insn 50 43 47 2 arch/arm/kernel/perf_event.c:589 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (reg/v:SI 2 r2 [orig:167 enabled ] [167]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 47 50 111 2 arch/arm/kernel/perf_event.c:589 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [10.1%]  (fallthru)
;; Succ edge  6 [89.9%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [10.1%]  (fallthru)
(note 111 47 112 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 112 111 113 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 113 112 72)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  6 [97.1%] 
(code_label 72 113 53 4 56 "" [1 uses])

(note 53 72 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 53 67 4 arch/arm/kernel/perf_event.c:593 (set (reg/v/f:SI 12 ip [orig:164 event ] [164])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 67 55 56 4 arch/arm/kernel/perf_event.c:592 (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
        (plus:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 56 67 61 4 arch/arm/kernel/perf_event.c:595 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 12 ip [orig:164 event ] [164])
        (nil)))

(insn 61 56 57 4 arch/arm/kernel/perf_event.c:598 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 57 61 58 4 arch/arm/kernel/perf_event.c:595 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [30.2%] 
;; Succ edge  5 [69.8%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 58 57 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 5 NOTE_INSN_DELETED)

(note 60 59 63 5 NOTE_INSN_DELETED)

(call_insn:TI 63 60 92 5 arch/arm/kernel/perf_event.c:598 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 92 63 68 5 arch/arm/kernel/perf_event.c:599 (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 4 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [30.2%] 
;; Pred edge  2 [89.9%] 
(code_label 68 92 69 6 54 "" [2 uses])

(note 69 68 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 69 62 6 arch/arm/kernel/perf_event.c:592 discrim 1 (set (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 62 71 73 6 arch/arm/kernel/perf_event.c:598 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:168 idx ] [168])) 167 {*arm_movsi_insn} (nil))

(insn:TI 73 62 74 6 arch/arm/kernel/perf_event.c:592 (set (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])
        (nil)))

(insn:TI 74 73 75 6 arch/arm/kernel/perf_event.c:592 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182])
        (nil)))

(jump_insn:TI 75 74 76 6 arch/arm/kernel/perf_event.c:592 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [97.1%] 
;; Succ edge  7 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [2.9%]  (fallthru,loop_exit)
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 76 78 7 arch/arm/kernel/perf_event.c:602 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:167 enabled ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (nil)))

(jump_insn:TI 78 77 79 7 arch/arm/kernel/perf_event.c:602 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 7 -> ( 8 1)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  EXIT [61.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  7 [39.0%]  (fallthru)
(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 80 79 81 8 NOTE_INSN_DELETED)

(call_insn:TI 81 80 104 8 arch/arm/kernel/perf_event.c:603 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 32 [0x20])) [0 <variable>.start+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (nil))
    (nil))

(jump_insn 104 81 103 8 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 103 104 97)

(note 97 103 99 NOTE_INSN_DELETED)

(note 99 97 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_disable (armpmu_disable)[0:1327]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 24 to 9 -- after reload
;;   ======================================================

;;	  0-->     6 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    24 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  3-->     7 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->     8 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->     9 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 24
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 12 to 27 -- after reload
;;   ======================================================

;;	  0-->    12 call [[r3+0x24]]                  :cortex_a8_issue_branch
;;	  0-->    27 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 12
;;   new tail = 27





armpmu_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r3={4d,3u} r4={1d,2u} r12={1d} r13={2d,5u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{128d,13u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 24 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 24 6 25 2 arch/arm/kernel/perf_event.c:607 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 25 24 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 25 8 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [135]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:608 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:608 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [78.3%]  (fallthru)
;; Succ edge  EXIT [21.6%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  2 [78.3%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 11 10 12 3 NOTE_INSN_DELETED)

(call_insn:TI 12 11 27 3 arch/arm/kernel/perf_event.c:609 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
        (nil))
    (nil))

(jump_insn 27 12 26 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 26 27 22)

(note 22 26 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function callchain_trace (callchain_trace)[0:1361]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 62 to 11 -- after reload
;;   ======================================================

;;	  0-->     9 r2=[r1]                           :cortex_a8_load_store_1
;;	  1-->    62 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->    10 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->     8 r6=[r0+0xc]                       :cortex_a8_load_store_1
;;	  4-->    11 pc={(cc!=0x0)?L30:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 62
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 14 to 15 -- after reload
;;   ======================================================

;;	  0-->    14 cc=cmp(r2,0xfe)                   :cortex_a8_default
;;	  2-->    15 pc={(gtu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 14
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 22 to 29 -- after reload
;;   ======================================================

;;	  0-->    22 r0=r2+0x1                         :cortex_a8_default
;;	  0-->    58 r4=0x1                            :cortex_a8_default
;;	  1-->    60 {cc=cmp(r4+r2,r4);r4=r4+r2;}      :cortex_a8_default
;;	  1-->    59 r5=0x0                            :cortex_a8_default
;;	  2-->    24 ip=r0*0x8+r1                      :cortex_a8_default
;;	  2-->    54 [r0*0x8+r1]=r6                    :cortex_a8_load_store_1
;;	  3-->    61 r5=ltu(cc,0x0)+r5+r3              :cortex_a8_default
;;	  4-->    55 [ip+0x4]=r3                       :cortex_a8_load_store_1
;;	  5-->    29 [r1]=r4                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 22
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 36 to 65 -- after reload
;;   ======================================================

;;	  0-->    36 r0=0x0                            :cortex_a8_default
;;	  0-->    42 use r0                            :nothing
;;	  0-->    65 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 36
;;   new tail = 65





callchain_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d,4u} r2={2d,4u} r3={2d,3u} r4={3d,6u} r5={3d,4u} r6={2d,3u} r12={1d,1u} r13={2d,6u} r14={1d,2u} r24={3d,3u} 
;;    total ref usage 64{23d,41u,0e} in 19{19 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 4 62 2 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:133 D.26372 ] [133])
        (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn/f:TI 62 9 63 2 arch/arm/kernel/perf_event.c:765 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 63 62 10 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 10 63 8 2 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26372+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 8 10 11 2 arch/arm/kernel/perf_event.c:767 (set (reg:SI 6 r6 [orig:135 D.26217 ] [135])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ fr ])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ fr ])
        (nil)))

(jump_insn:TI 11 8 45 2 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 45 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 14 45 15 3 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 46 3 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 15 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 23 46 22 4 NOTE_INSN_DELETED)

(insn:TI 22 23 58 4 include/linux/perf_event.h:1097 (set (reg:SI 0 r0 [139])
        (plus:SI (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 58 22 60 4 include/linux/perf_event.h:1097 (set (reg:SI 4 r4 [144])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 58 59 4 include/linux/perf_event.h:1097 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [144])
                        (reg:SI 2 r2 [orig:133 D.26372 ] [133]))
                    (reg:SI 4 r4 [144])))
            (set (reg:SI 4 r4 [144])
                (plus:SI (reg:SI 4 r4 [144])
                    (reg:SI 2 r2 [orig:133 D.26372 ] [133])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:133 D.26372 ] [133])
        (nil)))

(insn 59 60 24 4 include/linux/perf_event.h:1097 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 59 54 4 include/linux/perf_event.h:1097 (set (reg/f:SI 12 ip [141])
        (plus:SI (mult:SI (reg:SI 0 r0 [139])
                (const_int 8 [0x8]))
            (reg/v/f:SI 1 r1 [orig:138 data ] [138]))) 270 {*arith_shiftsi} (nil))

(insn 54 24 61 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [139])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 1 r1 [orig:138 data ] [138])) [0 <variable>.ip S4 A64])
        (reg:SI 6 r6 [orig:135 D.26217 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [139])
        (nil)))

(insn:TI 61 54 55 4 include/linux/perf_event.h:1097 (set (reg:SI 5 r5 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [+4 ])
                (reg:SI 3 r3 [ D.26372+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 55 61 29 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 12 ip [141])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26372+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [141])
        (expr_list:REG_DEAD (reg:SI 3 r3 [ D.26372+4 ])
            (nil))))

(insn:TI 29 55 30 4 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
(code_label 30 29 31 5 66 "" [2 uses])

(note 31 30 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 31 42 5 arch/arm/kernel/perf_event.c:769 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 42 36 64 5 arch/arm/kernel/perf_event.c:769 (use (reg/i:SI 0 r0)) -1 (nil))

(note 64 42 65 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 65 64 66 5 arch/arm/kernel/perf_event.c:769 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 66 65 56)

(note 56 66 57 NOTE_INSN_DELETED)

(note 57 56 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_reset (armpmu_reset)[0:1357] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 8 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->     6 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->     8 pc={(cc==0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 5
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 10 to 12 -- after reload
;;   ======================================================

;;	  0-->    10 r0=[r3+0x28]                      :cortex_a8_load_store_1
;;	  2-->    11 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  4-->    12 pc={(cc==0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 10
;;   new tail = 12

;;   ======================================================
;;   -- basic block 4 from 15 to 17 -- after reload
;;   ======================================================

;;	  0-->    15 r1=0x0                            :cortex_a8_default
;;	  0-->    16 r2=0x1                            :cortex_a8_default
;;	  1-->    45 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  2-->    17 r0=call [`on_each_cpu']           :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 17

;;   ======================================================
;;   -- basic block 5 from 28 to 42 -- after reload
;;   ======================================================

;;	  0-->    28 r0=0x0                            :cortex_a8_default
;;	  0-->    34 use r0                            :nothing
;;	  0-->    42 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 28
;;   new tail = 42





armpmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,3u} r12={1d} r13={1d,6u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{130d,19u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 40 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 40 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 7 6 8 2 arch/arm/kernel/perf_event.c:635 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 arch/arm/kernel/perf_event.c:635 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [89.9%]  (fallthru)
;; Succ edge  5 [10.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 9 11 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
                (const_int 40 [0x28])) [0 <variable>.reset+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
        (nil)))

(insn:TI 11 10 12 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 12 11 13 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [78.3%]  (fallthru)
;; Succ edge  5 [21.6%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  3 [78.3%]  (fallthru)
(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 13 16 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 44 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 44 16 45 4 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 45 44 17 4 arch/arm/kernel/perf_event.c:638 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 17 45 18 4 arch/arm/kernel/perf_event.c:636 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("on_each_cpu") [flags 0x41] <function_decl 0x10b3a780 on_each_cpu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 18 17 20)

;; Start of basic block ( 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  3 [21.6%] 
(code_label 20 18 21 5 71 "" [2 uses])

(note 21 20 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 21 34 5 arch/arm/kernel/perf_event.c:638 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 28 41 5 arch/arm/kernel/perf_event.c:638 (use (reg/i:SI 0 r0)) -1 (nil))

(note 41 34 42 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 42 41 43 5 arch/arm/kernel/perf_event.c:638 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 42 38)

(note 38 43 39 NOTE_INSN_DELETED)

(note 39 38 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_write_counter (armv7pmu_write_counter)[0:1338]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 18 (  1.5)


armv7pmu_write_counter

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,7u} r1={5d,5u} r2={5d,3u} r3={10d,8u} r12={1d} r13={1d,14u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 186{142d,44u,0e} in 34{33 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]

( 2 )->[3]->( 1 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 2 )->[4]->( 5 10 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]

( 4 )->[5]->( 6 10 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 5 )->[6]->( 8 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]

( 6 7 )->[8]->( 11 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 7 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 5 4 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 10 8 )->[11]->( 1 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 11 3 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 84 to worklist
  Adding insn 10 to worklist
  Adding insn 16 to worklist
  Adding insn 23 to worklist
  Adding insn 27 to worklist
  Adding insn 30 to worklist
  Adding insn 97 to worklist
  Adding insn 85 to worklist
  Adding insn 48 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 60 to worklist
  Adding insn 89 to worklist
Finished finding needed instructions:
processing block 3 lr out =  13 [sp] 14 [lr]
processing block 11 lr out =  13 [sp] 14 [lr]
  Adding insn 58 to worklist
processing block 8 lr out =  0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 37 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 81 to worklist
processing block 9 lr out =  13 [sp] 14 [lr]
  Adding insn 45 to worklist
  Adding insn 44 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
  Adding insn 29 to worklist
processing block 6 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 26 to worklist
processing block 10 lr out =  0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 57 to worklist
  Adding insn 76 to worklist
  Adding insn 75 to worklist
  Adding insn 82 to worklist
processing block 5 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 22 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
processing block 2 lr out =  0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
  Adding insn 7 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 2 to 8 -- after reload
;;   ======================================================

;;	  0-->     7 cc=cmp(r0,0x1)                    :cortex_a8_default
;;	  0-->     2 r2=r0                             :cortex_a8_default
;;	  2-->     8 pc={(cc!=0x0)?L13:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 2
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 10 to 84 -- after reload
;;   ======================================================

;;	  0-->    10 asm_operands                      :nothing
;;	  1-->    84 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 84

;;   ======================================================
;;   -- basic block 4 from 16 to 16 -- after reload
;;   ======================================================

;;	  0-->    16 pc={(cc<=0x0)?L51:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 16
;;   new tail = 16

;;   ======================================================
;;   -- basic block 5 from 18 to 23 -- after reload
;;   ======================================================

;;	  0-->    18 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    19 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->    20 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->    21 r3=r3+0x1                         :cortex_a8_default
;;	  9-->    22 cc=cmp(r0,r3)                     :cortex_a8_default
;;	 11-->    23 pc={(cc>0x0)?L51:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 18
;;   new tail = 23

;;   ======================================================
;;   -- basic block 6 from 26 to 27 -- after reload
;;   ======================================================

;;	  0-->    26 cc=cmp(r0,0x1)                    :cortex_a8_default
;;	  2-->    27 pc={(leu(cc,0x0))?L31:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 26
;;   new tail = 27

;;   ======================================================
;;   -- basic block 7 from 29 to 30 -- after reload
;;   ======================================================

;;	  0-->    29 cc=cmp(r0,r3)                     :cortex_a8_default
;;	  2-->    30 pc={(leu(cc,0x0))?L42:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 29
;;   new tail = 30

;;   ======================================================
;;   -- basic block 8 from 81 to 97 -- after reload
;;   ======================================================

;;	  0-->    81 r1=sp                             :cortex_a8_default
;;	  0-->    37 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    77 r3=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    78 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  2-->    97 pc=L94                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 81
;;   new tail = 97

;;   ======================================================
;;   -- basic block 9 from 44 to 85 -- after reload
;;   ======================================================

;;	  0-->    44 r2=r0-0x2                         :cortex_a8_default
;;	  1-->    45 r2=r2&0x1f                        :cortex_a8_default
;;	  2-->    46 asm_operands                      :nothing
;;	  3-->    47 {asm_operands;clobber [scratch];} :nothing
;;	  4-->    48 asm_operands                      :nothing
;;	  5-->    85 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 44
;;   new tail = 85

;;   ======================================================
;;   -- basic block 10 from 82 to 57 -- after reload
;;   ======================================================

;;	  0-->    82 r1=sp                             :cortex_a8_default
;;	  0-->    57 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  1-->    75 r3=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    76 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 82
;;   new tail = 57

;;   ======================================================
;;   -- basic block 11 from 58 to 60 -- after reload
;;   ======================================================

;;	  0-->    58 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  0-->    89 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->    60 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 58
;;   new tail = 60





armv7pmu_write_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,7u} r1={5d,5u} r2={5d,3u} r3={10d,8u} r12={1d} r13={1d,14u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 186{142d,44u,0e} in 34{33 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 83 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 83 5 4 2 NOTE_INSN_PROLOGUE_END)

(note 4 83 7 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 7 4 2 2 arch/arm/kernel/perf_event_v7.c:832 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 7 8 2 arch/arm/kernel/perf_event_v7.c:831 (set (reg/v:SI 2 r2 [orig:137 idx ] [137])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 8 2 9 2 arch/arm/kernel/perf_event_v7.c:832 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 9 84 3 arch/arm/kernel/perf_event_v7.c:833 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 0") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912595) -1 (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:138 value ] [138])
        (nil)))

(jump_insn:TI 84 10 72 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 72 84 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 13 72 14 4 76 "" [1 uses])

(note 14 13 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 16 14 17 4 arch/arm/kernel/perf_event_v7.c:834 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 19 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [139]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 20 19 21 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 21 20 22 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:136 D.25836 ] [136])
        (plus:SI (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 22 21 23 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 23 22 24 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 24 23 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 24 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 27 26 28 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 31)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:136 D.25836 ] [136])
        (nil)))

(jump_insn:TI 30 29 31 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 31 30 32 8 79 "" [1 uses])

(note 32 31 35 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 35 32 81 8 NOTE_INSN_DELETED)

(insn:TI 81 35 37 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 37 81 77 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn:TI 77 37 78 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 78 77 97 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 3 r3 [143])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 97 78 98 8 (set (pc)
        (label_ref 94)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 98 97 42)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 42 98 43 9 80 "" [1 uses])

(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 44 43 45 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [145])
        (plus:SI (reg:SI 0 r0 [orig:137 idx ] [137])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:137 idx ] [137])
        (nil)))

(insn:TI 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (and:SI (reg:SI 2 r2 [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [146])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (expr_list:REG_DEAD (reg:SI 2 r2 [146])
        (nil)))

(insn:TI 47 46 48 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 48 47 85 9 arch/arm/kernel/perf_event_v7.c:836 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 2") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912980) -1 (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:138 value ] [138])
        (nil)))

(jump_insn:TI 85 48 74 9 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 74 85 51)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 51 74 52 10 78 "" [2 uses])

(note 52 51 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 55 52 82 10 NOTE_INSN_DELETED)

(insn:TI 82 55 57 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 57 82 75 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)
        (nil)))

(insn:TI 75 57 76 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 76 75 94 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 8) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 94 76 92 11 82 "" [1 uses])

(note 92 94 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 92 88 11 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [148])
        (nil)))

(note 88 58 89 11 NOTE_INSN_EPILOGUE_BEG)

(insn 89 88 60 11 arch/arm/kernel/perf_event_v7.c:841 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 60 89 61 11 arch/arm/kernel/perf_event_v7.c:839 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 11 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 61 60 79)

(note 79 61 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_read_counter (armv7pmu_read_counter)[0:1337]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 93 to 7 -- after reload
;;   ======================================================

;;	  0-->     6 cc=cmp(r0,0x1)                    :cortex_a8_default
;;	  0-->     2 r2=r0                             :cortex_a8_default
;;	  1-->    93 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     7 pc={(cc!=0x0)?L12:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 93
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 9 to 95 -- after reload
;;   ======================================================

;;	  0-->     9 r0=asm_operands                   :nothing
;;	  1-->    95 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 9
;;   new tail = 95

;;   ======================================================
;;   -- basic block 4 from 15 to 15 -- after reload
;;   ======================================================

;;	  0-->    15 pc={(cc<=0x0)?L52:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 15
;;   new tail = 15

;;   ======================================================
;;   -- basic block 5 from 17 to 22 -- after reload
;;   ======================================================

;;	  0-->    17 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    18 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->    19 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->    20 r3=r3+0x1                         :cortex_a8_default
;;	  9-->    21 cc=cmp(r0,r3)                     :cortex_a8_default
;;	 11-->    22 pc={(cc>0x0)?L52:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 17
;;   new tail = 22

;;   ======================================================
;;   -- basic block 6 from 25 to 26 -- after reload
;;   ======================================================

;;	  0-->    25 cc=cmp(r0,0x1)                    :cortex_a8_default
;;	  2-->    26 pc={(leu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 25
;;   new tail = 26

;;   ======================================================
;;   -- basic block 7 from 28 to 29 -- after reload
;;   ======================================================

;;	  0-->    28 cc=cmp(r0,r3)                     :cortex_a8_default
;;	  2-->    29 pc={(leu(cc,0x0))?L43:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 28
;;   new tail = 29

;;   ======================================================
;;   -- basic block 8 from 91 to 97 -- after reload
;;   ======================================================

;;	  0-->    91 r1=sp                             :cortex_a8_default
;;	  0-->    36 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    87 r3=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    88 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    37 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    39 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->    40 r0=0x0                            :cortex_a8_default
;;	  6-->    97 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 91
;;   new tail = 97

;;   ======================================================
;;   -- basic block 9 from 45 to 96 -- after reload
;;   ======================================================

;;	  0-->    45 r2=r0-0x2                         :cortex_a8_default
;;	  1-->    46 r2=r2&0x1f                        :cortex_a8_default
;;	  2-->    47 asm_operands                      :nothing
;;	  3-->    48 {asm_operands;clobber [scratch];} :nothing
;;	  4-->    49 r0=asm_operands                   :nothing
;;	  5-->    96 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 45
;;   new tail = 96

;;   ======================================================
;;   -- basic block 10 from 92 to 99 -- after reload
;;   ======================================================

;;	  0-->    92 r1=sp                             :cortex_a8_default
;;	  0-->    58 r0=`*.LC2'                        :cortex_a8_load_store_1
;;	  1-->    85 r3=r1&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    86 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    59 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    61 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->    62 r0=0x0                            :cortex_a8_default
;;	  6-->    75 use r0                            :nothing
;;	  6-->    99 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 92
;;   new tail = 99





armv7pmu_read_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,10u} r1={7d,4u} r2={6d,4u} r3={11d,9u} r4={1d,2u} r12={2d} r13={2d,15u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 318{267d,51u,0e} in 40{38 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 2 2 arch/arm/kernel/perf_event_v7.c:817 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 6 93 2 arch/arm/kernel/perf_event_v7.c:814 (set (reg/v:SI 2 r2 [orig:139 idx ] [139])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 93 2 94 2 arch/arm/kernel/perf_event_v7.c:814 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 94 93 7 2 NOTE_INSN_PROLOGUE_END)

(jump_insn:TI 7 94 8 2 arch/arm/kernel/perf_event_v7.c:817 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 9 8 95 3 arch/arm/kernel/perf_event_v7.c:818 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 0") ("=r") 0 []
             [] 8910675)) -1 (nil))

(jump_insn:TI 95 9 80 3 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 80 95 12)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 12 80 13 4 86 "" [1 uses])

(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 15 13 16 4 arch/arm/kernel/perf_event_v7.c:819 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 18 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 18 17 19 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [140]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 19 21 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:137 D.25815 ] [137])
        (plus:SI (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 21 20 22 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 23 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 23 22 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 26 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 26 25 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 29 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:137 D.25815 ] [137])
        (nil)))

(jump_insn:TI 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 30 29 31 8 89 "" [1 uses])

(note 31 30 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 34 31 91 8 NOTE_INSN_DELETED)

(insn:TI 91 34 36 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 91 87 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn:TI 87 36 88 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 88 87 37 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 88 39 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [144])
        (nil)))

(call_insn:TI 39 37 40 8 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 40 39 97 8 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 97 40 82 8 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 82 97 43)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 43 82 44 9 90 "" [1 uses])

(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 0 r0 [orig:139 idx ] [139])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:139 idx ] [139])
        (nil)))

(insn:TI 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [147])
        (and:SI (reg:SI 2 r2 [146])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 47 46 48 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [147])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (expr_list:REG_DEAD (reg:SI 2 r2 [147])
        (nil)))

(insn:TI 48 47 49 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 49 48 96 9 arch/arm/kernel/perf_event_v7.c:821 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 2") ("=r") 0 []
             [] 8911060)) -1 (nil))

(jump_insn:TI 96 49 84 9 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 84 96 52)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 52 84 53 10 88 "" [2 uses])

(note 53 52 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 56 53 92 10 NOTE_INSN_DELETED)

(insn:TI 92 56 58 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 58 92 85 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)
        (nil)))

(insn:TI 85 58 86 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn:TI 86 85 59 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 59 86 61 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (nil)))

(call_insn:TI 61 59 62 10 arch/arm/kernel/perf_event_v7.c:824 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 62 61 75 10 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 75 62 99 10 arch/arm/kernel/perf_event_v7.c:828 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 99 75 98 10 arch/arm/kernel/perf_event_v7.c:828 (return) 260 {return} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 98 99 89)

(note 89 98 90 NOTE_INSN_DELETED)

(note 90 89 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function init_hw_perf_events (init_hw_perf_events)[0:1358] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 42 count 55 (  1.9)


init_hw_perf_events

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={18d,11u} r2={25d,30u} r3={15d,29u,9d} r4={1d,2u} r12={3d} r13={2d,32u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={17d,14u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 557{423d,125u,9e} in 104{101 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 20 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 2 )->[3]->( 24 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]

( 3 )->[4]->( 8 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 4 )->[5]->( 24 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 5 )->[6]->( 24 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 6 )->[7]->( 23 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]

( 4 )->[8]->( 15 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]

( 8 )->[9]->( 12 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 9 )->[10]->( 11 25 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 10 )->[11]->( 17 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 13 [sp]

( 9 )->[12]->( 16 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 12 )->[13]->( 14 25 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 13 )->[14]->( 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 13 [sp]

( 8 )->[15]->( 19 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 12 )->[16]->( 19 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 11 )->[17]->( 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 14 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]

( 18 16 15 17 )->[19]->( 25 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 2 )->[20]->( 21 25 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]

( 20 )->[21]->( 24 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]

( 21 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]

( 22 7 )->[23]->( 24 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 23 21 5 6 3 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 10 20 23 13 24 19 )->[25]->( 26 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]

( 25 )->[26]->( 28 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 25 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 27 26 )->[28]->( 1 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]

( 28 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 317 to worklist
  Adding insn 14 to worklist
  Adding insn 17 to worklist
  Adding insn 20 to worklist
  Adding insn 23 to worklist
  Adding insn 348 to worklist
  Adding insn 32 to worklist
  Adding insn 35 to worklist
  Adding insn 38 to worklist
  Adding insn 352 to worklist
  Adding insn 44 to worklist
  Adding insn 47 to worklist
  Adding insn 356 to worklist
  Adding insn 358 to worklist
  Adding insn 78 to worklist
  Adding insn 68 to worklist
  Adding insn 360 to worklist
  Adding insn 106 to worklist
  Adding insn 95 to worklist
  Adding insn 362 to worklist
  Adding insn 134 to worklist
  Adding insn 123 to worklist
  Adding insn 162 to worklist
  Adding insn 151 to worklist
  Adding insn 364 to worklist
  Adding insn 172 to worklist
  Adding insn 168 to worklist
  Adding insn 163 to worklist
  Adding insn 158 to worklist
  Adding insn 154 to worklist
  Adding insn 178 to worklist
  Adding insn 183 to worklist
  Adding insn 185 to worklist
  Adding insn 199 to worklist
  Adding insn 205 to worklist
  Adding insn 366 to worklist
  Adding insn 211 to worklist
  Adding insn 218 to worklist
  Adding insn 320 to worklist
  Adding insn 237 to worklist
  Adding insn 226 to worklist
Finished finding needed instructions:
processing block 28 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 231 to worklist
  Adding insn 224 to worklist
  Adding insn 225 to worklist
  Adding insn 223 to worklist
processing block 26 lr out =  4 [r4] 13 [sp]
  Adding insn 208 to worklist
  Adding insn 209 to worklist
  Adding insn 210 to worklist
processing block 27 lr out =  4 [r4] 13 [sp]
  Adding insn 217 to worklist
processing block 25 lr out =  3 [r3] 4 [r4] 13 [sp]
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
processing block 24 lr out =  4 [r4] 13 [sp]
  Adding insn 295 to worklist
  Adding insn 198 to worklist
processing block 19 lr out =  4 [r4] 13 [sp]
  Adding insn 297 to worklist
  Adding insn 171 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
processing block 15 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 307 to worklist
  Adding insn 77 to worklist
  Adding insn 308 to worklist
  Adding insn 73 to worklist
  Adding insn 66 to worklist
processing block 16 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 304 to worklist
  Adding insn 105 to worklist
  Adding insn 305 to worklist
  Adding insn 101 to worklist
  Adding insn 93 to worklist
processing block 18 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 298 to worklist
  Adding insn 161 to worklist
  Adding insn 299 to worklist
  Adding insn 157 to worklist
  Adding insn 149 to worklist
processing block 14 lr out =  4 [r4] 13 [sp]
processing block 13 lr out =  4 [r4] 13 [sp]
  Adding insn 46 to worklist
  Adding insn 45 to worklist
processing block 12 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 43 to worklist
  Adding insn 42 to worklist
processing block 17 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 301 to worklist
  Adding insn 133 to worklist
  Adding insn 302 to worklist
  Adding insn 129 to worklist
  Adding insn 121 to worklist
processing block 11 lr out =  4 [r4] 13 [sp]
processing block 10 lr out =  4 [r4] 13 [sp]
  Adding insn 37 to worklist
  Adding insn 36 to worklist
processing block 9 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
processing block 8 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
  Adding insn 31 to worklist
  Adding insn 30 to worklist
processing block 23 lr out =  4 [r4] 13 [sp]
processing block 7 lr out =  4 [r4] 13 [sp] 24 [cc]
  Adding insn 25 to worklist
  Adding insn 24 to worklist
processing block 6 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 22 to worklist
  Adding insn 21 to worklist
processing block 5 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 19 to worklist
  Adding insn 18 to worklist
processing block 4 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
processing block 3 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
  Adding insn 13 to worklist
  Adding insn 311 to worklist
  Adding insn 291 to worklist
  Adding insn 290 to worklist
processing block 22 lr out =  4 [r4] 13 [sp] 24 [cc]
  Adding insn 184 to worklist
processing block 21 lr out =  2 [r2] 4 [r4] 13 [sp]
  Adding insn 182 to worklist
  Adding insn 181 to worklist
processing block 20 lr out =  2 [r2] 4 [r4] 13 [sp]
  Adding insn 177 to worklist
processing block 2 lr out =  2 [r2] 3 [r3] 4 [r4] 13 [sp]
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 42 count 56 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 317 to 8 -- after reload
;;   ======================================================

;;	  0-->     5 {r2=asm_operands;clobber cc;}     :nothing
;;	  1-->     6 r3=r2 0>>0x18                     :cortex_a8_default
;;	  2-->     7 cc=cmp(r3,0x41)                   :cortex_a8_default
;;	  3-->   317 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  4-->     8 pc={(cc!=0x0)?L175:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 317
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 290 to 14 -- after reload
;;   ======================================================

;;	  0-->   290 r3=0xfff0                         :cortex_a8_default
;;	  1-->   291 r3=r2&r3                          :cortex_a8_default
;;	  1-->   311 r2=0xb760                         :cortex_a8_default
;;	  2-->    13 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  4-->    14 pc={(cc==0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 290
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 17 to 17 -- after reload
;;   ======================================================

;;	  0-->    17 pc={(gtu(cc,0x0))?L29:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 17
;;   new tail = 17

;;   ======================================================
;;   -- basic block 5 from 18 to 20 -- after reload
;;   ======================================================

;;	  0-->    18 r2=r2-0x400                       :cortex_a8_default
;;	  1-->    19 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    20 pc={(cc==0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 18
;;   new tail = 20

;;   ======================================================
;;   -- basic block 6 from 21 to 23 -- after reload
;;   ======================================================

;;	  0-->    21 r2=r2+0x200                       :cortex_a8_default
;;	  1-->    22 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    23 pc={(cc==0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 21
;;   new tail = 23

;;   ======================================================
;;   -- basic block 7 from 24 to 348 -- after reload
;;   ======================================================

;;	  0-->    24 r2=r2-0x540                       :cortex_a8_default
;;	  1-->    25 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  1-->   348 pc=L345                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 24
;;   new tail = 348

;;   ======================================================
;;   -- basic block 8 from 30 to 32 -- after reload
;;   ======================================================

;;	  0-->    30 r2=0xc080                         :cortex_a8_default
;;	  1-->    31 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    32 pc={(cc==0x0)?L64:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 30
;;   new tail = 32

;;   ======================================================
;;   -- basic block 9 from 35 to 35 -- after reload
;;   ======================================================

;;	  0-->    35 pc={(gtu(cc,0x0))?L41:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 35
;;   new tail = 35

;;   ======================================================
;;   -- basic block 10 from 36 to 38 -- after reload
;;   ======================================================

;;	  0-->    36 r2=r2-0x30                        :cortex_a8_default
;;	  1-->    37 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    38 pc={(cc!=0x0)?L200:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 36
;;   new tail = 38

;;   ======================================================
;;   -- basic block 11 from 352 to 352 -- after reload
;;   ======================================================

;;	  0-->   352 pc=L351                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 352
;;   new tail = 352

;;   ======================================================
;;   -- basic block 12 from 42 to 44 -- after reload
;;   ======================================================

;;	  0-->    42 r2=0xc090                         :cortex_a8_default
;;	  1-->    43 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    44 pc={(cc==0x0)?L91:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 42
;;   new tail = 44

;;   ======================================================
;;   -- basic block 13 from 45 to 47 -- after reload
;;   ======================================================

;;	  0-->    45 r2=r2+0x60                        :cortex_a8_default
;;	  1-->    46 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  3-->    47 pc={(cc!=0x0)?L200:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 45
;;   new tail = 47

;;   ======================================================
;;   -- basic block 14 from 356 to 356 -- after reload
;;   ======================================================

;;	  0-->   356 pc=L355                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 356
;;   new tail = 356

;;   ======================================================
;;   -- basic block 15 from 66 to 358 -- after reload
;;   ======================================================

;;	  0-->    66 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->   308 r1=0x4                            :cortex_a8_default
;;	  1-->    73 r2=`*.LANCHOR3'                   :cortex_a8_load_store_1
;;	  3-->    68 [r3+0x50]=r1                      :cortex_a8_load_store_1
;;	  3-->    77 r1=r2+0xa8                        :cortex_a8_default
;;	  4-->    78 [r3+0x80]=r1                      :cortex_a8_load_store_1
;;	  5-->   307 r1=`*.LC3'                        :cortex_a8_load_store_1
;;	  5-->   358 pc=L324                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 66
;;   new tail = 358

;;   ======================================================
;;   -- basic block 16 from 93 to 360 -- after reload
;;   ======================================================

;;	  0-->    93 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->   305 r1=0x5                            :cortex_a8_default
;;	  1-->   101 r2=const(`*.LANCHOR3'+0xcc)       :cortex_a8_load_store_1
;;	  3-->    95 [r3+0x50]=r1                      :cortex_a8_load_store_1
;;	  3-->   105 r1=r2+0xa8                        :cortex_a8_default
;;	  4-->   106 [r3+0x80]=r1                      :cortex_a8_load_store_1
;;	  5-->   304 r1=`*.LC4'                        :cortex_a8_load_store_1
;;	  5-->   360 pc=L324                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 93
;;   new tail = 360

;;   ======================================================
;;   -- basic block 17 from 121 to 362 -- after reload
;;   ======================================================

;;	  0-->   121 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->   302 r1=0x6                            :cortex_a8_default
;;	  1-->   129 r2=const(`*.LANCHOR3'+0x198)      :cortex_a8_load_store_1
;;	  3-->   123 [r3+0x50]=r1                      :cortex_a8_load_store_1
;;	  3-->   133 r1=r2+0xa8                        :cortex_a8_default
;;	  4-->   134 [r3+0x80]=r1                      :cortex_a8_load_store_1
;;	  5-->   301 r1=`*.LC5'                        :cortex_a8_load_store_1
;;	  5-->   362 pc=L324                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 121
;;   new tail = 362

;;   ======================================================
;;   -- basic block 18 from 149 to 298 -- after reload
;;   ======================================================

;;	  0-->   149 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->   299 r1=0x7                            :cortex_a8_default
;;	  1-->   157 r2=const(`*.LANCHOR3'+0x264)      :cortex_a8_load_store_1
;;	  3-->   151 [r3+0x50]=r1                      :cortex_a8_load_store_1
;;	  3-->   161 r1=r2+0xa8                        :cortex_a8_default
;;	  4-->   162 [r3+0x80]=r1                      :cortex_a8_load_store_1
;;	  5-->   298 r1=`*.LC6'                        :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 149
;;   new tail = 298

;;   ======================================================
;;   -- basic block 19 from 154 to 364 -- after reload
;;   ======================================================

;;	  0-->   154 [r3+0x54]=r1                      :cortex_a8_load_store_1
;;	  1-->   158 [r3+0x7c]=r2                      :cortex_a8_load_store_1
;;	  2-->   163 r2=asm_operands                   :nothing
;;	  3-->   166 r2=zxt(r2,0x5,0xb)                :cortex_a8_default
;;	  4-->   167 r2=r2+0x1                         :cortex_a8_default
;;	  4-->   168 [r3+0x88]=r2                      :cortex_a8_load_store_1
;;	  5-->   297 r2=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  5-->   171 r3=r3+0x50                        :cortex_a8_default
;;	  8-->   172 [r2]=r3                           :cortex_a8_load_store_1
;;	  8-->   364 pc=L200                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 154
;;   new tail = 364

;;   ======================================================
;;   -- basic block 20 from 177 to 178 -- after reload
;;   ======================================================

;;	  0-->   177 cc=cmp(r3,0x69)                   :cortex_a8_default
;;	  2-->   178 pc={(cc!=0x0)?L200:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 177
;;   new tail = 178

;;   ======================================================
;;   -- basic block 21 from 181 to 183 -- after reload
;;   ======================================================

;;	  0-->   181 r2=zxt(r2,0x3,0xd)                :cortex_a8_default
;;	  1-->   182 cc=cmp(r2,0x1)                    :cortex_a8_default
;;	  3-->   183 pc={(cc==0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 181
;;   new tail = 183

;;   ======================================================
;;   -- basic block 22 from 184 to 184 -- after reload
;;   ======================================================

;;	  0-->   184 cc=cmp(r2,0x2)                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 184
;;   new tail = 184

;;   ======================================================
;;   -- basic block 23 from 185 to 185 -- after reload
;;   ======================================================

;;	  0-->   185 pc={(cc!=0x0)?L200:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 185
;;   new tail = 185

;;   ======================================================
;;   -- basic block 24 from 198 to 199 -- after reload
;;   ======================================================

;;	  0-->   295 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->   198 r2=0x0                            :cortex_a8_default
;;	  3-->   199 [r3]=r2                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 198
;;   new tail = 199

;;   ======================================================
;;   -- basic block 25 from 202 to 205 -- after reload
;;   ======================================================

;;	  0-->   202 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   203 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->   204 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->   205 pc={(cc==0x0)?L214:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 202
;;   new tail = 205

;;   ======================================================
;;   -- basic block 26 from 210 to 366 -- after reload
;;   ======================================================

;;	  0-->   210 r2=[r3+0x38]                      :cortex_a8_load_store_1
;;	  1-->   209 r1=[r3+0x4]                       :cortex_a8_load_store_1
;;	  2-->   208 r0=`*.LC7'                        :cortex_a8_load_store_1
;;	  3-->   211 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->   366 pc=L219                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 210
;;   new tail = 366

;;   ======================================================
;;   -- basic block 27 from 217 to 218 -- after reload
;;   ======================================================

;;	  0-->   217 r0=`*.LC8'                        :cortex_a8_load_store_1
;;	  1-->   218 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 217
;;   new tail = 218

;;   ======================================================
;;   -- basic block 28 from 223 to 320 -- after reload
;;   ======================================================

;;	  0-->   225 r2=0x4                            :cortex_a8_default
;;	  0-->   224 r1=`*.LC9'                        :cortex_a8_load_store_1
;;	  1-->   223 r0=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  2-->   226 r0=call [`perf_pmu_register']     :cortex_a8_issue_branch
;;	  2-->   231 r0=0x0                            :cortex_a8_default
;;	  3-->   237 use r0                            :nothing
;;	  3-->   320 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 223
;;   new tail = 320





init_hw_perf_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={18d,11u} r2={25d,30u} r3={15d,29u,9d} r4={1d,2u} r12={3d} r13={2d,32u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={17d,14u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 557{423d,125u,9e} in 104{101 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 6 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cputype.h:60 (parallel [
            (set (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 8511357))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/perf_event.c:645 (set (reg/v:SI 3 r3 [orig:137 implementor ] [137])
        (lshiftrt:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 24 [0x18]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 7 6 317 2 arch/arm/kernel/perf_event.c:649 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 65 [0x41]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 317 7 318 2 arch/arm/kernel/perf_event.c:643 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 318 317 8 2 NOTE_INSN_PROLOGUE_END)

(jump_insn:TI 8 318 9 2 arch/arm/kernel/perf_event.c:649 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 20)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  20 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 9 8 290 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 290 9 291 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (const_int 65520 [0xfff0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 65520 [0xfff0])
        (nil)))

(insn:TI 291 290 311 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (and:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (reg:SI 3 r3 [141]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
        (nil)))

(insn 311 291 13 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [143])
        (const_int 46944 [0xb760])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 46944 [0xb760])
        (nil)))

(insn:TI 13 311 14 3 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46944 [0xb760]))
        (nil)))

(jump_insn:TI 14 13 239 3 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 3 -> ( 24 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  24 [29.0%] 
;; Succ edge  4 [71.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 239 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 17 239 240 4 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  8 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 240 17 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 240 19 5 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [145])
        (plus:SI (reg:SI 2 r2 [145])
            (const_int -1024 [0xfffffffffffffc00]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 45920 [0xb360])
        (nil)))

(insn:TI 19 18 20 5 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 45920 [0xb360]))
        (nil)))

(jump_insn:TI 20 19 241 5 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 5 -> ( 24 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  6 [71.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%]  (fallthru)
(note 241 20 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 241 22 6 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 2 r2 [146])
            (const_int 512 [0x200]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 46432 [0xb560])
        (nil)))

(insn:TI 22 21 23 6 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46432 [0xb560]))
        (nil)))

(jump_insn:TI 23 22 242 6 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 6 -> ( 24 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  7 [71.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  6 [71.0%]  (fallthru)
(note 242 23 24 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 242 25 7 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [147])
        (plus:SI (reg:SI 2 r2 [147])
            (const_int -1344 [0xfffffffffffffac0]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 45088 [0xb020])
        (nil)))

(insn:TI 25 24 348 7 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [147]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [147])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 45088 [0xb020]))
                (nil)))))

(jump_insn 348 25 349 7 (set (pc)
        (label_ref 345)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 23)
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  23 [100.0%] 

(barrier 349 348 29)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 29 349 244 8 103 "" [1 uses])

(note 244 29 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 30 244 31 8 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [148])
        (const_int 49280 [0xc080])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49280 [0xc080])
        (nil)))

(insn:TI 31 30 32 8 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [148]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49280 [0xc080]))
        (nil)))

(jump_insn:TI 32 31 245 8 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  15 [29.0%] 
;; Succ edge  9 [71.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [71.0%]  (fallthru)
(note 245 32 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 35 245 246 9 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 12 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 246 35 36 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 246 37 10 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [150])
        (plus:SI (reg:SI 2 r2 [150])
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 49232 [0xc050])
        (nil)))

(insn:TI 37 36 38 10 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [150])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 49232 [0xc050]))
                (nil)))))

(jump_insn:TI 38 37 350 10 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [29.0%]  (fallthru)
(note 350 38 352 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 352 350 353 11 (set (pc)
        (label_ref 351)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 17)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 353 352 41)

;; Start of basic block ( 9) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%] 
(code_label 41 353 248 12 104 "" [1 uses])

(note 248 41 42 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 248 43 12 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [151])
        (const_int 49296 [0xc090])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49296 [0xc090])
        (nil)))

(insn:TI 43 42 44 12 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49296 [0xc090]))
        (nil)))

(jump_insn:TI 44 43 249 12 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 12 -> ( 16 13)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  16 [29.0%] 
;; Succ edge  13 [71.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [71.0%]  (fallthru)
(note 249 44 45 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 249 46 13 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [152])
        (plus:SI (reg:SI 2 r2 [152])
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 49392 [0xc0f0])
        (nil)))

(insn:TI 46 45 47 13 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [152]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 2 r2 [152])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
                    (const_int 49392 [0xc0f0]))
                (nil)))))

(jump_insn:TI 47 46 354 13 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 13 -> ( 14 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  14 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [29.0%]  (fallthru)
(note 354 47 356 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 356 354 357 14 (set (pc)
        (label_ref 355)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 357 356 64)

;; Start of basic block ( 8) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  8 [29.0%] 
(code_label 64 357 65 15 100 "" [1 uses])

(note 65 64 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 81 65 66 15 NOTE_INSN_DELETED)

(insn:TI 66 81 308 15 arch/arm/kernel/perf_event_v7.c:1193 (set (reg/f:SI 3 r3 [157])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 308 66 73 15 arch/arm/kernel/perf_event_v7.c:1193 (set (reg:SI 1 r1 [158])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn:TI 73 308 68 15 arch/arm/kernel/perf_event_v7.c:1195 (set (reg/f:SI 2 r2 [162])
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(insn:TI 68 73 77 15 arch/arm/kernel/perf_event_v7.c:1193 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [158])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [158])
        (expr_list:REG_EQUAL (const_int 4 [0x4])
            (nil))))

(insn 77 68 78 15 arch/arm/kernel/perf_event_v7.c:1196 (set (reg/f:SI 1 r1 [165])
        (plus:SI (reg/f:SI 2 r2 [162])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 168 [0xa8])))
        (nil)))

(insn:TI 78 77 307 15 arch/arm/kernel/perf_event_v7.c:1196 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [165])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [165])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 168 [0xa8])))
            (nil))))

(insn:TI 307 78 358 15 arch/arm/kernel/perf_event_v7.c:1194 (set (reg/f:SI 1 r1 [160])
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)
        (nil)))

(jump_insn 358 307 359 15 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 359 358 91)

;; Start of basic block ( 12) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [29.0%] 
(code_label 91 359 92 16 101 "" [1 uses])

(note 92 91 109 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 109 92 93 16 NOTE_INSN_DELETED)

(insn:TI 93 109 305 16 arch/arm/kernel/perf_event_v7.c:1203 (set (reg/f:SI 3 r3 [173])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 305 93 101 16 arch/arm/kernel/perf_event_v7.c:1203 (set (reg:SI 1 r1 [174])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 101 305 95 16 arch/arm/kernel/perf_event_v7.c:1205 (set (reg/f:SI 2 r2 [179])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))
        (nil)))

(insn:TI 95 101 105 16 arch/arm/kernel/perf_event_v7.c:1203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [174])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [174])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn 105 95 106 16 arch/arm/kernel/perf_event_v7.c:1206 (set (reg/f:SI 1 r1 [182])
        (plus:SI (reg/f:SI 2 r2 [179])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 372 [0x174])))
        (nil)))

(insn:TI 106 105 304 16 arch/arm/kernel/perf_event_v7.c:1206 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [182])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [182])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 372 [0x174])))
            (nil))))

(insn:TI 304 106 360 16 arch/arm/kernel/perf_event_v7.c:1204 (set (reg/f:SI 1 r1 [176])
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)
        (nil)))

(jump_insn 360 304 361 16 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 361 360 351)

;; Start of basic block ( 11) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 351 361 120 17 113 "" [1 uses])

(note 120 351 137 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 137 120 121 17 NOTE_INSN_DELETED)

(insn:TI 121 137 302 17 arch/arm/kernel/perf_event_v7.c:1213 (set (reg/f:SI 3 r3 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 302 121 129 17 arch/arm/kernel/perf_event_v7.c:1213 (set (reg:SI 1 r1 [191])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn:TI 129 302 123 17 arch/arm/kernel/perf_event_v7.c:1215 (set (reg/f:SI 2 r2 [196])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))
        (nil)))

(insn:TI 123 129 133 17 arch/arm/kernel/perf_event_v7.c:1213 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [191])
        (expr_list:REG_EQUAL (const_int 6 [0x6])
            (nil))))

(insn 133 123 134 17 arch/arm/kernel/perf_event_v7.c:1216 (set (reg/f:SI 1 r1 [199])
        (plus:SI (reg/f:SI 2 r2 [196])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 576 [0x240])))
        (nil)))

(insn:TI 134 133 301 17 arch/arm/kernel/perf_event_v7.c:1216 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [199])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [199])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 576 [0x240])))
            (nil))))

(insn:TI 301 134 362 17 arch/arm/kernel/perf_event_v7.c:1214 (set (reg/f:SI 1 r1 [193])
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)
        (nil)))

(jump_insn 362 301 363 17 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 363 362 355)

;; Start of basic block ( 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 355 363 148 18 114 "" [1 uses])

(note 148 355 165 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 165 148 149 18 NOTE_INSN_DELETED)

(insn:TI 149 165 299 18 arch/arm/kernel/perf_event_v7.c:1223 (set (reg/f:SI 3 r3 [207])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 299 149 157 18 arch/arm/kernel/perf_event_v7.c:1223 (set (reg:SI 1 r1 [208])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn:TI 157 299 151 18 arch/arm/kernel/perf_event_v7.c:1225 (set (reg/f:SI 2 r2 [213])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))
        (nil)))

(insn:TI 151 157 161 18 arch/arm/kernel/perf_event_v7.c:1223 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [208])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [208])
        (expr_list:REG_EQUAL (const_int 7 [0x7])
            (nil))))

(insn 161 151 162 18 arch/arm/kernel/perf_event_v7.c:1226 (set (reg/f:SI 1 r1 [216])
        (plus:SI (reg/f:SI 2 r2 [213])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 780 [0x30c])))
        (nil)))

(insn:TI 162 161 298 18 arch/arm/kernel/perf_event_v7.c:1226 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [216])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [216])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                    (const_int 780 [0x30c])))
            (nil))))

(insn:TI 298 162 324 18 arch/arm/kernel/perf_event_v7.c:1224 (set (reg/f:SI 1 r1 [210])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 16 15 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  17 [100.0%] 
(code_label 324 298 322 19 110 "" [3 uses])

(note 322 324 154 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 154 322 158 19 arch/arm/kernel/perf_event_v7.c:1224 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [210])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [210])
        (nil)))

(insn:TI 158 154 163 19 arch/arm/kernel/perf_event_v7.c:1225 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [213])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [213])
        (nil)))

(insn:TI 163 158 166 19 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn:TI 166 163 167 19 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [219])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:133 val ] [133])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(insn:TI 167 166 168 19 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [220])
        (plus:SI (reg:SI 2 r2 [219])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 168 167 297 19 arch/arm/kernel/perf_event_v7.c:1227 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [220])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [220])
        (nil)))

(insn:TI 297 168 171 19 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 2 r2 [221])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 171 297 172 19 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 3 r3 [223])
        (plus:SI (reg/f:SI 3 r3 [207])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn:TI 172 171 364 19 arch/arm/kernel/perf_event.c:669 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [221]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [223])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [223])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [221])
            (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 80 [0x50])))
                (nil)))))

(jump_insn 364 172 365 19 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 365 364 175)

;; Start of basic block ( 2) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 175 365 176 20 95 "" [1 uses])

(note 176 175 177 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 177 176 178 20 arch/arm/kernel/perf_event.c:673 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 105 [0x69]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:137 implementor ] [137])
        (nil)))

(jump_insn:TI 178 177 179 20 arch/arm/kernel/perf_event.c:673 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 20 -> ( 21 25)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  21 [28.0%]  (fallthru)
;; Succ edge  25 [72.0%] 

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  20 [28.0%]  (fallthru)
(note 179 178 180 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 180 179 181 21 NOTE_INSN_DELETED)

(insn:TI 181 180 182 21 arch/arm/kernel/perf_event.c:675 (set (reg:SI 2 r2 [225])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 3 [0x3])
            (const_int 13 [0xd]))) 124 {extzv_t2} (nil))

(insn:TI 182 181 183 21 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 183 182 251 21 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 21 -> ( 24 22)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%] 
;; Succ edge  22 [71.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%]  (fallthru)
(note 251 183 184 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 184 251 345 22 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [225])
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 13 [sp] 24 [cc]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 22 7) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 345 184 343 23 112 "" [1 uses])

(note 343 345 185 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 185 343 195 23 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  24 [29.0%]  (fallthru)
;; Succ edge  25 [71.0%] 

;; Start of basic block ( 23 21 5 6 3) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  23 [29.0%]  (fallthru)
;; Pred edge  21 [29.0%] 
;; Pred edge  5 [29.0%] 
;; Pred edge  6 [29.0%] 
;; Pred edge  3 [29.0%] 
(code_label 195 185 196 24 106 "" [4 uses])

(note 196 195 295 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 295 196 198 24 arch/arm/kernel/perf_event.c:680 (set (reg/f:SI 3 r3 [228])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 198 295 199 24 arch/arm/kernel/perf_event.c:680 (set (reg:SI 2 r2 [229])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 199 198 200 24 arch/arm/kernel/perf_event.c:680 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [228]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [229])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [228])
        (expr_list:REG_DEAD (reg:SI 2 r2 [229])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 24 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 10 20 23 13 24 19) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [71.0%] 
;; Pred edge  20 [72.0%] 
;; Pred edge  23 [71.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 200 199 201 25 96 "" [5 uses])

(note 201 200 202 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 202 201 203 25 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [230])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 203 202 204 25 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [230]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 204 203 205 25 arch/arm/kernel/perf_event.c:685 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 205 204 206 25 arch/arm/kernel/perf_event.c:685 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 214)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2000 [0x7d0])
            (nil))))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  26 [80.0%]  (fallthru)
;; Succ edge  27 [20.0%] 

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  25 [80.0%]  (fallthru)
(note 206 205 210 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 206 209 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 209 210 208 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
        (nil)))

(insn:TI 208 209 211 26 arch/arm/kernel/perf_event.c:686 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)
        (nil)))

(call_insn:TI 211 208 366 26 arch/arm/kernel/perf_event.c:686 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 366 211 367 26 (set (pc)
        (label_ref 219)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 28)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 367 366 214)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  25 [20.0%] 
(code_label 214 367 215 27 107 "" [1 uses])

(note 215 214 217 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 217 215 218 27 arch/arm/kernel/perf_event.c:689 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)
        (nil)))

(call_insn:TI 218 217 219 27 arch/arm/kernel/perf_event.c:689 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 219 218 220 28 108 "" [1 uses])

(note 220 219 225 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 225 220 224 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 2 r2)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 224 225 223 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)
        (nil)))

(insn:TI 223 224 226 28 arch/arm/kernel/perf_event.c:692 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn:TI 226 223 231 28 arch/arm/kernel/perf_event.c:692 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_pmu_register") [flags 0x41] <function_decl 0x113ba880 perf_pmu_register>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 231 226 237 28 arch/arm/kernel/perf_event.c:695 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 237 231 319 28 arch/arm/kernel/perf_event.c:695 (use (reg/i:SI 0 r0)) -1 (nil))

(note 319 237 320 28 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 320 319 321 28 arch/arm/kernel/perf_event.c:695 (return) 260 {return} (nil))
;; End of basic block 28 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 321 320 294)

(note 294 321 312 NOTE_INSN_DELETED)

(note 312 294 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_event_set_period (armpmu_event_set_period)[0:1311]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 29 (  1.8)


armpmu_event_set_period

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={4d,10u} r2={3d,1u} r3={6d,8u} r4={2d,3u} r5={4d,3u} r6={6d,11u} r7={6d,8u} r8={3d,10u} r9={3d,9u} r10={4d,3u} r11={4d,3u} r12={3d,2u} r13={2d,18u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={14d,10u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 404{295d,109u,0e} in 50{48 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]

( 2 )->[3]->( 6 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 4 2 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 3 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 6 5 )->[7]->( 11 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]

( 7 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 8 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]

( 9 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 10 7 9 )->[11]->( 14 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]

( 11 )->[12]->( 15 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]

( 12 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]

( 11 13 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 12 13 14 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 135 to worklist
  Adding insn 18 to worklist
  Adding insn 20 to worklist
  Adding insn 140 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 39 to worklist
  Adding insn 41 to worklist
  Adding insn 43 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
  Adding insn 61 to worklist
  Adding insn 63 to worklist
  Adding insn 65 to worklist
  Adding insn 138 to worklist
  Adding insn 93 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
  Adding insn 75 to worklist
Finished finding needed instructions:
processing block 15 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 87 to worklist
  Adding insn 81 to worklist
  Adding insn 78 to worklist
  Adding insn 79 to worklist
  Adding insn 73 to worklist
  Adding insn 74 to worklist
processing block 14 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 126 to worklist
  Adding insn 125 to worklist
processing block 13 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
  Adding insn 64 to worklist
processing block 12 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
processing block 11 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
  Adding insn 60 to worklist
  Adding insn 115 to worklist
  Adding insn 116 to worklist
  Adding insn 57 to worklist
  Adding insn 129 to worklist
processing block 10 lr out =  1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 53 to worklist
  Adding insn 132 to worklist
  Adding insn 131 to worklist
processing block 9 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
  Adding insn 42 to worklist
processing block 8 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
processing block 7 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
  Adding insn 38 to worklist
processing block 5 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
  Adding insn 27 to worklist
processing block 6 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 35 to worklist
processing block 4 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
  Adding insn 19 to worklist
processing block 3 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 2 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 8 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 30 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 135 to 16 -- after reload
;;   ======================================================

;;	  0-->   135 {[--sp]=unspec[r3] 2;use r4;use r5:cortex_a8_load_store_2
;;	  1-->     2 r4=r0                             :cortex_a8_default
;;	  2-->     8 r3=r1+0x68                        :cortex_a8_default
;;	  3-->    10 r6=asm_operands                   :nothing
;;	  4-->    12 r8=[r1+0x58]                      :cortex_a8_load_store_1
;;	  6-->    14 {sl=-r8;clobber cc;}              :cortex_a8_default
;;	  7-->    15 cc=cmp(r7,fp)                     :cortex_a8_default
;;	  9-->    16 pc={(cc>0x0)?L113:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 135
;;   new tail = 16

;;   ======================================================
;;   -- basic block 3 from 18 to 18 -- after reload
;;   ======================================================

;;	  0-->    18 pc={(cc!=0x0)?L30:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 18
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 19 to 20 -- after reload
;;   ======================================================

;;	  0-->    19 cc=cmp(r6,sl)                     :cortex_a8_default
;;	  2-->    20 pc={(leu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 19
;;   new tail = 20

;;   ======================================================
;;   -- basic block 5 from 27 to 140 -- after reload
;;   ======================================================

;;	  0-->    27 r5=0x0                            :cortex_a8_default
;;	  0-->   140 pc=L36                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 27
;;   new tail = 140

;;   ======================================================
;;   -- basic block 6 from 32 to 33 -- after reload
;;   ======================================================

;;	  0-->    32 {r6=asm_operands;[r1+0x68]=asm_ope:nothing
;;	  1-->    35 r5=0x1                            :cortex_a8_default
;;	  1-->   133 r6=r8                             :cortex_a8_default
;;	  2-->   134 r7=r9                             :cortex_a8_default
;;	  2-->    33 [r1+0x60]=r8                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 32
;;   new tail = 33

;;   ======================================================
;;   -- basic block 7 from 38 to 39 -- after reload
;;   ======================================================

;;	  0-->    38 cc=cmp(r7,0x0)                    :cortex_a8_default
;;	  2-->    39 pc={(cc>0x0)?L54:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 38
;;   new tail = 39

;;   ======================================================
;;   -- basic block 8 from 41 to 41 -- after reload
;;   ======================================================

;;	  0-->    41 pc={(cc!=0x0)?L114:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 41
;;   new tail = 41

;;   ======================================================
;;   -- basic block 9 from 42 to 43 -- after reload
;;   ======================================================

;;	  0-->    42 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	  2-->    43 pc={(cc!=0x0)?L54:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 42
;;   new tail = 43

;;   ======================================================
;;   -- basic block 10 from 131 to 52 -- after reload
;;   ======================================================

;;	  0-->   131 {cc=cmp(r6+r8,r6);r6=r6+r8;}      :cortex_a8_default
;;	  1-->   132 r7=ltu(cc,0x0)+r7+r9              :cortex_a8_default
;;	  2-->    51 {sl=asm_operands;[r1+0x68]=asm_ope:nothing
;;	  3-->    53 r5=0x1                            :cortex_a8_default
;;	  3-->    52 [r1+0x60]=r8                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 131
;;   new tail = 52

;;   ======================================================
;;   -- basic block 11 from 129 to 61 -- after reload
;;   ======================================================

;;	  0-->   129 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    57 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   116 r0=[r3+0x44]                      :cortex_a8_load_store_1
;;	  7-->   115 ip=[r3+0x40]                      :cortex_a8_load_store_1
;;	  8-->    60 cc=cmp(r7,r0)                     :cortex_a8_default
;;	 10-->    61 pc={(cc>0x0)?L70:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 129
;;   new tail = 61

;;   ======================================================
;;   -- basic block 12 from 63 to 63 -- after reload
;;   ======================================================

;;	  0-->    63 pc={(cc!=0x0)?L72:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 63
;;   new tail = 63

;;   ======================================================
;;   -- basic block 13 from 64 to 65 -- after reload
;;   ======================================================

;;	  0-->    64 cc=cmp(r6,ip)                     :cortex_a8_default
;;	  2-->    65 pc={(leu(cc,0x0))?L72:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 64
;;   new tail = 65

;;   ======================================================
;;   -- basic block 14 from 125 to 126 -- after reload
;;   ======================================================

;;	  0-->   125 r6=ip                             :cortex_a8_default
;;	  0-->   126 r7=r0                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 125
;;   new tail = 126

;;   ======================================================
;;   -- basic block 15 from 74 to 138 -- after reload
;;   ======================================================

;;	  0-->    74 {r8=-r6;clobber cc;}              :cortex_a8_default
;;	  0-->    73 r0=r1+0x50                        :cortex_a8_default
;;	  1-->    75 {sl=asm_operands;[r1+0x50]=asm_ope:nothing
;;	  2-->    78 r0=r2                             :cortex_a8_default
;;	  2-->    79 r1=-r6                            :cortex_a8_default
;;	  3-->    80 call [[r3+0x1c]]                  :cortex_a8_issue_branch
;;	  3-->    81 r0=r4                             :cortex_a8_default
;;	  4-->    82 call [`perf_event_update_userpage':cortex_a8_issue_branch
;;	  4-->    87 r0=r5                             :cortex_a8_default
;;	  5-->    93 use r0                            :nothing
;;	  5-->   138 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 74
;;   new tail = 138





armpmu_event_set_period

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={4d,10u} r2={3d,1u} r3={6d,8u} r4={2d,3u} r5={4d,3u} r6={6d,11u} r7={6d,8u} r8={3d,10u} r9={3d,9u} r10={4d,3u} r11={4d,3u} r12={3d,2u} r13={2d,18u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={14d,10u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 404{295d,109u,0e} in 50{48 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 135 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 135 5 136 2 arch/arm/kernel/perf_event.c:174 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] 2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 sl)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_DEAD (reg:SI 3 r3)
                                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                        (set/f (reg/f:SI 13 sp)
                                                            (plus:SI (reg/f:SI 13 sp)
                                                                (const_int -40 [0xffffffffffffffd8])))
                                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                            (reg:SI 3 r3))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 4 [0x4])) [0 S4 A32])
                                                            (reg:SI 4 r4))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 8 [0x8])) [0 S4 A32])
                                                            (reg:SI 5 r5))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 12 [0xc])) [0 S4 A32])
                                                            (reg:SI 6 r6))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 16 [0x10])) [0 S4 A32])
                                                            (reg:SI 7 r7))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 20 [0x14])) [0 S4 A32])
                                                            (reg:SI 8 r8))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 24 [0x18])) [0 S4 A32])
                                                            (reg:SI 9 r9))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                                            (reg:SI 10 sl))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 32 [0x20])) [0 S4 A32])
                                                            (reg:SI 11 fp))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 36 [0x24])) [0 S4 A32])
                                                            (reg:SI 14 lr))
                                                    ])
                                                (nil)))))))))))))

(note 136 135 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 136 8 2 arch/arm/kernel/perf_event.c:174 (set (reg/v/f:SI 4 r4 [orig:146 event ] [146])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(insn:TI 8 2 10 2 arch/arm/kernel/perf_event.c:175 (set (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 8 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 6 r6 [orig:141 left ] [141])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(insn:TI 12 10 14 2 arch/arm/kernel/perf_event.c:176 (set (reg:DI 8 r8 [orig:143 D.25193 ] [143])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 88 [0x58])) [0 <variable>.sample_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 14 12 15 2 arch/arm/kernel/perf_event.c:179 (parallel [
            (set (reg:DI 10 sl [149])
                (neg:DI (reg:DI 8 r8 [orig:143 D.25193 ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 15 14 16 2 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (reg:SI 11 fp [+4 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 11 fp [+4 ])
        (nil)))

(jump_insn:TI 16 15 95 2 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 95 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 18 95 96 3 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 96 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 96 20 4 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (reg:SI 10 sl [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 10 sl [149])
        (nil)))

(jump_insn:TI 20 19 113 4 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 113 20 26 5 128 "" [1 uses])

(note 26 113 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 140 5 arch/arm/kernel/perf_event.c:177 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 140 27 141 5 (set (pc)
        (label_ref 36)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 141 140 30)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [50.0%] 
(code_label 30 141 31 6 120 "" [2 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 35 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:136 tmp ] [136])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:DI 6 r6 [orig:136 tmp ] [136])
            (nil))))

(insn:TI 35 32 133 6 arch/arm/kernel/perf_event.c:183 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 133 35 134 6 arch/arm/kernel/perf_event.c:180 (set (reg:SI 6 r6 [orig:141 left ] [141])
        (reg:SI 8 r8 [orig:143 D.25193 ] [143])) 167 {*arm_movsi_insn} (nil))

(insn:TI 134 133 33 6 arch/arm/kernel/perf_event.c:180 (set (reg:SI 7 r7 [ left+4 ])
        (reg:SI 9 r9 [ D.25193+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 33 134 36 6 arch/arm/kernel/perf_event.c:182 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 36 33 37 7 122 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 37 39 7 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 39 38 100 7 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
        (nil)))
;; End of basic block 7 -> ( 11 8)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]


;; Succ edge  11 [79.0%] 
;; Succ edge  8 [21.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [21.0%]  (fallthru)
(note 100 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 41 100 101 8 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 101 41 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 101 43 9 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 43 42 114 9 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [50.0%]  (fallthru)
;; Pred edge  8 [50.0%] 
(code_label 114 43 49 10 129 "" [1 uses])

(note 49 114 131 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 131 49 132 10 arch/arm/kernel/perf_event.c:187 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 6 r6 [orig:141 left ] [141])
                        (reg:SI 8 r8 [orig:143 D.25193 ] [143]))
                    (reg:SI 6 r6 [orig:141 left ] [141])))
            (set (reg:SI 6 r6 [orig:141 left ] [141])
                (plus:SI (reg:SI 6 r6 [orig:141 left ] [141])
                    (reg:SI 8 r8 [orig:143 D.25193 ] [143])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn:TI 132 131 51 10 arch/arm/kernel/perf_event.c:187 (set (reg:SI 7 r7 [ left+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 7 r7 [ left+4 ])
                (reg:SI 9 r9 [ D.25193+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 51 132 53 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:135 tmp ] [135])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg/v:DI 10 sl [orig:135 tmp ] [135])
                (nil)))))

(insn:TI 53 51 52 10 arch/arm/kernel/perf_event.c:190 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 52 53 54 10 arch/arm/kernel/perf_event.c:189 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [79.0%] 
;; Pred edge  9 [50.0%] 
(code_label 54 52 55 11 123 "" [2 uses])

(note 55 54 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 129 55 57 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 57 129 116 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [150]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 116 57 115 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 0 r0 [orig:158+4 ] [158])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 68 [0x44])) [0 <variable>.max_period+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 115 116 60 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 12 ip [orig:157 <variable>.max_period ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 115 61 11 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left.797+4 ])
            (reg:SI 0 r0 [orig:158+4 ] [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 61 60 105 11 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]


;; Succ edge  14 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 105 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 63 105 106 12 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 15 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  15 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [29.0%]  (fallthru)
(note 106 63 64 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 64 106 65 13 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:133 left.797 ] [133])
            (reg:SI 12 ip [orig:157 <variable>.max_period ] [157]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 65 64 70 13 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 11 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 70 65 109 14 126 "" [1 uses])

(note 109 70 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 109 126 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 6 r6 [orig:162 left.797 ] [162])
        (reg:SI 12 ip [orig:160 left.797 ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:160 left.797 ] [160])
        (nil)))

(insn 126 125 72 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 7 r7 [ left.797+4 ])
        (reg:SI 0 r0 [orig:161 left.797+4 ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:161 left.797+4 ] [161])
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 12 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  12 [71.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 72 126 110 15 125 "" [2 uses])

(note 110 72 76 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 76 110 77 15 NOTE_INSN_DELETED)

(note 77 76 74 15 NOTE_INSN_DELETED)

(insn:TI 74 77 73 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg:DI 8 r8 [153])
                (neg:DI (reg/v:DI 6 r6 [orig:133 left.797 ] [133])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 73 74 75 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 0 r0 [152])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 75 73 78 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:134 tmp ] [134])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 80 [0x50])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [152])
            (expr_list:REG_UNUSED (reg:QI 24 cc)
                (nil)))))

(insn:TI 78 75 79 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 0 r0)
        (reg/v:SI 2 r2 [orig:148 idx ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:148 idx ] [148])
        (nil)))

(insn 79 78 80 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 1 r1)
        (neg:SI (reg:SI 6 r6 [orig:133 left.797 ] [133]))) 127 {*arm_negsi2} (nil))

(call_insn:TI 80 79 81 15 arch/arm/kernel/perf_event.c:198 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                            (const_int 28 [0x1c])) [0 <variable>.write_counter+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 81 80 82 15 arch/arm/kernel/perf_event.c:200 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:146 event ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 82 81 87 15 arch/arm/kernel/perf_event.c:200 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 87 82 93 15 arch/arm/kernel/perf_event.c:203 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:139 ret ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 93 87 137 15 arch/arm/kernel/perf_event.c:203 (use (reg/i:SI 0 r0)) -1 (nil))

(note 137 93 138 15 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 138 137 139 15 arch/arm/kernel/perf_event.c:203 (return) 260 {return} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 139 138 128)

(note 128 139 130 NOTE_INSN_DELETED)

(note 130 128 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_start (armpmu_start)[0:1315]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 68 to 10 -- after reload
;;   ======================================================

;;	  0-->    68 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r5=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->     2 r4=r0                             :cortex_a8_default
;;	  4-->     8 r3=[r5]                           :cortex_a8_load_store_1
;;	  6-->     9 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  8-->    10 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 68
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 13 to 14 -- after reload
;;   ======================================================

;;	  0-->    13 cc=cmp(zxt(r1,0x1,0x1),0x0)       :cortex_a8_default
;;	  2-->    14 pc={(cc==0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 13
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 16 to 19 -- after reload
;;   ======================================================

;;	  0-->    16 r3=[r0+0x110]                     :cortex_a8_load_store_1
;;	  2-->    18 cc=cmp(zxt(r3,0x1,0x1),0x0)       :cortex_a8_default
;;	  4-->    19 pc={(cc!=0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 16
;;   new tail = 19

;;   ======================================================
;;   -- basic block 5 from 22 to 28 -- after reload
;;   ======================================================

;;	  0-->    22 r3=zxn([r5+0x8])                  :cortex_a8_load_store_1
;;	  2-->    27 cc=cmp(r3,0x1)                    :cortex_a8_default
;;	  4-->    28 pc={(cc==0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 22
;;   new tail = 28

;;   ======================================================
;;   -- basic block 6 from 32 to 38 -- after reload
;;   ======================================================

;;	  0-->    32 r0=`*.LC10'                       :cortex_a8_load_store_1
;;	  0-->    33 r1=0x117                          :cortex_a8_default
;;	  1-->    34 call [`warn_slowpath_null']       :cortex_a8_issue_branch
;;	  1-->    36 r3=0x1                            :cortex_a8_default
;;	  2-->    38 [r5+0x8]=r3                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 32
;;   new tail = 38

;;   ======================================================
;;   -- basic block 7 from 41 to 71 -- after reload
;;   ======================================================

;;	  0-->    41 r5=r4+0xc8                        :cortex_a8_default
;;	  0-->    42 r3=0x0                            :cortex_a8_default
;;	  1-->    45 r1=r5                             :cortex_a8_default
;;	  1-->    43 [r4+0x110]=r3                     :cortex_a8_load_store_1
;;	  2-->    44 r0=r4                             :cortex_a8_default
;;	  2-->    46 r2=[r4+0xe0]                      :cortex_a8_load_store_1
;;	  3-->    47 r0=call [`armpmu_event_set_period':cortex_a8_issue_branch
;;	  3-->    65 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->    51 r0=r5                             :cortex_a8_default
;;	  4-->    52 r1=[r4+0xe0]                      :cortex_a8_load_store_1
;;	  6-->    49 r3=[r3]                           :cortex_a8_load_store_1
;;	  7-->    53 call [[r3+0xc]]                   :cortex_a8_issue_branch
;;	  7-->    71 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 41
;;   new tail = 71





armpmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,1u} r3={11d,7u} r4={2d,7u,1d} r5={3d,7u,1d} r6={1d,2u} r12={3d} r13={2d,11u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 434{382d,50u,2e} in 32{29 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 68 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 68 4 69 2 arch/arm/kernel/perf_event.c:268 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 69 68 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 69 2 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 5 r5 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 2 7 8 2 arch/arm/kernel/perf_event.c:268 (set (reg/v/f:SI 4 r4 [orig:134 event ] [134])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 2 9 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event.c:271 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (nil)))

(jump_insn:TI 10 9 11 2 arch/arm/kernel/perf_event.c:271 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 11 13 3 NOTE_INSN_DELETED)

(insn:TI 13 12 14 3 arch/arm/kernel/perf_event.c:278 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:135 flags ] [135])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:135 flags ] [135])
        (nil)))

(jump_insn:TI 14 13 15 3 arch/arm/kernel/perf_event.c:278 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 15 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 17 15 16 4 NOTE_INSN_DELETED)

(insn:TI 16 17 18 4 arch/arm/kernel/perf_event.c:269 (set (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:134 event ] [134])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                    (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
            (nil))))

(insn:TI 18 16 19 4 arch/arm/kernel/perf_event.c:269 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
        (nil)))

(jump_insn:TI 19 18 20 4 arch/arm/kernel/perf_event.c:269 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 20 19 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 24 20 25 5 NOTE_INSN_DELETED)

(note 25 24 26 5 NOTE_INSN_DELETED)

(note 26 25 22 5 NOTE_INSN_DELETED)

(insn:TI 22 26 27 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:SI 3 r3 [orig:143 __warned ] [143])
        (zero_extend:SI (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                    (const_int 8 [0x8])) [0 __warned+0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:QI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 __warned+0 S1 A8]))
        (nil)))

(insn:TI 27 22 28 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:143 __warned ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:143 __warned ] [143])
        (nil)))

(jump_insn:TI 28 27 29 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 29 28 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 29 33 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(insn 33 32 34 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 1 r1)
        (const_int 279 [0x117])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 279 [0x117])
        (nil)))

(call_insn:TI 34 33 36 6 arch/arm/kernel/perf_event.c:279 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 34 38 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (reg:SI 3 r3 [150])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 38 36 39 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                (const_int 8 [0x8])) [0 __warned+0 S1 A8])
        (reg:QI 3 r3 [150])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/f:SI 5 r5 [136])
        (expr_list:REG_DEAD (reg:QI 3 r3 [150])
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 3 5 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 39 38 40 7 134 "" [3 uses])

(note 40 39 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 50 40 41 7 NOTE_INSN_DELETED)

(insn:TI 41 50 42 7 arch/arm/kernel/perf_event.c:269 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 42 41 45 7 arch/arm/kernel/perf_event.c:281 (set (reg:SI 3 r3 [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 45 42 43 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 43 45 44 7 arch/arm/kernel/perf_event.c:281 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [152])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 44 43 46 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 event ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 47 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 47 46 65 7 arch/arm/kernel/perf_event.c:289 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 65 47 51 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 51 65 52 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 49 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 49 52 53 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn:TI 53 49 71 7 arch/arm/kernel/perf_event.c:290 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 71 53 70 7 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 71 64)

(note 64 70 66 NOTE_INSN_DELETED)

(note 66 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_del (armpmu_del)[0:1316]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 54 to 18 -- after reload
;;   ======================================================

;;	  0-->    54 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    53 r2=sp                             :cortex_a8_default
;;	  2-->    49 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    51 r2=`__per_cpu_offset'             :cortex_a8_load_store_1
;;	  3-->    50 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->    16 r4=[r0+0xe0]                      :cortex_a8_load_store_1
;;	  4-->     2 r5=r0                             :cortex_a8_default
;;	  5-->    13 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    17 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  6-->     7 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  7-->     8 r3=asm_operands                   :nothing
;;	  8-->    14 r6=[r1*0x4+r2]                    :cortex_a8_load_store_1
;;	 10-->    15 r6=r3+r6                          :cortex_a8_default
;;	 10-->    18 pc={(cc>=0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 54
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 21 to 23 -- after reload
;;   ======================================================

;;	  0-->    21 r0=`*.LC10'                       :cortex_a8_load_store_1
;;	  0-->    22 r1=0x12c                          :cortex_a8_default
;;	  1-->    23 call [`warn_slowpath_null']       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 21
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 28 to 40 -- after reload
;;   ======================================================

;;	  0-->    28 r1=r6+0x8c                        :cortex_a8_default
;;	  0-->    27 r0=r4                             :cortex_a8_default
;;	  1-->    29 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  1-->    30 r0=r5                             :cortex_a8_default
;;	  2-->    31 r1=0x4                            :cortex_a8_default
;;	  3-->    32 call [`armpmu_stop']              :cortex_a8_issue_branch
;;	  3-->    36 r0=r4                             :cortex_a8_default
;;	  4-->    33 r3=0x0                            :cortex_a8_default
;;	  4-->    37 r1=r6+0x84                        :cortex_a8_default
;;	  5-->    34 [r4*0x4+r6]=r3                    :cortex_a8_load_store_1
;;	  6-->    38 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  6-->    39 r0=r5                             :cortex_a8_default
;;	 38-->    57 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 39-->    40 call [`perf_event_update_userpage':cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 28
;;   new tail = 40





armpmu_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={11d,5u,1d} r2={8d,2u} r3={11d,5u} r4={2d,6u} r5={2d,4u} r6={3d,6u} r12={5d} r13={2d,11u} r14={5d,3u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={6d,1u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 667{616d,50u,1e} in 31{26 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 54 2 NOTE_INSN_DELETED)

(insn/f:TI 54 11 55 2 arch/arm/kernel/perf_event.c:295 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 55 54 53 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 53 55 49 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 49 53 51 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 51 49 50 2 arch/arm/kernel/perf_event.c:296 (set (reg/f:SI 2 r2 [140])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 50 51 16 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 50 2 2 arch/arm/kernel/perf_event.c:298 (set (reg/v:SI 4 r4 [orig:135 idx ] [135])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 event ] [137])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:137 event ] [137])
        (nil)))

(insn:TI 2 16 13 2 arch/arm/kernel/perf_event.c:295 (set (reg/v/f:SI 5 r5 [orig:137 event ] [137])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 2 17 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (nil)))

(insn 17 13 7 2 arch/arm/kernel/perf_event.c:300 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:135 idx ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 7 17 8 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 8 7 14 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8569250)) -1 (nil))

(insn:TI 14 8 15 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 6 r6 [144])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [140])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [140])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 15 14 18 2 arch/arm/kernel/perf_event.c:296 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [144]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (nil)))

(jump_insn 18 15 19 2 arch/arm/kernel/perf_event.c:300 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 19 22 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(insn 22 21 23 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 1 r1)
        (const_int 300 [0x12c])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 23 22 24 3 arch/arm/kernel/perf_event.c:300 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 24 23 25 4 139 "" [1 uses])

(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 26 25 35 4 NOTE_INSN_DELETED)

(note 35 26 28 4 NOTE_INSN_DELETED)

(insn:TI 28 35 27 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn 27 28 29 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 29 27 30 4 arch/arm/kernel/perf_event.c:302 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 29 31 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 31 30 32 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 1 r1)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 32 31 36 4 arch/arm/kernel/perf_event.c:303 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_stop") [flags 0x3] <function_decl 0x114a1880 armpmu_stop>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 32 33 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 36 37 4 arch/arm/kernel/perf_event.c:304 (set (reg:SI 3 r3 [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 37 33 34 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (nil))

(insn:TI 34 37 38 4 arch/arm/kernel/perf_event.c:304 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:135 idx ] [135])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) [0 <variable>.events S4 A32])
        (reg:SI 3 r3 [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [147])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 38 34 39 4 arch/arm/kernel/perf_event.c:305 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 39 38 56 4 arch/arm/kernel/perf_event.c:307 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(note 56 39 57 4 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 57 56 40 4 arch/arm/kernel/perf_event.c:308 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 40 57 41 4 arch/arm/kernel/perf_event.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 41 40 52)

(note 52 41 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_add (armpmu_add)[0:1317]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 86 to 27 -- after reload
;;   ======================================================

;;	  0-->    86 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    85 r2=sp                             :cortex_a8_default
;;	  2-->    80 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->     3 sl=r1                             :cortex_a8_default
;;	  3-->    81 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->    83 r1=`__per_cpu_offset'             :cortex_a8_load_store_1
;;	  4-->    19 r7=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->    16 r8=r0+0xc8                        :cortex_a8_default
;;	  5-->    13 r3=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->     2 r4=r0                             :cortex_a8_default
;;	  6-->     7 r2=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  7-->    17 r0=[r0+0x2c]                      :cortex_a8_load_store_1
;;	  8-->    14 r6=[r3*0x4+r1]                    :cortex_a8_load_store_1
;;	  9-->     8 r2=asm_operands                   :nothing
;;	 10-->    15 r6=r2+r6                          :cortex_a8_default
;;	 10-->    18 call [`perf_pmu_disable']         :cortex_a8_issue_branch
;;	 11-->    20 r3=[r7]                           :cortex_a8_load_store_1
;;	 11-->    22 r0=r6                             :cortex_a8_default
;;	 12-->    23 r1=r8                             :cortex_a8_default
;;	 13-->    24 r0=call [[r3+0x14]]               :cortex_a8_issue_branch
;;	 45-->    26 {cc=cmp(r0,0x0);r5=r0;}           :cortex_a8_default
;;	 47-->    27 pc={(cc<0x0)?L60:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 47
;;   new head = 86
;;   new tail = 27

;;   ======================================================
;;   -- basic block 3 from 34 to 50 -- after reload
;;   ======================================================

;;	  0-->    34 [r4+0xe0]=r5                      :cortex_a8_load_store_1
;;	  0-->    38 r0=r8                             :cortex_a8_default
;;	  1-->    36 r3=[r7]                           :cortex_a8_load_store_1
;;	  1-->    39 r1=r5                             :cortex_a8_default
;;	  2-->    40 call [[r3+0x10]]                  :cortex_a8_issue_branch
;;	  2-->    41 [r5*0x4+r6]=r4                    :cortex_a8_load_store_1
;;	  3-->    43 r0=r5                             :cortex_a8_default
;;	  3-->    44 r1=r6+0x8c                        :cortex_a8_default
;;	  4-->    45 call [`_set_bit']                 :cortex_a8_issue_branch
;;	  4-->    49 cc=cmp(zxt(sl,0x1,0x0),0x0)       :cortex_a8_default
;;	  5-->    46 r3=0x3                            :cortex_a8_default
;;	  5-->    47 [r4+0x110]=r3                     :cortex_a8_load_store_1
;;	  6-->    50 pc={(cc==0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 34
;;   new tail = 50

;;   ======================================================
;;   -- basic block 4 from 52 to 54 -- after reload
;;   ======================================================

;;	  0-->    52 r0=r4                             :cortex_a8_default
;;	  0-->    53 r1=0x2                            :cortex_a8_default
;;	  1-->    54 call [`armpmu_start']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 52
;;   new tail = 54

;;   ======================================================
;;   -- basic block 5 from 57 to 58 -- after reload
;;   ======================================================

;;	  0-->    57 r0=r4                             :cortex_a8_default
;;	  0-->    59 r5=0x0                            :cortex_a8_default
;;	  1-->    58 call [`perf_event_update_userpage':cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 57
;;   new tail = 58

;;   ======================================================
;;   -- basic block 6 from 62 to 89 -- after reload
;;   ======================================================

;;	  0-->    62 r0=[r4+0x2c]                      :cortex_a8_load_store_1
;;	  1-->    63 call [`perf_pmu_enable']          :cortex_a8_issue_branch
;;	  1-->    68 r0=r5                             :cortex_a8_default
;;	  2-->    74 use r0                            :nothing
;;	  2-->    89 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 62
;;   new tail = 89





armpmu_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,14u} r1={13d,6u} r2={11d,3u} r3={14d,6u,1d} r4={2d,8u} r5={3d,7u} r6={3d,6u} r7={2d,4u,1d} r8={2d,4u} r9={1d,2u} r10={2d,3u} r12={7d} r13={2d,15u} r14={8d,2u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={9d,2u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 949{865d,82u,2e} in 46{39 regular + 7 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 21 2 NOTE_INSN_DELETED)

(note 21 11 25 2 NOTE_INSN_DELETED)

(note 25 21 86 2 NOTE_INSN_DELETED)

(insn/f:TI 86 25 87 2 arch/arm/kernel/perf_event.c:312 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 87 86 85 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 85 87 80 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 80 85 3 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 3 80 81 2 arch/arm/kernel/perf_event.c:312 (set (reg/v:SI 10 sl [orig:141 flags ] [141])
        (reg:SI 1 r1 [ flags ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ flags ])
        (nil)))

(insn:TI 81 3 83 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 83 81 19 2 arch/arm/kernel/perf_event.c:313 (set (reg/f:SI 1 r1 [143])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 19 83 16 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 7 r7 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 16 19 13 2 arch/arm/kernel/perf_event.c:314 (set (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
        (plus:SI (reg/f:SI 0 r0 [orig:140 event ] [140])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn:TI 13 16 2 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 2 13 7 2 arch/arm/kernel/perf_event.c:312 (set (reg/v/f:SI 4 r4 [orig:140 event ] [140])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 17 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 17 7 14 2 arch/arm/kernel/perf_event.c:318 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 17 8 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 6 r6 [147])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [143])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
        (expr_list:REG_DEAD (reg/f:SI 1 r1 [143])
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn:TI 8 14 15 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8571426)) -1 (nil))

(insn:TI 15 8 18 2 arch/arm/kernel/perf_event.c:313 (set (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
        (plus:SI (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [147]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (nil)))

(call_insn 18 15 20 2 arch/arm/kernel/perf_event.c:318 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_disable") [flags 0x41] <function_decl 0x113bae00 perf_pmu_disable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 20 18 22 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 22 20 23 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 22 24 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 24 23 26 2 arch/arm/kernel/perf_event.c:321 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 26 24 27 2 arch/arm/kernel/perf_event.c:322 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 5 r5 [orig:136 idx ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 27 26 33 2 arch/arm/kernel/perf_event.c:322 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [36.7%] 
;; Succ edge  3 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [63.3%]  (fallthru)
(note 33 27 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 37 33 42 3 NOTE_INSN_DELETED)

(note 42 37 48 3 NOTE_INSN_DELETED)

(note 48 42 34 3 NOTE_INSN_DELETED)

(insn:TI 34 48 38 3 arch/arm/kernel/perf_event.c:331 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 38 34 36 3 arch/arm/kernel/perf_event.c:332 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 36 38 39 3 arch/arm/kernel/perf_event.c:332 (set (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 39 36 40 3 arch/arm/kernel/perf_event.c:332 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 40 39 41 3 arch/arm/kernel/perf_event.c:332 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 41 40 43 3 arch/arm/kernel/perf_event.c:333 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:136 idx ] [136])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) [0 <variable>.events S4 A32])
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 41 44 3 arch/arm/kernel/perf_event.c:334 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 5 r5 [orig:136 idx ] [136])
        (nil)))

(insn 44 43 45 3 arch/arm/kernel/perf_event.c:334 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 45 44 49 3 arch/arm/kernel/perf_event.c:334 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x512e0000 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 45 46 3 arch/arm/kernel/perf_event.c:337 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 10 sl [orig:141 flags ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 46 49 47 3 arch/arm/kernel/perf_event.c:336 (set (reg:SI 3 r3 [155])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 47 46 50 3 arch/arm/kernel/perf_event.c:336 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [155])
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(jump_insn:TI 50 47 51 3 arch/arm/kernel/perf_event.c:337 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [29.0%]  (fallthru)
;; Succ edge  5 [71.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (fallthru)
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 53 4 arch/arm/kernel/perf_event.c:338 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 4 arch/arm/kernel/perf_event.c:338 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 54 53 55 4 arch/arm/kernel/perf_event.c:338 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_start") [flags 0x3] <function_decl 0x114a1980 armpmu_start>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 55 54 56 5 146 "" [1 uses])

(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 59 5 arch/arm/kernel/perf_event.c:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 59 57 58 5 arch/arm/kernel/perf_event.c:316 (set (reg/v:SI 5 r5 [orig:135 err ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 58 59 60 5 arch/arm/kernel/perf_event.c:341 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  2 [36.7%] 
(code_label 60 58 61 6 145 ("out") [1 uses])

(note 61 60 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 62 61 63 6 arch/arm/kernel/perf_event.c:344 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 63 62 68 6 arch/arm/kernel/perf_event.c:344 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_enable") [flags 0x41] <function_decl 0x113bae80 perf_pmu_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 63 74 6 arch/arm/kernel/perf_event.c:346 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 err ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 74 68 88 6 arch/arm/kernel/perf_event.c:346 (use (reg/i:SI 0 r0)) -1 (nil))

(note 88 74 89 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 89 88 90 6 arch/arm/kernel/perf_event.c:346 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 90 89 82)

(note 82 90 84 NOTE_INSN_DELETED)

(note 84 82 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function validate_group (validate_group)[0:1319]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)


validate_group

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,11u} r1={9d,4u} r2={5d} r3={5d} r4={4d,9u} r5={3d,6u} r6={2d,4u} r7={2d,4u} r12={4d} r13={3d,17u,1d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={8d,7u} r25={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 569{500d,64u,5e} in 32{28 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 0 )->[2]->( 6 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 )->[3]->( 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 6 )->[4]->( 8 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 5 2 )->[6]->( 4 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 6 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 7 4 3 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 8 7 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 17 to worklist
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 81 to worklist
  Adding insn 91 to worklist
  Adding insn 30 to worklist
  Adding insn 27 to worklist
  Adding insn 38 to worklist
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 85 to worklist
  Adding insn 66 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 53 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 32 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 29 to worklist
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 48 to worklist
  Adding insn 45 to worklist
  Adding insn 42 to worklist
processing block 6 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 37 to worklist
  Adding insn 25 to worklist
  Adding insn 26 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 19 to worklist
  Adding insn 71 to worklist
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 6 to worklist
  Adding insn 9 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 2 to worklist
  Adding insn 82 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 21 (  2.1)
;;   ======================================================
;;   -- basic block 2 from 81 to 17 -- after reload
;;   ======================================================

;;	  0-->    81 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     2 r6=r0                             :cortex_a8_default
;;	  2-->    82 sp=sp-0x9c                        :cortex_a8_default
;;	  2-->     9 r1=0x94                           :cortex_a8_default
;;	  3-->     7 r4=sp+0x4                         :cortex_a8_default
;;	  3-->     6 r5=[r6+0x28]                      :cortex_a8_load_store_1
;;	  4-->     8 r0=r4                             :cortex_a8_default
;;	  5-->    10 call [`__memzero']                :cortex_a8_issue_branch
;;	  5-->    12 r0=r4                             :cortex_a8_default
;;	  6-->    13 r1=r5                             :cortex_a8_default
;;	  7-->    14 r0=call [`validate_event']        :cortex_a8_issue_branch
;;	 39-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 40-->    71 (cc) r7=r4                        :cortex_a8_default
;;	 41-->    19 (cc) r4=[pre r5+=0x10]            :cortex_a8_load_store_1
;;	 41-->    17 pc={(cc!=0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 81
;;   new tail = 17

;;   ======================================================
;;   -- basic block 3 from 91 to 91 -- after reload
;;   ======================================================

;;	  0-->    91 pc=L51                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 91
;;   new tail = 91

;;   ======================================================
;;   -- basic block 4 from 27 to 30 -- after reload
;;   ======================================================

;;	  0-->    27 r0=call [`validate_event']        :cortex_a8_issue_branch
;;	 32-->    29 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    30 pc={(cc==0x0)?L51:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 27
;;   new tail = 30

;;   ======================================================
;;   -- basic block 5 from 32 to 32 -- after reload
;;   ======================================================

;;	  0-->    32 r4=[r4]                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 32

;;   ======================================================
;;   -- basic block 6 from 26 to 38 -- after reload
;;   ======================================================

;;	  0-->    37 cc=cmp(r4,r5)                     :cortex_a8_default
;;	  0-->    26 r1=r4                             :cortex_a8_default
;;	  1-->    25 r0=r7                             :cortex_a8_default
;;	  2-->    38 pc={(cc!=0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 26
;;   new tail = 38

;;   ======================================================
;;   -- basic block 7 from 42 to 46 -- after reload
;;   ======================================================

;;	  0-->    42 r1=r6                             :cortex_a8_default
;;	  1-->    43 r0=call [`validate_event']        :cortex_a8_issue_branch
;;	 33-->    45 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    48 (cc) r0=0x0                       :cortex_a8_default
;;	 35-->    46 pc={(cc!=0x0)?L54:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 42
;;   new tail = 46

;;   ======================================================
;;   -- basic block 8 from 53 to 53 -- after reload
;;   ======================================================

;;	  0-->    53 r0=0xffffffffffffffe4             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 53

;;   ======================================================
;;   -- basic block 9 from 66 to 85 -- after reload
;;   ======================================================

;;	  0-->    66 use r0                            :nothing
;;	  0-->    85 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 66
;;   new tail = 85





validate_group

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,11u} r1={9d,4u} r2={5d} r3={5d} r4={4d,9u} r5={3d,6u} r6={2d,4u} r7={2d,4u} r12={4d} r13={3d,17u,1d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={8d,7u} r25={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 569{500d,64u,5e} in 32{28 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 3 81 2 NOTE_INSN_DELETED)

(insn/f:TI 81 15 2 2 arch/arm/kernel/perf_event.c:364 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -20 [0xffffffffffffffec])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 2 81 82 2 arch/arm/kernel/perf_event.c:364 (set (reg/v/f:SI 6 r6 [orig:142 event ] [142])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ event ])
        (nil)))

(insn/f:TI 82 2 83 2 arch/arm/kernel/perf_event.c:364 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -156 [0xffffffffffffff64]))) 4 {*arm_addsi3} (nil))

(note 83 82 9 2 NOTE_INSN_PROLOGUE_END)

(insn 9 83 7 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 1 r1)
        (const_int 148 [0x94])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 9 6 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg/f:SI 4 r4 [143])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn 6 7 8 2 arch/arm/kernel/perf_event.c:365 (set (reg/v/f:SI 5 r5 [orig:134 leader ] [134])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:142 event ] [142])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 6 10 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(call_insn:TI 10 8 12 2 arch/arm/kernel/perf_event.c:368 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10a9ce80 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 12 10 13 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn:TI 13 12 14 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:134 leader ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 14 13 16 2 arch/arm/kernel/perf_event.c:370 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 16 14 71 2 arch/arm/kernel/perf_event.c:370 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 71 16 19 2 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 7 r7 [149])
            (reg/f:SI 4 r4 [143]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn:TI 19 71 17 2 arch/arm/kernel/perf_event.c:373 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
            (mem/s/f/j:SI (pre_modify:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                    (plus:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                        (const_int 16 [0x10]))) [0 <variable>.sibling_list.next+0 S4 A64]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
        (nil)))

(jump_insn 17 19 90 2 arch/arm/kernel/perf_event.c:370 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 90 17 91 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 91 90 92 3 (set (pc)
        (label_ref 51)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 92 91 36)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 36 92 23 4 153 "" [1 uses])

(note 23 36 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 27 4 NOTE_INSN_DELETED)

(call_insn:TI 27 28 29 4 arch/arm/kernel/perf_event.c:374 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 29 27 30 4 arch/arm/kernel/perf_event.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 30 29 31 4 arch/arm/kernel/perf_event.c:374 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [4.5%]  (loop_exit)
;; Succ edge  5 [95.5%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [95.5%]  (fallthru)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 34 5 arch/arm/kernel/perf_event.c:373 (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 sibling ] [135]) [0 <variable>.group_entry.next+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [61.0%] 
(code_label 34 32 35 6 152 "" [1 uses])

(note 35 34 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 35 26 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
            (reg/f:SI 5 r5 [orig:137 D.25400 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(insn 26 37 25 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 26 38 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(jump_insn:TI 38 25 39 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 39 38 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 44 39 42 7 NOTE_INSN_DELETED)

(insn:TI 42 44 43 7 arch/arm/kernel/perf_event.c:378 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:142 event ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 45 7 arch/arm/kernel/perf_event.c:378 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 45 43 48 7 arch/arm/kernel/perf_event.c:378 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 48 45 46 7 arch/arm/kernel/perf_event.c:381 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 46 48 51 7 arch/arm/kernel/perf_event.c:378 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [61.0%] 
;; Succ edge  8 [39.0%]  (fallthru)

;; Start of basic block ( 7 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [39.0%]  (fallthru)
;; Pred edge  4 [4.5%]  (loop_exit)
;; Pred edge  3 [100.0%] 
(code_label 51 46 52 8 151 "" [2 uses])

(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 54 8 arch/arm/kernel/perf_event.c:371 (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
        (const_int -28 [0xffffffffffffffe4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -28 [0xffffffffffffffe4])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [61.0%] 
(code_label 54 53 55 9 154 "" [1 uses])

(note 55 54 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 66 55 84 9 arch/arm/kernel/perf_event.c:382 (use (reg/i:SI 0 r0)) -1 (nil))

(note 84 66 85 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 85 84 86 9 arch/arm/kernel/perf_event.c:382 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 86 85 79)

(note 79 86 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function hw_perf_event_destroy (hw_perf_event_destroy)[0:1323]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)


hw_perf_event_destroy

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={10d,4u} r2={7d} r3={10d,3u} r4={5d,9u} r5={2d,4u,1d} r6={2d,3u} r12={6d} r13={2d,14u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={9d,3u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 781{730d,50u,1e} in 31{25 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 2 )->[3]->( 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]

( 6 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]

( 5 4 3 )->[6]->( 4 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 7 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 12 to worklist
  Adding insn 76 to worklist
  Adding insn 83 to worklist
  Adding insn 30 to worklist
  Adding insn 27 to worklist
  Adding insn 34 to worklist
  Adding insn 42 to worklist
  Adding insn 56 to worklist
  Adding insn 81 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
Finished finding needed instructions:
processing block 5 lr out =  4 [r4] 6 [r6] 13 [sp]
processing block 4 lr out =  0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
  Adding insn 29 to worklist
  Adding insn 71 to worklist
  Adding insn 25 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 51 to worklist
  Adding insn 55 to worklist
  Adding insn 48 to worklist
  Adding insn 45 to worklist
processing block 6 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 70 to worklist
  Adding insn 37 to worklist
  Adding insn 82 to worklist
processing block 3 lr out =  4 [r4] 6 [r6] 13 [sp]
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 68 to worklist
  Adding insn 18 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 11 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 16 (    2)
;;   ======================================================
;;   -- basic block 2 from 76 to 15 -- after reload
;;   ======================================================

;;	  0-->    76 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     6 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->    11 r1=const(`*.LANCHOR1'+0x98)       :cortex_a8_load_store_1
;;	  3-->    10 r0=r4+0xc                         :cortex_a8_default
;;	  4-->    12 r0=call [`atomic_dec_and_mutex_loc:cortex_a8_issue_branch
;;	 36-->    14 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 38-->    15 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 38
;;   new head = 76
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 18 to 83 -- after reload
;;   ======================================================

;;	  0-->    18 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  0-->    68 r6=r4                             :cortex_a8_default
;;	  3-->    19 r4=[r3+0x170]                     :cortex_a8_load_store_1
;;	  5-->    20 r4=r4-0x1                         :cortex_a8_default
;;	  5-->    83 pc=L38                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 18
;;   new tail = 83

;;   ======================================================
;;   -- basic block 4 from 25 to 30 -- after reload
;;   ======================================================

;;	  0-->    25 r0=[r6+0x4]                       :cortex_a8_load_store_1
;;	  1-->    27 r0=call [`platform_get_irq']      :cortex_a8_issue_branch
;;	  1-->    71 r1=0x0                            :cortex_a8_default
;;	 33-->    29 cc=cmp(r0,r1)                     :cortex_a8_default
;;	 35-->    30 pc={(cc<0x0)?L38:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 25
;;   new tail = 30

;;   ======================================================
;;   -- basic block 5 from 34 to 34 -- after reload
;;   ======================================================

;;	  0-->    34 call [`free_irq']                 :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 34
;;   new tail = 34

;;   ======================================================
;;   -- basic block 6 from 82 to 42 -- after reload
;;   ======================================================

;;	  0-->    82 {cc=cmp(r4,0x0);r1=r4;}           :cortex_a8_default
;;	  0-->    70 r5=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    37 r4=r4-0x1                         :cortex_a8_default
;;	  2-->    42 pc={(cc>=0x0)?L40:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 82
;;   new tail = 42

;;   ======================================================
;;   -- basic block 7 from 45 to 56 -- after reload
;;   ======================================================

;;	  0-->    45 r3=[r5]                           :cortex_a8_load_store_1
;;	  1-->    47 call [[r3+0x24]]                  :cortex_a8_issue_branch
;;	  1-->    48 r0=0x0                            :cortex_a8_default
;;	  2-->    49 r0=call [`release_pmu']           :cortex_a8_issue_branch
;;	  2-->    51 r3=0x0                            :cortex_a8_default
;;	  3-->    55 r0=const(`*.LANCHOR1'+0x98)       :cortex_a8_load_store_1
;;	  4-->    52 [r5+0x4]=r3                       :cortex_a8_load_store_1
;;	 34-->    81 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 35-->    56 call [`mutex_unlock']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 45
;;   new tail = 56





hw_perf_event_destroy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={10d,4u} r2={7d} r3={10d,3u} r4={5d,9u} r5={2d,4u,1d} r6={2d,3u} r12={6d} r13={2d,14u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={9d,3u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 781{730d,50u,1e} in 31{25 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 3 76 2 NOTE_INSN_DELETED)

(insn/f:TI 76 13 77 2 arch/arm/kernel/perf_event.c:466 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 77 76 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 77 11 2 arch/arm/kernel/perf_event.c:467 (set (reg/f:SI 4 r4 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 11 6 10 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn:TI 10 11 12 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [137])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(call_insn:TI 12 10 14 2 arch/arm/kernel/perf_event.c:467 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("atomic_dec_and_mutex_lock") [flags 0x41] <function_decl 0x10d7c480 atomic_dec_and_mutex_lock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 14 12 15 2 arch/arm/kernel/perf_event.c:467 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 15 14 16 2 arch/arm/kernel/perf_event.c:467 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 16 68 3 arch/arm/kernel/perf_event.c:450 (set (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn 68 18 19 3 (set (reg/f:SI 6 r6 [153])
        (reg/f:SI 4 r4 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [137])
        (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
            (nil))))

(insn:TI 19 68 20 3 arch/arm/kernel/perf_event.c:450 (set (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
        (nil)))

(insn:TI 20 19 83 3 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn 83 20 84 3 (set (pc)
        (label_ref 38)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 6)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 84 83 40)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [91.0%] 
(code_label 40 84 23 4 160 "" [1 uses])

(note 23 40 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 25 4 NOTE_INSN_DELETED)

(insn:TI 25 28 27 4 arch/arm/kernel/perf_event.c:451 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [153])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn:TI 27 25 71 4 arch/arm/kernel/perf_event.c:451 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 71 27 29 4 arch/arm/kernel/perf_event.c:453 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 71 30 4 arch/arm/kernel/perf_event.c:452 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (reg:SI 1 r1))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 30 29 31 4 arch/arm/kernel/perf_event.c:452 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  5 [52.5%]  (fallthru)
;; Succ edge  6 [47.5%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [52.5%]  (fallthru)
(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 34 31 38 5 arch/arm/kernel/perf_event.c:453 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [47.5%] 
;; Pred edge  3 [100.0%] 
(code_label 38 34 39 6 158 "" [2 uses])

(note 39 38 82 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 82 39 70 6 arch/arm/kernel/perf_event.c:450 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 4 r4 [orig:133 i ] [133])
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1)
                (reg/v:SI 4 r4 [orig:133 i ] [133]))
        ]) 174 {*movsi_compare0} (nil))

(insn 70 82 37 6 (set (reg/f:SI 5 r5 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 37 70 42 6 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg/v:SI 4 r4 [orig:133 i ] [133])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 42 37 43 6 arch/arm/kernel/perf_event.c:450 discrim 1 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  7 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [9.0%]  (fallthru,loop_exit)
(note 43 42 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 46 43 45 7 NOTE_INSN_DELETED)

(insn:TI 45 46 47 7 arch/arm/kernel/perf_event.c:455 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(call_insn:TI 47 45 48 7 arch/arm/kernel/perf_event.c:455 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (nil))
    (nil))

(insn 48 47 49 7 arch/arm/kernel/perf_event.c:457 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 49 48 51 7 arch/arm/kernel/perf_event.c:457 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 51 49 55 7 arch/arm/kernel/perf_event.c:458 (set (reg:SI 3 r3 [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 55 51 52 7 arch/arm/kernel/perf_event.c:469 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn:TI 52 55 80 7 arch/arm/kernel/perf_event.c:458 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [152])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 3 r3 [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(note 80 52 81 7 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 81 80 56 7 arch/arm/kernel/perf_event.c:471 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 56 81 57 7 arch/arm/kernel/perf_event.c:469 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 57 56 74)

(note 74 57 75 NOTE_INSN_DELETED)

(note 75 74 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armpmu_event_init (armpmu_event_init)[0:1325]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 56 n_edges 87 count 116 (  2.1)


armpmu_event_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,38u} r1={29d,17u} r2={31d,22u} r3={43d,40u,1d} r4={20d,21u,2d} r5={2d,20u,5d} r6={8d,18u,1d} r7={5d,5u} r8={2d,3u,1d} r9={2d,3u} r10={2d,4u} r11={2d,3u} r12={16d,2u} r13={2d,72u} r14={15d,2u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={49d,37u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2120{1803d,307u,10e} in 211{197 regular + 14 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 3 2 )->[4]->( 54 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 3 )->[5]->( 6 54 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 6 11 )->[7]->( 8 12 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 9 )->[10]->( 11 35 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 10 )->[11]->( 7 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 7 )->[12]->( 13 33 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 )->[13]->( 14 16 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 13 )->[14]->( 15 34 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 14 )->[15]->( 33 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 13 )->[16]->( 17 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 16 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 18 17 )->[19]->( 21 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 19 )->[20]->( 26 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 19 )->[21]->( 34 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 26 )->[22]->( 25 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 22 )->[23]->( 24 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 23 )->[24]->( 28 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 22 23 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 25 20 )->[26]->( 22 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 26 )->[27]->( 28 33 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 27 24 )->[28]->( 31 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 31 )->[29]->( 30 31 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 29 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 30 29 28 )->[31]->( 29 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 31 )->[32]->( 34 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 27 12 15 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 14 33 21 32 )->[34]->( 54 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 34 10 )->[35]->( 36 38 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 35 )->[36]->( 46 37 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 36 )->[37]->( 55 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 35 )->[38]->( 39 44 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 38 )->[39]->( 52 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 39 )->[40]->( 52 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 40 )->[41]->( 52 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 41 )->[42]->( 46 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 42 )->[43]->( 53 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 38 )->[44]->( 45 55 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 44 )->[45]->( 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 36 45 42 )->[46]->( 53 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 46 )->[47]->( 48 53 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 47 )->[48]->( 49 50 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 2 [r2]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 48 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 48 49 )->[50]->( 54 51 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 50 )->[51]->( 52 54 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 51 41 39 40 )->[52]->( 53 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 46 47 43 52 55 )->[53]->( 54 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 50 34 53 51 4 )->[54]->( 1 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 44 37 )->[55]->( 53 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 54 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 477 to worklist
  Adding insn 14 to worklist
  Adding insn 493 to worklist
  Adding insn 27 to worklist
  Adding insn 38 to worklist
  Adding insn 35 to worklist
  Adding insn 41 to worklist
  Adding insn 44 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
  Adding insn 58 to worklist
  Adding insn 55 to worklist
  Adding insn 495 to worklist
  Adding insn 72 to worklist
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 80 to worklist
  Adding insn 78 to worklist
  Adding insn 75 to worklist
  Adding insn 88 to worklist
  Adding insn 84 to worklist
  Adding insn 498 to worklist
  Adding insn 100 to worklist
  Adding insn 95 to worklist
  Adding insn 104 to worklist
  Adding insn 118 to worklist
  Adding insn 500 to worklist
  Adding insn 502 to worklist
  Adding insn 128 to worklist
  Adding insn 138 to worklist
  Adding insn 135 to worklist
  Adding insn 151 to worklist
  Adding insn 148 to worklist
  Adding insn 143 to worklist
  Adding insn 141 to worklist
  Adding insn 504 to worklist
  Adding insn 156 to worklist
  Adding insn 170 to worklist
  Adding insn 174 to worklist
  Adding insn 506 to worklist
  Adding insn 187 to worklist
  Adding insn 184 to worklist
  Adding insn 191 to worklist
  Adding insn 199 to worklist
  Adding insn 508 to worklist
  Adding insn 205 to worklist
  Adding insn 202 to worklist
  Adding insn 214 to worklist
  Adding insn 223 to worklist
  Adding insn 221 to worklist
  Adding insn 228 to worklist
  Adding insn 237 to worklist
  Adding insn 511 to worklist
  Adding insn 244 to worklist
  Adding insn 249 to worklist
  Adding insn 257 to worklist
  Adding insn 265 to worklist
  Adding insn 278 to worklist
  Adding insn 514 to worklist
  Adding insn 291 to worklist
  Adding insn 306 to worklist
  Adding insn 314 to worklist
  Adding insn 336 to worklist
  Adding insn 327 to worklist
  Adding insn 325 to worklist
  Adding insn 323 to worklist
  Adding insn 322 to worklist
  Adding insn 347 to worklist
  Adding insn 344 to worklist
  Adding insn 342 to worklist
  Adding insn 352 to worklist
  Adding insn 363 to worklist
  Adding insn 360 to worklist
  Adding insn 369 to worklist
  Adding insn 480 to worklist
  Adding insn 392 to worklist
  Adding insn 516 to worklist
Finished finding needed instructions:
processing block 54 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 386 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 19 to worklist
processing block 11 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 60 to worklist
processing block 53 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 368 to worklist
processing block 52 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 365 to worklist
processing block 51 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 362 to worklist
  Adding insn 359 to worklist
processing block 50 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 354 to worklist
  Adding insn 351 to worklist
  Adding insn 350 to worklist
processing block 49 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 458 to worklist
  Adding insn 459 to worklist
  Adding insn 340 to worklist
  Adding insn 339 to worklist
  Adding insn 460 to worklist
  Adding insn 346 to worklist
processing block 48 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 474 to worklist
  Adding insn 473 to worklist
  Adding insn 335 to worklist
  Adding insn 462 to worklist
  Adding insn 333 to worklist
  Adding insn 329 to worklist
processing block 47 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 316 to worklist
  Adding insn 313 to worklist
  Adding insn 308 to worklist
processing block 46 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 305 to worklist
processing block 55 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 377 to worklist
processing block 37 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 36 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 236 to worklist
  Adding insn 466 to worklist
  Adding insn 234 to worklist
  Adding insn 232 to worklist
  Adding insn 231 to worklist
  Adding insn 467 to worklist
  Adding insn 233 to worklist
processing block 43 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 42 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 280 to worklist
  Adding insn 277 to worklist
  Adding insn 464 to worklist
  Adding insn 275 to worklist
  Adding insn 274 to worklist
  Adding insn 269 to worklist
  Adding insn 268 to worklist
  Adding insn 465 to worklist
  Adding insn 272 to worklist
processing block 41 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 264 to worklist
  Adding insn 263 to worklist
processing block 40 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 256 to worklist
  Adding insn 255 to worklist
processing block 39 lr out =  0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 398 to worklist
processing block 45 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 302 to worklist
  Adding insn 301 to worklist
  Adding insn 299 to worklist
  Adding insn 463 to worklist
  Adding insn 300 to worklist
processing block 44 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 290 to worklist
processing block 38 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 243 to worklist
processing block 35 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 227 to worklist
  Adding insn 226 to worklist
processing block 10 lr out =  0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 57 to worklist
processing block 9 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 52 to worklist
processing block 8 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 43 to worklist
processing block 34 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 222 to worklist
  Adding insn 220 to worklist
processing block 33 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 215 to worklist
  Adding insn 212 to worklist
  Adding insn 210 to worklist
processing block 15 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 83 to worklist
processing block 21 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 129 to worklist
  Adding insn 127 to worklist
processing block 25 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 161 to worklist
processing block 30 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 29 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 186 to worklist
  Adding insn 406 to worklist
  Adding insn 182 to worklist
processing block 32 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 469 to worklist
  Adding insn 468 to worklist
  Adding insn 201 to worklist
processing block 31 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 194 to worklist
  Adding insn 198 to worklist
  Adding insn 183 to worklist
processing block 28 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 401 to worklist
  Adding insn 177 to worklist
processing block 24 lr out =  4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 154 to worklist
  Adding insn 155 to worklist
processing block 23 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 150 to worklist
processing block 22 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 137 to worklist
  Adding insn 410 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
processing block 27 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 173 to worklist
processing block 26 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 169 to worklist
  Adding insn 168 to worklist
  Adding insn 133 to worklist
  Adding insn 166 to worklist
  Adding insn 134 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 140 to worklist
  Adding insn 142 to worklist
  Adding insn 165 to worklist
  Adding insn 120 to worklist
  Adding insn 121 to worklist
processing block 19 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 117 to worklist
  Adding insn 116 to worklist
processing block 18 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
processing block 17 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 106 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
processing block 16 lr out =  2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 99 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 94 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 79 to worklist
  Adding insn 77 to worklist
  Adding insn 74 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 71 to worklist
  Adding insn 68 to worklist
processing block 7 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 40 to worklist
processing block 6 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 470 to worklist
  Adding insn 48 to worklist
  Adding insn 46 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 29 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
  Adding insn 24 to worklist
processing block 3 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
processing block 2 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 56 n_edges 87 count 142 (  2.5)
;;   ======================================================
;;   -- basic block 2 from 477 to 8 -- after reload
;;   ======================================================

;;	  0-->   477 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->     6 r3=[r0+0x78]                      :cortex_a8_load_store_1
;;	  2-->     2 r5=r0                             :cortex_a8_default
;;	  3-->     7 cc=cmp(r3,0x4)                    :cortex_a8_default
;;	  5-->     8 pc={(gtu(cc,0x0))?L17:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 477
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 9 to 14 -- after reload
;;   ======================================================

;;	  0-->     9 r2=0x1                            :cortex_a8_default
;;	  2-->    11 r3=r2<<r3                         :cortex_a8_default
;;	  3-->    13 {cc=cmp(r3&0x19,0x0);clobber scrat:cortex_a8_default
;;	  5-->    14 pc={(cc!=0x0)?L22:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 9
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 19 to 493 -- after reload
;;   ======================================================

;;	  0-->    19 r4=0xfffffffffffffffe             :cortex_a8_default
;;	  0-->   493 pc=L370                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 493

;;   ======================================================
;;   -- basic block 5 from 24 to 27 -- after reload
;;   ======================================================

;;	  0-->    24 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    25 r3=[r6]                           :cortex_a8_load_store_1
;;	  5-->    26 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  6-->    29 (!cc) r4=0xffffffffffffffed       :cortex_a8_default
;;	  7-->    27 pc={(cc==0x0)?L370:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 24
;;   new tail = 27

;;   ======================================================
;;   -- basic block 6 from 46 to 38 -- after reload
;;   ======================================================

;;	  0-->   470 r1=`hw_perf_event_destroy'        :cortex_a8_load_store_1
;;	  0-->    46 r3=r6                             :cortex_a8_default
;;	  1-->    48 r2=r6+0xc                         :cortex_a8_default
;;	  3-->    35 [r0+0x1f4]=r1                     :cortex_a8_load_store_1
;;	  4-->    38 r4=[r6+0xc]                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 46
;;   new tail = 38

;;   ======================================================
;;   -- basic block 7 from 40 to 41 -- after reload
;;   ======================================================

;;	  0-->    40 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  2-->    41 pc={(cc==0x0)?L64:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 40
;;   new tail = 41

;;   ======================================================
;;   -- basic block 8 from 43 to 44 -- after reload
;;   ======================================================

;;	  0-->    43 r1=r4+0x1                         :cortex_a8_default
;;	  1-->    44 {asm_operands;clobber [scratch];} :nothing
;;	Ready list (final):  
;;   total time = 1
;;   new head = 43
;;   new tail = 44

;;   ======================================================
;;   -- basic block 9 from 50 to 53 -- after reload
;;   ======================================================

;;	  0-->    50 {ip=asm_operands;r0=asm_operands;[:nothing
;;	  1-->    52 cc=cmp(ip,0x0)                    :cortex_a8_default
;;	  3-->    53 pc={(cc!=0x0)?L51:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 50
;;   new tail = 53

;;   ======================================================
;;   -- basic block 10 from 55 to 58 -- after reload
;;   ======================================================

;;	  0-->    55 {asm_operands;clobber [scratch];} :nothing
;;	  1-->    57 cc=cmp(r0,r4)                     :cortex_a8_default
;;	  3-->    58 pc={(cc==0x0)?L224:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 55
;;   new tail = 58

;;   ======================================================
;;   -- basic block 11 from 60 to 495 -- after reload
;;   ======================================================

;;	  0-->    60 r4=r0                             :cortex_a8_default
;;	  0-->   495 pc=L61                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 60
;;   new tail = 495

;;   ======================================================
;;   -- basic block 12 from 68 to 72 -- after reload
;;   ======================================================

;;	  0-->    68 r0=const(`*.LANCHOR1'+0x98)       :cortex_a8_load_store_1
;;	  1-->    69 call [`mutex_lock']               :cortex_a8_issue_branch
;;	  1-->    70 r3=[r6+0xc]                       :cortex_a8_load_store_1
;;	  3-->    71 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  5-->    72 pc={(cc!=0x0)?L208:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 68
;;   new tail = 72

;;   ======================================================
;;   -- basic block 13 from 74 to 80 -- after reload
;;   ======================================================

;;	  0-->    74 r0=r4                             :cortex_a8_default
;;	  0-->    77 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    75 r0=call [`reserve_pmu']           :cortex_a8_issue_branch
;;	 33-->    79 cc=cmp(r0,0xfffffffffffff000)     :cortex_a8_default
;;	 33-->    78 [r6+0x4]=r0                       :cortex_a8_load_store_1
;;	 35-->    80 pc={(leu(cc,0x0))?L92:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 74
;;   new tail = 80

;;   ======================================================
;;   -- basic block 14 from 83 to 88 -- after reload
;;   ======================================================

;;	  0-->    83 r0=`*.LC11'                       :cortex_a8_load_store_1
;;	  1-->    84 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    86 r4=[r6+0x4]                       :cortex_a8_load_store_1
;;	  3-->    87 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  5-->    88 pc={(cc!=0x0)?L216:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 83
;;   new tail = 88

;;   ======================================================
;;   -- basic block 15 from 498 to 498 -- after reload
;;   ======================================================

;;	  0-->   498 pc=L208                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 498
;;   new tail = 498

;;   ======================================================
;;   -- basic block 16 from 94 to 100 -- after reload
;;   ======================================================

;;	  0-->    94 r0=r4                             :cortex_a8_default
;;	  1-->    95 r0=call [`init_pmu']              :cortex_a8_issue_branch
;;	  1-->    97 r3=[r6+0x4]                       :cortex_a8_load_store_1
;;	  4-->    98 r2=[r3+0x5c]                      :cortex_a8_load_store_1
;;	  6-->    99 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  8-->   100 pc={(cc==0x0)?L109:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 94
;;   new tail = 100

;;   ======================================================
;;   -- basic block 17 from 102 to 104 -- after reload
;;   ======================================================

;;	  0-->   102 r2=[r2]                           :cortex_a8_load_store_1
;;	  2-->   103 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->   106 (cc) r7=`armpmu_platform_irq'     :cortex_a8_load_store_1
;;	  4-->   104 pc={(cc!=0x0)?L114:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 102
;;   new tail = 104

;;   ======================================================
;;   -- basic block 18 from 111 to 113 -- after reload
;;   ======================================================

;;	  0-->   111 r2=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   112 r2=[r2]                           :cortex_a8_load_store_1
;;	  6-->   113 r7=[r2+0x8]                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 111
;;   new tail = 113

;;   ======================================================
;;   -- basic block 19 from 116 to 118 -- after reload
;;   ======================================================

;;	  0-->   116 r3=[r3+0x170]                     :cortex_a8_load_store_1
;;	  2-->   117 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   118 pc={(cc==0x0)?L124:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 116
;;   new tail = 118

;;   ======================================================
;;   -- basic block 20 from 121 to 500 -- after reload
;;   ======================================================

;;	  0-->   121 r6=0x0                            :cortex_a8_default
;;	  0-->   120 r4=0xffffffffffffffed             :cortex_a8_default
;;	  1-->   165 r8=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   142 sl=r6                             :cortex_a8_default
;;	  2-->   140 r9=`*.LC13'                       :cortex_a8_load_store_1
;;	  2-->   500 pc=L162                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 121
;;   new tail = 500

;;   ======================================================
;;   -- basic block 21 from 127 to 502 -- after reload
;;   ======================================================

;;	  0-->   127 r0=`*.LC12'                       :cortex_a8_load_store_1
;;	  0-->   129 r4=0xffffffffffffffed             :cortex_a8_default
;;	  1-->   128 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   502 pc=L216                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 127
;;   new tail = 502

;;   ======================================================
;;   -- basic block 22 from 135 to 138 -- after reload
;;   ======================================================

;;	  0-->   135 r0=call [`platform_get_irq']      :cortex_a8_issue_branch
;;	  0-->   145 r1=r7                             :cortex_a8_default
;;	  1-->   146 r2=sl                             :cortex_a8_default
;;	  1-->   410 r3=0x820                          :cortex_a8_default
;;	 32-->   137 {cc=cmp(r0,0x0);fp=r0;}           :cortex_a8_default
;;	 34-->   138 pc={(cc<0x0)?L159:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 135
;;   new tail = 138

;;   ======================================================
;;   -- basic block 23 from 141 to 151 -- after reload
;;   ======================================================

;;	  0-->   141 [sp]=r9                           :cortex_a8_load_store_1
;;	  1-->   143 [sp+0x4]=sl                       :cortex_a8_load_store_1
;;	  1-->   148 r0=call [`request_threaded_irq']  :cortex_a8_issue_branch
;;	 33-->   150 {cc=cmp(r0,0x0);r4=r0;}           :cortex_a8_default
;;	 35-->   151 pc={(cc==0x0)?L159:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 141
;;   new tail = 151

;;   ======================================================
;;   -- basic block 24 from 155 to 504 -- after reload
;;   ======================================================

;;	  0-->   155 r1=fp                             :cortex_a8_default
;;	  0-->   154 r0=`*.LC14'                       :cortex_a8_load_store_1
;;	  1-->   156 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   504 pc=L175                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 155
;;   new tail = 504

;;   ======================================================
;;   -- basic block 25 from 161 to 161 -- after reload
;;   ======================================================

;;	  0-->   161 r6=r6+0x1                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 161
;;   new tail = 161

;;   ======================================================
;;   -- basic block 26 from 134 to 170 -- after reload
;;   ======================================================

;;	  0-->   166 r3=[r8+0x4]                       :cortex_a8_load_store_1
;;	  0-->   134 r1=r6                             :cortex_a8_default
;;	  2-->   133 r0=r3                             :cortex_a8_default
;;	  3-->   168 r3=[r3+0x170]                     :cortex_a8_load_store_1
;;	  5-->   169 cc=cmp(r6,r3)                     :cortex_a8_default
;;	  7-->   170 pc={(ltu(cc,0x0))?L167:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 134
;;   new tail = 170

;;   ======================================================
;;   -- basic block 27 from 173 to 174 -- after reload
;;   ======================================================

;;	  0-->   173 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  2-->   174 pc={(cc==0x0)?L208:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 173
;;   new tail = 174

;;   ======================================================
;;   -- basic block 28 from 177 to 506 -- after reload
;;   ======================================================

;;	  0-->   177 r6=r6-0x1                         :cortex_a8_default
;;	  0-->   401 r7=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   506 pc=L195                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 177
;;   new tail = 506

;;   ======================================================
;;   -- basic block 29 from 182 to 187 -- after reload
;;   ======================================================

;;	  0-->   182 r0=[r7+0x4]                       :cortex_a8_load_store_1
;;	  1-->   184 r0=call [`platform_get_irq']      :cortex_a8_issue_branch
;;	  1-->   406 r1=0x0                            :cortex_a8_default
;;	 33-->   186 cc=cmp(r0,r1)                     :cortex_a8_default
;;	 35-->   187 pc={(cc<0x0)?L195:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 182
;;   new tail = 187

;;   ======================================================
;;   -- basic block 30 from 191 to 191 -- after reload
;;   ======================================================

;;	  0-->   191 call [`free_irq']                 :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 191
;;   new tail = 191

;;   ======================================================
;;   -- basic block 31 from 183 to 199 -- after reload
;;   ======================================================

;;	  0-->   198 cc=cmp(r6,0xffffffffffffffff)     :cortex_a8_default
;;	  0-->   183 r1=r6                             :cortex_a8_default
;;	  1-->   194 r6=r6-0x1                         :cortex_a8_default
;;	  2-->   199 pc={(cc!=0x0)?L197:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 183
;;   new tail = 199

;;   ======================================================
;;   -- basic block 32 from 201 to 508 -- after reload
;;   ======================================================

;;	  0-->   201 r0=0x0                            :cortex_a8_default
;;	  1-->   202 r0=call [`release_pmu']           :cortex_a8_issue_branch
;;	  1-->   468 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   469 r2=0x0                            :cortex_a8_default
;;	  4-->   205 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  4-->   508 pc=L216                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 201
;;   new tail = 508

;;   ======================================================
;;   -- basic block 33 from 210 to 215 -- after reload
;;   ======================================================

;;	  0-->   210 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   212 r2=r3+0xc                         :cortex_a8_default
;;	  3-->   214 {r1=asm_operands;r0=asm_operands;[:nothing
;;	  4-->   215 r4=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 210
;;   new tail = 215

;;   ======================================================
;;   -- basic block 34 from 220 to 223 -- after reload
;;   ======================================================

;;	  0-->   220 r0=const(`*.LANCHOR1'+0x98)       :cortex_a8_load_store_1
;;	  1-->   221 call [`mutex_unlock']             :cortex_a8_issue_branch
;;	  1-->   222 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  3-->   223 pc={(cc!=0x0)?L370:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 220
;;   new tail = 223

;;   ======================================================
;;   -- basic block 35 from 226 to 228 -- after reload
;;   ======================================================

;;	  0-->   226 r3=[r5+0x78]                      :cortex_a8_load_store_1
;;	  2-->   227 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   228 pc={(cc!=0x0)?L241:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 226
;;   new tail = 228

;;   ======================================================
;;   -- basic block 36 from 233 to 237 -- after reload
;;   ======================================================

;;	  0-->   467 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   233 r2=[r5+0x80]                      :cortex_a8_load_store_1
;;	  3-->   231 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   232 r3=[r3+0x30]                      :cortex_a8_load_store_1
;;	  9-->   234 r4=[r2*0x4+r3]                    :cortex_a8_load_store_1
;;	  9-->   466 r3=0xffff                         :cortex_a8_default
;;	 11-->   236 cc=cmp(r4,r3)                     :cortex_a8_default
;;	 13-->   237 pc={(cc!=0x0)?L303:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 13
;;   new head = 233
;;   new tail = 237

;;   ======================================================
;;   -- basic block 37 from 511 to 511 -- after reload
;;   ======================================================

;;	  0-->   511 pc=L439                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 511
;;   new tail = 511

;;   ======================================================
;;   -- basic block 38 from 243 to 244 -- after reload
;;   ======================================================

;;	  0-->   243 cc=cmp(r3,0x3)                    :cortex_a8_default
;;	  2-->   244 pc={(cc!=0x0)?L288:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 243
;;   new tail = 244

;;   ======================================================
;;   -- basic block 39 from 398 to 249 -- after reload
;;   ======================================================

;;	  0-->   398 r2=[r5+0x80]                      :cortex_a8_load_store_1
;;	  2-->   247 r0=r2&0xff                        :cortex_a8_default
;;	  3-->   248 cc=cmp(r0,0x6)                    :cortex_a8_default
;;	  5-->   249 pc={(gtu(cc,0x0))?L486:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 398
;;   new tail = 249

;;   ======================================================
;;   -- basic block 40 from 255 to 257 -- after reload
;;   ======================================================

;;	  0-->   255 r1=zxt(r2,0x8,0x8)                :cortex_a8_default
;;	  1-->   256 cc=cmp(r1,0x2)                    :cortex_a8_default
;;	  3-->   257 pc={(gtu(cc,0x0))?L486:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 255
;;   new tail = 257

;;   ======================================================
;;   -- basic block 41 from 263 to 265 -- after reload
;;   ======================================================

;;	  0-->   263 r2=zxt(r2,0x8,0x10)               :cortex_a8_default
;;	  1-->   264 cc=cmp(r2,0x1)                    :cortex_a8_default
;;	  3-->   265 pc={(gtu(cc,0x0))?L486:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 263
;;   new tail = 265

;;   ======================================================
;;   -- basic block 42 from 272 to 278 -- after reload
;;   ======================================================

;;	  0-->   272 r3=r3*r0+r1                       :cortex_a8_multiply_2
;;	  1-->   465 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->   268 r1=[r1]                           :cortex_a8_load_store_1
;;	  6-->   274 r2=r3*0x2+r2                      :cortex_a8_default
;;	  6-->   464 r3=0xffff                         :cortex_a8_default
;;	  7-->   269 ip=[r1+0x2c]                      :cortex_a8_load_store_1
;;	 10-->   275 r4=[r2*0x4+ip]                    :cortex_a8_load_store_1
;;	 12-->   277 cc=cmp(r4,r3)                     :cortex_a8_default
;;	 13-->   280 (!cc) r4=0xfffffffffffffffe       :cortex_a8_default
;;	 14-->   278 pc={(cc!=0x0)?L303:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 14
;;   new head = 272
;;   new tail = 278

;;   ======================================================
;;   -- basic block 43 from 514 to 514 -- after reload
;;   ======================================================

;;	  0-->   514 pc=L366                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 514
;;   new tail = 514

;;   ======================================================
;;   -- basic block 44 from 290 to 291 -- after reload
;;   ======================================================

;;	  0-->   290 cc=cmp(r3,0x4)                    :cortex_a8_default
;;	  2-->   291 pc={(cc!=0x0)?L439:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 290
;;   new tail = 291

;;   ======================================================
;;   -- basic block 45 from 300 to 302 -- after reload
;;   ======================================================

;;	  0-->   463 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   300 r4=[r5+0x80]                      :cortex_a8_load_store_1
;;	  3-->   299 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   301 r3=[r3+0x34]                      :cortex_a8_load_store_1
;;	  8-->   302 r4=r4&r3                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 300
;;   new tail = 302

;;   ======================================================
;;   -- basic block 46 from 305 to 306 -- after reload
;;   ======================================================

;;	  0-->   305 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  2-->   306 pc={(cc<0x0)?L366:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 305
;;   new tail = 306

;;   ======================================================
;;   -- basic block 47 from 308 to 314 -- after reload
;;   ======================================================

;;	  0-->   308 r3=zxn([r5+0xa0])                 :cortex_a8_load_store_1
;;	  2-->   313 {cc=cmp(r3&0xf0,0x0);r3=r3&0xf0;} :cortex_a8_default
;;	  3-->   316 (cc) r4=0xffffffffffffffff        :cortex_a8_default
;;	  4-->   314 pc={(cc!=0x0)?L366:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 308
;;   new tail = 314

;;   ======================================================
;;   -- basic block 48 from 329 to 336 -- after reload
;;   ======================================================

;;	  0-->   329 r1=[r5+0x120]                     :cortex_a8_load_store_1
;;	  0-->   462 r0=0xffffffffffffffff             :cortex_a8_default
;;	  1-->   333 r2=[r5+0x124]                     :cortex_a8_load_store_1
;;	  2-->   322 [r5+0xe0]=r0                      :cortex_a8_load_store_1
;;	  2-->   473 r0=0x0                            :cortex_a8_default
;;	  3-->   335 {cc=cmp(r1|r2,0x0);clobber r2;}   :cortex_a8_default
;;	  3-->   323 [r5+0xd8]=r4                      :cortex_a8_load_store_1
;;	  4-->   474 r1=0x0                            :cortex_a8_default
;;	  4-->   327 [r5+0xdc]=r3                      :cortex_a8_load_store_1
;;	  5-->   325 [r5+0xc8]=r0                      :cortex_a8_load_store_1
;;	  5-->   336 pc={(cc!=0x0)?L348:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 329
;;   new tail = 336

;;   ======================================================
;;   -- basic block 49 from 346 to 347 -- after reload
;;   ======================================================

;;	  0-->   460 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->   459 r0=0x120                          :cortex_a8_default
;;	  1-->   346 r1=r5+0x130                       :cortex_a8_default
;;	  3-->   339 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   340 r2=[r3+0x40]                      :cortex_a8_load_store_1
;;	  9-->   342 [r5+r0]=r2                        :cortex_a8_load_store_1
;;	  9-->   458 r0=r0+0x8                         :cortex_a8_default
;;	 11-->   344 [r5+r0]=r2                        :cortex_a8_load_store_1
;;	 12-->   347 {r6=asm_operands;[r1]=asm_operands:nothing
;;	Ready list (final):  
;;   total time = 12
;;   new head = 346
;;   new tail = 347

;;   ======================================================
;;   -- basic block 50 from 350 to 352 -- after reload
;;   ======================================================

;;	  0-->   350 r3=[r5+0x28]                      :cortex_a8_load_store_1
;;	  2-->   351 cc=cmp(r3,r5)                     :cortex_a8_default
;;	  3-->   354 (!cc) r4=0x0                      :cortex_a8_default
;;	  4-->   352 pc={(cc==0x0)?L370:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 350
;;   new tail = 352

;;   ======================================================
;;   -- basic block 51 from 359 to 363 -- after reload
;;   ======================================================

;;	  0-->   359 r0=r5                             :cortex_a8_default
;;	  1-->   360 r0=call [`validate_group']        :cortex_a8_issue_branch
;;	 33-->   362 {cc=cmp(r0,0x0);r4=r0;}           :cortex_a8_default
;;	 35-->   363 pc={(cc==0x0)?L370:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 359
;;   new tail = 363

;;   ======================================================
;;   -- basic block 52 from 365 to 365 -- after reload
;;   ======================================================

;;	  0-->   365 r4=0xffffffffffffffea             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 365
;;   new tail = 365

;;   ======================================================
;;   -- basic block 53 from 368 to 369 -- after reload
;;   ======================================================

;;	  0-->   368 r0=r5                             :cortex_a8_default
;;	  1-->   369 call [`hw_perf_event_destroy']    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 368
;;   new tail = 369

;;   ======================================================
;;   -- basic block 54 from 386 to 480 -- after reload
;;   ======================================================

;;	  0-->   386 r0=r4                             :cortex_a8_default
;;	  0-->   392 use r0                            :nothing
;;	  0-->   480 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 386
;;   new tail = 480

;;   ======================================================
;;   -- basic block 55 from 377 to 516 -- after reload
;;   ======================================================

;;	  0-->   377 r4=0xffffffffffffffa1             :cortex_a8_default
;;	  0-->   516 pc=L366                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 377
;;   new tail = 516





armpmu_event_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,38u} r1={29d,17u} r2={31d,22u} r3={43d,40u,1d} r4={20d,21u,2d} r5={2d,20u,5d} r6={8d,18u,1d} r7={5d,5u} r8={2d,3u,1d} r9={2d,3u} r10={2d,4u} r11={2d,3u} r12={16d,2u} r13={2d,72u} r14={15d,2u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={49d,37u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2120{1803d,307u,10e} in 211{197 regular + 14 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 477 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 477 3 478 2 arch/arm/kernel/perf_event.c:544 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -48 [0xffffffffffffffd0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 0 r0))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 1 r1))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 2 r2))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 24 [0x18])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 28 [0x1c])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 32 [0x20])) [0 S4 A32])
                                (reg:SI 9 r9))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 36 [0x24])) [0 S4 A32])
                                (reg:SI 10 sl))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 40 [0x28])) [0 S4 A32])
                                (reg:SI 11 fp))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 44 [0x2c])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 478 477 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 478 2 2 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 2 6 7 2 arch/arm/kernel/perf_event.c:544 (set (reg/v/f:SI 5 r5 [orig:163 event ] [163])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 8 2 arch/arm/kernel/perf_event.c:547 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 394 2 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 394 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 394 9 3 NOTE_INSN_DELETED)

(insn:TI 9 12 11 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 2 r2 [166])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 11 9 13 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [165])
        (ashift:SI (reg:SI 2 r2 [166])
            (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [166])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))
            (nil))))

(insn:TI 13 11 14 3 arch/arm/kernel/perf_event.c:547 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [165])
                        (const_int 25 [0x19]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [165])
        (nil)))

(jump_insn:TI 14 13 17 3 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 17 14 18 4 165 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 18 493 4 arch/arm/kernel/perf_event.c:554 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -2 [0xfffffffffffffffe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2 [0xfffffffffffffffe])
        (nil)))

(jump_insn 493 19 494 4 (set (pc)
        (label_ref 370)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  54 [100.0%] 

(barrier 494 493 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
(code_label 22 494 23 5 166 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 25 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 6 r6 [169])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 25 24 26 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 26 25 29 5 arch/arm/kernel/perf_event.c:557 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
        (nil)))

(insn:TI 29 26 27 5 arch/arm/kernel/perf_event.c:558 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -19 [0xffffffffffffffed]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 27 29 33 5 arch/arm/kernel/perf_event.c:557 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 5 -> ( 6 54)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  6 [89.9%]  (fallthru)
;; Succ edge  54 [10.1%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  5 [89.9%]  (fallthru)
(note 33 27 470 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 470 33 46 6 arch/arm/kernel/perf_event.c:560 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
        (nil)))

(insn 46 470 48 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 3 r3 [263])
        (reg/f:SI 6 r6 [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 48 46 35 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 2 r2 [264])
        (plus:SI (reg/f:SI 6 r6 [169])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn:TI 35 48 38 6 arch/arm/kernel/perf_event.c:560 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:163 event ] [163])
                (const_int 500 [0x1f4])) [0 <variable>.destroy+0 S4 A32])
        (reg/f:SI 1 r1 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [171])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:163 event ] [163])
            (expr_list:REG_EQUAL (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
                (nil)))))

(insn:TI 38 35 61 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:215 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 11) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 61 38 39 7 172 "" [1 uses])

(note 39 61 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 7 -> ( 8 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [95.5%]  (fallthru)
;; Succ edge  12 [4.5%]  (loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  7 [95.5%]  (fallthru)
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 42 44 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:SI 1 r1 [orig:158 D.26586 ] [158])
        (plus:SI (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 44 43 51 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:117 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2611313)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  9 [86.0%]  (dfs_back)
(code_label 51 44 45 9 170 "" [1 uses])

(note 45 51 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 45 52 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (parallel [
            (set (reg/v:SI 12 ip [orig:156 res ] [156])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 0 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (reg/v:SI 0 r0 [orig:155 oldval ] [155])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 1 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 52 50 53 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:156 res ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:156 res ] [156])
        (nil)))

(jump_insn:TI 53 52 54 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 9 -> ( 9 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [86.0%]  (dfs_back)
;; Succ edge  10 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [14.0%]  (fallthru,loop_exit)
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 57 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:130 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2612977)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 57 55 58 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:155 oldval ] [155])
            (reg/v:SI 4 r4 [orig:157 c ] [157]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:157 c ] [157])
        (nil)))

(jump_insn:TI 58 57 59 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 224)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 10 -> ( 11 35)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  11 [86.0%]  (fallthru)
;; Succ edge  35 [14.0%]  (loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  10 [86.0%]  (fallthru)
(note 59 58 60 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 59 495 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:132 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (reg/v:SI 0 r0 [orig:155 oldval ] [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:155 oldval ] [155])
        (nil)))

(jump_insn 495 60 496 11 (set (pc)
        (label_ref 61)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 496 495 64)

;; Start of basic block ( 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [4.5%]  (loop_exit)
(code_label 64 496 65 12 169 "" [1 uses])

(note 65 64 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 68 65 69 12 arch/arm/kernel/perf_event.c:563 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(call_insn:TI 69 68 70 12 arch/arm/kernel/perf_event.c:563 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_lock") [flags 0x41] <function_decl 0x10d7c200 mutex_lock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 70 69 71 12 arch/arm/kernel/perf_event.c:564 (set (reg:SI 3 r3 [orig:161 D.25549 ] [161])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))

(insn:TI 71 70 72 12 arch/arm/kernel/perf_event.c:564 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:161 D.25549 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:161 D.25549 ] [161])
        (nil)))

(jump_insn:TI 72 71 73 12 arch/arm/kernel/perf_event.c:564 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  33 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 73 72 74 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 74 73 77 13 arch/arm/kernel/perf_event.c:398 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 77 74 75 13 arch/arm/kernel/perf_event.c:398 (set (reg/f:SI 6 r6 [179])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 75 77 79 13 arch/arm/kernel/perf_event.c:398 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("reserve_pmu") [flags 0x41] <function_decl 0x1147bb00 reserve_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 79 75 78 13 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 78 79 80 13 arch/arm/kernel/perf_event.c:398 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])
        (nil)))

(jump_insn:TI 80 78 81 13 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 13 -> ( 14 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [0.0%]  (fallthru)
;; Succ edge  16 [100.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [0.0%]  (fallthru)
(note 81 80 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 81 84 14 arch/arm/kernel/perf_event.c:400 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)
        (nil)))

(call_insn:TI 84 83 86 14 arch/arm/kernel/perf_event.c:400 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 86 84 87 14 include/linux/err.h:29 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn:TI 87 86 88 14 arch/arm/kernel/perf_event.c:568 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 88 87 497 14 arch/arm/kernel/perf_event.c:568 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 216)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 14 -> ( 15 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 (fallthru)
;; Succ edge  34 [100.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  14 (fallthru)
(note 497 88 498 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 498 497 499 15 (set (pc)
        (label_ref 208)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 33)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  33 [100.0%] 

(barrier 499 498 92)

;; Start of basic block ( 13) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [100.0%] 
(code_label 92 499 93 16 174 "" [1 uses])

(note 93 92 94 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 93 95 16 arch/arm/kernel/perf_event.c:404 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:157 c ] [157])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 95 94 97 16 arch/arm/kernel/perf_event.c:404 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_pmu") [flags 0x41] <function_decl 0x1147bc00 init_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 97 95 98 16 arch/arm/kernel/perf_event.c:406 (set (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn:TI 98 97 99 16 arch/arm/kernel/perf_event.c:406 (set (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 99 98 100 16 arch/arm/kernel/perf_event.c:407 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 100 99 101 16 arch/arm/kernel/perf_event.c:407 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [85.0%]  (fallthru)
;; Succ edge  18 [15.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  16 [85.0%]  (fallthru)
(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 102 101 103 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
        (mem/s/f/j:SI (reg/v/f:SI 2 r2 [orig:151 plat ] [151]) [0 <variable>.handle_irq+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 103 102 106 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
        (nil)))

(insn:TI 106 103 104 17 arch/arm/kernel/perf_event.c:408 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
            (symbol_ref:SI ("armpmu_platform_irq") [flags 0x3] <function_decl 0x114a1e80 armpmu_platform_irq>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 104 106 109 17 arch/arm/kernel/perf_event.c:407 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [15.0%]  (fallthru)
;; Succ edge  19 [85.0%] 

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7]
;; live  kill	

;; Pred edge  16 [15.0%] 
;; Pred edge  17 [15.0%]  (fallthru)
(code_label 109 104 110 18 176 "" [1 uses])

(note 110 109 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 111 110 112 18 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [184])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 112 111 113 18 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 113 112 114 18 arch/arm/kernel/perf_event.c:410 (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  17 [85.0%] 
(code_label 114 113 115 19 177 "" [1 uses])

(note 115 114 116 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 116 115 117 19 arch/arm/kernel/perf_event.c:412 (set (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 117 116 118 19 arch/arm/kernel/perf_event.c:412 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
        (nil)))

(jump_insn:TI 118 117 119 19 arch/arm/kernel/perf_event.c:412 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 124)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  in  	 5 [r5] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 119 118 121 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 121 119 120 20 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 120 121 165 20 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(insn:TI 165 120 142 20 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 8 r8 [257])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 142 165 140 20 include/linux/interrupt.h:135 (set (reg:SI 10 sl [259])
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 140 142 500 20 include/linux/interrupt.h:135 (set (reg/f:SI 9 r9 [258])
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(jump_insn 500 140 501 20 (set (pc)
        (label_ref 162)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 501 500 124)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  19 [0.0%] 
(code_label 124 501 125 21 178 "" [1 uses])

(note 125 124 127 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 127 125 129 21 arch/arm/kernel/perf_event.c:413 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)
        (nil)))

(insn 129 127 128 21 arch/arm/kernel/perf_event.c:414 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 128 129 502 21 arch/arm/kernel/perf_event.c:413 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 502 128 503 21 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 503 502 167)

;; Start of basic block ( 26) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  26 [95.5%] 
(code_label 167 503 132 22 182 "" [1 uses])

(note 132 167 136 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 136 132 135 22 NOTE_INSN_DELETED)

(call_insn:TI 135 136 145 22 arch/arm/kernel/perf_event.c:418 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 145 135 146 22 include/linux/interrupt.h:135 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])) 167 {*arm_movsi_insn} (nil))

(insn:TI 146 145 410 22 include/linux/interrupt.h:135 (set (reg:SI 2 r2)
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 410 146 137 22 include/linux/interrupt.h:135 (set (reg:SI 3 r3)
        (const_int 2080 [0x820])) 167 {*arm_movsi_insn} (nil))

(insn:TI 137 410 138 22 arch/arm/kernel/perf_event.c:419 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 11 fp [orig:154 irq ] [154])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn:TI 138 137 139 22 arch/arm/kernel/perf_event.c:419 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 22 -> ( 25 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  25 [47.5%] 
;; Succ edge  23 [52.5%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  22 [52.5%]  (fallthru)
(note 139 138 149 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 149 139 141 23 NOTE_INSN_DELETED)

(insn:TI 141 149 143 23 include/linux/interrupt.h:135 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 9 r9 [258])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(insn:TI 143 141 148 23 include/linux/interrupt.h:135 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 148 143 150 23 include/linux/interrupt.h:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("request_threaded_irq") [flags 0x41] <function_decl 0x10cec680 request_threaded_irq>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 150 148 151 23 arch/arm/kernel/perf_event.c:425 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 151 150 152 23 arch/arm/kernel/perf_event.c:425 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [0.0%]  (fallthru,loop_exit)
;; Succ edge  25 [100.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  23 [0.0%]  (fallthru,loop_exit)
(note 152 151 155 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 155 152 154 24 arch/arm/kernel/perf_event.c:426 (set (reg:SI 1 r1)
        (reg/v:SI 11 fp [orig:154 irq ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 154 155 156 24 arch/arm/kernel/perf_event.c:426 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)
        (nil)))

(call_insn:TI 156 154 504 24 arch/arm/kernel/perf_event.c:426 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 504 156 505 24 (set (pc)
        (label_ref 175)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 505 504 159)

;; Start of basic block ( 22 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  22 [47.5%] 
;; Pred edge  23 [100.0%] 
(code_label 159 505 160 25 180 "" [2 uses])

(note 160 159 161 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 161 160 162 25 arch/arm/kernel/perf_event.c:417 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 25 20) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru,dfs_back)
;; Pred edge  20 [100.0%] 
(code_label 162 161 163 26 179 "" [1 uses])

(note 163 162 166 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 166 163 134 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
            (nil))))

(insn 134 166 133 26 arch/arm/kernel/perf_event.c:418 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (nil))

(insn:TI 133 134 168 26 arch/arm/kernel/perf_event.c:418 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 168 133 169 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 169 168 170 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:153 i ] [153])
            (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192])
        (nil)))

(jump_insn:TI 170 169 171 26 arch/arm/kernel/perf_event.c:417 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 26 -> ( 22 27)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [95.5%] 
;; Succ edge  27 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [4.5%]  (fallthru,loop_exit)
(note 171 170 173 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 173 171 174 27 arch/arm/kernel/perf_event.c:432 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 174 173 175 27 arch/arm/kernel/perf_event.c:432 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 27 -> ( 28 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 27 24) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 175 174 176 28 181 "" [1 uses])

(note 176 175 177 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 177 176 401 28 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 401 177 506 28 (set (reg/f:SI 7 r7 [255])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn:TI 506 401 507 28 (set (pc)
        (label_ref 195)) 242 {*arm_jump} (nil))
;; End of basic block 28 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%] 

(barrier 507 506 197)

;; Start of basic block ( 31) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  31 [91.0%] 
(code_label 197 507 180 29 185 "" [1 uses])

(note 180 197 185 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 185 180 182 29 NOTE_INSN_DELETED)

(insn:TI 182 185 184 29 arch/arm/kernel/perf_event.c:434 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [255])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn:TI 184 182 406 29 arch/arm/kernel/perf_event.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 406 184 186 29 arch/arm/kernel/perf_event.c:436 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 186 406 187 29 arch/arm/kernel/perf_event.c:435 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (reg:SI 1 r1))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 187 186 188 29 arch/arm/kernel/perf_event.c:435 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
            (nil))))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  30 [52.5%]  (fallthru)
;; Succ edge  31 [47.5%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  29 [52.5%]  (fallthru)
(note 188 187 191 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 191 188 195 30 arch/arm/kernel/perf_event.c:436 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 30 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 30 29 28) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  30 [100.0%]  (fallthru,dfs_back)
;; Pred edge  29 [47.5%] 
;; Pred edge  28 [100.0%] 
(code_label 195 191 196 31 183 "" [2 uses])

(note 196 195 198 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 198 196 183 31 arch/arm/kernel/perf_event.c:433 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 183 198 194 31 arch/arm/kernel/perf_event.c:434 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:135 i.966 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 194 183 199 31 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 199 194 200 31 arch/arm/kernel/perf_event.c:433 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 31 -> ( 29 32)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  29 [91.0%] 
;; Succ edge  32 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  31 [9.0%]  (fallthru,loop_exit)
(note 200 199 201 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 201 200 202 32 arch/arm/kernel/perf_event.c:438 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 202 201 468 32 arch/arm/kernel/perf_event.c:438 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 468 202 469 32 arch/arm/kernel/perf_event.c:439 (set (reg/f:SI 3 r3 [254])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 469 468 205 32 arch/arm/kernel/perf_event.c:439 (set (reg:SI 2 r2 [195])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 205 469 508 32 arch/arm/kernel/perf_event.c:439 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [254])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 2 r2 [195])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [254])
        (expr_list:REG_DEAD (reg:SI 2 r2 [195])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(jump_insn 508 205 509 32 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 32 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 509 508 208)

;; Start of basic block ( 27 12 15) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  27 [50.0%] 
;; Pred edge  12 [71.0%] 
;; Pred edge  15 [100.0%] 
(code_label 208 509 209 33 173 "" [3 uses])

(note 209 208 210 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 209 212 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 3 r3 [196])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 212 210 214 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 2 r2 [198])
        (plus:SI (reg/f:SI 3 r3 [196])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn:TI 214 212 215 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (parallel [
            (set (reg/v:SI 1 r1 [orig:148 result ] [148])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (reg/v:SI 0 r0 [orig:147 tmp ] [147])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 3 r3 [196])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [198])
            (expr_list:REG_UNUSED (reg:QI 24 cc)
                (expr_list:REG_UNUSED (reg/v:SI 1 r1 [orig:148 result ] [148])
                    (expr_list:REG_UNUSED (reg/v:SI 0 r0 [orig:147 tmp ] [147])
                        (nil)))))))

(insn:TI 215 214 216 33 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 14 33 21 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [100.0%] 
;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
;; Pred edge  32 [100.0%] 
(code_label 216 215 217 34 175 "" [3 uses])

(note 217 216 220 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 220 217 221 34 arch/arm/kernel/perf_event.c:570 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(call_insn:TI 221 220 222 34 arch/arm/kernel/perf_event.c:570 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 222 221 223 34 arch/arm/kernel/perf_event.c:573 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 223 222 224 34 arch/arm/kernel/perf_event.c:573 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 34 -> ( 54 35)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  54 [100.0%] 
;; Succ edge  35 (fallthru)

;; Start of basic block ( 34 10) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  34 (fallthru)
;; Pred edge  10 [14.0%]  (loop_exit)
(code_label 224 223 225 35 171 "" [1 uses])

(note 225 224 226 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 226 225 227 35 arch/arm/kernel/perf_event.c:480 (set (reg:SI 3 r3 [orig:140 D.26654 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 227 226 228 35 arch/arm/kernel/perf_event.c:480 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 228 227 229 35 arch/arm/kernel/perf_event.c:480 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  36 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  35 [50.0%]  (fallthru)
(note 229 228 467 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 467 229 233 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [202])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 233 467 231 36 arch/arm/kernel/perf_event.c:160 (set (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(insn:TI 231 233 232 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [202]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 232 231 234 36 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
                (const_int 48 [0x30])) [0 <variable>.event_map+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 234 232 466 36 arch/arm/kernel/perf_event.c:160 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
            (nil))))

(insn 466 234 236 36 arch/arm/kernel/perf_event.c:161 (set (reg:SI 3 r3 [206])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn:TI 236 466 237 36 arch/arm/kernel/perf_event.c:161 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (reg:SI 3 r3 [206]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [206])
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
                (const_int 65535 [0xffff]))
            (nil))))

(jump_insn:TI 237 236 510 36 arch/arm/kernel/perf_event.c:161 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 36 -> ( 46 37)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [72.0%] 
;; Succ edge  37 [28.0%]  (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [28.0%]  (fallthru)
(note 510 237 511 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 511 510 512 37 (set (pc)
        (label_ref 439)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 55)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  55 [100.0%] 

(barrier 512 511 241)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [50.0%] 
(code_label 241 512 242 38 186 "" [1 uses])

(note 242 241 243 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn:TI 243 242 244 38 arch/arm/kernel/perf_event.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 3 [0x3]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 244 243 245 38 arch/arm/kernel/perf_event.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 288)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 38 -> ( 39 44)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  39 [28.0%]  (fallthru)
;; Succ edge  44 [72.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  38 [28.0%]  (fallthru)
(note 245 244 398 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn:TI 398 245 247 39 arch/arm/kernel/perf_event.c:483 (set (reg:SI 2 r2 [orig:248 temp.969 ] [248])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 247 398 248 39 arch/arm/kernel/perf_event.c:137 (set (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
        (and:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 248 247 249 39 arch/arm/kernel/perf_event.c:138 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
            (const_int 6 [0x6]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 249 248 250 39 arch/arm/kernel/perf_event.c:138 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 39 -> ( 52 40)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [50.0%] 
;; Succ edge  40 [50.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  39 [50.0%]  (fallthru)
(note 250 249 251 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(note 251 250 252 40 NOTE_INSN_DELETED)

(note 252 251 253 40 NOTE_INSN_DELETED)

(note 253 252 255 40 NOTE_INSN_DELETED)

(insn:TI 255 253 256 40 arch/arm/kernel/perf_event.c:141 (set (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(insn:TI 256 255 257 40 arch/arm/kernel/perf_event.c:142 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 257 256 258 40 arch/arm/kernel/perf_event.c:142 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 40 -> ( 52 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  40 [50.0%]  (fallthru)
(note 258 257 259 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 259 258 260 41 NOTE_INSN_DELETED)

(note 260 259 261 41 NOTE_INSN_DELETED)

(note 261 260 263 41 NOTE_INSN_DELETED)

(insn:TI 263 261 264 41 arch/arm/kernel/perf_event.c:145 (set (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 16 [0x10]))) 124 {extzv_t2} (nil))

(insn:TI 264 263 265 41 arch/arm/kernel/perf_event.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 265 264 266 41 arch/arm/kernel/perf_event.c:146 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 486)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
            (nil))))
;; End of basic block 41 -> ( 52 42)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  52 [73.0%] 
;; Succ edge  42 [27.0%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  41 [27.0%]  (fallthru)
(note 266 265 271 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 271 266 273 42 NOTE_INSN_DELETED)

(note 273 271 272 42 NOTE_INSN_DELETED)

(insn:TI 272 273 465 42 arch/arm/kernel/perf_event.c:149 (set (reg:SI 3 r3 [218])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:140 D.26654 ] [140])
                (reg/v:SI 0 r0 [orig:145 cache_type ] [145]))
            (reg/v:SI 1 r1 [orig:144 cache_op ] [144]))) 40 {*mulsi3addsi_v6} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
        (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
            (nil))))

(insn:TI 465 272 268 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [213])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 268 465 274 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [213]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 274 268 464 42 arch/arm/kernel/perf_event.c:149 (set (reg:SI 2 r2 [220])
        (plus:SI (mult:SI (reg:SI 3 r3 [218])
                (const_int 2 [0x2]))
            (reg/v:SI 2 r2 [orig:143 cache_result ] [143]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [218])
        (nil)))

(insn 464 274 269 42 arch/arm/kernel/perf_event.c:151 (set (reg:SI 3 r3 [221])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn:TI 269 464 275 42 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
                (const_int 44 [0x2c])) [0 <variable>.cache_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
        (nil)))

(insn:TI 275 269 277 42 arch/arm/kernel/perf_event.c:149 (set (reg/v:SI 4 r4 [orig:142 ret ] [142])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [220])
                    (const_int 4 [0x4]))
                (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])
        (expr_list:REG_DEAD (reg:SI 2 r2 [220])
            (nil))))

(insn:TI 277 275 280 42 arch/arm/kernel/perf_event.c:151 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
            (reg:SI 3 r3 [221]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [221])
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
                (const_int 65535 [0xffff]))
            (nil))))

(insn:TI 280 277 278 42 arch/arm/kernel/perf_event.c:152 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -2 [0xfffffffffffffffe]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 278 280 513 42 arch/arm/kernel/perf_event.c:151 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 42 -> ( 46 43)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [72.0%] 
;; Succ edge  43 [28.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  42 [28.0%]  (fallthru)
(note 513 278 514 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 514 513 515 43 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 43 -> ( 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  53 [100.0%] 

(barrier 515 514 288)

;; Start of basic block ( 38) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  38 [72.0%] 
(code_label 288 515 289 44 189 "" [1 uses])

(note 289 288 290 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 290 289 291 44 arch/arm/kernel/perf_event.c:484 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 D.26654 ] [140])
        (nil)))

(jump_insn:TI 291 290 296 44 arch/arm/kernel/perf_event.c:484 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 439)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 44 -> ( 45 55)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  45 [28.0%]  (fallthru)
;; Succ edge  55 [72.0%] 

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  44 [28.0%]  (fallthru)
(code_label 296 291 297 45 193 "" [0 uses])

(note 297 296 463 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 463 297 300 45 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 300 463 299 45 arch/arm/kernel/perf_event.c:167 (set (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(insn:TI 299 300 301 45 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 301 299 302 45 arch/arm/kernel/perf_event.c:167 (set (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
                (const_int 52 [0x34])) [0 <variable>.raw_event_mask+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 302 301 303 45 arch/arm/kernel/perf_event.c:167 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (and:SI (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
            (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225])
        (nil)))
;; End of basic block 45 -> ( 46)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  46 [100.0%]  (fallthru)

;; Start of basic block ( 36 45 42) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  36 [72.0%] 
;; Pred edge  45 [100.0%]  (fallthru)
;; Pred edge  42 [72.0%] 
(code_label 303 302 304 46 187 "" [2 uses])

(note 304 303 305 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn:TI 305 304 306 46 arch/arm/kernel/perf_event.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 306 305 307 46 arch/arm/kernel/perf_event.c:491 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 366)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 46 -> ( 53 47)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  53
;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
(note 307 306 310 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(note 310 307 311 47 NOTE_INSN_DELETED)

(note 311 310 312 47 NOTE_INSN_DELETED)

(note 312 311 308 47 NOTE_INSN_DELETED)

(insn:TI 308 312 313 47 arch/arm/kernel/perf_event.c:502 (set (reg:SI 3 r3 [227])
        (zero_extend:SI (mem/s:QI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                    (const_int 160 [0xa0])) [0 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 313 308 316 47 arch/arm/kernel/perf_event.c:502 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [227])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [230])
                (and:SI (reg:SI 3 r3 [227])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 316 313 314 47 arch/arm/kernel/perf_event.c:506 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int -1 [0xffffffffffffffff]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 314 316 320 47 arch/arm/kernel/perf_event.c:502 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 366)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 47 -> ( 48 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  48 [50.0%]  (fallthru)
;; Succ edge  53 [50.0%] 

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 2 [r2]

;; Pred edge  47 [50.0%]  (fallthru)
(note 320 314 334 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 334 320 329 48 NOTE_INSN_DELETED)

(insn:TI 329 334 462 48 arch/arm/kernel/perf_event.c:527 (set (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])
        (nil)))

(insn 462 329 333 48 arch/arm/kernel/perf_event.c:515 (set (reg:SI 0 r0 [231])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn:TI 333 462 322 48 arch/arm/kernel/perf_event.c:527 (set (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])
        (nil)))

(insn:TI 322 333 473 48 arch/arm/kernel/perf_event.c:515 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg:SI 0 r0 [231])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [231])
        (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
            (nil))))

(insn 473 322 335 48 arch/arm/kernel/perf_event.c:524 (set (reg:SI 0 r0 [232])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 335 473 323 48 arch/arm/kernel/perf_event.c:527 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
                        (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
            (expr_list:REG_UNUSED (reg:SI 2 r2)
                (nil)))))

(insn 323 335 474 48 arch/arm/kernel/perf_event.c:523 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 216 [0xd8])) [0 <variable>.hw.D.23168.D.23159.config_base+0 S4 A64])
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn:TI 474 323 327 48 arch/arm/kernel/perf_event.c:524 (set (reg:SI 1 r1 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 327 474 325 48 arch/arm/kernel/perf_event.c:525 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 220 [0xdc])) [0 <variable>.hw.D.23168.D.23159.event_base+0 S4 A32])
        (reg:SI 3 r3 [230])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [230])
        (nil)))

(insn:TI 325 327 336 48 arch/arm/kernel/perf_event.c:524 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 200 [0xc8])) [0 <variable>.hw.D.23168.D.23159.config+0 S8 A64])
        (reg:DI 0 r0 [232])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 336 325 337 48 arch/arm/kernel/perf_event.c:527 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 348)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 48 -> ( 49 50)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  49 [50.0%]  (fallthru)
;; Succ edge  50 [50.0%] 

;; Start of basic block ( 48) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  48 [50.0%]  (fallthru)
(note 337 336 460 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn:TI 460 337 459 49 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [240])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 459 460 346 49 arch/arm/kernel/perf_event.c:528 (set (reg:SI 0 r0 [234])
        (const_int 288 [0x120])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 288 [0x120])
        (nil)))

(insn:TI 346 459 339 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 1 r1 [245])
        (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
            (const_int 304 [0x130]))) 4 {*arm_addsi3} (nil))

(insn:TI 339 346 340 49 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [240]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 340 339 342 49 arch/arm/kernel/perf_event.c:528 (set (reg:DI 2 r2 [orig:141 D.26647 ] [141])
        (mem/s/j:DI (plus:SI (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 342 340 458 49 arch/arm/kernel/perf_event.c:528 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [234])) [0 <variable>.hw.sample_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (nil))

(insn 458 342 344 49 arch/arm/kernel/perf_event.c:529 (set (reg:SI 0 r0 [243])
        (plus:SI (reg:SI 0 r0 [243])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn:TI 344 458 347 49 arch/arm/kernel/perf_event.c:529 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [243])) [0 <variable>.hw.last_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:SI 0 r0 [243])
        (nil)))

(insn:TI 347 344 348 49 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:146 tmp ] [146])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (reg:SI 1 r1 [0]) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg/f:SI 1 r1 [245])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))
;; End of basic block 49 -> ( 50)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 48 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  48 [50.0%] 
;; Pred edge  49 [100.0%]  (fallthru)
(code_label 348 347 349 50 195 "" [1 uses])

(note 349 348 350 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn:TI 350 349 351 50 arch/arm/kernel/perf_event.c:534 (set (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])
        (nil)))

(insn:TI 351 350 354 50 arch/arm/kernel/perf_event.c:534 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
            (reg/v/f:SI 5 r5 [orig:163 event ] [163]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
        (nil)))

(insn:TI 354 351 352 50 arch/arm/kernel/perf_event.c:534 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 352 354 358 50 arch/arm/kernel/perf_event.c:534 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 50 -> ( 54 51)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  54 [30.2%] 
;; Succ edge  51 [69.8%]  (fallthru)

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  50 [69.8%]  (fallthru)
(note 358 352 361 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(note 361 358 359 51 NOTE_INSN_DELETED)

(insn:TI 359 361 360 51 arch/arm/kernel/perf_event.c:535 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 360 359 362 51 arch/arm/kernel/perf_event.c:535 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_group") [flags 0x3] <function_decl 0x114a1d80 validate_group>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 362 360 363 51 arch/arm/kernel/perf_event.c:536 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 363 362 486 51 arch/arm/kernel/perf_event.c:536 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 51 -> ( 52 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  52 [50.0%]  (fallthru)
;; Succ edge  54 [50.0%] 

;; Start of basic block ( 51 41 39 40) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  51 [50.0%]  (fallthru)
;; Pred edge  41 [73.0%] 
;; Pred edge  39 [50.0%] 
;; Pred edge  40 [50.0%] 
(code_label 486 363 364 52 200 "" [3 uses])

(note 364 486 365 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn:TI 365 364 366 52 arch/arm/kernel/perf_event.c:537 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 52 -> ( 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  53 [100.0%]  (fallthru)

;; Start of basic block ( 46 47 43 52 55) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  46
;; Pred edge  47 [50.0%] 
;; Pred edge  43 [100.0%] 
;; Pred edge  52 [100.0%]  (fallthru)
;; Pred edge  55 [100.0%] 
(code_label 366 365 367 53 192 "" [4 uses])

(note 367 366 368 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn:TI 368 367 369 53 arch/arm/kernel/perf_event.c:578 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 369 368 370 53 arch/arm/kernel/perf_event.c:578 (parallel [
            (call (mem:SI (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 53 -> ( 54)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  54 [100.0%]  (fallthru)

;; Start of basic block ( 5 50 34 53 51 4) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [10.1%] 
;; Pred edge  50 [30.2%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  53 [100.0%]  (fallthru)
;; Pred edge  51 [50.0%] 
;; Pred edge  4 [100.0%] 
(code_label 370 369 371 54 167 "" [5 uses])

(note 371 370 386 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn:TI 386 371 392 54 arch/arm/kernel/perf_event.c:581 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 392 386 479 54 arch/arm/kernel/perf_event.c:581 (use (reg/i:SI 0 r0)) -1 (nil))

(note 479 392 480 54 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 480 479 481 54 arch/arm/kernel/perf_event.c:581 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 54 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 481 480 439)

;; Start of basic block ( 44 37) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  44 [72.0%] 
;; Pred edge  37 [100.0%] 
(code_label 439 481 376 55 199 "" [2 uses])

(note 376 439 377 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn:TI 377 376 516 55 arch/arm/kernel/perf_event.c:161 discrim 2 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -95 [0xffffffffffffffa1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 516 377 517 55 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 55 -> ( 53)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  53 [100.0%] 

(barrier 517 516 471)

(note 471 517 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_stop (armv7pmu_stop)[0:1349]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 28 to 18 -- after reload
;;   ======================================================

;;	  0-->    28 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     7 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  2-->     8 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	 34-->     9 r1=r0                             :cortex_a8_default
;;	 35-->    10 r3=asm_operands                   :nothing
;;	 36-->    11 {asm_operands;clobber [scratch];} :nothing
;;	 37-->    12 r3=r3&0x3e                        :cortex_a8_default
;;	 38-->    13 asm_operands                      :nothing
;;	 39-->    16 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	 39-->    31 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 40-->    18 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 40
;;   new head = 28
;;   new tail = 18





armv7pmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={5d,2u} r4={1d,2u} r12={2d} r13={2d,5u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 262{246d,16u,0e} in 11{9 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 14 2 NOTE_INSN_DELETED)

(note 14 6 15 2 NOTE_INSN_DELETED)

(note 15 14 28 2 NOTE_INSN_DELETED)

(insn/f:TI 28 15 29 2 arch/arm/kernel/perf_event_v7.c:1119 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 29 28 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 29 8 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 10 9 11 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn:TI 11 10 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 12 11 13 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (and:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 62 [0x3e]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 13 12 16 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [137])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(insn:TI 16 13 30 2 arch/arm/kernel/perf_event_v7.c:1125 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 30 16 31 2 NOTE_INSN_EPILOGUE_BEG)

(insn 31 30 18 2 arch/arm/kernel/perf_event_v7.c:1126 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 18 31 19 2 arch/arm/kernel/perf_event_v7.c:1125 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 19 18 27)

(note 27 19 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_start (armv7pmu_start)[0:1348]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 29 to 19 -- after reload
;;   ======================================================

;;	  0-->    29 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     7 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  2-->     8 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	 34-->     9 r1=r0                             :cortex_a8_default
;;	 35-->    10 r3=asm_operands                   :nothing
;;	 36-->    11 {asm_operands;clobber [scratch];} :nothing
;;	 37-->    12 r3=r3|0x1                         :cortex_a8_default
;;	 38-->    13 r3=r3&0x3f                        :cortex_a8_default
;;	 39-->    14 asm_operands                      :nothing
;;	 40-->    17 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	 40-->    32 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 41-->    19 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 29
;;   new tail = 19





armv7pmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={6d,3u} r4={1d,2u} r12={2d} r13={2d,5u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 264{247d,17u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 15 2 NOTE_INSN_DELETED)

(note 15 6 16 2 NOTE_INSN_DELETED)

(note 16 15 29 2 NOTE_INSN_DELETED)

(insn/f:TI 29 16 30 2 arch/arm/kernel/perf_event_v7.c:1109 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 30 29 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 30 8 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1112 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 10 9 11 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn:TI 11 10 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 12 11 13 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (ior:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn:TI 13 12 14 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (and:SI (reg:SI 3 r3 [137])
            (const_int 63 [0x3f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 14 13 17 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (nil)))

(insn:TI 17 14 31 2 arch/arm/kernel/perf_event_v7.c:1115 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 31 17 32 2 NOTE_INSN_EPILOGUE_BEG)

(insn 32 31 19 2 arch/arm/kernel/perf_event_v7.c:1116 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 19 32 20 2 arch/arm/kernel/perf_event_v7.c:1115 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 28)

(note 28 20 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_disable_event (armv7pmu_disable_event)[0:1346]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 25 (  1.8)


armv7pmu_disable_event

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={10d,5u} r3={20d,15u,1d} r4={5d,14u,1d} r5={2d,3u} r6={2d,4u} r12={4d} r13={2d,20u} r14={4d,3u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={9d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 598{515d,81u,2e} in 54{50 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 2 )->[7]->( 12 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 7 5 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 9 )->[10]->( 13 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 9 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 11 7 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 12 10 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 13 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 119 to worklist
  Adding insn 22 to worklist
  Adding insn 29 to worklist
  Adding insn 123 to worklist
  Adding insn 39 to worklist
  Adding insn 51 to worklist
  Adding insn 49 to worklist
  Adding insn 59 to worklist
  Adding insn 66 to worklist
  Adding insn 125 to worklist
  Adding insn 76 to worklist
  Adding insn 86 to worklist
  Adding insn 93 to worklist
  Adding insn 122 to worklist
Finished finding needed instructions:
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 91 to worklist
  Adding insn 92 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 111 to worklist
  Adding insn 75 to worklist
  Adding insn 110 to worklist
  Adding insn 118 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 83 to worklist
  Adding insn 114 to worklist
  Adding insn 81 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 65 to worklist
  Adding insn 64 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 58 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 53 to worklist
  Adding insn 50 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 113 to worklist
  Adding insn 38 to worklist
  Adding insn 112 to worklist
  Adding insn 117 to worklist
processing block 6 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 46 to worklist
  Adding insn 115 to worklist
  Adding insn 44 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 2 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
  Adding insn 3 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 26 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 119 to 14 -- after reload
;;   ======================================================

;;	  0-->   119 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->     3 r4=r1                             :cortex_a8_default
;;	  3-->     9 r0=r6+0x10                        :cortex_a8_default
;;	  4-->    10 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	  4-->    13 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  5-->    16 (!cc) r3=0xffffffff80000000       :cortex_a8_default
;;	 36-->    11 r5=r0                             :cortex_a8_default
;;	 36-->    14 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 119
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 22 to 22 -- after reload
;;   ======================================================

;;	  0-->    22 pc={(leu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 22
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 25 to 29 -- after reload
;;   ======================================================

;;	  0-->    25 r3=[r6]                           :cortex_a8_load_store_1
;;	  3-->    26 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  5-->    27 r3=r3+0x1                         :cortex_a8_default
;;	  6-->    28 cc=cmp(r4,r3)                     :cortex_a8_default
;;	  8-->    29 pc={(leu(cc,0x0))?L42:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 25
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 117 to 123 -- after reload
;;   ======================================================

;;	  0-->   117 r2=sp                             :cortex_a8_default
;;	  0-->    36 r0=`*.LC15'                       :cortex_a8_load_store_1
;;	  1-->   112 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    38 r2=r4                             :cortex_a8_default
;;	  2-->   113 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    37 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    39 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   123 pc=L56                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 117
;;   new tail = 123

;;   ======================================================
;;   -- basic block 6 from 44 to 46 -- after reload
;;   ======================================================

;;	  0-->   115 r2=0x1                            :cortex_a8_default
;;	  0-->    44 r3=r4-0x2                         :cortex_a8_default
;;	  2-->    46 r3=r2<<r3                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 44
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 49 to 51 -- after reload
;;   ======================================================

;;	  0-->    49 asm_operands                      :nothing
;;	  1-->    50 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  2-->    53 (!cc) r4=0xffffffff80000000       :cortex_a8_default
;;	  3-->    51 pc={(cc==0x0)?L84:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 49
;;   new tail = 51

;;   ======================================================
;;   -- basic block 8 from 58 to 59 -- after reload
;;   ======================================================

;;	  0-->    58 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  2-->    59 pc={(leu(cc,0x0))?L67:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 58
;;   new tail = 59

;;   ======================================================
;;   -- basic block 9 from 61 to 66 -- after reload
;;   ======================================================

;;	  0-->    61 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    62 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->    63 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->    64 r3=r3+0x1                         :cortex_a8_default
;;	  9-->    65 cc=cmp(r4,r3)                     :cortex_a8_default
;;	 11-->    66 pc={(leu(cc,0x0))?L79:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 61
;;   new tail = 66

;;   ======================================================
;;   -- basic block 10 from 118 to 125 -- after reload
;;   ======================================================

;;	  0-->   118 r2=sp                             :cortex_a8_default
;;	  0-->    73 r0=`*.LC16'                       :cortex_a8_load_store_1
;;	  1-->   110 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    75 r2=r4                             :cortex_a8_default
;;	  2-->   111 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    74 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    76 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   125 pc=L87                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 118
;;   new tail = 125

;;   ======================================================
;;   -- basic block 11 from 81 to 83 -- after reload
;;   ======================================================

;;	  0-->   114 r3=0x1                            :cortex_a8_default
;;	  0-->    81 r4=r4-0x2                         :cortex_a8_default
;;	  2-->    83 r4=r3<<r4                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 81
;;   new tail = 83

;;   ======================================================
;;   -- basic block 12 from 86 to 86 -- after reload
;;   ======================================================

;;	  0-->    86 asm_operands                      :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 86
;;   new tail = 86

;;   ======================================================
;;   -- basic block 13 from 92 to 93 -- after reload
;;   ======================================================

;;	  0-->    92 r1=r5                             :cortex_a8_default
;;	  0-->    91 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  1-->   122 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  2-->    93 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 92
;;   new tail = 93





armv7pmu_disable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={10d,5u} r3={20d,15u,1d} r4={5d,14u,1d} r5={2d,3u} r6={2d,4u} r12={4d} r13={2d,20u} r14={4d,3u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={9d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 598{515d,81u,2e} in 54{50 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 119 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 119 4 120 2 arch/arm/kernel/perf_event_v7.c:1024 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 120 119 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 120 3 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/f:SI 6 r6 [141])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 3 7 9 2 arch/arm/kernel/perf_event_v7.c:1024 (set (reg/v:SI 4 r4 [orig:140 idx ] [140])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ idx ])
        (nil)))

(insn:TI 9 3 10 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 6 r6 [141])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 10 9 13 2 arch/arm/kernel/perf_event_v7.c:1030 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 10 16 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 13 11 2 arch/arm/kernel/perf_event_v7.c:885 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:135 val ] [135])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 11 16 14 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/v:SI 5 r5 [orig:138 flags ] [138])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 14 11 20 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  7 [28.0%] 
;; Succ edge  3 [72.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 20 14 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 22 20 23 3 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 23 22 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 26 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [141]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 26 25 27 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 26 28 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 28 27 29 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [145])
        (nil)))

(jump_insn:TI 29 28 30 4 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 30 29 31 5 214 "" [1 uses])

(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 34 31 117 5 NOTE_INSN_DELETED)

(insn:TI 117 34 36 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 117 112 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn:TI 112 36 38 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 38 112 113 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 113 38 37 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 113 39 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [148])
        (nil)))

(call_insn:TI 39 37 123 5 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 123 39 124 5 (set (pc)
        (label_ref 56)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 124 123 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 42 124 43 6 215 "" [1 uses])

(note 43 42 115 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 115 43 44 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [151])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 44 115 46 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 46 44 47 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [151])
            (reg:SI 3 r3 [150]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [151])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [150]))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [28.0%] 
(code_label 47 46 48 7 213 "" [1 uses])

(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:135 val ] [135])
        (nil)))

(insn:TI 50 49 53 7 arch/arm/kernel/perf_event_v7.c:919 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 53 50 51 7 arch/arm/kernel/perf_event_v7.c:927 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:133 val ] [133])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 51 53 56 7 arch/arm/kernel/perf_event_v7.c:919 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2802 [0xaf2])
            (nil))))
;; End of basic block 7 -> ( 12 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [28.0%] 
;; Succ edge  8 [72.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 56 51 57 8 216 "" [1 uses])

(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 57 59 8 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 59 58 60 8 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [0.0%] 
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 62 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 62 61 63 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 63 62 64 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 64 63 65 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 65 64 66 9 arch/arm/kernel/perf_event_v7.c:920 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [154]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [154])
        (nil)))

(jump_insn:TI 66 65 67 9 arch/arm/kernel/perf_event_v7.c:920 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [0.0%] 
;; Pred edge  9 [0.0%]  (fallthru)
(code_label 67 66 68 10 218 "" [1 uses])

(note 68 67 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 71 68 118 10 NOTE_INSN_DELETED)

(insn:TI 118 71 73 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 73 118 110 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)
        (nil)))

(insn:TI 110 73 75 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 75 110 111 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 111 75 74 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 3 r3 [157])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 74 111 76 10 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [157])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [157])
        (nil)))

(call_insn:TI 76 74 125 10 arch/arm/kernel/perf_event_v7.c:921 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 125 76 126 10 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 126 125 79)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  9 [100.0%] 
(code_label 79 126 80 11 219 "" [1 uses])

(note 80 79 114 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 114 80 81 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 3 r3 [160])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 81 114 83 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 4 r4 [159])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 83 81 84 11 arch/arm/kernel/perf_event_v7.c:929 (set (reg/v:SI 4 r4 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [160])
            (reg:SI 4 r4 [159]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [160])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 4 r4 [159]))
            (nil))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  7 [28.0%] 
(code_label 84 83 85 12 217 "" [1 uses])

(note 85 84 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 87 12 arch/arm/kernel/perf_event_v7.c:931 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 2") ("") 0 [
            (reg/v:SI 4 r4 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8925138) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 87 86 88 13 220 "" [1 uses])

(note 88 87 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 92 88 91 13 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:138 flags ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 91 92 121 13 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 121 91 122 13 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 122 121 93 13 arch/arm/kernel/perf_event_v7.c:1043 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 93 122 94 13 arch/arm/kernel/perf_event_v7.c:1042 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 13 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 94 93 116)

(note 116 94 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_reset (armv7pmu_reset)[0:1351]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


armv7pmu_reset

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r3={5d,3u} r4={3d,5u} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,7u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 161{136d,25u,0e} in 16{15 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 4 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 44 to worklist
  Adding insn 39 to worklist
  Adding insn 15 to worklist
  Adding insn 21 to worklist
  Adding insn 42 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
Finished finding needed instructions:
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 24 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
  Adding insn 20 to worklist
  Adding insn 33 to worklist
  Adding insn 14 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 37 to worklist
  Adding insn 9 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 39 to 44 -- after reload
;;   ======================================================

;;	  0-->    37 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    39 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->     9 r4=0x1                            :cortex_a8_default
;;	  3-->     7 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->     8 r5=[r3+0x38]                      :cortex_a8_load_store_1
;;	  6-->    44 pc=L17                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 39
;;   new tail = 44

;;   ======================================================
;;   -- basic block 3 from 15 to 15 -- after reload
;;   ======================================================

;;	  0-->    15 call [`armv7pmu_disable_event']   :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 15
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 14 to 21 -- after reload
;;   ======================================================

;;	  0-->    20 cc=cmp(r4,r5)                     :cortex_a8_default
;;	  0-->    14 r1=r4                             :cortex_a8_default
;;	  1-->    33 r0=0x0                            :cortex_a8_default
;;	  1-->    16 r4=r4+0x1                         :cortex_a8_default
;;	  2-->    21 pc={(ltu(cc,0x0))?L19:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 14
;;   new tail = 21

;;   ======================================================
;;   -- basic block 5 from 23 to 42 -- after reload
;;   ======================================================

;;	  0-->    23 {asm_operands;clobber [scratch];} :nothing
;;	  1-->    24 r3=0x6                            :cortex_a8_default
;;	  2-->    25 asm_operands                      :nothing
;;	  3-->    42 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 23
;;   new tail = 42





armv7pmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r3={5d,3u} r4={3d,5u} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,7u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 161{136d,25u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 37 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 37 3 39 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 39 37 40 2 arch/arm/kernel/perf_event_v7.c:1155 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 40 39 9 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 9 40 7 2 arch/arm/kernel/perf_event_v7.c:1159 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 7 9 8 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 8 7 44 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (nil)))

(jump_insn 44 8 45 2 arch/arm/kernel/perf_event_v7.c:1159 (set (pc)
        (label_ref 17)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 45 44 19)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 19 45 12 3 226 "" [1 uses])

(note 12 19 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 15 12 17 3 arch/arm/kernel/perf_event_v7.c:1160 (parallel [
            (call (mem:SI (symbol_ref:SI ("armv7pmu_disable_event") [flags 0x3] <function_decl 0x1150d880 armv7pmu_disable_event>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 17 15 18 4 225 "" [1 uses])

(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 14 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(insn 14 20 33 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 14 16 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 16 33 21 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 2 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 21 16 22 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 5 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 24 23 25 5 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn:TI 25 24 41 5 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (nil)))

(note 41 25 42 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 42 41 43 5 arch/arm/kernel/perf_event_v7.c:1164 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 42 36)

(note 36 43 38 NOTE_INSN_DELETED)

(note 38 36 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_enable_event (armv7pmu_enable_event)[0:1345]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 51 (  1.9)


armv7pmu_enable_event

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,8u} r1={12d,7u} r2={17d,10u} r3={39d,32u,2d} r4={3d,11u} r5={5d,15u,1d} r6={2d,3u} r7={4d,5u} r8={2d,4u} r12={6d} r13={2d,37u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,16u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 941{787d,151u,3e} in 106{100 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 3 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 6 2 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 7 5 )->[8]->( 9 15 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]

( 8 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 7 [r7] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 9 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 12 11 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 13 )->[14]->( 17 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 13 )->[15]->( 20 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]

( 15 )->[16]->( 18 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 16 14 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 16 17 )->[18]->( 21 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 17 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 19 15 )->[20]->( 25 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 20 18 )->[21]->( 23 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 21 )->[22]->( 23 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 21 22 )->[23]->( 26 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 22 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 24 20 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 25 23 )->[26]->( 1 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 26 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 10 to worklist
  Adding insn 217 to worklist
  Adding insn 22 to worklist
  Adding insn 29 to worklist
  Adding insn 221 to worklist
  Adding insn 39 to worklist
  Adding insn 49 to worklist
  Adding insn 53 to worklist
  Adding insn 57 to worklist
  Adding insn 64 to worklist
  Adding insn 223 to worklist
  Adding insn 74 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 87 to worklist
  Adding insn 225 to worklist
  Adding insn 90 to worklist
  Adding insn 96 to worklist
  Adding insn 104 to worklist
  Adding insn 112 to worklist
  Adding insn 227 to worklist
  Adding insn 122 to worklist
  Adding insn 134 to worklist
  Adding insn 132 to worklist
  Adding insn 142 to worklist
  Adding insn 149 to worklist
  Adding insn 229 to worklist
  Adding insn 159 to worklist
  Adding insn 169 to worklist
  Adding insn 176 to worklist
  Adding insn 220 to worklist
Finished finding needed instructions:
processing block 26 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 174 to worklist
  Adding insn 175 to worklist
processing block 23 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 157 to worklist
  Adding insn 156 to worklist
  Adding insn 202 to worklist
  Adding insn 158 to worklist
  Adding insn 201 to worklist
  Adding insn 216 to worklist
processing block 25 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 24 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 166 to worklist
  Adding insn 209 to worklist
  Adding insn 164 to worklist
processing block 22 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 148 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
processing block 21 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 141 to worklist
processing block 18 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 204 to worklist
  Adding insn 121 to worklist
  Adding insn 203 to worklist
  Adding insn 215 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 136 to worklist
  Adding insn 133 to worklist
processing block 19 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 129 to worklist
  Adding insn 210 to worklist
  Adding insn 127 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 109 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 89 to worklist
processing block 16 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 15 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
  Adding insn 98 to worklist
  Adding insn 95 to worklist
processing block 13 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 86 to worklist
processing block 11 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 72 to worklist
  Adding insn 75 to worklist
  Adding insn 71 to worklist
  Adding insn 206 to worklist
  Adding insn 73 to worklist
  Adding insn 205 to worklist
  Adding insn 214 to worklist
processing block 12 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 81 to worklist
  Adding insn 80 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 55 to worklist
processing block 8 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
  Adding insn 52 to worklist
processing block 7 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 5 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 208 to worklist
  Adding insn 38 to worklist
  Adding insn 207 to worklist
  Adding insn 213 to worklist
processing block 6 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 46 to worklist
  Adding insn 211 to worklist
  Adding insn 44 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 2 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
  Adding insn 12 to worklist
  Adding insn 2 to worklist
  Adding insn 3 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 52 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 217 to 14 -- after reload
;;   ======================================================

;;	  0-->   217 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r8=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->     2 r7=r0                             :cortex_a8_default
;;	  2-->     3 r4=r1                             :cortex_a8_default
;;	  3-->     9 r0=r8+0x10                        :cortex_a8_default
;;	  3-->    12 r5=r1                             :cortex_a8_default
;;	  4-->    10 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	  4-->    13 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  5-->    16 (!cc) r3=0xffffffff80000000       :cortex_a8_default
;;	 36-->    11 r6=r0                             :cortex_a8_default
;;	 36-->    14 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 217
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 22 to 22 -- after reload
;;   ======================================================

;;	  0-->    22 pc={(leu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 22
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 25 to 29 -- after reload
;;   ======================================================

;;	  0-->    25 r3=[r8]                           :cortex_a8_load_store_1
;;	  3-->    26 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  5-->    27 r3=r3+0x1                         :cortex_a8_default
;;	  6-->    28 cc=cmp(r4,r3)                     :cortex_a8_default
;;	  8-->    29 pc={(leu(cc,0x0))?L42:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 25
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 213 to 221 -- after reload
;;   ======================================================

;;	  0-->   213 r2=sp                             :cortex_a8_default
;;	  0-->    36 r0=`*.LC15'                       :cortex_a8_load_store_1
;;	  1-->   207 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    38 r2=r4                             :cortex_a8_default
;;	  2-->   208 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    37 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    39 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   221 pc=L50                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 213
;;   new tail = 221

;;   ======================================================
;;   -- basic block 6 from 44 to 46 -- after reload
;;   ======================================================

;;	  0-->   211 r2=0x1                            :cortex_a8_default
;;	  0-->    44 r3=r4-0x2                         :cortex_a8_default
;;	  2-->    46 r3=r2<<r3                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 44
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 49 to 49 -- after reload
;;   ======================================================

;;	  0-->    49 asm_operands                      :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 49
;;   new tail = 49

;;   ======================================================
;;   -- basic block 8 from 52 to 53 -- after reload
;;   ======================================================

;;	  0-->    52 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  2-->    53 pc={(cc==0x0)?L93:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 52
;;   new tail = 53

;;   ======================================================
;;   -- basic block 9 from 55 to 57 -- after reload
;;   ======================================================

;;	  0-->    55 r7=[r7+0x10]                      :cortex_a8_load_store_1
;;	  0-->    57 pc={(leu(cc,0x0))?L65:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 55
;;   new tail = 57

;;   ======================================================
;;   -- basic block 10 from 59 to 64 -- after reload
;;   ======================================================

;;	  0-->    59 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    60 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->    61 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->    62 r3=r3+0x1                         :cortex_a8_default
;;	  9-->    63 cc=cmp(r4,r3)                     :cortex_a8_default
;;	 11-->    64 pc={(leu(cc,0x0))?L78:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 59
;;   new tail = 64

;;   ======================================================
;;   -- basic block 11 from 214 to 223 -- after reload
;;   ======================================================

;;	  0-->   214 r2=sp                             :cortex_a8_default
;;	  0-->    71 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->   205 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    73 r2=r4                             :cortex_a8_default
;;	  2-->   206 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  2-->    75 r4=0xffffffffffffffff             :cortex_a8_default
;;	  4-->    72 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->    74 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   223 pc=L84                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 214
;;   new tail = 223

;;   ======================================================
;;   -- basic block 12 from 80 to 83 -- after reload
;;   ======================================================

;;	  0-->    80 r3=r4-0x2                         :cortex_a8_default
;;	  1-->    81 r3=r3&0x1f                        :cortex_a8_default
;;	  2-->    82 asm_operands                      :nothing
;;	  3-->    83 {asm_operands;clobber [scratch];} :nothing
;;	Ready list (final):  
;;   total time = 3
;;   new head = 80
;;   new tail = 83

;;   ======================================================
;;   -- basic block 13 from 86 to 87 -- after reload
;;   ======================================================

;;	  0-->    86 cc=cmp(r4,r5)                     :cortex_a8_default
;;	  2-->    87 pc={(cc!=0x0)?L93:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 86
;;   new tail = 87

;;   ======================================================
;;   -- basic block 14 from 89 to 225 -- after reload
;;   ======================================================

;;	  0-->    89 r7=r7&0xff                        :cortex_a8_default
;;	  1-->    90 asm_operands                      :nothing
;;	  2-->   225 pc=L105                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 89
;;   new tail = 225

;;   ======================================================
;;   -- basic block 15 from 95 to 96 -- after reload
;;   ======================================================

;;	  0-->    95 cc=cmp(r5,0x1)                    :cortex_a8_default
;;	  1-->    98 (!cc) r3=0xffffffff80000000       :cortex_a8_default
;;	  2-->    96 pc={(cc==0x0)?L130:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 95
;;   new tail = 96

;;   ======================================================
;;   -- basic block 16 from 104 to 104 -- after reload
;;   ======================================================

;;	  0-->   104 pc={(leu(cc,0x0))?L113:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 104
;;   new tail = 104

;;   ======================================================
;;   -- basic block 17 from 107 to 112 -- after reload
;;   ======================================================

;;	  0-->   107 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   108 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   109 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->   110 r3=r3+0x1                         :cortex_a8_default
;;	  9-->   111 cc=cmp(r5,r3)                     :cortex_a8_default
;;	 11-->   112 pc={(leu(cc,0x0))?L125:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 107
;;   new tail = 112

;;   ======================================================
;;   -- basic block 18 from 215 to 227 -- after reload
;;   ======================================================

;;	  0-->   215 r2=sp                             :cortex_a8_default
;;	  0-->   119 r0=`*.LC17'                       :cortex_a8_load_store_1
;;	  1-->   203 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->   121 r2=r5                             :cortex_a8_default
;;	  2-->   204 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   120 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->   122 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   227 pc=L139                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 215
;;   new tail = 227

;;   ======================================================
;;   -- basic block 19 from 127 to 129 -- after reload
;;   ======================================================

;;	  0-->   210 r2=0x1                            :cortex_a8_default
;;	  0-->   127 r3=r5-0x2                         :cortex_a8_default
;;	  2-->   129 r3=r2<<r3                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 127
;;   new tail = 129

;;   ======================================================
;;   -- basic block 20 from 132 to 134 -- after reload
;;   ======================================================

;;	  0-->   132 asm_operands                      :nothing
;;	  1-->   133 cc=cmp(r5,0x1)                    :cortex_a8_default
;;	  2-->   136 (!cc) r5=0xffffffff80000000       :cortex_a8_default
;;	  3-->   134 pc={(cc==0x0)?L167:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 132
;;   new tail = 134

;;   ======================================================
;;   -- basic block 21 from 141 to 142 -- after reload
;;   ======================================================

;;	  0-->   141 cc=cmp(r5,0x1)                    :cortex_a8_default
;;	  2-->   142 pc={(leu(cc,0x0))?L150:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 141
;;   new tail = 142

;;   ======================================================
;;   -- basic block 22 from 144 to 149 -- after reload
;;   ======================================================

;;	  0-->   144 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   145 r3=[r3]                           :cortex_a8_load_store_1
;;	  6-->   146 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  8-->   147 r3=r3+0x1                         :cortex_a8_default
;;	  9-->   148 cc=cmp(r5,r3)                     :cortex_a8_default
;;	 11-->   149 pc={(leu(cc,0x0))?L162:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 144
;;   new tail = 149

;;   ======================================================
;;   -- basic block 23 from 216 to 229 -- after reload
;;   ======================================================

;;	  0-->   216 r2=sp                             :cortex_a8_default
;;	  0-->   156 r0=`*.LC18'                       :cortex_a8_load_store_1
;;	  1-->   201 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->   158 r2=r5                             :cortex_a8_default
;;	  2-->   202 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   157 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	  5-->   159 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   229 pc=L170                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 216
;;   new tail = 229

;;   ======================================================
;;   -- basic block 24 from 164 to 166 -- after reload
;;   ======================================================

;;	  0-->   209 r3=0x1                            :cortex_a8_default
;;	  0-->   164 r5=r5-0x2                         :cortex_a8_default
;;	  2-->   166 r5=r3<<r5                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 164
;;   new tail = 166

;;   ======================================================
;;   -- basic block 25 from 169 to 169 -- after reload
;;   ======================================================

;;	  0-->   169 asm_operands                      :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 169
;;   new tail = 169

;;   ======================================================
;;   -- basic block 26 from 175 to 176 -- after reload
;;   ======================================================

;;	  0-->   175 r1=r6                             :cortex_a8_default
;;	  0-->   174 r0=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  1-->   220 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  2-->   176 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 175
;;   new tail = 176





armv7pmu_enable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,8u} r1={12d,7u} r2={17d,10u} r3={39d,32u,2d} r4={3d,11u} r5={5d,15u,1d} r6={2d,3u} r7={4d,5u} r8={2d,4u} r12={6d} r13={2d,37u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,16u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 941{787d,151u,3e} in 106{100 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 217 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 217 4 218 2 arch/arm/kernel/perf_event_v7.c:989 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 218 217 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 218 2 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/f:SI 8 r8 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 2 7 3 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
        (reg:SI 0 r0 [ hwc ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ hwc ])
        (nil)))

(insn 3 2 9 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 3 12 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 8 r8 [145])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 12 9 10 2 arch/arm/kernel/perf_event_v7.c:1001 (set (reg/v:SI 5 r5 [orig:140 idx ] [140])
        (reg:SI 1 r1 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:144 idx ] [144])
        (nil)))

(call_insn:TI 10 12 13 2 arch/arm/kernel/perf_event_v7.c:996 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 10 16 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 13 11 2 arch/arm/kernel/perf_event_v7.c:885 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:138 val ] [138])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 11 16 14 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/v:SI 6 r6 [orig:141 flags ] [141])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 14 11 20 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  7 [28.0%] 
;; Succ edge  3 [72.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 20 14 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 22 20 23 3 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 23 22 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 23 26 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 26 25 27 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 26 28 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [149])
        (plus:SI (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 28 27 29 4 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (nil)))

(jump_insn:TI 29 28 30 4 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 30 29 31 5 233 "" [1 uses])

(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 34 31 213 5 NOTE_INSN_DELETED)

(insn:TI 213 34 36 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 36 213 207 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn:TI 207 36 38 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 38 207 208 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 208 38 37 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 3 r3 [152])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 208 39 5 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [152])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [152])
        (nil)))

(call_insn:TI 39 37 221 5 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 221 39 222 5 (set (pc)
        (label_ref 50)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 222 221 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 42 222 43 6 234 "" [1 uses])

(note 43 42 211 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 211 43 44 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [155])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 44 211 46 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [154])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 46 44 47 6 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:138 val ] [138])
        (ashift:SI (reg:SI 2 r2 [155])
            (reg:SI 3 r3 [154]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [155])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [154]))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [28.0%] 
(code_label 47 46 48 7 232 "" [1 uses])

(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:138 val ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 50 49 51 8 235 "" [1 uses])

(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 53 8 arch/arm/kernel/perf_event_v7.c:1007 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 53 52 54 8 arch/arm/kernel/perf_event_v7.c:1007 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 8 -> ( 9 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  9 [72.0%]  (fallthru)
;; Succ edge  15 [28.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 7 [r7] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  8 [72.0%]  (fallthru)
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 57 9 arch/arm/kernel/perf_event_v7.c:1008 (set (reg:SI 7 r7 [orig:142 D.25960 ] [142])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(jump_insn 57 55 58 9 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 65)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [0.0%] 
;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 59 58 60 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 60 59 61 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [156]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 61 60 62 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 61 63 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [158])
        (plus:SI (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 63 62 64 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [158]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [158])
        (nil)))

(jump_insn:TI 64 63 65 10 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%] 
;; Pred edge  10 [0.0%]  (fallthru)
(code_label 65 64 66 11 237 "" [1 uses])

(note 66 65 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 69 66 214 11 NOTE_INSN_DELETED)

(insn:TI 214 69 71 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 71 214 205 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn:TI 205 71 73 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 73 205 206 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (nil)))

(insn:TI 206 73 75 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 3 r3 [161])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 75 206 72 11 arch/arm/kernel/perf_event_v7.c:803 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn:TI 72 75 74 11 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [161])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [161])
        (nil)))

(call_insn:TI 74 72 223 11 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 223 74 224 11 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 224 223 78)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 78 224 79 12 238 "" [1 uses])

(note 79 78 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 80 79 81 12 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [163])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 81 80 82 12 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [164])
        (and:SI (reg:SI 3 r3 [163])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 82 81 83 12 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 3 r3 [164])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (nil))

(insn:TI 83 82 84 12 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 84 83 85 13 239 "" [1 uses])

(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 87 13 arch/arm/kernel/perf_event_v7.c:845 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg/v:SI 5 r5 [orig:140 idx ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 87 86 88 13 arch/arm/kernel/perf_event_v7.c:845 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  13 [28.0%]  (fallthru)
(note 88 87 89 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 89 88 90 14 arch/arm/kernel/perf_event_v7.c:847 (set (reg:SI 7 r7 [165])
        (and:SI (reg:SI 7 r7 [orig:142 D.25960 ] [142])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 90 89 225 14 arch/arm/kernel/perf_event_v7.c:847 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 1") ("") 0 [
            (reg:SI 7 r7 [165])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8914387) -1 (nil))

(jump_insn:TI 225 90 226 14 (set (pc)
        (label_ref 105)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 226 225 93)

;; Start of basic block ( 8 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [28.0%] 
;; Pred edge  13 [72.0%] 
(code_label 93 226 94 15 236 "" [2 uses])

(note 94 93 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 95 94 98 15 arch/arm/kernel/perf_event_v7.c:898 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 98 95 96 15 arch/arm/kernel/perf_event_v7.c:906 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:135 val ] [135])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 96 98 102 15 arch/arm/kernel/perf_event_v7.c:898 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3507 [0xdb3])
        (nil)))
;; End of basic block 15 -> ( 20 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  20 [35.1%] 
;; Succ edge  16 [64.9%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [64.9%]  (fallthru)
(note 102 96 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 104 102 105 16 arch/arm/kernel/perf_event_v7.c:898 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6 [0x6])
            (nil))))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [0.1%] 
;; Succ edge  17 [99.9%]  (fallthru)

;; Start of basic block ( 16 14) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [99.9%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 105 104 106 17 240 "" [1 uses])

(note 106 105 107 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 106 108 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [166])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 108 107 109 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [166]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 109 108 110 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 110 109 111 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [168])
        (plus:SI (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 111 110 112 17 arch/arm/kernel/perf_event_v7.c:899 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [168]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [168])
        (nil)))

(jump_insn:TI 112 111 113 17 arch/arm/kernel/perf_event_v7.c:899 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  16 [0.1%] 
;; Pred edge  17 [0.0%]  (fallthru)
(code_label 113 112 114 18 243 "" [1 uses])

(note 114 113 117 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 117 114 215 18 NOTE_INSN_DELETED)

(insn:TI 215 117 119 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 119 215 203 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)
        (nil)))

(insn:TI 203 119 121 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 121 203 204 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 204 121 120 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 3 r3 [171])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 120 204 122 18 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [171])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [171])
        (nil)))

(call_insn:TI 122 120 227 18 arch/arm/kernel/perf_event_v7.c:900 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 227 122 228 18 (set (pc)
        (label_ref 139)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 228 227 125)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  17 [100.0%] 
(code_label 125 228 126 19 244 "" [1 uses])

(note 126 125 210 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 126 127 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 2 r2 [174])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 127 210 129 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 3 r3 [173])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 129 127 130 19 arch/arm/kernel/perf_event_v7.c:908 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [174])
            (reg:SI 3 r3 [173]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [174])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 3 r3 [173]))
            (nil))))
;; End of basic block 19 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19 15) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  15 [35.1%] 
(code_label 130 129 131 20 242 "" [1 uses])

(note 131 130 132 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 132 131 133 20 arch/arm/kernel/perf_event_v7.c:910 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 1") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8922450) -1 (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:135 val ] [135])
        (nil)))

(insn:TI 133 132 136 20 arch/arm/kernel/perf_event_v7.c:855 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 136 133 134 20 arch/arm/kernel/perf_event_v7.c:863 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 5 r5 [orig:133 val ] [133])
            (const_int -2147483648 [0xffffffff80000000]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 134 136 139 20 arch/arm/kernel/perf_event_v7.c:855 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2802 [0xaf2])
            (nil))))
;; End of basic block 20 -> ( 25 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

;; Start of basic block ( 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  20 [72.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 139 134 140 21 245 "" [1 uses])

(note 140 139 141 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 141 140 142 21 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 142 141 143 21 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 21 -> ( 23 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [0.0%] 
;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [100.0%]  (fallthru)
(note 143 142 144 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 144 143 145 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 145 144 146 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [175]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn:TI 146 145 147 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 147 146 148 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 148 147 149 22 arch/arm/kernel/perf_event_v7.c:856 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [177]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [177])
        (nil)))

(jump_insn:TI 149 148 150 22 arch/arm/kernel/perf_event_v7.c:856 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 22 -> ( 23 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [0.0%]  (fallthru)
;; Succ edge  24 [100.0%] 

;; Start of basic block ( 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  21 [0.0%] 
;; Pred edge  22 [0.0%]  (fallthru)
(code_label 150 149 151 23 247 "" [1 uses])

(note 151 150 154 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 154 151 216 23 NOTE_INSN_DELETED)

(insn:TI 216 154 156 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 156 216 201 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)
        (nil)))

(insn:TI 201 156 158 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 158 201 202 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 202 158 157 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 3 r3 [180])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 157 202 159 23 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [180])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [180])
        (nil)))

(call_insn:TI 159 157 229 23 arch/arm/kernel/perf_event_v7.c:857 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 229 159 230 23 (set (pc)
        (label_ref 170)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 230 229 162)

;; Start of basic block ( 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  22 [100.0%] 
(code_label 162 230 163 24 248 "" [1 uses])

(note 163 162 209 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 209 163 164 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 3 r3 [183])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 164 209 166 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 5 r5 [182])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 166 164 167 24 arch/arm/kernel/perf_event_v7.c:865 (set (reg/v:SI 5 r5 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [183])
            (reg:SI 5 r5 [182]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [183])
        (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
                (reg:SI 5 r5 [182]))
            (nil))))
;; End of basic block 24 -> ( 25)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24 20) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  20 [28.0%] 
(code_label 167 166 168 25 246 "" [1 uses])

(note 168 167 169 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 169 168 170 25 arch/arm/kernel/perf_event_v7.c:867 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 1") ("") 0 [
            (reg/v:SI 5 r5 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8916946) -1 (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 23) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  23 [100.0%] 
(code_label 170 169 171 26 249 "" [1 uses])

(note 171 170 175 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 175 171 174 26 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:141 flags ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 174 175 219 26 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(note 219 174 220 26 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 220 219 176 26 arch/arm/kernel/perf_event_v7.c:1021 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 176 220 177 26 arch/arm/kernel/perf_event_v7.c:1020 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 26 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 177 176 212)

(note 212 177 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_get_event_idx (armv7pmu_get_event_idx)[0:1350]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 18 (  1.8)


armv7pmu_get_event_idx

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={3d} r3={6d,3u} r4={5d,8u} r5={2d,4u} r6={2d,4u,1d} r12={2d} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,7u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{262d,50u,1e} in 28{26 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 2 )->[3]->( 9 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 )->[4]->( 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 7 )->[5]->( 9 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 2 )->[7]->( 5 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 7 4 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 8 5 3 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 74 to worklist
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 83 to worklist
  Adding insn 34 to worklist
  Adding insn 31 to worklist
  Adding insn 44 to worklist
  Adding insn 77 to worklist
  Adding insn 60 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 54 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 36 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 33 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 47 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
processing block 4 lr out =  5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 18 to worklist
  Adding insn 19 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 40 to worklist
  Adding insn 12 to worklist
  Adding insn 8 to worklist
  Adding insn 65 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 21 (  2.1)
;;   ======================================================
;;   -- basic block 2 from 74 to 9 -- after reload
;;   ======================================================

;;	  0-->    74 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r3=[r1+0x10]                      :cortex_a8_load_store_1
;;	  2-->    65 r5=r0+0x84                        :cortex_a8_default
;;	  3-->     8 cc=cmp(r3,0xff)                   :cortex_a8_default
;;	  4-->    12 (cc) r4=0x2                       :cortex_a8_default
;;	  5-->    40 (cc) r6=`*.LANCHOR0'              :cortex_a8_load_store_1
;;	  5-->     9 pc={(cc!=0x0)?L37:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 74
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 19 to 23 -- after reload
;;   ======================================================

;;	  0-->    19 r1=r5                             :cortex_a8_default
;;	  0-->    18 r0=0x1                            :cortex_a8_default
;;	  1-->    20 r0=call [`_test_and_set_bit']     :cortex_a8_issue_branch
;;	 33-->    22 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    25 (!cc) r4=0x1                      :cortex_a8_default
;;	 35-->    23 pc={(cc==0x0)?L48:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 19
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 83 to 83 -- after reload
;;   ======================================================

;;	  0-->    83 pc=L45                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 83
;;   new tail = 83

;;   ======================================================
;;   -- basic block 5 from 31 to 34 -- after reload
;;   ======================================================

;;	  0-->    31 r0=call [`_test_and_set_bit']     :cortex_a8_issue_branch
;;	 32-->    33 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    34 pc={(cc==0x0)?L48:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 31
;;   new tail = 34

;;   ======================================================
;;   -- basic block 6 from 36 to 36 -- after reload
;;   ======================================================

;;	  0-->    36 r4=r4+0x1                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 36
;;   new tail = 36

;;   ======================================================
;;   -- basic block 7 from 29 to 44 -- after reload
;;   ======================================================

;;	  0-->    41 r3=[r6]                           :cortex_a8_load_store_1
;;	  0-->    29 r0=r4                             :cortex_a8_default
;;	  1-->    30 r1=r5                             :cortex_a8_default
;;	  3-->    42 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  5-->    43 cc=cmp(r4,r3)                     :cortex_a8_default
;;	  7-->    44 pc={(cc<=0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 29
;;   new tail = 44

;;   ======================================================
;;   -- basic block 8 from 47 to 47 -- after reload
;;   ======================================================

;;	  0-->    47 r4=0xfffffffffffffff5             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 47
;;   new tail = 47

;;   ======================================================
;;   -- basic block 9 from 54 to 77 -- after reload
;;   ======================================================

;;	  0-->    54 r0=r4                             :cortex_a8_default
;;	  0-->    60 use r0                            :nothing
;;	  0-->    77 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 54
;;   new tail = 77





armv7pmu_get_event_idx

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={3d} r3={6d,3u} r4={5d,8u} r5={2d,4u} r6={2d,4u,1d} r12={2d} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,7u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{262d,50u,1e} in 28{26 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 74 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 74 4 75 2 arch/arm/kernel/perf_event_v7.c:1130 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 75 74 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 75 65 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ event ])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ event ])
        (nil)))

(insn:TI 65 7 8 2 (set (reg/f:SI 5 r5 [146])
        (plus:SI (reg:SI 0 r0 [ cpuc ])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [ cpuc ])
        (nil)))

(insn:TI 8 65 12 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
        (nil)))

(insn:TI 12 8 40 2 arch/arm/kernel/perf_event_v7.c:1145 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 2 [0x2]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 40 12 9 2 arch/arm/kernel/perf_event_v7.c:1144 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 6 r6 [147])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 9 40 16 2 arch/arm/kernel/perf_event_v7.c:1134 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [86.3%] 
;; Succ edge  3 [13.7%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [13.7%]  (fallthru)
(note 16 9 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 16 19 3 NOTE_INSN_DELETED)

(insn:TI 19 21 18 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(insn 18 19 20 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 20 18 22 3 arch/arm/kernel/perf_event_v7.c:1135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 22 20 25 3 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 25 22 23 3 arch/arm/kernel/perf_event_v7.c:1138 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 23 25 82 3 arch/arm/kernel/perf_event_v7.c:1135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 9 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 82 23 83 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 83 82 84 4 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 8)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 84 83 39)

;; Start of basic block ( 7) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [95.5%] 
(code_label 39 84 28 5 258 "" [1 uses])

(note 28 39 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 32 28 31 5 NOTE_INSN_DELETED)

(call_insn:TI 31 32 33 5 arch/arm/kernel/perf_event_v7.c:1145 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 33 31 34 5 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 34 33 35 5 arch/arm/kernel/perf_event_v7.c:1145 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [4.5%]  (loop_exit)
;; Succ edge  6 [95.5%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  5 [95.5%]  (fallthru)
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 35 37 6 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [86.3%] 
(code_label 37 36 38 7 255 "" [1 uses])

(note 38 37 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 41 38 29 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 29 41 30 7 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 30 29 42 7 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 42 30 43 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 42 44 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144])
        (nil)))

(jump_insn:TI 44 43 45 7 arch/arm/kernel/perf_event_v7.c:1144 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 5 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [95.5%] 
;; Succ edge  8 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
;; Pred edge  4 [100.0%] 
(code_label 45 44 46 8 256 "" [1 uses])

(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 46 48 8 arch/arm/kernel/perf_event_v7.c:1136 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int -11 [0xfffffffffffffff5])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 3) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [4.5%]  (loop_exit)
;; Pred edge  3 [50.0%] 
(code_label 48 47 49 9 257 "" [2 uses])

(note 49 48 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 49 60 9 arch/arm/kernel/perf_event_v7.c:1152 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 60 54 76 9 arch/arm/kernel/perf_event_v7.c:1152 (use (reg/i:SI 0 r0)) -1 (nil))

(note 76 60 77 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 77 76 78 9 arch/arm/kernel/perf_event_v7.c:1152 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 78 77 72)

(note 72 78 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function armv7pmu_handle_irq (armv7pmu_handle_irq)[0:1347]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 26 count 44 (  2.4)


armv7pmu_handle_irq

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,14u,1d} r1={19d,13u} r2={16d,10u} r3={17d,11u} r4={3d,14u} r5={3d,12u} r6={3d,4u} r7={5d,7u,1d} r8={2d,4u,2d} r9={2d,3u} r10={2d,5u} r11={4d,6u} r12={6d} r13={3d,41u,1d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={14d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 946{784d,157u,5e} in 96{90 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 17 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 2 )->[3]->( 15 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 )->[4]->( 14 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 4 )->[5]->( 6 10 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]

( 5 )->[6]->( 7 9 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[8]->( 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 7 )->[9]->( 14 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 8 )->[10]->( 14 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 10 )->[11]->( 14 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 4 10 11 12 13 9 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 14 3 )->[15]->( 4 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 16 2 )->[17]->( 1 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 17 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 196 to worklist
  Adding insn 202 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 188 to worklist
  Adding insn 29 to worklist
  Adding insn 27 to worklist
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 58 to worklist
  Adding insn 53 to worklist
  Adding insn 61 to worklist
  Adding insn 69 to worklist
  Adding insn 73 to worklist
  Adding insn 204 to worklist
  Adding insn 206 to worklist
  Adding insn 87 to worklist
  Adding insn 93 to worklist
  Adding insn 110 to worklist
  Adding insn 107 to worklist
  Adding insn 103 to worklist
  Adding insn 100 to worklist
  Adding insn 119 to worklist
  Adding insn 116 to worklist
  Adding insn 126 to worklist
  Adding insn 137 to worklist
  Adding insn 139 to worklist
  Adding insn 200 to worklist
  Adding insn 153 to worklist
Finished finding needed instructions:
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 129 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 125 to worklist
  Adding insn 122 to worklist
  Adding insn 124 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 118 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 109 to worklist
  Adding insn 193 to worklist
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 104 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 158 to worklist
  Adding insn 98 to worklist
  Adding insn 95 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 92 to worklist
processing block 8 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 78 to worklist
  Adding insn 191 to worklist
  Adding insn 190 to worklist
  Adding insn 75 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 162 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 192 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 72 to worklist
  Adding insn 71 to worklist
processing block 6 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 5 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
  Adding insn 164 to worklist
  Adding insn 60 to worklist
processing block 4 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 57 to worklist
  Adding insn 55 to worklist
  Adding insn 189 to worklist
  Adding insn 49 to worklist
  Adding insn 54 to worklist
  Adding insn 50 to worklist
processing block 17 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 16 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 140 to worklist
processing block 15 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 136 to worklist
  Adding insn 134 to worklist
  Adding insn 133 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 63 to worklist
  Adding insn 195 to worklist
  Adding insn 194 to worklist
  Adding insn 39 to worklist
  Adding insn 25 to worklist
  Adding insn 132 to worklist
  Adding insn 38 to worklist
  Adding insn 18 to worklist
  Adding insn 101 to worklist
  Adding insn 24 to worklist
  Adding insn 179 to worklist
  Adding insn 17 to worklist
  Adding insn 31 to worklist
  Adding insn 23 to worklist
  Adding insn 43 to worklist
  Adding insn 30 to worklist
  Adding insn 28 to worklist
  Adding insn 176 to worklist
  Adding insn 175 to worklist
  Adding insn 185 to worklist
processing block 2 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 12 to worklist
  Adding insn 9 to worklist
  Adding insn 197 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 26 count 45 (  2.5)
;;   ======================================================
;;   -- basic block 2 from 196 to 10 -- after reload
;;   ======================================================

;;	  0-->   196 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->   197 sp=sp-0x6c                        :cortex_a8_default
;;	  2-->     7 r5=asm_operands                   :nothing
;;	  3-->     8 asm_operands                      :nothing
;;	  4-->     9 cc=cmp(r5,0x0)                    :cortex_a8_default
;;	  5-->    12 (!cc) r0=r5                       :cortex_a8_default
;;	  6-->    10 pc={(cc==0x0)?L141:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 196
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 185 to 202 -- after reload
;;   ======================================================

;;	  0-->   185 r0=sp                             :cortex_a8_default
;;	  0-->   179 r1=`__per_cpu_offset'             :cortex_a8_load_store_1
;;	  1-->   175 r7=r0&0xffffffffffffe03f          :cortex_a8_default
;;	  1-->    30 fp=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  2-->   176 r7=r7&0xffffffffffffffc0          :cortex_a8_default
;;	  2-->    17 r3=`__irq_regs'                   :cortex_a8_load_store_1
;;	  3-->    31 fp=asm_operands                   :nothing
;;	  4-->    23 r0=[r7+0x14]                      :cortex_a8_load_store_1
;;	  4-->    28 r2=0x0                            :cortex_a8_default
;;	  5-->    18 r3=asm_operands                   :nothing
;;	  6-->    43 r4=r2                             :cortex_a8_default
;;	  6-->   101 r9=0x128                          :cortex_a8_default
;;	  7-->    24 r1=[r0*0x4+r1]                    :cortex_a8_load_store_1
;;	  7-->   194 r0=0x0                            :cortex_a8_default
;;	  8-->   132 r8=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  9-->    38 fp=fp+r1                          :cortex_a8_default
;;	 10-->    25 r1=[r3+r1]                        :cortex_a8_load_store_1
;;	 11-->    29 [sp+0x64]=r2                      :cortex_a8_load_store_1
;;	 11-->    63 r2=r5&0xffffffff80000000          :cortex_a8_default
;;	 12-->   182 [sp+0x4]=r5                       :cortex_a8_load_store_1
;;	 13-->   186 [sp+0xc]=r1                       :cortex_a8_load_store_1
;;	 13-->    39 r1=fp+0x8c                        :cortex_a8_default
;;	 14-->   188 [sp+0x14]=r2                      :cortex_a8_load_store_1
;;	 15-->   187 [sp+0x10]=r1                      :cortex_a8_load_store_1
;;	 15-->   195 r1=0x0                            :cortex_a8_default
;;	 16-->   183 [sp]=r7                           :cortex_a8_load_store_1
;;	 17-->    27 [sp+0x38]=r0                      :cortex_a8_load_store_1
;;	 17-->   202 pc=L130                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 17
;;   new head = 185
;;   new tail = 202

;;   ======================================================
;;   -- basic block 4 from 50 to 58 -- after reload
;;   ======================================================

;;	  0-->   189 r6=[sp+0x10]                      :cortex_a8_load_store_1
;;	  0-->    50 r1=r4>>0x5                        :cortex_a8_default
;;	  1-->    54 r2=r4&0x1f                        :cortex_a8_default
;;	  1-->    49 r5=[r4*0x4+fp]                    :cortex_a8_load_store_1
;;	  3-->    53 r1=[r1*0x4+r6]                    :cortex_a8_load_store_1
;;	  6-->    55 r2=r1 0>>r2                       :cortex_a8_default
;;	  7-->    57 cc=cmp(zxt(r2,0x1,0x0),0x0)       :cortex_a8_default
;;	  9-->    58 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 50
;;   new tail = 58

;;   ======================================================
;;   -- basic block 5 from 60 to 61 -- after reload
;;   ======================================================

;;	  0-->    60 cc=cmp(r4,0x1)                    :cortex_a8_default
;;	  2-->   164 (!cc) r3=[sp+0x14]                :cortex_a8_load_store_1
;;	  2-->    61 pc={(cc==0x0)?L90:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 60
;;   new tail = 61

;;   ======================================================
;;   -- basic block 6 from 69 to 69 -- after reload
;;   ======================================================

;;	  0-->    69 pc={(leu(cc,0x0))?L81:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 69
;;   new tail = 69

;;   ======================================================
;;   -- basic block 7 from 71 to 73 -- after reload
;;   ======================================================

;;	  0-->    71 r3=r3+0x1                         :cortex_a8_default
;;	  1-->    72 cc=cmp(r4,r3)                     :cortex_a8_default
;;	  3-->    73 pc={(gtu(cc,0x0))?L81:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 71
;;   new tail = 73

;;   ======================================================
;;   -- basic block 8 from 75 to 204 -- after reload
;;   ======================================================

;;	  0-->   190 r7=[sp+0x4]                       :cortex_a8_load_store_1
;;	  0-->   191 r0=0x1                            :cortex_a8_default
;;	  1-->    75 r3=r4-0x2                         :cortex_a8_default
;;	  2-->    78 r3=r0<<r3&r7                      :cortex_a8_default
;;	  2-->   204 pc=L90                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 75
;;   new tail = 204

;;   ======================================================
;;   -- basic block 9 from 192 to 206 -- after reload
;;   ======================================================

;;	  0-->   192 r2=[sp]                           :cortex_a8_load_store_1
;;	  1-->   162 r0=`*.LC19'                       :cortex_a8_load_store_1
;;	  3-->    85 r1=[r2+0x14]                      :cortex_a8_load_store_1
;;	  3-->    86 r2=r4                             :cortex_a8_default
;;	  4-->    87 r0=call [`printk']                :cortex_a8_issue_branch
;;	  4-->   206 pc=L127                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 192
;;   new tail = 206

;;   ======================================================
;;   -- basic block 10 from 92 to 93 -- after reload
;;   ======================================================

;;	  0-->    92 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->    93 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 92
;;   new tail = 93

;;   ======================================================
;;   -- basic block 11 from 95 to 110 -- after reload
;;   ======================================================

;;	  0-->    95 sl=r5+0xc8                        :cortex_a8_default
;;	  0-->    98 r2=r4                             :cortex_a8_default
;;	  1-->   158 r3=0x1                            :cortex_a8_default
;;	  1-->    96 r0=r5                             :cortex_a8_default
;;	  2-->    97 r1=sl                             :cortex_a8_default
;;	  3-->   100 r0=call [`armpmu_event_update']   :cortex_a8_issue_branch
;;	  3-->   193 r6=[r5+r9]                        :cortex_a8_load_store_1
;;	  4-->   104 r0=r5                             :cortex_a8_default
;;	  4-->   105 r1=sl                             :cortex_a8_default
;;	  5-->   106 r2=r4                             :cortex_a8_default
;;	  6-->   103 [sp+0x58]=r6                      :cortex_a8_load_store_1
;;	  6-->   107 r0=call [`armpmu_event_set_period':cortex_a8_issue_branch
;;	 38-->   109 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 40-->   110 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 40
;;   new head = 95
;;   new tail = 110

;;   ======================================================
;;   -- basic block 12 from 113 to 119 -- after reload
;;   ======================================================

;;	  0-->   113 r0=r5                             :cortex_a8_default
;;	  0-->   114 r1=sp+0x18                        :cortex_a8_default
;;	  1-->   115 r2=[sp+0xc]                       :cortex_a8_load_store_1
;;	  2-->   116 r0=call [`perf_event_overflow']   :cortex_a8_issue_branch
;;	 34-->   118 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->   119 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 113
;;   new tail = 119

;;   ======================================================
;;   -- basic block 13 from 124 to 126 -- after reload
;;   ======================================================

;;	  0-->   124 r0=sl                             :cortex_a8_default
;;	  0-->   122 r3=[r8]                           :cortex_a8_load_store_1
;;	  1-->   125 r1=r4                             :cortex_a8_default
;;	  2-->   126 call [[r3+0x10]]                  :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 124
;;   new tail = 126

;;   ======================================================
;;   -- basic block 14 from 129 to 129 -- after reload
;;   ======================================================

;;	  0-->   129 r4=r4+0x1                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 129
;;   new tail = 129

;;   ======================================================
;;   -- basic block 15 from 133 to 137 -- after reload
;;   ======================================================

;;	  0-->   133 r3=[r8]                           :cortex_a8_load_store_1
;;	  3-->   134 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  5-->   136 cc=cmp(r4,r3)                     :cortex_a8_default
;;	  7-->   137 pc={(cc<=0x0)?L135:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 133
;;   new tail = 137

;;   ======================================================
;;   -- basic block 16 from 139 to 140 -- after reload
;;   ======================================================

;;	  0-->   139 call [`irq_work_run']             :cortex_a8_issue_branch
;;	  0-->   140 r0=0x1                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 139
;;   new tail = 140

;;   ======================================================
;;   -- basic block 17 from 153 to 200 -- after reload
;;   ======================================================

;;	  0-->   153 use r0                            :nothing
;;	  0-->   200 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 153
;;   new tail = 200





armv7pmu_handle_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,14u,1d} r1={19d,13u} r2={16d,10u} r3={17d,11u} r4={3d,14u} r5={3d,12u} r6={3d,4u} r7={5d,7u,1d} r8={2d,4u,2d} r9={2d,3u} r10={2d,5u} r11={4d,6u} r12={6d} r13={3d,41u,1d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={14d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 946{784d,157u,5e} in 96{90 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 196 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 196 4 197 2 arch/arm/kernel/perf_event_v7.c:1046 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -36 [0xffffffffffffffdc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 7 r7))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 16 [0x10])) [0 S4 A32])
                        (reg:SI 8 r8))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 20 [0x14])) [0 S4 A32])
                        (reg:SI 9 r9))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 24 [0x18])) [0 S4 A32])
                        (reg:SI 10 sl))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 28 [0x1c])) [0 S4 A32])
                        (reg:SI 11 fp))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 32 [0x20])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 197 196 198 2 arch/arm/kernel/perf_event_v7.c:1046 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -108 [0xffffffffffffff94]))) 4 {*arm_addsi3} (nil))

(note 198 197 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 198 8 2 arch/arm/kernel/perf_event_v7.c:941 (set (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 3") ("=r") 0 []
             [] 8926418)) -1 (nil))

(insn:TI 8 7 9 2 arch/arm/kernel/perf_event_v7.c:945 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 3") ("") 0 [
            (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8926930) -1 (nil))

(insn:TI 9 8 12 2 arch/arm/kernel/perf_event_v7.c:1061 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 12 9 10 2 arch/arm/kernel/perf_event_v7.c:1062 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
            (reg/v:SI 5 r5 [orig:148 pmnc ] [148]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 10 12 16 2 arch/arm/kernel/perf_event_v7.c:1061 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 141)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  17 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 10 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 16 99 3 NOTE_INSN_DELETED)

(note 99 21 112 3 NOTE_INSN_DELETED)

(note 112 99 185 3 NOTE_INSN_DELETED)

(insn:TI 185 112 179 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 179 185 175 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn:TI 175 179 30 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 0 r0)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 30 175 176 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 176 30 17 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 7 r7 [159])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 17 176 31 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)
        (nil)))

(insn:TI 31 17 23 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8943066)) -1 (nil))

(insn:TI 23 31 28 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
        (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])
        (nil)))

(insn 28 23 18 3 include/linux/perf_event.h:996 (set (reg:SI 2 r2 [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 18 28 43 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8985755)) -1 (nil))

(insn:TI 43 18 101 3 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 101 43 24 3 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:SI 9 r9 [194])
        (const_int 296 [0x128])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn:TI 24 101 194 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1 [162])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [158])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
        (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
            (nil))))

(insn 194 24 132 3 include/linux/perf_event.h:995 (set (reg:SI 0 r0 [163])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 132 194 38 3 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 8 r8 [192])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 38 132 25 3 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
        (plus:SI (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            (reg:SI 1 r1 [162]))) 4 {*arm_addsi3} (nil))

(insn:TI 25 38 29 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1)
        (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
                (reg:SI 1 r1 [162])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (nil)))

(insn:TI 29 25 63 3 include/linux/perf_event.h:996 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 100 [0x64])) [0 data.raw+0 S4 A32])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [164])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 63 29 182 3 arch/arm/kernel/perf_event_v7.c:786 (set (reg:SI 2 r2)
        (and:SI (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int -2147483648 [0xffffffff80000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 182 63 186 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])
        (reg/v:SI 5 r5 [orig:148 pmnc ] [148])) 167 {*arm_movsi_insn} (nil))

(insn:TI 186 182 39 3 include/asm-generic/irq_regs.h:25 discrim 4 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn 39 186 188 3 arch/arm/kernel/perf_event_v7.c:1076 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn:TI 188 39 187 3 arch/arm/kernel/perf_event_v7.c:786 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-84 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 187 188 195 3 arch/arm/kernel/perf_event_v7.c:1076 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(insn 195 187 183 3 include/linux/perf_event.h:995 (set (reg:SI 1 r1 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 183 195 27 3 (set (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])
        (reg:SI 7 r7 [159])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 183 202 3 include/linux/perf_event.h:995 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 data.addr+0 S8 A64])
        (reg:DI 0 r0 [163])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 202 27 203 3 arch/arm/kernel/perf_event_v7.c:1072 (set (pc)
        (label_ref 130)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 203 202 135)

;; Start of basic block ( 15) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  15 [97.1%] 
(code_label 135 203 46 4 270 "" [1 uses])

(note 46 135 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 56 46 189 4 NOTE_INSN_DELETED)

(insn:TI 189 56 50 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 6 r6)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 50 189 54 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [173])
        (ashiftrt:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 54 50 49 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [175])
        (and:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 49 54 53 4 arch/arm/kernel/perf_event_v7.c:1073 (set (reg/v/f:SI 5 r5 [orig:143 event ] [143])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 53 49 55 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:138 D.26785 ] [138])
        (mem/v:SI (plus:SI (mult:SI (reg:SI 1 r1 [173])
                    (const_int 4 [0x4]))
                (reg:SI 6 r6)) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 53 57 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [176])
        (lshiftrt:SI (reg:SI 1 r1 [orig:138 D.26785 ] [138])
            (reg:SI 2 r2 [175]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:138 D.26785 ] [138])
        (nil)))

(insn:TI 57 55 58 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [176])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [176])
        (nil)))

(jump_insn:TI 58 57 59 4 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 14 5)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 59 164 5 arch/arm/kernel/perf_event_v7.c:785 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 164 60 61 5 arch/arm/kernel/perf_event_v7.c:786 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 20 [0x14])) [0 %sfp+-84 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 61 164 67 5 arch/arm/kernel/perf_event_v7.c:785 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 90)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  6 [72.0%]  (fallthru)
;; Succ edge  10 [28.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [72.0%]  (fallthru)
(note 67 61 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 69 67 70 6 arch/arm/kernel/perf_event_v7.c:787 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 70 72 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:SI 3 r3 [178])
        (plus:SI (reg:SI 3 r3 [orig:149 D.26022 ] [149])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 72 71 73 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [178]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [178])
        (nil)))

(jump_insn:TI 73 72 74 7 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
(note 74 73 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 77 74 190 8 NOTE_INSN_DELETED)

(insn:TI 190 77 191 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 7 r7)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 191 190 75 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 75 191 78 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 3 r3 [179])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn:TI 78 75 204 8 arch/arm/kernel/perf_event_v7.c:788 (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (and:SI (ashift:SI (reg:SI 0 r0)
                (reg:SI 3 r3 [179]))
            (reg:SI 7 r7))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 204 78 205 8 (set (pc)
        (label_ref 90)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 205 204 81)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%] 
(code_label 81 205 82 9 269 "" [2 uses])

(note 82 81 192 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 192 82 162 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 162 192 85 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x11737a20>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 85 162 86 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 2 r2)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 86 85 87 9 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 87 86 206 9 arch/arm/kernel/perf_event_v7.c:790 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 206 87 207 9 (set (pc)
        (label_ref 127)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 207 206 90)

;; Start of basic block ( 5 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [28.0%] 
;; Pred edge  8 [100.0%] 
(code_label 90 207 91 10 268 "" [2 uses])

(note 91 90 92 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 92 91 93 10 arch/arm/kernel/perf_event_v7.c:1083 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (nil)))

(jump_insn:TI 93 92 94 10 arch/arm/kernel/perf_event_v7.c:1083 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7098 [0x1bba])
            (nil))))
;; End of basic block 10 -> ( 14 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 94 93 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 108 94 102 11 NOTE_INSN_DELETED)

(note 102 108 95 11 NOTE_INSN_DELETED)

(insn:TI 95 102 98 11 arch/arm/kernel/perf_event_v7.c:1086 (set (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
        (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 98 95 158 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 158 98 96 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 3 r3)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 96 158 97 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn:TI 97 96 100 11 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 100 97 193 11 arch/arm/kernel/perf_event_v7.c:1087 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_UNUSED (reg:DI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 193 100 104 11 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:DI 6 r6)
        (mem/s/j/c:DI (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
                (reg:SI 9 r9 [194])) [0 <variable>.hw.last_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 104 193 105 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 105 104 106 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 106 105 103 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 103 106 107 11 arch/arm/kernel/perf_event_v7.c:1088 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 data.period+0 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(call_insn 107 103 109 11 arch/arm/kernel/perf_event_v7.c:1089 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 109 107 110 11 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 110 109 111 11 arch/arm/kernel/perf_event_v7.c:1089 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [71.0%] 
;; Succ edge  12 [29.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 111 110 117 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 117 111 113 12 NOTE_INSN_DELETED)

(insn:TI 113 117 114 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))
        (nil)))

(insn:TI 115 114 116 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 116 115 118 12 arch/arm/kernel/perf_event_v7.c:1092 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_event_overflow") [flags 0x41] <function_decl 0x113da480 perf_event_overflow>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 118 116 119 12 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 119 118 120 12 arch/arm/kernel/perf_event_v7.c:1092 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  14 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 120 119 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 123 120 124 13 NOTE_INSN_DELETED)

(insn:TI 124 123 122 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 122 124 125 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 125 122 126 13 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 126 125 127 13 arch/arm/kernel/perf_event_v7.c:1093 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 4 10 11 12 13 9) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  11 [71.0%] 
;; Pred edge  12 [71.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 127 126 128 14 266 "" [5 uses])

(note 128 127 129 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 129 128 130 14 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 14 3) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 130 129 131 15 265 "" [1 uses])

(note 131 130 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 133 131 134 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn:TI 134 133 136 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:SI 3 r3 [orig:149 D.26022 ] [149])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 136 134 137 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [orig:149 D.26022 ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 137 136 138 15 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
            (nil))))
;; End of basic block 15 -> ( 4 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [97.1%] 
;; Succ edge  16 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [2.9%]  (fallthru,loop_exit)
(note 138 137 139 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 139 138 140 16 arch/arm/kernel/perf_event_v7.c:1103 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_work_run") [flags 0x41] <function_decl 0x113ba780 irq_work_run>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 140 139 141 16 arch/arm/kernel/perf_event_v7.c:1105 (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 2) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 141 140 142 17 264 "" [1 uses])

(note 142 141 153 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 153 142 199 17 arch/arm/kernel/perf_event_v7.c:1106 (use (reg/i:SI 0 r0)) -1 (nil))

(note 199 153 200 17 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 200 199 201 17 arch/arm/kernel/perf_event_v7.c:1106 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 17 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 201 200 177)

(note 177 201 184 NOTE_INSN_DELETED)

(note 184 177 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function perf_callchain_kernel (perf_callchain_kernel)[0:1362]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 30 to 33 -- after reload
;;   ======================================================

;;	  0-->    30 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->    13 r3=[r1+0x3c]                      :cortex_a8_load_store_1
;;	  2-->     7 r4=[r1+0x2c]                      :cortex_a8_load_store_1
;;	  2-->     2 r2=r0                             :cortex_a8_default
;;	  3-->     9 lr=[r1+0x34]                      :cortex_a8_load_store_1
;;	  3-->    17 r0=sp                             :cortex_a8_default
;;	  4-->    11 ip=[r1+0x38]                      :cortex_a8_load_store_1
;;	  5-->    18 r1=`callchain_trace'              :cortex_a8_load_store_1
;;	  6-->     8 [sp]=r4                           :cortex_a8_load_store_1
;;	  7-->    10 [sp+0x4]=lr                       :cortex_a8_load_store_1
;;	  8-->    12 [sp+0x8]=ip                       :cortex_a8_load_store_1
;;	  9-->    14 [sp+0xc]=r3                       :cortex_a8_load_store_1
;;	  9-->    20 call [`walk_stackframe']          :cortex_a8_issue_branch
;;	 10-->    33 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 10
;;   new head = 30
;;   new tail = 33





perf_callchain_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,3u} r1={3d,6u} r2={3d,2u} r3={3d,2u} r4={2d,3u} r12={2d,1u} r13={2d,9u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 162{132d,29u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 16 2 NOTE_INSN_DELETED)

(note 16 15 30 2 NOTE_INSN_DELETED)

(insn/f:TI 30 16 31 2 arch/arm/kernel/perf_event.c:773 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 3 r3))
            (use (reg:SI 4 r4))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_DEAD (reg:SI 3 r3)
                (expr_list:REG_DEAD (reg:SI 2 r2)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -24 [0xffffffffffffffe8])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 0 r0))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 1 r1))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 2 r2))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 3 r3))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 31 30 13 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 13 31 7 2 arch/arm/kernel/perf_event.c:779 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 13 2 2 arch/arm/kernel/perf_event.c:776 (set (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 2 7 9 2 arch/arm/kernel/perf_event.c:773 (set (reg/v/f:SI 2 r2 [orig:133 entry ] [133])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ entry ])
        (nil)))

(insn:TI 9 2 17 2 arch/arm/kernel/perf_event.c:777 (set (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 17 9 11 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 17 18 2 arch/arm/kernel/perf_event.c:778 (set (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
        (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -8 [0xfffffffffffffff8])) [0 fr.lr+0 S4 A64])
            (nil))))

(insn:TI 18 11 8 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 1 r1)
        (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)
        (nil)))

(insn:TI 8 18 10 2 arch/arm/kernel/perf_event.c:776 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 fr.fp+0 S4 A64])
        (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 8 12 2 arch/arm/kernel/perf_event.c:777 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 fr.sp+0 S4 A32])
        (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])
        (nil)))

(insn:TI 12 10 14 2 arch/arm/kernel/perf_event.c:778 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 fr.lr+0 S4 A64])
        (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])
        (nil)))

(insn:TI 14 12 20 2 arch/arm/kernel/perf_event.c:779 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 fr.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (nil)))

(call_insn 20 14 32 2 arch/arm/kernel/perf_event.c:780 (parallel [
            (call (mem:SI (symbol_ref:SI ("walk_stackframe") [flags 0x41] <function_decl 0x1147bd00 walk_stackframe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 32 20 33 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 33 32 34 2 arch/arm/kernel/perf_event.c:781 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 34 33 28)

(note 28 34 29 NOTE_INSN_DELETED)

(note 29 28 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function perf_callchain_user (perf_callchain_user)[0:1360]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 35 (  2.2)


perf_callchain_user

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={5d,5u} r2={8d,10u} r3={7d,8u} r4={4d,9u} r5={2d,8u,2d} r6={8d,10u} r7={3d,4u,1d} r8={2d,3u} r10={3d,6u} r11={3d,4u} r12={2d,1u} r13={2d,21u,1d} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={13d,11u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 290{178d,107u,5e} in 56{55 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 10 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 14 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 3 )->[4]->( 13 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 3 )->[5]->( 10 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 5 )->[6]->( 9 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 6 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 8 6 7 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 9 5 2 )->[10]->( 12 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 10 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 12 4 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 13 )->[14]->( 3 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 14 13 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 173 to worklist
  Adding insn 168 to worklist
  Adding insn 19 to worklist
  Adding insn 175 to worklist
  Adding insn 35 to worklist
  Adding insn 31 to worklist
  Adding insn 40 to worklist
  Adding insn 44 to worklist
  Adding insn 58 to worklist
  Adding insn 135 to worklist
  Adding insn 134 to worklist
  Adding insn 78 to worklist
  Adding insn 105 to worklist
  Adding insn 110 to worklist
  Adding insn 171 to worklist
Finished finding needed instructions:
processing block 4 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 143 to worklist
processing block 9 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 71 to worklist
  Adding insn 146 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 53 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 165 to worklist
  Adding insn 164 to worklist
  Adding insn 51 to worklist
processing block 7 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 43 to worklist
processing block 6 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 39 to worklist
  Adding insn 37 to worklist
  Adding insn 38 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 34 to worklist
  Adding insn 145 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
processing block 3 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 18 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
processing block 15 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 14 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 109 to worklist
processing block 13 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 104 to worklist
  Adding insn 103 to worklist
processing block 12 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 95 to worklist
  Adding insn 94 to worklist
processing block 11 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 141 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
processing block 10 lr out =  3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 77 to worklist
  Adding insn 140 to worklist
  Adding insn 76 to worklist
processing block 2 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 27 to worklist
  Adding insn 8 to worklist
  Adding insn 158 to worklist
  Adding insn 2 to worklist
  Adding insn 157 to worklist
  Adding insn 162 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 39 (  2.4)
;;   ======================================================
;;   -- basic block 2 from 168 to 173 -- after reload
;;   ======================================================

;;	  0-->   168 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->     7 r6=[r1+0x2c]                      :cortex_a8_load_store_1
;;	  2-->   162 r3=sp                             :cortex_a8_default
;;	  2-->     2 r5=r0                             :cortex_a8_default
;;	  3-->   157 r7=r3&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->     8 r6=r6-0xc                         :cortex_a8_default
;;	  4-->   158 r7=r7&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    27 r8=sp+0x4                         :cortex_a8_default
;;	  5-->   173 pc=L150                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 168
;;   new tail = 173

;;   ======================================================
;;   -- basic block 3 from 15 to 19 -- after reload
;;   ======================================================

;;	  0-->    15 r6=[r7+0x8]                       :cortex_a8_load_store_1
;;	  1-->    16 {r6=asm_operands;r1=asm_operands;c:nothing
;;	  2-->    18 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	  4-->    19 pc={(cc==0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 143 to 175 -- after reload
;;   ======================================================

;;	  0-->   143 r4=r2                             :cortex_a8_default
;;	  0-->   175 pc=L96                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 143
;;   new tail = 175

;;   ======================================================
;;   -- basic block 5 from 28 to 35 -- after reload
;;   ======================================================

;;	  0-->    28 r0=r8                             :cortex_a8_default
;;	  0-->    29 r1=r4                             :cortex_a8_default
;;	  1-->   145 r2=0xc                            :cortex_a8_default
;;	  2-->    31 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 34-->    34 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    35 pc={(cc!=0x0)?L150:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 28
;;   new tail = 35

;;   ======================================================
;;   -- basic block 6 from 38 to 40 -- after reload
;;   ======================================================

;;	  0-->    38 r2=[r5]                           :cortex_a8_load_store_1
;;	  1-->    37 ip=[sp+0xc]                       :cortex_a8_load_store_1
;;	  2-->    39 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    40 pc={(cc!=0x0)?L59:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 38
;;   new tail = 40

;;   ======================================================
;;   -- basic block 7 from 43 to 44 -- after reload
;;   ======================================================

;;	  0-->    43 cc=cmp(r2,0xfe)                   :cortex_a8_default
;;	  2-->    44 pc={(gtu(cc,0x0))?L59:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 43
;;   new tail = 44

;;   ======================================================
;;   -- basic block 8 from 51 to 58 -- after reload
;;   ======================================================

;;	  0-->    51 r1=r2+0x1                         :cortex_a8_default
;;	  0-->   164 sl=0x1                            :cortex_a8_default
;;	  1-->   166 {cc=cmp(sl+r2,sl);sl=sl+r2;}      :cortex_a8_default
;;	  1-->   165 fp=0x0                            :cortex_a8_default
;;	  2-->    53 r0=r1*0x8+r5                      :cortex_a8_default
;;	  2-->   134 [r1*0x8+r5]=ip                    :cortex_a8_load_store_1
;;	  3-->   167 fp=ltu(cc,0x0)+fp+r3              :cortex_a8_default
;;	  4-->   135 [r0+0x4]=r3                       :cortex_a8_load_store_1
;;	  5-->    58 [r5]=sl                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 51
;;   new tail = 58

;;   ======================================================
;;   -- basic block 9 from 61 to 71 -- after reload
;;   ======================================================

;;	  0-->    61 r6=[sp+0x4]                       :cortex_a8_load_store_1
;;	  0-->    62 r4=r4+0xc                         :cortex_a8_default
;;	  2-->    63 cc=cmp(r6,r4)                     :cortex_a8_default
;;	  3-->   146 (leu(cc,0x0)) r6=0x0              :cortex_a8_default
;;	  3-->    71 (gtu(cc,0x0)) r6=r6-0xc           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 61
;;   new tail = 71

;;   ======================================================
;;   -- basic block 10 from 76 to 78 -- after reload
;;   ======================================================

;;	  0-->    76 r2=[r5+0x4]                       :cortex_a8_load_store_1
;;	  0-->   140 r3=0x0                            :cortex_a8_default
;;	  2-->    77 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->    78 pc={(cc!=0x0)?L93:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 76
;;   new tail = 78

;;   ======================================================
;;   -- basic block 11 from 82 to 141 -- after reload
;;   ======================================================

;;	  0-->    82 r2=[r5]                           :cortex_a8_load_store_1
;;	  2-->    83 cc=cmp(r2,0xfe)                   :cortex_a8_default
;;	  3-->   141 (leu(cc,0x0)) r3=0x1              :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 82
;;   new tail = 141

;;   ======================================================
;;   -- basic block 12 from 94 to 95 -- after reload
;;   ======================================================

;;	  0-->    94 r3=zxn(r3)                        :cortex_a8_default
;;	  0-->    95 r4=r6                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 94
;;   new tail = 95

;;   ======================================================
;;   -- basic block 13 from 103 to 105 -- after reload
;;   ======================================================

;;	  0-->   103 {r2=r4!=0x0&r3;clobber cc;}       :cortex_a8_default
;;	  1-->   104 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  3-->   105 pc={(cc==0x0)?L116:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 103
;;   new tail = 105

;;   ======================================================
;;   -- basic block 14 from 109 to 110 -- after reload
;;   ======================================================

;;	  0-->   109 {cc=cmp(r4&0x3,0x0);r2=r4&0x3;}   :cortex_a8_default
;;	  2-->   110 pc={(cc==0x0)?L107:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 109
;;   new tail = 110

;;   ======================================================
;;   -- basic block 15 from 171 to 171 -- after reload
;;   ======================================================

;;	  0-->   171 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 171
;;   new tail = 171





perf_callchain_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={5d,5u} r2={8d,10u} r3={7d,8u} r4={4d,9u} r5={2d,8u,2d} r6={8d,10u} r7={3d,4u,1d} r8={2d,3u} r10={3d,6u} r11={3d,4u} r12={2d,1u} r13={2d,21u,1d} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={13d,11u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 290{178d,107u,5e} in 56{55 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 56 2 NOTE_INSN_DELETED)

(note 56 10 168 2 NOTE_INSN_DELETED)

(insn/f:TI 168 56 169 2 arch/arm/kernel/perf_event.c:746 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 3 r3))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_DEAD (reg:SI 3 r3)
                            (expr_list:REG_DEAD (reg:SI 2 r2)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -48 [0xffffffffffffffd0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 0 r0))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 1 r1))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 2 r2))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 3 r3))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0 S4 A32])
                                                (reg:SI 11 fp))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 44 [0x2c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 169 168 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 169 162 2 arch/arm/kernel/perf_event.c:750 (set (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn:TI 162 7 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 2 162 157 2 arch/arm/kernel/perf_event.c:746 (set (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ entry ])
        (nil)))

(insn:TI 157 2 8 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 8 157 158 2 arch/arm/kernel/perf_event.c:750 (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
        (plus:SI (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
            (const_int -12 [0xfffffffffffffff4]))) 4 {*arm_addsi3} (nil))

(insn:TI 158 8 27 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 27 158 173 2 arch/arm/kernel/perf_event.c:729 (set (reg/f:SI 8 r8 [179])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(jump_insn:TI 173 27 174 2 arch/arm/kernel/perf_event.c:752 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%] 

(barrier 174 173 107)

;; Start of basic block ( 14) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  14 [95.5%] 
(code_label 107 174 14 3 288 "" [1 uses])

(note 14 107 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 16 3 arch/arm/kernel/perf_event.c:727 (set (reg:SI 6 r6 [orig:150 <variable>.addr_limit ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])
        (nil)))

(insn:TI 16 15 18 3 arch/arm/kernel/perf_event.c:727 (parallel [
            (set (reg/v:SI 6 r6 [orig:139 flag ] [139])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (set (reg/v:SI 1 r1 [orig:140 roksum ] [140])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 1 r1 [orig:140 roksum ] [140])
            (nil))))

(insn:TI 18 16 19 3 arch/arm/kernel/perf_event.c:727 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:139 flag ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 19 18 20 3 arch/arm/kernel/perf_event.c:727 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [71.0%]  (fallthru)
;; Succ edge  5 [29.0%]  (loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 20 19 143 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 143 20 175 4 arch/arm/kernel/perf_event.c:728 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg:SI 2 r2 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [171])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 175 143 176 4 (set (pc)
        (label_ref 96)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%] 

(barrier 176 175 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (loop_exit)
(code_label 24 176 25 5 280 "" [1 uses])

(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 32 25 28 5 NOTE_INSN_DELETED)

(insn:TI 28 32 29 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 0 r0)
        (reg/f:SI 8 r8 [179])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 29 28 145 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 145 29 31 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 31 145 34 5 arch/arm/kernel/perf_event.c:729 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x11466780 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 34 31 35 5 arch/arm/kernel/perf_event.c:729 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 35 34 36 5 arch/arm/kernel/perf_event.c:729 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 10 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [50.0%]  (dfs_back)
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 36 35 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 36 37 6 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:143 D.26828 ] [143])
        (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 37 38 39 6 arch/arm/kernel/perf_event.c:732 (set (reg:SI 12 ip [orig:137 D.26836 ] [137])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0+8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 39 37 40 6 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26828+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 40 39 119 6 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 119 40 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 119 44 7 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 44 43 120 7 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 120 44 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 120 51 8 NOTE_INSN_DELETED)

(insn:TI 51 52 164 8 include/linux/perf_event.h:1097 (set (reg:SI 1 r1 [152])
        (plus:SI (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 164 51 166 8 include/linux/perf_event.h:1097 (set (reg:SI 10 sl [157])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 166 164 165 8 include/linux/perf_event.h:1097 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 10 sl [157])
                        (reg:SI 2 r2 [orig:143 D.26828 ] [143]))
                    (reg:SI 10 sl [157])))
            (set (reg:SI 10 sl [157])
                (plus:SI (reg:SI 10 sl [157])
                    (reg:SI 2 r2 [orig:143 D.26828 ] [143])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:143 D.26828 ] [143])
        (nil)))

(insn 165 166 53 8 include/linux/perf_event.h:1097 (set (reg:SI 11 fp [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 53 165 134 8 include/linux/perf_event.h:1097 (set (reg/f:SI 0 r0 [154])
        (plus:SI (mult:SI (reg:SI 1 r1 [152])
                (const_int 8 [0x8]))
            (reg/v/f:SI 5 r5 [orig:146 entry ] [146]))) 270 {*arith_shiftsi} (nil))

(insn 134 53 167 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [152])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 5 r5 [orig:146 entry ] [146])) [0 <variable>.ip S4 A64])
        (reg:SI 12 ip [orig:137 D.26836 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:137 D.26836 ] [137])
        (expr_list:REG_DEAD (reg:SI 1 r1 [152])
            (nil))))

(insn:TI 167 134 135 8 include/linux/perf_event.h:1097 (set (reg:SI 11 fp [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 11 fp [+4 ])
                (reg:SI 3 r3 [ D.26828+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 135 167 58 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [154])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26828+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ D.26828+4 ])
        (expr_list:REG_DEAD (reg/f:SI 0 r0 [154])
            (nil))))

(insn:TI 58 135 59 8 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 10 sl [157])) 163 {*arm_movdi} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  7 [50.0%] 
(code_label 59 58 60 9 282 "" [2 uses])

(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 62 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 4 r4 [158])
        (plus:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn:TI 63 62 146 9 arch/arm/kernel/perf_event.c:738 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
            (reg/f:SI 4 r4 [158]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [158])
        (nil)))

(insn:TI 146 63 71 9 arch/arm/kernel/perf_event.c:739 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(insn 71 146 150 9 arch/arm/kernel/perf_event.c:741 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
            (plus:SI (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
                (const_int -12 [0xfffffffffffffff4])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 5 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  5 [50.0%]  (dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 150 71 149 10 293 "" [2 uses])

(note 149 150 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 76 149 140 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])
        (nil)))

(insn 140 76 77 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:QI 3 r3 [159])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 77 140 78 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
        (nil)))

(jump_insn:TI 78 77 123 10 arch/arm/kernel/perf_event.c:752 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 123 78 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 82 123 83 11 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])
        (nil)))

(insn:TI 83 82 141 11 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
        (nil)))

(insn:TI 141 83 93 11 arch/arm/kernel/perf_event.c:752 discrim 1 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:QI 3 r3 [159])
            (const_int 1 [0x1]))) 2350 {neon_vornv2di+83} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  10 [50.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 93 141 128 12 285 "" [1 uses])

(note 128 93 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 128 95 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 3 r3 [orig:145 D.26206 ] [145])
        (zero_extend:SI (reg:QI 3 r3 [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 95 94 96 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 4) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 96 95 97 13 281 "" [1 uses])

(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 98 97 99 13 NOTE_INSN_DELETED)

(note 99 98 101 13 NOTE_INSN_DELETED)

(note 101 99 102 13 NOTE_INSN_DELETED)

(note 102 101 103 13 NOTE_INSN_DELETED)

(insn:TI 103 102 104 13 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:SI 2 r2 [170])
                (and:SI (ne:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 0 [0x0]))
                    (reg:SI 3 r3 [orig:145 D.26206 ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 104 103 105 13 arch/arm/kernel/perf_event.c:753 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [170])
        (nil)))

(jump_insn:TI 105 104 106 13 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  14 [95.5%]  (fallthru)
;; Succ edge  15 [4.5%]  (loop_exit)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  13 [95.5%]  (fallthru)
(note 106 105 108 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 108 106 109 14 NOTE_INSN_DELETED)

(insn:TI 109 108 110 14 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [171])
                (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 110 109 116 14 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 14 -> ( 3 15)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  15 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  14 [4.5%]  (fallthru,loop_exit)
;; Pred edge  13 [4.5%]  (loop_exit)
(code_label 116 110 130 15 289 "" [1 uses])

(note 130 116 170 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 170 130 171 15 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 171 170 172 15 arch/arm/kernel/perf_event.c:755 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 172 171 160)

(note 160 172 161 NOTE_INSN_DELETED)

(note 161 160 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
