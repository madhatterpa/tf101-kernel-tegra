
;; Function twd_set_mode (twd_set_mode)[0:688]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 8 -- before reload
;;   ======================================================

;;	  0-->     2 r137=r0                           :cortex_a8_default
;;	  1-->     7 cc=cmp(r137,0x2)                  :cortex_a8_default
;;	  3-->     8 pc={(cc==0x0)?L23:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 2
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 70 to 71 -- before reload
;;   ======================================================

;;	  0-->    70 {r133={(r137==0x3)?0x4:0x0};clobbe:cortex_a8_default
;;	  0-->    71 pc=L36                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 70
;;   new tail = 71

;;   ======================================================
;;   -- basic block 4 from 25 to 35 -- before reload
;;   ======================================================

;;	  0-->    25 r139=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->    30 r1=0x64                           :cortex_a8_default
;;	  3-->    29 r0=[r139+0x4]                     :cortex_a8_load_store_1
;;	  4-->    26 r136=[r139]                       :cortex_a8_load_store_1
;;	  4-->    31 r0=call [`__aeabi_uidiv']         :cortex_a8_issue_branch
;;	  5-->    32 r144=r0                           :cortex_a8_default
;;	  5-->    35 r133=0x7                          :cortex_a8_default
;;	  7-->    34 [r136]=r144                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 25
;;   new tail = 35

;;   ======================================================
;;   -- basic block 5 from 38 to 41 -- before reload
;;   ======================================================

;;	  0-->    38 r145=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->    39 r146=[r145]                       :cortex_a8_load_store_1
;;	  6-->    41 [r146+0x8]=r133                   :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 38
;;   new tail = 41


;; Procedure interblock/speculative motions == 0/0 




twd_set_mode

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={3d,1u} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,1u} r25={1d,5u} r26={1d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={2d,1u} r136={1d,1u} r137={1d,2u} r139={1d,2u} r141={1d} r144={1d,1u} r145={1d,1u} r146={1d,1u} 
;;    total ref usage 175{139d,35u,1e} in 16{15 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 137
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 4 7 2 arch/arm/kernel/smp_twd.c:37 (set (reg/v:SI 137 [ mode ])
        (reg:SI 0 r0 [ mode ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ mode ])
        (nil)))

(insn 7 2 8 2 arch/arm/kernel/smp_twd.c:40 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 137 [ mode ])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 47 2 arch/arm/kernel/smp_twd.c:40 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137


;; Succ edge  4 [29.0%] 
;; Succ edge  3 [71.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(11){ }u8(13){ }u9(25){ }u10(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137
;; live  gen 	 133
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%]  (fallthru)
(note 47 8 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 9 47 70 3 NOTE_INSN_DELETED)

(insn 70 9 71 3 arch/arm/kernel/smp_twd.c:54 (parallel [
            (set (reg/v:SI 133 [ ctrl ])
                (if_then_else:SI (eq (reg/v:SI 137 [ mode ])
                        (const_int 3 [0x3]))
                    (const_int 4 [0x4])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (expr_list:REG_DEAD (reg/v:SI 137 [ mode ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(jump_insn 71 70 72 3 (set (pc)
        (label_ref 36)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%] 

(barrier 72 71 23)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 136 139 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 133 136 139 144
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%] 
(code_label 23 72 24 4 3 "" [1 uses])

(note 24 23 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 24 25 4 NOTE_INSN_DELETED)

(insn 25 28 30 4 arch/arm/kernel/smp_twd.c:45 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 30 25 29 4 arch/arm/kernel/smp_twd.c:45 (set (reg:SI 1 r1)
        (const_int 100 [0x64])) 167 {*arm_movsi_insn} (nil))

(insn 29 30 26 4 arch/arm/kernel/smp_twd.c:45 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 139)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))

(insn 26 29 31 4 arch/arm/kernel/smp_twd.c:45 (set (reg/f:SI 136 [ twd_base.201 ])
        (mem/f/c/i:SI (reg/f:SI 139) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(call_insn/u 31 26 32 4 arch/arm/kernel/smp_twd.c:45 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 32 31 35 4 arch/arm/kernel/smp_twd.c:45 (set (reg:SI 144)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUAL (udiv:SI (reg:SI 141 [ twd_timer_rate ])
                (const_int 100 [0x64]))
            (nil))))

(insn 35 32 34 4 arch/arm/kernel/smp_twd.c:43 (set (reg/v:SI 133 [ ctrl ])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (nil))

(insn 34 35 36 4 arch/arm/kernel/smp_twd.c:45 (set (mem/v:SI (reg/f:SI 136 [ twd_base.201 ]) [0 S4 A32])
        (reg:SI 144)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_DEAD (reg/f:SI 136 [ twd_base.201 ])
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 145 146
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  gen 	 145 146
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 36 34 37 5 5 "" [1 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 5 arch/arm/kernel/smp_twd.c:57 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 39 38 41 5 arch/arm/kernel/smp_twd.c:57 (set (reg/f:SI 146 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 145) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 145)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 41 39 73 5 arch/arm/kernel/smp_twd.c:57 (set (mem/v:SI (plus:SI (reg/f:SI 146 [ twd_base ])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/v:SI 133 [ ctrl ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 146 [ twd_base ])
        (expr_list:REG_DEAD (reg/v:SI 133 [ ctrl ])
            (nil))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 73 41 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_set_next_event (twd_set_next_event)[0:689]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 28 -- before reload
;;   ======================================================

;;	  0-->     7 r142=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->     2 r140=r0                           :cortex_a8_default
;;	  1-->    22 r0=0x0                            :cortex_a8_default
;;	  3-->     8 r138=[r142]                       :cortex_a8_load_store_1
;;	  6-->    10 r135=[r138+0x8]                   :cortex_a8_load_store_1
;;	  7-->    13 [r138+0x4]=r140                   :cortex_a8_load_store_1
;;	  8-->    15 r144=[r142]                       :cortex_a8_load_store_1
;;	  8-->    11 r134=r135|0x1                     :cortex_a8_default
;;	 11-->    17 [r144+0x8]=r134                   :cortex_a8_load_store_1
;;	 11-->    28 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 11
;;   new head = 2
;;   new tail = 28


;; Procedure interblock/speculative motions == 0/0 




twd_set_next_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r134={1d,1u} r135={1d,1u} r138={1d,2u} r140={1d,1u} r142={1d,2u} r144={1d,1u} 
;;    total ref usage 36{17d,19u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 134 135 138 140 142 144
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 134 135 138 140 142 144
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 7 2 NOTE_INSN_DELETED)

(insn 7 18 2 2 arch/arm/kernel/smp_twd.c:63 (set (reg/f:SI 142)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 2 7 22 2 arch/arm/kernel/smp_twd.c:62 (set (reg/v:SI 140 [ evt ])
        (reg:SI 0 r0 [ evt ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ evt ])
        (nil)))

(insn 22 2 8 2 arch/arm/kernel/smp_twd.c:71 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 8 22 10 2 arch/arm/kernel/smp_twd.c:63 (set (reg/f:SI 138 [ twd_base.204 ])
        (mem/f/c/i:SI (reg/f:SI 142) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 8 13 2 arch/arm/kernel/smp_twd.c:63 (set (reg/v:SI 135 [ ctrl ])
        (mem/v:SI (plus:SI (reg/f:SI 138 [ twd_base.204 ])
                (const_int 8 [0x8])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 10 15 2 arch/arm/kernel/smp_twd.c:67 (set (mem/v:SI (plus:SI (reg/f:SI 138 [ twd_base.204 ])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 140 [ evt ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ evt ])
        (expr_list:REG_DEAD (reg/f:SI 138 [ twd_base.204 ])
            (nil))))

(insn 15 13 11 2 arch/arm/kernel/smp_twd.c:68 (set (reg/f:SI 144 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 142) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))

(insn 11 15 17 2 arch/arm/kernel/smp_twd.c:65 (set (reg/v:SI 134 [ ctrl.273 ])
        (ior:SI (reg/v:SI 135 [ ctrl ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:SI 135 [ ctrl ])
        (nil)))

(insn 17 11 28 2 arch/arm/kernel/smp_twd.c:68 (set (mem/v:SI (plus:SI (reg/f:SI 144 [ twd_base ])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/v:SI 134 [ ctrl.273 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 144 [ twd_base ])
        (expr_list:REG_DEAD (reg/v:SI 134 [ ctrl.273 ])
            (nil))))

(insn 28 17 32 2 arch/arm/kernel/smp_twd.c:71 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 32 28 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_timer_ack (twd_timer_ack)[0:690]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 10 -- before reload
;;   ======================================================

;;	  0-->     5 r137=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->     6 r138=[r137]                       :cortex_a8_load_store_1
;;	  6-->     8 r134=[r138+0xc]                   :cortex_a8_load_store_1
;;	  8-->     9 cc=cmp(r134,0x0)                  :cortex_a8_default
;;	 10-->    10 pc={(cc!=0x0)?L15:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 5
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 12 to 36 -- before reload
;;   ======================================================

;;	  0-->    12 r133=r134                         :cortex_a8_default
;;	  0-->    36 pc=L20                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 12
;;   new tail = 36

;;   ======================================================
;;   -- basic block 4 from 17 to 19 -- before reload
;;   ======================================================

;;	  0-->    17 r139=0x1                          :cortex_a8_default
;;	  0-->    18 [r138+0xc]=r139                   :cortex_a8_load_store_1
;;	  1-->    19 r133=r139                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 17
;;   new tail = 19

;;   ======================================================
;;   -- basic block 5 from 26 to 32 -- before reload
;;   ======================================================

;;	  0-->    26 r0=r133                           :cortex_a8_default
;;	  0-->    32 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 26
;;   new tail = 32


;; Procedure interblock/speculative motions == 0/0 




twd_timer_ack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,5u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} r25={1d,5u} r26={1d,4u} r133={2d,1u} r134={1d,2u} r137={1d,1u} r138={1d,2u} r139={1d,2u} 
;;    total ref usage 49{18d,31u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 137 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 137 138
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/smp_twd.c:81 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 8 2 arch/arm/kernel/smp_twd.c:81 (set (reg/f:SI 138 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 137) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 8 6 9 2 arch/arm/kernel/smp_twd.c:81 (set (reg:SI 134 [ D.14180 ])
        (mem/v:SI (plus:SI (reg/f:SI 138 [ twd_base ])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 10 2 arch/arm/kernel/smp_twd.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.14180 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/smp_twd.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138


;; Succ edge  4 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  gen 	 133
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 36 3 arch/arm/kernel/smp_twd.c:86 (set (reg:SI 133 [ D.14183 ])
        (reg:SI 134 [ D.14180 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.14180 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 36 12 37 3 (set (pc)
        (label_ref 20)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%] 

(barrier 37 36 15)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 133 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  gen 	 133 139
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 15 37 16 4 15 "" [1 uses])

(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 arch/arm/kernel/smp_twd.c:82 (set (reg:SI 139)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 18 17 19 4 arch/arm/kernel/smp_twd.c:82 (set (mem/v:SI (plus:SI (reg/f:SI 138 [ twd_base ])
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 138 [ twd_base ])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 19 18 20 4 arch/arm/kernel/smp_twd.c:83 (set (reg:SI 133 [ D.14183 ])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 20 19 21 5 16 "" [1 uses])

(note 21 20 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 21 32 5 arch/arm/kernel/smp_twd.c:87 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ D.14183 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.14183 ])
        (nil)))

(insn 32 26 38 5 arch/arm/kernel/smp_twd.c:87 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 38 32 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_cpufreq_transition (twd_cpufreq_transition)[0:692]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 18 -- before reload
;;   ======================================================

;;	  0-->    17 cc=cmp(r1==0x8|r1==0x1,0x0)       :cortex_a8_default
;;	  0-->     4 r136=r2                           :cortex_a8_default
;;	  2-->    18 pc={(cc==0x0)?L26:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 4
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 21 to 25 -- before reload
;;   ======================================================

;;	  0-->    21 r0=[r136]                         :cortex_a8_load_store_1
;;	  0-->    23 r2=0x0                            :cortex_a8_default
;;	  1-->    22 r1=`twd_update_frequency'         :cortex_a8_load_store_1
;;	  1-->    24 r3=0x1                            :cortex_a8_default
;;	  2-->    25 r0=call [`smp_call_function_single:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 21
;;   new tail = 25

;;   ======================================================
;;   -- basic block 4 from 32 to 38 -- before reload
;;   ======================================================

;;	  0-->    32 r0=0x1                            :cortex_a8_default
;;	  0-->    38 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 38


;; Procedure interblock/speculative motions == 0/0 




twd_cpufreq_transition

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,3u} r2={3d,2u} r3={3d,1u} r11={1d,4u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r25={1d,4u} r26={1d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r136={1d,1u} 
;;    total ref usage 162{134d,28u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 136
;; live  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 136
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 16 2 NOTE_INSN_DELETED)

(note 16 15 17 2 NOTE_INSN_DELETED)

(insn 17 16 4 2 arch/arm/kernel/smp_twd.c:110 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg:SI 1 r1 [ state ])
                    (const_int 8 [0x8]))
                (eq:SI (reg:SI 1 r1 [ state ])
                    (const_int 1 [0x1])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (expr_list:REG_DEAD (reg:SI 1 r1 [ state ])
        (nil)))

(insn 4 17 18 2 arch/arm/kernel/smp_twd.c:102 (set (reg/v/f:SI 136 [ data ])
        (reg:SI 2 r2 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ data ])
        (nil)))

(jump_insn 18 4 19 2 arch/arm/kernel/smp_twd.c:110 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_DEQ 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u16(11){ }u17(13){ }u18(25){ }u19(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 23 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 0 r0)
        (mem/s/j:SI (reg/v/f:SI 136 [ data ]) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 23 21 22 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 22 23 24 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 1 r1)
        (symbol_ref:SI ("twd_update_frequency") [flags 0x3] <function_decl 0x10fa8000 twd_update_frequency>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("twd_update_frequency") [flags 0x3] <function_decl 0x10fa8000 twd_update_frequency>)
        (nil)))

(insn 24 22 25 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 3 r3)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 25 24 26 3 arch/arm/kernel/smp_twd.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("smp_call_function_single") [flags 0x41] <function_decl 0x10cc8e80 smp_call_function_single>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 26 25 27 4 21 "" [1 uses])

(note 27 26 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 27 38 4 arch/arm/kernel/smp_twd.c:115 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 38 32 43 4 arch/arm/kernel/smp_twd.c:115 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 43 38 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_update_frequency (twd_update_frequency)[0:691]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


twd_update_frequency

Dataflow summary:
def_info->table_size = 255, use_info->table_size = 27
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={3d} r11={1d,2u} r12={3d} r13={1d,5u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={2d,2u} r135={1d,2u} r137={1d,2u} r140={1d,1u} r141={2d,2u} r143={1d,1u} r144={1d,1u} 
;;    total ref usage 281{255d,26u,0e} in 15{13 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d8(1){ }d11(2){ }d14(3){ }d15(11){ }d18(12){ }d19(13){ }d21(14){ }d42(25){ }d43(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 137 140 141 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 134 135 137 139 140 141 143 144
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u23(11){ }u24(13){ }u25(14){ }u26(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 22 to worklist
  Adding insn 11 to worklist
  Adding insn 8 to worklist
Finished finding needed instructions:
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
;;   ======================================================
;;   -- basic block 2 from 6 to 22 -- before reload
;;   ======================================================

;;	  0-->     6 r137=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->     7 r0=[r137+0x8]                     :cortex_a8_load_store_1
;;	  4-->     8 r0=call [`clk_get_rate']          :cortex_a8_issue_branch
;;	  4-->     9 r135=r0                           :cortex_a8_default
;;	  5-->    31 r141=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  5-->    15 r140=`__per_cpu_offset'           :cortex_a8_load_store_1
;;	  6-->    32 r141=r141&0xffffffffffffffc0      :cortex_a8_default
;;	  6-->    11 [r137+0x4]=r135                   :cortex_a8_load_store_1
;;	  7-->    21 r1=r135                           :cortex_a8_default
;;	  7-->    12 r134=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	  8-->    18 r143=[r141+0x14]                  :cortex_a8_load_store_1
;;	  9-->    13 r134=asm_operands                 :nothing
;;	 11-->    19 r144=[r143*0x4+r140]              :cortex_a8_load_store_1
;;	 14-->    20 r0=[r134+r144]                    :cortex_a8_load_store_1
;;	 15-->    22 r0=call [`clockevents_update_freq':cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 15
;;   new head = 6
;;   new tail = 22


;; Procedure interblock/speculative motions == 0/0 




twd_update_frequency

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={3d} r11={1d,2u} r12={3d} r13={1d,5u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={2d,2u} r135={1d,2u} r137={1d,2u} r140={1d,1u} r141={2d,2u} r143={1d,1u} r144={1d,1u} 
;;    total ref usage 281{255d,26u,0e} in 15{13 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 137 140 141 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 134 135 137 140 141 143 144
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 3 6 2 NOTE_INSN_DELETED)

(insn 6 16 7 2 arch/arm/kernel/smp_twd.c:95 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 arch/arm/kernel/smp_twd.c:95 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 137)
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 8 7 9 2 arch/arm/kernel/smp_twd.c:95 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_rate") [flags 0x41] <function_decl 0x10a60600 clk_get_rate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 31 2 arch/arm/kernel/smp_twd.c:95 (set (reg:SI 135 [ twd_timer_rate.208 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 31 9 15 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 141)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 15 31 32 2 arch/arm/kernel/smp_twd.c:97 (set (reg/f:SI 140)
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (nil))

(insn 32 15 11 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 141)
        (and:SI (reg:SI 141)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 32 21 2 arch/arm/kernel/smp_twd.c:95 (set (mem/c/i:SI (plus:SI (reg/f:SI 137)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 135 [ twd_timer_rate.208 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))

(insn 21 11 12 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 1 r1)
        (reg:SI 135 [ twd_timer_rate.208 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ twd_timer_rate.208 ])
        (nil)))

(insn 12 21 18 2 arch/arm/kernel/smp_twd.c:97 (set (reg/v:SI 134 [ __ptr ])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 18 12 13 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 143 [ <variable>.cpu ])
        (mem/s/j:SI (plus:SI (reg:SI 141)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 141)
        (nil)))

(insn 13 18 19 2 arch/arm/kernel/smp_twd.c:97 (set (reg/v:SI 134 [ __ptr ])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 134 [ __ptr ])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 5255831)) -1 (nil))

(insn 19 13 20 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 144)
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 143 [ <variable>.cpu ])
                    (const_int 4 [0x4]))
                (reg/f:SI 140)) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 143 [ <variable>.cpu ])
        (expr_list:REG_DEAD (reg/f:SI 140)
            (nil))))

(insn 20 19 22 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 0 r0)
        (mem/f:SI (plus:SI (reg/v:SI 134 [ __ptr ])
                (reg:SI 144)) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_DEAD (reg/v:SI 134 [ __ptr ])
            (nil))))

(call_insn/j 22 20 23 2 arch/arm/kernel/smp_twd.c:97 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clockevents_update_freq") [flags 0x41] <function_decl 0x10f21900 clockevents_update_freq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 23 22 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_cpufreq_init (twd_cpufreq_init)[0:693]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 8 -- before reload
;;   ======================================================

;;	  0-->     5 r136=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->     6 r134=[r136+0x8]                   :cortex_a8_load_store_1
;;	  5-->     7 cc=cmp(r134,0x0)                  :cortex_a8_default
;;	  7-->     8 pc={(cc==0x0)?L12:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 5
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 10 to 11 -- before reload
;;   ======================================================

;;	  0-->    10 cc=cmp(r134,0xfffffffffffff000)   :cortex_a8_default
;;	  2-->    11 pc={(leu(cc,0x0))?L19:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 10
;;   new tail = 11

;;   ======================================================
;;   -- basic block 4 from 28 to 34 -- before reload
;;   ======================================================

;;	  0-->    28 r0=0x0                            :cortex_a8_default
;;	  0-->    34 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 28
;;   new tail = 34

;;   ======================================================
;;   -- basic block 5 from 22 to 24 -- before reload
;;   ======================================================

;;	  0-->    22 r0=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  0-->    23 r1=0x0                            :cortex_a8_default
;;	  1-->    24 r0=call [`cpufreq_register_notifie:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 22
;;   new tail = 24


;; Procedure interblock/speculative motions == 0/0 




twd_cpufreq_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,1u} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r25={1d,5u} r26={1d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r134={1d,2u} r136={1d,1u} 
;;    total ref usage 163{133d,30u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 136
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/smp_twd.c:123 (set (reg/f:SI 136)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 7 2 arch/arm/kernel/smp_twd.c:123 (set (reg/f:SI 134 [ twd_clk.210 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 136)
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
            (nil))))

(insn 7 6 8 2 include/linux/err.h:39 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ twd_clk.210 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 include/linux/err.h:39 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134


;; Succ edge  4 [15.0%] 
;; Succ edge  3 [85.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(11){ }u8(13){ }u9(25){ }u10(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [85.0%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 include/linux/err.h:39 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ twd_clk.210 ])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 134 [ twd_clk.210 ])
        (nil)))

(jump_insn 11 10 12 3 include/linux/err.h:39 discrim 2 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [15.0%] 
;; Pred edge  3 [0.0%]  (fallthru)
(code_label 12 11 13 4 30 "" [1 uses])

(note 13 12 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 13 34 4 arch/arm/kernel/smp_twd.c:128 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 28 19 4 arch/arm/kernel/smp_twd.c:128 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 19 34 20 5 31 "" [1 uses])

(note 20 19 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 5 arch/arm/kernel/smp_twd.c:124 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 23 22 24 5 arch/arm/kernel/smp_twd.c:124 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 24 23 25 5 arch/arm/kernel/smp_twd.c:124 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpufreq_register_notifier") [flags 0x41] <function_decl 0x10e9fe00 cpufreq_register_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 25 24 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function twd_timer_setup (twd_timer_setup)[0:696] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)


twd_timer_setup

Dataflow summary:
def_info->table_size = 2200, use_info->table_size = 239
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={32d,24u} r1={27d,12u} r2={21d,2u} r3={20d,1u} r11={1d,23u} r12={19d} r13={1d,42u} r14={18d,1u} r15={18d} r16={18d} r17={18d} r18={18d} r19={18d} r20={18d} r21={18d} r22={18d} r23={18d} r24={30d,12u} r25={1d,23u} r26={1d,22u} r27={18d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={18d} r38={18d} r39={18d} r40={18d} r41={18d} r42={18d} r43={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} r81={18d} r82={18d} r83={18d} r84={18d} r85={18d} r86={18d} r87={18d} r88={18d} r89={18d} r90={18d} r91={18d} r92={18d} r93={18d} r94={18d} r95={18d} r96={18d} r97={18d} r98={18d} r99={18d} r100={18d} r101={18d} r102={18d} r103={18d} r104={18d} r105={18d} r106={18d} r107={18d} r108={18d} r109={18d} r110={18d} r111={18d} r112={18d} r113={18d} r114={18d} r115={18d} r116={18d} r117={18d} r118={18d} r119={18d} r120={18d} r121={18d} r122={18d} r123={18d} r124={18d} r125={18d} r126={18d} r127={18d} r134={2d,3u} r135={1d,3u} r142={1d,3u,1d} r143={1d,1u} r144={2d,4u,1d} r145={2d,4u} r146={1d,2u} r147={2d,2u} r150={1d,8u} r151={1d,1u} r152={1d,2u} r156={1d,1u} r157={1d,2u} r158={1d,1u} r159={1d,1u} r163={1d,2u} r164={1d,1u} r165={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,2u} r170={1d,1u} r171={1d,1u,1d} r172={1d,1u} r178={1d,1u} r188={1d,1u} r189={1d,2u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r198={1d,1u} r199={2d,2u} r201={1d,1u,1d} r202={1d,1u} r205={1d,1u} r207={1d,1u} 
;;    total ref usage 2429{2196d,229u,4e} in 124{106 regular + 18 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d31(0){ }d58(1){ }d79(2){ }d99(3){ }d100(11){ }d119(12){ }d120(13){ }d138(14){ }d331(25){ }d332(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 8 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 150 151 152
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 150 151 152
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 145
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150

( 3 )->[4]->( 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150

( 3 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 0 [r0] 24 [cc] 146
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; live  gen 	 0 [r0] 1 [r1] 145
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150

( 6 5 4 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 156
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150

( 2 7 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u54(11){ }u55(13){ }u56(25){ }u57(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 24 [cc] 135 157
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157

( 8 )->[9]->( 10 23 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157

( 8 9 )->[10]->( 11 22 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 24 [cc] 158 159
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150

( 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u74(11){ }u75(13){ }u76(25){ }u77(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 144 161
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150

( 13 15 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150

( 12 11 )->[13]->( 12 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 205
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205

( 13 )->[14]->( 16 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u102(11){ }u103(13){ }u104(25){ }u105(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205

( 14 )->[15]->( 12 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u107(11){ }u108(13){ }u109(25){ }u110(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 205
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150

( 15 14 )->[16]->( 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 134 163 164 165 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 134 162 163 164 165 167 168
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150

( 18 20 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150

( 17 16 )->[18]->( 17 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 207
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 207
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207

( 18 )->[19]->( 21 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u143(11){ }u144(13){ }u145(25){ }u146(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207

( 19 )->[20]->( 17 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u148(11){ }u149(13){ }u150(25){ }u151(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 207
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150

( 20 19 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u155(11){ }u156(13){ }u157(25){ }u158(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 143 169 170 171 172 178 188
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 142 143 169 170 171 172 178 188
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150

( 21 10 23 )->[22]->( 1 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u187(11){ }u188(13){ }u189(25){ }u190(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 189 190 191 192 193 194 195 196 198 199 201 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 147 189 190 191 192 193 194 195 196 197 198 199 201 202
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 9 )->[23]->( 22 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u225(11){ }u226(13){ }u227(25){ }u228(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150

( 22 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u235(11){ }u236(13){ }u237(14){ }u238(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 17 to worklist
  Adding insn 14 to worklist
  Adding insn 218 to worklist
  Adding insn 22 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
  Adding insn 43 to worklist
  Adding insn 49 to worklist
  Adding insn 52 to worklist
  Adding insn 58 to worklist
  Adding insn 220 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 71 to worklist
  Adding insn 78 to worklist
  Adding insn 74 to worklist
  Adding insn 80 to worklist
  Adding insn 82 to worklist
  Adding insn 222 to worklist
  Adding insn 100 to worklist
  Adding insn 95 to worklist
  Adding insn 105 to worklist
  Adding insn 112 to worklist
  Adding insn 108 to worklist
  Adding insn 114 to worklist
  Adding insn 116 to worklist
  Adding insn 148 to worklist
  Adding insn 143 to worklist
  Adding insn 139 to worklist
  Adding insn 135 to worklist
  Adding insn 131 to worklist
  Adding insn 126 to worklist
  Adding insn 182 to worklist
  Adding insn 180 to worklist
  Adding insn 174 to worklist
  Adding insn 165 to worklist
  Adding insn 163 to worklist
  Adding insn 161 to worklist
  Adding insn 159 to worklist
  Adding insn 157 to worklist
  Adding insn 155 to worklist
  Adding insn 224 to worklist
  Adding insn 190 to worklist
  Adding insn 187 to worklist
Finished finding needed instructions:
processing block 12 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
  Adding insn 217 to worklist
processing block 17 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
  Adding insn 216 to worklist
processing block 22 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 181 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
  Adding insn 173 to worklist
  Adding insn 172 to worklist
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 169 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 164 to worklist
  Adding insn 162 to worklist
  Adding insn 160 to worklist
  Adding insn 158 to worklist
  Adding insn 156 to worklist
  Adding insn 154 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
processing block 21 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 142 to worklist
  Adding insn 138 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
processing block 20 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
  Adding insn 115 to worklist
processing block 19 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
processing block 18 lr out =  11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
  Adding insn 111 to worklist
  Adding insn 214 to worklist
processing block 16 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
  Adding insn 99 to worklist
  Adding insn 97 to worklist
  Adding insn 94 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
processing block 15 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
  Adding insn 81 to worklist
processing block 14 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
processing block 13 lr out =  11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
  Adding insn 77 to worklist
  Adding insn 212 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 61 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
processing block 23 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
  Adding insn 186 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
  Adding insn 51 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
  Adding insn 48 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
  Adding insn 42 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
  Adding insn 21 to worklist
  Adding insn 20 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
  Adding insn 39 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
  Adding insn 30 to worklist
processing block 3 lr out =  0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 48 (    2)
;;   ======================================================
;;   -- basic block 13 from 74 to 78 -- before reload
;;   ======================================================

;;	  0-->    74 r0=call [`get_jiffies_64']        :cortex_a8_issue_branch
;;	  0-->   212 r205=r0                           :cortex_a8_default
changing bb of uid 217
  from 12 to 13
;;	  1-->   217 r0=0xa                            :cortex_a8_default
;;	 32-->    77 cc=cmp(r144#4,r1)                 :cortex_a8_default
;;	 34-->    78 pc={(gtu(cc,0x0))?L76:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 74
;;   new tail = 78

;;   ======================================================
;;   -- basic block 14 from 80 to 80 -- before reload
;;   ======================================================

;;	  0-->    80 pc={(cc!=0x0)?L210:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 80
;;   new tail = 80

;;   ======================================================
;;   -- basic block 15 from 81 to 82 -- before reload
;;   ======================================================

;;	  0-->    81 cc=cmp(r144#0,r205)               :cortex_a8_default
;;	  2-->    82 pc={(gtu(cc,0x0))?L76:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 81
;;   new tail = 82

;;   ======================================================
;;   -- basic block 12 from 71 to 71 -- before reload
;;   ======================================================

;;	  0-->    71 call [`__udelay']                 :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 71
;;   new tail = 71

;;   ======================================================
;;   -- basic block 18 from 108 to 112 -- before reload
;;   ======================================================

;;	  0-->   108 r0=call [`get_jiffies_64']        :cortex_a8_issue_branch
;;	  0-->   214 r207=r0                           :cortex_a8_default
changing bb of uid 216
  from 17 to 18
;;	  1-->   216 r0=0xa                            :cortex_a8_default
;;	 32-->   111 cc=cmp(r134#4,r1)                 :cortex_a8_default
;;	 34-->   112 pc={(gtu(cc,0x0))?L110:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 108
;;   new tail = 112

;;   ======================================================
;;   -- basic block 19 from 114 to 114 -- before reload
;;   ======================================================

;;	  0-->   114 pc={(cc!=0x0)?L211:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 114
;;   new tail = 114

;;   ======================================================
;;   -- basic block 20 from 115 to 116 -- before reload
;;   ======================================================

;;	  0-->   115 cc=cmp(r134#0,r207)               :cortex_a8_default
;;	  2-->   116 pc={(gtu(cc,0x0))?L110:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 115
;;   new tail = 116

;;   ======================================================
;;   -- basic block 17 from 105 to 105 -- before reload
;;   ======================================================

;;	  0-->   105 call [`__udelay']                 :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 105
;;   new tail = 105

;;   ======================================================
;;   -- basic block 2 from 2 to 9 -- before reload
;;   ======================================================

;;	  0-->     6 r151=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->     2 r150=r0                           :cortex_a8_default
;;	  3-->     7 r152=[r151+0x8]                   :cortex_a8_load_store_1
;;	  5-->     8 cc=cmp(r152,0x0)                  :cortex_a8_default
;;	  7-->     9 pc={(cc!=0x0)?L44:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 2
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 12 to 17 -- before reload
;;   ======================================================

;;	  0-->    13 r1=r152                           :cortex_a8_default
;;	  0-->    12 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    14 r0=call [`clk_get_sys']           :cortex_a8_issue_branch
;;	  1-->    15 r145=r0                           :cortex_a8_default
;;	  2-->    16 cc=cmp(r145,0xfffffffffffff000)   :cortex_a8_default
;;	  4-->    17 pc={(leu(cc,0x0))?L25:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 12
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 20 to 218 -- before reload
;;   ======================================================

;;	  0-->    21 r1=r145                           :cortex_a8_default
;;	  0-->    20 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  1-->    22 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   218 pc=L40                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 218

;;   ======================================================
;;   -- basic block 5 from 28 to 31 -- before reload
;;   ======================================================

;;	  0-->    28 r0=call [`clk_enable']            :cortex_a8_issue_branch
;;	 32-->    30 {cc=cmp(r0,0x0);r146=r0;}         :cortex_a8_default
;;	 34-->    31 pc={(cc==0x0)?L40:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 28
;;   new tail = 31

;;   ======================================================
;;   -- basic block 6 from 34 to 39 -- before reload
;;   ======================================================

;;	  0-->    35 r1=r146                           :cortex_a8_default
;;	  0-->    34 r0=`*.LC2'                        :cortex_a8_load_store_1
;;	  1-->    36 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    37 r0=r145                           :cortex_a8_default
;;	  2-->    38 call [`clk_put']                  :cortex_a8_issue_branch
;;	  2-->    39 r145=r146                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 34
;;   new tail = 39

;;   ======================================================
;;   -- basic block 7 from 42 to 43 -- before reload
;;   ======================================================

;;	  0-->    42 r156=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->    43 [r156+0x8]=r145                   :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 42
;;   new tail = 43

;;   ======================================================
;;   -- basic block 8 from 46 to 49 -- before reload
;;   ======================================================

;;	  0-->    46 r157=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->    47 r135=[r157+0x8]                   :cortex_a8_load_store_1
;;	  5-->    48 cc=cmp(r135,0x0)                  :cortex_a8_default
;;	  7-->    49 pc={(cc==0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 46
;;   new tail = 49

;;   ======================================================
;;   -- basic block 9 from 51 to 52 -- before reload
;;   ======================================================

;;	  0-->    51 cc=cmp(r135,0xfffffffffffff000)   :cortex_a8_default
;;	  2-->    52 pc={(leu(cc,0x0))?L184:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 51
;;   new tail = 52

;;   ======================================================
;;   -- basic block 10 from 55 to 58 -- before reload
;;   ======================================================

;;	  0-->    55 r158=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  3-->    56 r159=[r158+0x4]                   :cortex_a8_load_store_1
;;	  5-->    57 cc=cmp(r159,0x0)                  :cortex_a8_default
;;	  7-->    58 pc={(cc!=0x0)?L149:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 55
;;   new tail = 58

;;   ======================================================
;;   -- basic block 11 from 61 to 220 -- before reload
;;   ======================================================

;;	  0-->    61 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    65 r144=0x1                          :cortex_a8_default
;;	  1-->    62 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->    63 r0=call [`get_jiffies_64']        :cortex_a8_issue_branch
;;	 34-->    66 {r144=r0+r144;clobber cc;}        :cortex_a8_default
;;	 34-->   220 pc=L72                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 34
;;   new head = 61
;;   new tail = 220

;;   ======================================================
;;   -- basic block 16 from 89 to 222 -- before reload
;;   ======================================================

;;	  0-->    91 r163=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->    94 r165=0x1                          :cortex_a8_default
;;	  1-->    89 r134=0x5                          :cortex_a8_default
;;	  1-->    99 r168=0xffffffffffffffff           :cortex_a8_default
;;	  2-->    90 {r134=r144+r134;clobber cc;}      :cortex_a8_default
;;	  3-->    92 r164=[r163]                       :cortex_a8_load_store_1
;;	  6-->    95 [r164+0x8]=r165                   :cortex_a8_load_store_1
;;	  7-->    97 r167=[r163]                       :cortex_a8_load_store_1
;;	 10-->   100 [r167+0x4]=r168                   :cortex_a8_load_store_1
;;	 10-->   222 pc=L106                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 89
;;   new tail = 222

;;   ======================================================
;;   -- basic block 21 from 123 to 148 -- before reload
;;   ======================================================

;;	  0-->   123 r169=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->   128 r172=0x14                         :cortex_a8_default
;;	  1-->   134 r1=0xf4240                        :cortex_a8_load_store_1
;;	  3-->   124 r170=[r169]                       :cortex_a8_load_store_1
;;	  6-->   126 r143=[r170+0x4]                   :cortex_a8_load_store_1
;;	  8-->   127 r171=!r143                        :cortex_a8_default
;;	 10-->   129 r142=r172*r171                    :cortex_a8_multiply_2
;;	 14-->   133 r0=r142                           :cortex_a8_default
;;	 16-->   131 [r169+0x4]=r142                   :cortex_a8_load_store_1
;;	 16-->   135 r0=call [`__aeabi_uidiv']         :cortex_a8_issue_branch
;;	 17-->   136 r178=r0                           :cortex_a8_default
;;	 17-->   137 r0=r142                           :cortex_a8_default
;;	 18-->   138 r1=0x2710                         :cortex_a8_default
;;	 19-->   139 r0=call [`__aeabi_uidiv']         :cortex_a8_issue_branch
;;	 19-->   142 r1=0x64                           :cortex_a8_default
;;	 20-->   143 r0=call [`__aeabi_uidivmod']      :cortex_a8_issue_branch
;;	 20-->   144 r188=r1                           :cortex_a8_default
;;	 21-->   147 r2=r188                           :cortex_a8_default
;;	 21-->   146 r1=r178                           :cortex_a8_default
;;	 22-->   145 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	 23-->   148 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 23
;;   new head = 123
;;   new tail = 148

;;   ======================================================
;;   -- basic block 22 from 151 to 182 -- before reload
;;   ======================================================

;;	  0-->   151 r189=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  0-->   227 r199=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   228 r199=r199&0xffffffffffffffc0      :cortex_a8_default
;;	  1-->   154 r191=0x0                          :cortex_a8_default
;;	  2-->   156 r192=`*.LC5'                      :cortex_a8_load_store_1
;;	  2-->   158 r193=0x7                          :cortex_a8_default
;;	  3-->   152 r190=[r189]                       :cortex_a8_load_store_1
;;	  3-->   160 r194=0x15e                        :cortex_a8_default
;;	  4-->   162 r195=`twd_set_mode'               :cortex_a8_load_store_1
;;	  4-->   176 r0=r150                           :cortex_a8_default
;;	  5-->   164 r196=`twd_set_next_event'         :cortex_a8_load_store_1
;;	  5-->   178 r2=0xf                            :cortex_a8_default
;;	  6-->   155 [r190+0x8]=r191                   :cortex_a8_load_store_1
;;	  6-->   179 r3=0xffffffffffffffff             :cortex_a8_default
;;	  7-->   172 r201=[r199+0x14]                  :cortex_a8_load_store_1
;;	  8-->   169 r198=`__per_cpu_offset'           :cortex_a8_load_store_1
;;	  9-->   157 [r150+0x44]=r192                  :cortex_a8_load_store_1
;;	 10-->   159 [r150+0x2c]=r193                  :cortex_a8_load_store_1
;;	 11-->   161 [r150+0x48]=r194                  :cortex_a8_load_store_1
;;	 12-->   163 [r150+0x38]=r195                  :cortex_a8_load_store_1
;;	 13-->   165 [r150+0x4]=r196                   :cortex_a8_load_store_1
;;	 14-->   173 r202=[r201*0x4+r198]              :cortex_a8_load_store_1
;;	 15-->   166 r147=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	 16-->   167 r147=asm_operands                 :nothing
;;	 17-->   174 [r147+r202]=r150                  :cortex_a8_load_store_1
;;	 18-->   177 r1=[r189+0x4]                     :cortex_a8_load_store_1
;;	 19-->   180 call [`clockevents_config_and_regi:cortex_a8_issue_branch
;;	 19-->   181 r0=[r150+0x4c]                    :cortex_a8_load_store_1
;;	 20-->   182 call [`gic_enable_ppi']           :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 20
;;   new head = 151
;;   new tail = 182

;;   ======================================================
;;   -- basic block 23 from 186 to 224 -- before reload
;;   ======================================================

;;	  0-->   186 r0=r135                           :cortex_a8_default
;;	  1-->   187 r0=call [`clk_get_rate']          :cortex_a8_issue_branch
;;	 33-->   190 [r157+0x4]=r0                     :cortex_a8_load_store_1
;;	 33-->   224 pc=L149                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 33
;;   new head = 186
;;   new tail = 224


;; Procedure interblock/speculative motions == 2/2 




twd_timer_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={32d,24u} r1={27d,12u} r2={21d,2u} r3={20d,1u} r11={1d,23u} r12={19d} r13={1d,42u} r14={18d,1u} r15={18d} r16={18d} r17={18d} r18={18d} r19={18d} r20={18d} r21={18d} r22={18d} r23={18d} r24={30d,12u} r25={1d,23u} r26={1d,22u} r27={18d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={18d} r38={18d} r39={18d} r40={18d} r41={18d} r42={18d} r43={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} r81={18d} r82={18d} r83={18d} r84={18d} r85={18d} r86={18d} r87={18d} r88={18d} r89={18d} r90={18d} r91={18d} r92={18d} r93={18d} r94={18d} r95={18d} r96={18d} r97={18d} r98={18d} r99={18d} r100={18d} r101={18d} r102={18d} r103={18d} r104={18d} r105={18d} r106={18d} r107={18d} r108={18d} r109={18d} r110={18d} r111={18d} r112={18d} r113={18d} r114={18d} r115={18d} r116={18d} r117={18d} r118={18d} r119={18d} r120={18d} r121={18d} r122={18d} r123={18d} r124={18d} r125={18d} r126={18d} r127={18d} r134={2d,3u} r135={1d,3u} r142={1d,3u,1d} r143={1d,1u} r144={2d,4u,1d} r145={2d,4u} r146={1d,2u} r147={2d,2u} r150={1d,8u} r151={1d,1u} r152={1d,2u} r156={1d,1u} r157={1d,2u} r158={1d,1u} r159={1d,1u} r163={1d,2u} r164={1d,1u} r165={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,2u} r170={1d,1u} r171={1d,1u,1d} r172={1d,1u} r178={1d,1u} r188={1d,1u} r189={1d,2u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r198={1d,1u} r199={2d,2u} r201={1d,1u,1d} r202={1d,1u} r205={1d,1u} r207={1d,1u} 
;;    total ref usage 2429{2196d,229u,4e} in 124{106 regular + 18 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 150 151 152
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 150 151 152
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 2 2 arch/arm/kernel/smp_twd.c:196 (set (reg/f:SI 151)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 2 6 7 2 arch/arm/kernel/smp_twd.c:195 (set (reg/v/f:SI 150 [ clk ])
        (reg:SI 0 r0 [ clk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ clk ])
        (nil)))

(insn 7 2 8 2 arch/arm/kernel/smp_twd.c:196 (set (reg/f:SI 152 [ twd_clk ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 151)
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 151)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
            (nil))))

(insn 8 7 9 2 arch/arm/kernel/smp_twd.c:196 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 152 [ twd_clk ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/kernel/smp_twd.c:196 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 2 -> ( 3 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152


;; Succ edge  3 [6.7%]  (fallthru)
;; Succ edge  8 [93.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 145
;; live  kill	 14 [lr]

;; Pred edge  2 [6.7%]  (fallthru)
(note 10 9 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 10 12 3 arch/arm/kernel/smp_twd.c:175 (set (reg:SI 1 r1)
        (reg/f:SI 152 [ twd_clk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152 [ twd_clk ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 12 13 14 3 arch/arm/kernel/smp_twd.c:175 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fc9390>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fc9390>)
        (nil)))

(call_insn 14 12 15 3 arch/arm/kernel/smp_twd.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_sys") [flags 0x41] <function_decl 0x10a60980 clk_get_sys>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 14 16 3 arch/arm/kernel/smp_twd.c:175 (set (reg/v/f:SI 145 [ clk ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 3 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 145 [ clk ])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 18 17 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 18 20 4 arch/arm/kernel/smp_twd.c:177 (set (reg:SI 1 r1)
        (reg/v/f:SI 145 [ clk ])) 167 {*arm_movsi_insn} (nil))

(insn 20 21 22 4 arch/arm/kernel/smp_twd.c:177 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10fe42c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10fe42c0>)
        (nil)))

(call_insn 22 20 218 4 arch/arm/kernel/smp_twd.c:177 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 218 22 219 4 (set (pc)
        (label_ref 40)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150


;; Succ edge  7 [100.0%] 

(barrier 219 218 25)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 0 [r0] 24 [cc] 146
;; live  kill	 14 [lr]

;; Pred edge  3 [100.0%] 
(code_label 25 219 26 5 37 "" [1 uses])

(note 26 25 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 29 26 28 5 NOTE_INSN_DELETED)

(call_insn 28 29 30 5 arch/arm/kernel/smp_twd.c:181 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_enable") [flags 0x41] <function_decl 0x10a60500 clk_enable>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 31 5 arch/arm/kernel/smp_twd.c:182 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 146 [ err ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 31 30 32 5 arch/arm/kernel/smp_twd.c:182 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 150
;; live  gen 	 0 [r0] 1 [r1] 145
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 32 31 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 35 32 34 6 arch/arm/kernel/smp_twd.c:183 (set (reg:SI 1 r1)
        (reg/v:SI 146 [ err ])) 167 {*arm_movsi_insn} (nil))

(insn 34 35 36 6 arch/arm/kernel/smp_twd.c:183 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10fb2e10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10fb2e10>)
        (nil)))

(call_insn 36 34 37 6 arch/arm/kernel/smp_twd.c:183 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 37 36 38 6 arch/arm/kernel/smp_twd.c:184 (set (reg:SI 0 r0)
        (reg/v/f:SI 145 [ clk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 145 [ clk ])
        (nil)))

(call_insn 38 37 39 6 arch/arm/kernel/smp_twd.c:184 (parallel [
            (call (mem:SI (symbol_ref:SI ("clk_put") [flags 0x41] <function_decl 0x10a60680 clk_put>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 39 38 40 6 arch/arm/kernel/smp_twd.c:185 (set (reg/v/f:SI 145 [ clk ])
        (reg/v:SI 146 [ err ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 146 [ err ])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 150
;; live  gen 	 156
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
(code_label 40 39 41 7 38 "" [2 uses])

(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 7 arch/arm/kernel/smp_twd.c:197 (set (reg/f:SI 156)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 43 42 44 7 arch/arm/kernel/smp_twd.c:197 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 156)
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])
        (reg/v/f:SI 145 [ clk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 156)
        (expr_list:REG_DEAD (reg/v/f:SI 145 [ clk ])
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 2 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u54(11){ }u55(13){ }u56(25){ }u57(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 24 [cc] 135 157
;; live  kill	

;; Pred edge  2 [93.3%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 44 43 45 8 36 "" [1 uses])

(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 8 arch/arm/kernel/smp_twd.c:199 (set (reg/f:SI 157)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 47 46 48 8 arch/arm/kernel/smp_twd.c:199 (set (reg/f:SI 135 [ twd_clk.403 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 157)
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
        (nil)))

(insn 48 47 49 8 include/linux/err.h:39 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ twd_clk.403 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 49 48 50 8 include/linux/err.h:39 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157


;; Succ edge  10 [15.0%] 
;; Succ edge  9 [85.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [85.0%]  (fallthru)
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 9 include/linux/err.h:39 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ twd_clk.403 ])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 53 9 include/linux/err.h:39 discrim 2 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 24 [cc] 158 159
;; live  kill	

;; Pred edge  8 [15.0%] 
;; Pred edge  9 [0.0%]  (fallthru)
(code_label 53 52 54 10 39 "" [1 uses])

(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 10 arch/arm/kernel/smp_twd.c:140 (set (reg/f:SI 158)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 56 55 57 10 arch/arm/kernel/smp_twd.c:140 (set (reg:SI 159 [ twd_timer_rate ])
        (mem/c/i:SI (plus:SI (reg/f:SI 158)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 158)
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 twd_timer_rate+0 S4 A32])
            (nil))))

(insn 57 56 58 10 arch/arm/kernel/smp_twd.c:140 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 159 [ twd_timer_rate ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 159 [ twd_timer_rate ])
        (nil)))

(jump_insn 58 57 59 10 arch/arm/kernel/smp_twd.c:140 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 149)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u74(11){ }u75(13){ }u76(25){ }u77(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 144
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  10 [0.0%]  (fallthru)
(note 59 58 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 64 59 61 11 NOTE_INSN_DELETED)

(insn 61 64 65 11 arch/arm/kernel/smp_twd.c:141 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10fcab40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10fcab40>)
        (nil)))

(insn 65 61 62 11 arch/arm/kernel/smp_twd.c:144 (set (reg/v:DI 144 [ waitjiffies ])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(call_insn 62 65 63 11 arch/arm/kernel/smp_twd.c:141 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 63 62 66 11 arch/arm/kernel/smp_twd.c:144 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 66 63 220 11 arch/arm/kernel/smp_twd.c:144 (parallel [
            (set (reg/v:DI 144 [ waitjiffies ])
                (plus:DI (reg:DI 0 r0)
                    (reg/v:DI 144 [ waitjiffies ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(jump_insn 220 66 221 11 (set (pc)
        (label_ref 72)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150


;; Succ edge  13 [100.0%] 

(barrier 221 220 76)

;; Start of basic block ( 13 15) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  13 [50.0%] 
;; Pred edge  15 [50.0%] 
(code_label 76 221 69 12 43 "" [2 uses])

(note 69 76 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 71 69 72 12 arch/arm/kernel/smp_twd.c:147 (parallel [
            (call (mem:SI (symbol_ref:SI ("__udelay") [flags 0x41] <function_decl 0x10eb2d80 __udelay>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150


;; Succ edge  13 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 205
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru,dfs_back)
;; Pred edge  11 [100.0%] 
(code_label 72 71 73 13 42 "" [1 uses])

(note 73 72 213 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 213 73 74 13 NOTE_INSN_DELETED)

(call_insn 74 213 212 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 212 74 217 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:SI 205 [ D.14353 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 217 212 77 13 arch/arm/kernel/smp_twd.c:147 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 77 217 78 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 144 [ waitjiffies ]) 4)
            (reg:SI 1 r1 [+4 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(jump_insn 78 77 198 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 12 14)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205


;; Succ edge  12 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u102(11){ }u103(13){ }u104(25){ }u105(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 144 150 205
;; live  gen 	
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 198 78 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 80 198 199 14 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 210)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 14 -> ( 16 15)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205


;; Succ edge  16 [71.0%]  (loop_exit)
;; Succ edge  15 [29.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u107(11){ }u108(13){ }u109(25){ }u110(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 205
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150 205
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [29.0%]  (fallthru)
(note 199 80 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 81 199 82 15 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 144 [ waitjiffies ]) 0)
            (reg:SI 205 [ D.14353 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 205 [ D.14353 ])
        (nil)))

(jump_insn 82 81 210 15 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 12 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150


;; Succ edge  12 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 134 163 164 165 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 150
;; live  gen 	 134 163 164 165 167 168
;; live  kill	 24 [cc]

;; Pred edge  15 [50.0%]  (fallthru,loop_exit)
;; Pred edge  14 [71.0%]  (loop_exit)
(code_label 210 82 88 16 49 "" [1 uses])

(note 88 210 91 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 91 88 94 16 arch/arm/kernel/smp_twd.c:153 (set (reg/f:SI 163)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 94 91 89 16 arch/arm/kernel/smp_twd.c:153 (set (reg:SI 165)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 89 94 99 16 arch/arm/kernel/smp_twd.c:150 (set (reg/v:DI 134 [ waitjiffies.404 ])
        (const_int 5 [0x5])) 163 {*arm_movdi} (nil))

(insn 99 89 90 16 arch/arm/kernel/smp_twd.c:156 (set (reg:SI 168)
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 90 99 92 16 arch/arm/kernel/smp_twd.c:150 (parallel [
            (set (reg/v:DI 134 [ waitjiffies.404 ])
                (plus:DI (reg/v:DI 144 [ waitjiffies ])
                    (reg/v:DI 134 [ waitjiffies.404 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 144 [ waitjiffies ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (expr_list:REG_EQUAL (plus:DI (reg/v:DI 144 [ waitjiffies ])
                    (const_int 5 [0x5]))
                (nil)))))

(insn 92 90 95 16 arch/arm/kernel/smp_twd.c:153 (set (reg/f:SI 164 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 163) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 95 92 97 16 arch/arm/kernel/smp_twd.c:153 (set (mem/v:SI (plus:SI (reg/f:SI 164 [ twd_base ])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 165)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_DEAD (reg/f:SI 164 [ twd_base ])
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))

(insn 97 95 100 16 arch/arm/kernel/smp_twd.c:156 (set (reg/f:SI 167 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 163) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 163)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 100 97 222 16 arch/arm/kernel/smp_twd.c:156 (set (mem/v:SI (plus:SI (reg/f:SI 167 [ twd_base ])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 168)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (expr_list:REG_DEAD (reg/f:SI 167 [ twd_base ])
            (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
                (nil)))))

(jump_insn 222 100 223 16 (set (pc)
        (label_ref 106)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150


;; Succ edge  18 [100.0%] 

(barrier 223 222 110)

;; Start of basic block ( 18 20) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  18 [50.0%] 
;; Pred edge  20 [50.0%] 
(code_label 110 223 103 17 46 "" [2 uses])

(note 103 110 105 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(call_insn 105 103 106 17 arch/arm/kernel/smp_twd.c:159 (parallel [
            (call (mem:SI (symbol_ref:SI ("__udelay") [flags 0x41] <function_decl 0x10eb2d80 __udelay>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150


;; Succ edge  18 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 207
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 207
;; live  kill	 14 [lr]

;; Pred edge  17 [100.0%]  (fallthru,dfs_back)
;; Pred edge  16 [100.0%] 
(code_label 106 105 107 18 45 "" [1 uses])

(note 107 106 215 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 215 107 108 18 NOTE_INSN_DELETED)

(call_insn 108 215 214 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 214 108 216 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:SI 207 [ D.14348 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 216 214 111 18 arch/arm/kernel/smp_twd.c:159 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 111 216 112 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 134 [ waitjiffies.404 ]) 4)
            (reg:SI 1 r1 [+4 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(jump_insn 112 111 203 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 17 19)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207


;; Succ edge  17 [50.0%] 
;; Succ edge  19 [50.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u143(11){ }u144(13){ }u145(25){ }u146(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 134 150 207
;; live  gen 	
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 203 112 114 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(jump_insn 114 203 204 19 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207


;; Succ edge  21 [71.0%]  (loop_exit)
;; Succ edge  20 [29.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u148(11){ }u149(13){ }u150(25){ }u151(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 207
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150 207
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [29.0%]  (fallthru)
(note 204 114 115 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 115 204 116 20 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 134 [ waitjiffies.404 ]) 0)
            (reg:SI 207 [ D.14348 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 207 [ D.14348 ])
        (nil)))

(jump_insn 116 115 211 20 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 20 -> ( 17 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 150


;; Succ edge  17 [50.0%] 
;; Succ edge  21 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 20 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u155(11){ }u156(13){ }u157(25){ }u158(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 143 169 170 171 172 178 188
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 142 143 169 170 171 172 178 188
;; live  kill	 14 [lr]

;; Pred edge  20 [50.0%]  (fallthru,loop_exit)
;; Pred edge  19 [71.0%]  (loop_exit)
(code_label 211 116 122 21 50 "" [1 uses])

(note 122 211 123 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 128 21 arch/arm/kernel/smp_twd.c:161 (set (reg/f:SI 169)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 128 123 134 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 172)
        (const_int 20 [0x14])) 167 {*arm_movsi_insn} (nil))

(insn 134 128 124 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 1000000 [0xf4240])) 167 {*arm_movsi_insn} (nil))

(insn 124 134 126 21 arch/arm/kernel/smp_twd.c:161 (set (reg/f:SI 170 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 169) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 126 124 127 21 arch/arm/kernel/smp_twd.c:161 (set (reg/v:SI 143 [ count ])
        (mem/v:SI (plus:SI (reg/f:SI 170 [ twd_base ])
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 170 [ twd_base ])
        (nil)))

(insn 127 126 129 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 171)
        (not:SI (reg/v:SI 143 [ count ]))) 134 {*arm_one_cmplsi2} (expr_list:REG_DEAD (reg/v:SI 143 [ count ])
        (nil)))

(insn 129 127 133 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 142 [ twd_timer_rate.214 ])
        (mult:SI (reg:SI 172)
            (reg:SI 171))) 32 {*arm_mulsi3_v6} (expr_list:REG_DEAD (reg:SI 172)
        (expr_list:REG_DEAD (reg:SI 171)
            (expr_list:REG_EQUAL (mult:SI (reg:SI 171)
                    (const_int 20 [0x14]))
                (nil)))))

(insn 133 129 131 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (reg:SI 142 [ twd_timer_rate.214 ])) 167 {*arm_movsi_insn} (nil))

(insn 131 133 135 21 arch/arm/kernel/smp_twd.c:163 (set (mem/c/i:SI (plus:SI (reg/f:SI 169)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 142 [ twd_timer_rate.214 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 169)
        (nil)))

(call_insn/u 135 131 136 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 136 135 137 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 178)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUAL (udiv:SI (reg:SI 142 [ twd_timer_rate.214 ])
                (const_int 1000000 [0xf4240]))
            (nil))))

(insn 137 136 138 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (reg:SI 142 [ twd_timer_rate.214 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 142 [ twd_timer_rate.214 ])
        (nil)))

(insn 138 137 139 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 10000 [0x2710])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 139 138 142 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 142 139 143 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 100 [0x64])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 143 142 144 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidivmod") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 144 143 147 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 188 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 147 144 146 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 2 r2)
        (reg:SI 188 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 188 [+4 ])
        (nil)))

(insn 146 147 145 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (reg:SI 178)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 178)
        (nil)))

(insn 145 146 148 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10ff0a80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10ff0a80>)
        (nil)))

(call_insn 148 145 149 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 21 -> ( 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 10 23) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u187(11){ }u188(13){ }u189(25){ }u190(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 189 190 191 192 193 194 195 196 198 199 201 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 147 189 190 191 192 193 194 195 196 198 199 201 202
;; live  kill	 14 [lr]

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
;; Pred edge  23 [100.0%] 
(code_label 149 148 150 22 41 "" [2 uses])

(note 150 149 170 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 170 150 151 22 NOTE_INSN_DELETED)

(insn 151 170 227 22 arch/arm/kernel/smp_twd.c:204 (set (reg/f:SI 189)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 227 151 228 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 199)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 228 227 154 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 199)
        (and:SI (reg:SI 199)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 154 228 156 22 arch/arm/kernel/smp_twd.c:204 (set (reg:SI 191)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 156 154 158 22 arch/arm/kernel/smp_twd.c:206 (set (reg/f:SI 192)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10ff00c0>)) 167 {*arm_movsi_insn} (nil))

(insn 158 156 152 22 arch/arm/kernel/smp_twd.c:207 (set (reg:SI 193)
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (nil))

(insn 152 158 160 22 arch/arm/kernel/smp_twd.c:204 (set (reg/f:SI 190 [ twd_base ])
        (mem/f/c/i:SI (reg/f:SI 189) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 160 152 162 22 arch/arm/kernel/smp_twd.c:209 (set (reg:SI 194)
        (const_int 350 [0x15e])) 167 {*arm_movsi_insn} (nil))

(insn 162 160 176 22 arch/arm/kernel/smp_twd.c:210 (set (reg/f:SI 195)
        (symbol_ref:SI ("twd_set_mode") [flags 0x3] <function_decl 0x10f97d00 twd_set_mode>)) 167 {*arm_movsi_insn} (nil))

(insn 176 162 164 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 0 r0)
        (reg/v/f:SI 150 [ clk ])) 167 {*arm_movsi_insn} (nil))

(insn 164 176 178 22 arch/arm/kernel/smp_twd.c:211 (set (reg/f:SI 196)
        (symbol_ref:SI ("twd_set_next_event") [flags 0x3] <function_decl 0x10f97e00 twd_set_next_event>)) 167 {*arm_movsi_insn} (nil))

(insn 178 164 155 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 2 r2)
        (const_int 15 [0xf])) 167 {*arm_movsi_insn} (nil))

(insn 155 178 179 22 arch/arm/kernel/smp_twd.c:204 (set (mem/v:SI (plus:SI (reg/f:SI 190 [ twd_base ])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 191)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 191)
        (expr_list:REG_DEAD (reg/f:SI 190 [ twd_base ])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 179 155 172 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 3 r3)
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 172 179 169 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 201 [ <variable>.cpu ])
        (mem/s/j:SI (plus:SI (reg:SI 199)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 199)
        (nil)))

(insn 169 172 157 22 arch/arm/kernel/smp_twd.c:213 (set (reg/f:SI 198)
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (nil))

(insn 157 169 159 22 arch/arm/kernel/smp_twd.c:206 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 68 [0x44])) [0 <variable>.name+0 S4 A32])
        (reg/f:SI 192)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 192)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10ff00c0>)
            (nil))))

(insn 159 157 161 22 arch/arm/kernel/smp_twd.c:207 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 44 [0x2c])) [0 <variable>.features+0 S4 A32])
        (reg:SI 193)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_EQUAL (const_int 7 [0x7])
            (nil))))

(insn 161 159 163 22 arch/arm/kernel/smp_twd.c:209 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 72 [0x48])) [0 <variable>.rating+0 S4 A64])
        (reg:SI 194)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (expr_list:REG_EQUAL (const_int 350 [0x15e])
            (nil))))

(insn 163 161 165 22 arch/arm/kernel/smp_twd.c:210 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 56 [0x38])) [0 <variable>.set_mode+0 S4 A64])
        (reg/f:SI 195)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 195)
        (expr_list:REG_EQUAL (symbol_ref:SI ("twd_set_mode") [flags 0x3] <function_decl 0x10f97d00 twd_set_mode>)
            (nil))))

(insn 165 163 173 22 arch/arm/kernel/smp_twd.c:211 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 4 [0x4])) [0 <variable>.set_next_event+0 S4 A32])
        (reg/f:SI 196)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 196)
        (expr_list:REG_EQUAL (symbol_ref:SI ("twd_set_next_event") [flags 0x3] <function_decl 0x10f97e00 twd_set_next_event>)
            (nil))))

(insn 173 165 166 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 202)
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 201 [ <variable>.cpu ])
                    (const_int 4 [0x4]))
                (reg/f:SI 198)) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 201 [ <variable>.cpu ])
        (expr_list:REG_DEAD (reg/f:SI 198)
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 201 [ <variable>.cpu ])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
                (nil)))))

(insn 166 173 167 22 arch/arm/kernel/smp_twd.c:213 (set (reg/v:SI 147 [ __ptr ])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 167 166 174 22 arch/arm/kernel/smp_twd.c:213 (set (reg/v:SI 147 [ __ptr ])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 147 [ __ptr ])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 5270655)) -1 (nil))

(insn 174 167 177 22 arch/arm/kernel/smp_twd.c:213 (set (mem/f:SI (plus:SI (reg/v:SI 147 [ __ptr ])
                (reg:SI 202)) [0 S4 A32])
        (reg/v/f:SI 150 [ clk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 202)
        (expr_list:REG_DEAD (reg/v:SI 147 [ __ptr ])
            (nil))))

(insn 177 174 180 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 189)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 189)
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 twd_timer_rate+0 S4 A32])
            (nil))))

(call_insn 180 177 181 22 arch/arm/kernel/smp_twd.c:215 (parallel [
            (call (mem:SI (symbol_ref:SI ("clockevents_config_and_register") [flags 0x41] <function_decl 0x10f21880 clockevents_config_and_register>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 181 180 182 22 arch/arm/kernel/smp_twd.c:219 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 150 [ clk ])
                (const_int 76 [0x4c])) [0 <variable>.irq+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 150 [ clk ])
        (nil)))

(call_insn/j 182 181 183 22 arch/arm/kernel/smp_twd.c:219 (parallel [
            (call (mem:SI (symbol_ref:SI ("gic_enable_ppi") [flags 0x41] <function_decl 0x10f97c80 gic_enable_ppi>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 22 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 183 182 184)

;; Start of basic block ( 9) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u225(11){ }u226(13){ }u227(25){ }u228(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 150 157
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%] 
(code_label 184 183 185 23 40 "" [1 uses])

(note 185 184 188 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 188 185 186 23 NOTE_INSN_DELETED)

(insn 186 188 187 23 arch/arm/kernel/smp_twd.c:200 (set (reg:SI 0 r0)
        (reg/f:SI 135 [ twd_clk.403 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 135 [ twd_clk.403 ])
        (nil)))

(call_insn 187 186 190 23 arch/arm/kernel/smp_twd.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_rate") [flags 0x41] <function_decl 0x10a60600 clk_get_rate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 190 187 224 23 arch/arm/kernel/smp_twd.c:200 (set (mem/c/i:SI (plus:SI (reg/f:SI 157)
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 157)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil))))

(jump_insn 224 190 225 23 (set (pc)
        (label_ref 149)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150


;; Succ edge  22 [100.0%] 

(barrier 225 224 0)

starting the processing of deferred insns
ending the processing of deferred insns
