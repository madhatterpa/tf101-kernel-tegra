
;; Function sched_clock_poll (sched_clock_poll)[0:751]

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


try_optimize_cfg iteration 1


Number of successful forward propagations: 0



sched_clock_poll

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={6d,4u} r1={5d,1u} r2={4d} r3={4d} r11={1d,2u} r12={4d} r13={1d,5u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={1d,2u} r26={1d,1u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 396{372d,24u,0e} in 14{11 regular + 3 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363
0[0,6] 1[6,5] 2[11,4] 3[15,4] 11[19,1] 12[20,4] 13[24,1] 14[25,4] 15[29,3] 16[32,3] 17[35,3] 18[38,3] 19[41,3] 20[44,3] 21[47,3] 22[50,3] 23[53,3] 24[56,3] 25[59,1] 26[60,1] 27[61,3] 28[64,3] 29[67,3] 30[70,3] 31[73,3] 32[76,3] 33[79,3] 34[82,3] 35[85,3] 36[88,3] 37[91,3] 38[94,3] 39[97,3] 40[100,3] 41[103,3] 42[106,3] 43[109,3] 44[112,3] 45[115,3] 46[118,3] 47[121,3] 48[124,3] 49[127,3] 50[130,3] 51[133,3] 52[136,3] 53[139,3] 54[142,3] 55[145,3] 56[148,3] 57[151,3] 58[154,3] 59[157,3] 60[160,3] 61[163,3] 62[166,3] 63[169,3] 64[172,3] 65[175,3] 66[178,3] 67[181,3] 68[184,3] 69[187,3] 70[190,3] 71[193,3] 72[196,3] 73[199,3] 74[202,3] 75[205,3] 76[208,3] 77[211,3] 78[214,3] 79[217,3] 80[220,3] 81[223,3] 82[226,3] 83[229,3] 84[232,3] 85[235,3] 86[238,3] 87[241,3] 88[244,3] 89[247,3] 90[250,3] 91[253,3] 92[256,3] 93[259,3] 94[262,3] 95[265,3] 96[268,3] 97[271,3] 98[274,3] 99[277,3] 100[280,3] 101[283,3] 102[286,3] 103[289,3] 104[292,3] 105[295,3] 106[298,3] 107[301,3] 108[304,3] 109[307,3] 110[310,3] 111[313,3] 112[316,3] 113[319,3] 114[322,3] 115[325,3] 116[328,3] 117[331,3] 118[334,3] 119[337,3] 120[340,3] 121[343,3] 122[346,3] 123[349,3] 124[352,3] 125[355,3] 126[358,3] 127[361,3] 133[364,1] 134[365,1] 135[366,1] 136[367,1] 137[368,1] 138[369,1] 139[370,1] 140[371,1] 
;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 136 137 138 139 140
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 133 134 135 136 137 138 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 10, 14, 18, 19, 23, 24, 28, 59, 60
;; rd  gen 	(8)
364, 365, 366, 367, 368, 369, 370, 371
;; rd  kill	(12)
25, 26, 27, 28, 364, 365, 366, 367, 368, 369, 370, 371

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/kernel/sched_clock.c:22 (set (reg/v:SI 135 [ wrap_ticks ])
        (reg:SI 0 r0 [ wrap_ticks ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ wrap_ticks ])
        (nil)))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 arch/arm/kernel/sched_clock.c:23 (set (reg/f:SI 136)
        (symbol_ref:SI ("jiffies") [flags 0xc0] <var_decl 0x10b8ce40 jiffies>)) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 134 [ jiffies.207 ])
        (mem/v/c/i:SI (reg/f:SI 136) [0 jiffies+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136)
        (nil)))

(insn 8 7 9 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 137)
        (plus:SI (reg/v:SI 135 [ wrap_ticks ])
            (reg:SI 134 [ jiffies.207 ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 135 [ wrap_ticks ])
        (expr_list:REG_DEAD (reg:SI 134 [ jiffies.207 ])
            (nil))))

(insn 9 8 10 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 0 r0)
        (reg:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 137)
        (nil)))

(call_insn 10 9 11 2 arch/arm/kernel/sched_clock.c:23 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("round_jiffies") [flags 0x41] <function_decl 0x10bb5880 round_jiffies>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 133 [ D.13764 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 12 11 13 2 arch/arm/kernel/sched_clock.c:23 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 14 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 0 r0)
        (reg/f:SI 138)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 138)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
            (nil))))

(insn 14 13 15 2 arch/arm/kernel/sched_clock.c:23 (set (reg:SI 1 r1)
        (reg:SI 133 [ D.13764 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.13764 ])
        (nil)))

(call_insn 15 14 16 2 arch/arm/kernel/sched_clock.c:23 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("mod_timer") [flags 0x41] <function_decl 0x10bace80 mod_timer>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 15 17 2 arch/arm/kernel/sched_clock.c:24 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 17 16 18 2 arch/arm/kernel/sched_clock.c:24 (set (reg/f:SI 140 [ sched_clock_update_fn ])
        (mem/f/c/i:SI (reg/f:SI 139) [0 sched_clock_update_fn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))

(call_insn 18 17 0 2 arch/arm/kernel/sched_clock.c:24 (parallel [
            (call (mem:SI (reg/f:SI 140 [ sched_clock_update_fn ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 140 [ sched_clock_update_fn ])
        (nil))
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
5, 10, 14, 18, 19, 23, 24, 59, 60, 364, 365, 366, 367, 368, 369, 370, 371


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function sched_clock_postinit (sched_clock_postinit)[0:753] (unlikely executed)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


try_optimize_cfg iteration 1


Number of successful forward propagations: 0



sched_clock_postinit

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 13[sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} 
;;    total ref usage 139{128d,11u,0e} in 3{2 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,3] 1[3,2] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 133[127,1] 
;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133
;; live  kill	
;; rd  in  	(10)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
127
;; rd  kill	(1)
127

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/sched_clock.c:73 (set (reg/f:SI 133)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 7 2 arch/arm/kernel/sched_clock.c:73 (set (reg:SI 0 r0)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 133)
                (const_int 20 [0x14])) [0 sched_clock_timer.data+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))

(call_insn/j 7 6 0 2 arch/arm/kernel/sched_clock.c:73 (parallel [
            (call (mem:SI (symbol_ref:SI ("sched_clock_poll") [flags 0x3] <function_decl 0x10f73b00 sched_clock_poll>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(11)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25, 127


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function init_sched_clock (init_sched_clock)[0:752] (unlikely executed)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


try_optimize_cfg iteration 1


Number of successful forward propagations: 0



init_sched_clock

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,17u} r1={19d,12u} r2={16d,6u} r3={13d,3u} r11={1d,5u} r12={11d} r13={1d,18u} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={14d,1u} r25={1d,5u} r26={1d,4u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r134={1d,2u} r135={1d} r136={2d,3u} r137={2d,1u} r140={2d,1u} r141={1d,1u} r142={1d,5u} r143={1d,2u} r144={1d,2u,1d} r145={1d,4u,3d} r146={1d,1u} r147={1d,1u} r148={1d,1u} r150={1d,1u} r151={1d,1u} r158={1d,3u} r165={1d,1u,1d} r166={1d,2u} r167={1d,1u} r168={2d,2u} r170={2d,3u} r172={1d,2u} r177={1d,1u} r182={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r191={1d,2u} r192={1d,1u} r193={1d,1u} r194={2d,4u,1d} r196={3d,4u} 
;;    total ref usage 1385{1249d,130u,6e} in 80{70 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,20] 1[20,19] 2[39,16] 3[55,13] 11[68,1] 12[69,11] 13[80,1] 14[81,11] 15[92,10] 16[102,10] 17[112,10] 18[122,10] 19[132,10] 20[142,10] 21[152,10] 22[162,10] 23[172,10] 24[182,14] 25[196,1] 26[197,1] 27[198,10] 28[208,10] 29[218,10] 30[228,10] 31[238,10] 32[248,10] 33[258,10] 34[268,10] 35[278,10] 36[288,10] 37[298,10] 38[308,10] 39[318,10] 40[328,10] 41[338,10] 42[348,10] 43[358,10] 44[368,10] 45[378,10] 46[388,10] 47[398,10] 48[408,10] 49[418,10] 50[428,10] 51[438,10] 52[448,10] 53[458,10] 54[468,10] 55[478,10] 56[488,10] 57[498,10] 58[508,10] 59[518,10] 60[528,10] 61[538,10] 62[548,10] 63[558,10] 64[568,10] 65[578,10] 66[588,10] 67[598,10] 68[608,10] 69[618,10] 70[628,10] 71[638,10] 72[648,10] 73[658,10] 74[668,10] 75[678,10] 76[688,10] 77[698,10] 78[708,10] 79[718,10] 80[728,10] 81[738,10] 82[748,10] 83[758,10] 84[768,10] 85[778,10] 86[788,10] 87[798,10] 88[808,10] 89[818,10] 90[828,10] 91[838,10] 92[848,10] 93[858,10] 94[868,10] 95[878,10] 96[888,10] 97[898,10] 98[908,10] 99[918,10] 100[928,10] 101[938,10] 102[948,10] 103[958,10] 104[968,10] 105[978,10] 106[988,10] 107[998,10] 108[1008,10] 109[1018,10] 110[1028,10] 111[1038,10] 112[1048,10] 113[1058,10] 114[1068,10] 115[1078,10] 116[1088,10] 117[1098,10] 118[1108,10] 119[1118,10] 120[1128,10] 121[1138,10] 122[1148,10] 123[1158,10] 124[1168,10] 125[1178,10] 126[1188,10] 127[1198,10] 134[1208,1] 135[1209,1] 136[1210,2] 137[1212,2] 140[1214,2] 141[1216,1] 142[1217,1] 143[1218,1] 144[1219,1] 145[1220,1] 146[1221,1] 147[1222,1] 148[1223,1] 150[1224,1] 151[1225,1] 158[1226,1] 165[1227,1] 166[1228,1] 167[1229,1] 168[1230,2] 170[1232,2] 172[1234,1] 177[1235,1] 182[1236,1] 186[1237,1] 187[1238,1] 188[1239,1] 189[1240,1] 191[1241,1] 192[1242,1] 193[1243,1] 194[1244,2] 196[1246,3] 
;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 143 144 145 146 147 148 150 151
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 142 143 144 145 146 147 148 150 151
;; live  kill	 14 [lr]
;; rd  in  	(10)
19, 38, 54, 67, 68, 79, 80, 91, 196, 197
;; rd  gen 	(10)
194, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225
;; rd  kill	(34)
81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/kernel/sched_clock.c:29 (set (reg/v/f:SI 142 [ cd ])
        (reg:SI 0 r0 [ cd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ cd ])
        (nil)))

(insn 3 2 4 2 arch/arm/kernel/sched_clock.c:29 (set (reg/v/f:SI 143 [ update ])
        (reg:SI 1 r1 [ update ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ update ])
        (nil)))

(insn 4 3 5 2 arch/arm/kernel/sched_clock.c:29 (set (reg/v:SI 144 [ clock_bits ])
        (reg:SI 2 r2 [ clock_bits ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ clock_bits ])
        (nil)))

(insn 5 4 6 2 arch/arm/kernel/sched_clock.c:29 (set (reg/v:SI 145 [ rate ])
        (reg:SI 3 r3 [ rate ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ rate ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/kernel/sched_clock.c:34 (set (reg/f:SI 146)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/kernel/sched_clock.c:34 (set (mem/f/c/i:SI (reg/f:SI 146) [0 sched_clock_update_fn+0 S4 A32])
        (reg/v/f:SI 143 [ update ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 146)
        (nil)))

(insn 11 10 12 2 arch/arm/kernel/sched_clock.c:37 (set (reg/f:SI 147)
        (plus:SI (reg/v/f:SI 142 [ cd ])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (nil))

(insn 12 11 14 2 arch/arm/kernel/sched_clock.c:37 (set (reg/f:SI 148)
        (plus:SI (reg/v/f:SI 142 [ cd ])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn 14 12 15 2 arch/arm/kernel/sched_clock.c:37 (set (reg:SI 150)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 15 14 16 2 arch/arm/kernel/sched_clock.c:37 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 16 15 17 2 arch/arm/kernel/sched_clock.c:37 (set (reg:SI 0 r0)
        (reg/f:SI 147)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))

(insn 17 16 18 2 arch/arm/kernel/sched_clock.c:37 (set (reg:SI 1 r1)
        (reg/f:SI 148)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))

(insn 18 17 19 2 arch/arm/kernel/sched_clock.c:37 (set (reg:SI 2 r2)
        (reg/v:SI 145 [ rate ])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 2 arch/arm/kernel/sched_clock.c:37 (set (reg:SI 3 r3)
        (const_int 1000000000 [0x3b9aca00])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1000000000 [0x3b9aca00])
        (nil)))

(call_insn 20 19 21 2 arch/arm/kernel/sched_clock.c:37 (parallel [
            (call (mem:SI (symbol_ref:SI ("clocks_calc_mult_shift") [flags 0x41] <function_decl 0x10c03100 clocks_calc_mult_shift>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 21 20 22 2 arch/arm/kernel/sched_clock.c:40 (set (reg:SI 151)
        (const_int 3999999 [0x3d08ff])) 167 {*arm_movsi_insn} (nil))

(insn 22 21 23 2 arch/arm/kernel/sched_clock.c:40 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ rate ])
            (reg:SI 151))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 151)
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 145 [ rate ])
                (const_int 3999999 [0x3d08ff]))
            (nil))))

(jump_insn 23 22 24 2 arch/arm/kernel/sched_clock.c:40 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; rd  out 	(19)
19, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 0 [r0] 1 [r1] 137 140
;; live  kill	 14 [lr]
;; rd  in  	(19)
19, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225
;; rd  gen 	(3)
15, 1213, 1215
;; rd  kill	(35)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 1212, 1213, 1214, 1215

;; Pred edge  2 [39.0%]  (fallthru)
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 3 arch/arm/kernel/sched_clock.c:41 (set (reg:SI 0 r0)
        (reg/v:SI 145 [ rate ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ rate ])
        (nil)))

(insn 26 25 27 3 arch/arm/kernel/sched_clock.c:41 (set (reg:SI 1 r1)
        (const_int 1000000 [0xf4240])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 27 26 28 3 arch/arm/kernel/sched_clock.c:41 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 28 27 30 3 arch/arm/kernel/sched_clock.c:41 (set (reg/v:SI 140 [ r ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUAL (udiv:SI (reg/v:SI 145 [ rate ])
                (const_int 1000000 [0xf4240]))
            (nil))))

(insn 30 28 33 3 arch/arm/kernel/sched_clock.c:42 (set (reg/v:SI 137 [ r_unit ])
        (const_int 77 [0x4d])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; rd  out 	(21)
15, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1213, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 0 [r0] 1 [r1] 137 140
;; live  kill	 14 [lr]
;; rd  in  	(19)
19, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225
;; rd  gen 	(3)
13, 1212, 1214
;; rd  kill	(35)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 1212, 1213, 1214, 1215

;; Pred edge  2 [61.0%] 
(code_label 33 30 34 4 10 "" [1 uses])

(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 4 arch/arm/kernel/sched_clock.c:44 (set (reg:SI 0 r0)
        (reg/v:SI 145 [ rate ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ rate ])
        (nil)))

(insn 36 35 37 4 arch/arm/kernel/sched_clock.c:44 (set (reg:SI 1 r1)
        (const_int 1000 [0x3e8])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 37 36 38 4 arch/arm/kernel/sched_clock.c:44 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 38 37 40 4 arch/arm/kernel/sched_clock.c:44 (set (reg/v:SI 140 [ r ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUAL (udiv:SI (reg/v:SI 145 [ rate ])
                (const_int 1000 [0x3e8]))
            (nil))))

(insn 40 38 41 4 arch/arm/kernel/sched_clock.c:45 (set (reg/v:SI 137 [ r_unit ])
        (const_int 107 [0x6b])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; rd  out 	(21)
13, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1212, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u46(11){ }u47(13){ }u48(25){ }u49(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 136 141 158 165 166 167 168 170 172 177 182 186 187 188 189 191 192 193 194 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142 143 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 134 135 136 141 158 165 166 167 168 170 172 177 182 186 187 188 189 191 192 193 194 196
;; live  kill	 14 [lr] 24 [cc] 196
;; rd  in  	(24)
13, 15, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225
;; rd  gen 	(22)
1208, 1209, 1210, 1216, 1226, 1227, 1228, 1229, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246
;; rd  kill	(34)
81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 1208, 1209, 1210, 1211, 1216, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 41 40 42 5 11 "" [0 uses])

(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 110 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 158 [ <variable>.mult ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ cd ])
                (const_int 16 [0x10])) [0 <variable>.mult+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 110 43 45 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 191 [ D.13954+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 45 110 49 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 134 [ shift.205 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ cd ])
                (const_int 20 [0x14])) [0 <variable>.shift+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 49 45 50 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:DI 0 r0)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 50 49 51 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 2 r2)
        (reg/v:SI 144 [ clock_bits ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 51 50 52 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 52 51 53 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:DI 165)
        (reg:DI 0 r0)) 163 {*arm_movdi} (expr_list:REG_EQUAL (ashift:DI (const_int 1 [0x1])
            (reg/v:SI 144 [ clock_bits ]))
        (nil)))

(insn 53 52 54 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:DI 167)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 54 53 55 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (parallel [
            (set (reg:DI 166)
                (plus:DI (reg:DI 165)
                    (reg:DI 167)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 167)
        (expr_list:REG_DEAD (reg:DI 165)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (expr_list:REG_EQUAL (plus:DI (reg:DI 165)
                        (const_int -1 [0xffffffffffffffff]))
                    (nil))))))

(insn 55 54 58 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 168)
        (mult:SI (reg:SI 158 [ <variable>.mult ])
            (subreg:SI (reg:DI 166) 4))) 32 {*arm_mulsi3_v6} (nil))

(insn 58 55 59 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:DI 170)
        (mult:DI (zero_extend:DI (subreg:SI (reg:DI 166) 0))
            (zero_extend:DI (reg:SI 158 [ <variable>.mult ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:DI 166)
        (nil)))

(insn 59 58 60 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 168)
        (plus:SI (reg:SI 168)
            (subreg:SI (reg:DI 170) 4))) 4 {*arm_addsi3} (nil))

(insn 60 59 62 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (subreg:SI (reg:DI 170) 4)
        (reg:SI 168)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 62 60 63 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:DI 0 r0)
        (reg:DI 170)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 170)
        (nil)))

(insn 63 62 64 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 2 r2)
        (reg:SI 134 [ shift.205 ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 64 63 111 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 111 64 112 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 192)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 112 111 113 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (reg:SI 193 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 113 112 114 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (clobber (reg:DI 196 [ wrap ])) -1 (nil))

(insn 114 113 115 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (subreg:SI (reg:DI 196 [ wrap ]) 0)
        (reg:SI 192)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 192)
        (nil)))

(insn 115 114 67 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/sched_clock.h:26 (set (subreg:SI (reg:DI 196 [ wrap ]) 4)
        (reg:SI 193 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 193 [+4 ])
        (nil)))

(insn 67 115 68 5 arch/arm/kernel/sched_clock.c:50 discrim 46 (set (reg:DI 172)
        (const_int 4835703278458516699 [0x431bde82d7b634db])) 163 {*arm_movdi} (nil))

(insn 68 67 71 5 arch/arm/kernel/sched_clock.c:50 discrim 46 (parallel [
            (set (reg/v:DI 136 [ __res ])
                (asm_operands:DI ("umull	%Q0, %R0, %1, %Q2
	mov	%Q0, #0") ("=&r") 0 [
                        (reg:DI 172)
                        (reg:DI 196 [ wrap ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 5215076))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 71 68 72 5 arch/arm/kernel/sched_clock.c:50 discrim 52 (parallel [
            (set (reg/v:DI 136 [ __res ])
                (asm_operands:DI ("umlal	%R0, %Q0, %R2, %Q3
	umlal	%R0, %1, %Q2, %R3
	mov	%R0, #0
	adds	%Q0, %1, %Q0
	adc	%R0, %R0, #0
	umlal	%Q0, %R0, %R2, %R3") ("=&r") 0 [
                        (reg:DI 172)
                        (reg:DI 196 [ wrap ])
                        (reg/v:DI 136 [ __res ])
                        (reg:SI 191 [ D.13954+4 ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("0") 0)
                        (asm_input:SI ("1") 0)
                    ] 5215082))
            (set (reg/v:SI 135 [ __z ])
                (asm_operands:SI ("umlal	%R0, %Q0, %R2, %Q3
	umlal	%R0, %1, %Q2, %R3
	mov	%R0, #0
	adds	%Q0, %1, %Q0
	adc	%R0, %R0, #0
	umlal	%Q0, %R0, %R2, %R3") ("=&r") 1 [
                        (reg:DI 172)
                        (reg:DI 196 [ wrap ])
                        (reg/v:DI 136 [ __res ])
                        (reg:SI 191 [ D.13954+4 ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("0") 0)
                        (asm_input:SI ("1") 0)
                    ] 5215082))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 196 [ wrap ])
        (expr_list:REG_DEAD (reg:DI 172)
            (expr_list:REG_UNUSED (reg/v:SI 135 [ __z ])
                (expr_list:REG_UNUSED (reg:QI 24 cc)
                    (nil))))))

(insn 72 71 73 5 arch/arm/kernel/sched_clock.c:51 (set (reg:SI 177)
        (ashift:SI (subreg:SI (reg/v:DI 136 [ __res ]) 4)
            (const_int 14 [0xe]))) 117 {*arm_shiftsi3} (nil))

(insn 73 72 74 5 arch/arm/kernel/sched_clock.c:51 (set (reg:SI 194)
        (lshiftrt:SI (subreg:SI (reg/v:DI 136 [ __res ]) 0)
            (const_int 18 [0x12]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:DI 136 [ __res ])
        (nil)))

(insn 74 73 117 5 arch/arm/kernel/sched_clock.c:51 (set (reg:SI 194)
        (ior:SI (reg:SI 177)
            (reg:SI 194))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(insn 117 74 118 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 0 r0)
        (reg:SI 158 [ <variable>.mult ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 158 [ <variable>.mult ])
        (nil)))

(insn 118 117 79 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 1 r1 [+4 ])
        (reg:SI 191 [ D.13954+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 191 [ D.13954+4 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 79 118 80 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 2 r2)
        (reg:SI 134 [ shift.205 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ shift.205 ])
        (nil)))

(call_insn/u 80 79 81 5 arch/arm/kernel/sched_clock.c:55 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 81 80 82 5 arch/arm/kernel/sched_clock.c:55 (set (reg:DI 182)
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 82 81 83 5 arch/arm/kernel/sched_clock.c:55 (set (mem:DI (reg/f:SI 13 sp) [0 S8 A64])
        (reg:DI 182)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 182)
        (nil)))

(insn 83 82 84 5 arch/arm/kernel/sched_clock.c:55 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 194)) 167 {*arm_movsi_insn} (nil))

(insn 84 83 85 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fa5e00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fa5e00>)
        (nil)))

(insn 85 84 86 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 1 r1)
        (reg/v:SI 144 [ clock_bits ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ clock_bits ])
        (nil)))

(insn 86 85 87 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 2 r2)
        (reg/v:SI 140 [ r ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ r ])
        (nil)))

(insn 87 86 88 5 arch/arm/kernel/sched_clock.c:55 (set (reg:SI 3 r3)
        (reg/v:SI 137 [ r_unit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ r_unit ])
        (nil)))

(call_insn 88 87 89 5 arch/arm/kernel/sched_clock.c:55 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 16 [0x10])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 89 88 90 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 0 r0)
        (reg:SI 194)) 167 {*arm_movsi_insn} (nil))

(insn 90 89 91 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 1 r1)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 91 90 92 5 arch/arm/kernel/sched_clock.c:62 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 92 91 93 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 186)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUAL (udiv:SI (reg:SI 194)
                (const_int 10 [0xa]))
            (nil))))

(insn 93 92 94 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 187)
        (minus:SI (reg:SI 194)
            (reg:SI 186))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 194)
        (expr_list:REG_DEAD (reg:SI 186)
            (nil))))

(insn 94 93 95 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 0 r0)
        (reg:SI 187)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 187)
        (nil)))

(call_insn 95 94 96 5 arch/arm/kernel/sched_clock.c:62 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("msecs_to_jiffies") [flags 0x41] <function_decl 0x10b84c00 msecs_to_jiffies>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 96 95 97 5 arch/arm/kernel/sched_clock.c:62 (set (reg:SI 141 [ D.13941 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 97 96 98 5 arch/arm/kernel/sched_clock.c:62 (set (reg/f:SI 188)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 98 97 99 5 arch/arm/kernel/sched_clock.c:62 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 188)
                (const_int 20 [0x14])) [0 sched_clock_timer.data+0 S4 A32])
        (reg:SI 141 [ D.13941 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 188)
        (expr_list:REG_DEAD (reg:SI 141 [ D.13941 ])
            (nil))))

(call_insn 99 98 100 5 arch/arm/kernel/sched_clock.c:63 (parallel [
            (call (mem:SI (reg/v/f:SI 143 [ update ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/v/f:SI 143 [ update ])
        (nil))
    (nil))

(insn 100 99 101 5 arch/arm/kernel/sched_clock.c:68 (set (reg:DI 189)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 101 100 0 5 arch/arm/kernel/sched_clock.c:68 (set (mem/s/j:DI (reg/v/f:SI 142 [ cd ]) [0 <variable>.epoch_ns+0 S8 A64])
        (reg:DI 189)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 189)
        (expr_list:REG_DEAD (reg/v/f:SI 142 [ cd ])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(46)
13, 15, 38, 54, 67, 68, 79, 80, 194, 196, 197, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns
