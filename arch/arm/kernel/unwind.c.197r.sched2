
;; Function __aeabi_unwind_cpp_pr0 (__aeabi_unwind_cpp_pr0)[0:851]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 16 to 16 -- after reload
;;   ======================================================

;;	  0-->    16 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 16
;;   new tail = 16





__aeabi_unwind_cpp_pr0

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:55 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function __aeabi_unwind_cpp_pr1 (__aeabi_unwind_cpp_pr1)[0:852]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 16 to 16 -- after reload
;;   ======================================================

;;	  0-->    16 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 16
;;   new tail = 16





__aeabi_unwind_cpp_pr1

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:60 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function __aeabi_unwind_cpp_pr2 (__aeabi_unwind_cpp_pr2)[0:853]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 16 to 16 -- after reload
;;   ======================================================

;;	  0-->    16 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 16
;;   new tail = 16





__aeabi_unwind_cpp_pr2

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 14 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 2 16 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:65 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 17 16 12)

(note 12 17 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_init (unwind_init)[0:862] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)


unwind_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,2u} r1={4d,3u} r2={2d,1u} r3={3d,5u,2d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 34{14d,18u,2e} in 12{12 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 4 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]

( 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 93 to worklist
  Adding insn 42 to worklist
  Adding insn 49 to worklist
  Adding insn 91 to worklist
  Adding insn 61 to worklist
Finished finding needed instructions:
processing block 3 lr out =  2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 38 to worklist
processing block 5 lr out =  0 [r0] 13 [sp] 14 [lr]
  Adding insn 55 to worklist
processing block 4 lr out =  2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 48 to worklist
processing block 2 lr out =  2 [r2] 3 [r3] 13 [sp] 14 [lr]
  Adding insn 47 to worklist
  Adding insn 34 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 34 to 93 -- after reload
;;   ======================================================

;;	  0-->    34 r3=`__start_unwind_idx'           :cortex_a8_load_store_1
;;	  1-->    47 r2=`__stop_unwind_idx'            :cortex_a8_load_store_1
;;	  1-->    93 pc=L44                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 34
;;   new tail = 93

;;   ======================================================
;;   -- basic block 3 from 38 to 42 -- after reload
;;   ======================================================

;;	  0-->    38 r1=[r3]                           :cortex_a8_load_store_1
;;	  2-->    40 r1=sxt(r1,0x1f,0x0)               :cortex_a8_default
;;	  3-->    41 r1=r3+r1                          :cortex_a8_default
;;	  3-->    42 [post r3+=0x8]=r1                 :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 38
;;   new tail = 42

;;   ======================================================
;;   -- basic block 4 from 48 to 49 -- after reload
;;   ======================================================

;;	  0-->    48 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  2-->    49 pc={(ltu(cc,0x0))?L46:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 48
;;   new tail = 49

;;   ======================================================
;;   -- basic block 5 from 55 to 91 -- after reload
;;   ======================================================

;;	  0-->    55 r0=0x0                            :cortex_a8_default
;;	  0-->    61 use r0                            :nothing
;;	  0-->    91 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 55
;;   new tail = 91





unwind_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,2u} r1={4d,3u} r2={2d,1u} r3={3d,5u,2d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 34{14d,18u,2e} in 12{12 regular + 0 call} insns.
(note 30 0 32 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 32 30 89 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 89 32 31 2 NOTE_INSN_PROLOGUE_END)

(note 31 89 34 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 34 31 47 2 arch/arm/kernel/unwind.c:446 (set (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(insn:TI 47 34 93 2 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg/f:SI 2 r2 [170])
        (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
        (nil)))

(jump_insn 93 47 94 2 arch/arm/kernel/unwind.c:446 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 94 93 46)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  4 [91.0%] 
(code_label 46 94 37 3 9 "" [1 uses])

(note 37 46 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 39 37 38 3 NOTE_INSN_DELETED)

(insn:TI 38 39 40 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 40 38 41 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [166])
        (sign_extract:SI (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn:TI 41 40 42 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [167])
        (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg:SI 1 r1 [166]))) 4 {*arm_addsi3} (nil))

(insn 42 41 44 3 arch/arm/kernel/unwind.c:447 (set (mem/s/j:SI (post_modify:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                    (const_int 8 [0x8]))) [0 <variable>.addr+0 S4 A32])
        (reg:SI 1 r1 [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [167])
        (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 44 42 45 4 8 "" [1 uses])

(note 45 44 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 45 49 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg/f:SI 2 r2 [170]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>))
        (nil)))

(jump_insn:TI 49 48 50 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 50 49 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 50 61 5 arch/arm/kernel/unwind.c:452 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 55 90 5 arch/arm/kernel/unwind.c:452 (use (reg/i:SI 0 r0)) -1 (nil))

(note 90 61 91 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 91 90 92 5 arch/arm/kernel/unwind.c:452 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 92 91 87)

(note 87 92 88 NOTE_INSN_DELETED)

(note 88 87 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_table_del (unwind_table_del)[0:861]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 45 to 7 -- after reload
;;   ======================================================

;;	  0-->    45 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     6 {cc=cmp(r0,0x0);r4=r0;}           :cortex_a8_default
;;	  3-->     7 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 45
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 10 to 26 -- after reload
;;   ======================================================

;;	  0-->    10 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    11 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	  1-->    13 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  2-->    14 r2=[r4]                           :cortex_a8_load_store_1
;;	  5-->    15 [r2+0x4]=r3                       :cortex_a8_load_store_1
;;	  6-->    16 [r3]=r2                           :cortex_a8_load_store_1
;;	  7-->    41 r3=0x100100                       :cortex_a8_load_store_1
;;	 10-->    18 [r4]=r3                           :cortex_a8_load_store_1
;;	 11-->    40 r3=0x200200                       :cortex_a8_load_store_1
;;	 14-->    20 [r4+0x4]=r3                       :cortex_a8_load_store_1
;;	 33-->    12 r1=r0                             :cortex_a8_default
;;	 33-->    22 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 34-->    24 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	 34-->    25 r0=r4                             :cortex_a8_default
;;	 66-->    50 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 67-->    26 call [`kfree']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 67
;;   new head = 10
;;   new tail = 26





unwind_table_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,1u} r2={5d,2u} r3={7d,4u} r4={2d,7u} r12={3d} r13={2d,7u} r14={3d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,1u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 399{368d,31u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 45 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 45 3 46 2 arch/arm/kernel/unwind.c:428 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 46 45 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 46 7 2 arch/arm/kernel/unwind.c:431 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0 [ tab ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (reg:SI 0 r0 [ tab ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0 [ tab ])
        (nil)))

(jump_insn:TI 7 6 8 2 arch/arm/kernel/unwind.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2164 [0x874])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [21.6%] 
;; Succ edge  3 [78.4%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [78.4%]  (fallthru)
(note 8 7 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 10 8 11 3 arch/arm/kernel/unwind.c:434 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 11 10 13 3 arch/arm/kernel/unwind.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 11 14 3 include/linux/list.h:106 (set (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 13 15 3 include/linux/list.h:106 (set (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 14 16 3 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn:TI 16 15 41 3 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:133 D.15826 ] [133]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
            (nil))))

(insn:TI 41 16 18 3 include/linux/list.h:107 (set (reg:SI 3 r3 [138])
        (const_int 1048832 [0x100100])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1048832 [0x100100])
        (nil)))

(insn:TI 18 41 40 3 include/linux/list.h:107 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg:SI 3 r3 [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [138])
        (expr_list:REG_EQUAL (const_int 1048832 [0x100100])
            (nil))))

(insn:TI 40 18 20 3 include/linux/list.h:108 (set (reg:SI 3 r3 [139])
        (const_int 2097664 [0x200200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097664 [0x200200])
        (nil)))

(insn:TI 20 40 12 3 include/linux/list.h:108 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg:SI 3 r3 [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [139])
        (expr_list:REG_EQUAL (const_int 2097664 [0x200200])
            (nil))))

(insn:TI 12 20 22 3 arch/arm/kernel/unwind.c:434 (set (reg/v:SI 1 r1 [orig:135 flags ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 22 12 24 3 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 24 22 25 3 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 25 24 49 3 arch/arm/kernel/unwind.c:438 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(note 49 25 50 3 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 50 49 26 3 arch/arm/kernel/unwind.c:439 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 26 50 27 3 arch/arm/kernel/unwind.c:438 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10d76880 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 39)

(note 39 27 42 NOTE_INSN_DELETED)

(note 42 39 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_table_add (unwind_table_add)[0:860]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)


unwind_table_add

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={6d,3u} r2={8d,6u} r3={8d,8u} r4={3d,8u,2d} r5={3d,4u} r6={2d,4u} r7={2d,12u,3d} r8={3d,4u} r12={3d} r13={2d,11u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={5d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{387d,73u,5e} in 41{38 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 4 3 )->[5]->( 4 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 14 to worklist
  Adding insn 81 to worklist
  Adding insn 86 to worklist
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 22 to worklist
  Adding insn 25 to worklist
  Adding insn 33 to worklist
  Adding insn 41 to worklist
  Adding insn 59 to worklist
  Adding insn 55 to worklist
  Adding insn 54 to worklist
  Adding insn 53 to worklist
  Adding insn 51 to worklist
  Adding insn 45 to worklist
  Adding insn 84 to worklist
  Adding insn 72 to worklist
Finished finding needed instructions:
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 66 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 29 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 49 to worklist
  Adding insn 57 to worklist
  Adding insn 48 to worklist
  Adding insn 46 to worklist
  Adding insn 44 to worklist
processing block 5 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 40 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 39 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 21 to worklist
  Adding insn 24 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 17 to worklist
  Adding insn 12 to worklist
  Adding insn 79 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 13 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 15 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 81 to 18 -- after reload
;;   ======================================================

;;	  0-->    81 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     5 r8=r3                             :cortex_a8_default
;;	  2-->    79 r3=`malloc_sizes'                 :cortex_a8_load_store_1
;;	  2-->     2 r4=r0                             :cortex_a8_default
;;	  3-->     3 r5=r1                             :cortex_a8_default
;;	  3-->    13 r1=0xd0                           :cortex_a8_default
;;	  4-->     4 r6=r2                             :cortex_a8_default
;;	  5-->    12 r0=[r3+0x4]                       :cortex_a8_load_store_1
;;	  6-->    14 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	 38-->    17 {cc=cmp(r0,0x0);r7=r0;}           :cortex_a8_default
;;	 40-->    18 pc={(cc==0x0)?L60:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 40
;;   new head = 81
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 24 to 86 -- after reload
;;   ======================================================

;;	  0-->    24 r8=r8+r6                          :cortex_a8_default
;;	  0-->    21 r5=r5+r4                          :cortex_a8_default
;;	  1-->    25 [r7+0x14]=r8                      :cortex_a8_load_store_1
;;	  2-->    22 [r7+0xc]=r5                       :cortex_a8_load_store_1
;;	  3-->    20 [r7+0x8]=r4                       :cortex_a8_load_store_1
;;	  4-->    23 [r7+0x10]=r6                      :cortex_a8_load_store_1
;;	  4-->    86 pc=L34                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 24
;;   new tail = 86

;;   ======================================================
;;   -- basic block 4 from 29 to 33 -- after reload
;;   ======================================================

;;	  0-->    29 r2=[r4-0x8]                       :cortex_a8_load_store_1
;;	  2-->    31 r2=sxt(r2,0x1f,0x0)               :cortex_a8_default
;;	  3-->    32 r3=r3+r2                          :cortex_a8_default
;;	  3-->    33 [r4-0x8]=r3                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 29
;;   new tail = 33

;;   ======================================================
;;   -- basic block 5 from 39 to 41 -- after reload
;;   ======================================================

;;	  0-->    39 r2=[r7+0xc]                       :cortex_a8_load_store_1
;;	  0-->    36 r3=r4                             :cortex_a8_default
;;	  1-->    37 r4=r4+0x8                         :cortex_a8_default
;;	  2-->    40 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  4-->    41 pc={(ltu(cc,0x0))?L38:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 39
;;   new tail = 41

;;   ======================================================
;;   -- basic block 6 from 44 to 59 -- after reload
;;   ======================================================

;;	  0-->    44 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    45 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	  1-->    48 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  4-->    49 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  5-->    51 [r3+0x4]=r7                       :cortex_a8_load_store_1
;;	  6-->    53 [r7]=r3                           :cortex_a8_load_store_1
;;	  7-->    54 [r7+0x4]=r2                       :cortex_a8_load_store_1
;;	  8-->    55 [r2]=r7                           :cortex_a8_load_store_1
;;	 33-->    46 r1=r0                             :cortex_a8_default
;;	 33-->    57 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 34-->    59 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 44
;;   new tail = 59

;;   ======================================================
;;   -- basic block 7 from 66 to 84 -- after reload
;;   ======================================================

;;	  0-->    66 r0=r7                             :cortex_a8_default
;;	  0-->    72 use r0                            :nothing
;;	  0-->    84 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 66
;;   new tail = 84





unwind_table_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={6d,3u} r2={8d,6u} r3={8d,8u} r4={3d,8u,2d} r5={3d,4u} r6={2d,4u} r7={2d,12u,3d} r8={3d,4u} r12={3d} r13={2d,11u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={5d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{387d,73u,5e} in 41{38 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 ("found") NOTE_INSN_DELETED_LABEL 20)

(note 15 9 81 2 NOTE_INSN_DELETED)

(insn/f:TI 81 15 82 2 arch/arm/kernel/unwind.c:400 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 82 81 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 82 79 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 8 r8 [orig:143 text_size ] [143])
        (reg:SI 3 r3 [ text_size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ text_size ])
        (nil)))

(insn:TI 79 5 2 2 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
        (nil)))

(insn 2 79 3 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (reg:SI 0 r0 [ start ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ start ])
        (nil)))

(insn:TI 3 2 13 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 5 r5 [orig:141 size ] [141])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn 13 3 4 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 4 13 12 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
        (reg:SI 2 r2 [ text_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ text_addr ])
        (nil)))

(insn:TI 12 4 14 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 4 [0x4])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [144])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
                        (const_int 4 [0x4]))) [0 <variable>.cs_cachep+0 S4 A32])
            (nil))))

(call_insn:TI 14 12 17 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x11024200 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 17 14 18 2 arch/arm/kernel/unwind.c:408 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 18 17 19 2 arch/arm/kernel/unwind.c:408 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 19 18 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 19 21 3 arch/arm/kernel/unwind.c:414 (set (reg:SI 8 r8 [146])
        (plus:SI (reg/v:SI 8 r8 [orig:143 text_size ] [143])
            (reg/v:SI 6 r6 [orig:142 text_addr ] [142]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(insn 21 24 25 3 arch/arm/kernel/unwind.c:412 (set (reg:SI 5 r5 [145])
        (plus:SI (reg/v:SI 5 r5 [orig:141 size ] [141])
            (reg/v:SI 4 r4 [orig:140 start ] [140]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn:TI 25 21 22 3 arch/arm/kernel/unwind.c:414 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (reg:SI 8 r8 [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 22 25 20 3 arch/arm/kernel/unwind.c:412 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (reg:SI 5 r5 [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 22 23 3 arch/arm/kernel/unwind.c:411 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 23 20 86 3 arch/arm/kernel/unwind.c:413 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (reg/v:SI 6 r6 [orig:142 text_addr ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 86 23 87 3 arch/arm/kernel/unwind.c:417 (set (pc)
        (label_ref 34)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 87 86 38)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 38 87 28 4 23 "" [1 uses])

(note 28 38 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 30 28 29 4 NOTE_INSN_DELETED)

(insn:TI 29 30 31 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
        (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 31 29 32 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [149])
        (sign_extract:SI (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn:TI 32 31 33 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg:SI 2 r2 [149]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [149])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                    (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
            (nil))))

(insn 33 32 34 4 arch/arm/kernel/unwind.c:418 (set (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 34 33 35 5 22 "" [1 uses])

(note 35 34 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 39 35 36 5 arch/arm/kernel/unwind.c:417 (set (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 36 39 37 5 arch/arm/kernel/unwind.c:418 (set (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 37 36 40 5 arch/arm/kernel/unwind.c:418 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 40 37 41 5 arch/arm/kernel/unwind.c:417 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151])
        (nil)))

(jump_insn:TI 41 40 42 5 arch/arm/kernel/unwind.c:417 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 42 41 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 44 42 45 6 arch/arm/kernel/unwind.c:420 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 45 44 48 6 arch/arm/kernel/unwind.c:420 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 48 45 49 6 include/linux/list.h:76 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 49 48 51 6 include/linux/list.h:76 (set (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 unwind_tables.prev+0 S4 A32])
        (nil)))

(insn:TI 51 49 53 6 include/linux/list.h:41 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 53 51 54 6 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [153])
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
            (nil))))

(insn:TI 54 53 55 6 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 54 46 6 include/linux/list.h:44 (set (mem/s/f/j:SI (reg/f:SI 2 r2 [orig:134 D.15855 ] [134]) [0 <variable>.next+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])
        (nil)))

(insn:TI 46 55 57 6 arch/arm/kernel/unwind.c:420 (set (reg/v:SI 1 r1 [orig:137 flags ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 57 46 59 6 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 59 57 60 6 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 2 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 60 59 61 7 21 "" [1 uses])

(note 61 60 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 66 61 72 7 arch/arm/kernel/unwind.c:425 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 72 66 83 7 arch/arm/kernel/unwind.c:425 (use (reg/i:SI 0 r0)) -1 (nil))

(note 83 72 84 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 84 83 85 7 arch/arm/kernel/unwind.c:425 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 85 84 78)

(note 78 85 80 NOTE_INSN_DELETED)

(note 80 78 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function search_index (search_index)[0:854]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)


search_index

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,13u,1d} r1={3d,5u} r2={5d,5u,1d} r3={4d,7u,1d} r4={1d,2u} r12={3d,2u} r13={2d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 201{146d,52u,3e} in 30{29 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 2 )->[3]->( 9 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]

( 2 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 4 )->[5]->( 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]

( 7 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 4 6 )->[7]->( 6 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]

( 8 3 5 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 84 to worklist
  Adding insn 89 to worklist
  Adding insn 15 to worklist
  Adding insn 23 to worklist
  Adding insn 92 to worklist
  Adding insn 51 to worklist
  Adding insn 87 to worklist
  Adding insn 66 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 60 to worklist
processing block 3 lr out =  2 [r2] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
  Adding insn 13 to worklist
processing block 5 lr out =  2 [r2] 4 [r4] 13 [sp] 14 [lr]
processing block 6 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 72 to worklist
  Adding insn 74 to worklist
  Adding insn 71 to worklist
  Adding insn 33 to worklist
  Adding insn 36 to worklist
  Adding insn 31 to worklist
processing block 8 lr out =  2 [r2] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 53 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 28 to worklist
processing block 4 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 22 to worklist
  Adding insn 21 to worklist
processing block 2 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 9 to worklist
  Adding insn 8 to worklist
  Adding insn 2 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 84 to 10 -- after reload
;;   ======================================================

;;	  0-->     3 r3=r1                             :cortex_a8_default
;;	  0-->     2 r1=r0                             :cortex_a8_default
;;	  1-->    84 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     8 r0=[r3]                           :cortex_a8_load_store_1
;;	  4-->     9 cc=cmp(r1,r0)                     :cortex_a8_default
;;	  6-->    10 pc={(geu(cc,0x0))?L19:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 84
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 13 to 89 -- after reload
;;   ======================================================

;;	  0-->    13 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    15 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    16 r2=0x0                            :cortex_a8_default
;;	  2-->    89 pc=L54                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 13
;;   new tail = 89

;;   ======================================================
;;   -- basic block 4 from 21 to 23 -- after reload
;;   ======================================================

;;	  0-->    21 r0=[r2]                           :cortex_a8_load_store_1
;;	  2-->    22 cc=cmp(r1,r0)                     :cortex_a8_default
;;	  4-->    23 pc={(ltu(cc,0x0))?L78:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 21
;;   new tail = 23

;;   ======================================================
;;   -- basic block 5 from 92 to 92 -- after reload
;;   ======================================================

;;	  0-->    92 pc=L54                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 92
;;   new tail = 92

;;   ======================================================
;;   -- basic block 6 from 31 to 72 -- after reload
;;   ======================================================

;;	  0-->    31 r0=r0>>0x1                        :cortex_a8_default
;;	  2-->    36 ip=[r0*0x8+r3]                    :cortex_a8_load_store_1
;;	  2-->    33 r0=r0*0x8+r3                      :cortex_a8_default
;;	  4-->    71 cc=cmp(r1,ip)                     :cortex_a8_default
;;	  5-->    74 r3={(geu(cc,0x0))?r0:r3}          :cortex_a8_default
;;	  5-->    72 r2={(geu(cc,0x0))?r2:r0}          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 31
;;   new tail = 72

;;   ======================================================
;;   -- basic block 7 from 28 to 51 -- after reload
;;   ======================================================

;;	  0-->    28 r0=r2-r3                          :cortex_a8_default
;;	  0-->    49 ip=r2-0x8                         :cortex_a8_default
;;	  1-->    50 cc=cmp(r3,ip)                     :cortex_a8_default
;;	  2-->    29 r0=r0>>0x3                        :cortex_a8_default
;;	  3-->    30 r0=r0+0x1                         :cortex_a8_default
;;	  3-->    51 pc={(ltu(cc,0x0))?L48:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 28
;;   new tail = 51

;;   ======================================================
;;   -- basic block 8 from 53 to 53 -- after reload
;;   ======================================================

;;	  0-->    53 r2=r3                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 53

;;   ======================================================
;;   -- basic block 9 from 60 to 87 -- after reload
;;   ======================================================

;;	  0-->    60 r0=r2                             :cortex_a8_default
;;	  0-->    66 use r0                            :nothing
;;	  0-->    87 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 60
;;   new tail = 87





search_index

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,13u,1d} r1={3d,5u} r2={5d,5u,1d} r3={4d,7u,1d} r4={1d,2u} r12={3d,2u} r13={2d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 201{146d,52u,3e} in 30{29 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 3 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 3 5 2 2 arch/arm/kernel/unwind.c:107 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (reg:SI 1 r1 [ first ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ first ])
        (nil)))

(insn 2 3 84 2 arch/arm/kernel/unwind.c:107 (set (reg/v:SI 1 r1 [orig:137 addr ] [137])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ addr ])
        (nil)))

(insn/f:TI 84 2 85 2 arch/arm/kernel/unwind.c:107 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 85 84 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 85 9 2 arch/arm/kernel/unwind.c:110 (set (reg:SI 0 r0 [orig:140 <variable>.addr ] [140])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 9 8 10 2 arch/arm/kernel/unwind.c:110 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:140 <variable>.addr ] [140]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:140 <variable>.addr ] [140])
        (nil)))

(jump_insn:TI 10 9 11 2 arch/arm/kernel/unwind.c:110 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 13 11 15 3 arch/arm/kernel/unwind.c:111 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)
        (nil)))

(call_insn:TI 15 13 16 3 arch/arm/kernel/unwind.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 15 89 3 arch/arm/kernel/unwind.c:112 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 89 16 90 3 arch/arm/kernel/unwind.c:112 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 9)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 90 89 19)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 19 90 20 4 28 "" [1 uses])

(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 4 arch/arm/kernel/unwind.c:113 (set (reg:SI 0 r0 [orig:142 <variable>.addr ] [142])
        (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn:TI 22 21 23 4 arch/arm/kernel/unwind.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:142 <variable>.addr ] [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:142 <variable>.addr ] [142])
        (nil)))

(jump_insn:TI 23 22 91 4 arch/arm/kernel/unwind.c:113 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  7 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 91 23 92 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 92 91 93 5 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 93 92 48)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  7 [95.5%] 
(code_label 48 93 27 6 32 "" [1 uses])

(note 27 48 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 32 27 31 6 NOTE_INSN_DELETED)

(insn:TI 31 32 36 6 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [147])
        (ashiftrt:SI (reg:SI 0 r0 [146])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 36 31 33 6 arch/arm/kernel/unwind.c:119 (set (reg:SI 12 ip [orig:149 <variable>.addr ] [149])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [147])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 3 r3 [orig:138 first ] [138])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 36 71 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
        (plus:SI (mult:SI (reg:SI 0 r0 [147])
                (const_int 8 [0x8]))
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 270 {*arith_shiftsi} (nil))

(insn:TI 71 33 74 6 arch/arm/kernel/unwind.c:117 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 12 ip [orig:149 <variable>.addr ] [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:149 <variable>.addr ] [149])
        (nil)))

(insn:TI 74 71 72 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 240 {*movsicc_insn} (nil))

(insn 72 74 78 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [61.0%] 
;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
(code_label 78 72 75 7 34 "" [1 uses])

(note 75 78 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 75 49 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [143])
        (minus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 49 28 50 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/f:SI 12 ip [150])
        (plus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn:TI 50 49 29 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:138 first ] [138])
            (reg/f:SI 12 ip [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [150])
        (nil)))

(insn:TI 29 50 30 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [145])
        (ashiftrt:SI (reg:SI 0 r0 [143])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [143])
            (const_int 8 [0x8]))
        (nil)))

(insn:TI 30 29 51 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [146])
        (plus:SI (reg:SI 0 r0 [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 51 30 52 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  6 [95.5%] 
;; Succ edge  8 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 54 8 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (reg/v/f:SI 3 r3 [orig:138 first ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 3 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [100.0%] 
(code_label 54 53 55 9 29 "" [2 uses])

(note 55 54 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 55 66 9 arch/arm/kernel/unwind.c:126 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 2 r2 [orig:139 last ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (nil)))

(insn 66 60 86 9 arch/arm/kernel/unwind.c:126 (use (reg/i:SI 0 r0)) -1 (nil))

(note 86 66 87 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 87 86 88 9 arch/arm/kernel/unwind.c:126 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 88 87 82)

(note 82 88 83 NOTE_INSN_DELETED)

(note 83 82 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_get_byte (unwind_get_byte)[0:856]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 62 to 8 -- after reload
;;   ======================================================

;;	  0-->    62 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     6 r1=[r0+0x44]                      :cortex_a8_load_store_1
;;	  2-->     2 r3=r0                             :cortex_a8_default
;;	  3-->     7 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  5-->     8 pc={(cc>0x0)?L16:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 62
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 11 to 64 -- after reload
;;   ======================================================

;;	  0-->    11 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  1-->    12 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    13 r0=0x0                            :cortex_a8_default
;;	  2-->    64 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 11
;;   new tail = 64

;;   ======================================================
;;   -- basic block 4 from 18 to 67 -- after reload
;;   ======================================================

;;	  0-->    18 ip=[r0+0x40]                      :cortex_a8_load_store_1
;;	  1-->    19 r2=[r0+0x48]                      :cortex_a8_load_store_1
;;	  3-->    21 r4=[ip]                           :cortex_a8_load_store_1
;;	  3-->    24 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->    20 r0=r2<<0x3                        :cortex_a8_default
;;	  4-->    27 (!cc) ip=ip+0x4                   :cortex_a8_default
;;	  5-->    30 (!cc) r1=r1-0x1                   :cortex_a8_default
;;	  5-->    32 (!cc) r2=r2+0x3                   :cortex_a8_default
;;	  6-->    22 r0=r4 0>>r0                       :cortex_a8_default
;;	  6-->    38 (cc) r2=r2-0x1                    :cortex_a8_default
;;	  7-->    23 r0=r0&0xff                        :cortex_a8_default
;;	  7-->    28 (!cc) [r3+0x40]=ip                :cortex_a8_load_store_1
;;	  8-->    31 (!cc) [r3+0x44]=r1                :cortex_a8_load_store_1
;;	  9-->    33 (!cc) [r3+0x48]=r2                :cortex_a8_load_store_1
;;	 10-->    39 (cc) [r3+0x48]=r2                 :cortex_a8_load_store_1
;;	 10-->    52 use r0                            :nothing
;;	 11-->    67 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 11
;;   new head = 18
;;   new tail = 67





unwind_get_byte

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,9u} r1={4d,4u} r2={5d,8u} r3={3d,4u,3d} r4={2d,3u} r12={3d,4u,1d} r13={2d,6u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,9u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 194{141d,49u,4e} in 26{25 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 62 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 62 3 63 2 arch/arm/kernel/unwind.c:162 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 63 62 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 63 2 2 arch/arm/kernel/unwind.c:165 (set (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 2 6 7 2 arch/arm/kernel/unwind.c:162 (set (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
        (reg:SI 0 r0 [ ctrl ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 2 8 2 arch/arm/kernel/unwind.c:165 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 arch/arm/kernel/unwind.c:165 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 11 9 12 3 arch/arm/kernel/unwind.c:166 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)
        (nil)))

(call_insn:TI 12 11 13 3 arch/arm/kernel/unwind.c:166 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 12 64 3 arch/arm/kernel/unwind.c:167 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 64 13 57 3 arch/arm/kernel/unwind.c:167 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 57 64 16)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 16 57 17 4 38 "" [1 uses])

(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 19 4 arch/arm/kernel/unwind.c:170 (set (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 18 21 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 2 r2 [orig:134 D.15482 ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:137 ctrl ] [137])
        (nil)))

(insn:TI 21 19 24 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 4 r4 [142])
        (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])
        (nil)))

(insn 24 21 20 4 arch/arm/kernel/unwind.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 20 24 27 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [140])
        (ashift:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (nil))

(insn 27 20 30 4 arch/arm/kernel/unwind.c:173 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 12 ip [143])
            (plus:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
                (const_int 4 [0x4])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
        (nil)))

(insn:TI 30 27 32 4 arch/arm/kernel/unwind.c:174 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [145])
            (plus:SI (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
                (const_int -1 [0xffffffffffffffff])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
        (nil)))

(insn 32 30 22 4 arch/arm/kernel/unwind.c:175 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [146])
            (plus:SI (reg:SI 2 r2 [146])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn:TI 22 32 38 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [141])
        (lshiftrt:SI (reg:SI 4 r4 [142])
            (reg:SI 0 r0 [140]))) 117 {*arm_shiftsi3} (nil))

(insn 38 22 23 4 arch/arm/kernel/unwind.c:177 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [147])
            (plus:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
                (const_int -1 [0xffffffffffffffff])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
        (nil)))

(insn:TI 23 38 28 4 arch/arm/kernel/unwind.c:170 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (and:SI (reg:SI 0 r0 [141])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 28 23 31 4 arch/arm/kernel/unwind.c:173 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
            (reg/f:SI 12 ip [143]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg/f:SI 12 ip [143])
        (nil)))

(insn:TI 31 28 33 4 arch/arm/kernel/unwind.c:174 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
            (reg:SI 1 r1 [145]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 1 r1 [145])
        (nil)))

(insn:TI 33 31 39 4 arch/arm/kernel/unwind.c:175 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
            (reg:SI 2 r2 [146]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn:TI 39 33 52 4 arch/arm/kernel/unwind.c:177 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                    (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
            (reg:SI 2 r2 [147]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
            (expr_list:REG_DEAD (reg:SI 2 r2 [147])
                (nil)))))

(insn 52 39 67 4 arch/arm/kernel/unwind.c:180 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 67 52 66 4 arch/arm/kernel/unwind.c:180 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 66 67 60)

(note 60 66 61 NOTE_INSN_DELETED)

(note 61 60 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_frame (unwind_frame)[0:858]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 63 n_edges 92 count 126 (    2)


unwind_frame

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,43u} r1={38d,38u} r2={31d,22u,2d} r3={53d,56u,1d} r4={4d,21u,5d} r5={2d,12u,3d} r6={5d,6u} r7={3d,6u} r8={2d,4u,1d} r9={8d,16u} r10={4d,5u} r12={14d,2u} r13={3d,113u,9d} r14={13d,2u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={48d,51u} r25={13d} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} 
;;    total ref usage 2014{1583d,397u,34e} in 251{239 regular + 12 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 61 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 )->[4]->( 13 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 9 [r9]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 3 )->[5]->( 10 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 10 [sl]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 10 )->[6]->( 7 9 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 7 )->[8]->( 12 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 7 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 5 )->[10]->( 6 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 8 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 12 4 )->[13]->( 14 55 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 13 )->[14]->( 61 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 14 )->[15]->( 16 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 15 )->[16]->( 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 9 [r9]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 9 [r9]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 15 )->[17]->( 18 23 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 17 16 )->[18]->( 19 21 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 18 )->[19]->( 20 22 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 20 18 )->[21]->( 58 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 19 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 22 17 )->[23]->( 61 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 58 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 24 )->[25]->( 28 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 24 )->[26]->( 27 29 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 27 25 )->[28]->( 56 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 26 )->[29]->( 30 35 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 29 )->[30]->( 31 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 30 )->[31]->( 55 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 30 )->[32]->( 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 33 32 )->[33]->( 33 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 33 )->[34]->( 56 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 29 )->[35]->( 36 38 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 35 )->[36]->( 37 43 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 36 )->[37]->( 53 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 35 )->[38]->( 39 43 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 38 )->[39]->( 41 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 41 )->[40]->( 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 40 39 )->[41]->( 40 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 41 )->[42]->( 56 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 38 36 )->[43]->( 44 45 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 43 )->[44]->( 56 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 43 )->[45]->( 46 51 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 45 )->[46]->( 48 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 46 )->[47]->( 48 49 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 46 47 )->[48]->( 55 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 49 47 )->[49]->( 49 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 49 )->[50]->( 53 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 45 )->[51]->( 52 54 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 51 )->[52]->( 53 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 52 37 50 )->[53]->( 56 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 51 )->[54]->( 55 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 54 13 31 48 )->[55]->( 61 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 44 34 42 28 53 )->[56]->( 61 57 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 56 )->[57]->( 61 58 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 57 21 )->[58]->( 24 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 58 )->[59]->( 61 60 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 59 )->[60]->( 62 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 2 56 14 59 57 23 55 )->[61]->( 62 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 61 60 )->[62]->( 1 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 62 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 553 to worklist
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 613 to worklist
  Adding insn 30 to worklist
  Adding insn 615 to worklist
  Adding insn 38 to worklist
  Adding insn 47 to worklist
  Adding insn 51 to worklist
  Adding insn 617 to worklist
  Adding insn 71 to worklist
  Adding insn 69 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 58 to worklist
  Adding insn 84 to worklist
  Adding insn 92 to worklist
  Adding insn 96 to worklist
  Adding insn 117 to worklist
  Adding insn 114 to worklist
  Adding insn 112 to worklist
  Adding insn 110 to worklist
  Adding insn 108 to worklist
  Adding insn 121 to worklist
  Adding insn 619 to worklist
  Adding insn 127 to worklist
  Adding insn 134 to worklist
  Adding insn 137 to worklist
  Adding insn 156 to worklist
  Adding insn 159 to worklist
  Adding insn 167 to worklist
  Adding insn 170 to worklist
  Adding insn 621 to worklist
  Adding insn 176 to worklist
  Adding insn 623 to worklist
  Adding insn 185 to worklist
  Adding insn 196 to worklist
  Adding insn 192 to worklist
  Adding insn 625 to worklist
  Adding insn 209 to worklist
  Adding insn 627 to worklist
  Adding insn 216 to worklist
  Adding insn 223 to worklist
  Adding insn 235 to worklist
  Adding insn 229 to worklist
  Adding insn 629 to worklist
  Adding insn 263 to worklist
  Adding insn 255 to worklist
  Adding insn 631 to worklist
  Adding insn 268 to worklist
  Adding insn 274 to worklist
  Adding insn 278 to worklist
  Adding insn 633 to worklist
  Adding insn 292 to worklist
  Adding insn 635 to worklist
  Adding insn 302 to worklist
  Adding insn 312 to worklist
  Adding insn 637 to worklist
  Adding insn 324 to worklist
  Adding insn 320 to worklist
  Adding insn 330 to worklist
  Adding insn 639 to worklist
  Adding insn 341 to worklist
  Adding insn 337 to worklist
  Adding insn 347 to worklist
  Adding insn 355 to worklist
  Adding insn 351 to worklist
  Adding insn 359 to worklist
  Adding insn 641 to worklist
  Adding insn 389 to worklist
  Adding insn 381 to worklist
  Adding insn 644 to worklist
  Adding insn 397 to worklist
  Adding insn 401 to worklist
  Adding insn 646 to worklist
  Adding insn 407 to worklist
  Adding insn 648 to worklist
  Adding insn 415 to worklist
  Adding insn 423 to worklist
  Adding insn 426 to worklist
  Adding insn 432 to worklist
  Adding insn 445 to worklist
  Adding insn 439 to worklist
  Adding insn 650 to worklist
  Adding insn 452 to worklist
  Adding insn 450 to worklist
  Adding insn 448 to worklist
  Adding insn 454 to worklist
  Adding insn 557 to worklist
  Adding insn 473 to worklist
Finished finding needed instructions:
processing block 62 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 61 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 460 to worklist
processing block 57 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 425 to worklist
processing block 56 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 422 to worklist
  Adding insn 421 to worklist
processing block 28 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 25 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 202 to worklist
  Adding insn 199 to worklist
  Adding insn 549 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
processing block 27 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 215 to worklist
  Adding insn 212 to worklist
  Adding insn 548 to worklist
  Adding insn 214 to worklist
  Adding insn 213 to worklist
processing block 55 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 31 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 238 to worklist
processing block 34 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 265 to worklist
processing block 33 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 260 to worklist
  Adding insn 262 to worklist
  Adding insn 254 to worklist
  Adding insn 251 to worklist
processing block 32 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 248 to worklist
  Adding insn 247 to worklist
processing block 30 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 234 to worklist
  Adding insn 232 to worklist
  Adding insn 231 to worklist
  Adding insn 225 to worklist
  Adding insn 226 to worklist
  Adding insn 228 to worklist
processing block 53 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 37 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 285 to worklist
  Adding insn 283 to worklist
  Adding insn 552 to worklist
  Adding insn 280 to worklist
processing block 44 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 336 to worklist
  Adding insn 333 to worklist
  Adding insn 332 to worklist
processing block 48 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 364 to worklist
  Adding insn 365 to worklist
processing block 50 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 49 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 386 to worklist
  Adding insn 388 to worklist
  Adding insn 380 to worklist
  Adding insn 376 to worklist
processing block 47 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 358 to worklist
processing block 46 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 354 to worklist
  Adding insn 353 to worklist
  Adding insn 350 to worklist
processing block 52 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 406 to worklist
  Adding insn 404 to worklist
  Adding insn 403 to worklist
  Adding insn 400 to worklist
processing block 54 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 413 to worklist
processing block 51 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 396 to worklist
processing block 45 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 346 to worklist
processing block 43 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 329 to worklist
processing block 36 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 277 to worklist
  Adding insn 276 to worklist
processing block 40 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 303 to worklist
  Adding insn 301 to worklist
processing block 42 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 321 to worklist
  Adding insn 319 to worklist
  Adding insn 314 to worklist
  Adding insn 316 to worklist
processing block 41 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 307 to worklist
  Adding insn 311 to worklist
processing block 39 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 492 to worklist
  Adding insn 310 to worklist
  Adding insn 294 to worklist
  Adding insn 309 to worklist
processing block 38 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 291 to worklist
processing block 35 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 273 to worklist
processing block 29 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 222 to worklist
  Adding insn 221 to worklist
processing block 26 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 208 to worklist
processing block 24 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 195 to worklist
  Adding insn 193 to worklist
  Adding insn 191 to worklist
processing block 60 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 451 to worklist
  Adding insn 449 to worklist
  Adding insn 455 to worklist
  Adding insn 447 to worklist
processing block 59 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 444 to worklist
  Adding insn 443 to worklist
  Adding insn 442 to worklist
  Adding insn 438 to worklist
  Adding insn 435 to worklist
  Adding insn 434 to worklist
processing block 58 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 431 to worklist
  Adding insn 430 to worklist
processing block 21 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 340 to worklist
  Adding insn 190 to worklist
processing block 20 lr out =  3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 175 to worklist
  Adding insn 174 to worklist
  Adding insn 169 to worklist
processing block 23 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
processing block 22 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 182 to worklist
processing block 19 lr out =  1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 166 to worklist
processing block 18 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 160 to worklist
  Adding insn 158 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 152 to worklist
processing block 16 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
processing block 17 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 143 to worklist
  Adding insn 145 to worklist
  Adding insn 136 to worklist
  Adding insn 133 to worklist
  Adding insn 132 to worklist
processing block 15 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 120 to worklist
processing block 14 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 550 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 107 to worklist
processing block 13 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 99 to worklist
  Adding insn 100 to worklist
  Adding insn 95 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 31 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
processing block 12 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 90 to worklist
  Adding insn 91 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 65 to worklist
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
processing block 9 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 76 to worklist
processing block 7 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 50 to worklist
  Adding insn 49 to worklist
processing block 6 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 46 to worklist
  Adding insn 45 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 86 to worklist
processing block 10 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 494 to worklist
  Adding insn 83 to worklist
processing block 5 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 41 to worklist
  Adding insn 82 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
  Adding insn 37 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 22 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 15 to worklist
  Adding insn 546 to worklist
  Adding insn 545 to worklist
  Adding insn 9 to worklist
  Adding insn 8 to worklist
  Adding insn 12 to worklist
  Adding insn 7 to worklist
  Adding insn 3 to worklist
  Adding insn 554 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 63 n_edges 92 count 132 (  2.1)
;;   ======================================================
;;   -- basic block 2 from 553 to 16 -- after reload
;;   ======================================================

;;	  0-->   553 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     3 r5=r0                             :cortex_a8_default
;;	  2-->     7 r8=[r0+0x4]                       :cortex_a8_load_store_1
;;	  2-->   554 sp=sp-0x50                        :cortex_a8_default
;;	  3-->    12 r0=[r0+0xc]                       :cortex_a8_load_store_1
;;	  4-->    13 r0=call [`kernel_text_address']   :cortex_a8_issue_branch
;;	  4-->     8 r6=r8+0x1fc0                      :cortex_a8_default
;;	  5-->     9 r6=r6+0x3f                        :cortex_a8_default
;;	  6-->   545 r6=r6&0xffffffffffffe03f          :cortex_a8_default
;;	  7-->   546 r6=r6&0xffffffffffffffc0          :cortex_a8_default
;;	 36-->    15 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 38-->    16 pc={(cc==0x0)?L458:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 553
;;   new tail = 16

;;   ======================================================
;;   -- basic block 3 from 18 to 23 -- after reload
;;   ======================================================

;;	  0-->    18 r9=[r5+0xc]                       :cortex_a8_load_store_1
;;	  2-->    19 r0=r9                             :cortex_a8_default
;;	  3-->    20 r0=call [`core_kernel_text']      :cortex_a8_issue_branch
;;	 35-->    22 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 37-->    23 pc={(cc==0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 18
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 27 to 613 -- after reload
;;   ======================================================

;;	  0-->    27 r0=r9                             :cortex_a8_default
;;	  0-->    28 r1=`__start_unwind_idx'           :cortex_a8_load_store_1
;;	  1-->    29 r2=const(`__stop_unwind_idx'-0x8) :cortex_a8_load_store_1
;;	  2-->    30 r0=call [`search_index']          :cortex_a8_issue_branch
;;	 34-->    31 r9=r0                             :cortex_a8_default
;;	 34-->   613 pc=L93                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 34
;;   new head = 27
;;   new tail = 613

;;   ======================================================
;;   -- basic block 5 from 37 to 615 -- after reload
;;   ======================================================

;;	  0-->    37 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    38 r0=call [`_raw_spin_lock_irqsave']:cortex_a8_issue_branch
;;	  1-->    40 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->    82 r2=r3                             :cortex_a8_default
;;	  4-->    41 r4=[r3]                           :cortex_a8_load_store_1
;;	 33-->    39 sl=r0                             :cortex_a8_default
;;	 33-->   615 pc=L78                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 33
;;   new head = 37
;;   new tail = 615

;;   ======================================================
;;   -- basic block 6 from 45 to 47 -- after reload
;;   ======================================================

;;	  0-->    45 r3=[r4+0x10]                      :cortex_a8_load_store_1
;;	  2-->    46 cc=cmp(r9,r3)                     :cortex_a8_default
;;	  4-->    47 pc={(ltu(cc,0x0))?L74:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 45
;;   new tail = 47

;;   ======================================================
;;   -- basic block 7 from 49 to 51 -- after reload
;;   ======================================================

;;	  0-->    49 r3=[r4+0x14]                      :cortex_a8_load_store_1
;;	  2-->    50 cc=cmp(r9,r3)                     :cortex_a8_default
;;	  4-->    51 pc={(geu(cc,0x0))?L74:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 49
;;   new tail = 51

;;   ======================================================
;;   -- basic block 8 from 53 to 617 -- after reload
;;   ======================================================

;;	  0-->    53 r2=[r4+0xc]                       :cortex_a8_load_store_1
;;	  0-->    55 r0=r9                             :cortex_a8_default
;;	  1-->    56 r1=[r4+0x8]                       :cortex_a8_load_store_1
;;	  2-->    57 r2=r2-0x8                         :cortex_a8_default
;;	  3-->    58 r0=call [`search_index']          :cortex_a8_issue_branch
;;	  3-->    60 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  4-->    61 r2=[r4]                           :cortex_a8_load_store_1
;;	  7-->    62 [r2+0x4]=r3                       :cortex_a8_load_store_1
;;	  8-->    63 [r3]=r2                           :cortex_a8_load_store_1
;;	  9-->    65 r3=[r7]                           :cortex_a8_load_store_1
;;	 12-->    66 [r3+0x4]=r4                       :cortex_a8_load_store_1
;;	 13-->    67 [r4]=r3                           :cortex_a8_load_store_1
;;	 14-->    69 [r4+0x4]=r7                       :cortex_a8_load_store_1
;;	 15-->    71 [r7]=r4                           :cortex_a8_load_store_1
;;	 35-->    59 r9=r0                             :cortex_a8_default
;;	 35-->   617 pc=L87                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 35
;;   new head = 53
;;   new tail = 617

;;   ======================================================
;;   -- basic block 9 from 76 to 76 -- after reload
;;   ======================================================

;;	  0-->    76 r4=[r4]                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 76
;;   new tail = 76

;;   ======================================================
;;   -- basic block 10 from 83 to 84 -- after reload
;;   ======================================================

;;	  0-->    83 cc=cmp(r4,r2)                     :cortex_a8_default
;;	  0-->   494 r7=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  2-->    84 pc={(cc!=0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 83
;;   new tail = 84

;;   ======================================================
;;   -- basic block 11 from 86 to 86 -- after reload
;;   ======================================================

;;	  0-->    86 r9=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 86
;;   new tail = 86

;;   ======================================================
;;   -- basic block 12 from 91 to 92 -- after reload
;;   ======================================================

;;	  0-->    91 r1=sl                             :cortex_a8_default
;;	  0-->    90 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    92 call [`_raw_spin_unlock_irqrestore:cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 91
;;   new tail = 92

;;   ======================================================
;;   -- basic block 13 from 95 to 96 -- after reload
;;   ======================================================

;;	  0-->    95 cc=cmp(r9,0x0)                    :cortex_a8_default
;;	  2-->   100 (!cc) r1=[r5+0xc]                 :cortex_a8_load_store_1
;;	  3-->    99 (!cc) r0=`*.LC2'                  :cortex_a8_load_store_1
;;	  3-->    96 pc={(cc==0x0)?L597:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 95
;;   new tail = 96

;;   ======================================================
;;   -- basic block 14 from 107 to 117 -- after reload
;;   ======================================================

;;	  0-->   107 r1=[r5]                           :cortex_a8_load_store_1
;;	  1-->   111 r3=[r5+0x8]                       :cortex_a8_load_store_1
;;	  2-->   109 r2=[r5+0x4]                       :cortex_a8_load_store_1
;;	  3-->   108 [sp+0x30]=r1                      :cortex_a8_load_store_1
;;	  4-->   112 [sp+0x3c]=r3                      :cortex_a8_load_store_1
;;	  4-->   550 r3=0x0                            :cortex_a8_default
;;	  5-->   110 [sp+0x38]=r2                      :cortex_a8_load_store_1
;;	  6-->   114 [sp+0x40]=r3                      :cortex_a8_load_store_1
;;	  7-->   115 r1=[r9+0x4]                       :cortex_a8_load_store_1
;;	  9-->   116 cc=cmp(r1,0x1)                    :cortex_a8_default
;;	 11-->   117 pc={(cc==0x0)?L458:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 107
;;   new tail = 117

;;   ======================================================
;;   -- basic block 15 from 120 to 121 -- after reload
;;   ======================================================

;;	  0-->   120 cc=cmp(r1,r3)                     :cortex_a8_default
;;	  2-->   121 pc={(cc<0x0)?L130:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 120
;;   new tail = 121

;;   ======================================================
;;   -- basic block 16 from 124 to 619 -- after reload
;;   ======================================================

;;	  0-->   124 r1=sxt(r1,0x1f,0x0)               :cortex_a8_default
;;	  0-->   125 r9=r9+0x4                         :cortex_a8_default
;;	  1-->   126 r1=r1+r9                          :cortex_a8_default
;;	  1-->   127 [sp+0x44]=r1                      :cortex_a8_load_store_1
;;	  2-->   619 pc=L150                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 124
;;   new tail = 619

;;   ======================================================
;;   -- basic block 17 from 132 to 134 -- after reload
;;   ======================================================

;;	  0-->   132 r3=r1&0xffffffffff000000          :cortex_a8_default
;;	  1-->   133 cc=cmp(r3,0xffffffff80000000)     :cortex_a8_default
;;	  2-->   136 (!cc) r9=r9+0x4                   :cortex_a8_default
;;	  2-->   145 (cc) r2=r9                        :cortex_a8_default
;;	  3-->   137 (!cc) [sp+0x44]=r9                :cortex_a8_load_store_1
;;	  4-->   143 (cc) r0=`*.LC3'                   :cortex_a8_load_store_1
;;	  4-->   134 pc={(cc!=0x0)?L608:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 132
;;   new tail = 134

;;   ======================================================
;;   -- basic block 18 from 152 to 156 -- after reload
;;   ======================================================

;;	  0-->   152 r2=[sp+0x44]                      :cortex_a8_load_store_1
;;	  3-->   153 r1=[r2]                           :cortex_a8_load_store_1
;;	  5-->   154 r3=r1&0xffffffffff000000          :cortex_a8_default
;;	  6-->   155 cc=cmp(r3,0xffffffff80000000)     :cortex_a8_default
;;	  7-->   158 (!cc) r3=r3-0x7ffffffe            :cortex_a8_default
;;	  7-->   159 (!cc) [sp+0x4c]=r3                :cortex_a8_load_store_1
;;	  8-->   160 (!cc) r3=0x1                      :cortex_a8_default
;;	  8-->   156 pc={(cc==0x0)?L574:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 152
;;   new tail = 156

;;   ======================================================
;;   -- basic block 19 from 166 to 167 -- after reload
;;   ======================================================

;;	  0-->   166 cc=cmp(r3,0xffffffff81000000)     :cortex_a8_default
;;	  2-->   167 pc={(cc!=0x0)?L179:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 166
;;   new tail = 167

;;   ======================================================
;;   -- basic block 20 from 169 to 175 -- after reload
;;   ======================================================

;;	  0-->   169 r3=0x1                            :cortex_a8_default
;;	  0-->   170 [sp+0x4c]=r3                      :cortex_a8_load_store_1
;;	  1-->   174 r3=zxn([r2+0x2])                  :cortex_a8_load_store_1
;;	  3-->   175 r3=r3+0x1                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 169
;;   new tail = 175

;;   ======================================================
;;   -- basic block 21 from 176 to 621 -- after reload
;;   ======================================================

;;	  0-->   176 [sp+0x48]=r3                      :cortex_a8_load_store_1
;;	  0-->   190 r4=sp+0x4                         :cortex_a8_default
;;	  1-->   340 r7=0x0                            :cortex_a8_default
;;	  1-->   621 pc=L539                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 176
;;   new tail = 621

;;   ======================================================
;;   -- basic block 22 from 182 to 182 -- after reload
;;   ======================================================

;;	  0-->   182 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 182
;;   new tail = 182

;;   ======================================================
;;   -- basic block 23 from 185 to 623 -- after reload
;;   ======================================================

;;	  0-->   185 r0=call [`printk']                :cortex_a8_issue_branch
;;	  0-->   623 pc=L458                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 185
;;   new tail = 623

;;   ======================================================
;;   -- basic block 24 from 191 to 196 -- after reload
;;   ======================================================

;;	  0-->   191 r0=r4                             :cortex_a8_default
;;	  1-->   192 r0=call [`unwind_get_byte']       :cortex_a8_issue_branch
;;	 33-->   195 {cc=cmp(r0&0xc0,0x0);r3=r0&0xc0;} :cortex_a8_default
;;	 33-->   193 r1=r0                             :cortex_a8_default
;;	 35-->   196 pc={(cc!=0x0)?L206:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 191
;;   new tail = 196

;;   ======================================================
;;   -- basic block 25 from 200 to 625 -- after reload
;;   ======================================================

;;	  0-->   549 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	  0-->   200 r1=r0<<0x2                        :cortex_a8_default
;;	  1-->   201 r1=r1&0xff                        :cortex_a8_default
;;	  2-->   199 r3=r3+0x4                         :cortex_a8_default
;;	  3-->   202 r1=r3+r1                          :cortex_a8_default
;;	  3-->   625 pc=L566                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 200
;;   new tail = 625

;;   ======================================================
;;   -- basic block 26 from 208 to 209 -- after reload
;;   ======================================================

;;	  0-->   208 cc=cmp(r3,0x40)                   :cortex_a8_default
;;	  2-->   209 pc={(cc!=0x0)?L219:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 208
;;   new tail = 209

;;   ======================================================
;;   -- basic block 27 from 213 to 215 -- after reload
;;   ======================================================

;;	  0-->   548 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	  0-->   213 r1=r0<<0x2                        :cortex_a8_default
;;	  1-->   214 r1=r1&0xff                        :cortex_a8_default
;;	  2-->   212 r3=r3-0x4                         :cortex_a8_default
;;	  3-->   215 r1=r3-r1                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 213
;;   new tail = 215

;;   ======================================================
;;   -- basic block 28 from 216 to 627 -- after reload
;;   ======================================================

;;	  0-->   216 [sp+0x38]=r1                      :cortex_a8_load_store_1
;;	  0-->   627 pc=L419                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 216
;;   new tail = 627

;;   ======================================================
;;   -- basic block 29 from 221 to 223 -- after reload
;;   ======================================================

;;	  0-->   221 r3=r0&0xf0                        :cortex_a8_default
;;	  1-->   222 cc=cmp(r3,0x80)                   :cortex_a8_default
;;	  3-->   223 pc={(cc!=0x0)?L271:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 221
;;   new tail = 223

;;   ======================================================
;;   -- basic block 30 from 228 to 235 -- after reload
;;   ======================================================

;;	  0-->   228 r0=r4                             :cortex_a8_default
;;	  0-->   226 r9=r1<<0x8                        :cortex_a8_default
;;	  1-->   225 sl=[sp+0x38]                      :cortex_a8_load_store_1
;;	  1-->   229 r0=call [`unwind_get_byte']       :cortex_a8_issue_branch
;;	 33-->   231 r1=r0|r9                          :cortex_a8_default
;;	 35-->   232 r3=r1<<0x14                       :cortex_a8_default
;;	 37-->   234 {cc=cmp(r3 0>>0x14,0x0);r3=r3 0>>0:cortex_a8_default
;;	 39-->   235 pc={(cc!=0x0)?L244:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 228
;;   new tail = 235

;;   ======================================================
;;   -- basic block 31 from 238 to 629 -- after reload
;;   ======================================================

;;	  0-->   238 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  0-->   629 pc=L597                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 238
;;   new tail = 629

;;   ======================================================
;;   -- basic block 32 from 247 to 248 -- after reload
;;   ======================================================

;;	  0-->   247 r1=r1&0x200                       :cortex_a8_default
;;	  0-->   248 r2=r4                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 247
;;   new tail = 248

;;   ======================================================
;;   -- basic block 33 from 251 to 263 -- after reload
;;   ======================================================

;;	  0-->   251 cc=cmp(zxt(r3,0x1,0x0),0x0)       :cortex_a8_default
;;	  2-->   254 (cc) r0=[sl++]                    :cortex_a8_load_store_1
;;	  5-->   255 (cc) [r2+0x10]=r0                 :cortex_a8_load_store_1
;;	  5-->   262 {cc=cmp(r3 0>>0x1,0x0);r3=r3 0>>0x:cortex_a8_default
;;	  6-->   260 r2=r2+0x4                         :cortex_a8_default
;;	  7-->   263 pc={(cc!=0x0)?L261:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 251
;;   new tail = 263

;;   ======================================================
;;   -- basic block 34 from 265 to 631 -- after reload
;;   ======================================================

;;	  0-->   265 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  0-->   268 (!cc) [sp+0x38]=sl                :cortex_a8_load_store_1
;;	  1-->   631 pc=L419                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 265
;;   new tail = 631

;;   ======================================================
;;   -- basic block 35 from 273 to 274 -- after reload
;;   ======================================================

;;	  0-->   273 cc=cmp(r3,0x90)                   :cortex_a8_default
;;	  2-->   274 pc={(cc!=0x0)?L289:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 273
;;   new tail = 274

;;   ======================================================
;;   -- basic block 36 from 276 to 278 -- after reload
;;   ======================================================

;;	  0-->   276 r3=r0&0xd                         :cortex_a8_default
;;	  1-->   277 cc=cmp(r3,0xd)                    :cortex_a8_default
;;	  3-->   278 pc={(cc==0x0)?L327:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 276
;;   new tail = 278

;;   ======================================================
;;   -- basic block 37 from 280 to 633 -- after reload
;;   ======================================================

;;	  0-->   280 r1=r0&0xf                         :cortex_a8_default
;;	  0-->   552 r3=sp+0x50                        :cortex_a8_default
;;	  2-->   283 r1=r1*0x4+r3                      :cortex_a8_default
;;	  4-->   285 r3=[r1-0x4c]                      :cortex_a8_load_store_1
;;	  4-->   633 pc=L561                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 280
;;   new tail = 633

;;   ======================================================
;;   -- basic block 38 from 291 to 292 -- after reload
;;   ======================================================

;;	  0-->   291 cc=cmp(r3,0xa0)                   :cortex_a8_default
;;	  2-->   292 pc={(cc!=0x0)?L327:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 291
;;   new tail = 292

;;   ======================================================
;;   -- basic block 39 from 309 to 635 -- after reload
;;   ======================================================

;;	  0-->   309 r0=r0&0x7                         :cortex_a8_default
;;	  0-->   294 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	  1-->   310 r0=r0+0x4                         :cortex_a8_default
;;	  1-->   492 r2=0x4                            :cortex_a8_default
;;	  2-->   635 pc=L304                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 309
;;   new tail = 635

;;   ======================================================
;;   -- basic block 40 from 301 to 303 -- after reload
;;   ======================================================

;;	  0-->   301 ip=[r3-0x4]                       :cortex_a8_load_store_1
;;	  3-->   302 [r2*0x4+r4]=ip                    :cortex_a8_load_store_1
;;	  3-->   303 r2=r2+0x1                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 301
;;   new tail = 303

;;   ======================================================
;;   -- basic block 41 from 311 to 312 -- after reload
;;   ======================================================

;;	  0-->   311 cc=cmp(r2,r0)                     :cortex_a8_default
;;	  0-->   307 r3=r3+0x4                         :cortex_a8_default
;;	  2-->   312 pc={(leu(cc,0x0))?L308:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 311
;;   new tail = 312

;;   ======================================================
;;   -- basic block 42 from 316 to 637 -- after reload
;;   ======================================================

;;	  0-->   316 cc=cmp(zxt(r1,0x1,0x7),0x0)       :cortex_a8_default
;;	  0-->   314 r2=r3-0x4                         :cortex_a8_default
;;	  1-->   321 (cc) r2=r3                        :cortex_a8_default
;;	  2-->   319 (cc) r1=[r3-0x4]                  :cortex_a8_load_store_1
;;	  3-->   324 [sp+0x38]=r2                      :cortex_a8_load_store_1
;;	  5-->   320 (cc) [sp+0x3c]=r1                 :cortex_a8_load_store_1
;;	  5-->   637 pc=L419                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 316
;;   new tail = 637

;;   ======================================================
;;   -- basic block 43 from 329 to 330 -- after reload
;;   ======================================================

;;	  0-->   329 cc=cmp(r1,0xb0)                   :cortex_a8_default
;;	  2-->   330 pc={(cc!=0x0)?L344:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 329
;;   new tail = 330

;;   ======================================================
;;   -- basic block 44 from 332 to 639 -- after reload
;;   ======================================================

;;	  0-->   332 r3=[sp+0x40]                      :cortex_a8_load_store_1
;;	  1-->   341 [sp+0x48]=r7                      :cortex_a8_load_store_1
;;	  2-->   333 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   336 (!cc) r3=[sp+0x3c]                :cortex_a8_load_store_1
;;	  7-->   337 (!cc) [sp+0x40]=r3                :cortex_a8_load_store_1
;;	  7-->   639 pc=L419                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 332
;;   new tail = 639

;;   ======================================================
;;   -- basic block 45 from 346 to 347 -- after reload
;;   ======================================================

;;	  0-->   346 cc=cmp(r1,0xb1)                   :cortex_a8_default
;;	  2-->   347 pc={(cc!=0x0)?L394:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 346
;;   new tail = 347

;;   ======================================================
;;   -- basic block 46 from 350 to 355 -- after reload
;;   ======================================================

;;	  0-->   350 r0=r4                             :cortex_a8_default
;;	  1-->   351 r0=call [`unwind_get_byte']       :cortex_a8_issue_branch
;;	  1-->   353 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	 33-->   354 {cc=cmp(r0,0x0);r1=r0;}           :cortex_a8_default
;;	 35-->   355 pc={(cc==0x0)?L360:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 350
;;   new tail = 355

;;   ======================================================
;;   -- basic block 47 from 358 to 359 -- after reload
;;   ======================================================

;;	  0-->   358 {cc=cmp(r1&0xf0,0x0);r2=r1&0xf0;} :cortex_a8_default
;;	  2-->   359 pc={(cc==0x0)?L387:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 358
;;   new tail = 359

;;   ======================================================
;;   -- basic block 48 from 365 to 641 -- after reload
;;   ======================================================

;;	  0-->   365 r1=r1|0xb100                      :cortex_a8_default
;;	  0-->   364 r0=`*.LC6'                        :cortex_a8_load_store_1
;;	  1-->   641 pc=L597                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 365
;;   new tail = 641

;;   ======================================================
;;   -- basic block 49 from 376 to 389 -- after reload
;;   ======================================================

;;	  0-->   376 cc=cmp(zxt(r1,0x1,0x0),0x0)       :cortex_a8_default
;;	  2-->   380 (cc) r0=[r3++]                    :cortex_a8_load_store_1
;;	  5-->   381 (cc) [r4+r2]=r0                   :cortex_a8_load_store_1
;;	  5-->   388 {cc=cmp(r1 0>>0x1,0x0);r1=r1 0>>0x:cortex_a8_default
;;	  6-->   386 r2=r2+0x4                         :cortex_a8_default
;;	  7-->   389 pc={(cc!=0x0)?L387:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 376
;;   new tail = 389

;;   ======================================================
;;   -- basic block 50 from 644 to 644 -- after reload
;;   ======================================================

;;	  0-->   644 pc=L561                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 644
;;   new tail = 644

;;   ======================================================
;;   -- basic block 51 from 396 to 397 -- after reload
;;   ======================================================

;;	  0-->   396 cc=cmp(r1,0xb2)                   :cortex_a8_default
;;	  2-->   397 pc={(cc!=0x0)?L410:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 396
;;   new tail = 397

;;   ======================================================
;;   -- basic block 52 from 400 to 406 -- after reload
;;   ======================================================

;;	  0-->   400 r0=r4                             :cortex_a8_default
;;	  1-->   401 r0=call [`unwind_get_byte']       :cortex_a8_issue_branch
;;	  1-->   403 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	  3-->   404 r3=r3+0x204                       :cortex_a8_default
;;	 33-->   406 r3=r0*0x4+r3                      :cortex_a8_default
;;	Ready list (final):  
;;   total time = 33
;;   new head = 400
;;   new tail = 406

;;   ======================================================
;;   -- basic block 53 from 407 to 646 -- after reload
;;   ======================================================

;;	  0-->   407 [sp+0x38]=r3                      :cortex_a8_load_store_1
;;	  0-->   646 pc=L419                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 407
;;   new tail = 646

;;   ======================================================
;;   -- basic block 54 from 413 to 413 -- after reload
;;   ======================================================

;;	  0-->   413 r0=`*.LC7'                        :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 413
;;   new tail = 413

;;   ======================================================
;;   -- basic block 55 from 415 to 648 -- after reload
;;   ======================================================

;;	  0-->   415 r0=call [`printk']                :cortex_a8_issue_branch
;;	  0-->   648 pc=L458                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 415
;;   new tail = 648

;;   ======================================================
;;   -- basic block 56 from 421 to 423 -- after reload
;;   ======================================================

;;	  0-->   421 r3=[sp+0x38]                      :cortex_a8_load_store_1
;;	  2-->   422 cc=cmp(r3,r8)                     :cortex_a8_default
;;	  4-->   423 pc={(ltu(cc,0x0))?L458:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 421
;;   new tail = 423

;;   ======================================================
;;   -- basic block 57 from 425 to 426 -- after reload
;;   ======================================================

;;	  0-->   425 cc=cmp(r3,r6)                     :cortex_a8_default
;;	  2-->   426 pc={(geu(cc,0x0))?L458:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 425
;;   new tail = 426

;;   ======================================================
;;   -- basic block 58 from 430 to 432 -- after reload
;;   ======================================================

;;	  0-->   430 r3=[sp+0x48]                      :cortex_a8_load_store_1
;;	  2-->   431 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   432 pc={(cc>0x0)?L429:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 430
;;   new tail = 432

;;   ======================================================
;;   -- basic block 59 from 434 to 445 -- after reload
;;   ======================================================

;;	  0-->   434 r3=[sp+0x40]                      :cortex_a8_load_store_1
;;	  2-->   435 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   438 (!cc) r3=[sp+0x3c]                :cortex_a8_load_store_1
;;	  7-->   439 (!cc) [sp+0x40]=r3                :cortex_a8_load_store_1
;;	  8-->   442 r2=[r5+0xc]                       :cortex_a8_load_store_1
;;	  9-->   443 r3=[sp+0x40]                      :cortex_a8_load_store_1
;;	 11-->   444 cc=cmp(r2,r3)                     :cortex_a8_default
;;	 13-->   445 pc={(cc==0x0)?L458:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 13
;;   new head = 434
;;   new tail = 445

;;   ======================================================
;;   -- basic block 60 from 447 to 650 -- after reload
;;   ======================================================

;;	  0-->   447 ip=[sp+0x30]                      :cortex_a8_load_store_1
;;	  0-->   455 r0=0x0                            :cortex_a8_default
;;	  1-->   449 r1=[sp+0x38]                      :cortex_a8_load_store_1
;;	  2-->   451 r2=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  3-->   454 [r5+0xc]=r3                       :cortex_a8_load_store_1
;;	  4-->   448 [r5]=ip                           :cortex_a8_load_store_1
;;	  5-->   450 [r5+0x4]=r1                       :cortex_a8_load_store_1
;;	  6-->   452 [r5+0x8]=r2                       :cortex_a8_load_store_1
;;	  6-->   650 pc=L461                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 447
;;   new tail = 650

;;   ======================================================
;;   -- basic block 61 from 460 to 460 -- after reload
;;   ======================================================

;;	  0-->   460 r0=0xfffffffffffffff7             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 460
;;   new tail = 460

;;   ======================================================
;;   -- basic block 62 from 473 to 557 -- after reload
;;   ======================================================

;;	  0-->   473 use r0                            :nothing
;;	  0-->   557 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 473
;;   new tail = 557





unwind_frame

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={35d,43u} r1={38d,38u} r2={31d,22u,2d} r3={53d,56u,1d} r4={4d,21u,5d} r5={2d,12u,3d} r6={5d,6u} r7={3d,6u} r8={2d,4u,1d} r9={8d,16u} r10={4d,5u} r12={14d,2u} r13={3d,113u,9d} r14={13d,2u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={48d,51u} r25={13d} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} 
;;    total ref usage 2014{1583d,397u,34e} in 251{239 regular + 12 call} insns.
(note 2 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 14 2 NOTE_INSN_DELETED)

(note 14 10 553 2 NOTE_INSN_DELETED)

(insn/f:TI 553 14 3 2 arch/arm/kernel/unwind.c:275 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -32 [0xffffffffffffffe0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 8 r8))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 9 r9))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 24 [0x18])) [0 S4 A32])
                                    (reg:SI 10 sl))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 28 [0x1c])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn:TI 3 553 7 2 arch/arm/kernel/unwind.c:275 (set (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
        (reg:SI 0 r0 [ frame ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 7 3 554 2 arch/arm/kernel/unwind.c:281 (set (reg/v:SI 8 r8 [orig:165 low ] [165])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn/f 554 7 555 2 arch/arm/kernel/unwind.c:275 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -80 [0xffffffffffffffb0]))) 4 {*arm_addsi3} (nil))

(note 555 554 12 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 12 555 13 2 arch/arm/kernel/unwind.c:287 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 13 12 8 2 arch/arm/kernel/unwind.c:287 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 8 13 9 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [177])
        (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8128 [0x1fc0]))) 4 {*arm_addsi3} (nil))

(insn:TI 9 8 545 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [176])
        (plus:SI (reg:SI 6 r6 [177])
            (const_int 63 [0x3f]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8191 [0x1fff]))
        (nil)))

(insn:TI 545 9 546 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg:SI 6 r6 [176])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 546 545 15 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg/v:SI 6 r6 [orig:166 high ] [166])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 15 546 16 2 arch/arm/kernel/unwind.c:287 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 16 15 17 2 arch/arm/kernel/unwind.c:287 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 2 -> ( 61 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 17 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 17 18 3 NOTE_INSN_DELETED)

(insn:TI 18 21 19 3 arch/arm/kernel/unwind.c:290 (set (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 18 20 3 arch/arm/kernel/unwind.c:135 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 20 19 22 3 arch/arm/kernel/unwind.c:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("core_kernel_text") [flags 0x41] <function_decl 0x10a58180 core_kernel_text>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 22 20 23 3 arch/arm/kernel/unwind.c:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 23 22 24 3 arch/arm/kernel/unwind.c:135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%]  (fallthru)
(note 24 23 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 24 28 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (nil)))

(insn 28 27 29 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(insn:TI 29 28 30 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))
        (nil)))

(call_insn:TI 30 29 31 4 arch/arm/kernel/unwind.c:137 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 31 30 613 4 arch/arm/kernel/unwind.c:137 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 613 31 614 4 (set (pc)
        (label_ref 93)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 614 613 34)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
(code_label 34 614 35 5 46 "" [1 uses])

(note 35 34 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 35 38 5 arch/arm/kernel/unwind.c:143 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 38 37 40 5 arch/arm/kernel/unwind.c:143 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 40 38 82 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 82 40 41 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 2 r2 [277])
        (reg/f:SI 3 r3 [182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 41 82 39 5 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [182]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [182])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
            (nil))))

(insn:TI 39 41 615 5 arch/arm/kernel/unwind.c:143 (set (reg/v:SI 10 sl [orig:157 flags ] [157])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 615 39 616 5 (set (pc)
        (label_ref 78)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 616 615 81)

;; Start of basic block ( 10) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [95.5%] 
(code_label 81 616 44 6 51 "" [1 uses])

(note 44 81 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 6 arch/arm/kernel/unwind.c:145 (set (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (nil)))

(insn:TI 46 45 47 6 arch/arm/kernel/unwind.c:145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183])
        (nil)))

(jump_insn:TI 47 46 48 6 arch/arm/kernel/unwind.c:145 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 48 50 7 arch/arm/kernel/unwind.c:146 (set (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(insn:TI 50 49 51 7 arch/arm/kernel/unwind.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184])
        (nil)))

(jump_insn:TI 51 50 52 7 arch/arm/kernel/unwind.c:146 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [4.5%]  (fallthru,loop_exit)
;; Succ edge  9 [95.5%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 54 52 53 8 NOTE_INSN_DELETED)

(insn:TI 53 54 55 8 arch/arm/kernel/unwind.c:147 (set (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 55 53 56 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (nil)))

(insn:TI 56 55 57 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 57 56 58 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 58 57 60 8 arch/arm/kernel/unwind.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 60 58 61 8 include/linux/list.h:101 (set (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 61 60 62 8 include/linux/list.h:101 (set (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 61 63 8 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])) 167 {*arm_movsi_insn} (nil))

(insn:TI 63 62 65 8 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:161 D.15897 ] [161]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
            (nil))))

(insn:TI 65 63 66 8 include/linux/list.h:62 (set (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
        (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
        (nil)))

(insn:TI 66 65 67 8 include/linux/list.h:41 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(insn:TI 67 66 69 8 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
        (nil)))

(insn:TI 69 67 71 8 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 7 r7 [190])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 71 69 59 8 include/linux/list.h:44 (set (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(insn:TI 59 71 617 8 arch/arm/kernel/unwind.c:147 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 617 59 618 8 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 618 617 74)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [95.5%] 
(code_label 74 618 75 9 49 "" [2 uses])

(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 76 75 78 9 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 78 76 79 10 48 "" [1 uses])

(note 79 78 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 79 494 10 arch/arm/kernel/unwind.c:144 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (reg/f:SI 2 r2 [277]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
        (nil)))

(insn 494 83 84 10 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 7 r7 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(jump_insn:TI 84 494 85 10 arch/arm/kernel/unwind.c:144 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 10 -> ( 6 11)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [95.5%] 
;; Succ edge  11 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	

;; Pred edge  10 [4.5%]  (fallthru,loop_exit)
(note 85 84 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 86 85 87 11 arch/arm/kernel/unwind.c:130 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 8) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 87 86 88 12 50 "" [1 uses])

(note 88 87 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 88 90 12 include/linux/spinlock.h:340 (set (reg:SI 1 r1)
        (reg/v:SI 10 sl [orig:157 flags ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 90 91 92 12 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 92 90 93 12 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 4) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 93 92 94 13 47 "" [1 uses])

(note 94 93 95 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 95 94 100 13 arch/arm/kernel/unwind.c:291 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 100 95 99 13 arch/arm/kernel/unwind.c:292 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1)
            (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                    (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 99 100 96 13 arch/arm/kernel/unwind.c:292 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0)
            (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x110ea840>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 96 99 106 13 arch/arm/kernel/unwind.c:291 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 597)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 13 -> ( 14 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)
;; Succ edge  55 [0.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
(note 106 96 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 106 111 14 arch/arm/kernel/unwind.c:296 (set (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (nil)))

(insn:TI 111 107 109 14 arch/arm/kernel/unwind.c:298 (set (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 111 108 14 arch/arm/kernel/unwind.c:297 (set (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 108 109 112 14 arch/arm/kernel/unwind.c:296 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])
        (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])
        (nil)))

(insn:TI 112 108 550 14 arch/arm/kernel/unwind.c:298 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])
        (nil)))

(insn 550 112 110 14 arch/arm/kernel/unwind.c:299 (set (reg:SI 3 r3 [196])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 110 550 114 14 arch/arm/kernel/unwind.c:297 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])) 167 {*arm_movsi_insn} (nil))

(insn:TI 114 110 115 14 arch/arm/kernel/unwind.c:299 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (reg:SI 3 r3 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 115 114 116 14 arch/arm/kernel/unwind.c:301 (set (reg:SI 1 r1 [orig:172 D.15626 ] [172])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
                (const_int 4 [0x4])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 116 115 117 14 arch/arm/kernel/unwind.c:301 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 117 116 118 14 arch/arm/kernel/unwind.c:301 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil))))
;; End of basic block 14 -> ( 61 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [19.9%] 
;; Succ edge  15 [80.1%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [80.1%]  (fallthru)
(note 118 117 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 120 118 121 15 arch/arm/kernel/unwind.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(jump_insn:TI 121 120 122 15 arch/arm/kernel/unwind.c:304 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [73.0%]  (fallthru)
;; Succ edge  17 [27.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 9 [r9]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 9 [r9]
;; live  kill	

;; Pred edge  15 [73.0%]  (fallthru)
(note 122 121 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 16 NOTE_INSN_DELETED)

(insn:TI 124 123 125 16 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [198])
        (sign_extract:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 125 124 126 16 arch/arm/kernel/unwind.c:306 (set (reg/f:SI 9 r9 [199])
        (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 126 125 127 16 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [200])
        (plus:SI (reg:SI 1 r1 [198])
            (reg/f:SI 9 r9 [199]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(insn 127 126 619 16 arch/arm/kernel/unwind.c:306 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
        (reg:SI 1 r1 [200])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [200])
        (nil)))

(jump_insn:TI 619 127 620 16 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 620 619 130)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  15 [27.0%] 
(code_label 130 620 131 17 54 "" [1 uses])

(note 131 130 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 132 131 133 17 arch/arm/kernel/unwind.c:307 (set (reg:SI 3 r3 [201])
        (and:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 133 132 136 17 arch/arm/kernel/unwind.c:307 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [201])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [201])
        (nil)))

(insn:TI 136 133 145 17 arch/arm/kernel/unwind.c:309 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 9 r9 [202])
            (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
                (const_int 4 [0x4])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(insn 145 136 137 17 arch/arm/kernel/unwind.c:311 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2)
            (reg/v/f:SI 9 r9 [orig:164 idx ] [164]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 137 145 143 17 arch/arm/kernel/unwind.c:309 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
            (reg/f:SI 9 r9 [202]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 143 137 134 17 arch/arm/kernel/unwind.c:311 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0)
            (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10d655a0>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 134 143 150 17 arch/arm/kernel/unwind.c:307 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 608)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 17 -> ( 18 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)
;; Succ edge  23 [0.0%] 

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
(code_label 150 134 151 18 55 "" [1 uses])

(note 151 150 152 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 152 151 153 18 arch/arm/kernel/unwind.c:317 (set (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 153 152 154 18 arch/arm/kernel/unwind.c:317 (set (reg:SI 1 r1 [orig:169 D.15644 ] [169])
        (mem:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 154 153 155 18 arch/arm/kernel/unwind.c:317 (set (reg:SI 3 r3 [orig:168 D.15645 ] [168])
        (and:SI (reg:SI 1 r1 [orig:169 D.15644 ] [169])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 155 154 158 18 arch/arm/kernel/unwind.c:317 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 158 155 159 18 arch/arm/kernel/unwind.c:318 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [204])
            (plus:SI (reg:SI 3 r3 [204])
                (const_int -2147483646 [0xffffffff80000002])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 159 158 160 18 arch/arm/kernel/unwind.c:318 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
            (reg:SI 3 r3 [204]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 160 159 156 18 arch/arm/kernel/unwind.c:319 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [205])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(jump_insn 156 160 165 18 arch/arm/kernel/unwind.c:317 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 574)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  19 [72.0%]  (fallthru)
;; Succ edge  21 [28.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [72.0%]  (fallthru)
(note 165 156 166 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 166 165 167 19 arch/arm/kernel/unwind.c:320 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2130706432 [0xffffffff81000000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:168 D.15645 ] [168])
        (nil)))

(jump_insn:TI 167 166 168 19 arch/arm/kernel/unwind.c:320 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 20 22)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)
;; Succ edge  22 [0.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 168 167 172 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 172 168 173 20 NOTE_INSN_DELETED)

(note 173 172 169 20 NOTE_INSN_DELETED)

(insn:TI 169 173 170 20 arch/arm/kernel/unwind.c:321 (set (reg:SI 3 r3 [206])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 170 169 174 20 arch/arm/kernel/unwind.c:321 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
        (reg:SI 3 r3 [206])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [206])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn:TI 174 170 175 20 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [210])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
                    (const_int 2 [0x2])) [0 S1 A16]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
        (nil)))

(insn:TI 175 174 574 20 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [211])
        (plus:SI (reg:SI 3 r3 [210])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 ctrl.entries+0 S4 A32])
        (nil)))
;; End of basic block 20 -> ( 21)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  18 [28.0%] 
(code_label 574 175 572 21 88 "" [1 uses])

(note 572 574 176 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 176 572 190 21 arch/arm/kernel/unwind.c:322 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 3 r3 [211])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [211])
        (nil)))

(insn 190 176 340 21 arch/arm/kernel/unwind.c:187 (set (reg/f:SI 4 r4 [274])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn:TI 340 190 621 21 arch/arm/kernel/unwind.c:235 (set (reg:SI 7 r7 [275])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(jump_insn 621 340 622 21 (set (pc)
        (label_ref 539)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 58)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  58 [100.0%] 

(barrier 622 621 179)

;; Start of basic block ( 19) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  19 [0.0%] 
(code_label 179 622 180 22 59 "" [1 uses])

(note 180 179 182 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 182 180 608 22 arch/arm/kernel/unwind.c:324 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 22 17) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  17 [0.0%] 
(code_label 608 182 606 23 90 "" [1 uses])

(note 606 608 185 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 185 606 623 23 arch/arm/kernel/unwind.c:324 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 623 185 624 23 (set (pc)
        (label_ref 458)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 61)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 624 623 429)

;; Start of basic block ( 58) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  58 [97.8%] 
(code_label 429 624 189 24 80 "" [1 uses])

(note 189 429 194 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 194 189 191 24 NOTE_INSN_DELETED)

(insn:TI 191 194 192 24 arch/arm/kernel/unwind.c:187 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn:TI 192 191 195 24 arch/arm/kernel/unwind.c:187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 195 192 193 24 arch/arm/kernel/unwind.c:191 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
                        (const_int 192 [0xc0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [orig:141 D.15954 ] [141])
                (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
                    (const_int 192 [0xc0])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 193 195 196 24 arch/arm/kernel/unwind.c:187 (set (reg/v:SI 1 r1 [orig:146 insn ] [146])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 196 193 197 24 arch/arm/kernel/unwind.c:191 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  26 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  24 [50.0%]  (fallthru)
(note 197 196 549 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 549 197 200 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 200 549 201 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [216])
        (ashift:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(insn:TI 201 200 199 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [217])
        (and:SI (reg:SI 1 r1 [216])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 199 201 202 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [214])
        (plus:SI (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 202 199 625 25 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [218])
        (plus:SI (reg:SI 3 r3 [214])
            (reg:SI 1 r1 [217]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [214])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))

(jump_insn 625 202 626 25 (set (pc)
        (label_ref 566)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 28)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 626 625 206)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  24 [50.0%] 
(code_label 206 626 207 26 60 "" [1 uses])

(note 207 206 208 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 208 207 209 26 arch/arm/kernel/unwind.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 D.15954 ] [141])
            (const_int 64 [0x40]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:141 D.15954 ] [141])
        (nil)))

(jump_insn:TI 209 208 210 26 arch/arm/kernel/unwind.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 26 -> ( 27 29)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  27 [28.0%]  (fallthru)
;; Succ edge  29 [72.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  26 [28.0%]  (fallthru)
(note 210 209 548 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 548 210 213 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 213 548 214 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [221])
        (ashift:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(insn:TI 214 213 212 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [222])
        (and:SI (reg:SI 1 r1 [221])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 212 214 215 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [219])
        (plus:SI (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn:TI 215 212 566 27 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [223])
        (minus:SI (reg:SI 3 r3 [219])
            (reg:SI 1 r1 [222]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [219])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))
;; End of basic block 27 -> ( 28)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 25) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 566 215 564 28 87 "" [1 uses])

(note 564 566 216 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 216 564 627 28 arch/arm/kernel/unwind.c:194 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 1 r1 [223])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [223])
        (nil)))

(jump_insn 627 216 628 28 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 28 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 628 627 219)

;; Start of basic block ( 26) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  26 [72.0%] 
(code_label 219 628 220 29 62 "" [1 uses])

(note 220 219 221 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn:TI 221 220 222 29 arch/arm/kernel/unwind.c:195 (set (reg:SI 3 r3 [orig:142 D.15946 ] [142])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 240 [0xf0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 222 221 223 29 arch/arm/kernel/unwind.c:195 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 128 [0x80]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 223 222 224 29 arch/arm/kernel/unwind.c:195 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 271)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 29 -> ( 30 35)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  30 [13.7%]  (fallthru)
;; Succ edge  35 [86.3%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  29 [13.7%]  (fallthru)
(note 224 223 230 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 230 224 233 30 NOTE_INSN_DELETED)

(note 233 230 228 30 NOTE_INSN_DELETED)

(insn:TI 228 233 226 30 arch/arm/kernel/unwind.c:200 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(insn 226 228 225 30 arch/arm/kernel/unwind.c:200 (set (reg:SI 9 r9 [orig:143 D.15945 ] [143])
        (ashift:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:146 insn ] [146])
        (nil)))

(insn:TI 225 226 229 30 arch/arm/kernel/unwind.c:197 (set (reg:SI 10 sl [orig:136 temp.538 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 229 225 231 30 arch/arm/kernel/unwind.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 231 229 232 30 arch/arm/kernel/unwind.c:200 (set (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
        (ior:SI (reg:SI 0 r0)
            (reg:SI 9 r9 [orig:143 D.15945 ] [143]))) 89 {*arm_iorsi3} (nil))

(insn:TI 232 231 234 30 arch/arm/kernel/unwind.c:201 (set (reg:SI 3 r3 [225])
        (ashift:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 234 232 235 30 arch/arm/kernel/unwind.c:202 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg:SI 3 r3 [225])
                        (const_int 20 [0x14]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg:SI 3 r3 [225])
                    (const_int 20 [0x14])))
        ]) 118 {*shiftsi3_compare0} (nil))

(jump_insn:TI 235 234 236 30 arch/arm/kernel/unwind.c:202 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  31 [0.0%]  (fallthru,loop_exit)
;; Succ edge  32 [100.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  30 [0.0%]  (fallthru,loop_exit)
(note 236 235 238 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 238 236 629 31 arch/arm/kernel/unwind.c:203 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)
        (nil)))

(jump_insn 629 238 630 31 (set (pc)
        (label_ref 597)) 242 {*arm_jump} (nil))
;; End of basic block 31 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%] 

(barrier 630 629 244)

;; Start of basic block ( 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  30 [100.0%] 
(code_label 244 630 245 32 64 "" [1 uses])

(note 245 244 247 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 247 245 248 32 arch/arm/kernel/unwind.c:209 (set (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
        (and:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 512 [0x200]))) 67 {*arm_andsi3_insn} (nil))

(insn 248 247 261 32 arch/arm/kernel/unwind.c:209 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))
;; End of basic block 32 -> ( 33)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 33 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  33 [91.7%]  (dfs_back)
;; Pred edge  32 [100.0%]  (fallthru)
(code_label 261 248 249 33 66 "" [1 uses])

(note 249 261 250 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 250 249 259 33 NOTE_INSN_DELETED)

(note 259 250 251 33 NOTE_INSN_DELETED)

(insn:TI 251 259 254 33 arch/arm/kernel/unwind.c:211 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 254 251 255 33 arch/arm/kernel/unwind.c:212 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [228])
            (mem:SI (post_inc:SI (reg/v/f:SI 10 sl [orig:148 vsp ] [148])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                    (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
            (nil))))

(insn:TI 255 254 262 33 arch/arm/kernel/unwind.c:212 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                    (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
            (reg:SI 0 r0 [228]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 262 255 260 33 arch/arm/kernel/unwind.c:210 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn:TI 260 262 263 33 arch/arm/kernel/unwind.c:213 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 263 260 264 33 arch/arm/kernel/unwind.c:210 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 261)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9167 [0x23cf])
            (nil))))
;; End of basic block 33 -> ( 33 34)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  33 [91.7%]  (dfs_back)
;; Succ edge  34 [8.3%]  (fallthru,loop_exit)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [8.3%]  (fallthru,loop_exit)
(note 264 263 265 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 265 264 268 34 arch/arm/kernel/unwind.c:216 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
        (nil)))

(insn 268 265 631 34 arch/arm/kernel/unwind.c:217 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
            (reg/v/f:SI 10 sl [orig:148 vsp ] [148]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn:TI 631 268 632 34 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 34 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 632 631 271)

;; Start of basic block ( 29) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  29 [86.3%] 
(code_label 271 632 272 35 63 "" [1 uses])

(note 272 271 273 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 273 272 274 35 arch/arm/kernel/unwind.c:218 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 144 [0x90]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 274 273 275 35 arch/arm/kernel/unwind.c:218 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  36 [28.0%]  (fallthru)
;; Succ edge  38 [72.0%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  35 [28.0%]  (fallthru)
(note 275 274 276 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 276 275 277 36 arch/arm/kernel/unwind.c:219 (set (reg:SI 3 r3 [229])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 13 [0xd]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 277 276 278 36 arch/arm/kernel/unwind.c:219 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [229])
            (const_int 13 [0xd]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [229])
        (nil)))

(jump_insn:TI 278 277 279 36 arch/arm/kernel/unwind.c:219 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  37 [72.0%]  (fallthru)
;; Succ edge  43 [28.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  36 [72.0%]  (fallthru)
(note 279 278 282 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 282 279 280 37 NOTE_INSN_DELETED)

(insn:TI 280 282 552 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [230])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:146 insn ] [146])
        (nil)))

(insn 552 280 283 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 283 552 285 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [233])
        (plus:SI (mult:SI (reg:SI 1 r1 [230])
                (const_int 4 [0x4]))
            (reg:SI 3 r3))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 285 283 633 37 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3 [235])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [233])
                (const_int -76 [0xffffffffffffffb4])) [0 ctrl.vrs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [233])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))

(jump_insn 633 285 634 37 (set (pc)
        (label_ref 561)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  53 [100.0%] 

(barrier 634 633 289)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [72.0%] 
(code_label 289 634 290 38 67 "" [1 uses])

(note 290 289 291 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn:TI 291 290 292 38 arch/arm/kernel/unwind.c:221 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 160 [0xa0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:142 D.15946 ] [142])
        (nil)))

(jump_insn:TI 292 291 293 38 arch/arm/kernel/unwind.c:221 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6895 [0x1aef])
            (nil))))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  39 [31.1%]  (fallthru)
;; Succ edge  43 [69.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  38 [31.1%]  (fallthru)
(note 293 292 309 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn:TI 309 293 294 39 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [271])
        (and:SI (reg:SI 0 r0 [orig:146 insn ] [146])
            (const_int 7 [0x7]))) 67 {*arm_andsi3_insn} (nil))

(insn 294 309 310 39 arch/arm/kernel/unwind.c:222 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 310 294 492 39 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [272])
        (plus:SI (reg:SI 0 r0 [271])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 492 310 635 39 arch/arm/kernel/unwind.c:226 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(jump_insn:TI 635 492 636 39 (set (pc)
        (label_ref 304)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [100.0%] 

(barrier 636 635 308)

;; Start of basic block ( 41) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  41 [92.3%] 
(code_label 308 636 298 40 70 "" [1 uses])

(note 298 308 301 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn:TI 301 298 302 40 arch/arm/kernel/unwind.c:227 (set (reg:SI 12 ip [238])
        (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
        (nil)))

(insn:TI 302 301 303 40 arch/arm/kernel/unwind.c:227 (set (mem/s/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
                    (const_int 4 [0x4]))
                (reg/f:SI 4 r4 [274])) [0 ctrl.vrs S4 A32])
        (reg:SI 12 ip [238])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [238])
        (nil)))

(insn 303 302 304 40 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (plus:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 40 -> ( 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 40 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  40 [100.0%]  (fallthru,dfs_back)
;; Pred edge  39 [100.0%] 
(code_label 304 303 305 41 69 "" [1 uses])

(note 305 304 311 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn:TI 311 305 307 41 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (reg:SI 0 r0 [272]))) 219 {*arm_cmpsi_insn} (nil))

(insn 307 311 312 41 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 312 307 313 41 arch/arm/kernel/unwind.c:226 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 308)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9231 [0x240f])
            (nil))))
;; End of basic block 41 -> ( 40 42)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  40 [92.3%] 
;; Succ edge  42 [7.7%]  (fallthru,loop_exit)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  41 [7.7%]  (fallthru,loop_exit)
(note 313 312 315 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 315 313 316 42 NOTE_INSN_DELETED)

(insn:TI 316 315 314 42 arch/arm/kernel/unwind.c:228 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 314 316 321 42 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn:TI 321 314 319 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
            (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (nil)))

(insn:TI 319 321 324 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [242])
            (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                    (const_int -4 [0xfffffffffffffffc])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn:TI 324 319 320 42 arch/arm/kernel/unwind.c:230 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (nil)))

(insn:TI 320 324 637 42 arch/arm/kernel/unwind.c:229 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
            (reg:SI 1 r1 [242]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [242])
            (nil))))

(jump_insn 637 320 638 42 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 42 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 638 637 327)

;; Start of basic block ( 38 36) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  38 [69.0%] 
;; Pred edge  36 [28.0%] 
(code_label 327 638 328 43 68 "" [2 uses])

(note 328 327 329 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn:TI 329 328 330 43 arch/arm/kernel/unwind.c:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 176 [0xb0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 330 329 331 43 arch/arm/kernel/unwind.c:231 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 344)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 43 -> ( 44 45)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  44 [28.0%]  (fallthru)
;; Succ edge  45 [72.0%] 

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  43 [28.0%]  (fallthru)
(note 331 330 332 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 332 331 341 44 arch/arm/kernel/unwind.c:232 (set (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn:TI 341 332 333 44 arch/arm/kernel/unwind.c:235 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 7 r7 [275])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 333 341 336 44 arch/arm/kernel/unwind.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 336 333 337 44 arch/arm/kernel/unwind.c:233 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])
            (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn:TI 337 336 639 44 arch/arm/kernel/unwind.c:233 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
            (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])
            (nil))))

(jump_insn 639 337 640 44 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 44 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 640 639 344)

;; Start of basic block ( 43) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  43 [72.0%] 
(code_label 344 640 345 45 72 "" [1 uses])

(note 345 344 346 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 346 345 347 45 arch/arm/kernel/unwind.c:236 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 177 [0xb1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 347 346 348 45 arch/arm/kernel/unwind.c:236 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 394)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
            (nil))))
;; End of basic block 45 -> ( 46 51)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  46 [13.7%]  (fallthru)
;; Succ edge  51 [86.3%] 

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  45 [13.7%]  (fallthru)
(note 348 347 352 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(note 352 348 350 46 NOTE_INSN_DELETED)

(insn:TI 350 352 351 46 arch/arm/kernel/unwind.c:237 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn:TI 351 350 353 46 arch/arm/kernel/unwind.c:237 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 353 351 354 46 arch/arm/kernel/unwind.c:238 (set (reg:SI 3 r3 [orig:134 temp.542 ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 354 353 355 46 arch/arm/kernel/unwind.c:241 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn:TI 355 354 356 46 arch/arm/kernel/unwind.c:241 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 360)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 46 -> ( 48 47)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  48 [0.0%]  (loop_exit)
;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
(note 356 355 357 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(note 357 356 358 47 NOTE_INSN_DELETED)

(insn:TI 358 357 359 47 arch/arm/kernel/unwind.c:241 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [247])
                (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 359 358 360 47 arch/arm/kernel/unwind.c:241 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 47 -> ( 48 49)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  48 [0.0%]  (fallthru,loop_exit)
;; Succ edge  49 [100.0%] 

;; Start of basic block ( 46 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  46 [0.0%]  (loop_exit)
;; Pred edge  47 [0.0%]  (fallthru,loop_exit)
(code_label 360 359 361 48 75 "" [1 uses])

(note 361 360 363 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 363 361 365 48 NOTE_INSN_DELETED)

(insn:TI 365 363 364 48 arch/arm/kernel/unwind.c:242 (set (reg:SI 1 r1)
        (ior:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
            (const_int 45312 [0xb100]))) 89 {*arm_iorsi3} (nil))

(insn 364 365 641 48 arch/arm/kernel/unwind.c:242 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)
        (nil)))

(jump_insn:TI 641 364 642 48 (set (pc)
        (label_ref 597)) 242 {*arm_jump} (nil))
;; End of basic block 48 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%] 

(barrier 642 641 387)

;; Start of basic block ( 49 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  49 [93.8%]  (dfs_back)
;; Pred edge  47 [100.0%] 
(code_label 387 642 374 49 78 "" [2 uses])

(note 374 387 375 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(note 375 374 385 49 NOTE_INSN_DELETED)

(note 385 375 376 49 NOTE_INSN_DELETED)

(insn:TI 376 385 380 49 arch/arm/kernel/unwind.c:249 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 380 376 381 49 arch/arm/kernel/unwind.c:250 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [252])
            (mem:SI (post_inc:SI (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                    (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
            (nil))))

(insn:TI 381 380 388 49 arch/arm/kernel/unwind.c:250 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                    (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
            (reg:SI 0 r0 [252]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 388 381 386 49 arch/arm/kernel/unwind.c:248 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn:TI 386 388 389 49 arch/arm/kernel/unwind.c:251 (set (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
        (plus:SI (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 389 386 643 49 arch/arm/kernel/unwind.c:248 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
            (nil))))
;; End of basic block 49 -> ( 49 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  49 [93.8%]  (dfs_back)
;; Succ edge  50 [6.2%]  (fallthru)

;; Start of basic block ( 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  49 [6.2%]  (fallthru)
(note 643 389 644 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 644 643 645 50 (set (pc)
        (label_ref 561)) 242 {*arm_jump} (nil))
;; End of basic block 50 -> ( 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  53 [100.0%]  (loop_exit)

(barrier 645 644 394)

;; Start of basic block ( 45) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  45 [86.3%] 
(code_label 394 645 395 51 74 "" [1 uses])

(note 395 394 396 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn:TI 396 395 397 51 arch/arm/kernel/unwind.c:255 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 178 [0xb2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 397 396 398 51 arch/arm/kernel/unwind.c:255 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 410)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 51 -> ( 52 54)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  52 [100.0%]  (fallthru)
;; Succ edge  54 [0.0%]  (loop_exit)

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  51 [100.0%]  (fallthru)
(note 398 397 402 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(note 402 398 405 52 NOTE_INSN_DELETED)

(note 405 402 400 52 NOTE_INSN_DELETED)

(insn:TI 400 405 401 52 arch/arm/kernel/unwind.c:256 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn:TI 401 400 403 52 arch/arm/kernel/unwind.c:256 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 403 401 404 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn:TI 404 403 406 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [254])
        (plus:SI (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
            (const_int 516 [0x204]))) 4 {*arm_addsi3} (nil))

(insn:TI 406 404 561 52 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [257])
        (plus:SI (mult:SI (reg:SI 0 r0)
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [254]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
            (nil))))
;; End of basic block 52 -> ( 53)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  53 [100.0%]  (fallthru)

;; Start of basic block ( 52 37 50) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  52 [100.0%]  (fallthru)
;; Pred edge  37 [100.0%] 
;; Pred edge  50 [100.0%]  (loop_exit)
(code_label 561 406 559 53 86 "" [2 uses])

(note 559 561 407 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn:TI 407 559 646 53 arch/arm/kernel/unwind.c:258 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 3 r3 [257])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [257])
        (nil)))

(jump_insn 646 407 647 53 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 53 -> ( 56)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 647 646 410)

;; Start of basic block ( 51) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  51 [0.0%]  (loop_exit)
(code_label 410 647 411 54 79 "" [1 uses])

(note 411 410 413 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn:TI 413 411 597 54 arch/arm/kernel/unwind.c:260 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)
        (nil)))
;; End of basic block 54 -> ( 55)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  55 [100.0%]  (fallthru)

;; Start of basic block ( 54 13 31 48) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  54 [100.0%]  (fallthru)
;; Pred edge  13 [0.0%] 
;; Pred edge  31 [100.0%] 
;; Pred edge  48 [100.0%] 
(code_label 597 413 595 55 89 "" [3 uses])

(note 595 597 415 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 415 595 648 55 arch/arm/kernel/unwind.c:260 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 648 415 649 55 (set (pc)
        (label_ref 458)) 242 {*arm_jump} (nil))
;; End of basic block 55 -> ( 61)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 649 648 419)

;; Start of basic block ( 44 34 42 28 53) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  44 [100.0%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  42 [100.0%] 
;; Pred edge  28 [100.0%] 
;; Pred edge  53 [100.0%] 
(code_label 419 649 420 56 61 "" [5 uses])

(note 420 419 421 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn:TI 421 420 422 56 arch/arm/kernel/unwind.c:333 (set (reg:SI 3 r3 [orig:167 D.15661 ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 422 421 423 56 arch/arm/kernel/unwind.c:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 8 r8 [orig:165 low ] [165]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 423 422 424 56 arch/arm/kernel/unwind.c:333 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 225 [0xe1])
            (nil))))
;; End of basic block 56 -> ( 61 57)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [2.2%]  (loop_exit)
;; Succ edge  57 [97.8%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  56 [97.8%]  (fallthru)
(note 424 423 425 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn:TI 425 424 426 57 arch/arm/kernel/unwind.c:333 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 6 r6 [orig:166 high ] [166]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:167 D.15661 ] [167])
        (nil)))

(jump_insn:TI 426 425 539 57 arch/arm/kernel/unwind.c:333 discrim 1 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 57 -> ( 61 58)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [14.0%]  (loop_exit)
;; Succ edge  58 [86.0%]  (fallthru,dfs_back)

;; Start of basic block ( 57 21) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  57 [86.0%]  (fallthru,dfs_back)
;; Pred edge  21 [100.0%] 
(code_label 539 426 477 58 85 "" [1 uses])

(note 477 539 430 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn:TI 430 477 431 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (nil)))

(insn:TI 431 430 432 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
        (nil)))

(jump_insn:TI 432 431 433 58 arch/arm/kernel/unwind.c:329 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 429)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 58 -> ( 24 59)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  24 [97.8%] 
;; Succ edge  59 [2.2%]  (fallthru,loop_exit)

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  58 [2.2%]  (fallthru,loop_exit)
(note 433 432 434 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn:TI 434 433 435 59 arch/arm/kernel/unwind.c:337 (set (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn:TI 435 434 438 59 arch/arm/kernel/unwind.c:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 438 435 439 59 arch/arm/kernel/unwind.c:338 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])
            (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn:TI 439 438 442 59 arch/arm/kernel/unwind.c:338 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
            (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])
            (nil))))

(insn:TI 442 439 443 59 arch/arm/kernel/unwind.c:341 (set (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (nil)))

(insn:TI 443 442 444 59 arch/arm/kernel/unwind.c:341 (set (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 444 443 445 59 arch/arm/kernel/unwind.c:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
            (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
        (nil)))

(jump_insn:TI 445 444 446 59 arch/arm/kernel/unwind.c:341 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
            (nil))))
;; End of basic block 59 -> ( 61 60)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  61 [19.9%] 
;; Succ edge  60 [80.1%]  (fallthru)

;; Start of basic block ( 59) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  59 [80.1%]  (fallthru)
(note 446 445 447 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn:TI 447 446 455 60 arch/arm/kernel/unwind.c:344 (set (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 455 447 449 60 arch/arm/kernel/unwind.c:349 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 449 455 451 60 arch/arm/kernel/unwind.c:345 (set (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 451 449 454 60 arch/arm/kernel/unwind.c:346 (set (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (nil)))

(insn:TI 454 451 448 60 arch/arm/kernel/unwind.c:347 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])
        (nil)))

(insn:TI 448 454 450 60 arch/arm/kernel/unwind.c:344 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])
        (nil)))

(insn:TI 450 448 452 60 arch/arm/kernel/unwind.c:345 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])
        (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])
        (nil)))

(insn:TI 452 450 650 60 arch/arm/kernel/unwind.c:346 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])
        (nil)))

(jump_insn 650 452 651 60 arch/arm/kernel/unwind.c:349 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 60 -> ( 62)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  62 [100.0%] 

(barrier 651 650 458)

;; Start of basic block ( 2 56 14 59 57 23 55) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
;; Pred edge  56 [2.2%]  (loop_exit)
;; Pred edge  14 [19.9%] 
;; Pred edge  59 [19.9%] 
;; Pred edge  57 [14.0%]  (loop_exit)
;; Pred edge  23 [100.0%] 
;; Pred edge  55 [100.0%] 
(code_label 458 651 459 61 45 "" [7 uses])

(note 459 458 460 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn:TI 460 459 461 61 arch/arm/kernel/unwind.c:288 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))
;; End of basic block 61 -> ( 62)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  62 [100.0%]  (fallthru)

;; Start of basic block ( 61 60) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  61 [100.0%]  (fallthru)
;; Pred edge  60 [100.0%] 
(code_label 461 460 462 62 53 "" [1 uses])

(note 462 461 473 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 473 462 556 62 arch/arm/kernel/unwind.c:350 (use (reg/i:SI 0 r0)) -1 (nil))

(note 556 473 557 62 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 557 556 558 62 arch/arm/kernel/unwind.c:350 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 62 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 558 557 547)

(note 547 558 551 NOTE_INSN_DELETED)

(note 551 547 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unwind_backtrace (unwind_backtrace)[0:859]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 23 (  1.9)


unwind_backtrace

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  exit block uses 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,12u} r1={8d,9u,2d} r2={9d,6u} r3={19d,17u} r4={3d,5u,1d} r5={2d,3u} r11={2d,29u,2d} r12={3d} r13={3d,22u} r14={4d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,9u} r25={1d,1u,4d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 524{399d,116u,9e} in 59{56 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(11){ }d-1(13){ }d-1(14){ }d-1(25){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]

( 2 )->[3]->( 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]

( 2 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]

( 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]

( 6 3 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]

( 7 5 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]

( 8 10 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]

( 9 )->[10]->( 9 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]

( 9 )->[11]->( 1 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]

( 11 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(11){ }u-1(13){ }u-1(14){ }u-1(25){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 17 to worklist
  Adding insn 126 to worklist
  Adding insn 123 to worklist
  Adding insn 136 to worklist
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 49 to worklist
  Adding insn 138 to worklist
  Adding insn 54 to worklist
  Adding insn 58 to worklist
  Adding insn 52 to worklist
  Adding insn 56 to worklist
  Adding insn 68 to worklist
  Adding insn 70 to worklist
  Adding insn 65 to worklist
  Adding insn 73 to worklist
  Adding insn 82 to worklist
  Adding insn 79 to worklist
  Adding insn 140 to worklist
  Adding insn 89 to worklist
  Adding insn 129 to worklist
Finished finding needed instructions:
processing block 11 lr out =  4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
processing block 10 lr out =  4 [r4] 11 [fp] 13 [sp] 25 [sfp]
  Adding insn 88 to worklist
  Adding insn 118 to worklist
  Adding insn 87 to worklist
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
  Adding insn 86 to worklist
  Adding insn 81 to worklist
  Adding insn 76 to worklist
  Adding insn 78 to worklist
processing block 8 lr out =  4 [r4] 11 [fp] 13 [sp] 25 [sfp]
  Adding insn 77 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp]
processing block 3 lr out =  3 [r3] 11 [fp] 13 [sp] 25 [sfp]
  Adding insn 36 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 21 to worklist
  Adding insn 19 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp]
  Adding insn 119 to worklist
processing block 6 lr out =  3 [r3] 11 [fp] 13 [sp] 25 [sfp]
  Adding insn 72 to worklist
  Adding insn 71 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 64 to worklist
  Adding insn 63 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
  Adding insn 48 to worklist
  Adding insn 47 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
  Adding insn 122 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 121 to worklist
  Adding insn 2 to worklist
  Adding insn 7 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 23 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 123 to 17 -- after reload
;;   ======================================================

;;	  0-->   123 {[--sp]=unspec[r4] 2;use r5;use fp:cortex_a8_load_store_2
;;	  1-->     7 {cc=cmp(r1,0x0);r1=r1;}           :cortex_a8_default
;;	  2-->   124 fp=sp+0xc                         :cortex_a8_default
;;	  2-->   125 sp=sp-0x10                        :cortex_a8_default
;;	  3-->   121 (!cc) r2=sp                       :cortex_a8_default
;;	  3-->   126 [scratch]=unspec[sp,fp] 5         :cortex_a8_default
;;	  4-->   115 (!cc) r3=r2&0xffffffffffffe03f    :cortex_a8_default
;;	  4-->     2 r4=r0                             :cortex_a8_default
;;	  5-->   116 (!cc) r3=r3&0xffffffffffffffc0    :cortex_a8_default
;;	  7-->    13 (!cc) r1=[r3+0xc]                 :cortex_a8_load_store_1
;;	  7-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  9-->    17 pc={(cc==0x0)?L42:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 123
;;   new tail = 17

;;   ======================================================
;;   -- basic block 3 from 19 to 136 -- after reload
;;   ======================================================

;;	  0-->    23 r3=[r0+0x38]                      :cortex_a8_load_store_1
;;	  1-->    19 r1=[r0+0x2c]                      :cortex_a8_load_store_1
;;	  2-->    21 r2=[r0+0x34]                      :cortex_a8_load_store_1
;;	  3-->    25 r0=[r0+0x3c]                      :cortex_a8_load_store_1
;;	  4-->    24 [fp-0x14]=r3                      :cortex_a8_load_store_1
;;	  5-->    20 [fp-0x1c]=r1                      :cortex_a8_load_store_1
;;	  6-->    22 [fp-0x18]=r2                      :cortex_a8_load_store_1
;;	  6-->    26 r0=call [`kernel_text_address']   :cortex_a8_issue_branch
;;	 38-->    28 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 40-->    31 (cc) r3=[r4+0x3c]                 :cortex_a8_load_store_1
;;	 41-->    36 (!cc) r3=[r4+0x38]                :cortex_a8_load_store_1
;;	 41-->   136 pc=L133                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 41
;;   new head = 19
;;   new tail = 136

;;   ======================================================
;;   -- basic block 4 from 122 to 49 -- after reload
;;   ======================================================

;;	  0-->   122 r2=sp                             :cortex_a8_default
;;	  1-->   113 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   114 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    47 r3=[r3+0xc]                       :cortex_a8_load_store_1
;;	  6-->    48 cc=cmp(r1,r3)                     :cortex_a8_default
;;	  8-->    49 pc={(cc!=0x0)?L61:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 122
;;   new tail = 49

;;   ======================================================
;;   -- basic block 5 from 56 to 138 -- after reload
;;   ======================================================

;;	  0-->   119 r3=`unwind_backtrace'             :cortex_a8_load_store_1
;;	  1-->    56 [fp-0x14]=lr                      :cortex_a8_load_store_1
;;	  2-->    52 [fp-0x1c]=fp                      :cortex_a8_load_store_1
;;	  3-->    58 [fp-0x10]=r3                      :cortex_a8_load_store_1
;;	  4-->    54 [fp-0x18]=sp                      :cortex_a8_load_store_1
;;	  4-->   138 pc=L74                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 56
;;   new tail = 138

;;   ======================================================
;;   -- basic block 6 from 63 to 72 -- after reload
;;   ======================================================

;;	  0-->    63 r3=[r1+0x4]                       :cortex_a8_load_store_1
;;	  3-->    64 r3=[r3+0x38]                      :cortex_a8_load_store_1
;;	  6-->    65 [fp-0x1c]=r3                      :cortex_a8_load_store_1
;;	  7-->    66 r3=[r1+0x4]                       :cortex_a8_load_store_1
;;	 10-->    67 r3=[r3+0x3c]                      :cortex_a8_load_store_1
;;	 11-->    70 [fp-0x14]=r0                      :cortex_a8_load_store_1
;;	 13-->    68 [fp-0x18]=r3                      :cortex_a8_load_store_1
;;	 14-->    71 r3=[r1+0x4]                       :cortex_a8_load_store_1
;;	 17-->    72 r3=[r3+0x40]                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 17
;;   new head = 63
;;   new tail = 72

;;   ======================================================
;;   -- basic block 7 from 73 to 73 -- after reload
;;   ======================================================

;;	  0-->    73 [fp-0x10]=r3                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 73
;;   new tail = 73

;;   ======================================================
;;   -- basic block 8 from 77 to 77 -- after reload
;;   ======================================================

;;	  0-->    77 r4=fp-0x1c                        :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 77
;;   new tail = 77

;;   ======================================================
;;   -- basic block 9 from 78 to 82 -- after reload
;;   ======================================================

;;	  0-->    78 r0=r4                             :cortex_a8_default
;;	  0-->    76 r5=[fp-0x10]                      :cortex_a8_load_store_1
;;	  1-->    79 r0=call [`unwind_frame']          :cortex_a8_issue_branch
;;	 33-->    81 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 33-->    86 r0=r5                             :cortex_a8_default
;;	 35-->    82 pc={(cc<0x0)?L97:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 78
;;   new tail = 82

;;   ======================================================
;;   -- basic block 10 from 87 to 140 -- after reload
;;   ======================================================

;;	  0-->   118 r2=[fp-0x18]                      :cortex_a8_load_store_1
;;	  1-->    87 r1=[fp-0x10]                      :cortex_a8_load_store_1
;;	  2-->    88 r2=r2-0x4                         :cortex_a8_default
;;	  3-->    89 call [`dump_backtrace_entry']     :cortex_a8_issue_branch
;;	  3-->   140 pc=L110                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 87
;;   new tail = 140

;;   ======================================================
;;   -- basic block 11 from 129 to 129 -- after reload
;;   ======================================================

;;	  0-->   129 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 129
;;   new tail = 129





unwind_backtrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  exit block uses 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,12u} r1={8d,9u,2d} r2={9d,6u} r3={19d,17u} r4={3d,5u,1d} r5={2d,3u} r11={2d,29u,2d} r12={3d} r13={3d,22u} r14={4d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,9u} r25={1d,1u,4d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 524{399d,116u,9e} in 59{56 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 123 2 NOTE_INSN_DELETED)

(insn/f:TI 123 11 7 2 arch/arm/kernel/unwind.c:353 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg/f:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg/f:SI 11 fp))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(insn:TI 7 123 124 2 arch/arm/kernel/unwind.c:359 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ tsk ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (reg:SI 1 r1 [ tsk ]))
        ]) 174 {*movsi_compare0} (nil))

(insn/f:TI 124 7 125 2 arch/arm/kernel/unwind.c:353 (set (reg/f:SI 11 fp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn/f 125 124 121 2 arch/arm/kernel/unwind.c:353 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 121 125 126 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2)
            (reg/f:SI 13 sp))) 2345 {neon_vornv2di+78} (nil))

(insn 126 121 127 2 arch/arm/kernel/unwind.c:353 (set (mem:BLK (scratch) [0 A8])
        (unspec:BLK [
                (reg/f:SI 13 sp)
                (reg/f:SI 11 fp)
            ] 5)) 328 {stack_tie} (nil))

(note 127 126 115 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 115 127 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [144])
            (and:SI (reg:SI 2 r2)
                (const_int -8129 [0xffffffffffffe03f])))) 2295 {neon_vornv2di+28} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 2 115 116 2 arch/arm/kernel/unwind.c:353 (set (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 116 2 13 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [144])
            (and:SI (reg:SI 3 r3 [144])
                (const_int -64 [0xffffffffffffffc0])))) 2295 {neon_vornv2di+28} (nil))

(insn:TI 13 116 16 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
            (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                    (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [144])
            (nil))))

(insn 16 13 17 2 arch/arm/kernel/unwind.c:362 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:142 regs ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 17 16 18 2 arch/arm/kernel/unwind.c:362 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  3 [69.8%]  (fallthru)
;; Succ edge  4 [30.2%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [69.8%]  (fallthru)
(note 18 17 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 27 18 23 3 NOTE_INSN_DELETED)

(insn:TI 23 27 19 3 arch/arm/kernel/unwind.c:365 (set (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 23 21 3 arch/arm/kernel/unwind.c:363 (set (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
        (nil)))

(insn:TI 21 19 25 3 arch/arm/kernel/unwind.c:364 (set (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 21 24 3 arch/arm/kernel/unwind.c:367 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:142 regs ] [142])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 25 20 3 arch/arm/kernel/unwind.c:365 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])
        (nil)))

(insn:TI 20 24 22 3 arch/arm/kernel/unwind.c:363 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])
        (nil)))

(insn:TI 22 20 26 3 arch/arm/kernel/unwind.c:364 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])
        (nil)))

(call_insn 26 22 28 3 arch/arm/kernel/unwind.c:367 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 28 26 31 3 arch/arm/kernel/unwind.c:367 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 31 28 36 3 arch/arm/kernel/unwind.c:367 discrim 1 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                    (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 36 31 136 3 arch/arm/kernel/unwind.c:367 discrim 2 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                    (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
            (nil))))

(jump_insn 136 36 137 3 (set (pc)
        (label_ref 133)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  7 [100.0%] 

(barrier 137 136 42)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [30.2%] 
(code_label 42 137 43 4 95 "" [1 uses])

(note 43 42 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 45 43 122 4 NOTE_INSN_DELETED)

(insn:TI 122 45 113 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 113 122 114 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 114 113 47 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 47 114 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 48 47 49 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
            (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151])
        (nil)))

(jump_insn:TI 49 48 50 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  5 [6.7%]  (fallthru)
;; Succ edge  6 [93.3%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [6.7%]  (fallthru)
(note 50 49 119 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 119 50 56 5 arch/arm/kernel/unwind.c:373 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
        (nil)))

(insn:TI 56 119 52 5 arch/arm/kernel/unwind.c:372 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 14 lr [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [152])
        (nil)))

(insn:TI 52 56 58 5 arch/arm/kernel/unwind.c:370 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg/f:SI 11 fp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 52 54 5 arch/arm/kernel/unwind.c:373 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [153])
        (expr_list:REG_EQUAL (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
            (nil))))

(insn:TI 54 58 138 5 arch/arm/kernel/unwind.c:371 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(jump_insn 138 54 139 5 (set (pc)
        (label_ref 74)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%] 

(barrier 139 138 61)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [93.3%] 
(code_label 61 139 62 6 99 "" [1 uses])

(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 63 62 64 6 arch/arm/kernel/unwind.c:376 (set (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn:TI 64 63 65 6 arch/arm/kernel/unwind.c:376 (set (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
                (const_int 56 [0x38])) [0 <variable>.cpu_context.fp+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.fp+0 S4 A64])
        (nil)))

(insn:TI 65 64 66 6 arch/arm/kernel/unwind.c:376 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])
        (nil)))

(insn:TI 66 65 67 6 arch/arm/kernel/unwind.c:377 (set (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn:TI 67 66 70 6 arch/arm/kernel/unwind.c:377 (set (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
                (const_int 60 [0x3c])) [0 <variable>.cpu_context.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn:TI 70 67 68 6 arch/arm/kernel/unwind.c:382 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg/f:SI 0 r0 [orig:142 regs ] [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:142 regs ] [142])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 68 70 71 6 arch/arm/kernel/unwind.c:377 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])
        (nil)))

(insn:TI 71 68 72 6 arch/arm/kernel/unwind.c:383 (set (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
        (nil)))

(insn:TI 72 71 133 6 arch/arm/kernel/unwind.c:383 (set (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
                (const_int 64 [0x40])) [0 <variable>.cpu_context.pc+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 frame.pc+0 S4 A32])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 3) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 133 72 131 7 103 "" [1 uses])

(note 131 133 73 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 73 131 74 7 arch/arm/kernel/unwind.c:383 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 74 73 75 8 98 "" [1 uses])

(note 75 74 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 75 110 8 arch/arm/kernel/unwind.c:390 (set (reg/f:SI 4 r4 [164])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 10) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 110 77 102 9 102 "" [1 uses])

(note 102 110 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 80 102 78 9 NOTE_INSN_DELETED)

(insn:TI 78 80 76 9 arch/arm/kernel/unwind.c:390 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 76 78 79 9 arch/arm/kernel/unwind.c:388 (set (reg/v:SI 5 r5 [orig:135 where ] [135])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 79 76 81 9 arch/arm/kernel/unwind.c:390 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_frame") [flags 0x3] <function_decl 0x11024e00 unwind_frame>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 81 79 86 9 arch/arm/kernel/unwind.c:391 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 86 81 82 9 arch/arm/kernel/unwind.c:393 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 where ] [135])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 82 86 83 9 arch/arm/kernel/unwind.c:391 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 97)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  11 [9.0%]  (loop_exit)
;; Succ edge  10 [91.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [91.0%]  (fallthru)
(note 83 82 85 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 85 83 118 10 NOTE_INSN_DELETED)

(insn:TI 118 85 87 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2 [orig:163 frame.sp ] [163])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn:TI 87 118 88 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 88 87 89 10 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2)
        (plus:SI (reg:SI 2 r2 [orig:163 frame.sp ] [163])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 89 88 140 10 arch/arm/kernel/unwind.c:393 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_backtrace_entry") [flags 0x41] <function_decl 0x11039280 dump_backtrace_entry>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 140 89 141 10 arch/arm/kernel/unwind.c:394 (set (pc)
        (label_ref 110)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 9)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  9 [100.0%] 

(barrier 141 140 97)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [9.0%]  (loop_exit)
(code_label 97 141 100 11 101 "" [1 uses])

(note 100 97 128 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 128 100 129 11 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 129 128 130 11 arch/arm/kernel/unwind.c:395 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 4 [r4] 5 [r5] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  EXIT [100.0%] 

(barrier 130 129 117)

(note 117 130 120 NOTE_INSN_DELETED)

(note 120 117 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
