
;; Function twd_set_mode (twd_set_mode)[0:688]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000

   Insn 41(l0): point = 0
   Insn 39(l0): point = 2
   Insn 38(l0): point = 4
   Insn 34(l0): point = 7
   Insn 35(l0): point = 9
   Insn 32(l0): point = 11
   Insn 31(l0): point = 13
   Insn 26(l0): point = 15
   Insn 29(l0): point = 17
   Insn 30(l0): point = 19
   Insn 25(l0): point = 21
   Insn 71(l0): point = 24
   Insn 70(l0): point = 26
   Insn 8(l0): point = 29
   Insn 7(l0): point = 31
   Insn 2(l0): point = 33
 a0(r146): [1..2]
 a1(r133): [24..26] [1..9]
 a2(r145): [3..4]
 a3(r136): [8..15]
 a4(r144): [8..11]
 a5(r139): [16..21]
 a6(r137): [27..33]
Compressing live ranges: from 36 to 14 - 38%
Ranges after the compression:
 a0(r146): [0..1]
 a1(r133): [10..11] [0..5]
 a2(r145): [2..3]
 a3(r136): [4..7]
 a4(r144): [4..6]
 a5(r139): [8..9]
 a6(r137): [12..13]
+++Allocating 48 bytes for conflict table (uncompressed size 56)
;; a0(r146,l0) conflicts: a1(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts: a0(r146,l0) a2(r145,l0) a4(r144,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r145,l0) conflicts: a1(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts: a1(r133,l0) a4(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r144,l0) conflicts: a1(r133,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r139,l0) conflicts:
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a6(r137,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r133)<->a6(r137)@125:shuffle
  regions=1, blocks=6, points=14
    allocnos=7, copies=1, conflicts=2, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r146 1r133 2r145 3r136 4r144 5r139 6r137
    modified regnos: 133 136 137 139 144 145 146
    border:
    Pressure: GENERAL_REGS=4
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a4(r144,l0)
      Pushing a2(r145,l0)
      Pushing a0(r146,l0)
      Pushing a6(r137,l0)
      Pushing a1(r133,l0)
      Pushing a5(r139,l0)
      Pushing a3(r136,l0)
      Popping a3(r136,l0)  -- assign reg 4
      Popping a5(r139,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 3
      Popping a6(r137,l0)  -- assign reg 0
      Popping a0(r146,l0)  -- assign reg 2
      Popping a2(r145,l0)  -- assign reg 2
      Popping a4(r144,l0)  -- assign reg 0
Disposition:
    1:r133 l0     3    3:r136 l0     4    6:r137 l0     0    5:r139 l0     3
    4:r144 l0     0    2:r145 l0     2    0:r146 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 137
insn=7, live_throughout: 13, 14, 137, dead_or_set: 
insn=8, live_throughout: 13, 14, 137, dead_or_set: 
insn=70, live_throughout: 13, 14, dead_or_set: 133, 137
insn=71, live_throughout: 13, 14, 133, dead_or_set: 
insn=23, live_throughout: 13, dead_or_set: 
insn=25, live_throughout: 13, dead_or_set: 139
insn=30, live_throughout: 13, 139, dead_or_set: 1
insn=29, live_throughout: 1, 13, 139, dead_or_set: 0
insn=26, live_throughout: 0, 1, 13, dead_or_set: 136, 139
insn=31, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=32, live_throughout: 13, 14, 136, dead_or_set: 0, 144
insn=35, live_throughout: 13, 14, 136, 144, dead_or_set: 133
insn=34, live_throughout: 13, 14, 133, dead_or_set: 136, 144
insn=36, live_throughout: 13, 14, 133, dead_or_set: 
insn=38, live_throughout: 13, 14, 133, dead_or_set: 145
insn=39, live_throughout: 13, 14, 133, dead_or_set: 145, 146
insn=41, live_throughout: 13, 14, dead_or_set: 133, 146
init_insns for 139: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 38 (nil))
changing reg in insn 70
changing reg in insn 35
changing reg in insn 41
changing reg in insn 26
changing reg in insn 34
changing reg in insn 2
changing reg in insn 70
changing reg in insn 7
changing reg in insn 25
changing reg in insn 29
changing reg in insn 26
changing reg in insn 32
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
Spilling for insn 34.
Spilling for insn 41.

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/v:SI (reg/f:SI 4 r4 [orig:136 twd_base.201 ] [136]) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (reg/f:SI 4 r4 [orig:136 twd_base.201 ] [136]) [0 S4 A32])

Reloads for insn # 41
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:146 twd_base ] [146])
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:146 twd_base ] [146])
                                                        (const_int 8 [0x8])) [0 S4 A32])
deleting insn with uid = 2.
deleting insn with uid = 32.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


twd_set_mode

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,4u} r1={3d,1u} r2={4d,2u} r3={5d,3u} r4={1d,1u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 153{134d,19u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 arch/arm/kernel/smp_twd.c:40 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:137 mode ] [137])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 47 2 arch/arm/kernel/smp_twd.c:40 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [29.0%] 
;; Succ edge  3 [71.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  2 [71.0%]  (fallthru)
(note 47 8 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 9 47 70 3 NOTE_INSN_DELETED)

(insn 70 9 71 3 arch/arm/kernel/smp_twd.c:54 (parallel [
            (set (reg/v:SI 3 r3 [orig:133 ctrl ] [133])
                (if_then_else:SI (eq (reg/v:SI 0 r0 [orig:137 mode ] [137])
                        (const_int 3 [0x3]))
                    (const_int 4 [0x4])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 71 70 72 3 (set (pc)
        (label_ref 36)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 72 71 23)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%] 
(code_label 23 72 24 4 3 "" [1 uses])

(note 24 23 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 24 25 4 NOTE_INSN_DELETED)

(insn 25 28 30 4 arch/arm/kernel/smp_twd.c:45 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 30 25 29 4 arch/arm/kernel/smp_twd.c:45 (set (reg:SI 1 r1)
        (const_int 100 [0x64])) 167 {*arm_movsi_insn} (nil))

(insn 29 30 26 4 arch/arm/kernel/smp_twd.c:45 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [139])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 29 31 4 arch/arm/kernel/smp_twd.c:45 (set (reg/f:SI 4 r4 [orig:136 twd_base.201 ] [136])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [139]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(call_insn/u 31 26 35 4 arch/arm/kernel/smp_twd.c:45 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 35 31 34 4 arch/arm/kernel/smp_twd.c:43 (set (reg/v:SI 3 r3 [orig:133 ctrl ] [133])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (nil))

(insn 34 35 36 4 arch/arm/kernel/smp_twd.c:45 (set (mem/v:SI (reg/f:SI 4 r4 [orig:136 twd_base.201 ] [136]) [0 S4 A32])
        (reg:SI 0 r0 [144])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 36 34 37 5 5 "" [1 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 5 arch/arm/kernel/smp_twd.c:57 (set (reg/f:SI 2 r2 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 39 38 41 5 arch/arm/kernel/smp_twd.c:57 (set (reg/f:SI 2 r2 [orig:146 twd_base ] [146])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [145]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 41 39 73 5 arch/arm/kernel/smp_twd.c:57 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:146 twd_base ] [146])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/v:SI 3 r3 [orig:133 ctrl ] [133])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 73 41 74 NOTE_INSN_DELETED)

(note 74 73 0 NOTE_INSN_DELETED)


;; Function twd_set_next_event (twd_set_next_event)[0:689]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 28(l0): point = 0
   Insn 17(l0): point = 2
   Insn 11(l0): point = 4
   Insn 15(l0): point = 6
   Insn 13(l0): point = 8
   Insn 10(l0): point = 10
   Insn 8(l0): point = 12
   Insn 22(l0): point = 14
   Insn 2(l0): point = 16
   Insn 7(l0): point = 18
 a0(r144): [3..6]
 a1(r134): [3..4]
 a2(r135): [5..10]
 a3(r142): [7..18]
 a4(r138): [9..12]
 a5(r140): [9..16]
Compressing live ranges: from 21 to 10 - 47%
Ranges after the compression:
 a0(r144): [0..3]
 a1(r134): [0..1]
 a2(r135): [2..6]
 a3(r142): [4..9]
 a4(r138): [5..7]
 a5(r140): [5..8]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r144,l0) conflicts: a1(r134,l0) a2(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r134,l0) conflicts: a0(r144,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r135,l0) conflicts: a0(r144,l0) a3(r142,l0) a4(r138,l0) a5(r140,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r142,l0) conflicts: a2(r135,l0) a4(r138,l0) a5(r140,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r138,l0) conflicts: a2(r135,l0) a3(r142,l0) a5(r140,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a5(r140,l0) conflicts: a2(r135,l0) a3(r142,l0) a4(r138,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a1(r134)<->a2(r135)@125:shuffle
  regions=1, blocks=3, points=10
    allocnos=6, copies=1, conflicts=1, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r144 1r134 2r135 3r142 4r138 5r140
    modified regnos: 134 135 138 140 142 144
    border:
    Pressure: GENERAL_REGS=6
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
      Pushing a5(r140,l0)
      Pushing a2(r135,l0)
      Pushing a1(r134,l0)
      Pushing a0(r144,l0)
      Pushing a4(r138,l0)
      Pushing a3(r142,l0)
      Popping a3(r142,l0)  -- assign reg 3
      Popping a4(r138,l0)  -- assign reg 2
      Popping a0(r144,l0)  -- assign reg 3
      Popping a1(r134,l0)  -- assign reg 2
      Popping a2(r135,l0)  -- assign reg 1
      Popping a5(r140,l0)  -- assign reg 12
Disposition:
    1:r134 l0     2    2:r135 l0     1    4:r138 l0     2    5:r140 l0    12
    3:r142 l0     3    0:r144 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 142
insn=2, live_throughout: 13, 14, 142, dead_or_set: 0, 140
insn=22, live_throughout: 13, 14, 140, 142, dead_or_set: 0
insn=8, live_throughout: 0, 13, 14, 140, 142, dead_or_set: 138
insn=10, live_throughout: 0, 13, 14, 138, 140, 142, dead_or_set: 135
insn=13, live_throughout: 0, 13, 14, 135, 142, dead_or_set: 138, 140
insn=15, live_throughout: 0, 13, 14, 135, dead_or_set: 142, 144
insn=11, live_throughout: 0, 13, 14, 144, dead_or_set: 134, 135
insn=17, live_throughout: 0, 13, 14, dead_or_set: 134, 144
insn=28, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 11
changing reg in insn 17
changing reg in insn 10
changing reg in insn 11
changing reg in insn 8
changing reg in insn 13
changing reg in insn 10
changing reg in insn 2
changing reg in insn 13
changing reg in insn 7
changing reg in insn 15
changing reg in insn 8
changing reg in insn 8
changing reg in insn 15
changing reg in insn 17
Spilling for insn 13.
Spilling for insn 17.

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:138 twd_base.204 ] [138])
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:138 twd_base.204 ] [138])
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 17
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:144 twd_base ] [144])
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:144 twd_base ] [144])
                                                        (const_int 8 [0x8])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


twd_set_next_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={3d,3u} r3={3d,3u,1d} r12={2d,1u} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 29{14d,14u,1e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 7 2 NOTE_INSN_DELETED)

(insn 7 18 2 2 arch/arm/kernel/smp_twd.c:63 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 2 7 22 2 arch/arm/kernel/smp_twd.c:62 (set (reg/v:SI 12 ip [orig:140 evt ] [140])
        (reg:SI 0 r0 [ evt ])) 167 {*arm_movsi_insn} (nil))

(insn 22 2 8 2 arch/arm/kernel/smp_twd.c:71 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 8 22 10 2 arch/arm/kernel/smp_twd.c:63 (set (reg/f:SI 2 r2 [orig:138 twd_base.204 ] [138])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 10 8 13 2 arch/arm/kernel/smp_twd.c:63 (set (reg/v:SI 1 r1 [orig:135 ctrl ] [135])
        (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:138 twd_base.204 ] [138])
                (const_int 8 [0x8])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 10 15 2 arch/arm/kernel/smp_twd.c:67 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:138 twd_base.204 ] [138])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 12 ip [orig:140 evt ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 15 13 11 2 arch/arm/kernel/smp_twd.c:68 (set (reg/f:SI 3 r3 [orig:144 twd_base ] [144])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 15 17 2 arch/arm/kernel/smp_twd.c:65 (set (reg/v:SI 2 r2 [orig:134 ctrl.273 ] [134])
        (ior:SI (reg/v:SI 1 r1 [orig:135 ctrl ] [135])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 17 11 28 2 arch/arm/kernel/smp_twd.c:68 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:144 twd_base ] [144])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/v:SI 2 r2 [orig:134 ctrl.273 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 28 17 32 2 arch/arm/kernel/smp_twd.c:71 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 32 28 33 NOTE_INSN_DELETED)

(note 33 32 0 NOTE_INSN_DELETED)


;; Function twd_timer_ack (twd_timer_ack)[0:690]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 32(l0): point = 0
   Insn 26(l0): point = 2
   Insn 19(l0): point = 5
   Insn 18(l0): point = 7
   Insn 17(l0): point = 9
   Insn 36(l0): point = 12
   Insn 12(l0): point = 14
   Insn 10(l0): point = 17
   Insn 9(l0): point = 19
   Insn 8(l0): point = 21
   Insn 6(l0): point = 23
   Insn 5(l0): point = 25
 a0(r133): [12..14] [3..5]
 a1(r139): [6..9]
 a2(r138): [17..23] [8..11]
 a3(r134): [15..21]
 a4(r137): [24..25]
Compressing live ranges: from 28 to 14 - 50%
Ranges after the compression:
 a0(r133): [6..7] [0..1]
 a1(r139): [2..4]
 a2(r138): [9..11] [3..5]
 a3(r134): [8..10]
 a4(r137): [12..13]
+++Allocating 32 bytes for conflict table (uncompressed size 40)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r139,l0) conflicts: a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r138,l0) conflicts: a1(r139,l0) a3(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r134,l0) conflicts: a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r137,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r133)<->a1(r139)@1000:move
  cp1:a0(r133)<->a3(r134)@1000:move
  regions=1, blocks=6, points=14
    allocnos=5, copies=2, conflicts=2, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r133 1r139 2r138 3r134 4r137
    modified regnos: 133 134 137 138 139
    border:
    Pressure: GENERAL_REGS=3
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a4(r137,l0)
      Pushing a3(r134,l0)
      Pushing a2(r138,l0)
      Pushing a1(r139,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 0
      Popping a1(r139,l0)  -- assign reg 0
      Popping a2(r138,l0)  -- assign reg 3
      Popping a3(r134,l0)  -- assign reg 0
      Popping a4(r137,l0)  -- assign reg 3
Disposition:
    0:r133 l0     0    3:r134 l0     0    4:r137 l0     3    2:r138 l0     3
    1:r139 l0     0
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 137
insn=6, live_throughout: 13, 14, dead_or_set: 137, 138
insn=8, live_throughout: 13, 14, 138, dead_or_set: 134
insn=9, live_throughout: 13, 14, 134, 138, dead_or_set: 
insn=10, live_throughout: 13, 14, 134, 138, dead_or_set: 
insn=12, live_throughout: 13, 14, dead_or_set: 133, 134
insn=36, live_throughout: 13, 14, 133, dead_or_set: 
insn=15, live_throughout: 13, 14, 138, dead_or_set: 
insn=17, live_throughout: 13, 14, 138, dead_or_set: 139
insn=18, live_throughout: 13, 14, 139, dead_or_set: 138
insn=19, live_throughout: 13, 14, dead_or_set: 133, 139
insn=20, live_throughout: 13, 14, 133, dead_or_set: 
insn=26, live_throughout: 13, 14, dead_or_set: 0, 133
insn=32, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 17 (nil))
changing reg in insn 19
changing reg in insn 12
changing reg in insn 26
changing reg in insn 8
changing reg in insn 12
changing reg in insn 9
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 18
changing reg in insn 8
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
Spilling for insn 18.

Reloads for insn # 18
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:138 twd_base ] [138])
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:138 twd_base ] [138])
                                                        (const_int 12 [0xc])) [0 S4 A32])
deleting insn with uid = 12.
deleting insn with uid = 19.
deleting insn with uid = 26.


try_optimize_cfg iteration 1

Simplifying condjump 10 around jump 36
deleting insn with uid = 11.
deleting insn with uid = 36.
deleting insn with uid = 37.
deleting block 3
deleting insn with uid = 15.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


twd_timer_ack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d} r2={1d} r3={3d,3u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 25{12d,13u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/smp_twd.c:81 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 8 2 arch/arm/kernel/smp_twd.c:81 (set (reg/f:SI 3 r3 [orig:138 twd_base ] [138])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 8 6 9 2 arch/arm/kernel/smp_twd.c:81 (set (reg:SI 0 r0 [orig:134 D.14180 ] [134])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:138 twd_base ] [138])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 10 2 arch/arm/kernel/smp_twd.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:134 D.14180 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 16 2 arch/arm/kernel/smp_twd.c:81 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 4 5)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  5 [39.0%] 

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 10 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 arch/arm/kernel/smp_twd.c:82 (set (reg:SI 0 r0 [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 18 17 20 4 arch/arm/kernel/smp_twd.c:82 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:138 twd_base ] [138])
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 0 r0 [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 20 18 21 5 16 "" [1 uses])

(note 21 20 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 32 21 38 5 arch/arm/kernel/smp_twd.c:87 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 38 32 39 NOTE_INSN_DELETED)

(note 39 38 0 NOTE_INSN_DELETED)


;; Function twd_cpufreq_transition (twd_cpufreq_transition)[0:692]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 38(l0): point = 0
   Insn 32(l0): point = 2
   Insn 25(l0): point = 5
   Insn 24(l0): point = 7
   Insn 22(l0): point = 9
   Insn 23(l0): point = 11
   Insn 21(l0): point = 13
   Insn 18(l0): point = 16
   Insn 4(l0): point = 18
   Insn 17(l0): point = 20
 a0(r136): [14..18]
Compressing live ranges: from 23 to 2 - 8%
Ranges after the compression:
 a0(r136): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=5, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r136
    modified regnos: 136
    border:
    Pressure: GENERAL_REGS=5
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 2
Disposition:
    0:r136 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=17, live_throughout: 2, 13, 14, dead_or_set: 1
insn=4, live_throughout: 13, 14, 24, dead_or_set: 2, 136
insn=18, live_throughout: 13, 14, 136, dead_or_set: 
insn=21, live_throughout: 13, dead_or_set: 0, 136
insn=23, live_throughout: 0, 13, dead_or_set: 2
insn=22, live_throughout: 0, 2, 13, dead_or_set: 1
insn=24, live_throughout: 0, 1, 2, 13, dead_or_set: 3
insn=25, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=26, live_throughout: 13, 14, dead_or_set: 
insn=32, live_throughout: 13, 14, dead_or_set: 0
insn=38, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 4
changing reg in insn 21
deleting insn with uid = 4.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


twd_cpufreq_transition

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,3u} r2={3d,2u} r3={3d,1u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 146{130d,16u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 16 2 NOTE_INSN_DELETED)

(note 16 15 17 2 NOTE_INSN_DELETED)

(insn 17 16 18 2 arch/arm/kernel/smp_twd.c:110 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg:SI 1 r1 [ state ])
                    (const_int 8 [0x8]))
                (eq:SI (reg:SI 1 r1 [ state ])
                    (const_int 1 [0x1])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(jump_insn 18 17 19 2 arch/arm/kernel/smp_twd.c:110 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 23 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 0 r0)
        (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:136 data ] [136]) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 21 22 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 22 23 24 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 1 r1)
        (symbol_ref:SI ("twd_update_frequency") [flags 0x3] <function_decl 0x10fa8000 twd_update_frequency>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("twd_update_frequency") [flags 0x3] <function_decl 0x10fa8000 twd_update_frequency>)
        (nil)))

(insn 24 22 25 3 arch/arm/kernel/smp_twd.c:111 (set (reg:SI 3 r3)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 25 24 26 3 arch/arm/kernel/smp_twd.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("smp_call_function_single") [flags 0x41] <function_decl 0x10cc8e80 smp_call_function_single>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 26 25 27 4 21 "" [1 uses])

(note 27 26 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 27 38 4 arch/arm/kernel/smp_twd.c:115 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 38 32 43 4 arch/arm/kernel/smp_twd.c:115 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 43 38 44 NOTE_INSN_DELETED)

(note 44 43 0 NOTE_INSN_DELETED)


;; Function twd_update_frequency (twd_update_frequency)[0:691]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 33.
verify found no changes in insn with uid = 33.
deleting insn with uid = 15.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 22(l0): point = 0
   Insn 20(l0): point = 2
   Insn 19(l0): point = 4
   Insn 33(l0): point = 6
   Insn 13(l0): point = 8
   Insn 18(l0): point = 10
   Insn 12(l0): point = 12
   Insn 21(l0): point = 14
   Insn 11(l0): point = 16
   Insn 32(l0): point = 18
   Insn 31(l0): point = 20
   Insn 9(l0): point = 22
   Insn 8(l0): point = 24
   Insn 7(l0): point = 26
   Insn 6(l0): point = 28
 a0(r144): [3..4]
 a1(r134): [3..12]
 a2(r140): [5..6]
 a3(r143): [5..10]
 a4(r141): [11..20]
 a5(r135): [15..22]
 a6(r137): [17..28]
Compressing live ranges: from 31 to 12 - 38%
Ranges after the compression:
 a0(r144): [0..1]
 a1(r134): [0..6]
 a2(r140): [2..3]
 a3(r143): [2..4]
 a4(r141): [5..9]
 a5(r135): [7..10]
 a6(r137): [8..11]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r144,l0) conflicts: a1(r134,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a1(r134,l0) conflicts: a0(r144,l0) a2(r140,l0) a3(r143,l0) a4(r141,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a2(r140,l0) conflicts: a1(r134,l0) a3(r143,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a3(r143,l0) conflicts: a1(r134,l0) a2(r140,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a4(r141,l0) conflicts: a1(r134,l0) a5(r135,l0) a6(r137,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a5(r135,l0) conflicts: a4(r141,l0) a6(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r137,l0) conflicts: a4(r141,l0) a5(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=12
    allocnos=7, copies=0, conflicts=1, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r144 1r134 2r140 3r143 4r141 5r135 6r137
    modified regnos: 134 135 137 140 141 143 144
    border:
    Pressure: GENERAL_REGS=5
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a5(r135,l0)
      Pushing a3(r143,l0)
      Pushing a2(r140,l0)
      Pushing a0(r144,l0)
      Pushing a6(r137,l0)
      Pushing a4(r141,l0)
      Pushing a1(r134,l0)
      Popping a1(r134,l0)  -- assign reg 3
      Popping a4(r141,l0)  -- assign reg 2
      Popping a6(r137,l0)  -- assign reg 4
      Popping a0(r144,l0)  -- assign reg 2
      Popping a2(r140,l0)  -- assign reg 2
      Popping a3(r143,l0)  -- assign reg 0
      Popping a5(r135,l0)  -- assign reg 1
Disposition:
    1:r134 l0     3    5:r135 l0     1    6:r137 l0     4    2:r140 l0     2
    4:r141 l0     2    3:r143 l0     0    0:r144 l0     2
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, dead_or_set: 137
insn=7, live_throughout: 13, 137, dead_or_set: 0
insn=8, live_throughout: 13, 137, dead_or_set: 0, 14
insn=9, live_throughout: 13, 14, 137, dead_or_set: 0, 135
insn=31, live_throughout: 13, 14, 135, 137, dead_or_set: 141
insn=32, live_throughout: 13, 14, 135, 137, dead_or_set: 141
insn=11, live_throughout: 13, 14, 135, 141, dead_or_set: 137
insn=21, live_throughout: 13, 14, 141, dead_or_set: 1, 135
insn=12, live_throughout: 1, 13, 14, 141, dead_or_set: 134
insn=18, live_throughout: 1, 13, 14, 134, dead_or_set: 141, 143
insn=13, live_throughout: 1, 13, 14, 143, dead_or_set: 134
insn=33, live_throughout: 1, 13, 14, 134, 143, dead_or_set: 140
insn=19, live_throughout: 1, 13, 14, 134, dead_or_set: 140, 143, 144
insn=20, live_throughout: 1, 13, 14, dead_or_set: 0, 134, 144
insn=22, live_throughout: 13, 14, dead_or_set: 0, 1
init_insns for 137: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 33 (nil))
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 20
changing reg in insn 9
changing reg in insn 11
changing reg in insn 21
changing reg in insn 6
changing reg in insn 11
changing reg in insn 7
changing reg in insn 33
changing reg in insn 19
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
Spilling for insn 31.
Using reg 3 for reload 0
Spilling for insn 11.

Reloads for insn # 31
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
deleting insn with uid = 21.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


twd_update_frequency

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={6d,4u} r1={4d,2u} r2={7d,4u} r3={6d,3u} r4={1d,2u} r12={3d} r13={1d,5u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 273{252d,21u,0e} in 15{13 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 3 6 2 NOTE_INSN_DELETED)

(insn 6 16 7 2 arch/arm/kernel/smp_twd.c:95 (set (reg/f:SI 4 r4 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/smp_twd.c:95 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 8 7 9 2 arch/arm/kernel/smp_twd.c:95 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_rate") [flags 0x41] <function_decl 0x10a60600 clk_get_rate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 35 2 arch/arm/kernel/smp_twd.c:95 (set (reg:SI 1 r1 [orig:135 twd_timer_rate.208 ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 35 9 31 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 31 35 32 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 2 r2 [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 32 31 11 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 2 r2 [141])
        (and:SI (reg:SI 2 r2 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 32 12 2 arch/arm/kernel/smp_twd.c:95 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 1 r1 [orig:135 twd_timer_rate.208 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 18 2 arch/arm/kernel/smp_twd.c:97 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 18 12 13 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 0 r0 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 18 33 2 arch/arm/kernel/smp_twd.c:97 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 5255831)) -1 (nil))

(insn 33 13 19 2 arch/arm/kernel/smp_twd.c:97 (set (reg/f:SI 2 r2 [140])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)
        (nil)))

(insn 19 33 20 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 2 r2 [144])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [140])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 22 2 arch/arm/kernel/smp_twd.c:97 (set (reg:SI 0 r0)
        (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
                (reg:SI 2 r2 [144])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 22 20 23 2 arch/arm/kernel/smp_twd.c:97 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clockevents_update_freq") [flags 0x41] <function_decl 0x10f21900 clockevents_update_freq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 23 22 34)

(note 34 23 0 NOTE_INSN_DELETED)


;; Function twd_cpufreq_init (twd_cpufreq_init)[0:693]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 24(l0): point = 0
   Insn 23(l0): point = 2
   Insn 22(l0): point = 4
   Insn 34(l0): point = 7
   Insn 28(l0): point = 9
   Insn 11(l0): point = 12
   Insn 10(l0): point = 14
   Insn 8(l0): point = 17
   Insn 7(l0): point = 19
   Insn 6(l0): point = 21
   Insn 5(l0): point = 23
 a0(r134): [15..21]
 a1(r136): [22..23]
Compressing live ranges: from 26 to 4 - 15%
Ranges after the compression:
 a0(r134): [0..1]
 a1(r136): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r134 1r136
    modified regnos: 134 136
    border:
    Pressure: GENERAL_REGS=3
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a1(r136,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 3
      Popping a1(r136,l0)  -- assign reg 3
Disposition:
    0:r134 l0     3    1:r136 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 136
insn=6, live_throughout: 13, 14, dead_or_set: 134, 136
insn=7, live_throughout: 13, 14, 134, dead_or_set: 
insn=8, live_throughout: 13, 14, 134, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 134
insn=11, live_throughout: 13, 14, dead_or_set: 
insn=12, live_throughout: 13, 14, dead_or_set: 
insn=28, live_throughout: 13, 14, dead_or_set: 0
insn=34, live_throughout: 0, 13, 14, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 0
insn=23, live_throughout: 0, 13, 14, dead_or_set: 1
insn=24, live_throughout: 13, 14, dead_or_set: 0, 1
init_insns for 136: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 6
changing reg in insn 10
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


twd_cpufreq_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,1u} r2={2d} r3={4d,3u} r12={2d} r13={1d,6u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 146{130d,16u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/smp_twd.c:123 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/smp_twd.c:123 (set (reg/f:SI 3 r3 [orig:134 twd_clk.210 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
        (nil)))

(insn 7 6 8 2 include/linux/err.h:39 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 twd_clk.210 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 include/linux/err.h:39 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [15.0%] 
;; Succ edge  3 [85.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [85.0%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 include/linux/err.h:39 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 twd_clk.210 ] [134])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 3 include/linux/err.h:39 discrim 2 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [15.0%] 
;; Pred edge  3 [0.0%]  (fallthru)
(code_label 12 11 13 4 30 "" [1 uses])

(note 13 12 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 13 34 4 arch/arm/kernel/smp_twd.c:128 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 28 19 4 arch/arm/kernel/smp_twd.c:128 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 19 34 20 5 31 "" [1 uses])

(note 20 19 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 22 20 23 5 arch/arm/kernel/smp_twd.c:124 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 23 22 24 5 arch/arm/kernel/smp_twd.c:124 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 24 23 25 5 arch/arm/kernel/smp_twd.c:124 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpufreq_register_notifier") [flags 0x41] <function_decl 0x10e9fe00 cpufreq_register_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 25 24 38)

(note 38 25 0 NOTE_INSN_DELETED)


;; Function twd_timer_setup (twd_timer_setup)[0:696] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 48 (    2)
scanning new insn with uid = 231.
verify found no changes in insn with uid = 231.
deleting insn with uid = 169.
scanning new insn with uid = 232.
verify found no changes in insn with uid = 232.
deleting insn with uid = 164.
scanning new insn with uid = 233.
verify found no changes in insn with uid = 233.
deleting insn with uid = 162.
scanning new insn with uid = 234.
verify found no changes in insn with uid = 234.
deleting insn with uid = 160.
scanning new insn with uid = 235.
verify found no changes in insn with uid = 235.
deleting insn with uid = 158.
scanning new insn with uid = 236.
verify found no changes in insn with uid = 236.
deleting insn with uid = 156.
scanning new insn with uid = 237.
verify found no changes in insn with uid = 237.
deleting insn with uid = 154.
scanning new insn with uid = 238.
verify found no changes in insn with uid = 238.
deleting insn with uid = 128.
scanning new insn with uid = 239.
verify found no changes in insn with uid = 239.
deleting insn with uid = 99.
scanning new insn with uid = 240.
verify found no changes in insn with uid = 240.
deleting insn with uid = 94.
scanning new insn with uid = 241.
verify found no changes in insn with uid = 241.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 48 (    2)

Pass 0 for finding allocno costs

    a40 (r207,l2) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r205,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r150,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r134,l2) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a3(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r199,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a27(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a35(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r207,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a43(r205,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r207: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a3(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r199,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a27(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a35(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r207,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a43(r205,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 224(l0): point = 0
   Insn 190(l0): point = 2
   Insn 187(l0): point = 4
   Insn 186(l0): point = 6
   Insn 182(l0): point = 9
   Insn 181(l0): point = 11
   Insn 180(l0): point = 13
   Insn 177(l0): point = 15
   Insn 174(l0): point = 17
   Insn 167(l0): point = 19
   Insn 166(l0): point = 21
   Insn 173(l0): point = 23
   Insn 231(l0): point = 25
   Insn 165(l0): point = 27
   Insn 232(l0): point = 29
   Insn 163(l0): point = 31
   Insn 233(l0): point = 33
   Insn 161(l0): point = 35
   Insn 234(l0): point = 37
   Insn 159(l0): point = 39
   Insn 235(l0): point = 41
   Insn 157(l0): point = 43
   Insn 236(l0): point = 45
   Insn 172(l0): point = 47
   Insn 179(l0): point = 49
   Insn 155(l0): point = 51
   Insn 237(l0): point = 53
   Insn 178(l0): point = 55
   Insn 176(l0): point = 57
   Insn 152(l0): point = 59
   Insn 228(l0): point = 61
   Insn 227(l0): point = 63
   Insn 151(l0): point = 65
   Insn 148(l0): point = 68
   Insn 145(l0): point = 70
   Insn 146(l0): point = 72
   Insn 147(l0): point = 74
   Insn 144(l0): point = 76
   Insn 143(l0): point = 78
   Insn 142(l0): point = 80
   Insn 139(l0): point = 82
   Insn 138(l0): point = 84
   Insn 137(l0): point = 86
   Insn 136(l0): point = 88
   Insn 135(l0): point = 90
   Insn 131(l0): point = 92
   Insn 133(l0): point = 94
   Insn 129(l0): point = 96
   Insn 238(l0): point = 98
   Insn 127(l0): point = 100
   Insn 126(l0): point = 102
   Insn 124(l0): point = 104
   Insn 134(l0): point = 106
   Insn 123(l0): point = 108
   Insn 222(l0): point = 111
   Insn 100(l0): point = 113
   Insn 239(l0): point = 115
   Insn 97(l0): point = 117
   Insn 95(l0): point = 119
   Insn 240(l0): point = 121
   Insn 92(l0): point = 123
   Insn 90(l0): point = 125
   Insn 89(l0): point = 131
   Insn 91(l0): point = 133
   Insn 220(l0): point = 136
   Insn 66(l0): point = 138
   Insn 63(l0): point = 142
   Insn 62(l0): point = 144
   Insn 65(l0): point = 146
   Insn 61(l0): point = 148
   Insn 58(l0): point = 151
   Insn 57(l0): point = 153
   Insn 56(l0): point = 155
   Insn 55(l0): point = 157
   Insn 52(l0): point = 160
   Insn 51(l0): point = 162
   Insn 49(l0): point = 165
   Insn 48(l0): point = 167
   Insn 47(l0): point = 169
   Insn 46(l0): point = 171
   Insn 43(l0): point = 174
   Insn 42(l0): point = 176
   Insn 39(l0): point = 179
   Insn 38(l0): point = 181
   Insn 37(l0): point = 183
   Insn 36(l0): point = 185
   Insn 34(l0): point = 187
   Insn 35(l0): point = 189
   Insn 31(l0): point = 192
   Insn 30(l0): point = 194
   Insn 28(l0): point = 196
   Insn 218(l0): point = 199
   Insn 22(l0): point = 201
   Insn 20(l0): point = 203
   Insn 21(l0): point = 205
   Insn 17(l0): point = 208
   Insn 16(l0): point = 210
   Insn 15(l0): point = 212
   Insn 14(l0): point = 214
   Insn 12(l0): point = 216
   Insn 13(l0): point = 218
   Insn 9(l0): point = 221
   Insn 8(l0): point = 223
   Insn 7(l0): point = 225
   Insn 241(l0): point = 227
   Insn 2(l0): point = 229
   Insn 116(l2): point = 232
   Insn 115(l2): point = 234
   Insn 114(l2): point = 237
   Insn 112(l2): point = 240
   Insn 111(l2): point = 242
   Insn 216(l2): point = 244
   Insn 214(l2): point = 246
   Insn 108(l2): point = 248
   Insn 105(l2): point = 251
   Insn 82(l1): point = 254
   Insn 81(l1): point = 256
   Insn 80(l1): point = 259
   Insn 78(l1): point = 262
   Insn 77(l1): point = 264
   Insn 217(l1): point = 266
   Insn 212(l1): point = 268
   Insn 74(l1): point = 270
   Insn 71(l1): point = 273
 a0(r157): [160..171] [3..8]
 a1(r135): [160..169] [7..8]
 a2(r150): [12..229] [0..8]
 a3(r189): [16..65]
 a4(r202): [18..23]
 a5(r147): [18..21]
 a6(r198): [24..25]
 a7(r201): [24..47]
 a8(r196): [28..29]
 a9(r195): [32..33]
 a10(r194): [36..37]
 a11(r193): [40..41]
 a12(r192): [44..45]
 a13(r199): [48..63]
 a14(r190): [52..59]
 a15(r191): [52..53]
 a16(r178): [73..88]
 a17(r188): [75..76]
 a18(r142): [87..96]
 a19(r169): [93..108]
 a20(r171): [97..100]
 a21(r172): [97..98]
 a22(r143): [101..102]
 a23(r170): [103..104]
 a24(r167): [114..117]
 a25(r168): [114..115]
 a26(r163): [118..133]
 a27(r164): [120..123]
 a28(r165): [120..121]
 a29(r134): [111..131]
 a30(r144): [126..146]
 a31(r159): [154..155]
 a32(r158): [156..157]
 a33(r156): [175..176]
 a34(r145): [184..212] [175..179]
 a35(r146): [180..194]
 a36(r152): [219..225]
 a37(r151): [226..227]
 a38(r134): [232..253]
 a39(r150): [232..253]
 a40(r207): [235..246]
 a41(r144): [254..275]
 a42(r150): [254..275]
 a43(r205): [257..268]
 Rebuilding regno allocno list for 207
 Rebuilding regno allocno list for 205
Compressing live ranges: from 276 to 82 - 29%
Ranges after the compression:
 a0(r157): [59..61] [1..3]
 a1(r135): [59..60] [2..3]
 a2(r150): [74..81] [4..73] [0..3]
 a3(r189): [5..27]
 a4(r202): [6..8]
 a5(r147): [6..7]
 a6(r198): [9..10]
 a7(r201): [9..21]
 a8(r196): [11..12]
 a9(r195): [13..14]
 a10(r194): [15..16]
 a11(r193): [17..18]
 a12(r192): [19..20]
 a13(r199): [22..26]
 a14(r190): [23..25]
 a15(r191): [23..24]
 a16(r178): [28..32]
 a17(r188): [29..30]
 a18(r142): [31..34]
 a19(r169): [33..42]
 a20(r171): [35..37]
 a21(r172): [35..36]
 a22(r143): [38..39]
 a23(r170): [40..41]
 a24(r167): [44..46]
 a25(r168): [44..45]
 a26(r163): [47..53]
 a27(r164): [48..50]
 a28(r165): [48..49]
 a29(r134): [74..77] [43..52]
 a30(r144): [78..81] [51..54]
 a31(r159): [55..56]
 a32(r158): [57..58]
 a33(r156): [62..63]
 a34(r145): [66..68] [62..64]
 a35(r146): [65..67]
 a36(r152): [69..70]
 a37(r151): [71..72]
 a40(r207): [75..76]
 a43(r205): [79..80]
+++Allocating 320 bytes for conflict table (uncompressed size 352)
;; a0(r157,l0) conflicts: a2(r150,l0) a1(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r135,l0) conflicts: a2(r150,l0) a0(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r150,l0) conflicts: a0(r157,l0) a1(r135,l0) a3(r189,l0) a5(r147,l0) a4(r202,l0) a6(r198,l0) a7(r201,l0) a8(r196,l0) a9(r195,l0) a10(r194,l0) a11(r193,l0) a12(r192,l0) a13(r199,l0) a15(r191,l0) a14(r190,l0) a16(r178,l0) a17(r188,l0) a18(r142,l0) a19(r169,l0) a21(r172,l0) a20(r171,l0) a22(r143,l0) a23(r170,l0) a29(r134,l0) a25(r168,l0) a24(r167,l0) a26(r163,l0) a28(r165,l0) a27(r164,l0) a30(r144,l0) a31(r159,l0) a32(r158,l0) a33(r156,l0) a34(r145,l0) a35(r146,l0) a36(r152,l0) a37(r151,l0) a40(r207,l0) a43(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r189,l0) conflicts: a2(r150,l0) a5(r147,l0) a4(r202,l0) a6(r198,l0) a7(r201,l0) a8(r196,l0) a9(r195,l0) a10(r194,l0) a11(r193,l0) a12(r192,l0) a13(r199,l0) a15(r191,l0) a14(r190,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a4(r202,l0) conflicts: a2(r150,l0) a3(r189,l0) a5(r147,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a5(r147,l0) conflicts: a2(r150,l0) a3(r189,l0) a4(r202,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a6(r198,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a7(r201,l0) conflicts: a2(r150,l0) a3(r189,l0) a6(r198,l0) a8(r196,l0) a9(r195,l0) a10(r194,l0) a11(r193,l0) a12(r192,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a8(r196,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a9(r195,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a10(r194,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a11(r193,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a12(r192,l0) conflicts: a2(r150,l0) a3(r189,l0) a7(r201,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a13(r199,l0) conflicts: a2(r150,l0) a3(r189,l0) a15(r191,l0) a14(r190,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a14(r190,l0) conflicts: a2(r150,l0) a3(r189,l0) a13(r199,l0) a15(r191,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a15(r191,l0) conflicts: a2(r150,l0) a3(r189,l0) a13(r199,l0) a14(r190,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a16(r178,l0) conflicts: a2(r150,l0) a17(r188,l0) a18(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r188,l0) conflicts: a2(r150,l0) a16(r178,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r142,l0) conflicts: a2(r150,l0) a16(r178,l0) a19(r169,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a19(r169,l0) conflicts: a2(r150,l0) a18(r142,l0) a21(r172,l0) a20(r171,l0) a22(r143,l0) a23(r170,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a20(r171,l0) conflicts: a2(r150,l0) a19(r169,l0) a21(r172,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a21(r172,l0) conflicts: a2(r150,l0) a19(r169,l0) a20(r171,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a22(r143,l0) conflicts: a2(r150,l0) a19(r169,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a23(r170,l0) conflicts: a2(r150,l0) a19(r169,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a24(r167,l0) conflicts: a2(r150,l0) a29(r134,l0) a25(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r168,l0) conflicts: a2(r150,l0) a29(r134,l0) a24(r167,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r163,l0) conflicts: a2(r150,l0) a29(r134,l0) a28(r165,l0) a27(r164,l0) a30(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r164,l0) conflicts: a2(r150,l0) a29(r134,l0) a26(r163,l0) a28(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r165,l0) conflicts: a2(r150,l0) a29(r134,l0) a26(r163,l0) a27(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r134,l0) conflicts: a2(r150,l0) a25(r168,l0) a24(r167,l0) a26(r163,l0) a28(r165,l0) a27(r164,l0) a30(r144,l0) a40(r207,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a30(r144,l0) conflicts: a2(r150,l0) a29(r134,l0) a26(r163,l0) a43(r205,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a31(r159,l0) conflicts: a2(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r158,l0) conflicts: a2(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r156,l0) conflicts: a2(r150,l0) a34(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r145,l0) conflicts: a2(r150,l0) a33(r156,l0) a35(r146,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a35(r146,l0) conflicts: a2(r150,l0) a34(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a36(r152,l0) conflicts: a2(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r151,l0) conflicts: a2(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r207,l0) conflicts: a2(r150,l0) a29(r134,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a43(r205,l0) conflicts: a2(r150,l0) a30(r144,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  cp0:a20(r171)<->a22(r143)@125:shuffle
  cp1:a18(r142)<->a21(r172)@125:shuffle
  cp2:a18(r142)<->a20(r171)@125:shuffle
  regions=3, blocks=24, points=82
    allocnos=44, copies=3, conflicts=4, ranges=47

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r157 1r135 2r150 3r189 4r202 5r147 6r198 7r201 8r196 9r195 10r194 11r193 12r192 13r199 14r190 15r191 16r178 17r188 18r142 19r169 20r171 21r172 22r143 23r170 24r167 25r168 26r163 27r164 28r165 29r134 30r144 31r159 32r158 33r156 34r145 35r146 36r152 37r151 40r207 43r205
    modified regnos: 134 135 142 143 144 145 146 147 150 151 152 156 157 158 159 163 164 165 167 168 169 170 171 172 178 188 189 190 191 192 193 194 195 196 198 199 201 202 205 207
    border:
    Pressure: GENERAL_REGS=7
    Reg 157 of GENERAL_REGS has 2 regs less
    Reg 150 of GENERAL_REGS has 5 regs less
    Reg 189 of GENERAL_REGS has 3 regs less
    Reg 202 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 3 regs less
    Reg 198 of GENERAL_REGS has 3 regs less
    Reg 201 of GENERAL_REGS has 3 regs less
    Reg 196 of GENERAL_REGS has 3 regs less
    Reg 195 of GENERAL_REGS has 3 regs less
    Reg 194 of GENERAL_REGS has 3 regs less
    Reg 193 of GENERAL_REGS has 3 regs less
    Reg 192 of GENERAL_REGS has 3 regs less
    Reg 199 of GENERAL_REGS has 3 regs less
    Reg 190 of GENERAL_REGS has 2 regs less
    Reg 191 of GENERAL_REGS has 2 regs less
    Reg 178 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 2 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 3 regs less
    Reg 207 of GENERAL_REGS has 2 regs less
    Reg 205 of GENERAL_REGS has 2 regs less
      Pushing a37(r151,l0)
      Pushing a33(r156,l0)
      Pushing a32(r158,l0)
      Pushing a31(r159,l0)
      Pushing a28(r165,l0)
      Pushing a27(r164,l0)
      Pushing a25(r168,l0)
      Pushing a24(r167,l0)
      Pushing a17(r188,l0)
      Pushing a36(r152,l0)
      Pushing a26(r163,l0)
      Pushing a1(r135,l0)
      Pushing a23(r170,l0)
      Pushing a22(r143,l0)
      Pushing a21(r172,l0)
      Pushing a20(r171,l0)
      Pushing a43(r205,l0)
      Pushing a40(r207,l0)
      Pushing a15(r191,l0)
      Pushing a14(r190,l0)
      Pushing a19(r169,l0)
      Pushing a0(r157,l0)
      Pushing a12(r192,l0)
      Pushing a11(r193,l0)
      Pushing a10(r194,l0)
      Pushing a9(r195,l0)
      Pushing a8(r196,l0)
      Pushing a7(r201,l0)
      Pushing a6(r198,l0)
      Pushing a4(r202,l0)
      Pushing a35(r146,l0)
      Pushing a3(r189,l0)
      Pushing a18(r142,l0)
      Pushing a13(r199,l0)
      Pushing a5(r147,l0)
      Pushing a29(r134,l0)
      Pushing a34(r145,l0)
      Pushing a30(r144,l0)
      Pushing a16(r178,l0)
      Pushing a2(r150,l0)
      Popping a2(r150,l0)  -- assign reg 4
      Popping a16(r178,l0)  -- assign reg 5
      Popping a30(r144,l0)  -- assign reg 6
      Popping a34(r145,l0)  -- assign reg 5
      Popping a29(r134,l0)  -- assign reg 8
      Popping a5(r147,l0)  -- assign reg 1
      Popping a13(r199,l0)  -- assign reg 1
      Popping a18(r142,l0)  -- assign reg 6
      Popping a3(r189,l0)  -- assign reg 12
      Popping a35(r146,l0)  -- assign reg 6
      Popping a4(r202,l0)  -- assign reg 14
      Popping a6(r198,l0)  -- assign reg 1
      Popping a7(r201,l0)  -- assign reg 14
      Popping a8(r196,l0)  -- assign reg 1
      Popping a9(r195,l0)  -- assign reg 1
      Popping a10(r194,l0)  -- assign reg 1
      Popping a11(r193,l0)  -- assign reg 1
      Popping a12(r192,l0)  -- assign reg 1
      Popping a0(r157,l0)  -- assign reg 5
      Popping a19(r169,l0)  -- assign reg 3
      Popping a14(r190,l0)  -- assign reg 3
      Popping a15(r191,l0)  -- assign reg 14
      Popping a40(r207,l0)  -- assign reg 3
      Popping a43(r205,l0)  -- assign reg 3
      Popping a20(r171,l0)  -- assign reg 6
      Popping a21(r172,l0)  -- assign reg 2
      Popping a22(r143,l0)  -- assign reg 6
      Popping a23(r170,l0)  -- assign reg 2
      Popping a1(r135,l0)  -- assign reg 0
      Popping a26(r163,l0)  -- assign reg 3
      Popping a36(r152,l0)  -- assign reg 1
      Popping a17(r188,l0)  -- assign reg 2
      Popping a24(r167,l0)  -- assign reg 3
      Popping a25(r168,l0)  -- assign reg 2
      Popping a27(r164,l0)  -- assign reg 2
      Popping a28(r165,l0)  -- assign reg 1
      Popping a31(r159,l0)  -- assign reg 3
      Popping a32(r158,l0)  -- assign reg 3
      Popping a33(r156,l0)  -- assign reg 3
      Popping a37(r151,l0)  -- assign reg 3
Disposition:
   29:r134 l0     8    1:r135 l0     0   18:r142 l0     6   22:r143 l0     6
   30:r144 l0     6   34:r145 l0     5   35:r146 l0     6    5:r147 l0     1
    2:r150 l0     4   37:r151 l0     3   36:r152 l0     1   33:r156 l0     3
    0:r157 l0     5   32:r158 l0     3   31:r159 l0     3   26:r163 l0     3
   27:r164 l0     2   28:r165 l0     1   24:r167 l0     3   25:r168 l0     2
   19:r169 l0     3   23:r170 l0     2   20:r171 l0     6   21:r172 l0     2
   16:r178 l0     5   17:r188 l0     2    3:r189 l0    12   14:r190 l0     3
   15:r191 l0    14   12:r192 l0     1   11:r193 l0     1   10:r194 l0     1
    9:r195 l0     1    8:r196 l0     1    6:r198 l0     1   13:r199 l0     1
    7:r201 l0    14    4:r202 l0    14   43:r205 l0     3   40:r207 l0     3
New iteration of spill/restore move
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, dead_or_set: 0, 150
insn=241, live_throughout: 13, 150, dead_or_set: 151
insn=7, live_throughout: 13, 150, dead_or_set: 151, 152
insn=8, live_throughout: 13, 150, 152, dead_or_set: 
insn=9, live_throughout: 13, 150, 152, dead_or_set: 
insn=13, live_throughout: 13, 150, dead_or_set: 1, 152
insn=12, live_throughout: 1, 13, 150, dead_or_set: 0
insn=14, live_throughout: 13, 150, dead_or_set: 0, 1, 14
insn=15, live_throughout: 0, 13, 150, dead_or_set: 145
insn=16, live_throughout: 0, 13, 145, 150, dead_or_set: 
insn=17, live_throughout: 0, 13, 145, 150, dead_or_set: 
insn=21, live_throughout: 13, 145, 150, dead_or_set: 1
insn=20, live_throughout: 1, 13, 145, 150, dead_or_set: 0
insn=22, live_throughout: 13, 145, 150, dead_or_set: 0, 1, 14
insn=218, live_throughout: 13, 145, 150, dead_or_set: 
insn=25, live_throughout: 0, 13, 145, 150, dead_or_set: 
insn=28, live_throughout: 13, 145, 150, dead_or_set: 0, 14
insn=30, live_throughout: 13, 145, 150, dead_or_set: 0, 146
insn=31, live_throughout: 13, 145, 146, 150, dead_or_set: 
insn=35, live_throughout: 13, 145, 146, 150, dead_or_set: 1
insn=34, live_throughout: 1, 13, 145, 146, 150, dead_or_set: 0
insn=36, live_throughout: 13, 145, 146, 150, dead_or_set: 0, 1, 14
insn=37, live_throughout: 13, 146, 150, dead_or_set: 0, 145
insn=38, live_throughout: 13, 146, 150, dead_or_set: 0, 14
insn=39, live_throughout: 13, 150, dead_or_set: 145, 146
insn=40, live_throughout: 13, 145, 150, dead_or_set: 
insn=42, live_throughout: 13, 145, 150, dead_or_set: 156
insn=43, live_throughout: 13, 150, dead_or_set: 145, 156
insn=44, live_throughout: 13, 150, dead_or_set: 
insn=46, live_throughout: 13, 150, dead_or_set: 157
insn=47, live_throughout: 13, 150, 157, dead_or_set: 135
insn=48, live_throughout: 13, 135, 150, 157, dead_or_set: 
insn=49, live_throughout: 13, 135, 150, 157, dead_or_set: 
insn=51, live_throughout: 13, 135, 150, 157, dead_or_set: 
insn=52, live_throughout: 13, 135, 150, 157, dead_or_set: 
insn=53, live_throughout: 13, 150, dead_or_set: 
insn=55, live_throughout: 13, 150, dead_or_set: 158
insn=56, live_throughout: 13, 150, dead_or_set: 158, 159
insn=57, live_throughout: 13, 150, dead_or_set: 159
insn=58, live_throughout: 13, 150, dead_or_set: 
insn=61, live_throughout: 13, 150, dead_or_set: 0
insn=65, live_throughout: 0, 13, 150, dead_or_set: 144
insn=62, live_throughout: 13, 144, 150, dead_or_set: 0, 14
insn=63, live_throughout: 13, 144, 150, dead_or_set: 0, 1, 14
insn=66, live_throughout: 13, 150, dead_or_set: 0, 1, 144
insn=220, live_throughout: 13, 144, 150, dead_or_set: 
insn=76, live_throughout: 0, 13, 144, 150, dead_or_set: 
insn=71, live_throughout: 13, 144, 150, dead_or_set: 0, 14
insn=72, live_throughout: 13, 144, 150, dead_or_set: 
insn=74, live_throughout: 13, 144, 150, dead_or_set: 0, 1, 14
insn=212, live_throughout: 1, 13, 144, 150, dead_or_set: 0, 205
insn=217, live_throughout: 1, 13, 144, 150, 205, dead_or_set: 0
insn=77, live_throughout: 0, 13, 144, 150, 205, dead_or_set: 1
insn=78, live_throughout: 0, 13, 24, 144, 150, 205, dead_or_set: 
insn=80, live_throughout: 0, 13, 144, 150, 205, dead_or_set: 
insn=81, live_throughout: 0, 13, 144, 150, dead_or_set: 205
insn=82, live_throughout: 0, 13, 144, 150, dead_or_set: 
insn=210, live_throughout: 13, 144, 150, dead_or_set: 
insn=91, live_throughout: 13, 144, 150, dead_or_set: 163
insn=89, live_throughout: 13, 144, 150, 163, dead_or_set: 134
insn=90, live_throughout: 13, 150, 163, dead_or_set: 134, 144
insn=92, live_throughout: 13, 134, 150, 163, dead_or_set: 164
insn=240, live_throughout: 13, 134, 150, 163, 164, dead_or_set: 165
insn=95, live_throughout: 13, 134, 150, 163, dead_or_set: 164, 165
insn=97, live_throughout: 13, 134, 150, dead_or_set: 163, 167
insn=239, live_throughout: 13, 134, 150, 167, dead_or_set: 168
insn=100, live_throughout: 13, 134, 150, dead_or_set: 167, 168
insn=222, live_throughout: 13, 134, 150, dead_or_set: 
insn=110, live_throughout: 0, 13, 134, 150, dead_or_set: 
insn=105, live_throughout: 13, 134, 150, dead_or_set: 0, 14
insn=106, live_throughout: 13, 134, 150, dead_or_set: 
insn=108, live_throughout: 13, 134, 150, dead_or_set: 0, 1, 14
insn=214, live_throughout: 1, 13, 134, 150, dead_or_set: 0, 207
insn=216, live_throughout: 1, 13, 134, 150, 207, dead_or_set: 0
insn=111, live_throughout: 0, 13, 134, 150, 207, dead_or_set: 1
insn=112, live_throughout: 0, 13, 24, 134, 150, 207, dead_or_set: 
insn=114, live_throughout: 0, 13, 134, 150, 207, dead_or_set: 
insn=115, live_throughout: 0, 13, 134, 150, dead_or_set: 207
insn=116, live_throughout: 0, 13, 134, 150, dead_or_set: 
insn=211, live_throughout: 13, 150, dead_or_set: 
insn=123, live_throughout: 13, 150, dead_or_set: 169
insn=134, live_throughout: 13, 150, 169, dead_or_set: 1
insn=124, live_throughout: 1, 13, 150, 169, dead_or_set: 170
insn=126, live_throughout: 1, 13, 150, 169, dead_or_set: 143, 170
insn=127, live_throughout: 1, 13, 150, 169, dead_or_set: 143, 171
insn=238, live_throughout: 1, 13, 150, 169, 171, dead_or_set: 172
insn=129, live_throughout: 1, 13, 150, 169, dead_or_set: 142, 171, 172
insn=133, live_throughout: 1, 13, 142, 150, 169, dead_or_set: 0
insn=131, live_throughout: 0, 1, 13, 142, 150, dead_or_set: 169
insn=135, live_throughout: 13, 142, 150, dead_or_set: 0, 1, 14
insn=136, live_throughout: 13, 142, 150, dead_or_set: 0, 178
insn=137, live_throughout: 13, 150, 178, dead_or_set: 0, 142
insn=138, live_throughout: 0, 13, 150, 178, dead_or_set: 1
insn=139, live_throughout: 13, 150, 178, dead_or_set: 0, 1, 14
insn=142, live_throughout: 0, 13, 150, 178, dead_or_set: 1
insn=143, live_throughout: 13, 150, 178, dead_or_set: 0, 1, 14
insn=144, live_throughout: 13, 150, 178, dead_or_set: 1, 188
insn=147, live_throughout: 13, 150, 178, dead_or_set: 2, 188
insn=146, live_throughout: 2, 13, 150, dead_or_set: 1, 178
insn=145, live_throughout: 1, 2, 13, 150, dead_or_set: 0
insn=148, live_throughout: 13, 150, dead_or_set: 0, 1, 2, 14
insn=149, live_throughout: 13, 150, dead_or_set: 
insn=151, live_throughout: 13, 150, dead_or_set: 189
insn=227, live_throughout: 13, 150, 189, dead_or_set: 199
insn=228, live_throughout: 13, 150, 189, dead_or_set: 199
insn=152, live_throughout: 13, 150, 189, 199, dead_or_set: 190
insn=176, live_throughout: 13, 150, 189, 190, 199, dead_or_set: 0
insn=178, live_throughout: 0, 13, 150, 189, 190, 199, dead_or_set: 2
insn=237, live_throughout: 0, 2, 13, 150, 189, 190, 199, dead_or_set: 191
insn=155, live_throughout: 0, 2, 13, 150, 189, 199, dead_or_set: 190, 191
insn=179, live_throughout: 0, 2, 13, 150, 189, 199, dead_or_set: 3
insn=172, live_throughout: 0, 2, 3, 13, 150, 189, dead_or_set: 199, 201
insn=236, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 192
insn=157, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 192
insn=235, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 193
insn=159, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 193
insn=234, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 194
insn=161, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 194
insn=233, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 195
insn=163, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 195
insn=232, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 196
insn=165, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 196
insn=231, live_throughout: 0, 2, 3, 13, 150, 189, 201, dead_or_set: 198
insn=173, live_throughout: 0, 2, 3, 13, 150, 189, dead_or_set: 198, 201, 202
insn=166, live_throughout: 0, 2, 3, 13, 150, 189, 202, dead_or_set: 147
insn=167, live_throughout: 0, 2, 3, 13, 150, 189, 202, dead_or_set: 147
insn=174, live_throughout: 0, 2, 3, 13, 150, 189, dead_or_set: 147, 202
insn=177, live_throughout: 0, 2, 3, 13, 150, dead_or_set: 1, 189
insn=180, live_throughout: 13, 150, dead_or_set: 0, 1, 2, 3, 14
insn=181, live_throughout: 13, 14, dead_or_set: 0, 150
insn=182, live_throughout: 13, 14, dead_or_set: 0
insn=184, live_throughout: 13, 135, 150, 157, dead_or_set: 
insn=186, live_throughout: 13, 150, 157, dead_or_set: 0, 135
insn=187, live_throughout: 13, 150, 157, dead_or_set: 0, 14
insn=190, live_throughout: 13, 150, dead_or_set: 0, 157
insn=224, live_throughout: 13, 150, dead_or_set: 
init_insns for 151: (insn_list:REG_DEP_TRUE 241 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 46 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 55 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 91 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 92 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 240 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 239 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 124 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 238 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 151 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 152 (nil))
init_insns for 191: (insn_list:REG_DEP_TRUE 237 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 236 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 235 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 234 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 233 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 232 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 231 (nil))
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 47
changing reg in insn 186
changing reg in insn 51
changing reg in insn 48
changing reg in insn 129
changing reg in insn 131
changing reg in insn 137
changing reg in insn 133
changing reg in insn 136
changing reg in insn 126
changing reg in insn 127
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 90
changing reg in insn 90
changing reg in insn 39
changing reg in insn 15
changing reg in insn 43
changing reg in insn 37
changing reg in insn 21
changing reg in insn 16
changing reg in insn 30
changing reg in insn 39
changing reg in insn 35
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 174
changing reg in insn 2
changing reg in insn 181
changing reg in insn 176
changing reg in insn 174
changing reg in insn 165
changing reg in insn 163
changing reg in insn 161
changing reg in insn 159
changing reg in insn 157
changing reg in insn 241
changing reg in insn 7
changing reg in insn 7
changing reg in insn 13
changing reg in insn 8
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 190
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 91
changing reg in insn 97
changing reg in insn 92
changing reg in insn 92
changing reg in insn 92
changing reg in insn 95
changing reg in insn 240
changing reg in insn 95
changing reg in insn 97
changing reg in insn 100
changing reg in insn 239
changing reg in insn 100
changing reg in insn 123
changing reg in insn 131
changing reg in insn 124
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 129
changing reg in insn 238
changing reg in insn 129
changing reg in insn 136
changing reg in insn 146
changing reg in insn 144
changing reg in insn 147
changing reg in insn 151
changing reg in insn 177
changing reg in insn 152
changing reg in insn 152
changing reg in insn 152
changing reg in insn 155
changing reg in insn 237
changing reg in insn 155
changing reg in insn 236
changing reg in insn 157
changing reg in insn 235
changing reg in insn 159
changing reg in insn 234
changing reg in insn 161
changing reg in insn 233
changing reg in insn 163
changing reg in insn 232
changing reg in insn 165
changing reg in insn 231
changing reg in insn 173
changing reg in insn 228
changing reg in insn 227
changing reg in insn 228
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 212
changing reg in insn 81
changing reg in insn 214
changing reg in insn 115
Spilling for insn 43.
Spilling for insn 95.
Spilling for insn 100.
Spilling for insn 131.
Spilling for insn 227.
Using reg 3 for reload 0
Spilling for insn 155.
Spilling for insn 157.
Spilling for insn 159.
Spilling for insn 161.
Spilling for insn 163.
Spilling for insn 165.
Spilling for insn 174.
Spilling for insn 190.

Reloads for insn # 43
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [156])
                                                        (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [156])
                                                        (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])

Reloads for insn # 95
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:164 twd_base ] [164])
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:164 twd_base ] [164])
                                                        (const_int 8 [0x8])) [0 S4 A32])

Reloads for insn # 100
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:167 twd_base ] [167])
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:167 twd_base ] [167])
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 131
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [169])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [169])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])

Reloads for insn # 227
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 155
Reload 0: reload_out (SI) = (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:190 twd_base ] [190])
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:190 twd_base ] [190])
                                                        (const_int 8 [0x8])) [0 S4 A32])

Reloads for insn # 157
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 68 [0x44])) [0 <variable>.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 68 [0x44])) [0 <variable>.name+0 S4 A32])

Reloads for insn # 159
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 44 [0x2c])) [0 <variable>.features+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 44 [0x2c])) [0 <variable>.features+0 S4 A32])

Reloads for insn # 161
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 72 [0x48])) [0 <variable>.rating+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 72 [0x48])) [0 <variable>.rating+0 S4 A64])

Reloads for insn # 163
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 56 [0x38])) [0 <variable>.set_mode+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 56 [0x38])) [0 <variable>.set_mode+0 S4 A64])

Reloads for insn # 165
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 4 [0x4])) [0 <variable>.set_next_event+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                                                        (const_int 4 [0x4])) [0 <variable>.set_next_event+0 S4 A32])

Reloads for insn # 174
Reload 0: reload_out (SI) = (mem/f:SI (plus:SI (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
                                                        (reg:SI 14 lr [202])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f:SI (plus:SI (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
                                                        (reg:SI 14 lr [202])) [0 S4 A32])

Reloads for insn # 190
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [157])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [157])
                                                        (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
deleting insn with uid = 13.
deleting insn with uid = 147.
deleting insn with uid = 186.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 187.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 48 (    2)


twd_timer_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={32d,26u} r1={38d,24u} r2={25d,6u} r3={31d,14u,2d} r4={1d,8u} r5={4d,7u} r6={6d,10u,3d} r7={2d,3u,1d} r8={2d,2u} r9={2d,2u} r12={20d,2u,1d} r13={1d,42u} r14={21d,4u,1d} r15={18d} r16={18d} r17={18d} r18={18d} r19={18d} r20={18d} r21={18d} r22={18d} r23={18d} r24={30d,12u} r27={18d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={18d} r38={18d} r39={18d} r40={18d} r41={18d} r42={18d} r43={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} r81={18d} r82={18d} r83={18d} r84={18d} r85={18d} r86={18d} r87={18d} r88={18d} r89={18d} r90={18d} r91={18d} r92={18d} r93={18d} r94={18d} r95={18d} r96={18d} r97={18d} r98={18d} r99={18d} r100={18d} r101={18d} r102={18d} r103={18d} r104={18d} r105={18d} r106={18d} r107={18d} r108={18d} r109={18d} r110={18d} r111={18d} r112={18d} r113={18d} r114={18d} r115={18d} r116={18d} r117={18d} r118={18d} r119={18d} r120={18d} r121={18d} r122={18d} r123={18d} r124={18d} r125={18d} r126={18d} r127={18d} 
;;    total ref usage 2365{2195d,162u,8e} in 122{104 regular + 18 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 241 2 arch/arm/kernel/smp_twd.c:195 (set (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
        (reg:SI 0 r0 [ clk ])) 167 {*arm_movsi_insn} (nil))

(insn 241 2 7 2 arch/arm/kernel/smp_twd.c:196 (set (reg/f:SI 3 r3 [151])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 7 241 8 2 arch/arm/kernel/smp_twd.c:196 (set (reg/f:SI 1 r1 [orig:152 twd_clk ] [152])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
        (nil)))

(insn 8 7 9 2 arch/arm/kernel/smp_twd.c:196 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [orig:152 twd_clk ] [152])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/kernel/smp_twd.c:196 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
        (nil)))
;; End of basic block 2 -> ( 3 8)
;; lr  out 	 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  3 [6.7%]  (fallthru)
;; Succ edge  8 [93.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [6.7%]  (fallthru)
(note 10 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 10 14 3 arch/arm/kernel/smp_twd.c:175 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fc9390>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10fc9390>)
        (nil)))

(call_insn 14 12 15 3 arch/arm/kernel/smp_twd.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_sys") [flags 0x41] <function_decl 0x10a60980 clk_get_sys>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 14 16 3 arch/arm/kernel/smp_twd.c:175 (set (reg/v/f:SI 5 r5 [orig:145 clk ] [145])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 3 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:145 clk ] [145])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 18 17 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 18 20 4 arch/arm/kernel/smp_twd.c:177 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:145 clk ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 20 21 22 4 arch/arm/kernel/smp_twd.c:177 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10fe42c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10fe42c0>)
        (nil)))

(call_insn 22 20 218 4 arch/arm/kernel/smp_twd.c:177 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 218 22 219 4 (set (pc)
        (label_ref 40)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 219 218 25)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [100.0%] 
(code_label 25 219 26 5 37 "" [1 uses])

(note 26 25 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 29 26 28 5 NOTE_INSN_DELETED)

(call_insn 28 29 30 5 arch/arm/kernel/smp_twd.c:181 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_enable") [flags 0x41] <function_decl 0x10a60500 clk_enable>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 31 5 arch/arm/kernel/smp_twd.c:182 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:146 err ] [146])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 31 30 32 5 arch/arm/kernel/smp_twd.c:182 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 32 31 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 35 32 34 6 arch/arm/kernel/smp_twd.c:183 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:146 err ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 34 35 36 6 arch/arm/kernel/smp_twd.c:183 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10fb2e10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10fb2e10>)
        (nil)))

(call_insn 36 34 37 6 arch/arm/kernel/smp_twd.c:183 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 37 36 38 6 arch/arm/kernel/smp_twd.c:184 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:145 clk ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn 38 37 39 6 arch/arm/kernel/smp_twd.c:184 (parallel [
            (call (mem:SI (symbol_ref:SI ("clk_put") [flags 0x41] <function_decl 0x10a60680 clk_put>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 39 38 40 6 arch/arm/kernel/smp_twd.c:185 (set (reg/v/f:SI 5 r5 [orig:145 clk ] [145])
        (reg/v:SI 6 r6 [orig:146 err ] [146])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
(code_label 40 39 41 7 38 "" [2 uses])

(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 7 arch/arm/kernel/smp_twd.c:197 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 43 42 44 7 arch/arm/kernel/smp_twd.c:197 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [156])
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:145 clk ] [145])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 2 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [93.3%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 44 43 45 8 36 "" [1 uses])

(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 8 arch/arm/kernel/smp_twd.c:199 (set (reg/f:SI 5 r5 [157])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 47 46 48 8 arch/arm/kernel/smp_twd.c:199 (set (reg/f:SI 0 r0 [orig:135 twd_clk.403 ] [135])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [157])
                (const_int 8 [0x8])) [0 twd_clk+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 twd_clk+0 S4 A32])
        (nil)))

(insn 48 47 49 8 include/linux/err.h:39 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:135 twd_clk.403 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 49 48 50 8 include/linux/err.h:39 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  10 [15.0%] 
;; Succ edge  9 [85.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [85.0%]  (fallthru)
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 9 include/linux/err.h:39 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:135 twd_clk.403 ] [135])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 53 9 include/linux/err.h:39 discrim 2 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 9 -> ( 10 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [15.0%] 
;; Pred edge  9 [0.0%]  (fallthru)
(code_label 53 52 54 10 39 "" [1 uses])

(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 10 arch/arm/kernel/smp_twd.c:140 (set (reg/f:SI 3 r3 [158])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 56 55 57 10 arch/arm/kernel/smp_twd.c:140 (set (reg:SI 3 r3 [orig:159 twd_timer_rate ] [159])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [158])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 twd_timer_rate+0 S4 A32])
        (nil)))

(insn 57 56 58 10 arch/arm/kernel/smp_twd.c:140 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:159 twd_timer_rate ] [159])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 10 arch/arm/kernel/smp_twd.c:140 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 149)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 10 -> ( 11 22)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 7 [r7]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  10 [0.0%]  (fallthru)
(note 59 58 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 64 59 61 11 NOTE_INSN_DELETED)

(insn 61 64 65 11 arch/arm/kernel/smp_twd.c:141 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10fcab40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10fcab40>)
        (nil)))

(insn 65 61 62 11 arch/arm/kernel/smp_twd.c:144 (set (reg/v:DI 6 r6 [orig:144 waitjiffies ] [144])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(call_insn 62 65 63 11 arch/arm/kernel/smp_twd.c:141 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 63 62 66 11 arch/arm/kernel/smp_twd.c:144 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 66 63 220 11 arch/arm/kernel/smp_twd.c:144 (parallel [
            (set (reg/v:DI 6 r6 [orig:144 waitjiffies ] [144])
                (plus:DI (reg/v:DI 6 r6 [orig:144 waitjiffies ] [144])
                    (reg:DI 0 r0)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(jump_insn 220 66 221 11 (set (pc)
        (label_ref 72)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 221 220 76)

;; Start of basic block ( 13 15) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [50.0%] 
;; Pred edge  15 [50.0%] 
(code_label 76 221 69 12 43 "" [2 uses])

(note 69 76 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 71 69 72 12 arch/arm/kernel/smp_twd.c:147 (parallel [
            (call (mem:SI (symbol_ref:SI ("__udelay") [flags 0x41] <function_decl 0x10eb2d80 __udelay>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru,dfs_back)
;; Pred edge  11 [100.0%] 
(code_label 72 71 73 13 42 "" [1 uses])

(note 73 72 213 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 213 73 74 13 NOTE_INSN_DELETED)

(call_insn 74 213 212 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 212 74 217 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:SI 3 r3 [orig:205 D.14353 ] [205])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 217 212 77 13 arch/arm/kernel/smp_twd.c:147 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 77 217 78 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ waitjiffies+4 ])
            (reg:SI 1 r1 [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 78 77 198 13 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 12 14)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]


;; Succ edge  12 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 198 78 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 80 198 199 14 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 210)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 14 -> ( 16 15)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  16 [71.0%]  (loop_exit)
;; Succ edge  15 [29.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [29.0%]  (fallthru)
(note 199 80 81 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 81 199 82 15 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:144 waitjiffies ] [144])
            (reg:SI 3 r3 [orig:205 D.14353 ] [205]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 82 81 210 15 arch/arm/kernel/smp_twd.c:146 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15 -> ( 12 16)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  15 [50.0%]  (fallthru,loop_exit)
;; Pred edge  14 [71.0%]  (loop_exit)
(code_label 210 82 88 16 49 "" [1 uses])

(note 88 210 91 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 91 88 89 16 arch/arm/kernel/smp_twd.c:153 (set (reg/f:SI 3 r3 [163])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 89 91 90 16 arch/arm/kernel/smp_twd.c:150 (set (reg/v:DI 8 r8 [orig:134 waitjiffies.404 ] [134])
        (const_int 5 [0x5])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 90 89 92 16 arch/arm/kernel/smp_twd.c:150 (parallel [
            (set (reg/v:DI 8 r8 [orig:134 waitjiffies.404 ] [134])
                (plus:DI (reg/v:DI 8 r8 [orig:134 waitjiffies.404 ] [134])
                    (reg/v:DI 6 r6 [orig:144 waitjiffies ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg/v:DI 6 r6 [orig:144 waitjiffies ] [144])
            (const_int 5 [0x5]))
        (nil)))

(insn 92 90 240 16 arch/arm/kernel/smp_twd.c:153 (set (reg/f:SI 2 r2 [orig:164 twd_base ] [164])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [163]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [163]) [0 twd_base+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 240 92 95 16 arch/arm/kernel/smp_twd.c:153 (set (reg:SI 1 r1 [165])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 95 240 97 16 arch/arm/kernel/smp_twd.c:153 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:164 twd_base ] [164])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 r1 [165])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 97 95 239 16 arch/arm/kernel/smp_twd.c:156 (set (reg/f:SI 3 r3 [orig:167 twd_base ] [167])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [163]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
        (nil)))

(insn 239 97 100 16 arch/arm/kernel/smp_twd.c:156 (set (reg:SI 2 r2 [168])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 100 239 222 16 arch/arm/kernel/smp_twd.c:156 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:167 twd_base ] [167])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 2 r2 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 222 100 223 16 (set (pc)
        (label_ref 106)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 223 222 110)

;; Start of basic block ( 18 20) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  18 [50.0%] 
;; Pred edge  20 [50.0%] 
(code_label 110 223 103 17 46 "" [2 uses])

(note 103 110 105 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(call_insn 105 103 106 17 arch/arm/kernel/smp_twd.c:159 (parallel [
            (call (mem:SI (symbol_ref:SI ("__udelay") [flags 0x41] <function_decl 0x10eb2d80 __udelay>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  17 [100.0%]  (fallthru,dfs_back)
;; Pred edge  16 [100.0%] 
(code_label 106 105 107 18 45 "" [1 uses])

(note 107 106 215 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 215 107 108 18 NOTE_INSN_DELETED)

(call_insn 108 215 214 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_jiffies_64") [flags 0x41] <function_decl 0x10d1c400 get_jiffies_64>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 214 108 216 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:SI 3 r3 [orig:207 D.14348 ] [207])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 216 214 111 18 arch/arm/kernel/smp_twd.c:159 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 111 216 112 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [ waitjiffies.404+4 ])
            (reg:SI 1 r1 [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 203 18 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 17 19)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp] 24 [cc]


;; Succ edge  17 [50.0%] 
;; Succ edge  19 [50.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 203 112 114 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(jump_insn 114 203 204 19 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  21 [71.0%]  (loop_exit)
;; Succ edge  20 [29.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [29.0%]  (fallthru)
(note 204 114 115 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 115 204 116 20 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:134 waitjiffies.404 ] [134])
            (reg:SI 3 r3 [orig:207 D.14348 ] [207]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 116 115 211 20 arch/arm/kernel/smp_twd.c:158 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 20 -> ( 17 21)
;; lr  out 	 0 [r0] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  17 [50.0%] 
;; Succ edge  21 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 20 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  20 [50.0%]  (fallthru,loop_exit)
;; Pred edge  19 [71.0%]  (loop_exit)
(code_label 211 116 122 21 50 "" [1 uses])

(note 122 211 123 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 134 21 arch/arm/kernel/smp_twd.c:161 (set (reg/f:SI 3 r3 [169])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 134 123 124 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 1000000 [0xf4240])) 167 {*arm_movsi_insn} (nil))

(insn 124 134 126 21 arch/arm/kernel/smp_twd.c:161 (set (reg/f:SI 2 r2 [orig:170 twd_base ] [170])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [169]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [169]) [0 twd_base+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 126 124 127 21 arch/arm/kernel/smp_twd.c:161 (set (reg/v:SI 6 r6 [orig:143 count ] [143])
        (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:170 twd_base ] [170])
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 127 126 238 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 6 r6 [171])
        (not:SI (reg/v:SI 6 r6 [orig:143 count ] [143]))) 134 {*arm_one_cmplsi2} (nil))

(insn 238 127 129 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 2 r2 [172])
        (const_int 20 [0x14])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 20 [0x14])
        (nil)))

(insn 129 238 133 21 arch/arm/kernel/smp_twd.c:163 (set (reg:SI 6 r6 [orig:142 twd_timer_rate.214 ] [142])
        (mult:SI (reg:SI 2 r2 [172])
            (reg:SI 6 r6 [171]))) 32 {*arm_mulsi3_v6} (expr_list:REG_EQUAL (mult:SI (reg:SI 6 r6 [171])
            (const_int 20 [0x14]))
        (nil)))

(insn 133 129 131 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:142 twd_timer_rate.214 ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 131 133 135 21 arch/arm/kernel/smp_twd.c:163 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [169])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 6 r6 [orig:142 twd_timer_rate.214 ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 135 131 136 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 136 135 137 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 5 r5 [178])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (udiv:SI (reg:SI 6 r6 [orig:142 twd_timer_rate.214 ] [142])
            (const_int 1000000 [0xf4240]))
        (nil)))

(insn 137 136 138 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:142 twd_timer_rate.214 ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 138 137 139 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 10000 [0x2710])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 139 138 142 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidiv") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 142 139 143 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (const_int 100 [0x64])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 143 142 144 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_uidivmod") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 144 143 146 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 2 r2 [orig:188+4 ] [188])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 146 144 145 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 1 r1)
        (reg:SI 5 r5 [178])) 167 {*arm_movsi_insn} (nil))

(insn 145 146 148 21 arch/arm/kernel/smp_twd.c:165 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10ff0a80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10ff0a80>)
        (nil)))

(call_insn 148 145 149 21 arch/arm/kernel/smp_twd.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 21 -> ( 22)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 10 23) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
;; Pred edge  23 [100.0%] 
(code_label 149 148 150 22 41 "" [2 uses])

(note 150 149 170 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 170 150 151 22 NOTE_INSN_DELETED)

(insn 151 170 243 22 arch/arm/kernel/smp_twd.c:204 (set (reg/f:SI 12 ip [189])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 243 151 227 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 227 243 228 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 1 r1 [199])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 228 227 152 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 1 r1 [199])
        (and:SI (reg:SI 1 r1 [199])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 152 228 176 22 arch/arm/kernel/smp_twd.c:204 (set (reg/f:SI 3 r3 [orig:190 twd_base ] [190])
        (mem/f/c/i:SI (reg/f:SI 12 ip [189]) [0 twd_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 12 ip [189]) [0 twd_base+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 twd_base+0 S4 A32])
            (nil))))

(insn 176 152 178 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:150 clk ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 178 176 237 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 2 r2)
        (const_int 15 [0xf])) 167 {*arm_movsi_insn} (nil))

(insn 237 178 155 22 arch/arm/kernel/smp_twd.c:204 (set (reg:SI 14 lr [191])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 155 237 179 22 arch/arm/kernel/smp_twd.c:204 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:190 twd_base ] [190])
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 14 lr [191])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 179 155 172 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 3 r3)
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 172 179 236 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 14 lr [orig:201 <variable>.cpu ] [201])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [199])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 236 172 157 22 arch/arm/kernel/smp_twd.c:206 (set (reg/f:SI 1 r1 [192])
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10ff00c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10ff00c0>)
        (nil)))

(insn 157 236 235 22 arch/arm/kernel/smp_twd.c:206 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 68 [0x44])) [0 <variable>.name+0 S4 A32])
        (reg/f:SI 1 r1 [192])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10ff00c0>)
        (nil)))

(insn 235 157 159 22 arch/arm/kernel/smp_twd.c:207 (set (reg:SI 1 r1 [193])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn 159 235 234 22 arch/arm/kernel/smp_twd.c:207 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 44 [0x2c])) [0 <variable>.features+0 S4 A32])
        (reg:SI 1 r1 [193])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(insn 234 159 161 22 arch/arm/kernel/smp_twd.c:209 (set (reg:SI 1 r1 [194])
        (const_int 350 [0x15e])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 350 [0x15e])
        (nil)))

(insn 161 234 233 22 arch/arm/kernel/smp_twd.c:209 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 72 [0x48])) [0 <variable>.rating+0 S4 A64])
        (reg:SI 1 r1 [194])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 350 [0x15e])
        (nil)))

(insn 233 161 163 22 arch/arm/kernel/smp_twd.c:210 (set (reg/f:SI 1 r1 [195])
        (symbol_ref:SI ("twd_set_mode") [flags 0x3] <function_decl 0x10f97d00 twd_set_mode>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("twd_set_mode") [flags 0x3] <function_decl 0x10f97d00 twd_set_mode>)
        (nil)))

(insn 163 233 232 22 arch/arm/kernel/smp_twd.c:210 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 56 [0x38])) [0 <variable>.set_mode+0 S4 A64])
        (reg/f:SI 1 r1 [195])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("twd_set_mode") [flags 0x3] <function_decl 0x10f97d00 twd_set_mode>)
        (nil)))

(insn 232 163 165 22 arch/arm/kernel/smp_twd.c:211 (set (reg/f:SI 1 r1 [196])
        (symbol_ref:SI ("twd_set_next_event") [flags 0x3] <function_decl 0x10f97e00 twd_set_next_event>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("twd_set_next_event") [flags 0x3] <function_decl 0x10f97e00 twd_set_next_event>)
        (nil)))

(insn 165 232 231 22 arch/arm/kernel/smp_twd.c:211 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 4 [0x4])) [0 <variable>.set_next_event+0 S4 A32])
        (reg/f:SI 1 r1 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("twd_set_next_event") [flags 0x3] <function_decl 0x10f97e00 twd_set_next_event>)
        (nil)))

(insn 231 165 173 22 arch/arm/kernel/smp_twd.c:213 (set (reg/f:SI 1 r1 [198])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)
        (nil)))

(insn 173 231 166 22 arch/arm/kernel/smp_twd.c:213 (set (reg:SI 14 lr [202])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 14 lr [orig:201 <variable>.cpu ] [201])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [198])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 14 lr [orig:201 <variable>.cpu ] [201])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10cd0ea0 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 166 173 167 22 arch/arm/kernel/smp_twd.c:213 (set (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 167 166 174 22 arch/arm/kernel/smp_twd.c:213 (set (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 5270655)) -1 (nil))

(insn 174 167 177 22 arch/arm/kernel/smp_twd.c:213 (set (mem/f:SI (plus:SI (reg/v:SI 1 r1 [orig:147 __ptr ] [147])
                (reg:SI 14 lr [202])) [0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:150 clk ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 177 174 180 22 arch/arm/kernel/smp_twd.c:215 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 12 ip [189])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 twd_timer_rate+0 S4 A32])
        (nil)))

(call_insn 180 177 181 22 arch/arm/kernel/smp_twd.c:215 (parallel [
            (call (mem:SI (symbol_ref:SI ("clockevents_config_and_register") [flags 0x41] <function_decl 0x10f21880 clockevents_config_and_register>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 181 180 182 22 arch/arm/kernel/smp_twd.c:219 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 clk ] [150])
                (const_int 76 [0x4c])) [0 <variable>.irq+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 182 181 183 22 arch/arm/kernel/smp_twd.c:219 (parallel [
            (call (mem:SI (symbol_ref:SI ("gic_enable_ppi") [flags 0x41] <function_decl 0x10f97c80 gic_enable_ppi>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 22 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 183 182 184)

;; Start of basic block ( 9) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%] 
(code_label 184 183 185 23 40 "" [1 uses])

(note 185 184 188 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 188 185 187 23 NOTE_INSN_DELETED)

(call_insn 187 188 190 23 arch/arm/kernel/smp_twd.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clk_get_rate") [flags 0x41] <function_decl 0x10a60600 clk_get_rate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 190 187 224 23 arch/arm/kernel/smp_twd.c:200 (set (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [157])
                (const_int 4 [0x4])) [0 twd_timer_rate+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 224 190 225 23 (set (pc)
        (label_ref 149)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 22)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 225 224 242)

(note 242 225 0 NOTE_INSN_DELETED)

