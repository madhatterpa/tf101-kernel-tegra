
;; Function armpmu_get_pmu_id (armpmu_get_pmu_id)[0:1305]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 28(l0): point = 0
   Insn 22(l0): point = 2
   Insn 15(l0): point = 5
   Insn 50(l0): point = 8
   Insn 10(l0): point = 10
   Insn 8(l0): point = 13
   Insn 7(l0): point = 15
   Insn 6(l0): point = 17
   Insn 5(l0): point = 19
 a0(r133): [8..10] [3..5]
 a1(r134): [13..17] [6..7]
 a2(r136): [18..19]
Compressing live ranges: from 22 to 10 - 45%
Ranges after the compression:
 a0(r133): [4..5] [0..1]
 a1(r134): [6..7] [2..3]
 a2(r136): [8..9]
+++Allocating 16 bytes for conflict table (uncompressed size 24)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=10
    allocnos=3, copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r133 1r134 2r136
    modified regnos: 133 134 136
    border:
    Pressure: GENERAL_REGS=2
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a2(r136,l0)
      Pushing a1(r134,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 0
      Popping a1(r134,l0)  -- assign reg 3
      Popping a2(r136,l0)  -- assign reg 3
Disposition:
    0:r133 l0     0    1:r134 l0     3    2:r136 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 136
insn=6, live_throughout: 13, 14, dead_or_set: 134, 136
insn=7, live_throughout: 13, 14, 134, dead_or_set: 
insn=8, live_throughout: 13, 14, 134, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 133
insn=50, live_throughout: 13, 14, 133, dead_or_set: 
insn=13, live_throughout: 13, 14, 134, dead_or_set: 
insn=15, live_throughout: 13, 14, dead_or_set: 133, 134
insn=16, live_throughout: 13, 14, 133, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 0, 133
insn=28, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 15
changing reg in insn 10
changing reg in insn 22
changing reg in insn 6
changing reg in insn 15
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 22.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


armpmu_get_pmu_id

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d} r3={3d,3u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 24{12d,12u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/perf_event.c:100 (set (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:100 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/perf_event.c:100 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [89.9%] 
;; Succ edge  3 [10.1%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 50 3 arch/arm/kernel/perf_event.c:98 (set (reg/v:SI 0 r0 [orig:133 id ] [133])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -19 [0xffffffffffffffed])
        (nil)))

(jump_insn 50 10 51 3 (set (pc)
        (label_ref 16)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 51 50 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [89.9%] 
(code_label 13 51 14 4 2 "" [1 uses])

(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 arch/arm/kernel/perf_event.c:101 (set (reg/v:SI 0 r0 [orig:133 id ] [133])
        (mem/s/j:SI (reg/f:SI 3 r3 [orig:134 armpmu.312 ] [134]) [0 <variable>.id+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 16 15 17 5 3 "" [1 uses])

(note 17 16 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 17 52 5 arch/arm/kernel/perf_event.c:104 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 52 28 53 NOTE_INSN_DELETED)

(note 53 52 0 NOTE_INSN_DELETED)


;; Function armpmu_get_max_events (armpmu_get_max_events)[0:1306]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 28(l0): point = 0
   Insn 22(l0): point = 2
   Insn 15(l0): point = 5
   Insn 32(l0): point = 8
   Insn 10(l0): point = 10
   Insn 8(l0): point = 13
   Insn 7(l0): point = 15
   Insn 6(l0): point = 17
   Insn 5(l0): point = 19
 a0(r133): [8..10] [3..5]
 a1(r134): [11..17] [6..7]
 a2(r136): [18..19]
Compressing live ranges: from 22 to 10 - 45%
Ranges after the compression:
 a0(r133): [4..5] [0..1]
 a1(r134): [6..7] [2..3]
 a2(r136): [8..9]
+++Allocating 16 bytes for conflict table (uncompressed size 24)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r133)<->a1(r134)@1000:move
  regions=1, blocks=6, points=10
    allocnos=3, copies=1, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r133 1r134 2r136
    modified regnos: 133 134 136
    border:
    Pressure: GENERAL_REGS=2
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a2(r136,l0)
      Pushing a0(r133,l0)
      Pushing a1(r134,l0)
      Popping a1(r134,l0)  -- assign reg 0
      Popping a0(r133,l0)  -- assign reg 0
      Popping a2(r136,l0)  -- assign reg 3
Disposition:
    0:r133 l0     0    1:r134 l0     0    2:r136 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 136
insn=6, live_throughout: 13, 14, dead_or_set: 134, 136
insn=7, live_throughout: 13, 14, 134, dead_or_set: 
insn=8, live_throughout: 13, 14, 134, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 133, 134
insn=32, live_throughout: 13, 14, 133, dead_or_set: 
insn=13, live_throughout: 13, 14, 134, dead_or_set: 
insn=15, live_throughout: 13, 14, dead_or_set: 133, 134
insn=16, live_throughout: 13, 14, 133, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 0, 133
insn=28, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 10
changing reg in insn 15
changing reg in insn 22
changing reg in insn 6
changing reg in insn 10
changing reg in insn 15
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 10.
deleting insn with uid = 22.


try_optimize_cfg iteration 1

Simplifying condjump 8 around jump 32
deleting insn with uid = 9.
deleting insn with uid = 32.
deleting insn with uid = 33.
deleting block 3
deleting insn with uid = 13.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


armpmu_get_max_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d} r2={1d} r3={2d,1u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 22{11d,11u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 14 2 arch/arm/kernel/perf_event.c:112 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [89.9%]  (fallthru)
;; Succ edge  5 [10.1%] 

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 14 8 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 arch/arm/kernel/perf_event.c:113 (set (reg/v:SI 0 r0 [orig:133 max_events ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:134 armpmu.313 ] [134])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [10.1%] 
(code_label 16 15 17 5 9 "" [1 uses])

(note 17 16 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 17 34 5 arch/arm/kernel/perf_event.c:116 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 34 28 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function perf_num_counters (perf_num_counters)[0:1307]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 28(l0): point = 0
   Insn 22(l0): point = 2
   Insn 15(l0): point = 5
   Insn 32(l0): point = 8
   Insn 10(l0): point = 10
   Insn 8(l0): point = 13
   Insn 7(l0): point = 15
   Insn 6(l0): point = 17
   Insn 5(l0): point = 19
 a0(r134): [8..10] [3..5]
 a1(r133): [11..17] [6..7]
 a2(r136): [18..19]
Compressing live ranges: from 22 to 10 - 45%
Ranges after the compression:
 a0(r134): [4..5] [0..1]
 a1(r133): [6..7] [2..3]
 a2(r136): [8..9]
+++Allocating 16 bytes for conflict table (uncompressed size 24)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r134)<->a1(r133)@1000:move
  regions=1, blocks=6, points=10
    allocnos=3, copies=1, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r134 1r133 2r136
    modified regnos: 133 134 136
    border:
    Pressure: GENERAL_REGS=2
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a2(r136,l0)
      Pushing a0(r134,l0)
      Pushing a1(r133,l0)
      Popping a1(r133,l0)  -- assign reg 0
      Popping a0(r134,l0)  -- assign reg 0
      Popping a2(r136,l0)  -- assign reg 3
Disposition:
    1:r133 l0     0    0:r134 l0     0    2:r136 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 136
insn=6, live_throughout: 13, 14, dead_or_set: 133, 136
insn=7, live_throughout: 13, 14, 133, dead_or_set: 
insn=8, live_throughout: 13, 14, 133, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 133, 134
insn=32, live_throughout: 13, 14, 134, dead_or_set: 
insn=13, live_throughout: 13, 14, 133, dead_or_set: 
insn=15, live_throughout: 13, 14, dead_or_set: 133, 134
insn=16, live_throughout: 13, 14, 134, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 0, 134
insn=28, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 6
changing reg in insn 10
changing reg in insn 15
changing reg in insn 7
changing reg in insn 10
changing reg in insn 15
changing reg in insn 22
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 10.
deleting insn with uid = 22.


try_optimize_cfg iteration 1

Simplifying condjump 8 around jump 32
deleting insn with uid = 9.
deleting insn with uid = 32.
deleting insn with uid = 33.
deleting block 3
deleting insn with uid = 13.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


perf_num_counters

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d} r2={1d} r3={2d,1u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 22{11d,11u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/perf_event.c:112 (set (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:112 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 14 2 arch/arm/kernel/perf_event.c:112 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [89.9%]  (fallthru)
;; Succ edge  5 [10.1%] 

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 14 8 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 arch/arm/kernel/perf_event.c:113 (set (reg/v:SI 0 r0 [orig:134 max_events ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [orig:133 armpmu.313 ] [133])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [10.1%] 
(code_label 16 15 17 5 15 "" [1 uses])

(note 17 16 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 17 34 5 arch/arm/kernel/perf_event.c:122 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 34 28 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function armpmu_event_update (armpmu_event_update)[0:1312]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 91.
verify found no changes in insn with uid = 91.
deleting insn with uid = 35.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 19 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 20 (  1.8)

Pass 0 for finding allocno costs

    a37 (r167,l2) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r153,l2) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r152,l2) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r151,l2) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r149,l2) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r144,l2) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r142,l2) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r133,l2) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a22(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r144,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a34(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a35(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a36(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a37(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a38(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r167: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a22(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r144,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a34(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a35(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a36(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a37(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a38(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 68(l0): point = 0
   Insn 76(l0): point = 2
   Insn 77(l0): point = 4
   Insn 57(l0): point = 6
   Insn 56(l0): point = 10
   Insn 55(l0): point = 12
   Insn 54(l0): point = 16
   Insn 51(l0): point = 19
   Insn 88(l0): point = 28
   Insn 46(l0): point = 30
   Insn 45(l0): point = 38
   Insn 44(l0): point = 44
   Insn 43(l0): point = 50
   Insn 41(l0): point = 53
   Insn 39(l0): point = 55
   Insn 38(l0): point = 60
   Insn 37(l0): point = 65
   Insn 36(l0): point = 67
   Insn 91(l0): point = 69
   Insn 40(l0): point = 71
   Insn 10(l0): point = 74
   Insn 5(l0): point = 76
   Insn 4(l0): point = 78
   Insn 2(l0): point = 80
   Insn 14(l0): point = 82
   Insn 3(l0): point = 84
   Insn 33(l1): point = 87
   Insn 32(l1): point = 89
   Insn 31(l1): point = 92
   Insn 30(l1): point = 94
   Insn 28(l1): point = 96
   Insn 21(l1): point = 99
   Insn 20(l1): point = 101
   Insn 18(l1): point = 103
   Insn 17(l1): point = 105
   Insn 15(l1): point = 107
   Insn 13(l1): point = 109
   Insn 26(l2): point = 113
   Insn 25(l2): point = 115
   Insn 23(l2): point = 117
 a0(r134): [63..63] [3..61]
 a1(r136): [6..7]
 a2(r135): [7..10]
 a3(r146): [28..50] [22..22] [7..20]
 a4(r152): [6..84]
 a5(r137): [8..8] [6..6]
 a6(r139): [12..13]
 a7(r138): [13..16]
 a8(r151): [12..80]
 a9(r140): [14..14] [12..12]
 a10(r145): [58..58] [34..56] [31..32] [23..27] [20..21]
 a11(r147): [45..65]
 a12(r141): [56..73]
 a13(r144): [61..73]
 a14(r159): [66..67]
 a15(r158): [68..69]
 a16(r154): [72..76]
 a17(r149): [74..74]
 a18(r153): [74..78]
 a19(r167): [74..82]
 a20(r149): [87..112]
 a21(r151): [87..112]
 a22(r152): [87..112]
 a23(r153): [87..112]
 a24(r154): [87..112]
 a25(r167): [87..112]
 a26(r141): [87..98]
 a27(r144): [87..101]
 a28(r133): [90..110]
 a29(r156): [104..107]
 a30(r133): [113..121]
 a31(r144): [113..121]
 a32(r149): [113..121]
 a33(r151): [113..121]
 a34(r152): [113..121]
 a35(r153): [113..121]
 a36(r154): [113..121]
 a37(r167): [113..121]
 a38(r141): [119..119] [113..117]
 a39(r142): [116..118]
 Rebuilding regno allocno list for 156
 Rebuilding regno allocno list for 142
 Rebuilding regno allocno list for 133
Compressing live ranges: from 122 to 50 - 40%
Ranges after the compression:
 a0(r134): [23..23] [0..22]
 a1(r136): [1..2]
 a2(r135): [2..4]
 a3(r146): [14..19] [11..11] [2..9]
 a4(r152): [37..49] [1..36]
 a5(r137): [3..3] [1..1]
 a6(r139): [5..6]
 a7(r138): [6..8]
 a8(r151): [37..49] [5..34]
 a9(r140): [7..7] [5..5]
 a10(r145): [21..21] [17..20] [15..16] [12..13] [9..10]
 a11(r147): [18..24]
 a12(r141): [48..48] [44..46] [37..39] [20..30]
 a13(r144): [44..49] [37..40] [22..30]
 a14(r159): [25..26]
 a15(r158): [27..28]
 a16(r154): [37..49] [29..32]
 a17(r149): [37..49] [31..31]
 a18(r153): [37..49] [31..33]
 a19(r167): [37..49] [31..35]
 a28(r133): [44..49] [38..43]
 a29(r156): [41..42]
 a39(r142): [45..47]
+++Allocating 184 bytes for conflict table (uncompressed size 320)
;; a0(r134,l0) conflicts: a1(r136,l0) a5(r137,l0) a4(r152,l0) a2(r135,l0) a3(r146,l0) a6(r139,l0) a9(r140,l0) a8(r151,l0) a7(r138,l0) a10(r145,l0) a11(r147,l0) a12(r141,l0) a13(r144,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a1(r136,l0) conflicts: a0(r134,l0) a5(r137,l0) a4(r152,l0) a2(r135,l0) a3(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r135,l0) conflicts: a0(r134,l0) a1(r136,l0) a5(r137,l0) a4(r152,l0) a3(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r146,l0) conflicts: a0(r134,l0) a1(r136,l0) a5(r137,l0) a4(r152,l0) a2(r135,l0) a6(r139,l0) a9(r140,l0) a8(r151,l0) a7(r138,l0) a10(r145,l0) a11(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r152,l0) conflicts: a0(r134,l0) a1(r136,l0) a5(r137,l0) a2(r135,l0) a3(r146,l0) a6(r139,l0) a9(r140,l0) a8(r151,l0) a7(r138,l0) a10(r145,l0) a11(r147,l0) a12(r141,l0) a13(r144,l0) a14(r159,l0) a15(r158,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a5(r137,l0) conflicts: a0(r134,l0) a1(r136,l0) a4(r152,l0) a2(r135,l0) a3(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r139,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a9(r140,l0) a8(r151,l0) a7(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r138,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a6(r139,l0) a9(r140,l0) a8(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r151,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a6(r139,l0) a9(r140,l0) a7(r138,l0) a10(r145,l0) a11(r147,l0) a12(r141,l0) a13(r144,l0) a14(r159,l0) a15(r158,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a9(r140,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a6(r139,l0) a8(r151,l0) a7(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r145,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a8(r151,l0) a11(r147,l0) a12(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r147,l0) conflicts: a0(r134,l0) a4(r152,l0) a3(r146,l0) a8(r151,l0) a10(r145,l0) a12(r141,l0) a13(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r141,l0) conflicts: a0(r134,l0) a4(r152,l0) a8(r151,l0) a10(r145,l0) a11(r147,l0) a13(r144,l0) a14(r159,l0) a15(r158,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a39(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r144,l0) conflicts: a0(r134,l0) a4(r152,l0) a8(r151,l0) a11(r147,l0) a12(r141,l0) a14(r159,l0) a15(r158,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a39(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r159,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r158,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r154,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a17(r149,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a16(r154,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a18(r153,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a16(r154,l0) a17(r149,l0) a19(r167,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 3 14
;;     conflict hard regs: 0 3 14
;; a19(r167,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a28(r133,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a28(r133,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a29(r156,l0) a39(r142,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a29(r156,l0) conflicts: a4(r152,l0) a8(r151,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a39(r142,l0) conflicts: a4(r152,l0) a8(r151,l0) a12(r141,l0) a13(r144,l0) a16(r154,l0) a17(r149,l0) a18(r153,l0) a19(r167,l0) a28(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=3, blocks=11, points=50
    allocnos=40, copies=0, conflicts=0, ranges=44

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r134 1r136 2r135 3r146 4r152 5r137 6r139 7r138 8r151 9r140 10r145 11r147 12r141 13r144 14r159 15r158 16r154 17r149 18r153 19r167 28r133 29r156 39r142
    modified regnos: 133 134 135 136 137 138 139 140 141 142 144 145 146 147 149 151 152 153 154 156 158 159 167
    border:
    Pressure: GENERAL_REGS=14
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 156 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
      Pushing a9(r140,l0)
      Pushing a6(r139,l0)
      Pushing a5(r137,l0)
      Pushing a1(r136,l0)
      Pushing a15(r158,l0)
      Pushing a14(r159,l0)
      Pushing a10(r145,l0)
      Pushing a11(r147,l0)
      Pushing a7(r138,l0)
      Pushing a2(r135,l0)
      Pushing a3(r146,l0)
      Pushing a29(r156,l0)
      Pushing a0(r134,l0)
      Pushing a13(r144,l0)(potential spill: pri=1210, cost=30250)
      Pushing a39(r142,l0)
      Pushing a12(r141,l0)
      Pushing a16(r154,l0)
      Pushing a28(r133,l0)
      Pushing a17(r149,l0)
      Pushing a18(r153,l0)
      Pushing a19(r167,l0)
      Pushing a8(r151,l0)
      Pushing a4(r152,l0)
      Popping a4(r152,l0)  -- assign reg 4
      Popping a8(r151,l0)  -- assign reg 5
      Popping a19(r167,l0)  -- assign reg 6
      Popping a18(r153,l0)  -- assign reg 7
      Popping a17(r149,l0)  -- assign reg 8
      Popping a28(r133,l0)  -- assign reg 10
      Popping a16(r154,l0)  -- assign reg 9
      Popping a12(r141,l0)  -- assign reg 2
      Popping a39(r142,l0)  -- assign reg 1
      Popping a13(r144,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a0(r134,l0)  -- assign reg 6
      Popping a29(r156,l0)  -- assign reg 3
      Popping a3(r146,l0)  -- assign reg 2
      Popping a2(r135,l0)  -- assign reg 1
      Popping a7(r138,l0)  -- assign reg 1
      Popping a11(r147,l0)  -- assign reg 0
      Popping a10(r145,l0)  -- assign reg 8
      Popping a14(r159,l0)  -- assign reg 1
      Popping a15(r158,l0)  -- assign reg 1
      Popping a1(r136,l0)  -- assign reg 8
      Popping a5(r137,l0)  -- assign reg 0
      Popping a6(r139,l0)  -- assign reg 8
      Popping a9(r140,l0)  -- assign reg 0
Disposition:
   28:r133 l0    10    0:r134 l0     6    2:r135 l0     1    1:r136 l0     8
    5:r137 l0     0    7:r138 l0     1    6:r139 l0     8    9:r140 l0     0
   12:r141 l0     2   39:r142 l0     1   13:r144 l0   mem   10:r145 l0     8
    3:r146 l0     2   11:r147 l0     0   17:r149 l0     8    8:r151 l0     5
    4:r152 l0     4   18:r153 l0     7   16:r154 l0     9   29:r156 l0     3
   15:r158 l0     1   14:r159 l0     1   19:r167 l0     6
New iteration of spill/restore move
+++Costs: overall 30000, reg 0, mem 30000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, dead_or_set: 1, 152
insn=14, live_throughout: 0, 2, 3, 13, 152, dead_or_set: 167
insn=2, live_throughout: 2, 3, 13, 152, 167, dead_or_set: 0, 151
insn=4, live_throughout: 3, 13, 151, 152, 167, dead_or_set: 2, 153
insn=5, live_throughout: 13, 151, 152, 153, 167, dead_or_set: 3, 154
insn=10, live_throughout: 13, 151, 152, 153, 154, 167, dead_or_set: 149
insn=87, live_throughout: 13, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=13, live_throughout: 13, 149, 151, 152, 153, 154, 167, dead_or_set: 133
insn=15, live_throughout: 13, 133, 149, 151, 152, 153, 154, 167, dead_or_set: 156
insn=17, live_throughout: 13, 133, 149, 151, 152, 153, 154, 156, 167, dead_or_set: 0
insn=18, live_throughout: 13, 133, 149, 151, 152, 153, 154, 167, dead_or_set: 0, 14, 156
insn=20, live_throughout: 13, 14, 133, 149, 151, 152, 153, 154, 167, dead_or_set: 0, 144
insn=21, live_throughout: 13, 14, 133, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=24, live_throughout: 13, 14, 133, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=23, live_throughout: 13, 14, 133, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 141, 142
insn=25, live_throughout: 13, 14, 133, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 142
insn=26, live_throughout: 13, 14, 133, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=28, live_throughout: 13, 14, 133, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=30, live_throughout: 13, 14, 133, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=31, live_throughout: 13, 14, 133, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=32, live_throughout: 13, 14, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 133
insn=33, live_throughout: 13, 14, 141, 144, 149, 151, 152, 153, 154, 167, dead_or_set: 
insn=40, live_throughout: 13, 14, 141, 144, 151, 152, dead_or_set: 154
insn=91, live_throughout: 13, 14, 24, 141, 144, 151, 152, dead_or_set: 158
insn=36, live_throughout: 13, 14, 24, 141, 144, 151, 152, dead_or_set: 158, 159
insn=37, live_throughout: 13, 14, 24, 141, 144, 151, 152, dead_or_set: 147, 159
insn=38, live_throughout: 13, 14, 24, 141, 147, 151, 152, dead_or_set: 134, 144
insn=39, live_throughout: 13, 14, 24, 134, 147, 151, 152, dead_or_set: 141, 145
insn=41, live_throughout: 13, 14, 134, 145, 147, 151, 152, dead_or_set: 
insn=43, live_throughout: 13, 14, 134, 145, 147, 151, 152, dead_or_set: 146
insn=44, live_throughout: 13, 14, 134, 145, 151, 152, dead_or_set: 146, 147
insn=45, live_throughout: 13, 14, 134, 145, 151, 152, dead_or_set: 146
insn=46, live_throughout: 13, 14, 134, 151, 152, dead_or_set: 145, 146
insn=88, live_throughout: 13, 14, 134, 146, 151, 152, dead_or_set: 
insn=49, live_throughout: 13, 14, 134, 145, 151, 152, dead_or_set: 
insn=51, live_throughout: 13, 14, 134, 151, 152, dead_or_set: 145, 146
insn=52, live_throughout: 13, 14, 134, 146, 151, 152, dead_or_set: 
insn=54, live_throughout: 13, 14, 134, 146, 151, 152, dead_or_set: 138
insn=55, live_throughout: 13, 14, 134, 146, 152, dead_or_set: 138, 139, 140, 151
insn=56, live_throughout: 13, 14, 134, 146, 152, dead_or_set: 135
insn=57, live_throughout: 13, 14, 134, dead_or_set: 135, 136, 137, 146, 152
insn=77, live_throughout: 13, 14, 134, dead_or_set: 1
insn=76, live_throughout: 1, 13, 14, dead_or_set: 0, 134
insn=68, live_throughout: 0, 1, 13, 14, dead_or_set: 
init_insns for 156: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 91 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 14 (nil))
      Slot 1 (freq,size): a13r144(5000,8)
      Assigning 144(freq=3000) a new slot 0
changing reg in insn 13
changing reg in insn 23
changing reg in insn 38
changing reg in insn 45
changing reg in insn 51
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 57
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 55
changing reg in insn 23
changing reg in insn 39
changing reg in insn 23
changing reg in insn 25
changing reg in insn 39
changing reg in insn 46
changing reg in insn 51
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 51
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 57
changing reg in insn 55
changing reg in insn 37
changing reg in insn 44
changing reg in insn 39
changing reg in insn 38
changing reg in insn 44
changing reg in insn 10
changing reg in insn 23
changing reg in insn 23
changing reg in insn 23
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 55
changing reg in insn 55
changing reg in insn 54
changing reg in insn 3
changing reg in insn 57
changing reg in insn 57
changing reg in insn 56
changing reg in insn 10
changing reg in insn 4
changing reg in insn 17
changing reg in insn 5
changing reg in insn 40
changing reg in insn 15
changing reg in insn 18
changing reg in insn 91
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
Spilling for insn 20.
Using reg 2 for reload 0
Spilling for insn 23.
Using reg 0 for reload 0
Spilling for insn 38.
Spilling for insn 51.
      Spill 142(a39), cost=20000: reassign to 12
changing reg in insn 23
changing reg in insn 25
 Register 142 now in 12.

Spilling for insn 20.
Using reg 2 for reload 0
Spilling for insn 23.
Using reg 0 for reload 0
Spilling for insn 38.
Spilling for insn 51.

Reloads for insn # 20
Reload 0: reload_out (DI) = (reg/v:DI 144 [ new_raw_count ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 144 [ new_raw_count ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 23
Reload 0: reload_in (DI) = (reg/v:DI 144 [ new_raw_count ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5)
	reload_in_reg: (reg/v:DI 144 [ new_raw_count ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 38
Reload 0: reload_in (DI) = (reg/v:DI 144 [ new_raw_count ])
	reload_out (DI) = (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 144 [ new_raw_count ])
	reload_out_reg: (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
	reload_reg_rtx: (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])

Reloads for insn # 51
Reload 0: reload_in (DI) = (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
	reload_out (DI) = (reg/v:DI 2 r2 [orig:146 delta ] [146])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
	reload_out_reg: (reg/v:DI 2 r2 [orig:146 delta ] [146])
	reload_reg_rtx: (reg/v:DI 2 r2 [orig:146 delta ] [146])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 18.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 19 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 20 (  1.8)


armpmu_event_update

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u,1d} r1={9d,11u,1d} r2={10d,10u} r3={11d,11u} r4={1d,4u} r5={1d,3u} r6={3d,5u,1d} r7={3d,5u} r8={4d,7u} r9={4d,3u} r10={1d,2u} r11={1d,2u} r12={3d,1u} r13={1d,14u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={12d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 279{184d,92u,3e} in 44{43 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 6 3 2 ("again") NOTE_INSN_DELETED_LABEL 20)

(insn 3 8 14 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
        (reg:SI 1 r1 [ hwc ])) 167 {*arm_movsi_insn} (nil))

(insn 14 3 2 2 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 6 r6 [167])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 2 14 4 2 arch/arm/kernel/perf_event.c:209 (set (reg/v/f:SI 5 r5 [orig:151 event ] [151])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 4 2 5 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 7 r7 [orig:153 idx ] [153])
        (reg:SI 2 r2 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 10 2 arch/arm/kernel/perf_event.c:209 (set (reg/v:SI 9 r9 [orig:154 overflow ] [154])
        (reg:SI 3 r3 [ overflow ])) 167 {*arm_movsi_insn} (nil))

(insn 10 5 87 2 arch/arm/kernel/perf_event.c:213 (set (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
        (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 6 2 5) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 10 [sl] 11 [fp]
;; live  kill	 14 [lr]

;; Pred edge  6 [71.0%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  5 [71.0%]  (dfs_back)
(code_label 87 10 86 3 29 "" [2 uses])

(note 86 87 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 86 19 3 NOTE_INSN_DELETED)

(note 19 16 13 3 NOTE_INSN_DELETED)

(insn 13 19 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                (mem/s/j:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(insn 15 13 17 3 arch/arm/kernel/perf_event.c:214 (set (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [167]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 17 15 18 3 arch/arm/kernel/perf_event.c:214 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:153 idx ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn 18 17 20 3 arch/arm/kernel/perf_event.c:214 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 armpmu ] [156])
                                (const_int 24 [0x18])) [0 <variable>.read_counter+0 S4 A64]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 18 93 3 arch/arm/kernel/perf_event.c:214 (set (reg:DI 2 r2)
        (zero_extend:DI (reg:SI 0 r0))) 138 {*arm_zero_extendsidi2} (nil))

(insn 93 20 21 3 arch/arm/kernel/perf_event.c:214 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 21 93 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:356 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2641905)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  4 [86.0%]  (dfs_back)
(code_label 24 21 22 4 21 "" [1 uses])

(note 22 24 94 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 94 22 23 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (set (reg:DI 0 r0)
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn 23 94 25 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:359 (parallel [
            (set (reg/v:SI 12 ip [orig:142 res ] [142])
                (asm_operands/v:SI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 0 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (reg/v:DI 2 r2 [orig:141 oldval ] [141])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=&r") 1 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (set (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_cmpxchg
ldrexd		%1, %H1, [%3]
mov		%0, #0
teq		%1, %4
teqeq		%H1, %H4
strexdeq	%0, %5, %H5, [%3]") ("=Qo") 2 [
                        (reg/f:SI 8 r8 [orig:149 D.25228 ] [149])
                        (reg/v:DI 10 sl [orig:133 prev_raw_count.501 ] [133])
                        (reg:DI 0 r0)
                        (mem:DI (reg/f:SI 8 r8 [orig:149 D.25228 ] [149]) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2642290))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 25 23 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:142 res ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:368 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 4 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [86.0%]  (dfs_back)
;; Succ edge  5 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 30 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:370 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2643697)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 30 28 31 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 oldval ] [141])
            (reg:SI 10 sl [orig:133 prev_raw_count.501 ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 70 5 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  6 [29.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [29.0%]  (fallthru)
(note 70 31 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 70 33 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ oldval+4 ])
            (reg:SI 11 fp [ prev_raw_count.501+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 33 32 34 6 arch/arm/kernel/perf_event.c:216 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  3 [71.0%]  (dfs_back)
;; Succ edge  7 [29.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  6 [29.0%]  (fallthru,loop_exit)
(note 34 33 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 40 34 91 7 arch/arm/kernel/perf_event.c:223 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 9 r9 [orig:154 overflow ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 91 40 36 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 36 91 37 7 arch/arm/kernel/perf_event.c:220 (set (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [158]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 37 36 95 7 arch/arm/kernel/perf_event.c:220 (set (reg:DI 0 r0 [orig:147 D.25235 ] [147])
        (mem/s/j:DI (plus:SI (reg/f:SI 1 r1 [orig:159 armpmu ] [159])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 95 37 38 7 arch/arm/kernel/perf_event.c:220 (set (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn 38 95 39 7 arch/arm/kernel/perf_event.c:220 (set (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
        (and:DI (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])
            (reg:DI 0 r0 [orig:147 D.25235 ] [147]))) 64 {anddi3} (nil))

(insn 39 38 41 7 arch/arm/kernel/perf_event.c:221 (set (reg/v:DI 8 r8 [orig:145 prev_raw_count ] [145])
        (and:DI (reg/v:DI 2 r2 [orig:141 oldval ] [141])
            (reg:DI 0 r0 [orig:147 D.25235 ] [147]))) 64 {anddi3} (nil))

(jump_insn 41 39 42 7 arch/arm/kernel/perf_event.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  9 [61.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  7 [39.0%]  (fallthru)
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 8 arch/arm/kernel/perf_event.c:224 (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 44 43 45 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (plus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg:DI 0 r0 [orig:147 D.25235 ] [147])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 0 r0 [orig:147 D.25235 ] [147])
            (const_int 1 [0x1]))
        (nil)))

(insn 45 44 46 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (plus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 46 45 88 8 arch/arm/kernel/perf_event.c:224 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (minus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg/v:DI 8 r8 [orig:145 prev_raw_count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (nil))

(jump_insn 88 46 89 8 (set (pc)
        (label_ref 52)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 89 88 49)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  7 [61.0%] 
(code_label 49 89 50 9 23 "" [1 uses])

(note 50 49 96 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 96 50 51 9 arch/arm/kernel/perf_event.c:226 (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
        (reg/v:DI 6 r6 [orig:134 new_raw_count.500 ] [134])) 163 {*arm_movdi} (nil))

(insn 51 96 52 9 arch/arm/kernel/perf_event.c:226 (parallel [
            (set (reg/v:DI 2 r2 [orig:146 delta ] [146])
                (minus:DI (reg/v:DI 2 r2 [orig:146 delta ] [146])
                    (reg/v:DI 8 r8 [orig:145 prev_raw_count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 52 51 53 10 24 "" [1 uses])

(note 53 52 54 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:284 (set (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
        (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn 55 54 56 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:276 (parallel [
            (set (reg/v:DI 8 r8 [orig:139 result ] [139])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (reg/v:SI 0 r0 [orig:140 tmp ] [140])
                (asm_operands/v:SI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (set (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                        (const_int 56 [0x38])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_add
1:	ldrexd	%0, %H0, [%3]
	adds	%0, %0, %4
	adc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:138 D.26333 ] [138])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 5 r5 [orig:151 event ] [151])
                                (const_int 56 [0x38])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2631665))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 56 55 57 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:324 (set (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn 57 56 77 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:316 (parallel [
            (set (reg/v:DI 8 r8 [orig:136 result ] [136])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (reg/v:SI 0 r0 [orig:137 tmp ] [137])
                (asm_operands/v:SI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (set (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                        (const_int 104 [0x68])) [0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_sub
1:	ldrexd	%0, %H0, [%3]
	subs	%0, %0, %4
	sbc	%H0, %H0, %H4
	strexd	%1, %0, %H0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 1 r1 [orig:135 D.26338 ] [135])
                        (reg/v:DI 2 r2 [orig:146 delta ] [146])
                        (mem:DI (plus:SI (reg/v/f:SI 4 r4 [orig:152 hwc ] [152])
                                (const_int 104 [0x68])) [0 S8 A64])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("Qo") 0)
                    ] 2636785))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 77 57 76 10 arch/arm/kernel/perf_event.c:232 (set (reg:SI 1 r1 [+4 ])
        (reg:SI 7 r7 [ new_raw_count.500+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 76 77 68 10 arch/arm/kernel/perf_event.c:232 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:134 new_raw_count.500 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 68 76 90 10 arch/arm/kernel/perf_event.c:232 (use (reg/i:DI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 90 68 92 NOTE_INSN_DELETED)

(note 92 90 0 NOTE_INSN_DELETED)


;; Function armpmu_read (armpmu_read)[0:1313]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 15(l0): point = 1
   Insn 14(l0): point = 3
   Insn 13(l0): point = 5
   Insn 12(l0): point = 7
   Insn 8(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 2(l0): point = 16
 a0(r133): [6..14]
 a1(r134): [8..16]
Compressing live ranges: from 19 to 4 - 21%
Ranges after the compression:
 a0(r133): [0..2]
 a1(r134): [1..3]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r133,l0) conflicts: a1(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r134,l0) conflicts: a0(r133,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=5, points=4
    allocnos=2, copies=0, conflicts=2, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r133 1r134
    modified regnos: 133 134
    border:
    Pressure: GENERAL_REGS=5
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
      Pushing a1(r134,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 2
      Popping a1(r134,l0)  -- assign reg 1
Disposition:
    0:r133 l0     2    1:r134 l0     1
New iteration of spill/restore move
+++Costs: overall -4250, reg -4250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 13, 14, dead_or_set: 134
insn=6, live_throughout: 0, 13, 14, 134, dead_or_set: 133
insn=7, live_throughout: 0, 13, 14, 133, 134, dead_or_set: 
insn=8, live_throughout: 0, 13, 14, 133, 134, dead_or_set: 
insn=12, live_throughout: 0, 13, 14, 133, dead_or_set: 1, 134
insn=13, live_throughout: 0, 1, 13, 14, dead_or_set: 2, 133
insn=14, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3
insn=15, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
insn=22, live_throughout: 13, 14, dead_or_set: 
changing reg in insn 6
changing reg in insn 13
changing reg in insn 7
changing reg in insn 2
changing reg in insn 12
changing reg in insn 6
deleting insn with uid = 13.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


armpmu_read

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={2d,2u} r1={4d,3u} r2={3d,2u} r3={3d,1u} r12={2d} r13={1d,5u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 143{128d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/perf_event.c:236 (set (reg/v/f:SI 1 r1 [orig:134 event ] [134])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 7 2 arch/arm/kernel/perf_event.c:240 (set (reg:SI 2 r2 [orig:133 D.25248 ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.25248 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/perf_event.c:240 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  4 [36.7%] 
;; Succ edge  3 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [63.3%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 10 9 12 3 NOTE_INSN_DELETED)

(insn 12 10 14 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 1 r1 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 14 12 15 3 arch/arm/kernel/perf_event.c:243 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 15 14 16 3 arch/arm/kernel/perf_event.c:243 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 15 22)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [36.7%] 
(code_label 22 16 25 4 36 "" [1 uses])

(note 25 22 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 25 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)


;; Function armpmu_stop (armpmu_stop)[0:1314]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 41.
verify found no changes in insn with uid = 41.
deleting insn with uid = 7.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)

Pass 0 for finding allocno costs

    a1 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 30(l0): point = 1
   Insn 29(l0): point = 3
   Insn 28(l0): point = 5
   Insn 27(l0): point = 7
   Insn 25(l0): point = 9
   Insn 23(l0): point = 11
   Insn 26(l0): point = 13
   Insn 24(l0): point = 15
   Insn 22(l0): point = 17
   Insn 21(l0): point = 19
   Insn 19(l0): point = 21
   Insn 20(l0): point = 23
   Insn 17(l0): point = 25
   Insn 15(l0): point = 28
   Insn 14(l0): point = 30
   Insn 12(l0): point = 32
   Insn 10(l0): point = 35
   Insn 9(l0): point = 37
   Insn 8(l0): point = 39
   Insn 41(l0): point = 41
   Insn 2(l0): point = 43
 a0(r135): [2..43]
 a1(r142): [2..3]
 a2(r141): [4..5]
 a3(r138): [14..30]
 a4(r133): [16..25]
 a5(r134): [20..39]
 a6(r139): [31..32]
 a7(r137): [40..41]
Compressing live ranges: from 46 to 15 - 32%
Ranges after the compression:
 a0(r135): [0..14]
 a1(r142): [0..1]
 a2(r141): [2..3]
 a3(r138): [4..8]
 a4(r133): [5..7]
 a5(r134): [6..11]
 a6(r139): [9..10]
 a7(r137): [12..13]
+++Allocating 64 bytes for conflict table (uncompressed size 64)
;; a0(r135,l0) conflicts: a1(r142,l0) a2(r141,l0) a3(r138,l0) a4(r133,l0) a5(r134,l0) a6(r139,l0) a7(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r142,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r141,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r138,l0) conflicts: a0(r135,l0) a4(r133,l0) a5(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r133,l0) conflicts: a0(r135,l0) a3(r138,l0) a5(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r134,l0) conflicts: a0(r135,l0) a3(r138,l0) a4(r133,l0) a6(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r139,l0) conflicts: a0(r135,l0) a5(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r137,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r142)<->a2(r141)@125:shuffle
  cp1:a3(r138)<->a6(r139)@125:shuffle
  regions=1, blocks=6, points=15
    allocnos=8, copies=2, conflicts=3, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r135 1r142 2r141 3r138 4r133 5r134 6r139 7r137
    modified regnos: 133 134 135 137 138 139 141 142
    border:
    Pressure: GENERAL_REGS=7
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a7(r137,l0)
      Pushing a2(r141,l0)
      Pushing a1(r142,l0)
      Pushing a6(r139,l0)
      Pushing a3(r138,l0)
      Pushing a5(r134,l0)
      Pushing a4(r133,l0)
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 4
      Popping a4(r133,l0)  -- assign reg 5
      Popping a5(r134,l0)  -- assign reg 2
      Popping a3(r138,l0)  -- assign reg 6
      Popping a6(r139,l0)  -- assign reg 6
      Popping a1(r142,l0)  -- assign reg 3
      Popping a2(r141,l0)  -- assign reg 3
      Popping a7(r137,l0)  -- assign reg 3
Disposition:
    4:r133 l0     5    5:r134 l0     2    0:r135 l0     4    7:r137 l0     3
    3:r138 l0     6    6:r139 l0     6    2:r141 l0     3    1:r142 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 135
insn=41, live_throughout: 13, 14, 135, dead_or_set: 137
insn=8, live_throughout: 13, 14, 135, dead_or_set: 134, 137
insn=9, live_throughout: 13, 14, 134, 135, dead_or_set: 
insn=10, live_throughout: 13, 14, 134, 135, dead_or_set: 
insn=12, live_throughout: 13, 14, 134, 135, dead_or_set: 139
insn=14, live_throughout: 13, 14, 134, 135, dead_or_set: 138, 139
insn=15, live_throughout: 13, 14, 134, 135, 138, dead_or_set: 
insn=17, live_throughout: 13, 134, 135, 138, dead_or_set: 133
insn=20, live_throughout: 13, 133, 134, 135, 138, dead_or_set: 1
insn=19, live_throughout: 1, 13, 133, 134, 135, 138, dead_or_set: 0
insn=21, live_throughout: 13, 133, 135, 138, dead_or_set: 0, 1, 14, 134
insn=22, live_throughout: 13, 133, 135, 138, dead_or_set: 
insn=24, live_throughout: 13, 135, 138, dead_or_set: 1, 133
insn=26, live_throughout: 1, 13, 135, dead_or_set: 3, 138
insn=23, live_throughout: 1, 3, 13, 135, dead_or_set: 0
insn=25, live_throughout: 0, 1, 3, 13, 135, dead_or_set: 2
insn=27, live_throughout: 13, 135, dead_or_set: 0, 1, 2, 3, 14
insn=28, live_throughout: 13, 14, 135, dead_or_set: 141
insn=29, live_throughout: 13, 14, 135, dead_or_set: 141, 142
insn=30, live_throughout: 13, 14, dead_or_set: 135, 142
insn=36, live_throughout: 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 30 (nil))
changing reg in insn 17
changing reg in insn 24
changing reg in insn 19
changing reg in insn 8
changing reg in insn 21
changing reg in insn 9
changing reg in insn 2
changing reg in insn 30
changing reg in insn 28
changing reg in insn 25
changing reg in insn 23
changing reg in insn 20
changing reg in insn 17
changing reg in insn 12
changing reg in insn 29
changing reg in insn 28
changing reg in insn 12
changing reg in insn 41
changing reg in insn 8
changing reg in insn 14
changing reg in insn 26
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
Spilling for insn 30.

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 21.
deleting insn with uid = 21.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


armpmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,3u} r1={5d,2u} r2={5d,3u} r3={7d,4u} r4={1d,7u,3d} r5={1d,2u} r6={2d,3u} r12={3d} r13={1d,7u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 294{257d,34u,3e} in 21{19 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 4 41 2 arch/arm/kernel/perf_event.c:248 (set (reg/v/f:SI 4 r4 [orig:135 event ] [135])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 41 2 8 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 8 41 9 2 arch/arm/kernel/perf_event.c:251 (set (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/perf_event.c:251 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/perf_event.c:251 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 13 11 12 3 NOTE_INSN_DELETED)

(insn 12 13 14 3 arch/arm/kernel/perf_event.c:249 (set (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 14 12 15 3 arch/arm/kernel/perf_event.c:249 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [138])
                (and:SI (reg:SI 6 r6 [orig:139 <variable>.hw.state ] [139])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 15 14 16 3 arch/arm/kernel/perf_event.c:249 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 2 [r2] 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  5 [61.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [39.0%]  (fallthru)
(note 16 15 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 18 16 17 4 NOTE_INSN_DELETED)

(insn 17 18 20 4 arch/arm/kernel/perf_event.c:249 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 20 17 19 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 19 20 21 4 arch/arm/kernel/perf_event.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 21 19 22 4 arch/arm/kernel/perf_event.c:259 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 armpmu.327 ] [134])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 22 21 24 4 arch/arm/kernel/perf_event.c:260 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 8564613)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 24 22 26 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 26 24 23 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 3 r3)
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 26 25 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 event ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 25 23 27 4 arch/arm/kernel/perf_event.c:261 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn 27 25 28 4 arch/arm/kernel/perf_event.c:261 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 27 29 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 29 28 30 4 arch/arm/kernel/perf_event.c:262 (set (reg:SI 3 r3 [142])
        (ior:SI (reg:SI 3 r3 [orig:141 <variable>.hw.state ] [141])
            (const_int 3 [0x3]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 30 29 36 4 arch/arm/kernel/perf_event.c:262 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 event ] [135])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [142])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [10.1%] 
;; Pred edge  3 [61.0%] 
(code_label 36 30 39 5 39 "" [2 uses])

(note 39 36 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 40 39 42 NOTE_INSN_DELETED)

(note 42 40 0 NOTE_INSN_DELETED)


;; Function validate_event (validate_event)[0:1318]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 58.
verify found no changes in insn with uid = 58.
deleting insn with uid = 24.
scanning new insn with uid = 59.
verify found no changes in insn with uid = 59.
deleting insn with uid = 15.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)

Pass 0 for finding allocno costs

    a1 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 51(l0): point = 0
   Insn 45(l0): point = 2
   Insn 38(l0): point = 5
   Insn 55(l0): point = 8
   Insn 33(l0): point = 10
   Insn 30(l0): point = 12
   Insn 25(l0): point = 14
   Insn 58(l0): point = 16
   Insn 29(l0): point = 18
   Insn 28(l0): point = 20
   Insn 22(l0): point = 23
   Insn 21(l0): point = 25
   Insn 20(l0): point = 27
   Insn 18(l0): point = 30
   Insn 17(l0): point = 32
   Insn 59(l0): point = 34
   Insn 16(l0): point = 36
   Insn 13(l0): point = 38
   Insn 12(l0): point = 40
   Insn 10(l0): point = 42
   Insn 11(l0): point = 44
   Insn 2(l0): point = 46
   Insn 7(l0): point = 48
   Insn 3(l0): point = 50
 a0(r134): [8..10] [3..5]
 a1(r146): [13..14]
 a2(r145): [15..16]
 a3(r138): [19..48]
 a4(r136): [21..46]
 a5(r144): [26..27]
 a6(r137): [28..50]
 a7(r142): [33..34]
 a8(r143): [33..36]
Compressing live ranges: from 53 to 19 - 35%
Ranges after the compression:
 a0(r134): [2..3] [0..1]
 a1(r146): [4..5]
 a2(r145): [6..7]
 a3(r138): [8..17]
 a4(r136): [9..16]
 a5(r144): [10..11]
 a6(r137): [12..18]
 a7(r142): [13..14]
 a8(r143): [13..15]
+++Allocating 48 bytes for conflict table (uncompressed size 72)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r146,l0) conflicts:
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r145,l0) conflicts:
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a3(r138,l0) conflicts: a4(r136,l0) a5(r144,l0) a6(r137,l0) a7(r142,l0) a8(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r136,l0) conflicts: a3(r138,l0) a5(r144,l0) a6(r137,l0) a7(r142,l0) a8(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r144,l0) conflicts: a3(r138,l0) a4(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r137,l0) conflicts: a3(r138,l0) a4(r136,l0) a7(r142,l0) a8(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r142,l0) conflicts: a3(r138,l0) a4(r136,l0) a6(r137,l0) a8(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r143,l0) conflicts: a3(r138,l0) a4(r136,l0) a6(r137,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=7, points=19
    allocnos=9, copies=0, conflicts=0, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r134 1r146 2r145 3r138 4r136 5r144 6r137 7r142 8r143
    modified regnos: 134 136 137 138 142 143 144 145 146
    border:
    Pressure: GENERAL_REGS=7
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
      Pushing a8(r143,l0)
      Pushing a7(r142,l0)
      Pushing a5(r144,l0)
      Pushing a0(r134,l0)
      Pushing a2(r145,l0)
      Pushing a1(r146,l0)
      Pushing a4(r136,l0)
      Pushing a3(r138,l0)
      Pushing a6(r137,l0)
      Popping a6(r137,l0)  -- assign reg 4
      Popping a3(r138,l0)  -- assign reg 5
      Popping a4(r136,l0)  -- assign reg 6
      Popping a1(r146,l0)  -- assign reg 3
      Popping a2(r145,l0)  -- assign reg 3
      Popping a0(r134,l0)  -- assign reg 0
      Popping a5(r144,l0)  -- assign reg 3
      Popping a7(r142,l0)  -- assign reg 3
      Popping a8(r143,l0)  -- assign reg 2
Disposition:
    0:r134 l0     0    4:r136 l0     6    6:r137 l0     4    3:r138 l0     5
    7:r142 l0     3    8:r143 l0     2    5:r144 l0     3    2:r145 l0     3
    1:r146 l0     3
New iteration of spill/restore move
+++Costs: overall -4250, reg -4250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, dead_or_set: 1, 137
insn=7, live_throughout: 0, 13, 137, dead_or_set: 138
insn=2, live_throughout: 13, 137, 138, dead_or_set: 0, 136
insn=11, live_throughout: 13, 136, 137, 138, dead_or_set: 1
insn=10, live_throughout: 1, 13, 136, 137, 138, dead_or_set: 0
insn=12, live_throughout: 0, 1, 13, 136, 137, 138, dead_or_set: 2
insn=13, live_throughout: 13, 136, 137, 138, dead_or_set: 0, 1, 2, 14
insn=16, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 143
insn=59, live_throughout: 13, 14, 136, 137, 138, 143, dead_or_set: 142
insn=17, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 142, 143
insn=18, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 
insn=20, live_throughout: 13, 14, 136, 138, dead_or_set: 137, 144
insn=21, live_throughout: 13, 14, 136, 138, dead_or_set: 144
insn=22, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=28, live_throughout: 13, 138, dead_or_set: 0, 136
insn=29, live_throughout: 0, 13, dead_or_set: 1, 138
insn=58, live_throughout: 0, 1, 13, dead_or_set: 145
insn=25, live_throughout: 0, 1, 13, dead_or_set: 145, 146
insn=30, live_throughout: 13, dead_or_set: 0, 1, 14, 146
insn=33, live_throughout: 13, 14, dead_or_set: 0, 134
insn=55, live_throughout: 13, 14, 134, dead_or_set: 
insn=36, live_throughout: 13, 14, dead_or_set: 
insn=38, live_throughout: 13, 14, dead_or_set: 134
insn=39, live_throughout: 13, 14, 134, dead_or_set: 
insn=45, live_throughout: 13, 14, dead_or_set: 0, 134
insn=51, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 59 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 16 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 58 (nil))
changing reg in insn 33
changing reg in insn 38
changing reg in insn 45
changing reg in insn 2
changing reg in insn 28
changing reg in insn 3
changing reg in insn 11
changing reg in insn 20
changing reg in insn 16
changing reg in insn 16
changing reg in insn 7
changing reg in insn 29
changing reg in insn 10
changing reg in insn 59
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 58
changing reg in insn 25
changing reg in insn 25
changing reg in insn 30
deleting insn with uid = 45.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
rescanning insn with uid = 30.
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


validate_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,3u} r2={5d,2u,1d} r3={7d,4u} r4={1d,3u,1d} r5={1d} r6={1d,1u} r12={3d} r13={1d,11u,3d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 297{259d,33u,5e} in 23{21 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 3 2 NOTE_INSN_DELETED)

(insn 3 8 7 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 4 r4 [orig:137 event ] [137])
        (reg:SI 1 r1 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 2 2 arch/arm/kernel/perf_event.c:354 (set (reg/f:SI 5 r5 [138])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 2 7 11 2 arch/arm/kernel/perf_event.c:353 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (reg:SI 0 r0 [ cpuc ])) 167 {*arm_movsi_insn} (nil))

(insn 11 2 10 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 10 11 12 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 12 10 13 2 arch/arm/kernel/perf_event.c:354 (set (reg:SI 2 r2)
        (const_int 136 [0x88])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 136 [0x88])
        (nil)))

(call_insn 13 12 16 2 arch/arm/kernel/perf_event.c:354 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x11574200 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 13 59 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])
        (nil)))

(insn 59 16 17 2 arch/arm/kernel/perf_event.c:356 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 17 59 18 2 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (reg/f:SI 3 r3 [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/f:SI 2 r2 [orig:143 <variable>.pmu ] [143])
            (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
        (nil)))

(jump_insn 18 17 19 2 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  5 [78.4%] 
;; Succ edge  3 [21.6%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [21.6%]  (fallthru)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 3 arch/arm/kernel/perf_event.c:356 (set (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 event ] [137])
                (const_int 48 [0x30])) [0 <variable>.state+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 3 arch/arm/kernel/perf_event.c:356 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:144 <variable>.state ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 3 arch/arm/kernel/perf_event.c:356 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  5 [36.7%] 
;; Succ edge  4 [63.3%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  3 [63.3%]  (fallthru)
(note 23 22 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 27 23 31 4 NOTE_INSN_DELETED)

(note 31 27 32 4 NOTE_INSN_DELETED)

(note 32 31 28 4 NOTE_INSN_DELETED)

(insn 28 32 29 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 29 28 58 4 arch/arm/kernel/perf_event.c:359 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 58 29 25 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 25 58 30 4 arch/arm/kernel/perf_event.c:359 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn 30 25 33 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 33 30 55 4 arch/arm/kernel/perf_event.c:359 (parallel [
            (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
                (ge:SI (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(jump_insn 55 33 56 4 arch/arm/kernel/perf_event.c:359 (set (pc)
        (label_ref 39)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 56 55 36)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [36.7%] 
;; Pred edge  2 [78.4%] 
(code_label 36 56 37 5 43 "" [2 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 5 arch/arm/kernel/perf_event.c:357 (set (reg:SI 0 r0 [orig:134 D.25367 ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 39 38 40 6 44 "" [1 uses])

(note 40 39 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 40 57 6 arch/arm/kernel/perf_event.c:360 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 57 51 60 NOTE_INSN_DELETED)

(note 60 57 0 NOTE_INSN_DELETED)


;; Function armpmu_platform_irq (armpmu_platform_irq)[0:1320]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 28(l0): point = 0
   Insn 16(l0): point = 2
   Insn 9(l0): point = 4
   Insn 15(l0): point = 6
   Insn 8(l0): point = 8
   Insn 11(l0): point = 10
   Insn 7(l0): point = 12
 a0(r139): [3..4]
 a1(r138): [5..8]
 a2(r141): [7..10]
 a3(r137): [9..12]
Compressing live ranges: from 15 to 8 - 53%
Ranges after the compression:
 a0(r139): [0..1]
 a1(r138): [2..4]
 a2(r141): [3..6]
 a3(r137): [5..7]
+++Allocating 24 bytes for conflict table (uncompressed size 32)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r138,l0) conflicts: a2(r141,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r141,l0) conflicts: a1(r138,l0) a3(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a3(r137,l0) conflicts: a2(r141,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  regions=1, blocks=3, points=8
    allocnos=4, copies=0, conflicts=2, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r139 1r138 2r141 3r137
    modified regnos: 137 138 139 141
    border:
    Pressure: GENERAL_REGS=5
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a2(r141,l0)
      Pushing a3(r137,l0)
      Pushing a1(r138,l0)
      Pushing a0(r139,l0)
      Popping a0(r139,l0)  -- assign reg 3
      Popping a1(r138,l0)  -- assign reg 3
      Popping a3(r137,l0)  -- assign reg 3
      Popping a2(r141,l0)  -- assign reg 2
Disposition:
    3:r137 l0     3    1:r138 l0     3    0:r139 l0     3    2:r141 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 137
insn=11, live_throughout: 0, 1, 13, 137, dead_or_set: 141
insn=8, live_throughout: 0, 1, 13, 141, dead_or_set: 137, 138
insn=15, live_throughout: 0, 1, 13, 138, dead_or_set: 2, 141
insn=9, live_throughout: 0, 1, 2, 13, dead_or_set: 138, 139
insn=16, live_throughout: 13, dead_or_set: 0, 1, 2, 14, 139
insn=28, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 7
changing reg in insn 11
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 16
changing reg in insn 11
changing reg in insn 15


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


armpmu_platform_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={4d,2u} r3={5d,4u} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 143{129d,14u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 4 7 2 NOTE_INSN_DELETED)

(insn 7 12 11 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 11 7 8 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 11 15 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 15 8 9 2 arch/arm/kernel/perf_event.c:388 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:141 armpmu ] [141])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 9 15 16 2 arch/arm/kernel/perf_event.c:388 (set (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 16 9 28 2 arch/arm/kernel/perf_event.c:388 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 <variable>.dev.platform_data ] [139]) [0 <variable>.handle_irq+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 28 16 32 2 arch/arm/kernel/perf_event.c:389 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 32 28 33 NOTE_INSN_DELETED)

(note 33 32 0 NOTE_INSN_DELETED)


;; Function armpmu_enable (armpmu_enable)[0:1326]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)
scanning new insn with uid = 98.
verify found no changes in insn with uid = 98.
deleting insn with uid = 38.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)

Pass 0 for finding allocno costs

    a15 (r184,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r182,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r168,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r172,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a12(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a15(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r182,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r184: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS

  a0(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r172,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a12(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a15(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r182,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 81(l0): point = 1
   Insn 78(l0): point = 4
   Insn 77(l0): point = 6
   Insn 93(l0): point = 9
   Insn 50(l0): point = 11
   Insn 70(l0): point = 13
   Insn 49(l0): point = 15
   Insn 47(l0): point = 18
   Insn 43(l0): point = 20
   Insn 46(l0): point = 22
   Insn 42(l0): point = 24
   Insn 98(l0): point = 26
   Insn 36(l0): point = 28
   Insn 45(l0): point = 30
   Insn 41(l0): point = 32
   Insn 35(l0): point = 34
   Insn 96(l0): point = 36
   Insn 44(l0): point = 38
   Insn 95(l0): point = 40
   Insn 75(l1): point = 43
   Insn 74(l1): point = 45
   Insn 73(l1): point = 47
   Insn 62(l1): point = 49
   Insn 71(l1): point = 51
   Insn 92(l1): point = 55
   Insn 63(l1): point = 57
   Insn 57(l1): point = 60
   Insn 56(l1): point = 62
   Insn 61(l1): point = 64
   Insn 67(l1): point = 66
   Insn 55(l1): point = 68
 a0(r162): [2..8]
 a1(r167): [7..15]
 a2(r168): [9..11]
 a3(r184): [9..13]
 a4(r176): [14..38]
 a5(r166): [9..20]
 a6(r175): [21..24]
 a7(r165): [21..34]
 a8(r177): [23..30]
 a9(r171): [25..26]
 a10(r174): [25..32]
 a11(r172): [33..40]
 a12(r166): [43..70]
 a13(r167): [60..70] [43..55]
 a14(r168): [43..70]
 a15(r184): [43..70]
 a16(r162): [58..70] [43..51]
 a17(r182): [46..47]
 a18(r164): [63..68]
 Rebuilding regno allocno list for 182
 Rebuilding regno allocno list for 164
Compressing live ranges: from 71 to 30 - 42%
Ranges after the compression:
 a0(r162): [25..29] [20..23] [0..2]
 a1(r167): [26..29] [20..24] [1..7]
 a2(r168): [20..29] [3..4]
 a3(r184): [20..29] [3..5]
 a4(r176): [6..18]
 a5(r166): [20..29] [3..8]
 a6(r175): [9..11]
 a7(r165): [9..17]
 a8(r177): [10..14]
 a9(r171): [12..13]
 a10(r174): [12..15]
 a11(r172): [16..19]
 a17(r182): [21..22]
 a18(r164): [27..28]
+++Allocating 112 bytes for conflict table (uncompressed size 152)
;; a0(r162,l0) conflicts: a1(r167,l0) a2(r168,l0) a3(r184,l0) a5(r166,l0) a17(r182,l0) a18(r164,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r167,l0) conflicts: a0(r162,l0) a2(r168,l0) a3(r184,l0) a5(r166,l0) a4(r176,l0) a17(r182,l0) a18(r164,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r168,l0) conflicts: a0(r162,l0) a1(r167,l0) a3(r184,l0) a5(r166,l0) a17(r182,l0) a18(r164,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r184,l0) conflicts: a0(r162,l0) a1(r167,l0) a2(r168,l0) a5(r166,l0) a17(r182,l0) a18(r164,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r176,l0) conflicts: a1(r167,l0) a5(r166,l0) a6(r175,l0) a7(r165,l0) a8(r177,l0) a9(r171,l0) a10(r174,l0) a11(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r166,l0) conflicts: a0(r162,l0) a1(r167,l0) a2(r168,l0) a3(r184,l0) a4(r176,l0) a17(r182,l0) a18(r164,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r175,l0) conflicts: a4(r176,l0) a7(r165,l0) a8(r177,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r165,l0) conflicts: a4(r176,l0) a6(r175,l0) a8(r177,l0) a9(r171,l0) a10(r174,l0) a11(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r177,l0) conflicts: a4(r176,l0) a6(r175,l0) a7(r165,l0) a9(r171,l0) a10(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r171,l0) conflicts: a4(r176,l0) a7(r165,l0) a8(r177,l0) a10(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r174,l0) conflicts: a4(r176,l0) a7(r165,l0) a8(r177,l0) a9(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r172,l0) conflicts: a4(r176,l0) a7(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r182,l0) conflicts: a0(r162,l0) a1(r167,l0) a2(r168,l0) a3(r184,l0) a5(r166,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a18(r164,l0) conflicts: a0(r162,l0) a1(r167,l0) a2(r168,l0) a3(r184,l0) a5(r166,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a3(r184)<->a4(r176)@1000:move
  cp1:a5(r166)<->a7(r165)@125:shuffle
  cp2:a5(r166)<->a6(r175)@125:shuffle
  regions=2, blocks=11, points=30
    allocnos=19, copies=3, conflicts=0, ranges=21

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r162 1r167 2r168 3r184 4r176 5r166 6r175 7r165 8r177 9r171 10r174 11r172 17r182 18r164
    modified regnos: 162 164 165 166 167 168 171 172 174 175 176 177 182 184
    border:
    Pressure: GENERAL_REGS=9
    Reg 162 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 2 regs less
    Reg 164 of GENERAL_REGS has 3 regs less
      Pushing a10(r174,l0)
      Pushing a9(r171,l0)
      Pushing a8(r177,l0)
      Pushing a6(r175,l0)
      Pushing a4(r176,l0)
      Pushing a11(r172,l0)
      Pushing a7(r165,l0)
      Pushing a17(r182,l0)
      Pushing a5(r166,l0)
      Pushing a3(r184,l0)
      Pushing a18(r164,l0)
      Pushing a1(r167,l0)
      Pushing a0(r162,l0)
      Pushing a2(r168,l0)
      Popping a2(r168,l0)  -- assign reg 4
      Popping a0(r162,l0)  -- assign reg 3
      Popping a1(r167,l0)  -- assign reg 2
      Popping a18(r164,l0)  -- assign reg 12
      Popping a3(r184,l0)  -- assign reg 5
      Popping a5(r166,l0)  -- assign reg 6
      Popping a17(r182,l0)  -- assign reg 0
      Popping a7(r165,l0)  -- assign reg 3
      Popping a11(r172,l0)  -- assign reg 2
      Popping a4(r176,l0)  -- assign reg 5
      Popping a6(r175,l0)  -- assign reg 6
      Popping a8(r177,l0)  -- assign reg 2
      Popping a9(r171,l0)  -- assign reg 1
      Popping a10(r174,l0)  -- assign reg 0
Disposition:
    0:r162 l0     3   18:r164 l0    12    7:r165 l0     3    5:r166 l0     6
    1:r167 l0     2    2:r168 l0     4    9:r171 l0     1   11:r172 l0     2
   10:r174 l0     0    6:r175 l0     6    4:r176 l0     5    8:r177 l0     2
   17:r182 l0     0    3:r184 l0     5
New iteration of spill/restore move
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=95, live_throughout: 13, 14, dead_or_set: 172
insn=44, live_throughout: 13, 14, 172, dead_or_set: 176
insn=96, live_throughout: 13, 14, 176, dead_or_set: 172
insn=35, live_throughout: 13, 14, 172, 176, dead_or_set: 165
insn=41, live_throughout: 13, 14, 165, 176, dead_or_set: 172, 174
insn=45, live_throughout: 13, 14, 165, 174, 176, dead_or_set: 177
insn=36, live_throughout: 13, 14, 174, 176, 177, dead_or_set: 165
insn=98, live_throughout: 13, 14, 165, 174, 176, 177, dead_or_set: 171
insn=42, live_throughout: 13, 14, 165, 176, 177, dead_or_set: 171, 174, 175
insn=46, live_throughout: 13, 14, 165, 175, 176, dead_or_set: 177
insn=43, live_throughout: 13, 14, 24, 176, dead_or_set: 165, 166, 175
insn=47, live_throughout: 13, 14, 166, 176, dead_or_set: 
insn=49, live_throughout: 13, 14, 166, 176, dead_or_set: 167
insn=70, live_throughout: 13, 14, 166, 167, dead_or_set: 176, 184
insn=50, live_throughout: 13, 14, 166, 167, 184, dead_or_set: 168
insn=93, live_throughout: 13, 14, 166, 167, 168, 184, dead_or_set: 
insn=72, live_throughout: 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 
insn=55, live_throughout: 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 164
insn=67, live_throughout: 1, 13, 14, 162, 164, 166, 167, 184, dead_or_set: 168
insn=61, live_throughout: 1, 13, 14, 162, 164, 166, 167, 168, 184, dead_or_set: 0
insn=56, live_throughout: 0, 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 164
insn=57, live_throughout: 0, 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 
insn=63, live_throughout: 13, 166, 168, 184, dead_or_set: 0, 1, 14, 162
insn=92, live_throughout: 13, 14, 166, 168, 184, dead_or_set: 167
insn=65, live_throughout: 13, 14, 166, 167, 168, 184, dead_or_set: 
insn=68, live_throughout: 13, 14, 166, 167, 168, 184, dead_or_set: 
insn=71, live_throughout: 13, 14, 166, 167, 168, 184, dead_or_set: 162
insn=62, live_throughout: 13, 14, 162, 166, 167, 168, 184, dead_or_set: 1
insn=73, live_throughout: 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 182
insn=74, live_throughout: 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 182
insn=75, live_throughout: 1, 13, 14, 162, 166, 167, 168, 184, dead_or_set: 
insn=77, live_throughout: 13, 14, 162, dead_or_set: 167
insn=78, live_throughout: 13, 14, 162, dead_or_set: 
insn=81, live_throughout: 13, dead_or_set: 14, 162
insn=87, live_throughout: 13, 14, dead_or_set: 
init_insns for 171: (insn_list:REG_DEP_TRUE 98 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 44 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 70 (nil))
changing reg in insn 71
changing reg in insn 81
changing reg in insn 63
changing reg in insn 73
changing reg in insn 73
changing reg in insn 55
changing reg in insn 61
changing reg in insn 56
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 43
changing reg in insn 43
changing reg in insn 55
changing reg in insn 92
changing reg in insn 49
changing reg in insn 50
changing reg in insn 77
changing reg in insn 50
changing reg in insn 67
changing reg in insn 55
changing reg in insn 74
changing reg in insn 67
changing reg in insn 62
changing reg in insn 98
changing reg in insn 42
changing reg in insn 96
changing reg in insn 95
changing reg in insn 96
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 70
changing reg in insn 45
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 73
changing reg in insn 74
changing reg in insn 70
changing reg in insn 71
Spilling for insn 95.
Using reg 3 for reload 0

Reloads for insn # 95
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 70.


try_optimize_cfg iteration 1

Edge 4->6 redirected to 7
merging block 6 into block 5
deleting insn with uid = 65.
deleting insn with uid = 66.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 63.
deleting insn with uid = 63.
rescanning insn with uid = 81.
deleting insn with uid = 81.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 20 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 20 (    2)


armpmu_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,3u,1d} r1={5d,2u} r2={8d,5u} r3={7d,6u,1d} r4={2d,4u} r5={1d,2u,1d} r6={2d,2u} r12={4d,2u} r13={1d,12u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{265d,43u,3e} in 31{29 regular + 2 call} insns.
(note 30 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 30 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 39 2 NOTE_INSN_FUNCTION_BEG)

(note 39 32 100 2 NOTE_INSN_DELETED)

(insn 100 39 95 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 95 100 44 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 44 95 96 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 5 r5 [176])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 96 44 35 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 2 r2 [172])
        (and:SI (reg:SI 2 r2 [172])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 35 96 41 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 41 35 45 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [172])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 45 41 36 2 arch/arm/kernel/perf_event.c:589 (set (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [176]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 36 45 98 2 arch/arm/kernel/perf_event.c:587 (set (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8606498)) -1 (nil))

(insn 98 36 42 2 arch/arm/kernel/perf_event.c:587 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn 42 98 46 2 arch/arm/kernel/perf_event.c:587 (set (reg:SI 6 r6 [175])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [171])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:174 <variable>.cpu ] [174])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 46 42 43 2 arch/arm/kernel/perf_event.c:589 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:177 armpmu ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 43 46 47 2 arch/arm/kernel/perf_event.c:587 (set (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])
        (plus:SI (reg/v:SI 3 r3 [orig:165 __ptr ] [165])
            (reg:SI 6 r6 [175]))) 4 {*arm_addsi3} (nil))

(jump_insn 47 43 48 2 arch/arm/kernel/perf_event.c:589 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 10 3)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  10 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 4 [r4]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 48 47 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 arch/arm/kernel/perf_event.c:589 (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 50 49 93 3 arch/arm/kernel/perf_event.c:589 (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
        (reg/v:SI 2 r2 [orig:167 enabled ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 93 50 94 3 (set (pc)
        (label_ref 68)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 94 93 72)

;; Start of basic block ( 7) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  7 [97.1%] 
(code_label 72 94 53 4 56 "" [1 uses])

(note 53 72 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 55 53 67 4 arch/arm/kernel/perf_event.c:593 (set (reg/v/f:SI 12 ip [orig:164 event ] [164])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:166 cpuc ] [166])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 67 55 61 4 arch/arm/kernel/perf_event.c:592 (set (reg/v:SI 4 r4 [orig:168 idx ] [168])
        (plus:SI (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 61 67 56 4 arch/arm/kernel/perf_event.c:598 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 56 61 57 4 arch/arm/kernel/perf_event.c:595 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 12 ip [orig:164 event ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 57 56 58 4 arch/arm/kernel/perf_event.c:595 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [30.2%] 
;; Succ edge  5 [69.8%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 58 57 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 5 NOTE_INSN_DELETED)

(note 60 59 63 5 NOTE_INSN_DELETED)

(call_insn 63 60 92 5 arch/arm/kernel/perf_event.c:598 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 92 63 68 5 arch/arm/kernel/perf_event.c:599 (set (reg/v:SI 2 r2 [orig:167 enabled ] [167])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 5 -> ( 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 3 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
;; Pred edge  4 [30.2%] 
(code_label 68 92 69 7 54 "" [2 uses])

(note 69 68 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 71 69 62 7 arch/arm/kernel/perf_event.c:592 discrim 1 (set (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 62 71 73 7 arch/arm/kernel/perf_event.c:598 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:168 idx ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 73 62 74 7 arch/arm/kernel/perf_event.c:592 (set (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])
        (nil)))

(insn 74 73 75 7 arch/arm/kernel/perf_event.c:592 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:168 idx ] [168])
            (reg:SI 0 r0 [orig:182 <variable>.num_events ] [182]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 75 74 76 7 arch/arm/kernel/perf_event.c:592 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
        (nil)))
;; End of basic block 7 -> ( 4 8)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [97.1%] 
;; Succ edge  8 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [2.9%]  (fallthru,loop_exit)
(note 76 75 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 8 arch/arm/kernel/perf_event.c:602 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:167 enabled ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 78 77 79 8 arch/arm/kernel/perf_event.c:602 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  9 [39.0%]  (fallthru)
;; Succ edge  10 [61.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  8 [39.0%]  (fallthru)
(note 79 78 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 80 79 81 9 NOTE_INSN_DELETED)

(call_insn 81 80 87 9 arch/arm/kernel/perf_event.c:603 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:162 armpmu.626 ] [162])
                            (const_int 32 [0x20])) [0 <variable>.start+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 2 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  2 [10.1%] 
;; Pred edge  8 [61.0%] 
(code_label 87 81 90 10 57 "" [2 uses])

(note 90 87 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 10 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 97 90 99 NOTE_INSN_DELETED)

(note 99 97 0 NOTE_INSN_DELETED)


;; Function armpmu_disable (armpmu_disable)[0:1327]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 12(l0): point = 1
   Insn 9(l0): point = 4
   Insn 8(l0): point = 6
   Insn 7(l0): point = 8
   Insn 6(l0): point = 10
 a0(r133): [2..8]
 a1(r135): [9..10]
Compressing live ranges: from 13 to 4 - 30%
Ranges after the compression:
 a0(r133): [0..1]
 a1(r135): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=5, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r133 1r135
    modified regnos: 133 135
    border:
    Pressure: GENERAL_REGS=2
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a1(r135,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 3
      Popping a1(r135,l0)  -- assign reg 3
Disposition:
    0:r133 l0     3    1:r135 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, 14, dead_or_set: 135
insn=7, live_throughout: 13, 14, dead_or_set: 133, 135
insn=8, live_throughout: 13, 14, 133, dead_or_set: 
insn=9, live_throughout: 13, 14, 133, dead_or_set: 
insn=12, live_throughout: 13, dead_or_set: 14, 133
insn=18, live_throughout: 13, 14, dead_or_set: 
init_insns for 135: (insn_list:REG_DEP_TRUE 6 (nil))
changing reg in insn 7
changing reg in insn 12
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


armpmu_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r3={4d,3u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 137{127d,10u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:608 (set (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [135]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 8 7 9 2 arch/arm/kernel/perf_event.c:608 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/kernel/perf_event.c:608 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [78.3%]  (fallthru)
;; Succ edge  4 [21.6%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  2 [78.3%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 11 10 12 3 NOTE_INSN_DELETED)

(call_insn 12 11 18 3 arch/arm/kernel/perf_event.c:609 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 armpmu.367 ] [133])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [21.6%] 
(code_label 18 12 21 4 62 "" [1 uses])

(note 21 18 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 22 21 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)


;; Function callchain_trace (callchain_trace)[0:1361]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 42(l0): point = 0
   Insn 36(l0): point = 2
   Insn 29(l0): point = 5
   Insn 55(l0): point = 7
   Insn 54(l0): point = 9
   Insn 24(l0): point = 11
   Insn 28(l0): point = 13
   Insn 27(l0): point = 19
   Insn 22(l0): point = 21
   Insn 15(l0): point = 24
   Insn 14(l0): point = 26
   Insn 11(l0): point = 29
   Insn 10(l0): point = 31
   Insn 9(l0): point = 33
   Insn 8(l0): point = 35
   Insn 3(l0): point = 37
 a0(r138): [6..37]
 a1(r144): [6..19]
 a2(r141): [8..11]
 a3(r133): [8..33]
 a4(r139): [10..21]
 a5(r135): [10..35]
Compressing live ranges: from 40 to 9 - 22%
Ranges after the compression:
 a0(r138): [0..8]
 a1(r144): [0..4]
 a2(r141): [1..3]
 a3(r133): [1..6]
 a4(r139): [2..5]
 a5(r135): [2..7]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r138,l0) conflicts: a1(r144,l0) a2(r141,l0) a3(r133,l0) a4(r139,l0) a5(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r144,l0) conflicts: a0(r138,l0) a2(r141,l0) a3(r133,l0) a4(r139,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r141,l0) conflicts: a1(r144,l0) a0(r138,l0) a3(r133,l0) a4(r139,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r133,l0) conflicts: a1(r144,l0) a0(r138,l0) a2(r141,l0) a4(r139,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r139,l0) conflicts: a1(r144,l0) a0(r138,l0) a2(r141,l0) a3(r133,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r135,l0) conflicts: a1(r144,l0) a0(r138,l0) a2(r141,l0) a3(r133,l0) a4(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=9
    allocnos=6, copies=0, conflicts=0, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r138 1r144 2r141 3r133 4r139 5r135
    modified regnos: 133 135 138 139 141 144
    border:
    Pressure: GENERAL_REGS=9
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a5(r135,l0)
      Pushing a2(r141,l0)
      Pushing a4(r139,l0)
      Pushing a1(r144,l0)
      Pushing a3(r133,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 1
      Popping a3(r133,l0)  -- assign reg 2
      Popping a1(r144,l0)  -- assign reg 4
      Popping a4(r139,l0)  -- assign reg 0
      Popping a2(r141,l0)  -- assign reg 12
      Popping a5(r135,l0)  -- assign reg 6
Disposition:
    3:r133 l0     2    5:r135 l0     6    0:r138 l0     1    4:r139 l0     0
    2:r141 l0    12    1:r144 l0     4
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, 14, dead_or_set: 1, 138
insn=8, live_throughout: 13, 14, 138, dead_or_set: 0, 135
insn=9, live_throughout: 13, 14, 135, 138, dead_or_set: 133
insn=10, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=11, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=14, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=15, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=22, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 139
insn=27, live_throughout: 13, 14, 133, 135, 138, 139, dead_or_set: 144
insn=28, live_throughout: 13, 14, 133, 135, 138, 139, dead_or_set: 144
insn=24, live_throughout: 13, 14, 133, 135, 138, 139, 144, dead_or_set: 141
insn=54, live_throughout: 13, 14, 133, 138, 141, 144, dead_or_set: 135, 139
insn=55, live_throughout: 13, 14, 138, 144, dead_or_set: 133, 141
insn=29, live_throughout: 13, 14, dead_or_set: 138, 144
insn=30, live_throughout: 13, 14, dead_or_set: 
insn=36, live_throughout: 13, 14, dead_or_set: 0
insn=42, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 9
changing reg in insn 28
changing reg in insn 28
changing reg in insn 8
changing reg in insn 54
changing reg in insn 3
changing reg in insn 24
changing reg in insn 54
changing reg in insn 29
changing reg in insn 9
changing reg in insn 22
changing reg in insn 24
changing reg in insn 54
changing reg in insn 24
changing reg in insn 55
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
Spilling for insn 54.
Spilling for insn 55.
Spilling for insn 29.

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [139])
                                                            (const_int 8 [0x8]))
                                                        (reg/v/f:SI 1 r1 [orig:138 data ] [138])) [0 <variable>.ip S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [139])
                                                            (const_int 8 [0x8]))
                                                        (reg/v/f:SI 1 r1 [orig:138 data ] [138])) [0 <variable>.ip S4 A64])

Reloads for insn # 55
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 12 ip [141])
                                                        (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 12 ip [141])
                                                        (const_int 4 [0x4])) [0 <variable>.ip S4 A32])

Reloads for insn # 29
Reload 0: reload_out (DI) = (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


callchain_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d,4u} r2={2d,3u,1d} r3={2d,3u,1d} r4={2d,2u} r5={2d,2u} r6={1d,1u} r12={2d,1u} r13={1d,5u} r14={1d,1u} r24={3d,2u} 
;;    total ref usage 51{20d,29u,2e} in 15{15 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 4 9 2 arch/arm/kernel/perf_event.c:767 (set (reg:SI 6 r6 [orig:135 D.26217 ] [135])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ fr ])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 10 2 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:133 D.26372 ] [133])
        (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 10 9 11 2 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26372+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 45 2 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 45 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 45 15 3 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 46 3 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 15 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 23 46 22 4 NOTE_INSN_DELETED)

(insn 22 23 27 4 include/linux/perf_event.h:1097 (set (reg:SI 0 r0 [139])
        (plus:SI (reg:SI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 27 22 28 4 include/linux/perf_event.h:1097 (set (reg:DI 4 r4 [144])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 28 27 24 4 include/linux/perf_event.h:1097 (parallel [
            (set (reg:DI 4 r4 [144])
                (plus:DI (reg:DI 4 r4 [144])
                    (reg:DI 2 r2 [orig:133 D.26372 ] [133])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:133 D.26372 ] [133])
            (const_int 1 [0x1]))
        (nil)))

(insn 24 28 54 4 include/linux/perf_event.h:1097 (set (reg/f:SI 12 ip [141])
        (plus:SI (mult:SI (reg:SI 0 r0 [139])
                (const_int 8 [0x8]))
            (reg/v/f:SI 1 r1 [orig:138 data ] [138]))) 270 {*arith_shiftsi} (nil))

(insn 54 24 55 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [139])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 1 r1 [orig:138 data ] [138])) [0 <variable>.ip S4 A64])
        (reg:SI 6 r6 [orig:135 D.26217 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 29 4 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 12 ip [141])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26372+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 29 55 30 4 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 1 r1 [orig:138 data ] [138]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
(code_label 30 29 31 5 66 "" [2 uses])

(note 31 30 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 36 31 42 5 arch/arm/kernel/perf_event.c:769 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 42 36 56 5 arch/arm/kernel/perf_event.c:769 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 56 42 57 NOTE_INSN_DELETED)

(note 57 56 0 NOTE_INSN_DELETED)


;; Function armpmu_reset (armpmu_reset)[0:1357] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 34(l0): point = 0
   Insn 28(l0): point = 2
   Insn 17(l0): point = 5
   Insn 16(l0): point = 7
   Insn 15(l0): point = 9
   Insn 14(l0): point = 11
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 10(l0): point = 18
   Insn 8(l0): point = 21
   Insn 7(l0): point = 23
   Insn 6(l0): point = 25
   Insn 5(l0): point = 27
 a0(r134): [12..18]
 a1(r135): [19..25]
 a2(r137): [26..27]
Compressing live ranges: from 30 to 6 - 20%
Ranges after the compression:
 a0(r134): [0..1]
 a1(r135): [2..3]
 a2(r137): [4..5]
+++Allocating 0 bytes for conflict table (uncompressed size 24)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r137,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=6
    allocnos=3, copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r134 1r135 2r137
    modified regnos: 134 135 137
    border:
    Pressure: GENERAL_REGS=4
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a2(r137,l0)
      Pushing a1(r135,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 0
      Popping a1(r135,l0)  -- assign reg 3
      Popping a2(r137,l0)  -- assign reg 3
Disposition:
    0:r134 l0     0    1:r135 l0     3    2:r137 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 137
insn=6, live_throughout: 13, 14, dead_or_set: 135, 137
insn=7, live_throughout: 13, 14, 135, dead_or_set: 
insn=8, live_throughout: 13, 14, 135, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 134, 135
insn=11, live_throughout: 13, 14, 134, dead_or_set: 
insn=12, live_throughout: 13, 14, 134, dead_or_set: 
insn=14, live_throughout: 13, 14, dead_or_set: 0, 134
insn=15, live_throughout: 0, 13, 14, dead_or_set: 1
insn=16, live_throughout: 0, 1, 13, 14, dead_or_set: 2
insn=17, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=20, live_throughout: 13, 14, dead_or_set: 
insn=28, live_throughout: 13, 14, dead_or_set: 0
insn=34, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 10
changing reg in insn 14
changing reg in insn 11
changing reg in insn 6
changing reg in insn 10
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 14.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


armpmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,3u} r12={2d} r13={1d,6u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{131d,18u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 arch/arm/kernel/perf_event.c:635 (set (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:635 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/perf_event.c:635 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [89.9%]  (fallthru)
;; Succ edge  5 [10.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 armpmu.394 ] [135])
                (const_int 40 [0x28])) [0 <variable>.reset+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:134 D.26120 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 12 11 13 3 arch/arm/kernel/perf_event.c:635 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [78.3%]  (fallthru)
;; Succ edge  5 [21.6%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  3 [78.3%]  (fallthru)
(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 4 arch/arm/kernel/perf_event.c:636 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 17 16 18 4 arch/arm/kernel/perf_event.c:636 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("on_each_cpu") [flags 0x41] <function_decl 0x10b3a780 on_each_cpu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 18 17 20)

;; Start of basic block ( 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  3 [21.6%] 
(code_label 20 18 21 5 71 "" [2 uses])

(note 21 20 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 21 34 5 arch/arm/kernel/perf_event.c:638 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 28 38 5 arch/arm/kernel/perf_event.c:638 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 38 34 39 NOTE_INSN_DELETED)

(note 39 38 0 NOTE_INSN_DELETED)


;; Function armv7pmu_write_counter (armv7pmu_write_counter)[0:1338]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r148,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r148,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 60(l0): point = 1
   Insn 58(l0): point = 3
   Insn 57(l0): point = 5
   Insn 76(l0): point = 7
   Insn 59(l0): point = 9
   Insn 75(l0): point = 11
   Insn 73(l0): point = 14
   Insn 48(l0): point = 16
   Insn 47(l0): point = 18
   Insn 46(l0): point = 20
   Insn 45(l0): point = 22
   Insn 44(l0): point = 24
   Insn 40(l0): point = 27
   Insn 38(l0): point = 29
   Insn 37(l0): point = 31
   Insn 78(l0): point = 33
   Insn 39(l0): point = 35
   Insn 77(l0): point = 37
   Insn 30(l0): point = 40
   Insn 29(l0): point = 42
   Insn 27(l0): point = 45
   Insn 26(l0): point = 47
   Insn 23(l0): point = 50
   Insn 22(l0): point = 52
   Insn 21(l0): point = 54
   Insn 20(l0): point = 56
   Insn 19(l0): point = 58
   Insn 18(l0): point = 60
   Insn 16(l0): point = 63
   Insn 71(l0): point = 66
   Insn 10(l0): point = 68
   Insn 8(l0): point = 71
   Insn 7(l0): point = 73
   Insn 3(l0): point = 75
   Insn 2(l0): point = 77
 a0(r148): [4..11]
 a1(r137): [71..77] [36..65] [25..26] [10..13]
 a2(r138): [69..75] [40..65] [17..26]
 a3(r146): [21..22]
 a4(r145): [23..24]
 a5(r143): [30..37]
 a6(r136): [43..54]
 a7(r141): [55..56]
 a8(r140): [57..58]
 a9(r139): [59..60]
Compressing live ranges: from 80 to 28 - 35%
Ranges after the compression:
 a0(r148): [0..2]
 a1(r137): [25..27] [12..23] [9..10] [1..3]
 a2(r138): [24..26] [14..23] [4..10]
 a3(r146): [5..6]
 a4(r145): [7..8]
 a5(r143): [11..13]
 a6(r136): [15..16]
 a7(r141): [17..18]
 a8(r140): [19..20]
 a9(r139): [21..22]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r148,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a1(r137,l0) conflicts: a0(r148,l0) a2(r138,l0) a5(r143,l0) a6(r136,l0) a7(r141,l0) a8(r140,l0) a9(r139,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a2(r138,l0) conflicts: a1(r137,l0) a3(r146,l0) a4(r145,l0) a6(r136,l0) a7(r141,l0) a8(r140,l0) a9(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r146,l0) conflicts: a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r145,l0) conflicts: a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r143,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a6(r136,l0) conflicts: a1(r137,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r141,l0) conflicts: a1(r137,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r140,l0) conflicts: a1(r137,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r139,l0) conflicts: a1(r137,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r137)<->a4(r145)@125:shuffle
  cp1:a3(r146)<->a4(r145)@125:shuffle
  cp2:a6(r136)<->a7(r141)@125:shuffle
  regions=1, blocks=12, points=28
    allocnos=10, copies=3, conflicts=4, ranges=15

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 11 10 9 8 7 6 5 4 3 2
    all: 0r148 1r137 2r138 3r146 4r145 5r143 6r136 7r141 8r140 9r139
    modified regnos: 136 137 138 139 140 141 143 145 146 148
    border:
    Pressure: GENERAL_REGS=4
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
      Pushing a9(r139,l0)
      Pushing a8(r140,l0)
      Pushing a7(r141,l0)
      Pushing a4(r145,l0)
      Pushing a3(r146,l0)
      Pushing a6(r136,l0)
      Pushing a2(r138,l0)
      Pushing a1(r137,l0)
      Pushing a5(r143,l0)
      Pushing a0(r148,l0)
      Popping a0(r148,l0)  -- assign reg 3
      Popping a5(r143,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 2
      Popping a2(r138,l0)  -- assign reg 1
      Popping a6(r136,l0)  -- assign reg 3
      Popping a3(r146,l0)  -- assign reg 2
      Popping a4(r145,l0)  -- assign reg 2
      Popping a7(r141,l0)  -- assign reg 3
      Popping a8(r140,l0)  -- assign reg 3
      Popping a9(r139,l0)  -- assign reg 3
Disposition:
    6:r136 l0     3    1:r137 l0     2    2:r138 l0     1    9:r139 l0     3
    8:r140 l0     3    7:r141 l0     3    5:r143 l0     3    4:r145 l0     2
    3:r146 l0     2    0:r148 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 13, 14, dead_or_set: 0, 137
insn=3, live_throughout: 13, 14, 137, dead_or_set: 1, 138
insn=7, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=8, live_throughout: 13, 14, 24, 137, 138, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 138
insn=71, live_throughout: 13, 14, dead_or_set: 
insn=13, live_throughout: 13, 14, 24, 137, 138, dead_or_set: 
insn=16, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=18, live_throughout: 13, 14, 137, 138, dead_or_set: 139
insn=19, live_throughout: 13, 14, 137, 138, dead_or_set: 139, 140
insn=20, live_throughout: 13, 14, 137, 138, dead_or_set: 140, 141
insn=21, live_throughout: 13, 14, 137, 138, dead_or_set: 136, 141
insn=22, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 
insn=23, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 
insn=26, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 
insn=27, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 
insn=29, live_throughout: 13, 14, 137, 138, dead_or_set: 136
insn=30, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=31, live_throughout: 13, 14, 137, dead_or_set: 
insn=77, live_throughout: 13, 14, 137, dead_or_set: 143
insn=39, live_throughout: 13, 14, 143, dead_or_set: 2, 137
insn=78, live_throughout: 2, 13, 14, dead_or_set: 143
insn=37, live_throughout: 2, 13, 14, 143, dead_or_set: 0
insn=38, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 143
insn=40, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=42, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=44, live_throughout: 13, 14, 138, dead_or_set: 137, 145
insn=45, live_throughout: 13, 14, 138, dead_or_set: 145, 146
insn=46, live_throughout: 13, 14, 138, dead_or_set: 146
insn=47, live_throughout: 13, 14, 138, dead_or_set: 
insn=48, live_throughout: 13, 14, dead_or_set: 138
insn=73, live_throughout: 13, 14, dead_or_set: 
insn=51, live_throughout: 13, 14, 137, dead_or_set: 
insn=75, live_throughout: 13, 14, 137, dead_or_set: 148
insn=59, live_throughout: 13, 14, 148, dead_or_set: 2, 137
insn=76, live_throughout: 2, 13, 14, dead_or_set: 148
insn=57, live_throughout: 2, 13, 14, 148, dead_or_set: 0
insn=58, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 148
insn=60, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=67, live_throughout: 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 18 (nil))
changing reg in insn 21
changing reg in insn 29
changing reg in insn 22
changing reg in insn 2
changing reg in insn 39
changing reg in insn 44
changing reg in insn 29
changing reg in insn 26
changing reg in insn 59
changing reg in insn 22
changing reg in insn 7
changing reg in insn 3
changing reg in insn 48
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 38
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 58
Spilling for insn 77.
Using reg 1 for reload 0
Spilling for insn 75.
Using reg 1 for reload 0

Reloads for insn # 77
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 75
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)
deleting insn with uid = 3.
deleting insn with uid = 39.
deleting insn with uid = 59.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 60.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 20 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)


armv7pmu_write_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={5d,3u} r1={7d,6u} r2={6d,9u} r3={11d,9u} r12={3d} r13={1d,15u} r14={1d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 308{260d,48u,0e} in 34{32 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 4 7 2 arch/arm/kernel/perf_event_v7.c:831 (set (reg/v:SI 2 r2 [orig:137 idx ] [137])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn 7 2 8 2 arch/arm/kernel/perf_event_v7.c:832 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/perf_event_v7.c:832 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 71 3 arch/arm/kernel/perf_event_v7.c:833 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 0") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912595) -1 (nil))

(jump_insn 71 10 72 3 (set (pc)
        (label_ref 67)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 11)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 72 71 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 13 72 14 4 76 "" [1 uses])

(note 14 13 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 16 14 17 4 arch/arm/kernel/perf_event_v7.c:834 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 19 18 20 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [139]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 20 19 21 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 armpmu ] [140])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:SI 3 r3 [orig:136 D.25836 ] [136])
        (plus:SI (reg:SI 3 r3 [orig:141 <variable>.num_events ] [141])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 22 21 23 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 5 arch/arm/kernel/perf_event_v7.c:834 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 24 23 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:137 idx ] [137])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 27 26 28 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 31)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:137 idx ] [137])
            (reg:SI 3 r3 [orig:136 D.25836 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 31 30 32 8 79 "" [1 uses])

(note 32 31 35 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 35 32 81 8 NOTE_INSN_DELETED)

(insn 81 35 77 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 81 78 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 78 77 37 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [143])
        (and:SI (reg:SI 3 r3 [143])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 37 78 38 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn 38 37 40 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [143])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 40 38 41 8 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 8 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 41 40 42)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 42 41 43 9 80 "" [1 uses])

(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 45 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [145])
        (plus:SI (reg/v:SI 2 r2 [orig:137 idx ] [137])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (and:SI (reg:SI 2 r2 [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [146])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (nil))

(insn 47 46 48 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 48 47 73 9 arch/arm/kernel/perf_event_v7.c:836 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 2") ("") 0 [
            (reg/v:SI 1 r1 [orig:138 value ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8912980) -1 (nil))

(jump_insn 73 48 74 9 (set (pc)
        (label_ref 67)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 74 73 51)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 51 74 52 10 78 "" [2 uses])

(note 52 51 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 55 52 82 10 NOTE_INSN_DELETED)

(insn 82 55 75 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 75 82 76 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 76 75 57 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 57 76 58 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x115c5a00>)
        (nil)))

(insn 58 57 60 10 arch/arm/kernel/perf_event_v7.c:839 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 60 58 61 10 arch/arm/kernel/perf_event_v7.c:839 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 10 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 61 60 67)

;; Start of basic block ( 3 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 67 61 70 11 81 "" [2 uses])

(note 70 67 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 11 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 70 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)


;; Function armv7pmu_read_counter (armv7pmu_read_counter)[0:1337]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 75(l0): point = 0
   Insn 69(l0): point = 2
   Insn 62(l0): point = 5
   Insn 61(l0): point = 7
   Insn 59(l0): point = 9
   Insn 58(l0): point = 11
   Insn 86(l0): point = 13
   Insn 60(l0): point = 15
   Insn 85(l0): point = 17
   Insn 83(l0): point = 20
   Insn 49(l0): point = 22
   Insn 48(l0): point = 24
   Insn 47(l0): point = 26
   Insn 46(l0): point = 28
   Insn 45(l0): point = 30
   Insn 81(l0): point = 33
   Insn 40(l0): point = 35
   Insn 39(l0): point = 37
   Insn 37(l0): point = 39
   Insn 36(l0): point = 41
   Insn 88(l0): point = 43
   Insn 38(l0): point = 45
   Insn 87(l0): point = 47
   Insn 29(l0): point = 50
   Insn 28(l0): point = 52
   Insn 26(l0): point = 55
   Insn 25(l0): point = 57
   Insn 22(l0): point = 60
   Insn 21(l0): point = 62
   Insn 20(l0): point = 64
   Insn 19(l0): point = 66
   Insn 18(l0): point = 68
   Insn 17(l0): point = 70
   Insn 15(l0): point = 73
   Insn 79(l0): point = 76
   Insn 9(l0): point = 78
   Insn 7(l0): point = 81
   Insn 6(l0): point = 83
   Insn 2(l0): point = 85
 a0(r135): [76..78] [33..35] [20..22] [3..5]
 a1(r149): [10..17]
 a2(r139): [81..85] [46..75] [31..32] [16..19]
 a3(r147): [27..28]
 a4(r146): [29..30]
 a5(r144): [40..47]
 a6(r137): [53..64]
 a7(r142): [65..66]
 a8(r141): [67..68]
 a9(r140): [69..70]
Compressing live ranges: from 88 to 32 - 36%
Ranges after the compression:
 a0(r135): [28..29] [14..15] [6..7] [0..1]
 a1(r149): [2..4]
 a2(r139): [30..31] [17..27] [12..13] [3..5]
 a3(r147): [8..9]
 a4(r146): [10..11]
 a5(r144): [16..18]
 a6(r137): [19..20]
 a7(r142): [21..22]
 a8(r141): [23..24]
 a9(r140): [25..26]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r149,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a2(r139,l0) conflicts: a1(r149,l0) a5(r144,l0) a6(r137,l0) a7(r142,l0) a8(r141,l0) a9(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r147,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r146,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r144,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a6(r137,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r142,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r141,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r140,l0) conflicts: a2(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a2(r139)<->a4(r146)@125:shuffle
  cp1:a3(r147)<->a4(r146)@125:shuffle
  cp2:a6(r137)<->a7(r142)@125:shuffle
  regions=1, blocks=12, points=32
    allocnos=10, copies=3, conflicts=6, ranges=16

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 11 10 9 8 7 6 5 4 3 2
    all: 0r135 1r149 2r139 3r147 4r146 5r144 6r137 7r142 8r141 9r140
    modified regnos: 135 137 139 140 141 142 144 146 147 149
    border:
    Pressure: GENERAL_REGS=4
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
      Pushing a9(r140,l0)
      Pushing a8(r141,l0)
      Pushing a7(r142,l0)
      Pushing a4(r146,l0)
      Pushing a3(r147,l0)
      Pushing a6(r137,l0)
      Pushing a0(r135,l0)
      Pushing a2(r139,l0)
      Pushing a5(r144,l0)
      Pushing a1(r149,l0)
      Popping a1(r149,l0)  -- assign reg 3
      Popping a5(r144,l0)  -- assign reg 3
      Popping a2(r139,l0)  -- assign reg 2
      Popping a0(r135,l0)  -- assign reg 0
      Popping a6(r137,l0)  -- assign reg 3
      Popping a3(r147,l0)  -- assign reg 2
      Popping a4(r146,l0)  -- assign reg 2
      Popping a7(r142,l0)  -- assign reg 3
      Popping a8(r141,l0)  -- assign reg 3
      Popping a9(r140,l0)  -- assign reg 3
Disposition:
    0:r135 l0     0    6:r137 l0     3    2:r139 l0     2    9:r140 l0     3
    8:r141 l0     3    7:r142 l0     3    5:r144 l0     3    4:r146 l0     2
    3:r147 l0     2    1:r149 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 139
insn=6, live_throughout: 13, 14, 139, dead_or_set: 
insn=7, live_throughout: 13, 14, 24, 139, dead_or_set: 
insn=9, live_throughout: 13, 14, dead_or_set: 135
insn=79, live_throughout: 13, 14, 135, dead_or_set: 
insn=12, live_throughout: 13, 14, 24, 139, dead_or_set: 
insn=15, live_throughout: 13, 14, 139, dead_or_set: 
insn=17, live_throughout: 13, 14, 139, dead_or_set: 140
insn=18, live_throughout: 13, 14, 139, dead_or_set: 140, 141
insn=19, live_throughout: 13, 14, 139, dead_or_set: 141, 142
insn=20, live_throughout: 13, 14, 139, dead_or_set: 137, 142
insn=21, live_throughout: 13, 14, 137, 139, dead_or_set: 
insn=22, live_throughout: 13, 14, 137, 139, dead_or_set: 
insn=25, live_throughout: 13, 14, 137, 139, dead_or_set: 
insn=26, live_throughout: 13, 14, 137, 139, dead_or_set: 
insn=28, live_throughout: 13, 14, 139, dead_or_set: 137
insn=29, live_throughout: 13, 14, 139, dead_or_set: 
insn=30, live_throughout: 13, 139, dead_or_set: 
insn=87, live_throughout: 13, 139, dead_or_set: 144
insn=38, live_throughout: 13, 144, dead_or_set: 2, 139
insn=88, live_throughout: 2, 13, dead_or_set: 144
insn=36, live_throughout: 2, 13, 144, dead_or_set: 0
insn=37, live_throughout: 0, 2, 13, dead_or_set: 1, 144
insn=39, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=40, live_throughout: 13, 14, dead_or_set: 135
insn=81, live_throughout: 13, 14, 135, dead_or_set: 
insn=43, live_throughout: 13, 14, 139, dead_or_set: 
insn=45, live_throughout: 13, 14, dead_or_set: 139, 146
insn=46, live_throughout: 13, 14, dead_or_set: 146, 147
insn=47, live_throughout: 13, 14, dead_or_set: 147
insn=48, live_throughout: 13, 14, dead_or_set: 
insn=49, live_throughout: 13, 14, dead_or_set: 135
insn=83, live_throughout: 13, 14, 135, dead_or_set: 
insn=52, live_throughout: 13, 139, dead_or_set: 
insn=85, live_throughout: 13, 139, dead_or_set: 149
insn=60, live_throughout: 13, 149, dead_or_set: 2, 139
insn=86, live_throughout: 2, 13, dead_or_set: 149
insn=58, live_throughout: 2, 13, 149, dead_or_set: 0
insn=59, live_throughout: 0, 2, 13, dead_or_set: 1, 149
insn=61, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=62, live_throughout: 13, 14, dead_or_set: 135
insn=63, live_throughout: 13, 14, 135, dead_or_set: 
insn=69, live_throughout: 13, 14, dead_or_set: 0, 135
insn=75, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 17 (nil))
changing reg in insn 62
changing reg in insn 49
changing reg in insn 40
changing reg in insn 9
changing reg in insn 69
changing reg in insn 20
changing reg in insn 28
changing reg in insn 21
changing reg in insn 2
changing reg in insn 38
changing reg in insn 45
changing reg in insn 28
changing reg in insn 25
changing reg in insn 60
changing reg in insn 21
changing reg in insn 6
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
changing reg in insn 59
Spilling for insn 87.
Using reg 1 for reload 0
Spilling for insn 85.
Using reg 1 for reload 0

Reloads for insn # 87
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 85
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)
deleting insn with uid = 38.
deleting insn with uid = 60.
deleting insn with uid = 69.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 61.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)


armv7pmu_read_counter

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={7d,4u} r2={6d,9u} r3={11d,9u} r12={3d} r13={1d,15u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 314{266d,48u,0e} in 38{36 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/perf_event_v7.c:814 (set (reg/v:SI 2 r2 [orig:139 idx ] [139])
        (reg:SI 0 r0 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 7 2 arch/arm/kernel/perf_event_v7.c:817 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 7 6 8 2 arch/arm/kernel/perf_event_v7.c:817 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 12)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 2 [r2] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [19.9%]  (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 79 3 arch/arm/kernel/perf_event_v7.c:818 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 0") ("=r") 0 []
             [] 8910675)) -1 (nil))

(jump_insn 79 9 80 3 (set (pc)
        (label_ref 63)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 80 79 12)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [80.1%] 
(code_label 12 80 13 4 86 "" [1 uses])

(note 13 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 15 13 16 4 arch/arm/kernel/perf_event_v7.c:819 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 18 17 19 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [140]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 19 18 20 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:141 armpmu ] [141])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 21 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:SI 3 r3 [orig:137 D.25815 ] [137])
        (plus:SI (reg:SI 3 r3 [orig:142 <variable>.num_events ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 21 20 22 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 5 arch/arm/kernel/perf_event_v7.c:819 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 5 -> ( 6 10)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 23 22 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 26 6 arch/arm/kernel/perf_event_v7.c:800 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:139 idx ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 6 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%] 
;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:139 idx ] [139])
            (reg:SI 3 r3 [orig:137 D.25815 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 7 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%] 
;; Pred edge  7 [0.0%]  (fallthru)
(code_label 30 29 31 8 89 "" [1 uses])

(note 31 30 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 34 31 91 8 NOTE_INSN_DELETED)

(insn 91 34 87 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 87 91 88 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 88 87 36 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 36 88 37 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn 37 36 39 8 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 39 37 40 8 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 40 39 81 8 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 81 40 82 8 (set (pc)
        (label_ref 63)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 82 81 43)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 43 82 44 9 90 "" [1 uses])

(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [146])
        (plus:SI (reg/v:SI 2 r2 [orig:139 idx ] [139])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 46 45 47 9 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 2 r2 [147])
        (and:SI (reg:SI 2 r2 [146])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 47 46 48 9 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 2 r2 [147])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (nil))

(insn 48 47 49 9 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 49 48 83 9 arch/arm/kernel/perf_event_v7.c:821 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c13, 2") ("=r") 0 []
             [] 8911060)) -1 (nil))

(jump_insn 83 49 84 9 (set (pc)
        (label_ref 63)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 84 83 52)

;; Start of basic block ( 5 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%] 
;; Pred edge  4 [0.0%] 
(code_label 52 84 53 10 88 "" [2 uses])

(note 53 52 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 56 53 92 10 NOTE_INSN_DELETED)

(insn 92 56 85 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 85 92 86 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 86 85 58 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 58 86 59 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x115c5a50>)
        (nil)))

(insn 59 58 61 10 arch/arm/kernel/perf_event_v7.c:824 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 61 59 62 10 arch/arm/kernel/perf_event_v7.c:824 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 62 61 63 10 arch/arm/kernel/perf_event_v7.c:815 (set (reg/v:SI 0 r0 [orig:135 value ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 3 8 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 63 62 64 11 87 "" [3 uses])

(note 64 63 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 75 64 89 11 arch/arm/kernel/perf_event_v7.c:828 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 89 75 90 NOTE_INSN_DELETED)

(note 90 89 0 NOTE_INSN_DELETED)


;; Function init_hw_perf_events (init_hw_perf_events)[0:1358] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 295.
verify found no changes in insn with uid = 295.
deleting insn with uid = 197.
scanning new insn with uid = 296.
verify found no changes in insn with uid = 296.
deleting insn with uid = 190.
scanning new insn with uid = 297.
verify found no changes in insn with uid = 297.
deleting insn with uid = 169.
scanning new insn with uid = 298.
verify found no changes in insn with uid = 298.
deleting insn with uid = 153.
scanning new insn with uid = 299.
verify found no changes in insn with uid = 299.
deleting insn with uid = 150.
scanning new insn with uid = 300.
verify found no changes in insn with uid = 300.
deleting insn with uid = 141.
scanning new insn with uid = 301.
verify found no changes in insn with uid = 301.
deleting insn with uid = 125.
scanning new insn with uid = 302.
verify found no changes in insn with uid = 302.
deleting insn with uid = 122.
scanning new insn with uid = 303.
verify found no changes in insn with uid = 303.
deleting insn with uid = 113.
scanning new insn with uid = 304.
verify found no changes in insn with uid = 304.
deleting insn with uid = 97.
scanning new insn with uid = 305.
verify found no changes in insn with uid = 305.
deleting insn with uid = 94.
scanning new insn with uid = 306.
verify found no changes in insn with uid = 306.
deleting insn with uid = 85.
scanning new insn with uid = 307.
verify found no changes in insn with uid = 307.
deleting insn with uid = 70.
scanning new insn with uid = 308.
verify found no changes in insn with uid = 308.
deleting insn with uid = 67.
scanning new insn with uid = 309.
verify found no changes in insn with uid = 309.
deleting insn with uid = 59.
scanning new insn with uid = 310.
verify found no changes in insn with uid = 310.
deleting insn with uid = 52.
scanning new insn with uid = 311.
verify found no changes in insn with uid = 311.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 46 count 35 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 46 count 62 (  1.9)

Pass 0 for finding allocno costs

    a1 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a12(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a22(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a32(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a42(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a55(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r230: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a12(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a22(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a32(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a42(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a55(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 237(l0): point = 0
   Insn 231(l0): point = 2
   Insn 226(l0): point = 4
   Insn 224(l0): point = 6
   Insn 225(l0): point = 8
   Insn 223(l0): point = 10
   Insn 218(l0): point = 13
   Insn 217(l0): point = 15
   Insn 281(l0): point = 18
   Insn 211(l0): point = 20
   Insn 208(l0): point = 22
   Insn 209(l0): point = 24
   Insn 210(l0): point = 26
   Insn 205(l0): point = 29
   Insn 204(l0): point = 31
   Insn 203(l0): point = 33
   Insn 202(l0): point = 35
   Insn 199(l0): point = 38
   Insn 295(l0): point = 40
   Insn 198(l0): point = 42
   Insn 279(l0): point = 45
   Insn 192(l0): point = 47
   Insn 296(l0): point = 49
   Insn 191(l0): point = 51
   Insn 277(l0): point = 54
   Insn 185(l0): point = 57
   Insn 184(l0): point = 59
   Insn 183(l0): point = 62
   Insn 182(l0): point = 64
   Insn 181(l0): point = 66
   Insn 178(l0): point = 69
   Insn 177(l0): point = 71
   Insn 274(l0): point = 74
   Insn 172(l0): point = 76
   Insn 297(l0): point = 78
   Insn 171(l0): point = 80
   Insn 168(l0): point = 82
   Insn 167(l0): point = 84
   Insn 166(l0): point = 86
   Insn 163(l0): point = 88
   Insn 158(l0): point = 90
   Insn 154(l0): point = 92
   Insn 298(l0): point = 94
   Insn 162(l0): point = 96
   Insn 161(l0): point = 98
   Insn 151(l0): point = 100
   Insn 299(l0): point = 102
   Insn 157(l0): point = 104
   Insn 149(l0): point = 106
   Insn 272(l0): point = 109
   Insn 144(l0): point = 111
   Insn 300(l0): point = 113
   Insn 143(l0): point = 115
   Insn 140(l0): point = 117
   Insn 139(l0): point = 119
   Insn 138(l0): point = 121
   Insn 135(l0): point = 123
   Insn 130(l0): point = 125
   Insn 126(l0): point = 127
   Insn 301(l0): point = 129
   Insn 134(l0): point = 131
   Insn 133(l0): point = 133
   Insn 123(l0): point = 135
   Insn 302(l0): point = 137
   Insn 129(l0): point = 139
   Insn 121(l0): point = 141
   Insn 270(l0): point = 144
   Insn 116(l0): point = 146
   Insn 303(l0): point = 148
   Insn 115(l0): point = 150
   Insn 112(l0): point = 152
   Insn 111(l0): point = 154
   Insn 110(l0): point = 156
   Insn 107(l0): point = 158
   Insn 102(l0): point = 160
   Insn 98(l0): point = 162
   Insn 304(l0): point = 164
   Insn 106(l0): point = 166
   Insn 105(l0): point = 168
   Insn 95(l0): point = 170
   Insn 305(l0): point = 172
   Insn 101(l0): point = 174
   Insn 93(l0): point = 176
   Insn 268(l0): point = 179
   Insn 88(l0): point = 181
   Insn 306(l0): point = 183
   Insn 87(l0): point = 185
   Insn 84(l0): point = 187
   Insn 83(l0): point = 189
   Insn 82(l0): point = 191
   Insn 79(l0): point = 193
   Insn 74(l0): point = 195
   Insn 71(l0): point = 197
   Insn 307(l0): point = 199
   Insn 78(l0): point = 201
   Insn 77(l0): point = 203
   Insn 68(l0): point = 205
   Insn 308(l0): point = 207
   Insn 73(l0): point = 209
   Insn 66(l0): point = 211
   Insn 266(l0): point = 214
   Insn 61(l0): point = 216
   Insn 309(l0): point = 218
   Insn 60(l0): point = 220
   Insn 264(l0): point = 223
   Insn 54(l0): point = 225
   Insn 310(l0): point = 227
   Insn 53(l0): point = 229
   Insn 262(l0): point = 232
   Insn 47(l0): point = 235
   Insn 46(l0): point = 237
   Insn 45(l0): point = 239
   Insn 44(l0): point = 242
   Insn 43(l0): point = 244
   Insn 42(l0): point = 246
   Insn 259(l0): point = 249
   Insn 38(l0): point = 252
   Insn 37(l0): point = 254
   Insn 36(l0): point = 256
   Insn 35(l0): point = 259
   Insn 32(l0): point = 262
   Insn 31(l0): point = 264
   Insn 30(l0): point = 266
   Insn 256(l0): point = 269
   Insn 26(l0): point = 272
   Insn 25(l0): point = 274
   Insn 24(l0): point = 276
   Insn 23(l0): point = 279
   Insn 22(l0): point = 281
   Insn 21(l0): point = 283
   Insn 20(l0): point = 286
   Insn 19(l0): point = 288
   Insn 18(l0): point = 290
   Insn 17(l0): point = 293
   Insn 14(l0): point = 296
   Insn 13(l0): point = 298
   Insn 311(l0): point = 300
   Insn 291(l0): point = 302
   Insn 290(l0): point = 304
   Insn 8(l0): point = 307
   Insn 7(l0): point = 309
   Insn 6(l0): point = 311
   Insn 5(l0): point = 313
 a0(r139): [25..33]
 a1(r230): [34..35]
 a2(r228): [39..40]
 a3(r229): [39..42]
 a4(r226): [48..49]
 a5(r227): [48..51]
 a6(r225): [60..66]
 a7(r138): [303..313] [67..73]
 a8(r137): [307..311] [72..73]
 a9(r221): [77..78]
 a10(r223): [77..80]
 a11(r207): [81..106]
 a12(r220): [83..84]
 a13(r219): [85..86]
 a14(r133): [87..88]
 a15(r213): [91..104]
 a16(r210): [93..94]
 a17(r216): [97..98]
 a18(r208): [101..102]
 a19(r204): [112..113]
 a20(r206): [112..115]
 a21(r190): [116..141]
 a22(r203): [118..119]
 a23(r202): [120..121]
 a24(r134): [122..123]
 a25(r196): [126..139]
 a26(r193): [128..129]
 a27(r199): [132..133]
 a28(r191): [136..137]
 a29(r187): [147..148]
 a30(r189): [147..150]
 a31(r173): [151..176]
 a32(r186): [153..154]
 a33(r185): [155..156]
 a34(r135): [157..158]
 a35(r179): [161..174]
 a36(r176): [163..164]
 a37(r182): [167..168]
 a38(r174): [171..172]
 a39(r170): [182..183]
 a40(r172): [182..185]
 a41(r157): [186..211]
 a42(r169): [188..189]
 a43(r168): [190..191]
 a44(r136): [192..193]
 a45(r162): [196..209]
 a46(r160): [198..199]
 a47(r165): [202..203]
 a48(r158): [206..207]
 a49(r155): [217..218]
 a50(r156): [217..220]
 a51(r153): [226..227]
 a52(r154): [226..229]
 a53(r152): [238..239]
 a54(r141): [275..304] [255..268] [238..248]
 a55(r151): [245..246]
 a56(r150): [255..256]
 a57(r148): [265..266]
 a58(r147): [275..276]
 a59(r146): [282..283]
 a60(r145): [289..290]
 a61(r143): [299..300]
Compressing live ranges: from 316 to 120 - 37%
Ranges after the compression:
 a0(r139): [0..1]
 a1(r230): [2..3]
 a2(r228): [4..5]
 a3(r229): [4..6]
 a4(r226): [7..8]
 a5(r227): [7..9]
 a6(r225): [10..11]
 a7(r138): [115..119] [12..14]
 a8(r137): [117..118] [13..14]
 a9(r221): [15..16]
 a10(r223): [15..17]
 a11(r207): [18..33]
 a12(r220): [19..20]
 a13(r219): [21..22]
 a14(r133): [23..24]
 a15(r213): [25..32]
 a16(r210): [26..27]
 a17(r216): [28..29]
 a18(r208): [30..31]
 a19(r204): [34..35]
 a20(r206): [34..36]
 a21(r190): [37..52]
 a22(r203): [38..39]
 a23(r202): [40..41]
 a24(r134): [42..43]
 a25(r196): [44..51]
 a26(r193): [45..46]
 a27(r199): [47..48]
 a28(r191): [49..50]
 a29(r187): [53..54]
 a30(r189): [53..55]
 a31(r173): [56..71]
 a32(r186): [57..58]
 a33(r185): [59..60]
 a34(r135): [61..62]
 a35(r179): [63..70]
 a36(r176): [64..65]
 a37(r182): [66..67]
 a38(r174): [68..69]
 a39(r170): [72..73]
 a40(r172): [72..74]
 a41(r157): [75..90]
 a42(r169): [76..77]
 a43(r168): [78..79]
 a44(r136): [80..81]
 a45(r162): [82..89]
 a46(r160): [83..84]
 a47(r165): [85..86]
 a48(r158): [87..88]
 a49(r155): [91..92]
 a50(r156): [91..93]
 a51(r153): [94..95]
 a52(r154): [94..96]
 a53(r152): [97..98]
 a54(r141): [107..116] [102..106] [97..101]
 a55(r151): [99..100]
 a56(r150): [102..103]
 a57(r148): [104..105]
 a58(r147): [107..108]
 a59(r146): [109..110]
 a60(r145): [111..112]
 a61(r143): [113..114]
+++Allocating 472 bytes for conflict table (uncompressed size 496)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a1(r230,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r228,l0) conflicts: a3(r229,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r229,l0) conflicts: a2(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r226,l0) conflicts: a5(r227,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r227,l0) conflicts: a4(r226,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r225,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r138,l0) conflicts: a8(r137,l0) a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r137,l0) conflicts: a7(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r221,l0) conflicts: a10(r223,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r223,l0) conflicts: a9(r221,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r207,l0) conflicts: a12(r220,l0) a13(r219,l0) a14(r133,l0) a15(r213,l0) a16(r210,l0) a17(r216,l0) a18(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r220,l0) conflicts: a11(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r219,l0) conflicts: a11(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r133,l0) conflicts: a11(r207,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r213,l0) conflicts: a11(r207,l0) a16(r210,l0) a17(r216,l0) a18(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r210,l0) conflicts: a11(r207,l0) a15(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r216,l0) conflicts: a11(r207,l0) a15(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r208,l0) conflicts: a11(r207,l0) a15(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r204,l0) conflicts: a20(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r206,l0) conflicts: a19(r204,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r190,l0) conflicts: a22(r203,l0) a23(r202,l0) a24(r134,l0) a25(r196,l0) a26(r193,l0) a27(r199,l0) a28(r191,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r203,l0) conflicts: a21(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r202,l0) conflicts: a21(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r134,l0) conflicts: a21(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r196,l0) conflicts: a21(r190,l0) a26(r193,l0) a27(r199,l0) a28(r191,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r193,l0) conflicts: a21(r190,l0) a25(r196,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r199,l0) conflicts: a21(r190,l0) a25(r196,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r191,l0) conflicts: a21(r190,l0) a25(r196,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r187,l0) conflicts: a30(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r189,l0) conflicts: a29(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r173,l0) conflicts: a32(r186,l0) a33(r185,l0) a34(r135,l0) a35(r179,l0) a36(r176,l0) a37(r182,l0) a38(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r186,l0) conflicts: a31(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r185,l0) conflicts: a31(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r135,l0) conflicts: a31(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r179,l0) conflicts: a31(r173,l0) a36(r176,l0) a37(r182,l0) a38(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r176,l0) conflicts: a31(r173,l0) a35(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r182,l0) conflicts: a31(r173,l0) a35(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r174,l0) conflicts: a31(r173,l0) a35(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r170,l0) conflicts: a40(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r172,l0) conflicts: a39(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r157,l0) conflicts: a42(r169,l0) a43(r168,l0) a44(r136,l0) a45(r162,l0) a46(r160,l0) a47(r165,l0) a48(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r169,l0) conflicts: a41(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r168,l0) conflicts: a41(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r136,l0) conflicts: a41(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r162,l0) conflicts: a41(r157,l0) a46(r160,l0) a47(r165,l0) a48(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r160,l0) conflicts: a41(r157,l0) a45(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r165,l0) conflicts: a41(r157,l0) a45(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r158,l0) conflicts: a41(r157,l0) a45(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r155,l0) conflicts: a50(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r156,l0) conflicts: a49(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r153,l0) conflicts: a52(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r154,l0) conflicts: a51(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r152,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r141,l0) conflicts: a7(r138,l0) a53(r152,l0) a55(r151,l0) a56(r150,l0) a57(r148,l0) a58(r147,l0) a59(r146,l0) a60(r145,l0) a61(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r151,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r150,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r148,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r147,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r146,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r145,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r143,l0) conflicts: a54(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a6(r225)<->a7(r138)@125:shuffle
  cp1:a13(r219)<->a14(r133)@125:shuffle
  cp2:a12(r220)<->a13(r219)@125:shuffle
  cp3:a10(r223)<->a11(r207)@125:shuffle
  cp4:a23(r202)<->a24(r134)@125:shuffle
  cp5:a22(r203)<->a23(r202)@125:shuffle
  cp6:a20(r206)<->a21(r190)@125:shuffle
  cp7:a33(r185)<->a34(r135)@125:shuffle
  cp8:a32(r186)<->a33(r185)@125:shuffle
  cp9:a30(r189)<->a31(r173)@125:shuffle
  cp10:a43(r168)<->a44(r136)@125:shuffle
  cp11:a42(r169)<->a43(r168)@125:shuffle
  cp12:a40(r172)<->a41(r157)@125:shuffle
  regions=1, blocks=32, points=120
    allocnos=62, copies=13, conflicts=37, ranges=66

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r139 1r230 2r228 3r229 4r226 5r227 6r225 7r138 8r137 9r221 10r223 11r207 12r220 13r219 14r133 15r213 16r210 17r216 18r208 19r204 20r206 21r190 22r203 23r202 24r134 25r196 26r193 27r199 28r191 29r187 30r189 31r173 32r186 33r185 34r135 35r179 36r176 37r182 38r174 39r170 40r172 41r157 42r169 43r168 44r136 45r162 46r160 47r165 48r158 49r155 50r156 51r153 52r154 53r152 54r141 55r151 56r150 57r148 58r147 59r146 60r145 61r143
    modified regnos: 133 134 135 136 137 138 139 141 143 145 146 147 148 150 151 152 153 154 155 156 157 158 160 162 165 168 169 170 172 173 174 176 179 182 185 186 187 189 190 191 193 196 199 202 203 204 206 207 208 210 213 216 219 220 221 223 225 226 227 228 229 230
    border:
    Pressure: GENERAL_REGS=4
    Reg 139 of GENERAL_REGS has 1 regs less
      Pushing a61(r143,l0)
      Pushing a60(r145,l0)
      Pushing a59(r146,l0)
      Pushing a58(r147,l0)
      Pushing a57(r148,l0)
      Pushing a56(r150,l0)
      Pushing a55(r151,l0)
      Pushing a53(r152,l0)
      Pushing a52(r154,l0)
      Pushing a51(r153,l0)
      Pushing a50(r156,l0)
      Pushing a49(r155,l0)
      Pushing a48(r158,l0)
      Pushing a47(r165,l0)
      Pushing a46(r160,l0)
      Pushing a44(r136,l0)
      Pushing a43(r168,l0)
      Pushing a42(r169,l0)
      Pushing a40(r172,l0)
      Pushing a39(r170,l0)
      Pushing a38(r174,l0)
      Pushing a37(r182,l0)
      Pushing a36(r176,l0)
      Pushing a34(r135,l0)
      Pushing a33(r185,l0)
      Pushing a32(r186,l0)
      Pushing a30(r189,l0)
      Pushing a29(r187,l0)
      Pushing a28(r191,l0)
      Pushing a27(r199,l0)
      Pushing a26(r193,l0)
      Pushing a24(r134,l0)
      Pushing a23(r202,l0)
      Pushing a22(r203,l0)
      Pushing a20(r206,l0)
      Pushing a19(r204,l0)
      Pushing a18(r208,l0)
      Pushing a17(r216,l0)
      Pushing a16(r210,l0)
      Pushing a14(r133,l0)
      Pushing a13(r219,l0)
      Pushing a12(r220,l0)
      Pushing a10(r223,l0)
      Pushing a9(r221,l0)
      Pushing a5(r227,l0)
      Pushing a4(r226,l0)
      Pushing a3(r229,l0)
      Pushing a2(r228,l0)
      Pushing a1(r230,l0)
      Pushing a45(r162,l0)
      Pushing a35(r179,l0)
      Pushing a25(r196,l0)
      Pushing a15(r213,l0)
      Pushing a8(r137,l0)
      Pushing a6(r225,l0)
      Pushing a7(r138,l0)
      Pushing a41(r157,l0)
      Pushing a31(r173,l0)
      Pushing a21(r190,l0)
      Pushing a11(r207,l0)
      Pushing a54(r141,l0)
      Pushing a0(r139,l0)
      Popping a0(r139,l0)  -- assign reg 3
      Popping a54(r141,l0)  -- assign reg 3
      Popping a11(r207,l0)  -- assign reg 3
      Popping a21(r190,l0)  -- assign reg 3
      Popping a31(r173,l0)  -- assign reg 3
      Popping a41(r157,l0)  -- assign reg 3
      Popping a7(r138,l0)  -- assign reg 2
      Popping a6(r225,l0)  -- assign reg 2
      Popping a8(r137,l0)  -- assign reg 3
      Popping a15(r213,l0)  -- assign reg 2
      Popping a25(r196,l0)  -- assign reg 2
      Popping a35(r179,l0)  -- assign reg 2
      Popping a45(r162,l0)  -- assign reg 2
      Popping a1(r230,l0)  -- assign reg 3
      Popping a2(r228,l0)  -- assign reg 3
      Popping a3(r229,l0)  -- assign reg 2
      Popping a4(r226,l0)  -- assign reg 3
      Popping a5(r227,l0)  -- assign reg 2
      Popping a9(r221,l0)  -- assign reg 2
      Popping a10(r223,l0)  -- assign reg 3
      Popping a12(r220,l0)  -- assign reg 2
      Popping a13(r219,l0)  -- assign reg 2
      Popping a14(r133,l0)  -- assign reg 2
      Popping a16(r210,l0)  -- assign reg 1
      Popping a17(r216,l0)  -- assign reg 1
      Popping a18(r208,l0)  -- assign reg 1
      Popping a19(r204,l0)  -- assign reg 2
      Popping a20(r206,l0)  -- assign reg 3
      Popping a22(r203,l0)  -- assign reg 2
      Popping a23(r202,l0)  -- assign reg 2
      Popping a24(r134,l0)  -- assign reg 2
      Popping a26(r193,l0)  -- assign reg 1
      Popping a27(r199,l0)  -- assign reg 1
      Popping a28(r191,l0)  -- assign reg 1
      Popping a29(r187,l0)  -- assign reg 2
      Popping a30(r189,l0)  -- assign reg 3
      Popping a32(r186,l0)  -- assign reg 2
      Popping a33(r185,l0)  -- assign reg 2
      Popping a34(r135,l0)  -- assign reg 2
      Popping a36(r176,l0)  -- assign reg 1
      Popping a37(r182,l0)  -- assign reg 1
      Popping a38(r174,l0)  -- assign reg 1
      Popping a39(r170,l0)  -- assign reg 2
      Popping a40(r172,l0)  -- assign reg 3
      Popping a42(r169,l0)  -- assign reg 2
      Popping a43(r168,l0)  -- assign reg 2
      Popping a44(r136,l0)  -- assign reg 2
      Popping a46(r160,l0)  -- assign reg 1
      Popping a47(r165,l0)  -- assign reg 1
      Popping a48(r158,l0)  -- assign reg 1
      Popping a49(r155,l0)  -- assign reg 3
      Popping a50(r156,l0)  -- assign reg 2
      Popping a51(r153,l0)  -- assign reg 3
      Popping a52(r154,l0)  -- assign reg 2
      Popping a53(r152,l0)  -- assign reg 2
      Popping a55(r151,l0)  -- assign reg 2
      Popping a56(r150,l0)  -- assign reg 2
      Popping a57(r148,l0)  -- assign reg 2
      Popping a58(r147,l0)  -- assign reg 2
      Popping a59(r146,l0)  -- assign reg 2
      Popping a60(r145,l0)  -- assign reg 2
      Popping a61(r143,l0)  -- assign reg 2
Disposition:
   14:r133 l0     2   24:r134 l0     2   34:r135 l0     2   44:r136 l0     2
    8:r137 l0     3    7:r138 l0     2    0:r139 l0     3   54:r141 l0     3
   61:r143 l0     2   60:r145 l0     2   59:r146 l0     2   58:r147 l0     2
   57:r148 l0     2   56:r150 l0     2   55:r151 l0     2   53:r152 l0     2
   51:r153 l0     3   52:r154 l0     2   49:r155 l0     3   50:r156 l0     2
   41:r157 l0     3   48:r158 l0     1   46:r160 l0     1   45:r162 l0     2
   47:r165 l0     1   43:r168 l0     2   42:r169 l0     2   39:r170 l0     2
   40:r172 l0     3   31:r173 l0     3   38:r174 l0     1   36:r176 l0     1
   35:r179 l0     2   37:r182 l0     1   33:r185 l0     2   32:r186 l0     2
   29:r187 l0     2   30:r189 l0     3   21:r190 l0     3   28:r191 l0     1
   26:r193 l0     1   25:r196 l0     2   27:r199 l0     1   23:r202 l0     2
   22:r203 l0     2   19:r204 l0     2   20:r206 l0     3   11:r207 l0     3
   18:r208 l0     1   16:r210 l0     1   15:r213 l0     2   17:r216 l0     1
   13:r219 l0     2   12:r220 l0     2    9:r221 l0     2   10:r223 l0     3
    6:r225 l0     2    4:r226 l0     3    5:r227 l0     2    2:r228 l0     3
    3:r229 l0     2    1:r230 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 138
insn=6, live_throughout: 13, 138, dead_or_set: 137
insn=7, live_throughout: 13, 137, 138, dead_or_set: 
insn=8, live_throughout: 13, 137, 138, dead_or_set: 
insn=290, live_throughout: 13, 138, dead_or_set: 141
insn=291, live_throughout: 13, dead_or_set: 138, 141
insn=311, live_throughout: 13, 141, dead_or_set: 143
insn=13, live_throughout: 13, 141, dead_or_set: 143
insn=14, live_throughout: 13, 24, 141, dead_or_set: 
insn=17, live_throughout: 13, 141, dead_or_set: 
insn=18, live_throughout: 13, 141, dead_or_set: 145
insn=19, live_throughout: 13, 141, dead_or_set: 145
insn=20, live_throughout: 13, 141, dead_or_set: 
insn=21, live_throughout: 13, 141, dead_or_set: 146
insn=22, live_throughout: 13, 141, dead_or_set: 146
insn=23, live_throughout: 13, 141, dead_or_set: 
insn=24, live_throughout: 13, 141, dead_or_set: 147
insn=25, live_throughout: 13, dead_or_set: 141, 147
insn=26, live_throughout: 13, dead_or_set: 
insn=256, live_throughout: 13, dead_or_set: 
insn=29, live_throughout: 13, 141, dead_or_set: 
insn=30, live_throughout: 13, 141, dead_or_set: 148
insn=31, live_throughout: 13, 141, dead_or_set: 148
insn=32, live_throughout: 13, 24, 141, dead_or_set: 
insn=35, live_throughout: 13, 141, dead_or_set: 
insn=36, live_throughout: 13, 141, dead_or_set: 150
insn=37, live_throughout: 13, dead_or_set: 141, 150
insn=38, live_throughout: 13, dead_or_set: 
insn=259, live_throughout: 13, dead_or_set: 
insn=41, live_throughout: 13, 141, dead_or_set: 
insn=42, live_throughout: 13, 141, dead_or_set: 151
insn=43, live_throughout: 13, 141, dead_or_set: 151
insn=44, live_throughout: 13, 141, dead_or_set: 
insn=45, live_throughout: 13, 141, dead_or_set: 152
insn=46, live_throughout: 13, dead_or_set: 141, 152
insn=47, live_throughout: 13, dead_or_set: 
insn=262, live_throughout: 13, dead_or_set: 
insn=50, live_throughout: 13, dead_or_set: 
insn=53, live_throughout: 13, dead_or_set: 154
insn=310, live_throughout: 13, 154, dead_or_set: 153
insn=54, live_throughout: 13, dead_or_set: 153, 154
insn=264, live_throughout: 13, dead_or_set: 
insn=57, live_throughout: 13, dead_or_set: 
insn=60, live_throughout: 13, dead_or_set: 156
insn=309, live_throughout: 13, 156, dead_or_set: 155
insn=61, live_throughout: 13, dead_or_set: 155, 156
insn=266, live_throughout: 13, dead_or_set: 
insn=64, live_throughout: 13, dead_or_set: 
insn=66, live_throughout: 13, dead_or_set: 157
insn=73, live_throughout: 13, 157, dead_or_set: 162
insn=308, live_throughout: 13, 157, 162, dead_or_set: 158
insn=68, live_throughout: 13, 157, 162, dead_or_set: 158
insn=77, live_throughout: 13, 157, 162, dead_or_set: 165
insn=78, live_throughout: 13, 157, 162, dead_or_set: 165
insn=307, live_throughout: 13, 157, 162, dead_or_set: 160
insn=71, live_throughout: 13, 157, 162, dead_or_set: 160
insn=74, live_throughout: 13, 157, dead_or_set: 162
insn=79, live_throughout: 13, 157, dead_or_set: 136
insn=82, live_throughout: 13, 157, dead_or_set: 136, 168
insn=83, live_throughout: 13, 157, dead_or_set: 168, 169
insn=84, live_throughout: 13, 157, dead_or_set: 169
insn=87, live_throughout: 13, dead_or_set: 157, 172
insn=306, live_throughout: 13, 172, dead_or_set: 170
insn=88, live_throughout: 13, dead_or_set: 170, 172
insn=268, live_throughout: 13, dead_or_set: 
insn=91, live_throughout: 13, dead_or_set: 
insn=93, live_throughout: 13, dead_or_set: 173
insn=101, live_throughout: 13, 173, dead_or_set: 179
insn=305, live_throughout: 13, 173, 179, dead_or_set: 174
insn=95, live_throughout: 13, 173, 179, dead_or_set: 174
insn=105, live_throughout: 13, 173, 179, dead_or_set: 182
insn=106, live_throughout: 13, 173, 179, dead_or_set: 182
insn=304, live_throughout: 13, 173, 179, dead_or_set: 176
insn=98, live_throughout: 13, 173, 179, dead_or_set: 176
insn=102, live_throughout: 13, 173, dead_or_set: 179
insn=107, live_throughout: 13, 173, dead_or_set: 135
insn=110, live_throughout: 13, 173, dead_or_set: 135, 185
insn=111, live_throughout: 13, 173, dead_or_set: 185, 186
insn=112, live_throughout: 13, 173, dead_or_set: 186
insn=115, live_throughout: 13, dead_or_set: 173, 189
insn=303, live_throughout: 13, 189, dead_or_set: 187
insn=116, live_throughout: 13, dead_or_set: 187, 189
insn=270, live_throughout: 13, dead_or_set: 
insn=119, live_throughout: 13, dead_or_set: 
insn=121, live_throughout: 13, dead_or_set: 190
insn=129, live_throughout: 13, 190, dead_or_set: 196
insn=302, live_throughout: 13, 190, 196, dead_or_set: 191
insn=123, live_throughout: 13, 190, 196, dead_or_set: 191
insn=133, live_throughout: 13, 190, 196, dead_or_set: 199
insn=134, live_throughout: 13, 190, 196, dead_or_set: 199
insn=301, live_throughout: 13, 190, 196, dead_or_set: 193
insn=126, live_throughout: 13, 190, 196, dead_or_set: 193
insn=130, live_throughout: 13, 190, dead_or_set: 196
insn=135, live_throughout: 13, 190, dead_or_set: 134
insn=138, live_throughout: 13, 190, dead_or_set: 134, 202
insn=139, live_throughout: 13, 190, dead_or_set: 202, 203
insn=140, live_throughout: 13, 190, dead_or_set: 203
insn=143, live_throughout: 13, dead_or_set: 190, 206
insn=300, live_throughout: 13, 206, dead_or_set: 204
insn=144, live_throughout: 13, dead_or_set: 204, 206
insn=272, live_throughout: 13, dead_or_set: 
insn=147, live_throughout: 13, dead_or_set: 
insn=149, live_throughout: 13, dead_or_set: 207
insn=157, live_throughout: 13, 207, dead_or_set: 213
insn=299, live_throughout: 13, 207, 213, dead_or_set: 208
insn=151, live_throughout: 13, 207, 213, dead_or_set: 208
insn=161, live_throughout: 13, 207, 213, dead_or_set: 216
insn=162, live_throughout: 13, 207, 213, dead_or_set: 216
insn=298, live_throughout: 13, 207, 213, dead_or_set: 210
insn=154, live_throughout: 13, 207, 213, dead_or_set: 210
insn=158, live_throughout: 13, 207, dead_or_set: 213
insn=163, live_throughout: 13, 207, dead_or_set: 133
insn=166, live_throughout: 13, 207, dead_or_set: 133, 219
insn=167, live_throughout: 13, 207, dead_or_set: 219, 220
insn=168, live_throughout: 13, 207, dead_or_set: 220
insn=171, live_throughout: 13, dead_or_set: 207, 223
insn=297, live_throughout: 13, 223, dead_or_set: 221
insn=172, live_throughout: 13, dead_or_set: 221, 223
insn=274, live_throughout: 13, dead_or_set: 
insn=175, live_throughout: 13, 137, 138, dead_or_set: 
insn=177, live_throughout: 13, 138, dead_or_set: 137
insn=178, live_throughout: 13, 138, dead_or_set: 
insn=181, live_throughout: 13, dead_or_set: 138, 225
insn=182, live_throughout: 13, 225, dead_or_set: 
insn=183, live_throughout: 13, 225, dead_or_set: 
insn=184, live_throughout: 13, dead_or_set: 225
insn=185, live_throughout: 13, dead_or_set: 
insn=277, live_throughout: 13, dead_or_set: 
insn=188, live_throughout: 13, dead_or_set: 
insn=191, live_throughout: 13, dead_or_set: 227
insn=296, live_throughout: 13, 227, dead_or_set: 226
insn=192, live_throughout: 13, dead_or_set: 226, 227
insn=279, live_throughout: 13, dead_or_set: 
insn=195, live_throughout: 13, dead_or_set: 
insn=198, live_throughout: 13, dead_or_set: 229
insn=295, live_throughout: 13, 229, dead_or_set: 228
insn=199, live_throughout: 13, dead_or_set: 228, 229
insn=200, live_throughout: 13, dead_or_set: 
insn=202, live_throughout: 13, dead_or_set: 230
insn=203, live_throughout: 13, dead_or_set: 139, 230
insn=204, live_throughout: 13, 139, dead_or_set: 
insn=205, live_throughout: 13, 139, dead_or_set: 
insn=210, live_throughout: 13, 139, dead_or_set: 2
insn=209, live_throughout: 2, 13, dead_or_set: 1, 139
insn=208, live_throughout: 1, 2, 13, dead_or_set: 0
insn=211, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=281, live_throughout: 13, dead_or_set: 
insn=214, live_throughout: 13, dead_or_set: 
insn=217, live_throughout: 13, dead_or_set: 0
insn=218, live_throughout: 13, dead_or_set: 0, 14
insn=219, live_throughout: 13, dead_or_set: 
insn=223, live_throughout: 13, dead_or_set: 0
insn=225, live_throughout: 0, 13, dead_or_set: 2
insn=224, live_throughout: 0, 2, 13, dead_or_set: 1
insn=226, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=231, live_throughout: 13, 14, dead_or_set: 0
insn=237, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 311 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 310 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 309 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 60 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 66 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 308 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 307 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 77 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 84 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 306 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 87 (nil))
init_insns for 173: (insn_list:REG_DEP_TRUE 93 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 305 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 304 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 101 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 112 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 303 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 115 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 121 (nil))
init_insns for 191: (insn_list:REG_DEP_TRUE 302 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 301 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 129 (nil))
init_insns for 199: (insn_list:REG_DEP_TRUE 133 (nil))
init_insns for 203: (insn_list:REG_DEP_TRUE 140 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 300 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 143 (nil))
init_insns for 207: (insn_list:REG_DEP_TRUE 149 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 299 (nil))
init_insns for 210: (insn_list:REG_DEP_TRUE 298 (nil))
init_insns for 213: (insn_list:REG_DEP_TRUE 157 (nil))
init_insns for 216: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 168 (nil))
init_insns for 221: (insn_list:REG_DEP_TRUE 297 (nil))
init_insns for 223: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 226: (insn_list:REG_DEP_TRUE 296 (nil))
init_insns for 227: (insn_list:REG_DEP_TRUE 191 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 295 (nil))
init_insns for 229: (insn_list:REG_DEP_TRUE 198 (nil))
init_insns for 230: (insn_list:REG_DEP_TRUE 202 (nil))
changing reg in insn 163
changing reg in insn 166
changing reg in insn 135
changing reg in insn 138
changing reg in insn 107
changing reg in insn 110
changing reg in insn 79
changing reg in insn 82
changing reg in insn 6
changing reg in insn 177
changing reg in insn 7
changing reg in insn 5
changing reg in insn 291
changing reg in insn 181
changing reg in insn 6
changing reg in insn 203
changing reg in insn 210
changing reg in insn 209
changing reg in insn 204
changing reg in insn 291
changing reg in insn 290
changing reg in insn 291
changing reg in insn 46
changing reg in insn 43
changing reg in insn 37
changing reg in insn 31
changing reg in insn 25
changing reg in insn 22
changing reg in insn 19
changing reg in insn 13
changing reg in insn 46
changing reg in insn 43
changing reg in insn 37
changing reg in insn 31
changing reg in insn 25
changing reg in insn 22
changing reg in insn 19
changing reg in insn 13
changing reg in insn 311
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 310
changing reg in insn 54
changing reg in insn 53
changing reg in insn 54
changing reg in insn 309
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 87
changing reg in insn 84
changing reg in insn 78
changing reg in insn 74
changing reg in insn 71
changing reg in insn 68
changing reg in insn 83
changing reg in insn 308
changing reg in insn 68
changing reg in insn 307
changing reg in insn 71
changing reg in insn 73
changing reg in insn 77
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 306
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 93
changing reg in insn 115
changing reg in insn 112
changing reg in insn 106
changing reg in insn 102
changing reg in insn 98
changing reg in insn 95
changing reg in insn 111
changing reg in insn 305
changing reg in insn 95
changing reg in insn 304
changing reg in insn 98
changing reg in insn 101
changing reg in insn 105
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 303
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 143
changing reg in insn 140
changing reg in insn 134
changing reg in insn 130
changing reg in insn 126
changing reg in insn 123
changing reg in insn 139
changing reg in insn 302
changing reg in insn 123
changing reg in insn 301
changing reg in insn 126
changing reg in insn 129
changing reg in insn 133
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 300
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
changing reg in insn 149
changing reg in insn 171
changing reg in insn 168
changing reg in insn 162
changing reg in insn 158
changing reg in insn 154
changing reg in insn 151
changing reg in insn 167
changing reg in insn 299
changing reg in insn 151
changing reg in insn 298
changing reg in insn 154
changing reg in insn 157
changing reg in insn 161
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 297
changing reg in insn 172
changing reg in insn 171
changing reg in insn 172
changing reg in insn 181
changing reg in insn 184
changing reg in insn 182
changing reg in insn 296
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 295
changing reg in insn 199
changing reg in insn 198
changing reg in insn 199
changing reg in insn 202
changing reg in insn 203
Spilling for insn 54.
Spilling for insn 61.
Spilling for insn 68.
Spilling for insn 78.
Spilling for insn 71.
Spilling for insn 74.
Spilling for insn 84.
Spilling for insn 88.
Spilling for insn 95.
Spilling for insn 106.
Spilling for insn 98.
Spilling for insn 102.
Spilling for insn 112.
Spilling for insn 116.
Spilling for insn 123.
Spilling for insn 134.
Spilling for insn 126.
Spilling for insn 130.
Spilling for insn 140.
Spilling for insn 144.
Spilling for insn 151.
Spilling for insn 162.
Spilling for insn 154.
Spilling for insn 158.
Spilling for insn 168.
Spilling for insn 172.
Spilling for insn 192.
Spilling for insn 199.

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])

Reloads for insn # 61
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [155]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [155]) [0 armpmu+0 S4 A32])

Reloads for insn # 68
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])

Reloads for insn # 78
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])

Reloads for insn # 71
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])

Reloads for insn # 74
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])

Reloads for insn # 84
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])

Reloads for insn # 88
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 2 r2 [170]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 2 r2 [170]) [0 armpmu+0 S4 A32])

Reloads for insn # 95
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])

Reloads for insn # 106
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])

Reloads for insn # 98
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])

Reloads for insn # 102
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])

Reloads for insn # 112
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])

Reloads for insn # 116
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 2 r2 [187]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 2 r2 [187]) [0 armpmu+0 S4 A32])

Reloads for insn # 123
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])

Reloads for insn # 126
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])

Reloads for insn # 130
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])

Reloads for insn # 140
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])

Reloads for insn # 144
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 2 r2 [204]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 2 r2 [204]) [0 armpmu+0 S4 A32])

Reloads for insn # 151
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])

Reloads for insn # 162
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])

Reloads for insn # 154
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])

Reloads for insn # 158
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])

Reloads for insn # 168
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                                                        (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])

Reloads for insn # 172
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 2 r2 [221]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 2 r2 [221]) [0 armpmu+0 S4 A32])

Reloads for insn # 192
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [226]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [226]) [0 armpmu+0 S4 A32])

Reloads for insn # 199
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [228]) [0 armpmu+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [228]) [0 armpmu+0 S4 A32])


try_optimize_cfg iteration 1

Forwarding edge 7->8 to 17 failed.
Forwarding edge 11->12 to 20 failed.
Forwarding edge 14->15 to 21 failed.
Forwarding edge 24->25 to 27 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 211.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 226.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 46 count 35 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 46 count 62 (  1.9)


init_hw_perf_events

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={18d,14u} r2={40d,43u} r3={21d,47u,12d} r12={4d} r13={1d,34u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={17d,15u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 614{443d,159u,12e} in 143{140 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cputype.h:60 (parallel [
            (set (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 8511357))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 6 5 7 2 arch/arm/kernel/perf_event.c:645 (set (reg/v:SI 3 r3 [orig:137 implementor ] [137])
        (lshiftrt:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 24 [0x18]))) 117 {*arm_shiftsi3} (nil))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:649 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 65 [0x41]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/perf_event.c:649 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 22)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  22 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 9 8 290 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 290 9 291 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (const_int 65520 [0xfff0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 65520 [0xfff0])
        (nil)))

(insn 291 290 311 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 3 r3 [141])
        (and:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (reg:SI 3 r3 [141]))) 67 {*arm_andsi3_insn} (nil))

(insn 311 291 13 3 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [143])
        (const_int 46944 [0xb760])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 46944 [0xb760])
        (nil)))

(insn 13 311 14 3 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46944 [0xb760]))
        (nil)))

(jump_insn 14 13 239 3 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 3 -> ( 16 4)
;; lr  out 	 3 [r3] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 13 [sp] 24 [cc]


;; Succ edge  16 [29.0%] 
;; Succ edge  4 [71.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 239 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 17 239 240 4 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 9 5)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 240 17 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 18 240 19 5 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [145])
        (const_int 45920 [0xb360])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 45920 [0xb360])
        (nil)))

(insn 19 18 20 5 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 45920 [0xb360]))
        (nil)))

(jump_insn 20 19 241 5 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 5 -> ( 16 6)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  16 [29.0%] 
;; Succ edge  6 [71.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%]  (fallthru)
(note 241 20 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 21 241 22 6 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [146])
        (const_int 46432 [0xb560])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 46432 [0xb560])
        (nil)))

(insn 22 21 23 6 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 46432 [0xb560]))
        (nil)))

(jump_insn 23 22 242 6 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 6 -> ( 16 7)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  16 [29.0%] 
;; Succ edge  7 [71.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  6 [71.0%]  (fallthru)
(note 242 23 24 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 24 242 25 7 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [147])
        (const_int 45088 [0xb020])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 45088 [0xb020])
        (nil)))

(insn 25 24 26 7 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [147]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 45088 [0xb020]))
        (nil)))

(jump_insn 26 25 255 7 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 7 -> ( 8 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  8 [29.0%]  (fallthru)
;; Succ edge  28 [71.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [29.0%]  (fallthru)
(note 255 26 256 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(jump_insn 256 255 257 8 (set (pc)
        (label_ref 57)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 17)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 257 256 29)

;; Start of basic block ( 4) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 29 257 244 9 103 "" [1 uses])

(note 244 29 30 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 30 244 31 9 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [148])
        (const_int 49280 [0xc080])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49280 [0xc080])
        (nil)))

(insn 31 30 32 9 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [148]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49280 [0xc080]))
        (nil)))

(jump_insn 32 31 245 9 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 9 -> ( 18 10)
;; lr  out 	 3 [r3] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 13 [sp] 24 [cc]


;; Succ edge  18 [29.0%] 
;; Succ edge  10 [71.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [71.0%]  (fallthru)
(note 245 32 35 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(jump_insn 35 245 246 10 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 13 11)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  13 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 246 35 36 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 36 246 37 11 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [150])
        (const_int 49232 [0xc050])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49232 [0xc050])
        (nil)))

(insn 37 36 38 11 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49232 [0xc050]))
        (nil)))

(jump_insn 38 37 258 11 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 11 -> ( 12 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  28 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [29.0%]  (fallthru)
(note 258 38 259 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 259 258 260 12 (set (pc)
        (label_ref 119)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 20)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 260 259 41)

;; Start of basic block ( 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%] 
(code_label 41 260 248 13 104 "" [1 uses])

(note 248 41 42 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 42 248 43 13 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [151])
        (const_int 49296 [0xc090])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49296 [0xc090])
        (nil)))

(insn 43 42 44 13 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49296 [0xc090]))
        (nil)))

(jump_insn 44 43 249 13 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 13 -> ( 19 14)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  19 [29.0%] 
;; Succ edge  14 [71.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  13 [71.0%]  (fallthru)
(note 249 44 45 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 45 249 46 14 arch/arm/kernel/perf_event.c:650 (set (reg:SI 2 r2 [152])
        (const_int 49392 [0xc0f0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 49392 [0xc0f0])
        (nil)))

(insn 46 45 47 14 arch/arm/kernel/perf_event.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (reg:SI 2 r2 [152]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [141])
            (const_int 49392 [0xc0f0]))
        (nil)))

(jump_insn 47 46 261 14 arch/arm/kernel/perf_event.c:650 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 14 -> ( 15 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  15 [29.0%]  (fallthru)
;; Succ edge  28 [71.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  14 [29.0%]  (fallthru)
(note 261 47 262 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn 262 261 263 15 (set (pc)
        (label_ref 147)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 21)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 263 262 50)

;; Start of basic block ( 3 5 6) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  3 [29.0%] 
;; Pred edge  5 [29.0%] 
;; Pred edge  6 [29.0%] 
(code_label 50 263 51 16 98 "" [3 uses])

(note 51 50 53 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 310 16 arch/arm/kernel/perf_event.c:654 (set (reg:SI 2 r2 [154])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 310 53 54 16 arch/arm/kernel/perf_event.c:654 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 54 310 264 16 arch/arm/kernel/perf_event.c:654 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [154])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 264 54 265 16 arch/arm/kernel/perf_event.c:655 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 265 264 57)

;; Start of basic block ( 8) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  8 [100.0%] 
(code_label 57 265 58 17 97 "" [1 uses])

(note 58 57 60 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 60 58 309 17 arch/arm/kernel/perf_event.c:657 (set (reg:SI 2 r2 [156])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 309 60 61 17 arch/arm/kernel/perf_event.c:657 (set (reg/f:SI 3 r3 [155])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 61 309 266 17 arch/arm/kernel/perf_event.c:657 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [155]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 266 61 267 17 arch/arm/kernel/perf_event.c:658 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 267 266 64)

;; Start of basic block ( 9) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  9 [29.0%] 
(code_label 64 267 65 18 100 "" [1 uses])

(note 65 64 81 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 81 65 66 18 NOTE_INSN_DELETED)

(insn 66 81 73 18 arch/arm/kernel/perf_event_v7.c:1193 (set (reg/f:SI 3 r3 [157])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 73 66 308 18 arch/arm/kernel/perf_event_v7.c:1195 (set (reg/f:SI 2 r2 [162])
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(insn 308 73 68 18 arch/arm/kernel/perf_event_v7.c:1193 (set (reg:SI 1 r1 [158])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn 68 308 77 18 arch/arm/kernel/perf_event_v7.c:1193 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [158])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(insn 77 68 78 18 arch/arm/kernel/perf_event_v7.c:1196 (set (reg/f:SI 1 r1 [165])
        (plus:SI (reg/f:SI 2 r2 [162])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 168 [0xa8])))
        (nil)))

(insn 78 77 307 18 arch/arm/kernel/perf_event_v7.c:1196 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [165])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 168 [0xa8])))
        (nil)))

(insn 307 78 71 18 arch/arm/kernel/perf_event_v7.c:1194 (set (reg/f:SI 1 r1 [160])
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)
        (nil)))

(insn 71 307 74 18 arch/arm/kernel/perf_event_v7.c:1194 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [160])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1163c4b0>)
        (nil)))

(insn 74 71 79 18 arch/arm/kernel/perf_event_v7.c:1195 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [162])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(insn 79 74 82 18 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:136 val ] [136])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 82 79 83 18 arch/arm/kernel/perf_event_v7.c:1197 (set (reg:SI 2 r2 [168])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:136 val ] [136])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(insn 83 82 84 18 arch/arm/kernel/perf_event_v7.c:1197 (set (reg:SI 2 r2 [169])
        (plus:SI (reg:SI 2 r2 [168])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 84 83 87 18 arch/arm/kernel/perf_event_v7.c:1197 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [157])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [169])) 167 {*arm_movsi_insn} (nil))

(insn 87 84 306 18 arch/arm/kernel/perf_event.c:660 (set (reg/f:SI 3 r3 [172])
        (plus:SI (reg/f:SI 3 r3 [157])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn 306 87 88 18 arch/arm/kernel/perf_event.c:660 (set (reg/f:SI 2 r2 [170])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 88 306 268 18 arch/arm/kernel/perf_event.c:660 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [170]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [172])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(jump_insn 268 88 269 18 arch/arm/kernel/perf_event.c:661 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 269 268 91)

;; Start of basic block ( 13) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  13 [29.0%] 
(code_label 91 269 92 19 101 "" [1 uses])

(note 92 91 109 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 109 92 93 19 NOTE_INSN_DELETED)

(insn 93 109 101 19 arch/arm/kernel/perf_event_v7.c:1203 (set (reg/f:SI 3 r3 [173])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 101 93 305 19 arch/arm/kernel/perf_event_v7.c:1205 (set (reg/f:SI 2 r2 [179])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))
        (nil)))

(insn 305 101 95 19 arch/arm/kernel/perf_event_v7.c:1203 (set (reg:SI 1 r1 [174])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 95 305 105 19 arch/arm/kernel/perf_event_v7.c:1203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [174])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 105 95 106 19 arch/arm/kernel/perf_event_v7.c:1206 (set (reg/f:SI 1 r1 [182])
        (plus:SI (reg/f:SI 2 r2 [179])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 372 [0x174])))
        (nil)))

(insn 106 105 304 19 arch/arm/kernel/perf_event_v7.c:1206 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 372 [0x174])))
        (nil)))

(insn 304 106 98 19 arch/arm/kernel/perf_event_v7.c:1204 (set (reg/f:SI 1 r1 [176])
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)
        (nil)))

(insn 98 304 102 19 arch/arm/kernel/perf_event_v7.c:1204 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [176])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1163cae0>)
        (nil)))

(insn 102 98 107 19 arch/arm/kernel/perf_event_v7.c:1205 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [179])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 204 [0xcc])))
        (nil)))

(insn 107 102 110 19 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:135 val ] [135])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 110 107 111 19 arch/arm/kernel/perf_event_v7.c:1207 (set (reg:SI 2 r2 [185])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:135 val ] [135])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(insn 111 110 112 19 arch/arm/kernel/perf_event_v7.c:1207 (set (reg:SI 2 r2 [186])
        (plus:SI (reg:SI 2 r2 [185])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 112 111 115 19 arch/arm/kernel/perf_event_v7.c:1207 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [173])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [186])) 167 {*arm_movsi_insn} (nil))

(insn 115 112 303 19 arch/arm/kernel/perf_event.c:663 (set (reg/f:SI 3 r3 [189])
        (plus:SI (reg/f:SI 3 r3 [173])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn 303 115 116 19 arch/arm/kernel/perf_event.c:663 (set (reg/f:SI 2 r2 [187])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 116 303 270 19 arch/arm/kernel/perf_event.c:663 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [187]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [189])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(jump_insn 270 116 271 19 arch/arm/kernel/perf_event.c:664 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 271 270 119)

;; Start of basic block ( 12) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [100.0%] 
(code_label 119 271 120 20 99 "" [1 uses])

(note 120 119 137 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 137 120 121 20 NOTE_INSN_DELETED)

(insn 121 137 129 20 arch/arm/kernel/perf_event_v7.c:1213 (set (reg/f:SI 3 r3 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 129 121 302 20 arch/arm/kernel/perf_event_v7.c:1215 (set (reg/f:SI 2 r2 [196])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))
        (nil)))

(insn 302 129 123 20 arch/arm/kernel/perf_event_v7.c:1213 (set (reg:SI 1 r1 [191])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn 123 302 133 20 arch/arm/kernel/perf_event_v7.c:1213 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [191])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 6 [0x6])
        (nil)))

(insn 133 123 134 20 arch/arm/kernel/perf_event_v7.c:1216 (set (reg/f:SI 1 r1 [199])
        (plus:SI (reg/f:SI 2 r2 [196])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 576 [0x240])))
        (nil)))

(insn 134 133 301 20 arch/arm/kernel/perf_event_v7.c:1216 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [199])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 576 [0x240])))
        (nil)))

(insn 301 134 126 20 arch/arm/kernel/perf_event_v7.c:1214 (set (reg/f:SI 1 r1 [193])
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)
        (nil)))

(insn 126 301 130 20 arch/arm/kernel/perf_event_v7.c:1214 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [193])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x1163c870>)
        (nil)))

(insn 130 126 135 20 arch/arm/kernel/perf_event_v7.c:1215 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 408 [0x198])))
        (nil)))

(insn 135 130 138 20 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:134 val ] [134])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 138 135 139 20 arch/arm/kernel/perf_event_v7.c:1217 (set (reg:SI 2 r2 [202])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:134 val ] [134])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(insn 139 138 140 20 arch/arm/kernel/perf_event_v7.c:1217 (set (reg:SI 2 r2 [203])
        (plus:SI (reg:SI 2 r2 [202])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 140 139 143 20 arch/arm/kernel/perf_event_v7.c:1217 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [190])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [203])) 167 {*arm_movsi_insn} (nil))

(insn 143 140 300 20 arch/arm/kernel/perf_event.c:666 (set (reg/f:SI 3 r3 [206])
        (plus:SI (reg/f:SI 3 r3 [190])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn 300 143 144 20 arch/arm/kernel/perf_event.c:666 (set (reg/f:SI 2 r2 [204])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 144 300 272 20 arch/arm/kernel/perf_event.c:666 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [204]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [206])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(jump_insn 272 144 273 20 arch/arm/kernel/perf_event.c:667 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 273 272 147)

;; Start of basic block ( 15) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  15 [100.0%] 
(code_label 147 273 148 21 102 "" [1 uses])

(note 148 147 165 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 165 148 149 21 NOTE_INSN_DELETED)

(insn 149 165 157 21 arch/arm/kernel/perf_event_v7.c:1223 (set (reg/f:SI 3 r3 [207])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 157 149 299 21 arch/arm/kernel/perf_event_v7.c:1225 (set (reg/f:SI 2 r2 [213])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))
        (nil)))

(insn 299 157 151 21 arch/arm/kernel/perf_event_v7.c:1223 (set (reg:SI 1 r1 [208])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn 151 299 161 21 arch/arm/kernel/perf_event_v7.c:1223 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 80 [0x50])) [0 armv7pmu.id+0 S4 A64])
        (reg:SI 1 r1 [208])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(insn 161 151 162 21 arch/arm/kernel/perf_event_v7.c:1226 (set (reg/f:SI 1 r1 [216])
        (plus:SI (reg/f:SI 2 r2 [213])
            (const_int 168 [0xa8]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 780 [0x30c])))
        (nil)))

(insn 162 161 298 21 arch/arm/kernel/perf_event_v7.c:1226 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 128 [0x80])) [0 armv7pmu.event_map+0 S4 A64])
        (reg/f:SI 1 r1 [216])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 780 [0x30c])))
        (nil)))

(insn 298 162 154 21 arch/arm/kernel/perf_event_v7.c:1224 (set (reg/f:SI 1 r1 [210])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)
        (nil)))

(insn 154 298 158 21 arch/arm/kernel/perf_event_v7.c:1224 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 84 [0x54])) [0 armv7pmu.name+0 S4 A32])
        (reg/f:SI 1 r1 [210])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1163e4b0>)
        (nil)))

(insn 158 154 163 21 arch/arm/kernel/perf_event_v7.c:1225 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 124 [0x7c])) [0 armv7pmu.cache_map+0 S4 A32])
        (reg/f:SI 2 r2 [213])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
                (const_int 612 [0x264])))
        (nil)))

(insn 163 158 166 21 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 2 r2 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 166 163 167 21 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [219])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:133 val ] [133])
            (const_int 5 [0x5])
            (const_int 11 [0xb]))) 124 {extzv_t2} (nil))

(insn 167 166 168 21 arch/arm/kernel/perf_event_v7.c:1227 (set (reg:SI 2 r2 [220])
        (plus:SI (reg:SI 2 r2 [219])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (nil)))

(insn 168 167 171 21 arch/arm/kernel/perf_event_v7.c:1227 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [207])
                (const_int 136 [0x88])) [0 armv7pmu.num_events+0 S4 A64])
        (reg:SI 2 r2 [220])) 167 {*arm_movsi_insn} (nil))

(insn 171 168 297 21 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 3 r3 [223])
        (plus:SI (reg/f:SI 3 r3 [207])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(insn 297 171 172 21 arch/arm/kernel/perf_event.c:669 (set (reg/f:SI 2 r2 [221])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 172 297 274 21 arch/arm/kernel/perf_event.c:669 (set (mem/f/c/i:SI (reg/f:SI 2 r2 [221]) [0 armpmu+0 S4 A32])
        (reg/f:SI 3 r3 [223])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 80 [0x50])))
        (nil)))

(jump_insn 274 172 275 21 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 275 274 175)

;; Start of basic block ( 2) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 175 275 176 22 95 "" [1 uses])

(note 176 175 177 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 177 176 178 22 arch/arm/kernel/perf_event.c:673 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:137 implementor ] [137])
            (const_int 105 [0x69]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 178 177 179 22 arch/arm/kernel/perf_event.c:673 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 22 -> ( 23 28)
;; lr  out 	 2 [r2] 13 [sp]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  23 [28.0%]  (fallthru)
;; Succ edge  28 [72.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  22 [28.0%]  (fallthru)
(note 179 178 180 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 180 179 181 23 NOTE_INSN_DELETED)

(insn 181 180 182 23 arch/arm/kernel/perf_event.c:675 (set (reg:SI 2 r2 [225])
        (zero_extract:SI (reg/v:SI 2 r2 [orig:138 cpuid ] [138])
            (const_int 3 [0x3])
            (const_int 13 [0xd]))) 124 {extzv_t2} (nil))

(insn 182 181 183 23 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 183 182 251 23 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 188)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 23 -> ( 26 24)
;; lr  out 	 2 [r2] 13 [sp]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  26 [29.0%] 
;; Succ edge  24 [71.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  23 [71.0%]  (fallthru)
(note 251 183 184 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 184 251 185 24 arch/arm/kernel/perf_event.c:675 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [225])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 185 184 276 24 arch/arm/kernel/perf_event.c:675 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 24 -> ( 25 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  25 [29.0%]  (fallthru)
;; Succ edge  28 [71.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [29.0%]  (fallthru)
(note 276 185 277 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 277 276 278 25 (set (pc)
        (label_ref 195)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 27)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 278 277 188)

;; Start of basic block ( 23) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  23 [29.0%] 
(code_label 188 278 189 26 105 "" [1 uses])

(note 189 188 191 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 191 189 296 26 arch/arm/kernel/perf_event.c:677 (set (reg:SI 2 r2 [227])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 296 191 192 26 arch/arm/kernel/perf_event.c:677 (set (reg/f:SI 3 r3 [226])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 192 296 279 26 arch/arm/kernel/perf_event.c:677 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [226]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [227])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 279 192 280 26 arch/arm/kernel/perf_event.c:678 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 280 279 195)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  25 [100.0%] 
(code_label 195 280 196 27 106 "" [1 uses])

(note 196 195 198 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 198 196 295 27 arch/arm/kernel/perf_event.c:680 (set (reg:SI 2 r2 [229])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 295 198 199 27 arch/arm/kernel/perf_event.c:680 (set (reg/f:SI 3 r3 [228])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 199 295 200 27 arch/arm/kernel/perf_event.c:680 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [228]) [0 armpmu+0 S4 A32])
        (reg:SI 2 r2 [229])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 11 22 24 21 27 14 20 19 18 17 16 7 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [71.0%] 
;; Pred edge  22 [72.0%] 
;; Pred edge  24 [71.0%] 
;; Pred edge  21 [100.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  14 [71.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  19 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  16 [100.0%] 
;; Pred edge  7 [71.0%] 
;; Pred edge  26 [100.0%] 
(code_label 200 199 201 28 96 "" [12 uses])

(note 201 200 202 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 202 201 203 28 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [230])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 203 202 204 28 arch/arm/kernel/perf_event.c:685 (set (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [230]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 204 203 205 28 arch/arm/kernel/perf_event.c:685 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 205 204 206 28 arch/arm/kernel/perf_event.c:685 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 214)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2000 [0x7d0])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  29 [80.0%]  (fallthru)
;; Succ edge  30 [20.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  28 [80.0%]  (fallthru)
(note 206 205 210 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 210 206 209 29 arch/arm/kernel/perf_event.c:686 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 209 210 208 29 arch/arm/kernel/perf_event.c:686 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 armpmu.403 ] [139])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 208 209 211 29 arch/arm/kernel/perf_event.c:686 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11223cc0>)
        (nil)))

(call_insn 211 208 281 29 arch/arm/kernel/perf_event.c:686 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 281 211 282 29 (set (pc)
        (label_ref 219)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 31)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  31 [100.0%] 

(barrier 282 281 214)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  28 [20.0%] 
(code_label 214 282 215 30 107 "" [1 uses])

(note 215 214 217 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 217 215 218 30 arch/arm/kernel/perf_event.c:689 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x115c5be0>)
        (nil)))

(call_insn 218 217 219 30 arch/arm/kernel/perf_event.c:689 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 30 -> ( 31)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru)

;; Start of basic block ( 30 29) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  30 [100.0%]  (fallthru)
;; Pred edge  29 [100.0%] 
(code_label 219 218 220 31 108 "" [1 uses])

(note 220 219 223 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 223 220 225 31 arch/arm/kernel/perf_event.c:692 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 225 223 224 31 arch/arm/kernel/perf_event.c:692 (set (reg:SI 2 r2)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 224 225 226 31 arch/arm/kernel/perf_event.c:692 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x116407a0>)
        (nil)))

(call_insn 226 224 231 31 arch/arm/kernel/perf_event.c:692 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_pmu_register") [flags 0x41] <function_decl 0x113ba880 perf_pmu_register>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 231 226 237 31 arch/arm/kernel/perf_event.c:695 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 237 231 294 31 arch/arm/kernel/perf_event.c:695 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 31 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 294 237 312 NOTE_INSN_DELETED)

(note 312 294 0 NOTE_INSN_DELETED)


;; Function armpmu_event_set_period (armpmu_event_set_period)[0:1311]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 129.
verify found no changes in insn with uid = 129.
deleting insn with uid = 56.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 28 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 30 (  1.9)

Pass 0 for finding allocno costs

    a9 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a8(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a16(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000


Pass 1 for finding allocno costs

    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a8(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a16(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000

   Insn 93(l0): point = 0
   Insn 87(l0): point = 2
   Insn 82(l0): point = 4
   Insn 81(l0): point = 6
   Insn 80(l0): point = 8
   Insn 78(l0): point = 10
   Insn 79(l0): point = 12
   Insn 75(l0): point = 14
   Insn 73(l0): point = 17
   Insn 74(l0): point = 19
   Insn 127(l0): point = 23
   Insn 126(l0): point = 25
   Insn 125(l0): point = 27
   Insn 124(l0): point = 29
   Insn 119(l0): point = 31
   Insn 118(l0): point = 33
   Insn 65(l0): point = 36
   Insn 64(l0): point = 38
   Insn 63(l0): point = 41
   Insn 61(l0): point = 44
   Insn 60(l0): point = 46
   Insn 115(l0): point = 48
   Insn 116(l0): point = 50
   Insn 57(l0): point = 52
   Insn 129(l0): point = 54
   Insn 59(l0): point = 56
   Insn 52(l0): point = 59
   Insn 53(l0): point = 61
   Insn 51(l0): point = 63
   Insn 50(l0): point = 66
   Insn 43(l0): point = 73
   Insn 42(l0): point = 75
   Insn 41(l0): point = 78
   Insn 39(l0): point = 81
   Insn 38(l0): point = 83
   Insn 33(l0): point = 86
   Insn 34(l0): point = 88
   Insn 35(l0): point = 90
   Insn 32(l0): point = 92
   Insn 121(l0): point = 96
   Insn 27(l0): point = 98
   Insn 20(l0): point = 101
   Insn 19(l0): point = 103
   Insn 18(l0): point = 106
   Insn 16(l0): point = 109
   Insn 15(l0): point = 111
   Insn 14(l0): point = 113
   Insn 12(l0): point = 116
   Insn 10(l0): point = 118
   Insn 8(l0): point = 121
   Insn 4(l0): point = 123
   Insn 2(l0): point = 125
   Insn 3(l0): point = 127
 a0(r139): [96..98] [73..90] [3..61]
 a1(r146): [7..125]
 a2(r142): [9..52]
 a3(r148): [11..123]
 a4(r133): [36..56] [13..23]
 a5(r134): [14..15]
 a6(r152): [15..17]
 a7(r153): [15..20]
 a8(r147): [14..127]
 a9(r162): [24..29]
 a10(r161): [26..31]
 a11(r160): [28..33]
 a12(r158): [32..50]
 a13(r157): [34..48]
 a14(r150): [53..54]
 a15(r141): [96..119] [57..88]
 a16(r143): [60..116]
 a17(r135): [63..64]
 a18(r144): [64..121]
 a19(r136): [92..93]
 a20(r149): [104..114]
Compressing live ranges: from 130 to 45 - 34%
Ranges after the compression:
 a0(r139): [35..36] [30..32] [0..27]
 a1(r146): [1..43]
 a2(r142): [2..21]
 a3(r148): [3..42]
 a4(r133): [18..24] [4..9]
 a5(r134): [5..6]
 a6(r152): [6..7]
 a7(r153): [6..8]
 a8(r147): [5..44]
 a9(r162): [10..13]
 a10(r161): [11..14]
 a11(r160): [12..16]
 a12(r158): [15..20]
 a13(r157): [17..19]
 a14(r150): [22..23]
 a15(r141): [35..40] [25..31]
 a16(r143): [26..39]
 a17(r135): [28..29]
 a18(r144): [29..41]
 a19(r136): [33..34]
 a20(r149): [37..38]
+++Allocating 168 bytes for conflict table (uncompressed size 168)
;; a0(r139,l0) conflicts: a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0) a9(r162,l0) a10(r161,l0) a11(r160,l0) a12(r158,l0) a13(r157,l0) a14(r150,l0) a15(r141,l0) a16(r143,l0) a18(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r146,l0) conflicts: a0(r139,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0) a9(r162,l0) a10(r161,l0) a11(r160,l0) a12(r158,l0) a13(r157,l0) a14(r150,l0) a15(r141,l0) a16(r143,l0) a17(r135,l0) a18(r144,l0) a19(r136,l0) a20(r149,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r142,l0) conflicts: a0(r139,l0) a1(r146,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0) a9(r162,l0) a10(r161,l0) a11(r160,l0) a12(r158,l0) a13(r157,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r148,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0) a9(r162,l0) a10(r161,l0) a11(r160,l0) a12(r158,l0) a13(r157,l0) a14(r150,l0) a15(r141,l0) a16(r143,l0) a17(r135,l0) a18(r144,l0) a19(r136,l0) a20(r149,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a4(r133,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0) a12(r158,l0) a13(r157,l0) a14(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r134,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a8(r147,l0) a6(r152,l0) a7(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r152,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a7(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r153,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a8(r147,l0) a6(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r147,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a5(r134,l0) a6(r152,l0) a7(r153,l0) a9(r162,l0) a10(r161,l0) a11(r160,l0) a12(r158,l0) a13(r157,l0) a14(r150,l0) a15(r141,l0) a16(r143,l0) a17(r135,l0) a18(r144,l0) a19(r136,l0) a20(r149,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a9(r162,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a8(r147,l0) a10(r161,l0) a11(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r161,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a8(r147,l0) a9(r162,l0) a11(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r160,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a8(r147,l0) a9(r162,l0) a10(r161,l0) a12(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r158,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a8(r147,l0) a11(r160,l0) a13(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r157,l0) conflicts: a0(r139,l0) a1(r146,l0) a2(r142,l0) a3(r148,l0) a4(r133,l0) a8(r147,l0) a12(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r150,l0) conflicts: a0(r139,l0) a1(r146,l0) a3(r148,l0) a4(r133,l0) a8(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r141,l0) conflicts: a0(r139,l0) a1(r146,l0) a3(r148,l0) a8(r147,l0) a16(r143,l0) a17(r135,l0) a18(r144,l0) a20(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r143,l0) conflicts: a0(r139,l0) a1(r146,l0) a3(r148,l0) a8(r147,l0) a15(r141,l0) a17(r135,l0) a18(r144,l0) a19(r136,l0) a20(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r135,l0) conflicts: a1(r146,l0) a3(r148,l0) a8(r147,l0) a15(r141,l0) a16(r143,l0) a18(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r144,l0) conflicts: a0(r139,l0) a1(r146,l0) a3(r148,l0) a8(r147,l0) a15(r141,l0) a16(r143,l0) a17(r135,l0) a19(r136,l0) a20(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r136,l0) conflicts: a1(r146,l0) a3(r148,l0) a8(r147,l0) a16(r143,l0) a18(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r149,l0) conflicts: a1(r146,l0) a3(r148,l0) a8(r147,l0) a15(r141,l0) a16(r143,l0) a18(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a11(r160)<->a13(r157)@1000:move
  cp1:a10(r161)<->a12(r158)@1000:move
  cp2:a4(r133)<->a9(r162)@1000:move
  cp3:a4(r133)<->a15(r141)@1000:move
  regions=1, blocks=16, points=45
    allocnos=21, copies=4, conflicts=0, ranges=25

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r139 1r146 2r142 3r148 4r133 5r134 6r152 7r153 8r147 9r162 10r161 11r160 12r158 13r157 14r150 15r141 16r143 17r135 18r144 19r136 20r149
    modified regnos: 133 134 135 136 139 141 142 143 144 146 147 148 149 150 152 153 157 158 160 161 162
    border:
    Pressure: GENERAL_REGS=11
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
      Pushing a19(r136,l0)
      Pushing a17(r135,l0)
      Pushing a5(r134,l0)
      Pushing a14(r150,l0)
      Pushing a11(r160,l0)
      Pushing a10(r161,l0)
      Pushing a20(r149,l0)
      Pushing a13(r157,l0)
      Pushing a12(r158,l0)
      Pushing a7(r153,l0)
      Pushing a6(r152,l0)
      Pushing a9(r162,l0)
      Pushing a18(r144,l0)
      Pushing a4(r133,l0)
      Pushing a16(r143,l0)
      Pushing a15(r141,l0)
      Pushing a3(r148,l0)
      Pushing a8(r147,l0)
      Pushing a2(r142,l0)
      Pushing a0(r139,l0)
      Pushing a1(r146,l0)
      Popping a1(r146,l0)  -- assign reg 4
      Popping a0(r139,l0)  -- assign reg 5
      Popping a2(r142,l0)  -- assign reg 3
      Popping a8(r147,l0)  -- assign reg 1
      Popping a3(r148,l0)  -- assign reg 2
      Popping a15(r141,l0)  -- assign reg 6
      Popping a16(r143,l0)  -- assign reg 8
      Popping a4(r133,l0)  -- assign reg 6
      Popping a18(r144,l0)  -- assign reg 3
      Popping a9(r162,l0)  -- assign reg 6
      Popping a6(r152,l0)  -- assign reg 0
      Popping a7(r153,l0)  -- assign reg 8
      Popping a12(r158,l0)  -- assign reg 0
      Popping a13(r157,l0)  -- assign reg 12
      Popping a20(r149,l0)  -- assign reg 10
      Popping a10(r161,l0)  -- assign reg 0
      Popping a11(r160,l0)  -- assign reg 12
      Popping a14(r150,l0)  -- assign reg 3
      Popping a5(r134,l0)  -- assign reg 10
      Popping a17(r135,l0)  -- assign reg 10
      Popping a19(r136,l0)  -- assign reg 6
Disposition:
    4:r133 l0     6    5:r134 l0    10   17:r135 l0    10   19:r136 l0     6
    0:r139 l0     5   15:r141 l0     6    2:r142 l0     3   16:r143 l0     8
   18:r144 l0     3    1:r146 l0     4    8:r147 l0     1    3:r148 l0     2
   20:r149 l0    10   14:r150 l0     3    6:r152 l0     0    7:r153 l0     8
   13:r157 l0    12   12:r158 l0     0   11:r160 l0    12   10:r161 l0     0
    9:r162 l0     6
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, dead_or_set: 1, 147
insn=2, live_throughout: 2, 13, 147, dead_or_set: 0, 146
insn=4, live_throughout: 13, 146, 147, dead_or_set: 2, 148
insn=8, live_throughout: 13, 146, 147, 148, dead_or_set: 144
insn=10, live_throughout: 13, 144, 146, 147, 148, dead_or_set: 141
insn=12, live_throughout: 13, 141, 144, 146, 147, 148, dead_or_set: 143
insn=14, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 149
insn=15, live_throughout: 13, 141, 143, 144, 146, 147, 148, 149, dead_or_set: 
insn=16, live_throughout: 13, 24, 141, 143, 144, 146, 147, 148, 149, dead_or_set: 
insn=18, live_throughout: 13, 141, 143, 144, 146, 147, 148, 149, dead_or_set: 
insn=19, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 149
insn=20, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=113, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=27, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 139
insn=121, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=30, live_throughout: 13, 143, 144, 146, 147, 148, dead_or_set: 
insn=32, live_throughout: 13, 143, 144, 146, 147, 148, dead_or_set: 136
insn=35, live_throughout: 13, 143, 144, 146, 147, 148, dead_or_set: 139
insn=34, live_throughout: 13, 139, 143, 144, 146, 147, 148, dead_or_set: 141
insn=33, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=36, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=38, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=39, live_throughout: 13, 24, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=41, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=42, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=43, live_throughout: 13, 139, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=114, live_throughout: 13, 141, 143, 144, 146, 147, 148, dead_or_set: 
insn=50, live_throughout: 13, 143, 144, 146, 147, 148, dead_or_set: 141
insn=51, live_throughout: 13, 141, 143, 146, 147, 148, dead_or_set: 135, 144
insn=53, live_throughout: 13, 141, 143, 146, 147, 148, dead_or_set: 139
insn=52, live_throughout: 13, 139, 141, 146, 147, 148, dead_or_set: 143
insn=54, live_throughout: 13, 139, 141, 146, 147, 148, dead_or_set: 
insn=59, live_throughout: 13, 139, 146, 147, 148, dead_or_set: 133, 141
insn=129, live_throughout: 13, 133, 139, 146, 147, 148, dead_or_set: 150
insn=57, live_throughout: 13, 133, 139, 146, 147, 148, dead_or_set: 142, 150
insn=116, live_throughout: 13, 133, 139, 142, 146, 147, 148, dead_or_set: 158
insn=115, live_throughout: 13, 133, 139, 142, 146, 147, 148, 158, dead_or_set: 157
insn=60, live_throughout: 13, 133, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=61, live_throughout: 13, 24, 133, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=63, live_throughout: 13, 133, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=64, live_throughout: 13, 133, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=65, live_throughout: 13, 133, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=70, live_throughout: 13, 139, 142, 146, 147, 148, 157, 158, dead_or_set: 
insn=118, live_throughout: 13, 139, 142, 146, 147, 148, 158, dead_or_set: 157, 160
insn=119, live_throughout: 13, 139, 142, 146, 147, 148, 160, dead_or_set: 158, 161
insn=124, live_throughout: 13, 139, 142, 146, 147, 148, 160, 161, dead_or_set: 162
insn=125, live_throughout: 13, 139, 142, 146, 147, 148, 161, dead_or_set: 160, 162
insn=126, live_throughout: 13, 139, 142, 146, 147, 148, 162, dead_or_set: 161, 162
insn=127, live_throughout: 13, 139, 142, 146, 147, 148, dead_or_set: 133, 162
insn=72, live_throughout: 13, 133, 139, 142, 146, 147, 148, dead_or_set: 
insn=74, live_throughout: 13, 133, 139, 142, 146, 147, 148, dead_or_set: 153
insn=73, live_throughout: 13, 133, 139, 142, 146, 147, 148, 153, dead_or_set: 152
insn=75, live_throughout: 13, 133, 139, 142, 146, 148, dead_or_set: 134, 147, 152, 153
insn=79, live_throughout: 13, 139, 142, 146, 148, dead_or_set: 1, 133
insn=78, live_throughout: 1, 13, 139, 142, 146, dead_or_set: 0, 148
insn=80, live_throughout: 13, 139, 146, dead_or_set: 0, 1, 14, 142
insn=81, live_throughout: 13, 139, dead_or_set: 0, 146
insn=82, live_throughout: 13, 139, dead_or_set: 0, 14
insn=87, live_throughout: 13, 14, dead_or_set: 0, 139
insn=93, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 150: (insn_list:REG_DEP_TRUE 129 (nil))
changing reg in insn 127
changing reg in insn 59
changing reg in insn 74
changing reg in insn 75
changing reg in insn 51
changing reg in insn 32
changing reg in insn 53
changing reg in insn 35
changing reg in insn 27
changing reg in insn 87
changing reg in insn 10
changing reg in insn 50
changing reg in insn 34
changing reg in insn 51
changing reg in insn 50
changing reg in insn 59
changing reg in insn 57
changing reg in insn 80
changing reg in insn 116
changing reg in insn 115
changing reg in insn 12
changing reg in insn 50
changing reg in insn 32
changing reg in insn 34
changing reg in insn 14
changing reg in insn 52
changing reg in insn 33
changing reg in insn 8
changing reg in insn 10
changing reg in insn 51
changing reg in insn 32
changing reg in insn 2
changing reg in insn 81
changing reg in insn 3
changing reg in insn 10
changing reg in insn 51
changing reg in insn 32
changing reg in insn 75
changing reg in insn 73
changing reg in insn 52
changing reg in insn 33
changing reg in insn 12
changing reg in insn 8
changing reg in insn 4
changing reg in insn 78
changing reg in insn 14
changing reg in insn 129
changing reg in insn 57
changing reg in insn 73
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 115
changing reg in insn 118
changing reg in insn 64
changing reg in insn 116
changing reg in insn 119
changing reg in insn 60
changing reg in insn 118
changing reg in insn 125
changing reg in insn 119
changing reg in insn 126
changing reg in insn 124
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
Spilling for insn 33.
Spilling for insn 52.

Reloads for insn # 33
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                                                        (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                                                        (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                                                        (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                                                        (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 59.
deleting insn with uid = 118.
deleting insn with uid = 119.
deleting insn with uid = 124.
deleting insn with uid = 127.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 80.
deleting insn with uid = 80.
verify found no changes in insn with uid = 82.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 29 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 24 count 30 (  1.9)


armpmu_event_set_period

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={4d,10u} r2={3d,1u} r3={6d,7u} r4={1d,1u} r5={3d,1u} r6={5d,7u} r7={5d,6u} r8={2d,7u} r9={2d,7u} r10={3d,1u} r11={3d,1u} r12={4d,2u} r13={1d,17u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={14d,9u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 373{287d,86u,0e} in 46{44 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 8 2 arch/arm/kernel/perf_event.c:174 (set (reg/v/f:SI 4 r4 [orig:146 event ] [146])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 8 2 10 2 arch/arm/kernel/perf_event.c:175 (set (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn 10 8 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:248 (set (reg/v:DI 6 r6 [orig:141 left ] [141])
        (asm_operands/v:DI ("@ atomic64_read
	ldrexd	%0, %H0, [%1]") ("=&r") 0 [
                (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
            ]
             [
                (asm_input:SI ("r") 0)
                (asm_input:DI ("Qo") 0)
            ] 2628081)) -1 (nil))

(insn 12 10 14 2 arch/arm/kernel/perf_event.c:176 (set (reg:DI 8 r8 [orig:143 D.25193 ] [143])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 88 [0x58])) [0 <variable>.sample_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 14 12 15 2 arch/arm/kernel/perf_event.c:179 (parallel [
            (set (reg:DI 10 sl [149])
                (neg:DI (reg:DI 8 r8 [orig:143 D.25193 ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (nil))

(insn 15 14 16 2 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (reg:SI 11 fp [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 95 2 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 95 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn 18 95 96 3 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 96 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 96 20 4 arch/arm/kernel/perf_event.c:179 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (reg:SI 10 sl [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 20 19 113 4 arch/arm/kernel/perf_event.c:179 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 113 20 26 5 128 "" [1 uses])

(note 26 113 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 121 5 arch/arm/kernel/perf_event.c:177 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 121 27 122 5 (set (pc)
        (label_ref 36)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 122 121 30)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [50.0%] 
(code_label 30 122 31 6 120 "" [2 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 35 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:136 tmp ] [136])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg:DI 8 r8 [orig:143 D.25193 ] [143])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 35 32 34 6 arch/arm/kernel/perf_event.c:183 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 34 35 33 6 arch/arm/kernel/perf_event.c:180 (set (reg/v:DI 6 r6 [orig:141 left ] [141])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))

(insn 33 34 36 6 arch/arm/kernel/perf_event.c:182 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 36 33 37 7 122 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 7 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 39 38 100 7 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
        (nil)))
;; End of basic block 7 -> ( 11 8)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]


;; Succ edge  11 [79.0%] 
;; Succ edge  8 [21.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [21.0%]  (fallthru)
(note 100 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(jump_insn 41 100 101 8 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 101 41 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 42 101 43 9 arch/arm/kernel/perf_event.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:141 left ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 43 42 114 9 arch/arm/kernel/perf_event.c:186 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  9 [50.0%]  (fallthru)
;; Pred edge  8 [50.0%] 
(code_label 114 43 49 10 129 "" [1 uses])

(note 49 114 50 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 10 arch/arm/kernel/perf_event.c:187 (parallel [
            (set (reg/v:DI 6 r6 [orig:141 left ] [141])
                (plus:DI (reg/v:DI 6 r6 [orig:141 left ] [141])
                    (reg:DI 8 r8 [orig:143 D.25193 ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 51 50 53 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:135 tmp ] [135])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 104 [0x68])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 3 r3 [orig:144 D.25191 ] [144])
                        (reg/v:DI 6 r6 [orig:141 left ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 53 51 52 10 arch/arm/kernel/perf_event.c:190 (set (reg/v:SI 5 r5 [orig:139 ret ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 52 53 54 10 arch/arm/kernel/perf_event.c:189 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                (const_int 96 [0x60])) [0 <variable>.last_period+0 S8 A64])
        (reg:DI 8 r8 [orig:143 D.25193 ] [143])) 163 {*arm_movdi} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [79.0%] 
;; Pred edge  9 [50.0%] 
(code_label 54 52 55 11 123 "" [2 uses])

(note 55 54 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 129 55 57 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 57 129 116 11 arch/arm/kernel/perf_event.c:193 (set (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [150]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 116 57 115 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 0 r0 [orig:158+4 ] [158])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 68 [0x44])) [0 <variable>.max_period+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 115 116 60 11 arch/arm/kernel/perf_event.c:193 (set (reg:SI 12 ip [orig:157 <variable>.max_period ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 60 115 61 11 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ left.797+4 ])
            (reg:SI 0 r0 [orig:158+4 ] [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 61 60 105 11 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]


;; Succ edge  14 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 105 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 63 105 106 12 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 12 -> ( 15 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  15 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [29.0%]  (fallthru)
(note 106 63 64 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 64 106 65 13 arch/arm/kernel/perf_event.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:133 left.797 ] [133])
            (reg:SI 12 ip [orig:157 <variable>.max_period ] [157]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 70 13 arch/arm/kernel/perf_event.c:193 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 11 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 70 65 109 14 126 "" [1 uses])

(note 109 70 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 125 109 126 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 6 r6 [orig:162 left.797 ] [162])
        (reg:SI 12 ip [orig:160 left.797 ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 72 14 arch/arm/kernel/perf_event.c:193 (set (reg:SI 7 r7 [ left.797+4 ])
        (reg:SI 0 r0 [orig:161 left.797+4 ] [161])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 12 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  12 [71.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 72 126 110 15 125 "" [2 uses])

(note 110 72 76 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 76 110 77 15 NOTE_INSN_DELETED)

(note 77 76 74 15 NOTE_INSN_DELETED)

(insn 74 77 73 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg:DI 8 r8 [153])
                (neg:DI (reg/v:DI 6 r6 [orig:133 left.797 ] [133])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (nil))

(insn 73 74 75 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 0 r0 [152])
        (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn 75 73 79 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 10 sl [orig:134 tmp ] [134])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:147 hwc ] [147])
                        (const_int 80 [0x50])) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 0 r0 [152])
                        (reg:DI 8 r8 [153])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 79 75 78 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 1 r1)
        (neg:SI (reg:SI 6 r6 [orig:133 left.797 ] [133]))) 127 {*arm_negsi2} (nil))

(insn 78 79 80 15 arch/arm/kernel/perf_event.c:198 (set (reg:SI 0 r0)
        (reg/v:SI 2 r2 [orig:148 idx ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 80 78 81 15 arch/arm/kernel/perf_event.c:198 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 armpmu.324 ] [142])
                            (const_int 28 [0x1c])) [0 <variable>.write_counter+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 81 80 82 15 arch/arm/kernel/perf_event.c:200 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:146 event ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 82 81 87 15 arch/arm/kernel/perf_event.c:200 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 87 82 93 15 arch/arm/kernel/perf_event.c:203 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:139 ret ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 93 87 128 15 arch/arm/kernel/perf_event.c:203 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 128 93 130 NOTE_INSN_DELETED)

(note 130 128 0 NOTE_INSN_DELETED)


;; Function armpmu_start (armpmu_start)[0:1315]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 65.
verify found no changes in insn with uid = 65.
deleting insn with uid = 48.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)

Pass 0 for finding allocno costs

    a0 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 53(l0): point = 1
   Insn 49(l0): point = 3
   Insn 65(l0): point = 5
   Insn 52(l0): point = 7
   Insn 51(l0): point = 9
   Insn 47(l0): point = 11
   Insn 46(l0): point = 13
   Insn 44(l0): point = 15
   Insn 45(l0): point = 17
   Insn 43(l0): point = 19
   Insn 42(l0): point = 21
   Insn 41(l0): point = 23
   Insn 38(l0): point = 26
   Insn 36(l0): point = 28
   Insn 34(l0): point = 30
   Insn 33(l0): point = 32
   Insn 32(l0): point = 34
   Insn 28(l0): point = 37
   Insn 27(l0): point = 39
   Insn 22(l0): point = 41
   Insn 19(l0): point = 44
   Insn 18(l0): point = 46
   Insn 16(l0): point = 48
   Insn 14(l0): point = 51
   Insn 13(l0): point = 53
   Insn 10(l0): point = 56
   Insn 9(l0): point = 58
   Insn 8(l0): point = 60
   Insn 3(l0): point = 62
   Insn 2(l0): point = 64
   Insn 7(l0): point = 66
 a0(r154): [2..3]
 a1(r153): [4..5]
 a2(r134): [8..64]
 a3(r133): [10..23]
 a4(r152): [20..21]
 a5(r136): [27..66]
 a6(r150): [27..28]
 a7(r143): [40..41]
 a8(r140): [47..48]
 a9(r135): [54..62]
 a10(r137): [59..60]
Compressing live ranges: from 69 to 21 - 30%
Ranges after the compression:
 a0(r154): [0..1]
 a1(r153): [2..3]
 a2(r134): [4..19]
 a3(r133): [5..8]
 a4(r152): [6..7]
 a5(r136): [9..20]
 a6(r150): [9..10]
 a7(r143): [11..12]
 a8(r140): [13..14]
 a9(r135): [15..18]
 a10(r137): [16..17]
+++Allocating 72 bytes for conflict table (uncompressed size 88)
;; a0(r154,l0) conflicts:
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r153,l0) conflicts:
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r134,l0) conflicts: a3(r133,l0) a4(r152,l0) a6(r150,l0) a5(r136,l0) a7(r143,l0) a8(r140,l0) a9(r135,l0) a10(r137,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r133,l0) conflicts: a2(r134,l0) a4(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r152,l0) conflicts: a2(r134,l0) a3(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r136,l0) conflicts: a2(r134,l0) a6(r150,l0) a7(r143,l0) a8(r140,l0) a9(r135,l0) a10(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r150,l0) conflicts: a2(r134,l0) a5(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r143,l0) conflicts: a2(r134,l0) a5(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r140,l0) conflicts: a2(r134,l0) a5(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r135,l0) conflicts: a2(r134,l0) a5(r136,l0) a10(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r137,l0) conflicts: a2(r134,l0) a5(r136,l0) a9(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=9, points=21
    allocnos=11, copies=0, conflicts=0, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r154 1r153 2r134 3r133 4r152 5r136 6r150 7r143 8r140 9r135 10r137
    modified regnos: 133 134 135 136 137 140 143 150 152 153 154
    border:
    Pressure: GENERAL_REGS=6
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a8(r140,l0)
      Pushing a7(r143,l0)
      Pushing a6(r150,l0)
      Pushing a4(r152,l0)
      Pushing a10(r137,l0)
      Pushing a9(r135,l0)
      Pushing a1(r153,l0)
      Pushing a0(r154,l0)
      Pushing a5(r136,l0)
      Pushing a3(r133,l0)
      Pushing a2(r134,l0)
      Popping a2(r134,l0)  -- assign reg 4
      Popping a3(r133,l0)  -- assign reg 5
      Popping a5(r136,l0)  -- assign reg 5
      Popping a0(r154,l0)  -- assign reg 3
      Popping a1(r153,l0)  -- assign reg 3
      Popping a9(r135,l0)  -- assign reg 1
      Popping a10(r137,l0)  -- assign reg 3
      Popping a4(r152,l0)  -- assign reg 3
      Popping a6(r150,l0)  -- assign reg 3
      Popping a7(r143,l0)  -- assign reg 3
      Popping a8(r140,l0)  -- assign reg 3
Disposition:
    3:r133 l0     5    2:r134 l0     4    9:r135 l0     1    5:r136 l0     5
   10:r137 l0     3    8:r140 l0     3    7:r143 l0     3    6:r150 l0     3
    4:r152 l0     3    1:r153 l0     3    0:r154 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, 14, dead_or_set: 136
insn=2, live_throughout: 1, 13, 14, 136, dead_or_set: 0, 134
insn=3, live_throughout: 13, 14, 134, 136, dead_or_set: 1, 135
insn=8, live_throughout: 13, 14, 134, 135, 136, dead_or_set: 137
insn=9, live_throughout: 13, 14, 134, 135, 136, dead_or_set: 137
insn=10, live_throughout: 13, 14, 134, 135, 136, dead_or_set: 
insn=13, live_throughout: 13, 134, 136, dead_or_set: 135
insn=14, live_throughout: 13, 134, 136, dead_or_set: 
insn=16, live_throughout: 13, 134, 136, dead_or_set: 140
insn=18, live_throughout: 13, 134, 136, dead_or_set: 140
insn=19, live_throughout: 13, 134, 136, dead_or_set: 
insn=22, live_throughout: 13, 134, 136, dead_or_set: 143
insn=27, live_throughout: 13, 134, 136, dead_or_set: 143
insn=28, live_throughout: 13, 134, 136, dead_or_set: 
insn=32, live_throughout: 13, 134, 136, dead_or_set: 0
insn=33, live_throughout: 0, 13, 134, 136, dead_or_set: 1
insn=34, live_throughout: 13, 134, 136, dead_or_set: 0, 1, 14
insn=36, live_throughout: 13, 134, 136, dead_or_set: 150
insn=38, live_throughout: 13, 134, dead_or_set: 136, 150
insn=39, live_throughout: 13, 134, dead_or_set: 
insn=41, live_throughout: 13, 134, dead_or_set: 133
insn=42, live_throughout: 13, 133, 134, dead_or_set: 152
insn=43, live_throughout: 13, 133, 134, dead_or_set: 152
insn=45, live_throughout: 13, 133, 134, dead_or_set: 1
insn=44, live_throughout: 1, 13, 133, 134, dead_or_set: 0
insn=46, live_throughout: 0, 1, 13, 133, 134, dead_or_set: 2
insn=47, live_throughout: 13, 133, 134, dead_or_set: 0, 1, 2, 14
insn=51, live_throughout: 13, 134, dead_or_set: 0, 133
insn=52, live_throughout: 0, 13, dead_or_set: 1, 134
insn=65, live_throughout: 0, 1, 13, dead_or_set: 153
insn=49, live_throughout: 0, 1, 13, dead_or_set: 153, 154
insn=53, live_throughout: 13, dead_or_set: 0, 1, 14, 154
insn=59, live_throughout: 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 16 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 65 (nil))
changing reg in insn 41
changing reg in insn 51
changing reg in insn 45
changing reg in insn 2
changing reg in insn 52
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 41
changing reg in insn 16
changing reg in insn 16
changing reg in insn 3
changing reg in insn 13
changing reg in insn 7
changing reg in insn 38
changing reg in insn 22
changing reg in insn 8
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 18
changing reg in insn 22
changing reg in insn 27
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 65
changing reg in insn 49
changing reg in insn 49
changing reg in insn 53
Spilling for insn 38.
Spilling for insn 43.

Reloads for insn # 38
Reload 0: reload_out (QI) = (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                                                        (const_int 8 [0x8])) [0 __warned+0 S1 A8])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                                                        (const_int 8 [0x8])) [0 __warned+0 S1 A8])

Reloads for insn # 43
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 47.
rescanning insn with uid = 53.
deleting insn with uid = 53.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)


armpmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,4u} r1={7d,4u} r2={5d,1u} r3={11d,7u} r4={1d,6u,1d} r5={2d,5u,1d} r12={4d} r13={1d,11u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 424{379d,43u,2e} in 30{27 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 2 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 5 r5 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 2 7 8 2 arch/arm/kernel/perf_event.c:268 (set (reg/v/f:SI 4 r4 [orig:134 event ] [134])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 8 2 9 2 arch/arm/kernel/perf_event.c:271 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [136]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 9 8 10 2 arch/arm/kernel/perf_event.c:271 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/perf_event.c:271 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  8 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 11 13 3 NOTE_INSN_DELETED)

(insn 13 12 14 3 arch/arm/kernel/perf_event.c:278 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:135 flags ] [135])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 14 13 15 3 arch/arm/kernel/perf_event.c:278 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 15 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 17 15 16 4 NOTE_INSN_DELETED)

(insn 16 17 18 4 arch/arm/kernel/perf_event.c:269 (set (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (nil)))

(insn 18 16 19 4 arch/arm/kernel/perf_event.c:269 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:140 <variable>.hw.state ] [140])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 19 18 20 4 arch/arm/kernel/perf_event.c:269 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 20 19 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 24 20 25 5 NOTE_INSN_DELETED)

(note 25 24 26 5 NOTE_INSN_DELETED)

(note 26 25 22 5 NOTE_INSN_DELETED)

(insn 22 26 27 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:SI 3 r3 [orig:143 __warned ] [143])
        (zero_extend:SI (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                    (const_int 8 [0x8])) [0 __warned+0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:QI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 __warned+0 S1 A8]))
        (nil)))

(insn 27 22 28 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:143 __warned ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 28 27 29 5 arch/arm/kernel/perf_event.c:279 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 29 28 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 29 33 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(insn 33 32 34 6 arch/arm/kernel/perf_event.c:279 discrim 3 (set (reg:SI 1 r1)
        (const_int 279 [0x117])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 279 [0x117])
        (nil)))

(call_insn 34 33 36 6 arch/arm/kernel/perf_event.c:279 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 34 38 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (reg:SI 3 r3 [150])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 38 36 39 6 arch/arm/kernel/perf_event.c:279 discrim 5 (set (mem/c/i:QI (plus:SI (reg/f:SI 5 r5 [136])
                (const_int 8 [0x8])) [0 __warned+0 S1 A8])
        (reg:QI 3 r3 [150])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 3 5 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 39 38 40 7 134 "" [3 uses])

(note 40 39 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 50 40 41 7 NOTE_INSN_DELETED)

(insn 41 50 42 7 arch/arm/kernel/perf_event.c:269 (set (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 42 41 43 7 arch/arm/kernel/perf_event.c:281 (set (reg:SI 3 r3 [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 43 42 45 7 arch/arm/kernel/perf_event.c:281 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 45 43 44 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 44 45 46 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 event ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 47 7 arch/arm/kernel/perf_event.c:289 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn 47 46 51 7 arch/arm/kernel/perf_event.c:289 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 51 47 52 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 hwc ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 65 7 arch/arm/kernel/perf_event.c:290 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 event ] [134])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 65 52 49 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 49 65 53 7 arch/arm/kernel/perf_event.c:290 (set (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [153]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(call_insn 53 49 59 7 arch/arm/kernel/perf_event.c:290 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 armpmu ] [154])
                            (const_int 12 [0xc])) [0 <variable>.enable+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  2 [10.1%] 
(code_label 59 53 62 8 135 "" [1 uses])

(note 62 59 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 64 62 66 NOTE_INSN_DELETED)

(note 66 64 0 NOTE_INSN_DELETED)


;; Function armpmu_del (armpmu_del)[0:1316]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 51.
verify found no changes in insn with uid = 51.
deleting insn with uid = 10.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a3 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 40(l0): point = 0
   Insn 39(l0): point = 2
   Insn 38(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 37(l0): point = 10
   Insn 36(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 30(l0): point = 18
   Insn 29(l0): point = 20
   Insn 27(l0): point = 22
   Insn 28(l0): point = 24
   Insn 23(l0): point = 27
   Insn 22(l0): point = 29
   Insn 21(l0): point = 31
   Insn 18(l0): point = 34
   Insn 15(l0): point = 36
   Insn 14(l0): point = 38
   Insn 51(l0): point = 40
   Insn 8(l0): point = 42
   Insn 7(l0): point = 44
   Insn 17(l0): point = 46
   Insn 13(l0): point = 48
   Insn 16(l0): point = 50
   Insn 50(l0): point = 52
   Insn 2(l0): point = 54
   Insn 49(l0): point = 56
 a0(r137): [3..54]
 a1(r136): [7..36]
 a2(r135): [7..50]
 a3(r147): [7..8]
 a4(r144): [37..38]
 a5(r134): [37..44]
 a6(r140): [39..40]
 a7(r143): [39..48]
 a8(r141): [49..56]
Compressing live ranges: from 59 to 14 - 23%
Ranges after the compression:
 a0(r137): [0..12]
 a1(r136): [1..3]
 a2(r135): [1..11]
 a3(r147): [1..2]
 a4(r144): [4..5]
 a5(r134): [4..8]
 a6(r140): [6..7]
 a7(r143): [6..9]
 a8(r141): [10..13]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r137,l0) conflicts: a3(r147,l0) a1(r136,l0) a2(r135,l0) a4(r144,l0) a5(r134,l0) a6(r140,l0) a7(r143,l0) a8(r141,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r136,l0) conflicts: a0(r137,l0) a3(r147,l0) a2(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r135,l0) conflicts: a0(r137,l0) a3(r147,l0) a1(r136,l0) a4(r144,l0) a5(r134,l0) a6(r140,l0) a7(r143,l0) a8(r141,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r147,l0) conflicts: a0(r137,l0) a1(r136,l0) a2(r135,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a4(r144,l0) conflicts: a0(r137,l0) a2(r135,l0) a5(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r134,l0) conflicts: a0(r137,l0) a2(r135,l0) a4(r144,l0) a6(r140,l0) a7(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r140,l0) conflicts: a0(r137,l0) a2(r135,l0) a5(r134,l0) a7(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r143,l0) conflicts: a0(r137,l0) a2(r135,l0) a5(r134,l0) a6(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r141,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a1(r136)<->a5(r134)@125:shuffle
  cp1:a1(r136)<->a4(r144)@125:shuffle
  regions=1, blocks=5, points=14
    allocnos=9, copies=2, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r137 1r136 2r135 3r147 4r144 5r134 6r140 7r143 8r141
    modified regnos: 134 135 136 137 140 141 143 144 147
    border:
    Pressure: GENERAL_REGS=6
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
      Pushing a7(r143,l0)
      Pushing a6(r140,l0)
      Pushing a4(r144,l0)
      Pushing a5(r134,l0)
      Pushing a8(r141,l0)
      Pushing a3(r147,l0)
      Pushing a1(r136,l0)
      Pushing a0(r137,l0)
      Pushing a2(r135,l0)
      Popping a2(r135,l0)  -- assign reg 4
      Popping a0(r137,l0)  -- assign reg 5
      Popping a1(r136,l0)  -- assign reg 6
      Popping a3(r147,l0)  -- assign reg 3
      Popping a8(r141,l0)  -- assign reg 3
      Popping a5(r134,l0)  -- assign reg 3
      Popping a4(r144,l0)  -- assign reg 6
      Popping a6(r140,l0)  -- assign reg 2
      Popping a7(r143,l0)  -- assign reg 1
Disposition:
    5:r134 l0     3    2:r135 l0     4    1:r136 l0     6    0:r137 l0     5
    6:r140 l0     2    8:r141 l0     3    7:r143 l0     1    4:r144 l0     6
    3:r147 l0     3
New iteration of spill/restore move
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=49, live_throughout: 0, 13, dead_or_set: 141
insn=2, live_throughout: 13, 141, dead_or_set: 0, 137
insn=50, live_throughout: 13, 137, dead_or_set: 141
insn=16, live_throughout: 13, 137, 141, dead_or_set: 135
insn=13, live_throughout: 13, 135, 137, dead_or_set: 141, 143
insn=17, live_throughout: 13, 135, 137, 143, dead_or_set: 
insn=7, live_throughout: 13, 24, 135, 137, 143, dead_or_set: 134
insn=8, live_throughout: 13, 24, 135, 137, 143, dead_or_set: 134
insn=51, live_throughout: 13, 24, 134, 135, 137, 143, dead_or_set: 140
insn=14, live_throughout: 13, 24, 134, 135, 137, dead_or_set: 140, 143, 144
insn=15, live_throughout: 13, 24, 135, 137, dead_or_set: 134, 136, 144
insn=18, live_throughout: 13, 135, 136, 137, dead_or_set: 
insn=21, live_throughout: 13, 135, 136, 137, dead_or_set: 0
insn=22, live_throughout: 0, 13, 135, 136, 137, dead_or_set: 1
insn=23, live_throughout: 13, 135, 136, 137, dead_or_set: 0, 1, 14
insn=24, live_throughout: 13, 135, 136, 137, dead_or_set: 
insn=28, live_throughout: 13, 135, 136, 137, dead_or_set: 1
insn=27, live_throughout: 1, 13, 135, 136, 137, dead_or_set: 0
insn=29, live_throughout: 13, 135, 136, 137, dead_or_set: 0, 1, 14
insn=30, live_throughout: 13, 135, 136, 137, dead_or_set: 0
insn=31, live_throughout: 0, 13, 135, 136, 137, dead_or_set: 1
insn=32, live_throughout: 13, 135, 136, 137, dead_or_set: 0, 1, 14
insn=36, live_throughout: 13, 135, 136, 137, dead_or_set: 0
insn=37, live_throughout: 0, 13, 135, 136, 137, dead_or_set: 1
insn=33, live_throughout: 0, 1, 13, 135, 136, 137, dead_or_set: 147
insn=34, live_throughout: 0, 1, 13, 137, dead_or_set: 135, 136, 147
insn=38, live_throughout: 13, 137, dead_or_set: 0, 1, 14
insn=39, live_throughout: 13, 14, dead_or_set: 0, 137
insn=40, live_throughout: 13, 14, dead_or_set: 0
init_insns for 140: (insn_list:REG_DEP_TRUE 51 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 33 (nil))
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 15
changing reg in insn 16
changing reg in insn 36
changing reg in insn 34
changing reg in insn 27
changing reg in insn 17
changing reg in insn 15
changing reg in insn 37
changing reg in insn 28
changing reg in insn 34
changing reg in insn 2
changing reg in insn 39
changing reg in insn 30
changing reg in insn 16
changing reg in insn 51
changing reg in insn 14
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 33
changing reg in insn 34
Spilling for insn 49.
Using reg 2 for reload 0
Spilling for insn 34.

Reloads for insn # 49
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:135 idx ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) [0 <variable>.events S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:135 idx ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) [0 <variable>.events S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 40.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


armpmu_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,6u} r1={11d,5u,1d} r2={8d,2u} r3={11d,5u} r4={1d,4u} r5={1d,3u} r6={2d,4u} r12={6d} r13={1d,10u} r14={5d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={6d,1u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 655{613d,41u,1e} in 29{24 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 53 2 NOTE_INSN_DELETED)

(insn 53 11 49 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 49 53 2 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 49 50 2 arch/arm/kernel/perf_event.c:295 (set (reg/v/f:SI 5 r5 [orig:137 event ] [137])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 50 2 16 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 50 13 2 arch/arm/kernel/perf_event.c:298 (set (reg/v:SI 4 r4 [orig:135 idx ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:137 event ] [137])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 13 16 17 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 17 13 7 2 arch/arm/kernel/perf_event.c:300 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:135 idx ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 7 17 8 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 8 7 51 2 arch/arm/kernel/perf_event.c:296 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8569250)) -1 (nil))

(insn 51 8 14 2 arch/arm/kernel/perf_event.c:296 (set (reg/f:SI 2 r2 [140])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn 14 51 15 2 arch/arm/kernel/perf_event.c:296 (set (reg:SI 6 r6 [144])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [140])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 15 14 18 2 arch/arm/kernel/perf_event.c:296 (set (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
        (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [144]))) 4 {*arm_addsi3} (nil))

(jump_insn 18 15 19 2 arch/arm/kernel/perf_event.c:300 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 22 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11664e40>)
        (nil)))

(insn 22 21 23 3 arch/arm/kernel/perf_event.c:300 discrim 1 (set (reg:SI 1 r1)
        (const_int 300 [0x12c])) 167 {*arm_movsi_insn} (nil))

(call_insn 23 22 24 3 arch/arm/kernel/perf_event.c:300 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a2ed80 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 24 23 25 4 139 "" [1 uses])

(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 26 25 35 4 NOTE_INSN_DELETED)

(note 35 26 28 4 NOTE_INSN_DELETED)

(insn 28 35 27 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn 27 28 29 4 arch/arm/kernel/perf_event.c:302 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 29 27 30 4 arch/arm/kernel/perf_event.c:302 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 29 31 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 31 30 32 4 arch/arm/kernel/perf_event.c:303 (set (reg:SI 1 r1)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(call_insn 32 31 36 4 arch/arm/kernel/perf_event.c:303 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_stop") [flags 0x3] <function_decl 0x114a1880 armpmu_stop>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 32 37 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 idx ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 37 36 33 4 arch/arm/kernel/perf_event.c:305 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (nil))

(insn 33 37 34 4 arch/arm/kernel/perf_event.c:304 (set (reg:SI 3 r3 [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 34 33 38 4 arch/arm/kernel/perf_event.c:304 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:135 idx ] [135])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:136 cpuc ] [136])) [0 <variable>.events S4 A32])
        (reg:SI 3 r3 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 38 34 39 4 arch/arm/kernel/perf_event.c:305 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 39 38 40 4 arch/arm/kernel/perf_event.c:307 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:137 event ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 40 39 41 4 arch/arm/kernel/perf_event.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 41 40 52)

(note 52 41 0 NOTE_INSN_DELETED)


;; Function armpmu_add (armpmu_add)[0:1317]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 83.
verify found no changes in insn with uid = 83.
deleting insn with uid = 10.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 9 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)

Pass 0 for finding allocno costs

    a2 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 74(l0): point = 0
   Insn 68(l0): point = 2
   Insn 63(l0): point = 4
   Insn 62(l0): point = 6
   Insn 58(l0): point = 9
   Insn 59(l0): point = 11
   Insn 57(l0): point = 13
   Insn 54(l0): point = 16
   Insn 53(l0): point = 18
   Insn 52(l0): point = 20
   Insn 50(l0): point = 23
   Insn 47(l0): point = 25
   Insn 46(l0): point = 27
   Insn 49(l0): point = 29
   Insn 45(l0): point = 31
   Insn 44(l0): point = 33
   Insn 43(l0): point = 35
   Insn 41(l0): point = 37
   Insn 40(l0): point = 39
   Insn 39(l0): point = 41
   Insn 36(l0): point = 43
   Insn 38(l0): point = 45
   Insn 34(l0): point = 47
   Insn 78(l0): point = 50
   Insn 29(l0): point = 52
   Insn 27(l0): point = 55
   Insn 26(l0): point = 57
   Insn 24(l0): point = 59
   Insn 23(l0): point = 61
   Insn 22(l0): point = 63
   Insn 20(l0): point = 65
   Insn 18(l0): point = 67
   Insn 15(l0): point = 69
   Insn 8(l0): point = 71
   Insn 14(l0): point = 73
   Insn 83(l0): point = 75
   Insn 7(l0): point = 77
   Insn 17(l0): point = 79
   Insn 3(l0): point = 81
   Insn 13(l0): point = 83
   Insn 16(l0): point = 85
   Insn 19(l0): point = 87
   Insn 2(l0): point = 89
   Insn 81(l0): point = 91
   Insn 80(l0): point = 93
 a0(r135): [50..52] [3..11]
 a1(r140): [7..89]
 a2(r155): [26..27]
 a3(r141): [55..81] [30..49]
 a4(r138): [55..69] [34..49]
 a5(r136): [53..57] [36..49]
 a6(r152): [40..43]
 a7(r148): [55..87] [44..49]
 a8(r137): [55..85] [46..49]
 a9(r149): [60..65]
 a10(r147): [70..73]
 a11(r134): [70..77]
 a12(r143): [74..75]
 a13(r146): [74..83]
 a14(r144): [84..93]
Compressing live ranges: from 96 to 33 - 34%
Ranges after the compression:
 a0(r135): [13..14] [0..2]
 a1(r140): [1..31]
 a2(r155): [3..4]
 a3(r141): [16..26] [5..12]
 a4(r138): [16..20] [6..12]
 a5(r136): [15..17] [7..12]
 a6(r152): [8..9]
 a7(r148): [16..30] [10..12]
 a8(r137): [16..29] [11..12]
 a9(r149): [18..19]
 a10(r147): [21..22]
 a11(r134): [21..25]
 a12(r143): [23..24]
 a13(r146): [23..27]
 a14(r144): [28..32]
+++Allocating 120 bytes for conflict table (uncompressed size 120)
;; a0(r135,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r140,l0) conflicts: a0(r135,l0) a2(r155,l0) a3(r141,l0) a4(r138,l0) a5(r136,l0) a6(r152,l0) a7(r148,l0) a8(r137,l0) a9(r149,l0) a10(r147,l0) a11(r134,l0) a12(r143,l0) a13(r146,l0) a14(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r155,l0) conflicts: a1(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r141,l0) conflicts: a1(r140,l0) a4(r138,l0) a5(r136,l0) a6(r152,l0) a7(r148,l0) a8(r137,l0) a9(r149,l0) a10(r147,l0) a11(r134,l0) a12(r143,l0) a13(r146,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r138,l0) conflicts: a1(r140,l0) a3(r141,l0) a5(r136,l0) a6(r152,l0) a7(r148,l0) a8(r137,l0) a9(r149,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r136,l0) conflicts: a1(r140,l0) a3(r141,l0) a4(r138,l0) a6(r152,l0) a7(r148,l0) a8(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r152,l0) conflicts: a1(r140,l0) a3(r141,l0) a4(r138,l0) a5(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r148,l0) conflicts: a1(r140,l0) a3(r141,l0) a4(r138,l0) a5(r136,l0) a8(r137,l0) a9(r149,l0) a10(r147,l0) a11(r134,l0) a12(r143,l0) a13(r146,l0) a14(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r137,l0) conflicts: a1(r140,l0) a3(r141,l0) a4(r138,l0) a5(r136,l0) a7(r148,l0) a9(r149,l0) a10(r147,l0) a11(r134,l0) a12(r143,l0) a13(r146,l0) a14(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r149,l0) conflicts: a1(r140,l0) a3(r141,l0) a4(r138,l0) a7(r148,l0) a8(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r147,l0) conflicts: a1(r140,l0) a3(r141,l0) a7(r148,l0) a8(r137,l0) a11(r134,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a11(r134,l0) conflicts: a1(r140,l0) a3(r141,l0) a7(r148,l0) a8(r137,l0) a10(r147,l0) a12(r143,l0) a13(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a12(r143,l0) conflicts: a1(r140,l0) a3(r141,l0) a7(r148,l0) a8(r137,l0) a11(r134,l0) a13(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a13(r146,l0) conflicts: a1(r140,l0) a3(r141,l0) a7(r148,l0) a8(r137,l0) a11(r134,l0) a12(r143,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a14(r144,l0) conflicts: a1(r140,l0) a7(r148,l0) a8(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  cp0:a0(r135)<->a5(r136)@1000:move
  cp1:a4(r138)<->a11(r134)@125:shuffle
  cp2:a4(r138)<->a10(r147)@125:shuffle
  regions=1, blocks=8, points=33
    allocnos=15, copies=3, conflicts=2, ranges=21

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r135 1r140 2r155 3r141 4r138 5r136 6r152 7r148 8r137 9r149 10r147 11r134 12r143 13r146 14r144
    modified regnos: 134 135 136 137 138 140 141 143 144 146 147 148 149 152 155
    border:
    Pressure: GENERAL_REGS=9
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
      Pushing a2(r155,l0)
      Pushing a12(r143,l0)
      Pushing a10(r147,l0)
      Pushing a11(r134,l0)
      Pushing a13(r146,l0)
      Pushing a0(r135,l0)
      Pushing a14(r144,l0)
      Pushing a9(r149,l0)
      Pushing a6(r152,l0)
      Pushing a3(r141,l0)
      Pushing a8(r137,l0)
      Pushing a7(r148,l0)
      Pushing a4(r138,l0)
      Pushing a5(r136,l0)
      Pushing a1(r140,l0)
      Popping a1(r140,l0)  -- assign reg 4
      Popping a5(r136,l0)  -- assign reg 5
      Popping a4(r138,l0)  -- assign reg 6
      Popping a7(r148,l0)  -- assign reg 7
      Popping a8(r137,l0)  -- assign reg 8
      Popping a3(r141,l0)  -- assign reg 10
      Popping a6(r152,l0)  -- assign reg 3
      Popping a9(r149,l0)  -- assign reg 3
      Popping a14(r144,l0)  -- assign reg 3
      Popping a0(r135,l0)  -- assign reg 5
      Popping a13(r146,l0)  -- assign reg 3
      Popping a11(r134,l0)  -- assign reg 2
      Popping a10(r147,l0)  -- assign reg 6
      Popping a12(r143,l0)  -- assign reg 1
      Popping a2(r155,l0)  -- assign reg 3
Disposition:
   11:r134 l0     2    0:r135 l0     5    5:r136 l0     5    8:r137 l0     8
    4:r138 l0     6    1:r140 l0     4    3:r141 l0    10   12:r143 l0     1
   14:r144 l0     3   13:r146 l0     3   10:r147 l0     6    7:r148 l0     7
    9:r149 l0     3    6:r152 l0     3    2:r155 l0     3
New iteration of spill/restore move
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=80, live_throughout: 0, 1, 13, dead_or_set: 144
insn=81, live_throughout: 0, 1, 13, dead_or_set: 144
insn=2, live_throughout: 1, 13, 144, dead_or_set: 0, 140
insn=19, live_throughout: 1, 13, 140, 144, dead_or_set: 148
insn=16, live_throughout: 1, 13, 140, 144, 148, dead_or_set: 137
insn=13, live_throughout: 1, 13, 137, 140, 148, dead_or_set: 144, 146
insn=3, live_throughout: 13, 137, 140, 146, 148, dead_or_set: 1, 141
insn=17, live_throughout: 13, 137, 140, 141, 146, 148, dead_or_set: 0
insn=7, live_throughout: 0, 13, 137, 140, 141, 146, 148, dead_or_set: 134
insn=83, live_throughout: 0, 13, 134, 137, 140, 141, 146, 148, dead_or_set: 143
insn=14, live_throughout: 0, 13, 134, 137, 140, 141, 148, dead_or_set: 143, 146, 147
insn=8, live_throughout: 0, 13, 137, 140, 141, 147, 148, dead_or_set: 134
insn=15, live_throughout: 0, 13, 137, 140, 141, 148, dead_or_set: 134, 138, 147
insn=18, live_throughout: 13, 137, 138, 140, 141, 148, dead_or_set: 0, 14
insn=20, live_throughout: 13, 137, 138, 140, 141, 148, dead_or_set: 149
insn=22, live_throughout: 13, 137, 138, 140, 141, 148, 149, dead_or_set: 0
insn=23, live_throughout: 0, 13, 137, 138, 140, 141, 148, 149, dead_or_set: 1
insn=24, live_throughout: 13, 137, 138, 140, 141, 148, dead_or_set: 0, 1, 14, 149
insn=26, live_throughout: 13, 137, 138, 140, 141, 148, dead_or_set: 0, 136
insn=27, live_throughout: 13, 136, 137, 138, 140, 141, 148, dead_or_set: 
insn=29, live_throughout: 13, 140, dead_or_set: 135, 136
insn=78, live_throughout: 13, 135, 140, dead_or_set: 
insn=32, live_throughout: 13, 136, 137, 138, 140, 141, 148, dead_or_set: 
insn=34, live_throughout: 13, 136, 137, 138, 140, 141, 148, dead_or_set: 
insn=38, live_throughout: 13, 136, 138, 140, 141, 148, dead_or_set: 0, 137
insn=36, live_throughout: 0, 13, 136, 138, 140, 141, dead_or_set: 148, 152
insn=39, live_throughout: 0, 13, 136, 138, 140, 141, 152, dead_or_set: 1
insn=40, live_throughout: 13, 136, 138, 140, 141, dead_or_set: 0, 1, 14, 152
insn=41, live_throughout: 13, 136, 138, 140, 141, dead_or_set: 
insn=43, live_throughout: 13, 138, 140, 141, dead_or_set: 0, 136
insn=44, live_throughout: 0, 13, 140, 141, dead_or_set: 1, 138
insn=45, live_throughout: 13, 140, 141, dead_or_set: 0, 1, 14
insn=49, live_throughout: 13, 140, dead_or_set: 141
insn=46, live_throughout: 13, 24, 140, dead_or_set: 155
insn=47, live_throughout: 13, 24, 140, dead_or_set: 155
insn=50, live_throughout: 13, 140, dead_or_set: 
insn=52, live_throughout: 13, 140, dead_or_set: 0
insn=53, live_throughout: 0, 13, 140, dead_or_set: 1
insn=54, live_throughout: 13, 140, dead_or_set: 0, 1, 14
insn=55, live_throughout: 13, 140, dead_or_set: 
insn=57, live_throughout: 13, 140, dead_or_set: 0
insn=59, live_throughout: 0, 13, 140, dead_or_set: 135
insn=58, live_throughout: 13, 135, 140, dead_or_set: 0, 14
insn=60, live_throughout: 13, 135, 140, dead_or_set: 
insn=62, live_throughout: 13, 135, dead_or_set: 0, 140
insn=63, live_throughout: 13, 135, dead_or_set: 0, 14
insn=68, live_throughout: 13, 14, dead_or_set: 0, 135
insn=74, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 83 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 46 (nil))
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 15
changing reg in insn 59
changing reg in insn 29
changing reg in insn 68
changing reg in insn 26
changing reg in insn 43
changing reg in insn 41
changing reg in insn 39
changing reg in insn 34
changing reg in insn 29
changing reg in insn 16
changing reg in insn 38
changing reg in insn 23
changing reg in insn 15
changing reg in insn 44
changing reg in insn 41
changing reg in insn 22
changing reg in insn 2
changing reg in insn 62
changing reg in insn 57
changing reg in insn 52
changing reg in insn 47
changing reg in insn 41
changing reg in insn 34
changing reg in insn 17
changing reg in insn 16
changing reg in insn 3
changing reg in insn 49
changing reg in insn 83
changing reg in insn 14
changing reg in insn 81
changing reg in insn 80
changing reg in insn 81
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 36
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 24
changing reg in insn 36
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
Spilling for insn 80.
Using reg 2 for reload 0
Spilling for insn 34.
Spilling for insn 41.
Spilling for insn 47.

Reloads for insn # 80
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                                                        (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                                                        (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])

Reloads for insn # 41
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:136 idx ] [136])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) [0 <variable>.events S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:136 idx ] [136])
                                                            (const_int 4 [0x4]))
                                                        (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) [0 <variable>.events S4 A32])

Reloads for insn # 47
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                                                        (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
deleting insn with uid = 29.


try_optimize_cfg iteration 1

Simplifying condjump 27 around jump 78
deleting insn with uid = 28.
deleting insn with uid = 78.
deleting insn with uid = 79.
deleting block 3
deleting insn with uid = 32.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
rescanning insn with uid = 24.
deleting insn with uid = 24.
rescanning insn with uid = 40.
deleting insn with uid = 40.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 63.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


armpmu_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,12u} r1={13d,6u} r2={11d,3u} r3={14d,6u,1d} r4={1d,8u} r5={2d,5u} r6={2d,4u} r7={1d,2u,1d} r8={1d,2u} r10={1d,1u} r12={8d} r13={1d,14u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={9d,2u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 926{858d,66u,2e} in 44{37 regular + 7 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 21 2 NOTE_INSN_DELETED)

(note 21 11 25 2 NOTE_INSN_DELETED)

(note 25 21 85 2 NOTE_INSN_DELETED)

(insn 85 25 80 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 80 85 81 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 81 80 2 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 81 19 2 arch/arm/kernel/perf_event.c:312 (set (reg/v/f:SI 4 r4 [orig:140 event ] [140])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 19 2 16 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 7 r7 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 16 19 13 2 arch/arm/kernel/perf_event.c:314 (set (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])
        (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 13 16 3 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 3 13 17 2 arch/arm/kernel/perf_event.c:312 (set (reg/v:SI 10 sl [orig:141 flags ] [141])
        (reg:SI 1 r1 [ flags ])) 167 {*arm_movsi_insn} (nil))

(insn 17 3 7 2 arch/arm/kernel/perf_event.c:318 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 7 17 83 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 83 7 14 2 arch/arm/kernel/perf_event.c:313 (set (reg/f:SI 1 r1 [143])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn 14 83 8 2 arch/arm/kernel/perf_event.c:313 (set (reg:SI 6 r6 [147])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [143])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 3 r3 [orig:146 <variable>.cpu ] [146])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 8 14 15 2 arch/arm/kernel/perf_event.c:313 (set (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8571426)) -1 (nil))

(insn 15 8 18 2 arch/arm/kernel/perf_event.c:313 (set (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
        (plus:SI (reg/v:SI 2 r2 [orig:134 __ptr ] [134])
            (reg:SI 6 r6 [147]))) 4 {*arm_addsi3} (nil))

(call_insn 18 15 20 2 arch/arm/kernel/perf_event.c:318 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_disable") [flags 0x41] <function_decl 0x113bae00 perf_pmu_disable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 18 22 2 arch/arm/kernel/perf_event.c:321 (set (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 22 20 23 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 23 22 24 2 arch/arm/kernel/perf_event.c:321 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 24 23 26 2 arch/arm/kernel/perf_event.c:321 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:149 armpmu ] [149])
                                (const_int 20 [0x14])) [0 <variable>.get_event_idx+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 26 24 27 2 arch/arm/kernel/perf_event.c:322 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 5 r5 [orig:136 idx ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 27 26 33 2 arch/arm/kernel/perf_event.c:322 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3667 [0xe53])
        (nil)))
;; End of basic block 2 -> ( 7 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  7 [36.7%] 
;; Succ edge  4 [63.3%]  (fallthru)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [63.3%]  (fallthru)
(note 33 27 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 37 33 42 4 NOTE_INSN_DELETED)

(note 42 37 48 4 NOTE_INSN_DELETED)

(note 48 42 34 4 NOTE_INSN_DELETED)

(insn 34 48 38 4 arch/arm/kernel/perf_event.c:331 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 38 34 36 4 arch/arm/kernel/perf_event.c:332 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:137 hwc ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 36 38 39 4 arch/arm/kernel/perf_event.c:332 (set (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
        (mem/f/c/i:SI (reg/f:SI 7 r7 [148]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 39 36 40 4 arch/arm/kernel/perf_event.c:332 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 40 39 41 4 arch/arm/kernel/perf_event.c:332 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:152 armpmu ] [152])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 41 40 43 4 arch/arm/kernel/perf_event.c:333 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:136 idx ] [136])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])) [0 <variable>.events S4 A32])
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 43 41 44 4 arch/arm/kernel/perf_event.c:334 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:136 idx ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 44 43 45 4 arch/arm/kernel/perf_event.c:334 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:138 cpuc ] [138])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(call_insn 45 44 49 4 arch/arm/kernel/perf_event.c:334 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x512e0000 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 45 46 4 arch/arm/kernel/perf_event.c:337 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 10 sl [orig:141 flags ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 46 49 47 4 arch/arm/kernel/perf_event.c:336 (set (reg:SI 3 r3 [155])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 47 46 50 4 arch/arm/kernel/perf_event.c:336 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 272 [0x110])) [0 <variable>.hw.state+0 S4 A64])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(jump_insn 50 47 51 4 arch/arm/kernel/perf_event.c:337 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 51 50 52 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 5 arch/arm/kernel/perf_event.c:338 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 5 arch/arm/kernel/perf_event.c:338 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(call_insn 54 53 55 5 arch/arm/kernel/perf_event.c:338 (parallel [
            (call (mem:SI (symbol_ref:SI ("armpmu_start") [flags 0x3] <function_decl 0x114a1980 armpmu_start>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 55 54 56 6 146 "" [1 uses])

(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 59 6 arch/arm/kernel/perf_event.c:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:140 event ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 59 57 58 6 arch/arm/kernel/perf_event.c:316 (set (reg/v:SI 5 r5 [orig:135 err ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 58 59 60 6 arch/arm/kernel/perf_event.c:341 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_update_userpage") [flags 0x41] <function_decl 0x113da080 perf_event_update_userpage>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [36.7%] 
(code_label 60 58 61 7 145 ("out") [1 uses])

(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 63 7 arch/arm/kernel/perf_event.c:344 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:140 event ] [140])
                (const_int 44 [0x2c])) [0 <variable>.pmu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 63 62 68 7 arch/arm/kernel/perf_event.c:344 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_pmu_enable") [flags 0x41] <function_decl 0x113bae80 perf_pmu_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 63 74 7 arch/arm/kernel/perf_event.c:346 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 err ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 74 68 82 7 arch/arm/kernel/perf_event.c:346 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 82 74 84 NOTE_INSN_DELETED)

(note 84 82 0 NOTE_INSN_DELETED)


;; Function validate_group (validate_group)[0:1319]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a10 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a10(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a10(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 66(l0): point = 0
   Insn 60(l0): point = 2
   Insn 53(l0): point = 5
   Insn 77(l0): point = 8
   Insn 48(l0): point = 10
   Insn 46(l0): point = 13
   Insn 45(l0): point = 15
   Insn 43(l0): point = 17
   Insn 42(l0): point = 19
   Insn 41(l0): point = 21
   Insn 75(l0): point = 24
   Insn 19(l0): point = 26
   Insn 71(l0): point = 28
   Insn 74(l0): point = 30
   Insn 17(l0): point = 33
   Insn 16(l0): point = 35
   Insn 14(l0): point = 37
   Insn 13(l0): point = 39
   Insn 12(l0): point = 41
   Insn 10(l0): point = 43
   Insn 6(l0): point = 45
   Insn 9(l0): point = 47
   Insn 8(l0): point = 49
   Insn 7(l0): point = 51
   Insn 2(l0): point = 53
   Insn 38(l1): point = 56
   Insn 37(l1): point = 58
   Insn 25(l1): point = 60
   Insn 26(l1): point = 62
   Insn 32(l1): point = 65
   Insn 30(l1): point = 68
   Insn 29(l1): point = 70
   Insn 27(l1): point = 72
 a0(r139): [8..10] [3..5]
 a1(r142): [20..53]
 a2(r149): [22..28]
 a3(r135): [24..26]
 a4(r137): [24..30]
 a5(r143): [29..51]
 a6(r134): [31..45]
 a7(r135): [56..74]
 a8(r137): [56..74]
 a9(r142): [56..74]
 a10(r149): [56..74]
Compressing live ranges: from 75 to 17 - 22%
Ranges after the compression:
 a0(r139): [2..3] [0..1]
 a1(r142): [15..16] [4..14]
 a2(r149): [15..16] [5..8]
 a3(r135): [15..16] [6..7]
 a4(r137): [15..16] [6..10]
 a5(r143): [9..13]
 a6(r134): [11..12]
+++Allocating 48 bytes for conflict table (uncompressed size 88)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r142,l0) conflicts: a2(r149,l0) a3(r135,l0) a4(r137,l0) a5(r143,l0) a6(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r149,l0) conflicts: a1(r142,l0) a3(r135,l0) a4(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r135,l0) conflicts: a1(r142,l0) a2(r149,l0) a4(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r137,l0) conflicts: a1(r142,l0) a2(r149,l0) a3(r135,l0) a5(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r143,l0) conflicts: a1(r142,l0) a4(r137,l0) a6(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r134,l0) conflicts: a1(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a4(r137)<->a6(r134)@1000:move
  cp1:a2(r149)<->a5(r143)@1000:move
  regions=2, blocks=11, points=17
    allocnos=11, copies=2, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r139 1r142 2r149 3r135 4r137 5r143 6r134
    modified regnos: 134 135 137 139 142 143 149
    border:
    Pressure: GENERAL_REGS=7
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
      Pushing a0(r139,l0)
      Pushing a6(r134,l0)
      Pushing a2(r149,l0)
      Pushing a1(r142,l0)
      Pushing a5(r143,l0)
      Pushing a4(r137,l0)
      Pushing a3(r135,l0)
      Popping a3(r135,l0)  -- assign reg 4
      Popping a4(r137,l0)  -- assign reg 5
      Popping a5(r143,l0)  -- assign reg 4
      Popping a1(r142,l0)  -- assign reg 6
      Popping a2(r149,l0)  -- assign reg 7
      Popping a6(r134,l0)  -- assign reg 5
      Popping a0(r139,l0)  -- assign reg 0
Disposition:
    6:r134 l0     5    3:r135 l0     4    4:r137 l0     5    0:r139 l0     0
    1:r142 l0     6    5:r143 l0     4    2:r149 l0     7
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, dead_or_set: 0, 142
insn=7, live_throughout: 13, 142, dead_or_set: 143
insn=8, live_throughout: 13, 142, 143, dead_or_set: 0
insn=9, live_throughout: 0, 13, 142, 143, dead_or_set: 1
insn=6, live_throughout: 0, 1, 13, 142, 143, dead_or_set: 134
insn=10, live_throughout: 13, 134, 142, 143, dead_or_set: 0, 1, 14
insn=12, live_throughout: 13, 134, 142, 143, dead_or_set: 0
insn=13, live_throughout: 0, 13, 134, 142, 143, dead_or_set: 1
insn=14, live_throughout: 13, 134, 142, 143, dead_or_set: 0, 1, 14
insn=16, live_throughout: 13, 14, 134, 142, 143, dead_or_set: 0
insn=17, live_throughout: 13, 14, 134, 142, 143, dead_or_set: 
insn=74, live_throughout: 13, 142, 143, dead_or_set: 134, 137
insn=71, live_throughout: 13, 137, 142, dead_or_set: 143, 149
insn=19, live_throughout: 13, 142, 149, dead_or_set: 135, 137
insn=75, live_throughout: 13, 135, 137, 142, 149, dead_or_set: 
insn=36, live_throughout: 0, 1, 13, 135, 137, 142, 149, dead_or_set: 
insn=27, live_throughout: 13, 135, 137, 142, 149, dead_or_set: 0, 1, 14
insn=29, live_throughout: 13, 14, 135, 137, 142, 149, dead_or_set: 0
insn=30, live_throughout: 13, 14, 135, 137, 142, 149, dead_or_set: 
insn=32, live_throughout: 13, 137, 142, 149, dead_or_set: 135
insn=34, live_throughout: 13, 135, 137, 142, 149, dead_or_set: 
insn=26, live_throughout: 13, 135, 137, 142, 149, dead_or_set: 1
insn=25, live_throughout: 1, 13, 135, 137, 142, 149, dead_or_set: 0
insn=37, live_throughout: 0, 1, 13, 135, 137, 142, 149, dead_or_set: 
insn=38, live_throughout: 0, 1, 13, 135, 137, 142, 149, dead_or_set: 
insn=41, live_throughout: 13, 142, dead_or_set: 0, 149
insn=42, live_throughout: 0, 13, dead_or_set: 1, 142
insn=43, live_throughout: 13, dead_or_set: 0, 1, 14
insn=45, live_throughout: 13, 14, dead_or_set: 0
insn=46, live_throughout: 13, 14, dead_or_set: 
insn=48, live_throughout: 13, 14, dead_or_set: 139
insn=77, live_throughout: 13, 14, 139, dead_or_set: 
insn=51, live_throughout: 13, 14, dead_or_set: 
insn=53, live_throughout: 13, 14, dead_or_set: 139
insn=54, live_throughout: 13, 14, 139, dead_or_set: 
insn=60, live_throughout: 13, 14, dead_or_set: 0, 139
insn=66, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 71 (nil))
changing reg in insn 6
changing reg in insn 74
changing reg in insn 13
changing reg in insn 19
changing reg in insn 32
changing reg in insn 32
changing reg in insn 37
changing reg in insn 26
changing reg in insn 74
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 37
changing reg in insn 53
changing reg in insn 48
changing reg in insn 60
changing reg in insn 2
changing reg in insn 42
changing reg in insn 6
changing reg in insn 7
changing reg in insn 71
changing reg in insn 12
changing reg in insn 8
changing reg in insn 71
changing reg in insn 41
changing reg in insn 25
deleting insn with uid = 74.
deleting insn with uid = 60.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)


validate_group

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,10u} r1={9d,4u} r2={5d} r3={5d} r4={3d,6u} r5={2d,4u} r6={1d,2u} r7={1d,2u} r12={5d} r13={1d,15u,1d} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={8d,4u} r25={5d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 550{496d,48u,6e} in 31{27 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 3 2 2 NOTE_INSN_DELETED)

(insn 2 15 7 2 arch/arm/kernel/perf_event.c:364 (set (reg/v/f:SI 6 r6 [orig:142 event ] [142])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 7 2 8 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg/f:SI 4 r4 [143])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn 8 7 9 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn 9 8 6 2 arch/arm/kernel/perf_event.c:368 discrim 1 (set (reg:SI 1 r1)
        (const_int 148 [0x94])) 167 {*arm_movsi_insn} (nil))

(insn 6 9 10 2 arch/arm/kernel/perf_event.c:365 (set (reg/v/f:SI 5 r5 [orig:134 leader ] [134])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:142 event ] [142])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 6 12 2 arch/arm/kernel/perf_event.c:368 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10a9ce80 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 12 10 13 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn 13 12 14 2 arch/arm/kernel/perf_event.c:370 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:134 leader ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 13 16 2 arch/arm/kernel/perf_event.c:370 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 14 17 2 arch/arm/kernel/perf_event.c:370 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 2 arch/arm/kernel/perf_event.c:370 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 9 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 7 [r7]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 18 17 71 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 71 18 19 3 (set (reg/f:SI 7 r7 [149])
        (reg/f:SI 4 r4 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn 19 71 75 3 arch/arm/kernel/perf_event.c:373 (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
        (mem/s/f/j:SI (pre_modify:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                (plus:SI (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
                    (const_int 16 [0x10]))) [0 <variable>.sibling_list.next+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 5 r5 [orig:137 D.25400 ] [137])
        (nil)))

(jump_insn 75 19 76 3 arch/arm/kernel/perf_event.c:373 (set (pc)
        (label_ref 34)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 76 75 36)

;; Start of basic block ( 6) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 36 76 23 4 153 "" [1 uses])

(note 23 36 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 27 4 NOTE_INSN_DELETED)

(call_insn 27 28 29 4 arch/arm/kernel/perf_event.c:374 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 27 30 4 arch/arm/kernel/perf_event.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 4 arch/arm/kernel/perf_event.c:374 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 4 -> ( 9 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [4.5%]  (loop_exit)
;; Succ edge  5 [95.5%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [95.5%]  (fallthru)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 34 5 arch/arm/kernel/perf_event.c:373 (set (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 sibling ] [135]) [0 <variable>.group_entry.next+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 34 32 35 6 152 "" [1 uses])

(note 35 34 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 35 25 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 25 26 37 6 arch/arm/kernel/perf_event.c:374 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn 37 25 38 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:135 sibling ] [135])
            (reg/f:SI 5 r5 [orig:137 D.25400 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 38 37 39 6 arch/arm/kernel/perf_event.c:373 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 6 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 39 38 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 44 39 41 7 NOTE_INSN_DELETED)

(insn 41 44 42 7 arch/arm/kernel/perf_event.c:378 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -148 [0xffffffffffffff6c]))
        (nil)))

(insn 42 41 43 7 arch/arm/kernel/perf_event.c:378 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:142 event ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 7 arch/arm/kernel/perf_event.c:378 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_event") [flags 0x3] <function_decl 0x114a1c80 validate_event>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 45 43 46 7 arch/arm/kernel/perf_event.c:378 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 7 arch/arm/kernel/perf_event.c:378 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  9 [39.0%] 
;; Succ edge  8 [61.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [61.0%]  (fallthru)
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 77 8 arch/arm/kernel/perf_event.c:381 (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 77 48 78 8 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 78 77 51)

;; Start of basic block ( 2 4 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  4 [4.5%]  (loop_exit)
;; Pred edge  7 [39.0%] 
(code_label 51 78 52 9 151 "" [3 uses])

(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 9 arch/arm/kernel/perf_event.c:371 (set (reg:SI 0 r0 [orig:139 D.25395 ] [139])
        (const_int -28 [0xffffffffffffffe4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -28 [0xffffffffffffffe4])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 54 53 55 10 154 "" [1 uses])

(note 55 54 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 66 55 79 10 arch/arm/kernel/perf_event.c:382 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 66 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)


;; Function hw_perf_event_destroy (hw_perf_event_destroy)[0:1323]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 18 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 21 (  2.1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a9 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 56(l0): point = 1
   Insn 52(l0): point = 3
   Insn 51(l0): point = 5
   Insn 55(l0): point = 7
   Insn 49(l0): point = 9
   Insn 48(l0): point = 11
   Insn 47(l0): point = 13
   Insn 45(l0): point = 15
   Insn 72(l0): point = 18
   Insn 20(l0): point = 20
   Insn 19(l0): point = 22
   Insn 68(l0): point = 24
   Insn 18(l0): point = 26
   Insn 15(l0): point = 29
   Insn 14(l0): point = 31
   Insn 12(l0): point = 33
   Insn 10(l0): point = 35
   Insn 11(l0): point = 37
   Insn 6(l0): point = 39
   Insn 42(l1): point = 42
   Insn 70(l1): point = 44
   Insn 37(l1): point = 46
   Insn 41(l1): point = 48
   Insn 26(l1): point = 50
   Insn 34(l1): point = 54
   Insn 30(l1): point = 57
   Insn 29(l1): point = 59
   Insn 71(l1): point = 61
   Insn 27(l1): point = 63
   Insn 25(l1): point = 65
 a0(r152): [4..17]
 a1(r149): [4..5]
 a2(r146): [14..15]
 a3(r133): [18..20]
 a4(r143): [21..22]
 a5(r142): [23..26]
 a6(r153): [18..24]
 a7(r137): [25..39]
 a8(r133): [42..67]
 a9(r153): [42..67]
 a10(r152): [42..44]
Compressing live ranges: from 68 to 17 - 25%
Ranges after the compression:
 a0(r152): [14..15] [0..4]
 a1(r149): [0..1]
 a2(r146): [2..3]
 a3(r133): [14..16] [5..6]
 a4(r143): [7..8]
 a5(r142): [9..12]
 a6(r153): [14..16] [5..10]
 a7(r137): [11..13]
+++Allocating 64 bytes for conflict table (uncompressed size 88)
;; a0(r152,l0) conflicts: a1(r149,l0) a2(r146,l0) a3(r133,l0) a6(r153,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r149,l0) conflicts: a0(r152,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r146,l0) conflicts: a0(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r133,l0) conflicts: a0(r152,l0) a6(r153,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r143,l0) conflicts: a6(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r142,l0) conflicts: a6(r153,l0) a7(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r153,l0) conflicts: a0(r152,l0) a3(r133,l0) a4(r143,l0) a5(r142,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r137,l0) conflicts: a5(r142,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a6(r153)<->a7(r137)@1000:move
  cp1:a3(r133)<->a4(r143)@125:shuffle
  regions=2, blocks=10, points=17
    allocnos=11, copies=2, conflicts=4, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r152 1r149 2r146 3r133 4r143 5r142 6r153 7r137
    modified regnos: 133 137 142 143 146 149 152 153
    border:
    Pressure: GENERAL_REGS=5
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
      Pushing a5(r142,l0)
      Pushing a4(r143,l0)
      Pushing a2(r146,l0)
      Pushing a1(r149,l0)
      Pushing a6(r153,l0)
      Pushing a0(r152,l0)
      Pushing a7(r137,l0)
      Pushing a3(r133,l0)
      Popping a3(r133,l0)  -- assign reg 4
      Popping a7(r137,l0)  -- assign reg 4
      Popping a0(r152,l0)  -- assign reg 5
      Popping a6(r153,l0)  -- assign reg 6
      Popping a1(r149,l0)  -- assign reg 3
      Popping a2(r146,l0)  -- assign reg 3
      Popping a4(r143,l0)  -- assign reg 4
      Popping a5(r142,l0)  -- assign reg 3
Disposition:
    3:r133 l0     4    7:r137 l0     4    5:r142 l0     3    4:r143 l0     4
    2:r146 l0     3    1:r149 l0     3    0:r152 l0     5    6:r153 l0     6
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, dead_or_set: 137
insn=11, live_throughout: 13, 137, dead_or_set: 1
insn=10, live_throughout: 1, 13, 137, dead_or_set: 0
insn=12, live_throughout: 13, 137, dead_or_set: 0, 1, 14
insn=14, live_throughout: 13, 14, 137, dead_or_set: 0
insn=15, live_throughout: 13, 14, 137, dead_or_set: 
insn=18, live_throughout: 13, 137, dead_or_set: 142
insn=68, live_throughout: 13, 142, dead_or_set: 137, 153
insn=19, live_throughout: 13, 153, dead_or_set: 142, 143
insn=20, live_throughout: 13, 153, dead_or_set: 133, 143
insn=72, live_throughout: 13, 133, 153, dead_or_set: 
insn=40, live_throughout: 1, 13, 133, 153, dead_or_set: 
insn=25, live_throughout: 1, 13, 133, 153, dead_or_set: 0
insn=27, live_throughout: 13, 133, 153, dead_or_set: 0, 1, 14
insn=71, live_throughout: 0, 13, 133, 153, dead_or_set: 1
insn=29, live_throughout: 0, 1, 13, 133, 153, dead_or_set: 
insn=30, live_throughout: 0, 1, 13, 133, 153, dead_or_set: 
insn=34, live_throughout: 13, 133, 153, dead_or_set: 0, 1, 14
insn=35, live_throughout: 13, 133, 153, dead_or_set: 
insn=38, live_throughout: 13, 133, 153, dead_or_set: 
insn=26, live_throughout: 13, 133, 153, dead_or_set: 1
insn=41, live_throughout: 1, 13, 133, 153, dead_or_set: 
insn=37, live_throughout: 1, 13, 24, 153, dead_or_set: 133
insn=70, live_throughout: 1, 13, 24, 133, 153, dead_or_set: 152
insn=42, live_throughout: 1, 13, 133, 152, 153, dead_or_set: 
insn=45, live_throughout: 13, 152, dead_or_set: 146
insn=47, live_throughout: 13, 152, dead_or_set: 14, 146
insn=48, live_throughout: 13, 152, dead_or_set: 0
insn=49, live_throughout: 13, 152, dead_or_set: 0, 14
insn=55, live_throughout: 13, 14, 152, dead_or_set: 0
insn=51, live_throughout: 0, 13, 14, 152, dead_or_set: 149
insn=52, live_throughout: 0, 13, 14, dead_or_set: 149, 152
insn=56, live_throughout: 13, 14, dead_or_set: 0
insn=63, live_throughout: 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 51 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 70 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 68 (nil))
changing reg in insn 37
changing reg in insn 20
changing reg in insn 41
changing reg in insn 37
changing reg in insn 26
changing reg in insn 6
changing reg in insn 68
changing reg in insn 10
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 45
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 70
changing reg in insn 52
changing reg in insn 45
changing reg in insn 45
changing reg in insn 68
changing reg in insn 25
Spilling for insn 52.

Reloads for insn # 52
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [152])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [152])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])


try_optimize_cfg iteration 1

Edge 4->6 redirected to 7
merging block 6 into block 5
deleting insn with uid = 35.
deleting insn with uid = 36.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 34.
rescanning insn with uid = 47.
deleting insn with uid = 47.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 56.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 18 (    2)


hw_perf_event_destroy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,7u} r1={10d,3u} r2={7d} r3={10d,3u} r4={4d,7u} r5={1d,2u,1d} r6={1d,1u} r12={7d} r13={1d,14u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={9d,3u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 769{727d,41u,1e} in 30{24 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 3 6 2 NOTE_INSN_DELETED)

(insn 6 13 11 2 arch/arm/kernel/perf_event.c:467 (set (reg/f:SI 4 r4 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 11 6 10 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn 10 11 12 2 arch/arm/kernel/perf_event.c:467 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [137])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(call_insn 12 10 14 2 arch/arm/kernel/perf_event.c:467 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("atomic_dec_and_mutex_lock") [flags 0x41] <function_decl 0x10d7c480 atomic_dec_and_mutex_lock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 14 12 15 2 arch/arm/kernel/perf_event.c:467 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 arch/arm/kernel/perf_event.c:467 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 3 9)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  9 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 16 68 3 arch/arm/kernel/perf_event.c:450 (set (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [137])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn 68 18 19 3 (set (reg/f:SI 6 r6 [153])
        (reg/f:SI 4 r4 [137])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 19 68 20 3 arch/arm/kernel/perf_event.c:450 (set (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:142 pmu_device ] [142])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 72 3 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg:SI 4 r4 [orig:143 <variable>.num_resources ] [143])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn 72 20 73 3 (set (pc)
        (label_ref 38)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 73 72 40)

;; Start of basic block ( 7) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [91.0%] 
(code_label 40 73 23 4 160 "" [1 uses])

(note 23 40 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 23 25 4 NOTE_INSN_DELETED)

(insn 25 28 27 4 arch/arm/kernel/perf_event.c:451 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [153])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn 27 25 71 4 arch/arm/kernel/perf_event.c:451 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 71 27 29 4 arch/arm/kernel/perf_event.c:453 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 29 71 30 4 arch/arm/kernel/perf_event.c:452 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 4 arch/arm/kernel/perf_event.c:452 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  5 [52.5%]  (fallthru)
;; Succ edge  7 [47.5%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [52.5%]  (fallthru)
(note 31 30 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 34 31 38 5 arch/arm/kernel/perf_event.c:453 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 3 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
;; Pred edge  4 [47.5%] 
(code_label 38 34 39 7 158 "" [2 uses])

(note 39 38 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 26 39 41 7 arch/arm/kernel/perf_event.c:451 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:133 i ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 41 26 37 7 arch/arm/kernel/perf_event.c:450 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:133 i ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 37 41 70 7 arch/arm/kernel/perf_event.c:450 (set (reg/v:SI 4 r4 [orig:133 i ] [133])
        (plus:SI (reg/v:SI 4 r4 [orig:133 i ] [133])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 70 37 42 7 (set (reg/f:SI 5 r5 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 42 70 43 7 arch/arm/kernel/perf_event.c:450 discrim 1 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 7 -> ( 4 8)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  8 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  7 [9.0%]  (fallthru,loop_exit)
(note 43 42 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 46 43 45 8 NOTE_INSN_DELETED)

(insn 45 46 47 8 arch/arm/kernel/perf_event.c:455 (set (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 5 r5 [152]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(call_insn 47 45 48 8 arch/arm/kernel/perf_event.c:455 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:146 armpmu ] [146])
                            (const_int 36 [0x24])) [0 <variable>.stop+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))

(insn 48 47 49 8 arch/arm/kernel/perf_event.c:457 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 49 48 55 8 arch/arm/kernel/perf_event.c:457 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 55 49 51 8 arch/arm/kernel/perf_event.c:469 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn 51 55 52 8 arch/arm/kernel/perf_event.c:458 (set (reg:SI 3 r3 [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 52 51 56 8 arch/arm/kernel/perf_event.c:458 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 5 r5 [152])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 3 r3 [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn/j 56 52 57 8 arch/arm/kernel/perf_event.c:469 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 8 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 57 56 63)

;; Start of basic block ( 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [39.0%] 
(code_label 63 57 66 9 161 "" [1 uses])

(note 66 63 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 74 66 75 NOTE_INSN_DELETED)

(note 75 74 0 NOTE_INSN_DELETED)


;; Function armpmu_event_init (armpmu_event_init)[0:1325]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 64 n_edges 95 count 136 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 64 n_edges 95 count 162 (  2.5)
scanning new insn with uid = 458.
verify found no changes in insn with uid = 458.
deleting insn with uid = 343.
scanning new insn with uid = 459.
verify found no changes in insn with uid = 459.
deleting insn with uid = 328.
scanning new insn with uid = 460.
verify found no changes in insn with uid = 460.
deleting insn with uid = 338.
scanning new insn with uid = 461.
verify found no changes in insn with uid = 461.
deleting insn with uid = 324.
scanning new insn with uid = 462.
verify found no changes in insn with uid = 462.
deleting insn with uid = 321.
scanning new insn with uid = 463.
verify found no changes in insn with uid = 463.
deleting insn with uid = 298.
scanning new insn with uid = 464.
verify found no changes in insn with uid = 464.
deleting insn with uid = 276.
scanning new insn with uid = 465.
verify found no changes in insn with uid = 465.
deleting insn with uid = 267.
scanning new insn with uid = 466.
verify found no changes in insn with uid = 466.
deleting insn with uid = 235.
scanning new insn with uid = 467.
verify found no changes in insn with uid = 467.
deleting insn with uid = 230.
scanning new insn with uid = 468.
verify found no changes in insn with uid = 468.
deleting insn with uid = 405.
scanning new insn with uid = 469.
verify found no changes in insn with uid = 469.
deleting insn with uid = 204.
scanning new insn with uid = 470.
verify found no changes in insn with uid = 470.
deleting insn with uid = 34.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 64 n_edges 95 count 136 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 64 n_edges 95 count 162 (  2.5)

Pass 0 for finding allocno costs

    a95 (r264,l4) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r264,l1) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r263,l4) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r263,l1) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r259,l2) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r258,l2) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r257,l2) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r255,l3) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r240,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r235,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r192,l2) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r169,l4) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r169,l1) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r163,l4) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r163,l2) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r163,l3) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r160,l2) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r160,l3) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r158,l4) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r157,l4) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r157,l1) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r156,l4) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r155,l4) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r153,l2) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r152,l2) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r137,l2) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r135,l3) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:240000
  a1(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:270000
  a2(r246,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r240,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a47(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a57(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a60(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a62(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a68(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r135,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a70(r160,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a71(r163,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r255,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a73(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a75(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a76(r163,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r257,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r258,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a79(r259,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a81(r192,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a84(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r263,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a87(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a88(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a90(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a91(r158,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a92(r163,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a93(r169,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a94(r263,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r264,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a96(r155,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a97(r156,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r264: preferred GENERAL_REGS, alternative NO_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:240000
  a1(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:270000
  a2(r246,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r240,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a47(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a57(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a60(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a62(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a68(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r135,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a70(r160,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a71(r163,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r255,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a73(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a75(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a76(r163,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r257,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r258,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a79(r259,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a81(r192,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a84(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r263,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a87(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a88(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a90(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a91(r158,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a92(r163,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a93(r169,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a94(r263,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r264,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a96(r155,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a97(r156,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 454(l0): point = 0
   Insn 382(l0): point = 2
   Insn 452(l0): point = 5
   Insn 377(l0): point = 7
   Insn 392(l0): point = 10
   Insn 386(l0): point = 12
   Insn 369(l0): point = 15
   Insn 368(l0): point = 17
   Insn 365(l0): point = 20
   Insn 363(l0): point = 23
   Insn 362(l0): point = 25
   Insn 360(l0): point = 27
   Insn 359(l0): point = 29
   Insn 450(l0): point = 32
   Insn 354(l0): point = 34
   Insn 352(l0): point = 37
   Insn 351(l0): point = 39
   Insn 350(l0): point = 41
   Insn 347(l0): point = 44
   Insn 344(l0): point = 47
   Insn 458(l0): point = 49
   Insn 342(l0): point = 51
   Insn 459(l0): point = 53
   Insn 340(l0): point = 55
   Insn 339(l0): point = 57
   Insn 460(l0): point = 59
   Insn 346(l0): point = 61
   Insn 336(l0): point = 64
   Insn 327(l0): point = 66
   Insn 325(l0): point = 68
   Insn 461(l0): point = 70
   Insn 323(l0): point = 72
   Insn 335(l0): point = 74
   Insn 322(l0): point = 76
   Insn 462(l0): point = 78
   Insn 333(l0): point = 80
   Insn 329(l0): point = 82
   Insn 448(l0): point = 85
   Insn 316(l0): point = 87
   Insn 314(l0): point = 90
   Insn 313(l0): point = 92
   Insn 308(l0): point = 94
   Insn 306(l0): point = 97
   Insn 305(l0): point = 99
   Insn 302(l0): point = 102
   Insn 301(l0): point = 104
   Insn 299(l0): point = 106
   Insn 463(l0): point = 108
   Insn 300(l0): point = 110
   Insn 446(l0): point = 113
   Insn 293(l0): point = 115
   Insn 291(l0): point = 118
   Insn 290(l0): point = 120
   Insn 444(l0): point = 123
   Insn 285(l0): point = 125
   Insn 442(l0): point = 128
   Insn 280(l0): point = 130
   Insn 278(l0): point = 133
   Insn 277(l0): point = 135
   Insn 464(l0): point = 137
   Insn 275(l0): point = 139
   Insn 274(l0): point = 141
   Insn 269(l0): point = 143
   Insn 268(l0): point = 145
   Insn 465(l0): point = 147
   Insn 272(l0): point = 149
   Insn 265(l0): point = 152
   Insn 264(l0): point = 154
   Insn 263(l0): point = 156
   Insn 257(l0): point = 159
   Insn 256(l0): point = 161
   Insn 255(l0): point = 163
   Insn 249(l0): point = 166
   Insn 248(l0): point = 168
   Insn 247(l0): point = 170
   Insn 398(l0): point = 172
   Insn 244(l0): point = 175
   Insn 243(l0): point = 177
   Insn 440(l0): point = 180
   Insn 237(l0): point = 183
   Insn 236(l0): point = 185
   Insn 466(l0): point = 187
   Insn 234(l0): point = 189
   Insn 232(l0): point = 191
   Insn 231(l0): point = 193
   Insn 467(l0): point = 195
   Insn 233(l0): point = 197
   Insn 228(l0): point = 200
   Insn 227(l0): point = 202
   Insn 226(l0): point = 204
   Insn 223(l0): point = 207
   Insn 222(l0): point = 209
   Insn 221(l0): point = 211
   Insn 220(l0): point = 213
   Insn 215(l0): point = 216
   Insn 214(l0): point = 218
   Insn 212(l0): point = 222
   Insn 210(l0): point = 224
   Insn 436(l0): point = 227
   Insn 205(l0): point = 229
   Insn 469(l0): point = 231
   Insn 468(l0): point = 233
   Insn 202(l0): point = 235
   Insn 201(l0): point = 237
   Insn 434(l0): point = 240
   Insn 401(l0): point = 242
   Insn 177(l0): point = 244
   Insn 174(l0): point = 247
   Insn 173(l0): point = 249
   Insn 432(l0): point = 252
   Insn 156(l0): point = 254
   Insn 154(l0): point = 256
   Insn 155(l0): point = 258
   Insn 430(l0): point = 261
   Insn 128(l0): point = 263
   Insn 129(l0): point = 265
   Insn 127(l0): point = 267
   Insn 428(l0): point = 270
   Insn 140(l0): point = 272
   Insn 142(l0): point = 274
   Insn 165(l0): point = 276
   Insn 120(l0): point = 278
   Insn 121(l0): point = 280
   Insn 118(l0): point = 283
   Insn 117(l0): point = 285
   Insn 116(l0): point = 287
   Insn 113(l0): point = 290
   Insn 112(l0): point = 292
   Insn 111(l0): point = 294
   Insn 426(l0): point = 297
   Insn 106(l0): point = 299
   Insn 104(l0): point = 302
   Insn 103(l0): point = 304
   Insn 102(l0): point = 306
   Insn 100(l0): point = 309
   Insn 99(l0): point = 311
   Insn 98(l0): point = 313
   Insn 97(l0): point = 315
   Insn 95(l0): point = 317
   Insn 94(l0): point = 319
   Insn 424(l0): point = 322
   Insn 88(l0): point = 325
   Insn 87(l0): point = 327
   Insn 86(l0): point = 329
   Insn 84(l0): point = 331
   Insn 83(l0): point = 333
   Insn 80(l0): point = 336
   Insn 78(l0): point = 338
   Insn 79(l0): point = 340
   Insn 76(l0): point = 342
   Insn 75(l0): point = 344
   Insn 77(l0): point = 346
   Insn 74(l0): point = 348
   Insn 72(l0): point = 351
   Insn 71(l0): point = 353
   Insn 70(l0): point = 355
   Insn 69(l0): point = 357
   Insn 68(l0): point = 359
   Insn 38(l0): point = 362
   Insn 35(l0): point = 364
   Insn 470(l0): point = 366
   Insn 48(l0): point = 368
   Insn 46(l0): point = 370
   Insn 419(l0): point = 373
   Insn 29(l0): point = 375
   Insn 27(l0): point = 378
   Insn 26(l0): point = 380
   Insn 25(l0): point = 382
   Insn 24(l0): point = 384
   Insn 417(l0): point = 387
   Insn 19(l0): point = 389
   Insn 14(l0): point = 392
   Insn 13(l0): point = 394
   Insn 11(l0): point = 396
   Insn 9(l0): point = 398
   Insn 8(l0): point = 401
   Insn 7(l0): point = 403
   Insn 6(l0): point = 405
   Insn 2(l0): point = 407
   Insn 199(l3): point = 410
   Insn 194(l3): point = 412
   Insn 198(l3): point = 414
   Insn 183(l3): point = 416
   Insn 191(l3): point = 420
   Insn 187(l3): point = 423
   Insn 186(l3): point = 425
   Insn 406(l3): point = 427
   Insn 184(l3): point = 429
   Insn 182(l3): point = 431
   Insn 170(l2): point = 434
   Insn 169(l2): point = 436
   Insn 168(l2): point = 438
   Insn 133(l2): point = 440
   Insn 166(l2): point = 442
   Insn 134(l2): point = 444
   Insn 161(l2): point = 447
   Insn 151(l2): point = 450
   Insn 150(l2): point = 452
   Insn 148(l2): point = 454
   Insn 143(l2): point = 456
   Insn 141(l2): point = 458
   Insn 138(l2): point = 461
   Insn 137(l2): point = 463
   Insn 410(l2): point = 465
   Insn 146(l2): point = 467
   Insn 145(l2): point = 469
   Insn 135(l2): point = 471
   Insn 421(l1): point = 474
   Insn 60(l1): point = 476
   Insn 58(l1): point = 479
   Insn 57(l1): point = 481
   Insn 55(l1): point = 483
   Insn 44(l1): point = 486
   Insn 43(l1): point = 488
   Insn 41(l1): point = 491
   Insn 40(l1): point = 493
   Insn 53(l4): point = 496
   Insn 52(l4): point = 498
   Insn 50(l4): point = 500
 a0(r160): [387..389] [373..375] [325..329] [270..278] [227..265] [207..216] [183..189] [128..130] [123..125] [113..115] [90..102] [73..87] [32..34] [23..25] [13..20] [5..7] [0..2]
 a1(r163): [392..407] [378..386] [37..372] [18..31] [0..9]
 a2(r246): [40..41]
 a3(r146): [44..45]
 a4(r245): [45..61]
 a5(r141): [45..55]
 a6(r243): [48..49]
 a7(r234): [52..53]
 a8(r241): [56..57]
 a9(r240): [58..59]
 a10(r230): [90..92] [67..84]
 a11(r232): [69..70]
 a12(r239): [75..80]
 a13(r235): [75..82]
 a14(r231): [77..78]
 a15(r227): [93..94]
 a16(r225): [103..104]
 a17(r224): [103..110]
 a18(r223): [105..106]
 a19(r222): [107..108]
 a20(r140): [200..204] [150..179] [121..122]
 a21(r142): [133..139] [126..127]
 a22(r221): [136..137]
 a23(r215): [140..143]
 a24(r220): [140..141]
 a25(r143): [142..156]
 a26(r218): [142..149]
 a27(r214): [144..145]
 a28(r213): [146..147]
 a29(r144): [150..163]
 a30(r145): [150..170]
 a31(r248): [157..172]
 a32(r206): [186..187]
 a33(r204): [190..191]
 a34(r205): [190..197]
 a35(r203): [192..193]
 a36(r202): [194..195]
 a37(r148): [218..219]
 a38(r198): [219..222]
 a39(r196): [218..224]
 a40(r147): [220..220] [218..218]
 a41(r254): [230..233]
 a42(r195): [230..231]
 a43(r255): [240..242]
 a44(r135): [240..244]
 a45(r153): [270..280] [245..260]
 a46(r154): [259..260]
 a47(r258): [270..272]
 a48(r259): [270..274]
 a49(r257): [270..276]
 a50(r152): [297..299] [270..290]
 a51(r186): [286..287]
 a52(r138): [288..315]
 a53(r185): [291..292]
 a54(r184): [293..294]
 a55(r183): [305..306]
 a56(r151): [307..313]
 a57(r179): [330..346] [316..321]
 a58(r157): [336..362] [320..321]
 a59(r149): [339..342]
 a60(r161): [354..355]
 a61(r169): [378..384] [356..372]
 a62(r171): [365..366]
 a63(r264): [362..368]
 a64(r263): [362..370]
 a65(r170): [381..382]
 a66(r165): [395..396]
 a67(r164): [397..405]
 a68(r166): [397..398]
 a69(r135): [410..433]
 a70(r160): [410..433]
 a71(r163): [410..433]
 a72(r255): [410..433]
 a73(r152): [434..473]
 a74(r153): [434..473]
 a75(r160): [461..473] [434..452]
 a76(r163): [434..473]
 a77(r257): [434..473]
 a78(r258): [434..473]
 a79(r259): [434..473]
 a80(r154): [450..463]
 a81(r192): [437..438]
 a82(r137): [439..442]
 a83(r157): [482..495] [474..476]
 a84(r163): [474..495]
 a85(r169): [474..495]
 a86(r263): [474..495]
 a87(r264): [474..495]
 a88(r155): [477..485]
 a89(r158): [486..488]
 a90(r157): [496..504]
 a91(r158): [496..504]
 a92(r163): [496..504]
 a93(r169): [496..504]
 a94(r263): [496..504]
 a95(r264): [496..504]
 a96(r155): [502..502] [496..500]
 a97(r156): [499..501]
 Rebuilding regno allocno list for 192
 Rebuilding regno allocno list for 158
 Rebuilding regno allocno list for 156
 Rebuilding regno allocno list for 155
 Rebuilding regno allocno list for 137
Compressing live ranges: from 505 to 193 - 38%
Ranges after the compression:
 a0(r160): [177..179] [168..176] [159..160] [152..153] [136..137] [112..116] [101..111] [94..95] [81..84] [59..60] [55..56] [51..52] [39..43] [31..38] [11..12] [8..9] [5..7] [2..3] [0..1]
 a1(r163): [168..192] [161..167] [154..158] [13..151] [6..10] [0..4]
 a2(r246): [14..15]
 a3(r146): [16..17]
 a4(r245): [17..27]
 a5(r141): [17..22]
 a6(r243): [18..19]
 a7(r234): [20..21]
 a8(r241): [23..24]
 a9(r240): [25..26]
 a10(r230): [39..40] [28..37]
 a11(r232): [29..30]
 a12(r239): [32..35]
 a13(r235): [32..36]
 a14(r231): [33..34]
 a15(r227): [41..42]
 a16(r225): [44..45]
 a17(r224): [44..50]
 a18(r223): [46..47]
 a19(r222): [48..49]
 a20(r140): [92..93] [74..80] [53..54]
 a21(r142): [61..64] [57..58]
 a22(r221): [62..63]
 a23(r215): [65..68]
 a24(r220): [65..66]
 a25(r143): [67..75]
 a26(r218): [67..73]
 a27(r214): [69..70]
 a28(r213): [71..72]
 a29(r144): [74..77]
 a30(r145): [74..78]
 a31(r248): [76..79]
 a32(r206): [82..83]
 a33(r204): [85..86]
 a34(r205): [85..91]
 a35(r203): [87..88]
 a36(r202): [89..90]
 a37(r148): [96..97]
 a38(r198): [97..99]
 a39(r196): [96..100]
 a40(r147): [98..98] [96..96]
 a41(r254): [102..104]
 a42(r195): [102..103]
 a43(r255): [168..169] [105..106]
 a44(r135): [168..169] [105..107]
 a45(r153): [170..179] [112..117] [108..110]
 a46(r154): [175..178] [109..110]
 a47(r258): [170..179] [112..113]
 a48(r259): [170..179] [112..114]
 a49(r257): [170..179] [112..115]
 a50(r152): [170..179] [126..127] [112..121]
 a51(r186): [118..119]
 a52(r138): [120..132]
 a53(r185): [122..123]
 a54(r184): [124..125]
 a55(r183): [128..129]
 a56(r151): [130..131]
 a57(r179): [138..142] [133..135]
 a58(r157): [183..192] [180..181] [139..146] [134..135]
 a59(r149): [140..141]
 a60(r161): [143..144]
 a61(r169): [180..192] [154..157] [145..151]
 a62(r171): [147..148]
 a63(r264): [180..192] [146..149]
 a64(r263): [180..192] [146..150]
 a65(r170): [155..156]
 a66(r165): [162..163]
 a67(r164): [164..166]
 a68(r166): [164..165]
 a81(r192): [171..172]
 a82(r137): [173..174]
 a88(r155): [191..191] [187..189] [182..184]
 a89(r158): [187..192] [185..186]
 a97(r156): [188..190]
+++Allocating 776 bytes for conflict table (uncompressed size 1568)
;; a0(r160,l0) conflicts: a1(r163,l0) a10(r230,l0) a12(r239,l0) a13(r235,l0) a14(r231,l0) a15(r227,l0) a32(r206,l0) a42(r195,l0) a41(r254,l0) a43(r255,l0) a44(r135,l0) a45(r153,l0) a46(r154,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r163,l0) conflicts: a0(r160,l0) a2(r246,l0) a3(r146,l0) a5(r141,l0) a4(r245,l0) a6(r243,l0) a7(r234,l0) a8(r241,l0) a9(r240,l0) a10(r230,l0) a11(r232,l0) a12(r239,l0) a13(r235,l0) a14(r231,l0) a15(r227,l0) a16(r225,l0) a17(r224,l0) a18(r223,l0) a19(r222,l0) a20(r140,l0) a21(r142,l0) a22(r221,l0) a24(r220,l0) a23(r215,l0) a26(r218,l0) a25(r143,l0) a27(r214,l0) a28(r213,l0) a29(r144,l0) a30(r145,l0) a31(r248,l0) a32(r206,l0) a33(r204,l0) a34(r205,l0) a35(r203,l0) a36(r202,l0) a37(r148,l0) a40(r147,l0) a39(r196,l0) a38(r198,l0) a42(r195,l0) a41(r254,l0) a43(r255,l0) a44(r135,l0) a45(r153,l0) a46(r154,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0) a51(r186,l0) a52(r138,l0) a53(r185,l0) a54(r184,l0) a55(r183,l0) a56(r151,l0) a57(r179,l0) a58(r157,l0) a59(r149,l0) a60(r161,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0) a62(r171,l0) a65(r170,l0) a66(r165,l0) a68(r166,l0) a67(r164,l0) a81(r192,l0) a82(r137,l0) a88(r155,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r246,l0) conflicts: a1(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r146,l0) conflicts: a1(r163,l0) a5(r141,l0) a4(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r245,l0) conflicts: a1(r163,l0) a3(r146,l0) a5(r141,l0) a6(r243,l0) a7(r234,l0) a8(r241,l0) a9(r240,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r141,l0) conflicts: a1(r163,l0) a3(r146,l0) a4(r245,l0) a6(r243,l0) a7(r234,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r243,l0) conflicts: a1(r163,l0) a5(r141,l0) a4(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r234,l0) conflicts: a1(r163,l0) a5(r141,l0) a4(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r241,l0) conflicts: a1(r163,l0) a4(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r240,l0) conflicts: a1(r163,l0) a4(r245,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r230,l0) conflicts: a0(r160,l0) a1(r163,l0) a11(r232,l0) a12(r239,l0) a13(r235,l0) a14(r231,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r232,l0) conflicts: a1(r163,l0) a10(r230,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r239,l0) conflicts: a0(r160,l0) a1(r163,l0) a10(r230,l0) a13(r235,l0) a14(r231,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r235,l0) conflicts: a0(r160,l0) a1(r163,l0) a10(r230,l0) a12(r239,l0) a14(r231,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r231,l0) conflicts: a0(r160,l0) a1(r163,l0) a10(r230,l0) a12(r239,l0) a13(r235,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r227,l0) conflicts: a0(r160,l0) a1(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r225,l0) conflicts: a1(r163,l0) a17(r224,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r224,l0) conflicts: a1(r163,l0) a16(r225,l0) a18(r223,l0) a19(r222,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r223,l0) conflicts: a1(r163,l0) a17(r224,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r222,l0) conflicts: a1(r163,l0) a17(r224,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r140,l0) conflicts: a1(r163,l0) a25(r143,l0) a29(r144,l0) a30(r145,l0) a31(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r142,l0) conflicts: a1(r163,l0) a22(r221,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r221,l0) conflicts: a1(r163,l0) a21(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r215,l0) conflicts: a1(r163,l0) a24(r220,l0) a26(r218,l0) a25(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r220,l0) conflicts: a1(r163,l0) a23(r215,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r143,l0) conflicts: a1(r163,l0) a20(r140,l0) a23(r215,l0) a26(r218,l0) a27(r214,l0) a28(r213,l0) a29(r144,l0) a30(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r218,l0) conflicts: a1(r163,l0) a23(r215,l0) a25(r143,l0) a27(r214,l0) a28(r213,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r214,l0) conflicts: a1(r163,l0) a26(r218,l0) a25(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r213,l0) conflicts: a1(r163,l0) a26(r218,l0) a25(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r144,l0) conflicts: a1(r163,l0) a20(r140,l0) a25(r143,l0) a30(r145,l0) a31(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r145,l0) conflicts: a1(r163,l0) a20(r140,l0) a25(r143,l0) a29(r144,l0) a31(r248,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r248,l0) conflicts: a1(r163,l0) a20(r140,l0) a29(r144,l0) a30(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r206,l0) conflicts: a0(r160,l0) a1(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r204,l0) conflicts: a1(r163,l0) a34(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r205,l0) conflicts: a1(r163,l0) a33(r204,l0) a35(r203,l0) a36(r202,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r203,l0) conflicts: a1(r163,l0) a34(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r202,l0) conflicts: a1(r163,l0) a34(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a37(r148,l0) conflicts: a1(r163,l0) a40(r147,l0) a39(r196,l0) a38(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r198,l0) conflicts: a1(r163,l0) a37(r148,l0) a40(r147,l0) a39(r196,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r196,l0) conflicts: a1(r163,l0) a37(r148,l0) a40(r147,l0) a38(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r147,l0) conflicts: a1(r163,l0) a37(r148,l0) a39(r196,l0) a38(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r254,l0) conflicts: a0(r160,l0) a1(r163,l0) a42(r195,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r195,l0) conflicts: a0(r160,l0) a1(r163,l0) a41(r254,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r255,l0) conflicts: a0(r160,l0) a1(r163,l0) a44(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a44(r135,l0) conflicts: a0(r160,l0) a1(r163,l0) a43(r255,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a45(r153,l0) conflicts: a0(r160,l0) a1(r163,l0) a46(r154,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a46(r154,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a47(r258,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a46(r154,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a48(r259,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a46(r154,l0) a47(r258,l0) a49(r257,l0) a50(r152,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a49(r257,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a46(r154,l0) a47(r258,l0) a48(r259,l0) a50(r152,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a50(r152,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a46(r154,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a51(r186,l0) a52(r138,l0) a81(r192,l0) a82(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a51(r186,l0) conflicts: a1(r163,l0) a50(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r138,l0) conflicts: a1(r163,l0) a50(r152,l0) a53(r185,l0) a54(r184,l0) a55(r183,l0) a56(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r185,l0) conflicts: a1(r163,l0) a52(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r184,l0) conflicts: a1(r163,l0) a52(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r183,l0) conflicts: a1(r163,l0) a52(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r151,l0) conflicts: a1(r163,l0) a52(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r179,l0) conflicts: a1(r163,l0) a58(r157,l0) a59(r149,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a58(r157,l0) conflicts: a1(r163,l0) a57(r179,l0) a59(r149,l0) a60(r161,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0) a88(r155,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a59(r149,l0) conflicts: a1(r163,l0) a57(r179,l0) a58(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r161,l0) conflicts: a1(r163,l0) a58(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r169,l0) conflicts: a1(r163,l0) a58(r157,l0) a63(r264,l0) a64(r263,l0) a62(r171,l0) a65(r170,l0) a88(r155,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a62(r171,l0) conflicts: a1(r163,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a63(r264,l0) conflicts: a1(r163,l0) a58(r157,l0) a61(r169,l0) a64(r263,l0) a62(r171,l0) a88(r155,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a64(r263,l0) conflicts: a1(r163,l0) a58(r157,l0) a61(r169,l0) a63(r264,l0) a62(r171,l0) a88(r155,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a65(r170,l0) conflicts: a1(r163,l0) a61(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a66(r165,l0) conflicts: a1(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a67(r164,l0) conflicts: a1(r163,l0) a68(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a68(r166,l0) conflicts: a1(r163,l0) a67(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a81(r192,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a82(r137,l0) conflicts: a0(r160,l0) a1(r163,l0) a45(r153,l0) a47(r258,l0) a48(r259,l0) a49(r257,l0) a50(r152,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a88(r155,l0) conflicts: a1(r163,l0) a58(r157,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0) a89(r158,l0) a97(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a89(r158,l0) conflicts: a1(r163,l0) a58(r157,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0) a88(r155,l0) a97(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a97(r156,l0) conflicts: a1(r163,l0) a58(r157,l0) a61(r169,l0) a63(r264,l0) a64(r263,l0) a88(r155,l0) a89(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a10(r230)<->a15(r227)@125:shuffle
  cp1:a0(r160)<->a17(r224)@125:shuffle
  cp2:a0(r160)<->a16(r225)@125:shuffle
  cp3:a0(r160)<->a21(r142)@1000:move
  cp4:a26(r218)<->a30(r145)@125:shuffle
  cp5:a20(r140)<->a26(r218)@125:shuffle
  cp6:a26(r218)<->a29(r144)@125:shuffle
  cp7:a24(r220)<->a25(r143)@125:shuffle
  cp8:a24(r220)<->a26(r218)@125:shuffle
  cp9:a25(r143)<->a31(r248)@125:shuffle
  cp10:a44(r135)<->a45(r153)@125:shuffle
  cp11:a66(r165)<->a68(r166)@125:shuffle
  cp12:a66(r165)<->a67(r164)@125:shuffle
  regions=5, blocks=64, points=193
    allocnos=98, copies=13, conflicts=14, ranges=123

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 26 28 27 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r160 1r163 2r246 3r146 4r245 5r141 6r243 7r234 8r241 9r240 10r230 11r232 12r239 13r235 14r231 15r227 16r225 17r224 18r223 19r222 20r140 21r142 22r221 23r215 24r220 25r143 26r218 27r214 28r213 29r144 30r145 31r248 32r206 33r204 34r205 35r203 36r202 37r148 38r198 39r196 40r147 41r254 42r195 43r255 44r135 45r153 46r154 47r258 48r259 49r257 50r152 51r186 52r138 53r185 54r184 55r183 56r151 57r179 58r157 59r149 60r161 61r169 62r171 63r264 64r263 65r170 66r165 67r164 68r166 81r192 82r137 88r155 89r158 97r156
    modified regnos: 135 137 138 140 141 142 143 144 145 146 147 148 149 151 152 153 154 155 156 157 158 160 161 163 164 165 166 169 170 171 179 183 184 185 186 192 195 196 198 202 203 204 205 206 213 214 215 218 220 221 222 223 224 225 227 230 231 232 234 235 239 240 241 243 245 246 248 254 255 257 258 259 263 264
    border:
    Pressure: GENERAL_REGS=12
    Reg 160 of GENERAL_REGS has 5 regs less
    Reg 163 of GENERAL_REGS has 5 regs less
    Reg 246 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 243 of GENERAL_REGS has 1 regs less
    Reg 234 of GENERAL_REGS has 1 regs less
    Reg 241 of GENERAL_REGS has 1 regs less
    Reg 240 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 232 of GENERAL_REGS has 1 regs less
    Reg 239 of GENERAL_REGS has 1 regs less
    Reg 235 of GENERAL_REGS has 1 regs less
    Reg 231 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 225 of GENERAL_REGS has 1 regs less
    Reg 224 of GENERAL_REGS has 1 regs less
    Reg 223 of GENERAL_REGS has 1 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 221 of GENERAL_REGS has 1 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 218 of GENERAL_REGS has 1 regs less
    Reg 214 of GENERAL_REGS has 1 regs less
    Reg 213 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 248 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 204 of GENERAL_REGS has 1 regs less
    Reg 205 of GENERAL_REGS has 1 regs less
    Reg 203 of GENERAL_REGS has 1 regs less
    Reg 202 of GENERAL_REGS has 1 regs less
    Reg 255 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 5 regs less
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 258 of GENERAL_REGS has 5 regs less
    Reg 259 of GENERAL_REGS has 5 regs less
    Reg 257 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 179 of GENERAL_REGS has 2 regs less
    Reg 157 of GENERAL_REGS has 2 regs less
    Reg 169 of GENERAL_REGS has 2 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 264 of GENERAL_REGS has 1 regs less
    Reg 263 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
      Pushing a40(r147,l0)
      Pushing a37(r148,l0)
      Pushing a60(r161,l0)
      Pushing a55(r183,l0)
      Pushing a54(r184,l0)
      Pushing a53(r185,l0)
      Pushing a51(r186,l0)
      Pushing a42(r195,l0)
      Pushing a41(r254,l0)
      Pushing a59(r149,l0)
      Pushing a56(r151,l0)
      Pushing a52(r138,l0)
      Pushing a38(r198,l0)
      Pushing a39(r196,l0)
      Pushing a3(r146,l0)
      Pushing a97(r156,l0)
      Pushing a68(r166,l0)
      Pushing a66(r165,l0)
      Pushing a65(r170,l0)
      Pushing a62(r171,l0)
      Pushing a36(r202,l0)
      Pushing a35(r203,l0)
      Pushing a34(r205,l0)
      Pushing a33(r204,l0)
      Pushing a32(r206,l0)
      Pushing a28(r213,l0)
      Pushing a27(r214,l0)
      Pushing a26(r218,l0)
      Pushing a24(r220,l0)
      Pushing a23(r215,l0)
      Pushing a22(r221,l0)
      Pushing a19(r222,l0)
      Pushing a18(r223,l0)
      Pushing a17(r224,l0)
      Pushing a16(r225,l0)
      Pushing a14(r231,l0)
      Pushing a13(r235,l0)
      Pushing a12(r239,l0)
      Pushing a11(r232,l0)
      Pushing a10(r230,l0)
      Pushing a9(r240,l0)
      Pushing a8(r241,l0)
      Pushing a7(r234,l0)
      Pushing a6(r243,l0)
      Pushing a2(r246,l0)
      Pushing a88(r155,l0)
      Pushing a67(r164,l0)
      Pushing a30(r145,l0)
      Pushing a29(r144,l0)
      Pushing a25(r143,l0)
      Pushing a21(r142,l0)
      Pushing a15(r227,l0)
      Pushing a4(r245,l0)
      Pushing a89(r158,l0)
      Pushing a63(r264,l0)
      Pushing a31(r248,l0)
      Pushing a64(r263,l0)
      Pushing a20(r140,l0)
      Pushing a5(r141,l0)
      Pushing a81(r192,l0)
      Pushing a82(r137,l0)
      Pushing a57(r179,l0)
      Pushing a61(r169,l0)
      Pushing a58(r157,l0)
      Pushing a43(r255,l0)
      Pushing a44(r135,l0)
      Pushing a46(r154,l0)(potential spill: pri=1538, cost=20000)
      Pushing a47(r258,l0)(potential spill: pri=1666, cost=20000)
      Pushing a48(r259,l0)(potential spill: pri=2727, cost=30000)
      Pushing a49(r257,l0)(potential spill: pri=3000, cost=30000)
      Pushing a50(r152,l0)
      Pushing a45(r153,l0)
      Pushing a1(r163,l0)
      Pushing a0(r160,l0)
      Popping a0(r160,l0)  -- assign reg 4
      Popping a1(r163,l0)  -- assign reg 5
      Popping a45(r153,l0)  -- assign reg 6
      Popping a50(r152,l0)  -- assign reg 7
      Popping a49(r257,l0)  -- assign reg 8
      Popping a48(r259,l0)  -- assign reg 10
      Popping a47(r258,l0)  -- assign reg 9
      Popping a46(r154,l0)  -- assign reg 11
      Popping a44(r135,l0)  -- assign reg 6
      Popping a43(r255,l0)  -- assign reg 7
      Popping a58(r157,l0)  -- assign reg 4
      Popping a61(r169,l0)  -- assign reg 6
      Popping a57(r179,l0)  -- assign reg 6
      Popping a82(r137,l0)  -- assign reg 3
      Popping a81(r192,l0)  -- assign reg 3
      Popping a5(r141,l0)  -- assign reg 2
      Popping a20(r140,l0)  -- assign reg 3
      Popping a64(r263,l0)  -- assign reg 3
      Popping a31(r248,l0)  -- assign reg 2
      Popping a63(r264,l0)  -- assign reg 2
      Popping a89(r158,l0)  -- assign reg 1
      Popping a4(r245,l0)  -- assign reg 1
      Popping a15(r227,l0)  -- assign reg 3
      Popping a21(r142,l0)  -- assign reg 4
      Popping a25(r143,l0)  -- assign reg 2
      Popping a29(r144,l0)  -- assign reg 1
      Popping a30(r145,l0)  -- assign reg 0
      Popping a67(r164,l0)  -- assign reg 3
      Popping a88(r155,l0)  -- assign reg 0
      Popping a2(r246,l0)  -- assign reg 3
      Popping a6(r243,l0)  -- assign reg 0
      Popping a7(r234,l0)  -- assign reg 0
      Popping a8(r241,l0)  -- assign reg 3
      Popping a9(r240,l0)  -- assign reg 3
      Popping a10(r230,l0)  -- assign reg 3
      Popping a11(r232,l0)  -- assign reg 0
      Popping a12(r239,l0)  -- assign reg 2
      Popping a13(r235,l0)  -- assign reg 1
      Popping a14(r231,l0)  -- assign reg 0
      Popping a16(r225,l0)  -- assign reg 3
      Popping a17(r224,l0)  -- assign reg 4
      Popping a18(r223,l0)  -- assign reg 3
      Popping a19(r222,l0)  -- assign reg 3
      Popping a22(r221,l0)  -- assign reg 3
      Popping a23(r215,l0)  -- assign reg 12
      Popping a24(r220,l0)  -- assign reg 2
      Popping a26(r218,l0)  -- assign reg 3
      Popping a27(r214,l0)  -- assign reg 1
      Popping a28(r213,l0)  -- assign reg 1
      Popping a32(r206,l0)  -- assign reg 3
      Popping a33(r204,l0)  -- assign reg 3
      Popping a34(r205,l0)  -- assign reg 2
      Popping a35(r203,l0)  -- assign reg 3
      Popping a36(r202,l0)  -- assign reg 3
      Popping a62(r171,l0)  -- assign reg 1
      Popping a65(r170,l0)  -- assign reg 3
      Popping a66(r165,l0)  -- assign reg 3
      Popping a68(r166,l0)  -- assign reg 2
      Popping a97(r156,l0)  -- assign reg 12
      Popping a3(r146,l0)  -- assign reg 6
      Popping a39(r196,l0)  -- assign reg 3
      Popping a38(r198,l0)  -- assign reg 2
      Popping a52(r138,l0)  -- assign reg 3
      Popping a56(r151,l0)  -- assign reg 2
      Popping a59(r149,l0)  -- assign reg 0
      Popping a41(r254,l0)  -- assign reg 3
      Popping a42(r195,l0)  -- assign reg 2
      Popping a51(r186,l0)  -- assign reg 3
      Popping a53(r185,l0)  -- assign reg 2
      Popping a54(r184,l0)  -- assign reg 2
      Popping a55(r183,l0)  -- assign reg 2
      Popping a60(r161,l0)  -- assign reg 3
      Popping a37(r148,l0)  -- assign reg 1
      Popping a40(r147,l0)  -- assign reg 0
Disposition:
   44:r135 l0     6   82:r137 l0     3   52:r138 l0     3   20:r140 l0     3
    5:r141 l0     2   21:r142 l0     4   25:r143 l0     2   29:r144 l0     1
   30:r145 l0     0    3:r146 l0     6   40:r147 l0     0   37:r148 l0     1
   59:r149 l0     0   56:r151 l0     2   50:r152 l0     7   45:r153 l0     6
   46:r154 l0    11   88:r155 l0     0   97:r156 l0    12   58:r157 l0     4
   89:r158 l0     1    0:r160 l0     4   60:r161 l0     3    1:r163 l0     5
   67:r164 l0     3   66:r165 l0     3   68:r166 l0     2   61:r169 l0     6
   65:r170 l0     3   62:r171 l0     1   57:r179 l0     6   55:r183 l0     2
   54:r184 l0     2   53:r185 l0     2   51:r186 l0     3   81:r192 l0     3
   42:r195 l0     2   39:r196 l0     3   38:r198 l0     2   36:r202 l0     3
   35:r203 l0     3   33:r204 l0     3   34:r205 l0     2   32:r206 l0     3
   28:r213 l0     1   27:r214 l0     1   23:r215 l0    12   26:r218 l0     3
   24:r220 l0     2   22:r221 l0     3   19:r222 l0     3   18:r223 l0     3
   17:r224 l0     4   16:r225 l0     3   15:r227 l0     3   10:r230 l0     3
   14:r231 l0     0   11:r232 l0     0    7:r234 l0     0   13:r235 l0     1
   12:r239 l0     2    9:r240 l0     3    8:r241 l0     3    6:r243 l0     0
    4:r245 l0     1    2:r246 l0     3   31:r248 l0     2   41:r254 l0     3
   43:r255 l0     7   49:r257 l0     8   47:r258 l0     9   48:r259 l0    10
   64:r263 l0     3   63:r264 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 163
insn=6, live_throughout: 13, 14, 163, dead_or_set: 164
insn=7, live_throughout: 13, 14, 163, 164, dead_or_set: 
insn=8, live_throughout: 13, 14, 163, 164, dead_or_set: 
insn=9, live_throughout: 13, 14, 163, 164, dead_or_set: 166
insn=11, live_throughout: 13, 14, 163, dead_or_set: 164, 165, 166
insn=13, live_throughout: 13, 14, 163, dead_or_set: 165
insn=14, live_throughout: 13, 14, 163, dead_or_set: 
insn=17, live_throughout: 13, 14, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 160
insn=417, live_throughout: 13, 14, 160, dead_or_set: 
insn=22, live_throughout: 13, 14, 163, dead_or_set: 
insn=24, live_throughout: 13, 14, 163, dead_or_set: 169
insn=25, live_throughout: 13, 14, 163, 169, dead_or_set: 170
insn=26, live_throughout: 13, 14, 163, 169, dead_or_set: 170
insn=27, live_throughout: 13, 14, 163, 169, dead_or_set: 
insn=29, live_throughout: 13, 14, dead_or_set: 160
insn=419, live_throughout: 13, 14, 160, dead_or_set: 
insn=32, live_throughout: 13, 14, 163, 169, dead_or_set: 
insn=46, live_throughout: 13, 14, 163, 169, dead_or_set: 263
insn=48, live_throughout: 13, 14, 163, 169, 263, dead_or_set: 264
insn=470, live_throughout: 13, 14, 163, 169, 263, 264, dead_or_set: 171
insn=35, live_throughout: 13, 14, 163, 169, 263, 264, dead_or_set: 171
insn=38, live_throughout: 13, 14, 163, 169, 263, 264, dead_or_set: 157
insn=61, live_throughout: 13, 14, 157, 163, 169, 263, 264, dead_or_set: 
insn=40, live_throughout: 13, 14, 157, 163, 169, 263, 264, dead_or_set: 
insn=41, live_throughout: 13, 14, 157, 163, 169, 263, 264, dead_or_set: 
insn=43, live_throughout: 13, 14, 157, 163, 169, 263, 264, dead_or_set: 158
insn=44, live_throughout: 13, 14, 157, 158, 163, 169, 263, 264, dead_or_set: 
insn=51, live_throughout: 13, 14, 157, 158, 163, 169, 263, 264, dead_or_set: 
insn=50, live_throughout: 13, 14, 157, 158, 163, 169, 263, 264, dead_or_set: 155, 156
insn=52, live_throughout: 13, 14, 155, 157, 158, 163, 169, 263, 264, dead_or_set: 156
insn=53, live_throughout: 13, 14, 155, 157, 158, 163, 169, 263, 264, dead_or_set: 
insn=55, live_throughout: 13, 14, 155, 157, 163, 169, 263, 264, dead_or_set: 
insn=57, live_throughout: 13, 14, 155, 163, 169, 263, 264, dead_or_set: 157
insn=58, live_throughout: 13, 14, 155, 163, 169, 263, 264, dead_or_set: 
insn=60, live_throughout: 13, 14, 163, 169, 263, 264, dead_or_set: 155, 157
insn=421, live_throughout: 13, 14, 157, 163, 169, 263, 264, dead_or_set: 
insn=64, live_throughout: 13, 157, 163, 169, dead_or_set: 
insn=68, live_throughout: 13, 157, 163, 169, dead_or_set: 0
insn=69, live_throughout: 13, 157, 163, 169, dead_or_set: 0, 14
insn=70, live_throughout: 13, 157, 163, dead_or_set: 161, 169
insn=71, live_throughout: 13, 157, 163, dead_or_set: 161
insn=72, live_throughout: 13, 157, 163, dead_or_set: 
insn=74, live_throughout: 13, 157, 163, dead_or_set: 0
insn=77, live_throughout: 0, 13, 157, 163, dead_or_set: 179
insn=75, live_throughout: 13, 157, 163, 179, dead_or_set: 0, 14
insn=76, live_throughout: 13, 157, 163, 179, dead_or_set: 0, 149
insn=79, live_throughout: 13, 149, 157, 163, 179, dead_or_set: 
insn=78, live_throughout: 13, 24, 157, 163, 179, dead_or_set: 149
insn=80, live_throughout: 13, 157, 163, 179, dead_or_set: 
insn=83, live_throughout: 13, 163, 179, dead_or_set: 0
insn=84, live_throughout: 13, 163, 179, dead_or_set: 0, 14
insn=86, live_throughout: 13, 163, dead_or_set: 160, 179
insn=87, live_throughout: 13, 160, 163, dead_or_set: 
insn=88, live_throughout: 13, 160, 163, dead_or_set: 
insn=424, live_throughout: 13, 163, dead_or_set: 
insn=92, live_throughout: 13, 157, 163, 179, dead_or_set: 
insn=94, live_throughout: 13, 163, 179, dead_or_set: 0, 157
insn=95, live_throughout: 13, 163, 179, dead_or_set: 0, 14
insn=97, live_throughout: 13, 163, dead_or_set: 138, 179
insn=98, live_throughout: 13, 138, 163, dead_or_set: 151
insn=99, live_throughout: 13, 138, 151, 163, dead_or_set: 
insn=100, live_throughout: 13, 138, 151, 163, dead_or_set: 
insn=102, live_throughout: 13, 138, 163, dead_or_set: 151, 183
insn=103, live_throughout: 13, 138, 163, dead_or_set: 183
insn=104, live_throughout: 13, 138, 163, dead_or_set: 
insn=106, live_throughout: 13, 138, 163, dead_or_set: 152
insn=426, live_throughout: 13, 138, 152, 163, dead_or_set: 
insn=109, live_throughout: 13, 138, 163, dead_or_set: 
insn=111, live_throughout: 13, 138, 163, dead_or_set: 184
insn=112, live_throughout: 13, 138, 163, dead_or_set: 184, 185
insn=113, live_throughout: 13, 138, 163, dead_or_set: 152, 185
insn=114, live_throughout: 13, 138, 152, 163, dead_or_set: 
insn=116, live_throughout: 13, 152, 163, dead_or_set: 138, 186
insn=117, live_throughout: 13, 152, 163, dead_or_set: 186
insn=118, live_throughout: 13, 152, 163, dead_or_set: 
insn=121, live_throughout: 13, 152, 163, dead_or_set: 153
insn=120, live_throughout: 13, 152, 153, 163, dead_or_set: 160
insn=165, live_throughout: 13, 152, 153, 160, 163, dead_or_set: 257
insn=142, live_throughout: 13, 152, 153, 160, 163, 257, dead_or_set: 259
insn=140, live_throughout: 13, 152, 153, 160, 163, 257, 259, dead_or_set: 258
insn=428, live_throughout: 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 
insn=124, live_throughout: 13, 163, dead_or_set: 
insn=127, live_throughout: 13, 163, dead_or_set: 0
insn=129, live_throughout: 0, 13, 163, dead_or_set: 160
insn=128, live_throughout: 13, 160, 163, dead_or_set: 0, 14
insn=430, live_throughout: 13, 160, 163, dead_or_set: 
insn=167, live_throughout: 0, 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 
insn=135, live_throughout: 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 0, 1, 14
insn=145, live_throughout: 0, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 1
insn=146, live_throughout: 0, 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 2
insn=410, live_throughout: 0, 1, 2, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 3
insn=137, live_throughout: 0, 1, 2, 3, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 154
insn=138, live_throughout: 0, 1, 2, 3, 13, 152, 153, 154, 160, 163, 257, 258, 259, dead_or_set: 
insn=141, live_throughout: 0, 1, 2, 3, 13, 152, 153, 154, 163, 257, 258, 259, dead_or_set: 
insn=143, live_throughout: 0, 1, 2, 3, 13, 152, 153, 154, 163, 257, 258, 259, dead_or_set: 
insn=148, live_throughout: 13, 152, 153, 154, 163, 257, 258, 259, dead_or_set: 0, 1, 2, 3, 14
insn=150, live_throughout: 13, 152, 153, 154, 163, 257, 258, 259, dead_or_set: 0, 160
insn=151, live_throughout: 13, 152, 153, 154, 160, 163, 257, 258, 259, dead_or_set: 
insn=155, live_throughout: 13, 153, 160, 163, dead_or_set: 1, 154
insn=154, live_throughout: 1, 13, 153, 160, 163, dead_or_set: 0
insn=156, live_throughout: 13, 153, 160, 163, dead_or_set: 0, 1, 14
insn=432, live_throughout: 13, 153, 160, 163, dead_or_set: 
insn=159, live_throughout: 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 
insn=161, live_throughout: 13, 152, 160, 163, 257, 258, 259, dead_or_set: 153
insn=162, live_throughout: 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 
insn=134, live_throughout: 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 1
insn=166, live_throughout: 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 137
insn=133, live_throughout: 1, 13, 137, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 0
insn=168, live_throughout: 0, 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 137, 192
insn=169, live_throughout: 0, 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 192
insn=170, live_throughout: 0, 1, 13, 152, 153, 160, 163, 257, 258, 259, dead_or_set: 
insn=173, live_throughout: 13, 153, 160, 163, dead_or_set: 
insn=174, live_throughout: 13, 153, 160, 163, dead_or_set: 
insn=175, live_throughout: 13, 153, 160, 163, dead_or_set: 
insn=177, live_throughout: 13, 160, 163, dead_or_set: 135, 153
insn=401, live_throughout: 13, 135, 160, 163, dead_or_set: 255
insn=434, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 
insn=197, live_throughout: 1, 13, 135, 160, 163, 255, dead_or_set: 
insn=182, live_throughout: 1, 13, 135, 160, 163, 255, dead_or_set: 0
insn=184, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 0, 1, 14
insn=406, live_throughout: 0, 13, 135, 160, 163, 255, dead_or_set: 1
insn=186, live_throughout: 0, 1, 13, 135, 160, 163, 255, dead_or_set: 
insn=187, live_throughout: 0, 1, 13, 135, 160, 163, 255, dead_or_set: 
insn=191, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 0, 1, 14
insn=192, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 
insn=195, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 
insn=183, live_throughout: 13, 135, 160, 163, 255, dead_or_set: 1
insn=198, live_throughout: 1, 13, 135, 160, 163, 255, dead_or_set: 
insn=194, live_throughout: 1, 13, 24, 160, 163, 255, dead_or_set: 135
insn=199, live_throughout: 1, 13, 135, 160, 163, 255, dead_or_set: 
insn=201, live_throughout: 13, 160, 163, dead_or_set: 0
insn=202, live_throughout: 13, 160, 163, dead_or_set: 0, 14
insn=468, live_throughout: 13, 160, 163, dead_or_set: 254
insn=469, live_throughout: 13, 160, 163, 254, dead_or_set: 195
insn=205, live_throughout: 13, 160, 163, dead_or_set: 195, 254
insn=436, live_throughout: 13, 160, 163, dead_or_set: 
insn=208, live_throughout: 13, 163, dead_or_set: 
insn=210, live_throughout: 13, 163, dead_or_set: 196
insn=212, live_throughout: 13, 163, 196, dead_or_set: 198
insn=214, live_throughout: 13, 163, dead_or_set: 147, 148, 196, 198
insn=215, live_throughout: 13, 163, dead_or_set: 160
insn=216, live_throughout: 13, 160, 163, dead_or_set: 
insn=220, live_throughout: 13, 160, 163, dead_or_set: 0
insn=221, live_throughout: 13, 160, 163, dead_or_set: 0, 14
insn=222, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=223, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=224, live_throughout: 13, 14, 163, dead_or_set: 
insn=226, live_throughout: 13, 14, 163, dead_or_set: 140
insn=227, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=228, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=233, live_throughout: 13, 14, 163, dead_or_set: 205
insn=467, live_throughout: 13, 14, 163, 205, dead_or_set: 202
insn=231, live_throughout: 13, 14, 163, 205, dead_or_set: 202, 203
insn=232, live_throughout: 13, 14, 163, 205, dead_or_set: 203, 204
insn=234, live_throughout: 13, 14, 163, dead_or_set: 160, 204, 205
insn=466, live_throughout: 13, 14, 160, 163, dead_or_set: 206
insn=236, live_throughout: 13, 14, 160, 163, dead_or_set: 206
insn=237, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=440, live_throughout: 13, 163, dead_or_set: 
insn=241, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=243, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=244, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=398, live_throughout: 13, 14, 140, 163, dead_or_set: 248
insn=247, live_throughout: 13, 14, 140, 163, 248, dead_or_set: 145
insn=248, live_throughout: 13, 14, 140, 145, 163, 248, dead_or_set: 
insn=249, live_throughout: 13, 14, 140, 145, 163, 248, dead_or_set: 
insn=255, live_throughout: 13, 14, 140, 145, 163, 248, dead_or_set: 144
insn=256, live_throughout: 13, 14, 140, 144, 145, 163, 248, dead_or_set: 
insn=257, live_throughout: 13, 14, 140, 144, 145, 163, 248, dead_or_set: 
insn=263, live_throughout: 13, 14, 140, 144, 145, 163, dead_or_set: 143, 248
insn=264, live_throughout: 13, 14, 140, 143, 144, 145, 163, dead_or_set: 
insn=265, live_throughout: 13, 14, 140, 143, 144, 145, 163, dead_or_set: 
insn=272, live_throughout: 13, 14, 143, 163, dead_or_set: 140, 144, 145, 218
insn=465, live_throughout: 13, 14, 143, 163, 218, dead_or_set: 213
insn=268, live_throughout: 13, 14, 143, 163, 218, dead_or_set: 213, 214
insn=269, live_throughout: 13, 14, 143, 163, 218, dead_or_set: 214, 215
insn=274, live_throughout: 13, 14, 163, 215, dead_or_set: 143, 218, 220
insn=275, live_throughout: 13, 14, 163, dead_or_set: 142, 215, 220
insn=464, live_throughout: 13, 14, 142, 163, dead_or_set: 221
insn=277, live_throughout: 13, 14, 142, 163, dead_or_set: 221
insn=278, live_throughout: 13, 14, 142, 163, dead_or_set: 
insn=280, live_throughout: 13, 163, dead_or_set: 160
insn=442, live_throughout: 13, 160, 163, dead_or_set: 
insn=283, live_throughout: 13, 14, 142, 163, dead_or_set: 
insn=285, live_throughout: 13, 14, 163, dead_or_set: 142, 160
insn=444, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=288, live_throughout: 13, 14, 140, 163, dead_or_set: 
insn=290, live_throughout: 13, 14, 163, dead_or_set: 140
insn=291, live_throughout: 13, 14, 163, dead_or_set: 
insn=293, live_throughout: 13, 163, dead_or_set: 160
insn=446, live_throughout: 13, 160, 163, dead_or_set: 
insn=296, live_throughout: 13, 14, 163, dead_or_set: 
insn=300, live_throughout: 13, 14, 163, dead_or_set: 224
insn=463, live_throughout: 13, 14, 163, 224, dead_or_set: 222
insn=299, live_throughout: 13, 14, 163, 224, dead_or_set: 222, 223
insn=301, live_throughout: 13, 14, 163, 224, dead_or_set: 223, 225
insn=302, live_throughout: 13, 14, 163, dead_or_set: 160, 224, 225
insn=303, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=305, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=306, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=308, live_throughout: 13, 14, 160, 163, dead_or_set: 227
insn=313, live_throughout: 13, 14, 160, 163, dead_or_set: 227, 230
insn=314, live_throughout: 13, 14, 160, 163, 230, dead_or_set: 
insn=316, live_throughout: 13, 163, dead_or_set: 160
insn=448, live_throughout: 13, 160, 163, dead_or_set: 
insn=319, live_throughout: 13, 14, 160, 163, 230, dead_or_set: 
insn=329, live_throughout: 13, 14, 160, 163, 230, dead_or_set: 235
insn=333, live_throughout: 13, 14, 160, 163, 230, 235, dead_or_set: 239
insn=462, live_throughout: 13, 14, 160, 163, 230, 235, 239, dead_or_set: 231
insn=322, live_throughout: 13, 14, 160, 163, 230, 235, 239, dead_or_set: 231
insn=335, live_throughout: 13, 14, 160, 163, 230, dead_or_set: 235, 239
insn=323, live_throughout: 13, 14, 24, 163, 230, dead_or_set: 160
insn=461, live_throughout: 13, 14, 24, 163, 230, dead_or_set: 232
insn=325, live_throughout: 13, 14, 24, 163, 230, dead_or_set: 232
insn=327, live_throughout: 13, 14, 24, 163, dead_or_set: 230
insn=336, live_throughout: 13, 14, 163, dead_or_set: 
insn=346, live_throughout: 13, 14, 163, dead_or_set: 245
insn=460, live_throughout: 13, 14, 163, 245, dead_or_set: 240
insn=339, live_throughout: 13, 14, 163, 245, dead_or_set: 240, 241
insn=340, live_throughout: 13, 14, 163, 245, dead_or_set: 141, 241
insn=459, live_throughout: 13, 14, 141, 163, 245, dead_or_set: 234
insn=342, live_throughout: 13, 14, 141, 163, 245, dead_or_set: 234
insn=458, live_throughout: 13, 14, 141, 163, 245, dead_or_set: 243
insn=344, live_throughout: 13, 14, 141, 163, 245, dead_or_set: 243
insn=347, live_throughout: 13, 14, 163, dead_or_set: 141, 146, 245
insn=348, live_throughout: 13, 14, 163, dead_or_set: 
insn=350, live_throughout: 13, 14, 163, dead_or_set: 246
insn=351, live_throughout: 13, 14, 163, dead_or_set: 246
insn=352, live_throughout: 13, 14, 163, dead_or_set: 
insn=354, live_throughout: 13, 14, dead_or_set: 160
insn=450, live_throughout: 13, 14, 160, dead_or_set: 
insn=357, live_throughout: 13, 163, dead_or_set: 
insn=359, live_throughout: 13, 163, dead_or_set: 0
insn=360, live_throughout: 13, 163, dead_or_set: 0, 14
insn=362, live_throughout: 13, 14, 163, dead_or_set: 0, 160
insn=363, live_throughout: 13, 14, 160, 163, dead_or_set: 
insn=365, live_throughout: 13, 163, dead_or_set: 160
insn=366, live_throughout: 13, 160, 163, dead_or_set: 
insn=368, live_throughout: 13, 160, dead_or_set: 0, 163
insn=369, live_throughout: 13, 160, dead_or_set: 0, 14
insn=370, live_throughout: 13, 14, 160, dead_or_set: 
insn=386, live_throughout: 13, 14, dead_or_set: 0, 160
insn=392, live_throughout: 0, 13, 14, dead_or_set: 
insn=439, live_throughout: 13, 163, dead_or_set: 
insn=377, live_throughout: 13, 163, dead_or_set: 160
insn=452, live_throughout: 13, 160, 163, dead_or_set: 
insn=380, live_throughout: 13, 163, dead_or_set: 
insn=382, live_throughout: 13, 163, dead_or_set: 160
insn=454, live_throughout: 13, 160, 163, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 166 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 78 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 470 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 77 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 111 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 469 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 210 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 212 (nil))
init_insns for 202: (insn_list:REG_DEP_TRUE 467 (nil))
init_insns for 205: (insn_list:REG_DEP_TRUE 233 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 466 (nil))
init_insns for 213: (insn_list:REG_DEP_TRUE 465 (nil))
init_insns for 221: (insn_list:REG_DEP_TRUE 464 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 463 (nil))
init_insns for 224: (insn_list:REG_DEP_TRUE 300 (nil))
init_insns for 231: (insn_list:REG_DEP_TRUE 462 (nil))
init_insns for 232: (insn_list:REG_DEP_TRUE 461 (nil))
init_insns for 234: (insn_list:REG_DEP_TRUE 459 (nil))
init_insns for 235: (insn_list:REG_DEP_TRUE 329 (nil))
init_insns for 239: (insn_list:REG_DEP_TRUE 333 (nil))
init_insns for 240: (insn_list:REG_DEP_TRUE 460 (nil))
init_insns for 243: (insn_list:REG_DEP_TRUE 458 (nil))
init_insns for 246: (insn_list:REG_DEP_TRUE 350 (nil))
init_insns for 254: (insn_list:REG_DEP_TRUE 468 (nil))
init_insns for 255: (insn_list:REG_DEP_TRUE 401 (nil))
init_insns for 257: (insn_list:REG_DEP_TRUE 165 (nil))
init_insns for 258: (insn_list:REG_DEP_TRUE 140 (nil))
init_insns for 259: (insn_list:REG_DEP_TRUE 142 (nil))
init_insns for 263: (insn_list:REG_DEP_TRUE 46 (nil))
init_insns for 264: (insn_list:REG_DEP_TRUE 48 (nil))
changing reg in insn 194
changing reg in insn 177
changing reg in insn 198
changing reg in insn 194
changing reg in insn 183
changing reg in insn 166
changing reg in insn 168
changing reg in insn 133
changing reg in insn 97
changing reg in insn 116
changing reg in insn 98
changing reg in insn 226
changing reg in insn 272
changing reg in insn 290
changing reg in insn 243
changing reg in insn 227
changing reg in insn 340
changing reg in insn 347
changing reg in insn 342
changing reg in insn 344
changing reg in insn 275
changing reg in insn 285
changing reg in insn 277
changing reg in insn 277
changing reg in insn 263
changing reg in insn 274
changing reg in insn 264
changing reg in insn 255
changing reg in insn 272
changing reg in insn 256
changing reg in insn 247
changing reg in insn 272
changing reg in insn 248
changing reg in insn 347
changing reg in insn 214
changing reg in insn 214
changing reg in insn 76
changing reg in insn 79
changing reg in insn 78
changing reg in insn 98
changing reg in insn 102
changing reg in insn 99
changing reg in insn 113
changing reg in insn 106
changing reg in insn 145
changing reg in insn 161
changing reg in insn 121
changing reg in insn 142
changing reg in insn 169
changing reg in insn 134
changing reg in insn 177
changing reg in insn 161
changing reg in insn 137
changing reg in insn 155
changing reg in insn 50
changing reg in insn 60
changing reg in insn 57
changing reg in insn 50
changing reg in insn 52
changing reg in insn 60
changing reg in insn 38
changing reg in insn 94
changing reg in insn 74
changing reg in insn 50
changing reg in insn 57
changing reg in insn 43
changing reg in insn 40
changing reg in insn 43
changing reg in insn 50
changing reg in insn 362
changing reg in insn 150
changing reg in insn 86
changing reg in insn 382
changing reg in insn 377
changing reg in insn 365
changing reg in insn 354
changing reg in insn 316
changing reg in insn 302
changing reg in insn 293
changing reg in insn 285
changing reg in insn 280
changing reg in insn 234
changing reg in insn 215
changing reg in insn 129
changing reg in insn 120
changing reg in insn 29
changing reg in insn 19
changing reg in insn 386
changing reg in insn 173
changing reg in insn 323
changing reg in insn 305
changing reg in insn 236
changing reg in insn 222
changing reg in insn 87
changing reg in insn 236
changing reg in insn 70
changing reg in insn 71
changing reg in insn 2
changing reg in insn 347
changing reg in insn 329
changing reg in insn 333
changing reg in insn 342
changing reg in insn 327
changing reg in insn 368
changing reg in insn 359
changing reg in insn 351
changing reg in insn 350
changing reg in insn 346
changing reg in insn 344
changing reg in insn 325
changing reg in insn 323
changing reg in insn 322
changing reg in insn 308
changing reg in insn 300
changing reg in insn 398
changing reg in insn 233
changing reg in insn 226
changing reg in insn 35
changing reg in insn 6
changing reg in insn 350
changing reg in insn 333
changing reg in insn 329
changing reg in insn 300
changing reg in insn 233
changing reg in insn 6
changing reg in insn 11
changing reg in insn 7
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 9
changing reg in insn 11
changing reg in insn 24
changing reg in insn 48
changing reg in insn 46
changing reg in insn 70
changing reg in insn 38
changing reg in insn 25
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 470
changing reg in insn 35
changing reg in insn 77
changing reg in insn 97
changing reg in insn 86
changing reg in insn 78
changing reg in insn 76
changing reg in insn 102
changing reg in insn 103
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 168
changing reg in insn 169
changing reg in insn 469
changing reg in insn 205
changing reg in insn 210
changing reg in insn 212
changing reg in insn 214
changing reg in insn 214
changing reg in insn 212
changing reg in insn 214
changing reg in insn 467
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 234
changing reg in insn 233
changing reg in insn 234
changing reg in insn 466
changing reg in insn 236
changing reg in insn 465
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 275
changing reg in insn 272
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 464
changing reg in insn 277
changing reg in insn 463
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 300
changing reg in insn 302
changing reg in insn 301
changing reg in insn 302
changing reg in insn 308
changing reg in insn 313
changing reg in insn 313
changing reg in insn 313
changing reg in insn 327
changing reg in insn 462
changing reg in insn 322
changing reg in insn 461
changing reg in insn 325
changing reg in insn 459
changing reg in insn 342
changing reg in insn 329
changing reg in insn 335
changing reg in insn 333
changing reg in insn 335
changing reg in insn 460
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 458
changing reg in insn 344
changing reg in insn 346
changing reg in insn 347
changing reg in insn 350
changing reg in insn 351
changing reg in insn 398
changing reg in insn 263
changing reg in insn 255
changing reg in insn 247
changing reg in insn 468
changing reg in insn 205
changing reg in insn 401
changing reg in insn 182
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 143
changing reg in insn 46
changing reg in insn 50
changing reg in insn 50
changing reg in insn 48
changing reg in insn 50
Spilling for insn 35.
Spilling for insn 78.
Spilling for insn 141.
Spilling for insn 143.
Spilling for insn 205.
Spilling for insn 322.
Spilling for insn 335.
Spilling for insn 323.
Spilling for insn 325.
Spilling for insn 327.
Spilling for insn 342.
Spilling for insn 344.
Spilling for insn 347.
Using reg 0 for reload 0

Reloads for insn # 35
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 500 [0x1f4])) [0 <variable>.destroy+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 500 [0x1f4])) [0 <variable>.destroy+0 S4 A32])

Reloads for insn # 78
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])

Reloads for insn # 141
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 143
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 205
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [254])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [254])
                                                        (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])

Reloads for insn # 322
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])

Reloads for insn # 335
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 323
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 216 [0xd8])) [0 <variable>.hw.D.23168.D.23159.config_base+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 216 [0xd8])) [0 <variable>.hw.D.23168.D.23159.config_base+0 S4 A64])

Reloads for insn # 325
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 200 [0xc8])) [0 <variable>.hw.D.23168.D.23159.config+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 200 [0xc8])) [0 <variable>.hw.D.23168.D.23159.config+0 S8 A64])

Reloads for insn # 327
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 220 [0xdc])) [0 <variable>.hw.D.23168.D.23159.event_base+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (const_int 220 [0xdc])) [0 <variable>.hw.D.23168.D.23159.event_base+0 S4 A32])

Reloads for insn # 342
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (reg:SI 0 r0 [234])) [0 <variable>.hw.sample_period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (reg:SI 0 r0 [234])) [0 <variable>.hw.sample_period+0 S8 A64])

Reloads for insn # 344
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (reg:SI 0 r0 [243])) [0 <variable>.hw.last_period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                        (reg:SI 0 r0 [243])) [0 <variable>.hw.last_period+0 S8 A64])

Reloads for insn # 347
Reload 0: reload_in (SI) = (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                    (const_int 304 [0x130]))
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1), can't combine
	reload_in_reg: (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                                                    (const_int 304 [0x130]))
	reload_reg_rtx: (reg:SI 0 r0)
deleting insn with uid = 76.
deleting insn with uid = 285.


try_optimize_cfg iteration 1

Forwarding edge 15->16 to 36 failed.
Edge 31->33 redirected to 34
merging block 33 into block 32
deleting insn with uid = 192.
deleting insn with uid = 193.
Merged 32 and 33 without moving.
Forwarding edge 39->40 to 62 failed.
Edge 45->47 redirected to 51
Deleting block 47.
deleting insn with uid = 283.
deleting insn with uid = 284.
deleting insn with uid = 444.
deleting insn with uid = 445.
deleting block 47


try_optimize_cfg iteration 2

Forwarding edge 15->16 to 36 failed.
Forwarding edge 39->40 to 62 failed.


try_optimize_cfg iteration 1

Forwarding edge 15->16 to 36 failed.
Forwarding edge 39->40 to 62 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 128.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 202.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 360.
verify found no changes in insn with uid = 369.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 62 n_edges 93 count 131 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 62 n_edges 93 count 156 (  2.5)


armpmu_event_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={36d,35u} r1={29d,14u} r2={31d,21u} r3={43d,40u,1d} r4={21d,15u,2d} r5={1d,21u,5d} r6={7d,16u,1d} r7={4d,2u} r8={1d,1u,1d} r9={1d,1u} r10={1d,2u} r11={1d,1u} r12={17d,2u} r13={1d,77u} r14={15d,1u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={49d,32u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2089{1798d,281u,10e} in 217{203 regular + 14 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/perf_event.c:544 (set (reg/v/f:SI 5 r5 [orig:163 event ] [163])
        (reg:SI 0 r0 [ event ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 7 2 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 arch/arm/kernel/perf_event.c:547 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 394 2 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 394 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 394 9 3 NOTE_INSN_DELETED)

(insn 9 12 11 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 2 r2 [166])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 11 9 13 3 arch/arm/kernel/perf_event.c:547 (set (reg:SI 3 r3 [165])
        (ashift:SI (reg:SI 2 r2 [166])
            (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 3 r3 [orig:164 <variable>.attr.type ] [164]))
        (nil)))

(insn 13 11 14 3 arch/arm/kernel/perf_event.c:547 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [165])
                        (const_int 25 [0x19]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 14 13 17 3 arch/arm/kernel/perf_event.c:547 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 17 14 18 4 165 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 417 4 arch/arm/kernel/perf_event.c:554 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -2 [0xfffffffffffffffe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2 [0xfffffffffffffffe])
        (nil)))

(jump_insn 417 19 418 4 (set (pc)
        (label_ref 370)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 61)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  61 [100.0%] 

(barrier 418 417 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
(code_label 22 418 23 5 166 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 6 r6 [169])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 25 24 26 5 arch/arm/kernel/perf_event.c:557 (set (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [169]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 26 25 27 5 arch/arm/kernel/perf_event.c:557 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:170 armpmu ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 27 26 28 5 arch/arm/kernel/perf_event.c:557 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [10.1%]  (fallthru)
;; Succ edge  7 [89.9%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  5 [10.1%]  (fallthru)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 419 6 arch/arm/kernel/perf_event.c:558 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -19 [0xffffffffffffffed])
        (nil)))

(jump_insn 419 29 420 6 (set (pc)
        (label_ref 370)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 61)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  61 [100.0%] 

(barrier 420 419 32)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  5 [89.9%] 
(code_label 32 420 33 7 168 "" [1 uses])

(note 33 32 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 33 48 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 3 r3 [263])
        (reg/f:SI 6 r6 [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 48 46 470 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (set (reg/f:SI 2 r2 [264])
        (plus:SI (reg/f:SI 6 r6 [169])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn 470 48 35 7 arch/arm/kernel/perf_event.c:560 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
        (nil)))

(insn 35 470 38 7 arch/arm/kernel/perf_event.c:560 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 500 [0x1f4])) [0 <variable>.destroy+0 S4 A32])
        (reg/f:SI 1 r1 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>)
        (nil)))

(insn 38 35 61 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:215 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 12) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%]  (dfs_back)
(code_label 61 38 39 8 172 "" [1 uses])

(note 39 61 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 41 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 41 40 42 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 8 -> ( 9 13)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  9 [95.5%]  (fallthru)
;; Succ edge  13 [4.5%]  (loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  8 [95.5%]  (fallthru)
(note 42 41 43 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:SI 1 r1 [orig:158 D.26586 ] [158])
        (plus:SI (reg/v:SI 4 r4 [orig:157 c ] [157])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 44 43 51 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:117 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2611313)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  10 [86.0%]  (dfs_back)
(code_label 51 44 45 10 170 "" [1 uses])

(note 45 51 50 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 50 45 52 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:120 (parallel [
            (set (reg/v:SI 12 ip [orig:156 res ] [156])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 0 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (reg/v:SI 0 r0 [orig:155 oldval ] [155])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=&r") 1 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_cmpxchg
ldrex	%1, [%3]
mov	%0, #0
teq	%1, %4
strexeq %0, %5, [%3]
") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [264])
                        (reg/v:SI 4 r4 [orig:157 c ] [157])
                        (reg:SI 1 r1 [orig:158 D.26586 ] [158])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [263])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2611698))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 52 50 53 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:156 res ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 53 52 54 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:128 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 10 -> ( 10 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  10 [86.0%]  (dfs_back)
;; Succ edge  11 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [14.0%]  (fallthru,loop_exit)
(note 54 53 55 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 57 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:130 (parallel [
            (asm_operands/v ("dmb") ("") 0 []
                 [] 2612977)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 57 55 58 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:155 oldval ] [155])
            (reg/v:SI 4 r4 [orig:157 c ] [157]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:216 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 224)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1400 [0x578])
        (nil)))
;; End of basic block 11 -> ( 12 38)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  12 [86.0%]  (fallthru)
;; Succ edge  38 [14.0%]  (loop_exit)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  11 [86.0%]  (fallthru)
(note 59 58 60 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 421 12 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:132 (set (reg/v:SI 4 r4 [orig:157 c ] [157])
        (reg/v:SI 0 r0 [orig:155 oldval ] [155])) 167 {*arm_movsi_insn} (nil))

(jump_insn 421 60 422 12 (set (pc)
        (label_ref 61)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 8)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (dfs_back)

(barrier 422 421 64)

;; Start of basic block ( 8) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [4.5%]  (loop_exit)
(code_label 64 422 65 13 169 "" [1 uses])

(note 65 64 68 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 68 65 69 13 arch/arm/kernel/perf_event.c:563 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(call_insn 69 68 70 13 arch/arm/kernel/perf_event.c:563 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_lock") [flags 0x41] <function_decl 0x10d7c200 mutex_lock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 70 69 71 13 arch/arm/kernel/perf_event.c:564 (set (reg:SI 3 r3 [orig:161 D.25549 ] [161])
        (mem/v:SI (plus:SI (reg/f:SI 6 r6 [169])
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 S4 A32])
        (nil)))

(insn 71 70 72 13 arch/arm/kernel/perf_event.c:564 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:161 D.25549 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 13 arch/arm/kernel/perf_event.c:564 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 13 -> ( 14 36)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  14 [29.0%]  (fallthru)
;; Succ edge  36 [71.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [29.0%]  (fallthru)
(note 73 72 74 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 77 14 arch/arm/kernel/perf_event.c:398 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 77 74 75 14 arch/arm/kernel/perf_event.c:398 (set (reg/f:SI 6 r6 [179])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 75 77 79 14 arch/arm/kernel/perf_event.c:398 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("reserve_pmu") [flags 0x41] <function_decl 0x1147bb00 reserve_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 79 75 78 14 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 78 79 80 14 arch/arm/kernel/perf_event.c:398 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg/f:SI 0 r0 [orig:149 pmu_device.341 ] [149])) 167 {*arm_movsi_insn} (nil))

(jump_insn 80 78 81 14 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 14 -> ( 15 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  15 [0.0%]  (fallthru)
;; Succ edge  17 [100.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [0.0%]  (fallthru)
(note 81 80 83 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 83 81 84 15 arch/arm/kernel/perf_event.c:400 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x115c5640>)
        (nil)))

(call_insn 84 83 86 15 arch/arm/kernel/perf_event.c:400 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 86 84 87 15 include/linux/err.h:29 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn 87 86 88 15 arch/arm/kernel/perf_event.c:568 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 88 87 423 15 arch/arm/kernel/perf_event.c:568 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 216)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 15 -> ( 16 37)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  16 (fallthru)
;; Succ edge  37 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 (fallthru)
(note 423 88 424 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(jump_insn 424 423 425 16 (set (pc)
        (label_ref 208)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 36)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  36 [100.0%] 

(barrier 425 424 92)

;; Start of basic block ( 14) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [100.0%] 
(code_label 92 425 93 17 174 "" [1 uses])

(note 93 92 94 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 17 arch/arm/kernel/perf_event.c:404 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 c ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 95 94 97 17 arch/arm/kernel/perf_event.c:404 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_pmu") [flags 0x41] <function_decl 0x1147bc00 init_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 97 95 98 17 arch/arm/kernel/perf_event.c:406 (set (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [179])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(insn 98 97 99 17 arch/arm/kernel/perf_event.c:406 (set (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 92 [0x5c])) [0 <variable>.dev.platform_data+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 99 98 100 17 arch/arm/kernel/perf_event.c:407 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:151 plat ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 100 99 101 17 arch/arm/kernel/perf_event.c:407 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 17 -> ( 18 20)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  18 [85.0%]  (fallthru)
;; Succ edge  20 [15.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  17 [85.0%]  (fallthru)
(note 101 100 102 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 103 18 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
        (mem/s/f/j:SI (reg/v/f:SI 2 r2 [orig:151 plat ] [151]) [0 <variable>.handle_irq+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 103 102 104 18 arch/arm/kernel/perf_event.c:407 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:183 <variable>.handle_irq ] [183])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 104 103 105 18 arch/arm/kernel/perf_event.c:407 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 3 [r3] 5 [r5] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  19 [85.0%]  (fallthru)
;; Succ edge  20 [15.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  18 [85.0%]  (fallthru)
(note 105 104 106 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 426 19 arch/arm/kernel/perf_event.c:408 (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
        (symbol_ref:SI ("armpmu_platform_irq") [flags 0x3] <function_decl 0x114a1e80 armpmu_platform_irq>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("armpmu_platform_irq") [flags 0x3] <function_decl 0x114a1e80 armpmu_platform_irq>)
        (nil)))

(jump_insn 426 106 427 19 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 427 426 109)

;; Start of basic block ( 17 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 7 [r7]
;; live  in  	 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 7 [r7]
;; live  kill	

;; Pred edge  17 [15.0%] 
;; Pred edge  18 [15.0%] 
(code_label 109 427 110 20 176 "" [2 uses])

(note 110 109 111 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 20 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [184])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 112 111 113 20 arch/arm/kernel/perf_event.c:410 (set (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [184]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 113 112 114 20 arch/arm/kernel/perf_event.c:410 (set (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:185 armpmu ] [185])
                (const_int 8 [0x8])) [0 <variable>.handle_irq+0 S4 A64])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 114 113 115 21 177 "" [1 uses])

(note 115 114 116 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 116 115 117 21 arch/arm/kernel/perf_event.c:412 (set (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:138 pmu_device.961 ] [138])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 117 116 118 21 arch/arm/kernel/perf_event.c:412 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:186 <variable>.num_resources ] [186])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 118 117 119 21 arch/arm/kernel/perf_event.c:412 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 124)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 21 -> ( 23 22)
;; lr  out 	 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  23 [0.0%] 
;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  in  	 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	

;; Pred edge  21 [100.0%]  (fallthru)
(note 119 118 121 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 121 119 120 22 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 120 121 165 22 arch/arm/kernel/perf_event.c:412 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(insn 165 120 142 22 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 8 r8 [257])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 142 165 140 22 include/linux/interrupt.h:135 (set (reg:SI 10 sl [259])
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 140 142 428 22 include/linux/interrupt.h:135 (set (reg/f:SI 9 r9 [258])
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(jump_insn 428 140 429 22 (set (pc)
        (label_ref 162)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 429 428 124)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  21 [0.0%] 
(code_label 124 429 125 23 178 "" [1 uses])

(note 125 124 127 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 127 125 129 23 arch/arm/kernel/perf_event.c:413 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x115c5690>)
        (nil)))

(insn 129 127 128 23 arch/arm/kernel/perf_event.c:414 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -19 [0xffffffffffffffed])) 167 {*arm_movsi_insn} (nil))

(call_insn 128 129 430 23 arch/arm/kernel/perf_event.c:413 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 430 128 431 23 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 37)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 431 430 167)

;; Start of basic block ( 28) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  28 [95.5%] 
(code_label 167 431 132 24 182 "" [1 uses])

(note 132 167 136 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 136 132 135 24 NOTE_INSN_DELETED)

(call_insn 135 136 145 24 arch/arm/kernel/perf_event.c:418 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 145 135 146 24 include/linux/interrupt.h:135 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:152 handle_irq ] [152])) 167 {*arm_movsi_insn} (nil))

(insn 146 145 410 24 include/linux/interrupt.h:135 (set (reg:SI 2 r2)
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 410 146 137 24 include/linux/interrupt.h:135 (set (reg:SI 3 r3)
        (const_int 2080 [0x820])) 167 {*arm_movsi_insn} (nil))

(insn 137 410 138 24 arch/arm/kernel/perf_event.c:419 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 11 fp [orig:154 irq ] [154])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 138 137 139 24 arch/arm/kernel/perf_event.c:419 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
        (nil)))
;; End of basic block 24 -> ( 27 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [47.5%] 
;; Succ edge  25 [52.5%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  24 [52.5%]  (fallthru)
(note 139 138 149 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(note 149 139 141 25 NOTE_INSN_DELETED)

(insn 141 149 143 25 include/linux/interrupt.h:135 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 9 r9 [258])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x116a1ca0>)
        (nil)))

(insn 143 141 148 25 include/linux/interrupt.h:135 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 10 sl [259])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 148 143 150 25 include/linux/interrupt.h:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("request_threaded_irq") [flags 0x41] <function_decl 0x10cec680 request_threaded_irq>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 150 148 151 25 arch/arm/kernel/perf_event.c:425 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 151 150 152 25 arch/arm/kernel/perf_event.c:425 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 159)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [0.0%]  (fallthru,loop_exit)
;; Succ edge  27 [100.0%] 

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 11 [fp] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  25 [0.0%]  (fallthru,loop_exit)
(note 152 151 155 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 155 152 154 26 arch/arm/kernel/perf_event.c:426 (set (reg:SI 1 r1)
        (reg/v:SI 11 fp [orig:154 irq ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 154 155 156 26 arch/arm/kernel/perf_event.c:426 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x113516c0>)
        (nil)))

(call_insn 156 154 432 26 arch/arm/kernel/perf_event.c:426 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 432 156 433 26 (set (pc)
        (label_ref 175)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 30)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  30 [100.0%] 

(barrier 433 432 159)

;; Start of basic block ( 24 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  24 [47.5%] 
;; Pred edge  25 [100.0%] 
(code_label 159 433 160 27 180 "" [2 uses])

(note 160 159 161 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 27 arch/arm/kernel/perf_event.c:417 (set (reg/v:SI 6 r6 [orig:153 i ] [153])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 27 22) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru,dfs_back)
;; Pred edge  22 [100.0%] 
(code_label 162 161 163 28 179 "" [1 uses])

(note 163 162 134 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 134 163 166 28 arch/arm/kernel/perf_event.c:418 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 i ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 166 134 133 28 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [257])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
            (nil))))

(insn 133 166 168 28 arch/arm/kernel/perf_event.c:418 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 168 133 169 28 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 pmu_device.962 ] [137])
                (const_int 368 [0x170])) [0 <variable>.num_resources+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 169 168 170 28 arch/arm/kernel/perf_event.c:417 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:153 i ] [153])
            (reg:SI 3 r3 [orig:192 <variable>.num_resources ] [192]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 170 169 171 28 arch/arm/kernel/perf_event.c:417 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 28 -> ( 24 29)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  24 [95.5%] 
;; Succ edge  29 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  28 [4.5%]  (fallthru,loop_exit)
(note 171 170 173 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 173 171 174 29 arch/arm/kernel/perf_event.c:432 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 174 173 175 29 arch/arm/kernel/perf_event.c:432 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 30 36)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 29 26) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 175 174 176 30 181 "" [1 uses])

(note 176 175 177 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 177 176 401 30 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:153 i ] [153])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 401 177 434 30 (set (reg/f:SI 7 r7 [255])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 434 401 435 30 (set (pc)
        (label_ref 195)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 435 434 197)

;; Start of basic block ( 34) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  34 [91.0%] 
(code_label 197 435 180 31 185 "" [1 uses])

(note 180 197 185 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 185 180 182 31 NOTE_INSN_DELETED)

(insn 182 185 184 31 arch/arm/kernel/perf_event.c:434 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [255])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 pmu_device+0 S4 A32])
        (nil)))

(call_insn 184 182 406 31 arch/arm/kernel/perf_event.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("platform_get_irq") [flags 0x41] <function_decl 0x11436f00 platform_get_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 406 184 186 31 arch/arm/kernel/perf_event.c:436 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 186 406 187 31 arch/arm/kernel/perf_event.c:435 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 187 186 188 31 arch/arm/kernel/perf_event.c:435 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4752 [0x1290])
        (nil)))
;; End of basic block 31 -> ( 32 34)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  32 [52.5%]  (fallthru)
;; Succ edge  34 [47.5%] 

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  31 [52.5%]  (fallthru)
(note 188 187 191 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(call_insn 191 188 195 32 arch/arm/kernel/perf_event.c:436 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_irq") [flags 0x41] <function_decl 0x10cec900 free_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 32 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 32 30 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  32 [100.0%]  (fallthru,dfs_back)
;; Pred edge  30 [100.0%] 
;; Pred edge  31 [47.5%] 
(code_label 195 191 196 34 183 "" [2 uses])

(note 196 195 183 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 183 196 198 34 arch/arm/kernel/perf_event.c:434 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:135 i.966 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 198 183 194 34 arch/arm/kernel/perf_event.c:433 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 194 198 199 34 arch/arm/kernel/perf_event.c:433 (set (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
        (plus:SI (reg/v:SI 6 r6 [orig:135 i.966 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn 199 194 200 34 arch/arm/kernel/perf_event.c:433 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 34 -> ( 31 35)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  31 [91.0%] 
;; Succ edge  35 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  34 [9.0%]  (fallthru,loop_exit)
(note 200 199 201 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 201 200 202 35 arch/arm/kernel/perf_event.c:438 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 202 201 468 35 arch/arm/kernel/perf_event.c:438 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("release_pmu") [flags 0x41] <function_decl 0x1147bb80 release_pmu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 468 202 469 35 arch/arm/kernel/perf_event.c:439 (set (reg/f:SI 3 r3 [254])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 469 468 205 35 arch/arm/kernel/perf_event.c:439 (set (reg:SI 2 r2 [195])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 205 469 436 35 arch/arm/kernel/perf_event.c:439 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [254])
                (const_int 4 [0x4])) [0 pmu_device+0 S4 A32])
        (reg:SI 2 r2 [195])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 436 205 437 35 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 35 -> ( 37)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 437 436 208)

;; Start of basic block ( 29 13 16) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  29 [50.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  16 [100.0%] 
(code_label 208 437 209 36 173 "" [3 uses])

(note 209 208 210 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 210 209 212 36 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 3 r3 [196])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 212 210 214 36 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/f:SI 2 r2 [198])
        (plus:SI (reg/f:SI 3 r3 [196])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 12 [0xc])))
        (nil)))

(insn 214 212 215 36 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (parallel [
            (set (reg/v:SI 1 r1 [orig:148 result ] [148])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (reg/v:SI 0 r0 [orig:147 tmp ] [147])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=&r") 1 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (set (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                        (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                (asm_operands/v:SI ("@ atomic_add
1:	ldrex	%0, [%3]
	add	%0, %0, %4
	strex	%1, %0, [%3]
	teq	%1, #0
	bne	1b") ("=Qo") 2 [
                        (reg/f:SI 2 r2 [198])
                        (const_int 1 [0x1])
                        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [196])
                                (const_int 12 [0xc])) [0 active_events.counter+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("Qo") 0)
                    ] 2601713))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 215 214 216 36 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:42 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 36 -> ( 37)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  37 [100.0%]  (fallthru)

;; Start of basic block ( 15 36 23 35) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  15 [100.0%] 
;; Pred edge  36 [100.0%]  (fallthru)
;; Pred edge  23 [100.0%] 
;; Pred edge  35 [100.0%] 
(code_label 216 215 217 37 175 "" [3 uses])

(note 217 216 220 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 220 217 221 37 arch/arm/kernel/perf_event.c:570 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(call_insn 221 220 222 37 arch/arm/kernel/perf_event.c:570 (parallel [
            (call (mem:SI (symbol_ref:SI ("mutex_unlock") [flags 0x41] <function_decl 0x10d7c400 mutex_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 222 221 223 37 arch/arm/kernel/perf_event.c:573 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 223 222 224 37 arch/arm/kernel/perf_event.c:573 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 37 -> ( 61 38)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  61 [100.0%] 
;; Succ edge  38 (fallthru)

;; Start of basic block ( 37 11) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  37 (fallthru)
;; Pred edge  11 [14.0%]  (loop_exit)
(code_label 224 223 225 38 171 "" [1 uses])

(note 225 224 226 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 226 225 227 38 arch/arm/kernel/perf_event.c:480 (set (reg:SI 3 r3 [orig:140 D.26654 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 120 [0x78])) [0 <variable>.attr.type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 227 226 228 38 arch/arm/kernel/perf_event.c:480 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 228 227 229 38 arch/arm/kernel/perf_event.c:480 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 38 -> ( 39 41)
;; lr  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  39 [50.0%]  (fallthru)
;; Succ edge  41 [50.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  38 [50.0%]  (fallthru)
(note 229 228 233 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 233 229 467 39 arch/arm/kernel/perf_event.c:160 (set (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(insn 467 233 231 39 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [202])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 231 467 232 39 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [202]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 232 231 234 39 arch/arm/kernel/perf_event.c:160 (set (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:203 armpmu ] [203])
                (const_int 48 [0x30])) [0 <variable>.event_map+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 234 232 466 39 arch/arm/kernel/perf_event.c:160 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:205 <variable>.attr.config ] [205])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [orig:204 <variable>.event_map ] [204])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 466 234 236 39 arch/arm/kernel/perf_event.c:161 (set (reg:SI 3 r3 [206])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn 236 466 237 39 arch/arm/kernel/perf_event.c:161 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (reg:SI 3 r3 [206]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 65535 [0xffff]))
        (nil)))

(jump_insn 237 236 438 39 arch/arm/kernel/perf_event.c:161 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 39 -> ( 51 40)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  51 [72.0%] 
;; Succ edge  40 [28.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  39 [28.0%]  (fallthru)
(note 438 237 440 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(jump_insn 440 438 441 40 (set (pc)
        (label_ref 439)) 242 {*arm_jump} (nil))
;; End of basic block 40 -> ( 62)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  62 [100.0%] 

(barrier 441 440 241)

;; Start of basic block ( 38) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  38 [50.0%] 
(code_label 241 441 242 41 186 "" [1 uses])

(note 242 241 243 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 243 242 244 41 arch/arm/kernel/perf_event.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 3 [0x3]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 244 243 245 41 arch/arm/kernel/perf_event.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 288)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 41 -> ( 42 48)
;; lr  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  42 [28.0%]  (fallthru)
;; Succ edge  48 [72.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  41 [28.0%]  (fallthru)
(note 245 244 398 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 398 245 247 42 arch/arm/kernel/perf_event.c:483 (set (reg:SI 2 r2 [orig:248 temp.969 ] [248])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 247 398 248 42 arch/arm/kernel/perf_event.c:137 (set (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
        (and:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 248 247 249 42 arch/arm/kernel/perf_event.c:138 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:145 cache_type ] [145])
            (const_int 6 [0x6]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 249 248 250 42 arch/arm/kernel/perf_event.c:138 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 380)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 63 43)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  63 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 250 249 251 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(note 251 250 252 43 NOTE_INSN_DELETED)

(note 252 251 253 43 NOTE_INSN_DELETED)

(note 253 252 255 43 NOTE_INSN_DELETED)

(insn 255 253 256 43 arch/arm/kernel/perf_event.c:141 (set (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(insn 256 255 257 43 arch/arm/kernel/perf_event.c:142 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:144 cache_op ] [144])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 257 256 258 43 arch/arm/kernel/perf_event.c:142 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 380)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43 -> ( 63 44)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  63 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  43 [50.0%]  (fallthru)
(note 258 257 259 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(note 259 258 260 44 NOTE_INSN_DELETED)

(note 260 259 261 44 NOTE_INSN_DELETED)

(note 261 260 263 44 NOTE_INSN_DELETED)

(insn 263 261 264 44 arch/arm/kernel/perf_event.c:145 (set (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
        (zero_extract:SI (reg:SI 2 r2 [orig:248 temp.969 ] [248])
            (const_int 8 [0x8])
            (const_int 16 [0x10]))) 124 {extzv_t2} (nil))

(insn 264 263 265 44 arch/arm/kernel/perf_event.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:143 cache_result ] [143])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 265 264 266 44 arch/arm/kernel/perf_event.c:146 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 380)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
        (nil)))
;; End of basic block 44 -> ( 63 45)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  63 [73.0%] 
;; Succ edge  45 [27.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  44 [27.0%]  (fallthru)
(note 266 265 271 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(note 271 266 273 45 NOTE_INSN_DELETED)

(note 273 271 272 45 NOTE_INSN_DELETED)

(insn 272 273 465 45 arch/arm/kernel/perf_event.c:149 (set (reg:SI 3 r3 [218])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:140 D.26654 ] [140])
                (reg/v:SI 0 r0 [orig:145 cache_type ] [145]))
            (reg/v:SI 1 r1 [orig:144 cache_op ] [144]))) 40 {*mulsi3addsi_v6} (nil))

(insn 465 272 268 45 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [213])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 268 465 269 45 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
        (mem/f/c/i:SI (reg/f:SI 1 r1 [213]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 269 268 274 45 arch/arm/kernel/perf_event.c:149 (set (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [orig:214 armpmu ] [214])
                (const_int 44 [0x2c])) [0 <variable>.cache_map+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 274 269 275 45 arch/arm/kernel/perf_event.c:149 (set (reg:SI 2 r2 [220])
        (plus:SI (mult:SI (reg:SI 3 r3 [218])
                (const_int 2 [0x2]))
            (reg/v:SI 2 r2 [orig:143 cache_result ] [143]))) 270 {*arith_shiftsi} (nil))

(insn 275 274 464 45 arch/arm/kernel/perf_event.c:149 (set (reg/v:SI 4 r4 [orig:142 ret ] [142])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [220])
                    (const_int 4 [0x4]))
                (reg/f:SI 12 ip [orig:215 <variable>.cache_map ] [215])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 464 275 277 45 arch/arm/kernel/perf_event.c:151 (set (reg:SI 3 r3 [221])
        (const_int 65535 [0xffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 65535 [0xffff])
        (nil)))

(insn 277 464 278 45 arch/arm/kernel/perf_event.c:151 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
            (reg:SI 3 r3 [221]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:142 ret ] [142])
            (const_int 65535 [0xffff]))
        (nil)))

(jump_insn 278 277 279 45 arch/arm/kernel/perf_event.c:151 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 45 -> ( 46 51)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  46 [28.0%]  (fallthru)
;; Succ edge  51 [72.0%] 

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  45 [28.0%]  (fallthru)
(note 279 278 280 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 280 279 442 46 arch/arm/kernel/perf_event.c:152 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -2 [0xfffffffffffffffe])) 167 {*arm_movsi_insn} (nil))

(jump_insn 442 280 443 46 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 46 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%] 

(barrier 443 442 288)

;; Start of basic block ( 41) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  41 [72.0%] 
(code_label 288 443 289 48 189 "" [1 uses])

(note 289 288 290 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 290 289 291 48 arch/arm/kernel/perf_event.c:484 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 D.26654 ] [140])
            (const_int 4 [0x4]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 291 290 292 48 arch/arm/kernel/perf_event.c:484 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 48 -> ( 50 49)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  50 [28.0%] 
;; Succ edge  49 [72.0%]  (fallthru)

;; Start of basic block ( 48) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  48 [72.0%]  (fallthru)
(note 292 291 293 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 293 292 446 49 arch/arm/kernel/perf_event.c:488 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -95 [0xffffffffffffffa1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 446 293 447 49 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 49 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%] 

(barrier 447 446 296)

;; Start of basic block ( 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  48 [28.0%] 
(code_label 296 447 297 50 193 "" [1 uses])

(note 297 296 300 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 300 297 463 50 arch/arm/kernel/perf_event.c:167 (set (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 128 [0x80])) [0 <variable>.attr.config+0 S4 A64])
        (nil)))

(insn 463 300 299 50 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 299 463 301 50 arch/arm/kernel/perf_event.c:167 (set (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 301 299 302 50 arch/arm/kernel/perf_event.c:167 (set (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:223 armpmu ] [223])
                (const_int 52 [0x34])) [0 <variable>.raw_event_mask+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 302 301 303 50 arch/arm/kernel/perf_event.c:167 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (and:SI (reg:SI 4 r4 [orig:224 <variable>.attr.config ] [224])
            (reg:SI 3 r3 [orig:225 <variable>.raw_event_mask ] [225]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 50 -> ( 51)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  51 [100.0%]  (fallthru)

;; Start of basic block ( 39 50 45) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  39 [72.0%] 
;; Pred edge  50 [100.0%]  (fallthru)
;; Pred edge  45 [72.0%] 
(code_label 303 302 304 51 187 "" [2 uses])

(note 304 303 305 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 305 304 306 51 arch/arm/kernel/perf_event.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:160 err ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 306 305 307 51 arch/arm/kernel/perf_event.c:491 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 366)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 0 [0x0])
        (nil)))
;; End of basic block 51 -> ( 60 52)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  60
;; Succ edge  52 [100.0%]  (fallthru)

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  51 [100.0%]  (fallthru)
(note 307 306 310 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(note 310 307 311 52 NOTE_INSN_DELETED)

(note 311 310 312 52 NOTE_INSN_DELETED)

(note 312 311 308 52 NOTE_INSN_DELETED)

(insn 308 312 313 52 arch/arm/kernel/perf_event.c:502 (set (reg:SI 3 r3 [227])
        (zero_extend:SI (mem/s:QI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                    (const_int 160 [0xa0])) [0 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 313 308 314 52 arch/arm/kernel/perf_event.c:502 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [227])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [230])
                (and:SI (reg:SI 3 r3 [227])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 314 313 315 52 arch/arm/kernel/perf_event.c:502 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 319)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 52 -> ( 53 54)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  53 [50.0%]  (fallthru)
;; Succ edge  54 [50.0%] 

;; Start of basic block ( 52) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  52 [50.0%]  (fallthru)
(note 315 314 316 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 316 315 448 53 arch/arm/kernel/perf_event.c:506 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(jump_insn 448 316 449 53 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 53 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%] 

(barrier 449 448 319)

;; Start of basic block ( 52) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 2 [r2]

;; Pred edge  52 [50.0%] 
(code_label 319 449 320 54 194 "" [1 uses])

(note 320 319 334 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(note 334 320 329 54 NOTE_INSN_DELETED)

(insn 329 334 333 54 arch/arm/kernel/perf_event.c:527 (set (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 288 [0x120])) [0 <variable>.hw.sample_period+0 S4 A64])
        (nil)))

(insn 333 329 462 54 arch/arm/kernel/perf_event.c:527 (set (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 292 [0x124])) [0 <variable>.hw.sample_period+4 S4 A32])
        (nil)))

(insn 462 333 322 54 arch/arm/kernel/perf_event.c:515 (set (reg:SI 0 r0 [231])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 322 462 335 54 arch/arm/kernel/perf_event.c:515 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 224 [0xe0])) [0 <variable>.hw.D.23168.D.23159.idx+0 S4 A64])
        (reg:SI 0 r0 [231])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 335 322 323 54 arch/arm/kernel/perf_event.c:527 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 1 r1 [orig:235 <variable>.hw.sample_period ] [235])
                        (reg:SI 2 r2 [orig:239 <variable>.hw.sample_period+4 ] [239]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 323 335 461 54 arch/arm/kernel/perf_event.c:523 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 216 [0xd8])) [0 <variable>.hw.D.23168.D.23159.config_base+0 S4 A64])
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 461 323 325 54 arch/arm/kernel/perf_event.c:524 (set (reg:DI 0 r0 [232])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 325 461 327 54 arch/arm/kernel/perf_event.c:524 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 200 [0xc8])) [0 <variable>.hw.D.23168.D.23159.config+0 S8 A64])
        (reg:DI 0 r0 [232])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 327 325 336 54 arch/arm/kernel/perf_event.c:525 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 220 [0xdc])) [0 <variable>.hw.D.23168.D.23159.event_base+0 S4 A32])
        (reg:SI 3 r3 [230])) 167 {*arm_movsi_insn} (nil))

(jump_insn 336 327 337 54 arch/arm/kernel/perf_event.c:527 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 348)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 54 -> ( 55 56)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  55 [50.0%]  (fallthru)
;; Succ edge  56 [50.0%] 

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  54 [50.0%]  (fallthru)
(note 337 336 346 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 346 337 460 55 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg/f:SI 1 r1 [245])
        (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
            (const_int 304 [0x130]))) 4 {*arm_addsi3} (nil))

(insn 460 346 339 55 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [240])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 339 460 340 55 arch/arm/kernel/perf_event.c:528 (set (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [240]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 340 339 459 55 arch/arm/kernel/perf_event.c:528 (set (reg:DI 2 r2 [orig:141 D.26647 ] [141])
        (mem/s/j:DI (plus:SI (reg/f:SI 3 r3 [orig:241 armpmu ] [241])
                (const_int 64 [0x40])) [0 <variable>.max_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 459 340 342 55 arch/arm/kernel/perf_event.c:528 (set (reg:SI 0 r0 [234])
        (const_int 288 [0x120])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 288 [0x120])
        (nil)))

(insn 342 459 458 55 arch/arm/kernel/perf_event.c:528 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [234])) [0 <variable>.hw.sample_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (nil))

(insn 458 342 344 55 arch/arm/kernel/perf_event.c:529 (set (reg:SI 0 r0 [243])
        (const_int 296 [0x128])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn 344 458 472 55 arch/arm/kernel/perf_event.c:529 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (reg:SI 0 r0 [243])) [0 <variable>.hw.last_period+0 S8 A64])
        (reg:DI 2 r2 [orig:141 D.26647 ] [141])) 163 {*arm_movdi} (nil))

(insn 472 344 347 55 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
            (const_int 304 [0x130]))) 4 {*arm_addsi3} (nil))

(insn 347 472 348 55 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/atomic.h:261 (parallel [
            (set (reg/v:DI 6 r6 [orig:146 tmp ] [146])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=&r") 0 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (set (mem/s/j:DI (reg:SI 0 r0) [0 <variable>.counter+0 S8 A64])
                (asm_operands/v:DI ("@ atomic64_set
1:	ldrexd	%0, %H0, [%2]
	strexd	%0, %3, %H3, [%2]
	teq	%0, #0
	bne	1b") ("=Qo") 1 [
                        (reg/f:SI 1 r1 [245])
                        (reg:DI 2 r2 [orig:141 D.26647 ] [141])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 2629745))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 55 -> ( 56)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  56 [100.0%]  (fallthru)

;; Start of basic block ( 54 55) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  54 [50.0%] 
;; Pred edge  55 [100.0%]  (fallthru)
(code_label 348 347 349 56 195 "" [1 uses])

(note 349 348 350 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 350 349 351 56 arch/arm/kernel/perf_event.c:534 (set (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:163 event ] [163])
                (const_int 40 [0x28])) [0 <variable>.group_leader+0 S4 A64])
        (nil)))

(insn 351 350 352 56 arch/arm/kernel/perf_event.c:534 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:246 <variable>.group_leader ] [246])
            (reg/v/f:SI 5 r5 [orig:163 event ] [163]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 352 351 353 56 arch/arm/kernel/perf_event.c:534 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 357)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6983 [0x1b47])
        (nil)))
;; End of basic block 56 -> ( 58 57)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  58 [69.8%] 
;; Succ edge  57 [30.2%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  56 [30.2%]  (fallthru)
(note 353 352 354 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 354 353 450 57 arch/arm/kernel/perf_event.c:534 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 450 354 451 57 (set (pc)
        (label_ref 370)) 242 {*arm_jump} (nil))
;; End of basic block 57 -> ( 61)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  61 [100.0%] 

(barrier 451 450 357)

;; Start of basic block ( 56) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  56 [69.8%] 
(code_label 357 451 358 58 196 "" [1 uses])

(note 358 357 361 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 361 358 359 58 NOTE_INSN_DELETED)

(insn 359 361 360 58 arch/arm/kernel/perf_event.c:535 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(call_insn 360 359 362 58 arch/arm/kernel/perf_event.c:535 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("validate_group") [flags 0x3] <function_decl 0x114a1d80 validate_group>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 362 360 363 58 arch/arm/kernel/perf_event.c:536 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:160 err ] [160])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 363 362 364 58 arch/arm/kernel/perf_event.c:536 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 370)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 58 -> ( 59 61)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  59 [50.0%]  (fallthru)
;; Succ edge  61 [50.0%] 

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  58 [50.0%]  (fallthru)
(note 364 363 365 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 365 364 366 59 arch/arm/kernel/perf_event.c:537 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 59 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%]  (fallthru)

;; Start of basic block ( 46 53 49 59 51 62 63) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  46 [100.0%] 
;; Pred edge  53 [100.0%] 
;; Pred edge  49 [100.0%] 
;; Pred edge  59 [100.0%]  (fallthru)
;; Pred edge  51
;; Pred edge  62 [100.0%] 
;; Pred edge  63 [100.0%] 
(code_label 366 365 367 60 192 "" [6 uses])

(note 367 366 368 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 368 367 369 60 arch/arm/kernel/perf_event.c:578 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:163 event ] [163])) 167 {*arm_movsi_insn} (nil))

(call_insn 369 368 370 60 arch/arm/kernel/perf_event.c:578 (parallel [
            (call (mem:SI (symbol_ref:SI ("hw_perf_event_destroy") [flags 0x3] <function_decl 0x114c5180 hw_perf_event_destroy>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 60 -> ( 61)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  61 [100.0%]  (fallthru)

;; Start of basic block ( 6 4 37 60 58 57) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  37 [100.0%] 
;; Pred edge  60 [100.0%]  (fallthru)
;; Pred edge  58 [50.0%] 
;; Pred edge  57 [100.0%] 
(code_label 370 369 371 61 167 "" [5 uses])

(note 371 370 386 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 386 371 392 61 arch/arm/kernel/perf_event.c:581 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:160 err ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 392 386 439 61 arch/arm/kernel/perf_event.c:581 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 61 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 40) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  40 [100.0%] 
(code_label 439 392 376 62 199 "" [1 uses])

(note 376 439 377 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 377 376 452 62 arch/arm/kernel/perf_event.c:161 discrim 2 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -95 [0xffffffffffffffa1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 452 377 453 62 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 62 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%] 

(barrier 453 452 380)

;; Start of basic block ( 43 44 42) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  43 [50.0%] 
;; Pred edge  44 [73.0%] 
;; Pred edge  42 [50.0%] 
(code_label 380 453 381 63 190 "" [3 uses])

(note 381 380 382 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 382 381 454 63 arch/arm/kernel/perf_event.c:147 (set (reg/v:SI 4 r4 [orig:160 err ] [160])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(jump_insn 454 382 455 63 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 63 -> ( 60)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  60 [100.0%] 

(barrier 455 454 471)

(note 471 455 0 NOTE_INSN_DELETED)


;; Function armv7pmu_stop (armv7pmu_stop)[0:1349]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 18(l0): point = 0
   Insn 16(l0): point = 2
   Insn 17(l0): point = 4
   Insn 13(l0): point = 6
   Insn 12(l0): point = 8
   Insn 11(l0): point = 10
   Insn 10(l0): point = 12
   Insn 9(l0): point = 14
   Insn 8(l0): point = 16
   Insn 7(l0): point = 18
 a0(r134): [5..14]
 a1(r137): [7..8]
 a2(r133): [9..12]
Compressing live ranges: from 21 to 6 - 28%
Ranges after the compression:
 a0(r134): [0..5]
 a1(r137): [1..2]
 a2(r133): [3..4]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r134,l0) conflicts: a1(r137,l0) a2(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r133,l0) conflicts: a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r137)<->a2(r133)@125:shuffle
  regions=1, blocks=3, points=6
    allocnos=3, copies=1, conflicts=2, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r134 1r137 2r133
    modified regnos: 133 134 137
    border:
    Pressure: GENERAL_REGS=3
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a2(r133,l0)
      Pushing a1(r137,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 1
      Popping a1(r137,l0)  -- assign reg 3
      Popping a2(r133,l0)  -- assign reg 3
Disposition:
    2:r133 l0     3    0:r134 l0     1    1:r137 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, dead_or_set: 0
insn=8, live_throughout: 13, dead_or_set: 0, 14
insn=9, live_throughout: 13, 14, dead_or_set: 0, 134
insn=10, live_throughout: 13, 14, 134, dead_or_set: 133
insn=11, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=12, live_throughout: 13, 14, 134, dead_or_set: 133, 137
insn=13, live_throughout: 13, 14, 134, dead_or_set: 137
insn=17, live_throughout: 13, 14, dead_or_set: 1, 134
insn=16, live_throughout: 1, 13, 14, dead_or_set: 0
insn=18, live_throughout: 13, 14, dead_or_set: 0, 1
changing reg in insn 10
changing reg in insn 12
changing reg in insn 9
changing reg in insn 17
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 17.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


armv7pmu_stop

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={5d,2u} r12={3d} r13={1d,4u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 256{245d,11u,0e} in 9{7 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 14 2 NOTE_INSN_DELETED)

(note 14 6 15 2 NOTE_INSN_DELETED)

(note 15 14 7 2 NOTE_INSN_DELETED)

(insn 7 15 8 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1122 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 11 10 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 12 11 13 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (and:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 62 [0x3e]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 12 16 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [137])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (nil))

(insn 16 13 18 2 arch/arm/kernel/perf_event_v7.c:1125 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn/j 18 16 19 2 arch/arm/kernel/perf_event_v7.c:1125 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 19 18 27)

(note 27 19 0 NOTE_INSN_DELETED)


;; Function armv7pmu_start (armv7pmu_start)[0:1348]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 19(l0): point = 0
   Insn 17(l0): point = 2
   Insn 18(l0): point = 4
   Insn 14(l0): point = 6
   Insn 13(l0): point = 8
   Insn 12(l0): point = 10
   Insn 11(l0): point = 12
   Insn 10(l0): point = 14
   Insn 9(l0): point = 16
   Insn 8(l0): point = 18
   Insn 7(l0): point = 20
 a0(r134): [5..16]
 a1(r138): [7..8]
 a2(r137): [9..10]
 a3(r133): [11..14]
Compressing live ranges: from 23 to 8 - 34%
Ranges after the compression:
 a0(r134): [0..7]
 a1(r138): [1..2]
 a2(r137): [3..4]
 a3(r133): [5..6]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r134,l0) conflicts: a1(r138,l0) a2(r137,l0) a3(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r138,l0) conflicts: a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r137,l0) conflicts: a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r133,l0) conflicts: a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a2(r137)<->a3(r133)@125:shuffle
  cp1:a1(r138)<->a2(r137)@125:shuffle
  regions=1, blocks=3, points=8
    allocnos=4, copies=2, conflicts=3, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r134 1r138 2r137 3r133
    modified regnos: 133 134 137 138
    border:
    Pressure: GENERAL_REGS=3
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a3(r133,l0)
      Pushing a2(r137,l0)
      Pushing a1(r138,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 1
      Popping a1(r138,l0)  -- assign reg 3
      Popping a2(r137,l0)  -- assign reg 3
      Popping a3(r133,l0)  -- assign reg 3
Disposition:
    3:r133 l0     3    0:r134 l0     1    2:r137 l0     3    1:r138 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, dead_or_set: 0
insn=8, live_throughout: 13, dead_or_set: 0, 14
insn=9, live_throughout: 13, 14, dead_or_set: 0, 134
insn=10, live_throughout: 13, 14, 134, dead_or_set: 133
insn=11, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=12, live_throughout: 13, 14, 134, dead_or_set: 133, 137
insn=13, live_throughout: 13, 14, 134, dead_or_set: 137, 138
insn=14, live_throughout: 13, 14, 134, dead_or_set: 138
insn=18, live_throughout: 13, 14, dead_or_set: 1, 134
insn=17, live_throughout: 1, 13, 14, dead_or_set: 0
insn=19, live_throughout: 13, 14, dead_or_set: 0, 1
changing reg in insn 10
changing reg in insn 12
changing reg in insn 9
changing reg in insn 18
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
deleting insn with uid = 18.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


armv7pmu_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={3d} r3={6d,3u} r12={3d} r13={1d,4u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 258{246d,12u,0e} in 10{8 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 6 2 NOTE_INSN_DELETED)

(note 6 5 15 2 NOTE_INSN_DELETED)

(note 15 6 16 2 NOTE_INSN_DELETED)

(note 16 15 7 2 NOTE_INSN_DELETED)

(insn 7 16 8 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 8 7 9 2 arch/arm/kernel/perf_event_v7.c:1112 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1112 (set (reg/v:SI 1 r1 [orig:134 flags ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/kernel/perf_event_v7.c:764 (set (reg/v:SI 3 r3 [orig:133 val ] [133])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 0") ("=r") 0 []
             [] 8903762)) -1 (nil))

(insn 11 10 12 2 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 12 11 13 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [137])
        (ior:SI (reg/v:SI 3 r3 [orig:133 val ] [133])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 13 12 14 2 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (and:SI (reg:SI 3 r3 [137])
            (const_int 63 [0x3f]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 13 17 2 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (nil))

(insn 17 14 19 2 arch/arm/kernel/perf_event_v7.c:1115 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn/j 19 17 20 2 arch/arm/kernel/perf_event_v7.c:1115 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 28)

(note 28 20 0 NOTE_INSN_DELETED)


;; Function armv7pmu_disable_event (armv7pmu_disable_event)[0:1346]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 114.
verify found no changes in insn with uid = 114.
deleting insn with uid = 82.
scanning new insn with uid = 115.
verify found no changes in insn with uid = 115.
deleting insn with uid = 45.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 29 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 30 (  1.9)

Pass 0 for finding allocno costs

    a3 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r157,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r148,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r157,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r148,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 93(l0): point = 0
   Insn 91(l0): point = 2
   Insn 92(l0): point = 4
   Insn 86(l0): point = 7
   Insn 83(l0): point = 10
   Insn 114(l0): point = 12
   Insn 81(l0): point = 14
   Insn 108(l0): point = 17
   Insn 76(l0): point = 19
   Insn 74(l0): point = 21
   Insn 73(l0): point = 23
   Insn 111(l0): point = 25
   Insn 75(l0): point = 27
   Insn 110(l0): point = 29
   Insn 66(l0): point = 32
   Insn 65(l0): point = 34
   Insn 64(l0): point = 36
   Insn 63(l0): point = 38
   Insn 62(l0): point = 40
   Insn 61(l0): point = 42
   Insn 59(l0): point = 45
   Insn 58(l0): point = 47
   Insn 106(l0): point = 50
   Insn 53(l0): point = 52
   Insn 51(l0): point = 55
   Insn 50(l0): point = 57
   Insn 49(l0): point = 59
   Insn 46(l0): point = 62
   Insn 115(l0): point = 64
   Insn 44(l0): point = 66
   Insn 104(l0): point = 69
   Insn 39(l0): point = 71
   Insn 37(l0): point = 73
   Insn 36(l0): point = 75
   Insn 113(l0): point = 77
   Insn 38(l0): point = 79
   Insn 112(l0): point = 81
   Insn 29(l0): point = 84
   Insn 28(l0): point = 86
   Insn 27(l0): point = 88
   Insn 26(l0): point = 90
   Insn 25(l0): point = 92
   Insn 22(l0): point = 95
   Insn 102(l0): point = 98
   Insn 16(l0): point = 100
   Insn 14(l0): point = 103
   Insn 13(l0): point = 105
   Insn 11(l0): point = 107
   Insn 10(l0): point = 109
   Insn 9(l0): point = 111
   Insn 3(l0): point = 113
   Insn 7(l0): point = 115
 a0(r138): [5..107]
 a1(r133): [50..52] [8..10]
 a2(r159): [11..14]
 a3(r160): [11..12]
 a4(r140): [55..113] [28..49] [15..16]
 a5(r157): [22..29]
 a6(r154): [35..36]
 a7(r155): [37..38]
 a8(r153): [39..40]
 a9(r152): [41..42]
 a10(r135): [98..100] [60..62]
 a11(r150): [63..66]
 a12(r151): [63..64]
 a13(r148): [74..81]
 a14(r145): [87..88]
 a15(r146): [89..90]
 a16(r144): [91..92]
 a17(r141): [103..115] [93..97]
Compressing live ranges: from 118 to 44 - 37%
Ranges after the compression:
 a0(r138): [0..41]
 a1(r133): [20..21] [1..2]
 a2(r159): [3..5]
 a3(r160): [3..4]
 a4(r140): [22..42] [9..19] [6..7]
 a5(r157): [8..10]
 a6(r154): [11..12]
 a7(r155): [13..14]
 a8(r153): [15..16]
 a9(r152): [17..18]
 a10(r135): [38..39] [23..24]
 a11(r150): [25..27]
 a12(r151): [25..26]
 a13(r148): [28..29]
 a14(r145): [30..31]
 a15(r146): [32..33]
 a16(r144): [34..35]
 a17(r141): [40..43] [36..37]
+++Allocating 144 bytes for conflict table (uncompressed size 144)
;; a0(r138,l0) conflicts: a1(r133,l0) a3(r160,l0) a2(r159,l0) a4(r140,l0) a5(r157,l0) a6(r154,l0) a7(r155,l0) a8(r153,l0) a9(r152,l0) a10(r135,l0) a12(r151,l0) a11(r150,l0) a13(r148,l0) a14(r145,l0) a15(r146,l0) a16(r144,l0) a17(r141,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r133,l0) conflicts: a0(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r159,l0) conflicts: a0(r138,l0) a3(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r160,l0) conflicts: a0(r138,l0) a2(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r140,l0) conflicts: a0(r138,l0) a5(r157,l0) a6(r154,l0) a7(r155,l0) a8(r153,l0) a9(r152,l0) a10(r135,l0) a12(r151,l0) a11(r150,l0) a13(r148,l0) a14(r145,l0) a15(r146,l0) a16(r144,l0) a17(r141,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r157,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a6(r154,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r155,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r153,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r152,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r135,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r150,l0) conflicts: a0(r138,l0) a4(r140,l0) a12(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r151,l0) conflicts: a0(r138,l0) a4(r140,l0) a11(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r148,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a14(r145,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r146,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r144,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r141,l0) conflicts: a0(r138,l0) a4(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a2(r159)<->a4(r140)@125:shuffle
  cp1:a1(r133)<->a3(r160)@125:shuffle
  cp2:a1(r133)<->a2(r159)@125:shuffle
  cp3:a6(r154)<->a7(r155)@125:shuffle
  cp4:a10(r135)<->a12(r151)@125:shuffle
  cp5:a10(r135)<->a11(r150)@125:shuffle
  cp6:a14(r145)<->a15(r146)@125:shuffle
  regions=1, blocks=16, points=44
    allocnos=18, copies=7, conflicts=1, ranges=23

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r138 1r133 2r159 3r160 4r140 5r157 6r154 7r155 8r153 9r152 10r135 11r150 12r151 13r148 14r145 15r146 16r144 17r141
    modified regnos: 133 135 138 140 141 144 145 146 148 150 151 152 153 154 155 157 159 160
    border:
    Pressure: GENERAL_REGS=6
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 157 of GENERAL_REGS has 2 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
      Pushing a16(r144,l0)
      Pushing a15(r146,l0)
      Pushing a14(r145,l0)
      Pushing a12(r151,l0)
      Pushing a11(r150,l0)
      Pushing a9(r152,l0)
      Pushing a8(r153,l0)
      Pushing a7(r155,l0)
      Pushing a6(r154,l0)
      Pushing a3(r160,l0)
      Pushing a2(r159,l0)
      Pushing a10(r135,l0)
      Pushing a1(r133,l0)
      Pushing a13(r148,l0)
      Pushing a5(r157,l0)
      Pushing a17(r141,l0)
      Pushing a0(r138,l0)
      Pushing a4(r140,l0)
      Popping a4(r140,l0)  -- assign reg 4
      Popping a0(r138,l0)  -- assign reg 5
      Popping a17(r141,l0)  -- assign reg 6
      Popping a5(r157,l0)  -- assign reg 3
      Popping a13(r148,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 4
      Popping a10(r135,l0)  -- assign reg 3
      Popping a2(r159,l0)  -- assign reg 4
      Popping a3(r160,l0)  -- assign reg 3
      Popping a6(r154,l0)  -- assign reg 3
      Popping a7(r155,l0)  -- assign reg 3
      Popping a8(r153,l0)  -- assign reg 3
      Popping a9(r152,l0)  -- assign reg 3
      Popping a11(r150,l0)  -- assign reg 3
      Popping a12(r151,l0)  -- assign reg 2
      Popping a14(r145,l0)  -- assign reg 3
      Popping a15(r146,l0)  -- assign reg 3
      Popping a16(r144,l0)  -- assign reg 3
Disposition:
    1:r133 l0     4   10:r135 l0     3    0:r138 l0     5    4:r140 l0     4
   17:r141 l0     6   16:r144 l0     3   14:r145 l0     3   15:r146 l0     3
   13:r148 l0     3   11:r150 l0     3   12:r151 l0     2    9:r152 l0     3
    8:r153 l0     3    6:r154 l0     3    7:r155 l0     3    5:r157 l0     3
    2:r159 l0     4    3:r160 l0     3
New iteration of spill/restore move
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 1, 13, dead_or_set: 141
insn=3, live_throughout: 13, 141, dead_or_set: 1, 140
insn=9, live_throughout: 13, 140, 141, dead_or_set: 0
insn=10, live_throughout: 13, 140, 141, dead_or_set: 0, 14
insn=11, live_throughout: 13, 14, 140, 141, dead_or_set: 0, 138
insn=13, live_throughout: 13, 14, 138, 140, 141, dead_or_set: 
insn=14, live_throughout: 13, 14, 24, 138, 140, 141, dead_or_set: 
insn=16, live_throughout: 13, 14, 138, 140, dead_or_set: 135
insn=102, live_throughout: 13, 14, 135, 138, 140, dead_or_set: 
insn=19, live_throughout: 13, 14, 24, 138, 140, 141, dead_or_set: 
insn=22, live_throughout: 13, 14, 138, 140, 141, dead_or_set: 
insn=25, live_throughout: 13, 14, 138, 140, dead_or_set: 141, 144
insn=26, live_throughout: 13, 14, 138, 140, dead_or_set: 144, 146
insn=27, live_throughout: 13, 14, 138, 140, dead_or_set: 145, 146
insn=28, live_throughout: 13, 14, 138, 140, dead_or_set: 145
insn=29, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=30, live_throughout: 13, 138, 140, dead_or_set: 
insn=112, live_throughout: 13, 138, 140, dead_or_set: 148
insn=38, live_throughout: 13, 138, 140, 148, dead_or_set: 2
insn=113, live_throughout: 2, 13, 138, 140, dead_or_set: 148
insn=36, live_throughout: 2, 13, 138, 140, 148, dead_or_set: 0
insn=37, live_throughout: 0, 2, 13, 138, 140, dead_or_set: 1, 148
insn=39, live_throughout: 13, 138, 140, dead_or_set: 0, 1, 2, 14
insn=104, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=42, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=44, live_throughout: 13, 14, 138, 140, dead_or_set: 150
insn=115, live_throughout: 13, 14, 138, 140, 150, dead_or_set: 151
insn=46, live_throughout: 13, 14, 138, 140, dead_or_set: 135, 150, 151
insn=47, live_throughout: 13, 14, 135, 138, 140, dead_or_set: 
insn=49, live_throughout: 13, 14, 138, 140, dead_or_set: 135
insn=50, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=51, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=53, live_throughout: 13, 14, 138, dead_or_set: 133
insn=106, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=56, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=58, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=59, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=61, live_throughout: 13, 14, 138, 140, dead_or_set: 152
insn=62, live_throughout: 13, 14, 138, 140, dead_or_set: 152, 153
insn=63, live_throughout: 13, 14, 138, 140, dead_or_set: 153, 155
insn=64, live_throughout: 13, 14, 138, 140, dead_or_set: 154, 155
insn=65, live_throughout: 13, 14, 138, 140, dead_or_set: 154
insn=66, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=67, live_throughout: 13, 138, 140, dead_or_set: 
insn=110, live_throughout: 13, 138, 140, dead_or_set: 157
insn=75, live_throughout: 13, 138, 157, dead_or_set: 2, 140
insn=111, live_throughout: 2, 13, 138, dead_or_set: 157
insn=73, live_throughout: 2, 13, 138, 157, dead_or_set: 0
insn=74, live_throughout: 0, 2, 13, 138, dead_or_set: 1, 157
insn=76, live_throughout: 13, 138, dead_or_set: 0, 1, 2, 14
insn=108, live_throughout: 13, 14, 138, dead_or_set: 
insn=79, live_throughout: 13, 14, 138, 140, dead_or_set: 
insn=81, live_throughout: 13, 14, 138, dead_or_set: 140, 159
insn=114, live_throughout: 13, 14, 138, 159, dead_or_set: 160
insn=83, live_throughout: 13, 14, 138, dead_or_set: 133, 159, 160
insn=84, live_throughout: 13, 14, 133, 138, dead_or_set: 
insn=86, live_throughout: 13, 14, 138, dead_or_set: 133
insn=87, live_throughout: 13, 14, 138, dead_or_set: 
insn=92, live_throughout: 13, 14, dead_or_set: 1, 138
insn=91, live_throughout: 1, 13, 14, dead_or_set: 0
insn=93, live_throughout: 13, 14, dead_or_set: 0, 1
init_insns for 141: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 115 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 61 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 114 (nil))
changing reg in insn 83
changing reg in insn 53
changing reg in insn 86
changing reg in insn 46
changing reg in insn 16
changing reg in insn 49
changing reg in insn 11
changing reg in insn 92
changing reg in insn 3
changing reg in insn 65
changing reg in insn 28
changing reg in insn 81
changing reg in insn 75
changing reg in insn 58
changing reg in insn 50
changing reg in insn 44
changing reg in insn 38
changing reg in insn 13
changing reg in insn 7
changing reg in insn 9
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 113
changing reg in insn 112
changing reg in insn 113
changing reg in insn 37
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 115
changing reg in insn 46
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 74
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 114
changing reg in insn 83
Spilling for insn 112.
Using reg 2 for reload 0
Spilling for insn 110.
Using reg 2 for reload 0

Reloads for insn # 112
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 110
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 93.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 29 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 30 (  1.9)


armv7pmu_disable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={10d,5u} r3={20d,14u,1d} r4={4d,11u,1d} r5={1d,1u} r6={1d,2u} r12={5d} r13={1d,21u} r14={4d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={9d,6u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 584{512d,70u,2e} in 54{50 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 3 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/f:SI 6 r6 [141])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 3 7 9 2 arch/arm/kernel/perf_event_v7.c:1024 (set (reg/v:SI 4 r4 [orig:140 idx ] [140])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 10 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 6 r6 [141])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 10 9 11 2 arch/arm/kernel/perf_event_v7.c:1030 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 13 2 arch/arm/kernel/perf_event_v7.c:1030 (set (reg/v:SI 5 r5 [orig:138 flags ] [138])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 13 11 14 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 14 13 15 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  4 [72.0%] 
;; Succ edge  3 [28.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 102 3 arch/arm/kernel/perf_event_v7.c:885 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2147483648 [0xffffffff80000000])
        (nil)))

(jump_insn 102 16 103 3 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 103 102 19)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 19 103 20 4 212 "" [1 uses])

(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 22 20 23 4 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 23 22 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 26 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [141]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 26 25 27 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:144 armpmu ] [144])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 28 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [orig:146 <variable>.num_events ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 28 27 29 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 5 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
(code_label 30 29 31 6 214 "" [1 uses])

(note 31 30 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 34 31 117 6 NOTE_INSN_DELETED)

(insn 117 34 112 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 112 117 38 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 38 112 113 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 113 38 36 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [148])
        (and:SI (reg:SI 3 r3 [148])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 36 113 37 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn 37 36 39 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [148])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 39 37 104 6 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 104 39 105 6 (set (pc)
        (label_ref 56)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 105 104 42)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 42 105 43 7 215 "" [1 uses])

(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 115 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 115 44 46 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [151])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 46 115 47 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [151])
            (reg:SI 3 r3 [150]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 3 r3 [150]))
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 47 46 48 8 213 "" [1 uses])

(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 8 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (nil))

(insn 50 49 51 8 arch/arm/kernel/perf_event_v7.c:919 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 8 arch/arm/kernel/perf_event_v7.c:919 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7198 [0x1c1e])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  10 [72.0%] 
;; Succ edge  9 [28.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  8 [28.0%]  (fallthru)
(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 106 9 arch/arm/kernel/perf_event_v7.c:927 (set (reg/v:SI 4 r4 [orig:133 val ] [133])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2147483648 [0xffffffff80000000])
        (nil)))

(jump_insn 106 53 107 9 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 107 106 56)

;; Start of basic block ( 8 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [72.0%] 
;; Pred edge  6 [100.0%] 
(code_label 56 107 57 10 216 "" [2 uses])

(note 57 56 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 10 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 59 58 60 10 arch/arm/kernel/perf_event_v7.c:919 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  12 [0.0%] 
;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
(note 60 59 61 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 11 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 62 61 63 11 arch/arm/kernel/perf_event_v7.c:920 (set (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [152]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 63 62 64 11 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:153 armpmu ] [153])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 64 63 65 11 arch/arm/kernel/perf_event_v7.c:920 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [orig:155 <variable>.num_events ] [155])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 65 64 66 11 arch/arm/kernel/perf_event_v7.c:920 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (reg:SI 3 r3 [154]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 66 65 67 11 arch/arm/kernel/perf_event_v7.c:920 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  13 [100.0%] 

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  10 [0.0%] 
;; Pred edge  11 [0.0%]  (fallthru)
(code_label 67 66 68 12 218 "" [1 uses])

(note 68 67 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 71 68 118 12 NOTE_INSN_DELETED)

(insn 118 71 110 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 110 118 75 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 75 110 111 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 111 75 73 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 3 r3 [157])
        (and:SI (reg:SI 3 r3 [157])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 73 111 74 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x116cf8c0>)
        (nil)))

(insn 74 73 76 12 arch/arm/kernel/perf_event_v7.c:921 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [157])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 76 74 108 12 arch/arm/kernel/perf_event_v7.c:921 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 108 76 109 12 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 15)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 109 108 79)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 79 109 80 13 219 "" [1 uses])

(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 81 80 114 13 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 4 r4 [159])
        (plus:SI (reg/v:SI 4 r4 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 114 81 83 13 arch/arm/kernel/perf_event_v7.c:929 (set (reg:SI 3 r3 [160])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 83 114 84 13 arch/arm/kernel/perf_event_v7.c:929 (set (reg/v:SI 4 r4 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [160])
            (reg:SI 4 r4 [159]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 4 r4 [159]))
        (nil)))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 9) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 84 83 85 14 217 "" [1 uses])

(note 85 84 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 14 arch/arm/kernel/perf_event_v7.c:931 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 2") ("") 0 [
            (reg/v:SI 4 r4 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8925138) -1 (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 12) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 87 86 88 15 220 "" [1 uses])

(note 88 87 92 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 92 88 91 15 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:138 flags ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 91 92 93 15 arch/arm/kernel/perf_event_v7.c:1042 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn/j 93 91 94 15 arch/arm/kernel/perf_event_v7.c:1042 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 15 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 94 93 116)

(note 116 94 0 NOTE_INSN_DELETED)


;; Function armv7pmu_reset (armv7pmu_reset)[0:1351]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)
scanning new insn with uid = 37.
verify found no changes in insn with uid = 37.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)

Pass 0 for finding allocno costs

    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 25(l0): point = 0
   Insn 24(l0): point = 2
   Insn 23(l0): point = 4
   Insn 34(l0): point = 7
   Insn 8(l0): point = 9
   Insn 7(l0): point = 11
   Insn 37(l0): point = 13
   Insn 9(l0): point = 15
   Insn 21(l1): point = 18
   Insn 16(l1): point = 20
   Insn 20(l1): point = 22
   Insn 33(l1): point = 24
   Insn 14(l1): point = 26
   Insn 15(l1): point = 29
 a0(r138): [1..2]
 a1(r133): [7..9]
 a2(r137): [10..11]
 a3(r136): [12..13]
 a4(r134): [7..15]
 a5(r133): [18..31]
 a6(r134): [18..31]
Compressing live ranges: from 32 to 11 - 34%
Ranges after the compression:
 a0(r138): [0..1]
 a1(r133): [9..10] [2..3]
 a2(r137): [4..5]
 a3(r136): [6..7]
 a4(r134): [9..10] [2..8]
+++Allocating 32 bytes for conflict table (uncompressed size 56)
;; a0(r138,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts: a4(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r137,l0) conflicts: a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts: a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts: a1(r133,l0) a2(r137,l0) a3(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  regions=2, blocks=6, points=11
    allocnos=7, copies=0, conflicts=3, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r138 1r133 2r137 3r136 4r134
    modified regnos: 133 134 136 137 138
    border:
    Pressure: GENERAL_REGS=5
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
      Pushing a3(r136,l0)
      Pushing a2(r137,l0)
      Pushing a0(r138,l0)
      Pushing a1(r133,l0)
      Pushing a4(r134,l0)
      Popping a4(r134,l0)  -- assign reg 4
      Popping a1(r133,l0)  -- assign reg 5
      Popping a0(r138,l0)  -- assign reg 3
      Popping a2(r137,l0)  -- assign reg 3
      Popping a3(r136,l0)  -- assign reg 3
Disposition:
    1:r133 l0     5    4:r134 l0     4    3:r136 l0     3    2:r137 l0     3
    0:r138 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 13, 14, dead_or_set: 134
insn=37, live_throughout: 13, 14, 134, dead_or_set: 136
insn=7, live_throughout: 13, 14, 134, dead_or_set: 136, 137
insn=8, live_throughout: 13, 14, 134, dead_or_set: 133, 137
insn=34, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=19, live_throughout: 0, 1, 13, 133, 134, dead_or_set: 
insn=15, live_throughout: 13, 133, 134, dead_or_set: 0, 1, 14
insn=17, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=14, live_throughout: 13, 14, 133, 134, dead_or_set: 1
insn=33, live_throughout: 1, 13, 14, 133, 134, dead_or_set: 0
insn=20, live_throughout: 0, 1, 13, 14, 133, 134, dead_or_set: 
insn=16, live_throughout: 0, 1, 13, 14, 24, 133, dead_or_set: 134
insn=21, live_throughout: 0, 1, 13, 14, 133, 134, dead_or_set: 
insn=23, live_throughout: 13, 14, dead_or_set: 
insn=24, live_throughout: 13, 14, dead_or_set: 138
insn=25, live_throughout: 13, 14, dead_or_set: 138
init_insns for 136: (insn_list:REG_DEP_TRUE 37 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 24 (nil))
changing reg in insn 8
changing reg in insn 20
changing reg in insn 16
changing reg in insn 9
changing reg in insn 20
changing reg in insn 16
changing reg in insn 14
changing reg in insn 37
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 24
changing reg in insn 25


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)


armv7pmu_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r3={5d,3u} r4={2d,3u} r5={1d,1u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 150{133d,17u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 3 37 2 arch/arm/kernel/perf_event_v7.c:1159 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 37 9 7 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 7 37 8 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [136]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 8 7 34 2 arch/arm/kernel/perf_event_v7.c:1156 (set (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 armpmu ] [137])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(jump_insn 34 8 35 2 arch/arm/kernel/perf_event_v7.c:1159 (set (pc)
        (label_ref 17)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 35 34 19)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 19 35 12 3 226 "" [1 uses])

(note 12 19 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 15 12 17 3 arch/arm/kernel/perf_event_v7.c:1160 (parallel [
            (call (mem:SI (symbol_ref:SI ("armv7pmu_disable_event") [flags 0x3] <function_decl 0x1150d880 armv7pmu_disable_event>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 17 15 18 4 225 "" [1 uses])

(note 18 17 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 14 18 33 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 33 14 20 4 arch/arm/kernel/perf_event_v7.c:1160 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 20 33 16 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg/v:SI 5 r5 [orig:133 nb_cnt ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(insn 16 20 21 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 2 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 21 16 22 4 arch/arm/kernel/perf_event_v7.c:1159 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 5 arch/arm/kernel/perf_event_v7.c:771 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8904658)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 24 23 25 5 arch/arm/kernel/perf_event_v7.c:772 (set (reg:SI 3 r3 [138])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn 25 24 36 5 arch/arm/kernel/perf_event_v7.c:772 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 0") ("") 0 [
            (reg:SI 3 r3 [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8904786) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 36 25 38 NOTE_INSN_DELETED)

(note 38 36 0 NOTE_INSN_DELETED)


;; Function armv7pmu_enable_event (armv7pmu_enable_event)[0:1345]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 209.
verify found no changes in insn with uid = 209.
deleting insn with uid = 165.
scanning new insn with uid = 210.
verify found no changes in insn with uid = 210.
deleting insn with uid = 128.
scanning new insn with uid = 211.
verify found no changes in insn with uid = 211.
deleting insn with uid = 45.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 42 count 57 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 42 count 58 (  1.9)

Pass 0 for finding allocno costs

    a3 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a5(r180,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r171,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a21(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r161,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a24(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r152,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a33(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a5(r180,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r171,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a14(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a21(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r161,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a24(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r152,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a33(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 176(l0): point = 0
   Insn 174(l0): point = 2
   Insn 175(l0): point = 4
   Insn 169(l0): point = 7
   Insn 166(l0): point = 10
   Insn 209(l0): point = 12
   Insn 164(l0): point = 14
   Insn 199(l0): point = 17
   Insn 159(l0): point = 19
   Insn 157(l0): point = 21
   Insn 156(l0): point = 23
   Insn 202(l0): point = 25
   Insn 158(l0): point = 27
   Insn 201(l0): point = 29
   Insn 149(l0): point = 32
   Insn 148(l0): point = 34
   Insn 147(l0): point = 36
   Insn 146(l0): point = 38
   Insn 145(l0): point = 40
   Insn 144(l0): point = 42
   Insn 142(l0): point = 45
   Insn 141(l0): point = 47
   Insn 197(l0): point = 50
   Insn 136(l0): point = 52
   Insn 134(l0): point = 55
   Insn 133(l0): point = 57
   Insn 132(l0): point = 59
   Insn 129(l0): point = 62
   Insn 210(l0): point = 64
   Insn 127(l0): point = 66
   Insn 195(l0): point = 69
   Insn 122(l0): point = 71
   Insn 120(l0): point = 73
   Insn 119(l0): point = 75
   Insn 204(l0): point = 77
   Insn 121(l0): point = 79
   Insn 203(l0): point = 81
   Insn 112(l0): point = 84
   Insn 111(l0): point = 86
   Insn 110(l0): point = 88
   Insn 109(l0): point = 90
   Insn 108(l0): point = 92
   Insn 107(l0): point = 94
   Insn 104(l0): point = 97
   Insn 193(l0): point = 100
   Insn 98(l0): point = 102
   Insn 96(l0): point = 105
   Insn 95(l0): point = 107
   Insn 191(l0): point = 110
   Insn 90(l0): point = 112
   Insn 89(l0): point = 114
   Insn 87(l0): point = 117
   Insn 86(l0): point = 119
   Insn 83(l0): point = 122
   Insn 82(l0): point = 124
   Insn 81(l0): point = 126
   Insn 80(l0): point = 128
   Insn 189(l0): point = 131
   Insn 74(l0): point = 133
   Insn 72(l0): point = 135
   Insn 75(l0): point = 137
   Insn 71(l0): point = 139
   Insn 206(l0): point = 141
   Insn 73(l0): point = 143
   Insn 205(l0): point = 145
   Insn 64(l0): point = 148
   Insn 63(l0): point = 150
   Insn 62(l0): point = 152
   Insn 61(l0): point = 154
   Insn 60(l0): point = 156
   Insn 59(l0): point = 158
   Insn 57(l0): point = 161
   Insn 55(l0): point = 163
   Insn 53(l0): point = 166
   Insn 52(l0): point = 168
   Insn 49(l0): point = 171
   Insn 46(l0): point = 174
   Insn 211(l0): point = 176
   Insn 44(l0): point = 178
   Insn 187(l0): point = 181
   Insn 39(l0): point = 183
   Insn 37(l0): point = 185
   Insn 36(l0): point = 187
   Insn 208(l0): point = 189
   Insn 38(l0): point = 191
   Insn 207(l0): point = 193
   Insn 29(l0): point = 196
   Insn 28(l0): point = 198
   Insn 27(l0): point = 200
   Insn 26(l0): point = 202
   Insn 25(l0): point = 204
   Insn 22(l0): point = 207
   Insn 185(l0): point = 210
   Insn 16(l0): point = 212
   Insn 14(l0): point = 215
   Insn 13(l0): point = 217
   Insn 11(l0): point = 219
   Insn 10(l0): point = 221
   Insn 9(l0): point = 223
   Insn 12(l0): point = 225
   Insn 2(l0): point = 227
   Insn 3(l0): point = 229
   Insn 7(l0): point = 231
 a0(r141): [5..219]
 a1(r133): [50..52] [8..10]
 a2(r182): [11..14]
 a3(r183): [11..12]
 a4(r140): [55..225] [28..49] [15..16]
 a5(r180): [22..29]
 a6(r177): [35..36]
 a7(r178): [37..38]
 a8(r176): [39..40]
 a9(r175): [41..42]
 a10(r135): [100..102] [60..62]
 a11(r173): [63..66]
 a12(r174): [63..64]
 a13(r171): [74..81]
 a14(r168): [87..88]
 a15(r169): [89..90]
 a16(r167): [91..92]
 a17(r166): [93..94]
 a18(r165): [113..114]
 a19(r142): [115..163]
 a20(r144): [144..229] [120..137]
 a21(r164): [125..126]
 a22(r163): [127..128]
 a23(r161): [136..145]
 a24(r158): [151..152]
 a25(r159): [153..154]
 a26(r157): [155..156]
 a27(r156): [157..158]
 a28(r143): [164..227]
 a29(r138): [210..212] [172..174]
 a30(r154): [175..178]
 a31(r155): [175..176]
 a32(r152): [186..193]
 a33(r149): [199..200]
 a34(r150): [201..202]
 a35(r148): [203..204]
 a36(r145): [215..231] [205..209]
Compressing live ranges: from 234 to 85 - 36%
Ranges after the compression:
 a0(r141): [0..80]
 a1(r133): [20..21] [1..2]
 a2(r182): [3..5]
 a3(r183): [3..4]
 a4(r140): [22..81] [9..19] [6..7]
 a5(r180): [8..10]
 a6(r177): [11..12]
 a7(r178): [13..14]
 a8(r176): [15..16]
 a9(r175): [17..18]
 a10(r135): [38..39] [23..24]
 a11(r173): [25..27]
 a12(r174): [25..26]
 a13(r171): [28..29]
 a14(r168): [30..31]
 a15(r169): [32..33]
 a16(r167): [34..35]
 a17(r166): [36..37]
 a18(r165): [40..41]
 a19(r142): [42..60]
 a20(r144): [50..83] [43..49]
 a21(r164): [44..45]
 a22(r163): [46..47]
 a23(r161): [48..51]
 a24(r158): [52..53]
 a25(r159): [54..55]
 a26(r157): [56..57]
 a27(r156): [58..59]
 a28(r143): [61..82]
 a29(r138): [77..78] [62..63]
 a30(r154): [64..66]
 a31(r155): [64..65]
 a32(r152): [67..68]
 a33(r149): [69..70]
 a34(r150): [71..72]
 a35(r148): [73..74]
 a36(r145): [79..84] [75..76]
+++Allocating 296 bytes for conflict table (uncompressed size 296)
;; a0(r141,l0) conflicts: a1(r133,l0) a3(r183,l0) a2(r182,l0) a4(r140,l0) a5(r180,l0) a6(r177,l0) a7(r178,l0) a8(r176,l0) a9(r175,l0) a10(r135,l0) a12(r174,l0) a11(r173,l0) a13(r171,l0) a14(r168,l0) a15(r169,l0) a16(r167,l0) a17(r166,l0) a18(r165,l0) a19(r142,l0) a20(r144,l0) a21(r164,l0) a22(r163,l0) a23(r161,l0) a24(r158,l0) a25(r159,l0) a26(r157,l0) a27(r156,l0) a28(r143,l0) a29(r138,l0) a31(r155,l0) a30(r154,l0) a32(r152,l0) a33(r149,l0) a34(r150,l0) a35(r148,l0) a36(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r133,l0) conflicts: a0(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r182,l0) conflicts: a0(r141,l0) a3(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r183,l0) conflicts: a0(r141,l0) a2(r182,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r140,l0) conflicts: a0(r141,l0) a5(r180,l0) a6(r177,l0) a7(r178,l0) a8(r176,l0) a9(r175,l0) a10(r135,l0) a12(r174,l0) a11(r173,l0) a13(r171,l0) a14(r168,l0) a15(r169,l0) a16(r167,l0) a17(r166,l0) a18(r165,l0) a19(r142,l0) a20(r144,l0) a21(r164,l0) a22(r163,l0) a23(r161,l0) a24(r158,l0) a25(r159,l0) a26(r157,l0) a27(r156,l0) a28(r143,l0) a29(r138,l0) a31(r155,l0) a30(r154,l0) a32(r152,l0) a33(r149,l0) a34(r150,l0) a35(r148,l0) a36(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r180,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a6(r177,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r178,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r176,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r175,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r135,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r173,l0) conflicts: a0(r141,l0) a4(r140,l0) a12(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r174,l0) conflicts: a0(r141,l0) a4(r140,l0) a11(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r171,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a14(r168,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r169,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r167,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r166,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r165,l0) conflicts: a0(r141,l0) a4(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r142,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a21(r164,l0) a22(r163,l0) a23(r161,l0) a24(r158,l0) a25(r159,l0) a26(r157,l0) a27(r156,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a20(r144,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a21(r164,l0) a22(r163,l0) a23(r161,l0) a24(r158,l0) a25(r159,l0) a26(r157,l0) a27(r156,l0) a28(r143,l0) a29(r138,l0) a31(r155,l0) a30(r154,l0) a32(r152,l0) a33(r149,l0) a34(r150,l0) a35(r148,l0) a36(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a21(r164,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r163,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r161,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a24(r158,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r159,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r157,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r156,l0) conflicts: a0(r141,l0) a4(r140,l0) a19(r142,l0) a20(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r143,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a29(r138,l0) a31(r155,l0) a30(r154,l0) a32(r152,l0) a33(r149,l0) a34(r150,l0) a35(r148,l0) a36(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a29(r138,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r154,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0) a31(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r155,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0) a30(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r152,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a33(r149,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r150,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r148,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r145,l0) conflicts: a0(r141,l0) a4(r140,l0) a20(r144,l0) a28(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a2(r182)<->a4(r140)@125:shuffle
  cp1:a1(r133)<->a3(r183)@125:shuffle
  cp2:a1(r133)<->a2(r182)@125:shuffle
  cp3:a6(r177)<->a7(r178)@125:shuffle
  cp4:a10(r135)<->a12(r174)@125:shuffle
  cp5:a10(r135)<->a11(r173)@125:shuffle
  cp6:a14(r168)<->a15(r169)@125:shuffle
  cp7:a18(r165)<->a19(r142)@125:shuffle
  cp8:a21(r164)<->a22(r163)@125:shuffle
  cp9:a24(r158)<->a25(r159)@125:shuffle
  cp10:a29(r138)<->a31(r155)@125:shuffle
  cp11:a29(r138)<->a30(r154)@125:shuffle
  cp12:a33(r149)<->a34(r150)@125:shuffle
  regions=1, blocks=30, points=85
    allocnos=37, copies=13, conflicts=1, ranges=44

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r141 1r133 2r182 3r183 4r140 5r180 6r177 7r178 8r176 9r175 10r135 11r173 12r174 13r171 14r168 15r169 16r167 17r166 18r165 19r142 20r144 21r164 22r163 23r161 24r158 25r159 26r157 27r156 28r143 29r138 30r154 31r155 32r152 33r149 34r150 35r148 36r145
    modified regnos: 133 135 138 140 141 142 143 144 145 148 149 150 152 154 155 156 157 158 159 161 163 164 165 166 167 168 169 171 173 174 175 176 177 178 180 182 183
    border:
    Pressure: GENERAL_REGS=8
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 180 of GENERAL_REGS has 2 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 2 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 2 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
      Pushing a35(r148,l0)
      Pushing a34(r150,l0)
      Pushing a33(r149,l0)
      Pushing a31(r155,l0)
      Pushing a30(r154,l0)
      Pushing a27(r156,l0)
      Pushing a26(r157,l0)
      Pushing a25(r159,l0)
      Pushing a24(r158,l0)
      Pushing a22(r163,l0)
      Pushing a21(r164,l0)
      Pushing a18(r165,l0)
      Pushing a17(r166,l0)
      Pushing a16(r167,l0)
      Pushing a15(r169,l0)
      Pushing a14(r168,l0)
      Pushing a12(r174,l0)
      Pushing a11(r173,l0)
      Pushing a9(r175,l0)
      Pushing a8(r176,l0)
      Pushing a7(r178,l0)
      Pushing a6(r177,l0)
      Pushing a3(r183,l0)
      Pushing a2(r182,l0)
      Pushing a29(r138,l0)
      Pushing a10(r135,l0)
      Pushing a1(r133,l0)
      Pushing a32(r152,l0)
      Pushing a23(r161,l0)
      Pushing a13(r171,l0)
      Pushing a5(r180,l0)
      Pushing a36(r145,l0)
      Pushing a28(r143,l0)
      Pushing a19(r142,l0)
      Pushing a0(r141,l0)
      Pushing a4(r140,l0)
      Pushing a20(r144,l0)
      Popping a20(r144,l0)  -- assign reg 4
      Popping a4(r140,l0)  -- assign reg 5
      Popping a0(r141,l0)  -- assign reg 6
      Popping a19(r142,l0)  -- assign reg 7
      Popping a28(r143,l0)  -- assign reg 7
      Popping a36(r145,l0)  -- assign reg 8
      Popping a5(r180,l0)  -- assign reg 3
      Popping a13(r171,l0)  -- assign reg 3
      Popping a23(r161,l0)  -- assign reg 3
      Popping a32(r152,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 5
      Popping a10(r135,l0)  -- assign reg 3
      Popping a29(r138,l0)  -- assign reg 3
      Popping a2(r182,l0)  -- assign reg 5
      Popping a3(r183,l0)  -- assign reg 3
      Popping a6(r177,l0)  -- assign reg 3
      Popping a7(r178,l0)  -- assign reg 3
      Popping a8(r176,l0)  -- assign reg 3
      Popping a9(r175,l0)  -- assign reg 3
      Popping a11(r173,l0)  -- assign reg 3
      Popping a12(r174,l0)  -- assign reg 2
      Popping a14(r168,l0)  -- assign reg 3
      Popping a15(r169,l0)  -- assign reg 3
      Popping a16(r167,l0)  -- assign reg 3
      Popping a17(r166,l0)  -- assign reg 3
      Popping a18(r165,l0)  -- assign reg 7
      Popping a21(r164,l0)  -- assign reg 3
      Popping a22(r163,l0)  -- assign reg 3
      Popping a24(r158,l0)  -- assign reg 3
      Popping a25(r159,l0)  -- assign reg 3
      Popping a26(r157,l0)  -- assign reg 3
      Popping a27(r156,l0)  -- assign reg 3
      Popping a30(r154,l0)  -- assign reg 3
      Popping a31(r155,l0)  -- assign reg 2
      Popping a33(r149,l0)  -- assign reg 3
      Popping a34(r150,l0)  -- assign reg 3
      Popping a35(r148,l0)  -- assign reg 3
Disposition:
    1:r133 l0     5   10:r135 l0     3   29:r138 l0     3    4:r140 l0     5
    0:r141 l0     6   19:r142 l0     7   28:r143 l0     7   20:r144 l0     4
   36:r145 l0     8   35:r148 l0     3   33:r149 l0     3   34:r150 l0     3
   32:r152 l0     3   30:r154 l0     3   31:r155 l0     2   27:r156 l0     3
   26:r157 l0     3   24:r158 l0     3   25:r159 l0     3   23:r161 l0     3
   22:r163 l0     3   21:r164 l0     3   18:r165 l0     7   17:r166 l0     3
   16:r167 l0     3   14:r168 l0     3   15:r169 l0     3   13:r171 l0     3
   11:r173 l0     3   12:r174 l0     2    9:r175 l0     3    8:r176 l0     3
    6:r177 l0     3    7:r178 l0     3    5:r180 l0     3    2:r182 l0     5
    3:r183 l0     3
New iteration of spill/restore move
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 145
insn=3, live_throughout: 0, 13, 145, dead_or_set: 1, 144
insn=2, live_throughout: 13, 144, 145, dead_or_set: 0, 143
insn=12, live_throughout: 13, 143, 144, 145, dead_or_set: 140
insn=9, live_throughout: 13, 140, 143, 144, 145, dead_or_set: 0
insn=10, live_throughout: 13, 140, 143, 144, 145, dead_or_set: 0, 14
insn=11, live_throughout: 13, 14, 140, 143, 144, 145, dead_or_set: 0, 141
insn=13, live_throughout: 13, 14, 140, 141, 143, 144, 145, dead_or_set: 
insn=14, live_throughout: 13, 14, 24, 140, 141, 143, 144, 145, dead_or_set: 
insn=16, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 138
insn=185, live_throughout: 13, 14, 138, 140, 141, 143, 144, dead_or_set: 
insn=19, live_throughout: 13, 14, 24, 140, 141, 143, 144, 145, dead_or_set: 
insn=22, live_throughout: 13, 14, 140, 141, 143, 144, 145, dead_or_set: 
insn=25, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 145, 148
insn=26, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 148, 150
insn=27, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 149, 150
insn=28, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 149
insn=29, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 
insn=30, live_throughout: 13, 140, 141, 143, 144, dead_or_set: 
insn=207, live_throughout: 13, 140, 141, 143, 144, dead_or_set: 152
insn=38, live_throughout: 13, 140, 141, 143, 144, 152, dead_or_set: 2
insn=208, live_throughout: 2, 13, 140, 141, 143, 144, dead_or_set: 152
insn=36, live_throughout: 2, 13, 140, 141, 143, 144, 152, dead_or_set: 0
insn=37, live_throughout: 0, 2, 13, 140, 141, 143, 144, dead_or_set: 1, 152
insn=39, live_throughout: 13, 140, 141, 143, 144, dead_or_set: 0, 1, 2, 14
insn=187, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 
insn=42, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 
insn=44, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 154
insn=211, live_throughout: 13, 14, 140, 141, 143, 144, 154, dead_or_set: 155
insn=46, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 138, 154, 155
insn=47, live_throughout: 13, 14, 138, 140, 141, 143, 144, dead_or_set: 
insn=49, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 138
insn=50, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 
insn=52, live_throughout: 13, 14, 140, 141, 143, 144, dead_or_set: 
insn=53, live_throughout: 13, 14, 24, 140, 141, 143, 144, dead_or_set: 
insn=55, live_throughout: 13, 14, 24, 140, 141, 144, dead_or_set: 142, 143
insn=57, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=59, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 156
insn=60, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 156, 157
insn=61, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 157, 159
insn=62, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 158, 159
insn=63, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 158
insn=64, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=65, live_throughout: 13, 140, 141, 142, 144, dead_or_set: 
insn=205, live_throughout: 13, 140, 141, 142, 144, dead_or_set: 161
insn=73, live_throughout: 13, 140, 141, 142, 161, dead_or_set: 2, 144
insn=206, live_throughout: 2, 13, 140, 141, 142, dead_or_set: 161
insn=71, live_throughout: 2, 13, 140, 141, 142, 161, dead_or_set: 0
insn=75, live_throughout: 0, 2, 13, 140, 141, 142, 161, dead_or_set: 144
insn=72, live_throughout: 0, 2, 13, 140, 141, 142, 144, dead_or_set: 1, 161
insn=74, live_throughout: 13, 140, 141, 142, 144, dead_or_set: 0, 1, 2, 14
insn=189, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=78, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=80, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 163
insn=81, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 163, 164
insn=82, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 164
insn=83, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=84, live_throughout: 13, 14, 140, 141, 142, 144, dead_or_set: 
insn=86, live_throughout: 13, 14, 140, 141, 142, dead_or_set: 144
insn=87, live_throughout: 13, 14, 140, 141, 142, dead_or_set: 
insn=89, live_throughout: 13, 14, 140, 141, dead_or_set: 142, 165
insn=90, live_throughout: 13, 14, 140, 141, dead_or_set: 165
insn=191, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=93, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=95, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=96, live_throughout: 13, 14, 24, 140, 141, dead_or_set: 
insn=98, live_throughout: 13, 14, 140, 141, dead_or_set: 135
insn=193, live_throughout: 13, 14, 135, 140, 141, dead_or_set: 
insn=101, live_throughout: 13, 14, 24, 140, 141, dead_or_set: 
insn=104, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=105, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=107, live_throughout: 13, 14, 140, 141, dead_or_set: 166
insn=108, live_throughout: 13, 14, 140, 141, dead_or_set: 166, 167
insn=109, live_throughout: 13, 14, 140, 141, dead_or_set: 167, 169
insn=110, live_throughout: 13, 14, 140, 141, dead_or_set: 168, 169
insn=111, live_throughout: 13, 14, 140, 141, dead_or_set: 168
insn=112, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=113, live_throughout: 13, 140, 141, dead_or_set: 
insn=203, live_throughout: 13, 140, 141, dead_or_set: 171
insn=121, live_throughout: 13, 140, 141, 171, dead_or_set: 2
insn=204, live_throughout: 2, 13, 140, 141, dead_or_set: 171
insn=119, live_throughout: 2, 13, 140, 141, 171, dead_or_set: 0
insn=120, live_throughout: 0, 2, 13, 140, 141, dead_or_set: 1, 171
insn=122, live_throughout: 13, 140, 141, dead_or_set: 0, 1, 2, 14
insn=195, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=125, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=127, live_throughout: 13, 14, 140, 141, dead_or_set: 173
insn=210, live_throughout: 13, 14, 140, 141, 173, dead_or_set: 174
insn=129, live_throughout: 13, 14, 140, 141, dead_or_set: 135, 173, 174
insn=130, live_throughout: 13, 14, 135, 140, 141, dead_or_set: 
insn=132, live_throughout: 13, 14, 140, 141, dead_or_set: 135
insn=133, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=134, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=136, live_throughout: 13, 14, 141, dead_or_set: 133
insn=197, live_throughout: 13, 14, 133, 141, dead_or_set: 
insn=139, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=141, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=142, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=144, live_throughout: 13, 14, 140, 141, dead_or_set: 175
insn=145, live_throughout: 13, 14, 140, 141, dead_or_set: 175, 176
insn=146, live_throughout: 13, 14, 140, 141, dead_or_set: 176, 178
insn=147, live_throughout: 13, 14, 140, 141, dead_or_set: 177, 178
insn=148, live_throughout: 13, 14, 140, 141, dead_or_set: 177
insn=149, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=150, live_throughout: 13, 140, 141, dead_or_set: 
insn=201, live_throughout: 13, 140, 141, dead_or_set: 180
insn=158, live_throughout: 13, 141, 180, dead_or_set: 2, 140
insn=202, live_throughout: 2, 13, 141, dead_or_set: 180
insn=156, live_throughout: 2, 13, 141, 180, dead_or_set: 0
insn=157, live_throughout: 0, 2, 13, 141, dead_or_set: 1, 180
insn=159, live_throughout: 13, 141, dead_or_set: 0, 1, 2, 14
insn=199, live_throughout: 13, 14, 141, dead_or_set: 
insn=162, live_throughout: 13, 14, 140, 141, dead_or_set: 
insn=164, live_throughout: 13, 14, 141, dead_or_set: 140, 182
insn=209, live_throughout: 13, 14, 141, 182, dead_or_set: 183
insn=166, live_throughout: 13, 14, 141, dead_or_set: 133, 182, 183
insn=167, live_throughout: 13, 14, 133, 141, dead_or_set: 
insn=169, live_throughout: 13, 14, 141, dead_or_set: 133
insn=170, live_throughout: 13, 14, 141, dead_or_set: 
insn=175, live_throughout: 13, 14, dead_or_set: 1, 141
insn=174, live_throughout: 1, 13, 14, dead_or_set: 0
insn=176, live_throughout: 13, 14, dead_or_set: 0, 1
init_insns for 145: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 211 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 59 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 107 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 210 (nil))
init_insns for 175: (insn_list:REG_DEP_TRUE 144 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 209 (nil))
changing reg in insn 166
changing reg in insn 136
changing reg in insn 169
changing reg in insn 129
changing reg in insn 98
changing reg in insn 132
changing reg in insn 46
changing reg in insn 16
changing reg in insn 49
changing reg in insn 12
changing reg in insn 164
changing reg in insn 158
changing reg in insn 148
changing reg in insn 141
changing reg in insn 133
changing reg in insn 127
changing reg in insn 121
changing reg in insn 111
changing reg in insn 95
changing reg in insn 86
changing reg in insn 11
changing reg in insn 175
changing reg in insn 55
changing reg in insn 89
changing reg in insn 2
changing reg in insn 55
changing reg in insn 75
changing reg in insn 3
changing reg in insn 80
changing reg in insn 73
changing reg in insn 63
changing reg in insn 38
changing reg in insn 44
changing reg in insn 28
changing reg in insn 13
changing reg in insn 86
changing reg in insn 52
changing reg in insn 12
changing reg in insn 7
changing reg in insn 9
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 208
changing reg in insn 207
changing reg in insn 208
changing reg in insn 37
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 211
changing reg in insn 46
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 61
changing reg in insn 62
changing reg in insn 206
changing reg in insn 205
changing reg in insn 206
changing reg in insn 72
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 90
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 109
changing reg in insn 110
changing reg in insn 204
changing reg in insn 203
changing reg in insn 204
changing reg in insn 120
changing reg in insn 127
changing reg in insn 129
changing reg in insn 129
changing reg in insn 210
changing reg in insn 129
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 202
changing reg in insn 201
changing reg in insn 202
changing reg in insn 157
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 209
changing reg in insn 166
Spilling for insn 207.
Using reg 2 for reload 0
Spilling for insn 205.
Using reg 2 for reload 0
Spilling for insn 203.
Using reg 2 for reload 0
Spilling for insn 201.
Using reg 2 for reload 0

Reloads for insn # 207
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 205
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 203
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 201
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 159.
verify found no changes in insn with uid = 176.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 42 count 57 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 42 count 58 (  1.9)


armv7pmu_enable_event

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,8u} r1={12d,6u} r2={17d,10u} r3={39d,30u,2d} r4={2d,10u} r5={4d,12u,1d} r6={1d,1u} r7={3d,3u} r8={1d,2u} r12={7d} r13={1d,39u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,13u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 920{782d,135u,3e} in 107{101 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 3 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/f:SI 8 r8 [145])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 3 7 2 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (reg:SI 1 r1 [ idx ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 12 2 arch/arm/kernel/perf_event_v7.c:989 (set (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
        (reg:SI 0 r0 [ hwc ])) 167 {*arm_movsi_insn} (nil))

(insn 12 2 9 2 arch/arm/kernel/perf_event_v7.c:1001 (set (reg/v:SI 5 r5 [orig:140 idx ] [140])
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 9 12 10 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 8 r8 [145])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 10 9 11 2 arch/arm/kernel/perf_event_v7.c:996 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10b86a00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 13 2 arch/arm/kernel/perf_event_v7.c:996 (set (reg/v:SI 6 r6 [orig:141 flags ] [141])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 13 11 14 2 arch/arm/kernel/perf_event_v7.c:877 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 14 13 15 2 arch/arm/kernel/perf_event_v7.c:877 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  4 [72.0%] 
;; Succ edge  3 [28.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 185 3 arch/arm/kernel/perf_event_v7.c:885 (set (reg/v:SI 3 r3 [orig:138 val ] [138])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2147483648 [0xffffffff80000000])
        (nil)))

(jump_insn 185 16 186 3 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 186 185 19)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 19 186 20 4 231 "" [1 uses])

(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 22 20 23 4 arch/arm/kernel/perf_event_v7.c:877 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 23 22 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 26 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [145]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 26 25 27 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:148 armpmu ] [148])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 28 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:SI 3 r3 [149])
        (plus:SI (reg:SI 3 r3 [orig:150 <variable>.num_events ] [150])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 28 27 29 5 arch/arm/kernel/perf_event_v7.c:878 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 5 arch/arm/kernel/perf_event_v7.c:878 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
(code_label 30 29 31 6 233 "" [1 uses])

(note 31 30 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 34 31 213 6 NOTE_INSN_DELETED)

(insn 213 34 207 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 207 213 38 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 38 207 208 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 208 38 36 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 3 r3 [152])
        (and:SI (reg:SI 3 r3 [152])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 36 208 37 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x113e5120>)
        (nil)))

(insn 37 36 39 6 arch/arm/kernel/perf_event_v7.c:879 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [152])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 39 37 187 6 arch/arm/kernel/perf_event_v7.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 187 39 188 6 (set (pc)
        (label_ref 50)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 188 187 42)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 42 188 43 7 234 "" [1 uses])

(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 211 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 3 r3 [154])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 211 44 46 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg:SI 2 r2 [155])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 46 211 47 7 arch/arm/kernel/perf_event_v7.c:887 (set (reg/v:SI 3 r3 [orig:138 val ] [138])
        (ashift:SI (reg:SI 2 r2 [155])
            (reg:SI 3 r3 [154]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 3 r3 [154]))
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 47 46 48 8 232 "" [1 uses])

(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 8 arch/arm/kernel/perf_event_v7.c:889 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 2") ("") 0 [
            (reg/v:SI 3 r3 [orig:138 val ] [138])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8919762) -1 (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 6) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 50 49 51 9 235 "" [1 uses])

(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 9 arch/arm/kernel/perf_event_v7.c:1007 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 53 52 54 9 arch/arm/kernel/perf_event_v7.c:1007 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 9 -> ( 10 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]


;; Succ edge  10 [72.0%]  (fallthru)
;; Succ edge  16 [28.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 7 [r7] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  9 [72.0%]  (fallthru)
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 57 10 arch/arm/kernel/perf_event_v7.c:1008 (set (reg:SI 7 r7 [orig:142 D.25960 ] [142])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:143 hwc ] [143])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(jump_insn 57 55 58 10 arch/arm/kernel/perf_event_v7.c:800 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 65)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [0.0%] 
;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
(note 58 57 59 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 59 58 60 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 60 59 61 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [156]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 61 60 62 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:157 armpmu ] [157])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:SI 3 r3 [158])
        (plus:SI (reg:SI 3 r3 [orig:159 <variable>.num_events ] [159])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 63 62 64 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg:SI 3 r3 [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 64 63 65 11 arch/arm/kernel/perf_event_v7.c:800 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  13 [100.0%] 

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  10 [0.0%] 
;; Pred edge  11 [0.0%]  (fallthru)
(code_label 65 64 66 12 237 "" [1 uses])

(note 66 65 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 69 66 214 12 NOTE_INSN_DELETED)

(insn 214 69 205 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 205 214 73 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 73 205 206 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:144 idx ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 206 73 71 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 3 r3 [161])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 71 206 75 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x111c4900>)
        (nil)))

(insn 75 71 72 12 arch/arm/kernel/perf_event_v7.c:803 (set (reg/v:SI 4 r4 [orig:144 idx ] [144])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 72 75 74 12 arch/arm/kernel/perf_event_v7.c:801 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [161])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 74 72 189 12 arch/arm/kernel/perf_event_v7.c:801 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 189 74 190 12 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 190 189 78)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 78 190 79 13 238 "" [1 uses])

(note 79 78 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 13 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [163])
        (plus:SI (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 81 80 82 13 arch/arm/kernel/perf_event_v7.c:807 (set (reg:SI 3 r3 [164])
        (and:SI (reg:SI 3 r3 [163])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 82 81 83 13 arch/arm/kernel/perf_event_v7.c:807 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 5") ("") 0 [
            (reg:SI 3 r3 [164])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8909266) -1 (nil))

(insn 83 82 84 13 arch/arm/kernel/perf_event_v7.c:808 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 8909394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 84 83 85 14 239 "" [1 uses])

(note 85 84 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 14 arch/arm/kernel/perf_event_v7.c:845 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:144 idx ] [144])
            (reg/v:SI 5 r5 [orig:140 idx ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 87 86 88 14 arch/arm/kernel/perf_event_v7.c:845 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [28.0%]  (fallthru)
;; Succ edge  16 [72.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  14 [28.0%]  (fallthru)
(note 88 87 89 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 15 arch/arm/kernel/perf_event_v7.c:847 (set (reg:SI 7 r7 [165])
        (and:SI (reg:SI 7 r7 [orig:142 D.25960 ] [142])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 90 89 191 15 arch/arm/kernel/perf_event_v7.c:847 (asm_operands/v ("mcr p15, 0, %0, c9, c13, 1") ("") 0 [
            (reg:SI 7 r7 [165])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8914387) -1 (nil))

(jump_insn 191 90 192 15 (set (pc)
        (label_ref 105)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 19)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 192 191 93)

;; Start of basic block ( 9 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [28.0%] 
;; Pred edge  14 [72.0%] 
(code_label 93 192 94 16 236 "" [2 uses])

(note 94 93 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 16 arch/arm/kernel/perf_event_v7.c:898 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 96 95 97 16 arch/arm/kernel/perf_event_v7.c:898 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 101)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6493 [0x195d])
        (nil)))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  18 [64.9%] 
;; Succ edge  17 [35.1%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  16 [35.1%]  (fallthru)
(note 97 96 98 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 193 17 arch/arm/kernel/perf_event_v7.c:906 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2147483648 [0xffffffff80000000])
        (nil)))

(jump_insn 193 98 194 17 (set (pc)
        (label_ref 130)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 22)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 194 193 101)

;; Start of basic block ( 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [64.9%] 
(code_label 101 194 102 18 241 "" [1 uses])

(note 102 101 104 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 104 102 105 18 arch/arm/kernel/perf_event_v7.c:898 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 113)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6 [0x6])
        (nil)))
;; End of basic block 18 -> ( 20 19)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  20 [0.1%] 
;; Succ edge  19 [99.9%]  (fallthru)

;; Start of basic block ( 18 15) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  18 [99.9%]  (fallthru)
;; Pred edge  15 [100.0%] 
(code_label 105 104 106 19 240 "" [1 uses])

(note 106 105 107 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 19 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [166])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 108 107 109 19 arch/arm/kernel/perf_event_v7.c:899 (set (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [166]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 109 108 110 19 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:167 armpmu ] [167])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 110 109 111 19 arch/arm/kernel/perf_event_v7.c:899 (set (reg:SI 3 r3 [168])
        (plus:SI (reg:SI 3 r3 [orig:169 <variable>.num_events ] [169])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 111 110 112 19 arch/arm/kernel/perf_event_v7.c:899 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [168]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 113 19 arch/arm/kernel/perf_event_v7.c:899 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  20 [0.0%]  (fallthru)
;; Succ edge  21 [100.0%] 

;; Start of basic block ( 18 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  18 [0.1%] 
;; Pred edge  19 [0.0%]  (fallthru)
(code_label 113 112 114 20 243 "" [1 uses])

(note 114 113 117 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 117 114 215 20 NOTE_INSN_DELETED)

(insn 215 117 203 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 203 215 121 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 121 203 204 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 204 121 119 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 3 r3 [171])
        (and:SI (reg:SI 3 r3 [171])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 119 204 120 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x116e47e0>)
        (nil)))

(insn 120 119 122 20 arch/arm/kernel/perf_event_v7.c:900 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [171])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 122 120 195 20 arch/arm/kernel/perf_event_v7.c:900 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 195 122 196 20 (set (pc)
        (label_ref 139)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 24)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 196 195 125)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  19 [100.0%] 
(code_label 125 196 126 21 244 "" [1 uses])

(note 126 125 127 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 210 21 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 3 r3 [173])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 210 127 129 21 arch/arm/kernel/perf_event_v7.c:908 (set (reg:SI 2 r2 [174])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 129 210 130 21 arch/arm/kernel/perf_event_v7.c:908 (set (reg/v:SI 3 r3 [orig:135 val ] [135])
        (ashift:SI (reg:SI 2 r2 [174])
            (reg:SI 3 r3 [173]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 3 r3 [173]))
        (nil)))
;; End of basic block 21 -> ( 22)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 17) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  17 [100.0%] 
(code_label 130 129 131 22 242 "" [1 uses])

(note 131 130 132 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 22 arch/arm/kernel/perf_event_v7.c:910 (asm_operands/v ("mcr p15, 0, %0, c9, c14, 1") ("") 0 [
            (reg/v:SI 3 r3 [orig:135 val ] [135])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8922450) -1 (nil))

(insn 133 132 134 22 arch/arm/kernel/perf_event_v7.c:855 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 134 133 135 22 arch/arm/kernel/perf_event_v7.c:855 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 139)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7198 [0x1c1e])
        (nil)))
;; End of basic block 22 -> ( 24 23)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  24 [72.0%] 
;; Succ edge  23 [28.0%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  22 [28.0%]  (fallthru)
(note 135 134 136 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 136 135 197 23 arch/arm/kernel/perf_event_v7.c:863 (set (reg/v:SI 5 r5 [orig:133 val ] [133])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2147483648 [0xffffffff80000000])
        (nil)))

(jump_insn 197 136 198 23 (set (pc)
        (label_ref 167)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 28)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 198 197 139)

;; Start of basic block ( 22 20) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  22 [72.0%] 
;; Pred edge  20 [100.0%] 
(code_label 139 198 140 24 245 "" [2 uses])

(note 140 139 141 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 141 140 142 24 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 142 141 143 24 arch/arm/kernel/perf_event_v7.c:855 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 24 -> ( 26 25)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  26 [0.0%] 
;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  24 [100.0%]  (fallthru)
(note 143 142 144 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 144 143 145 25 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 145 144 146 25 arch/arm/kernel/perf_event_v7.c:856 (set (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [175]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
        (nil)))

(insn 146 145 147 25 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:176 armpmu ] [176])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 147 146 148 25 arch/arm/kernel/perf_event_v7.c:856 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [orig:178 <variable>.num_events ] [178])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 148 147 149 25 arch/arm/kernel/perf_event_v7.c:856 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (reg:SI 3 r3 [177]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 149 148 150 25 arch/arm/kernel/perf_event_v7.c:856 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  26 [0.0%]  (fallthru)
;; Succ edge  27 [100.0%] 

;; Start of basic block ( 24 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  24 [0.0%] 
;; Pred edge  25 [0.0%]  (fallthru)
(code_label 150 149 151 26 247 "" [1 uses])

(note 151 150 154 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 154 151 216 26 NOTE_INSN_DELETED)

(insn 216 154 201 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 201 216 158 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 158 201 202 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:140 idx ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 202 158 156 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 3 r3 [180])
        (and:SI (reg:SI 3 r3 [180])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 156 202 157 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x1156a840>)
        (nil)))

(insn 157 156 159 26 arch/arm/kernel/perf_event_v7.c:857 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [180])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 159 157 199 26 arch/arm/kernel/perf_event_v7.c:857 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 199 159 200 26 (set (pc)
        (label_ref 170)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 29)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  29 [100.0%] 

(barrier 200 199 162)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  25 [100.0%] 
(code_label 162 200 163 27 248 "" [1 uses])

(note 163 162 164 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 164 163 209 27 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 5 r5 [182])
        (plus:SI (reg/v:SI 5 r5 [orig:140 idx ] [140])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 209 164 166 27 arch/arm/kernel/perf_event_v7.c:865 (set (reg:SI 3 r3 [183])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 166 209 167 27 arch/arm/kernel/perf_event_v7.c:865 (set (reg/v:SI 5 r5 [orig:133 val ] [133])
        (ashift:SI (reg:SI 3 r3 [183])
            (reg:SI 5 r5 [182]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg:SI 5 r5 [182]))
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 23) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  23 [100.0%] 
(code_label 167 166 168 28 246 "" [1 uses])

(note 168 167 169 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 169 168 170 28 arch/arm/kernel/perf_event_v7.c:867 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 1") ("") 0 [
            (reg/v:SI 5 r5 [orig:133 val ] [133])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8916946) -1 (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  29 [100.0%]  (fallthru)

;; Start of basic block ( 28 26) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  28 [100.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 170 169 171 29 249 "" [1 uses])

(note 171 170 175 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 175 171 174 29 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:141 flags ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 174 175 176 29 arch/arm/kernel/perf_event_v7.c:1020 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn/j 176 174 177 29 arch/arm/kernel/perf_event_v7.c:1020 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10b86d80 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 29 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 177 176 212)

(note 212 177 0 NOTE_INSN_DELETED)


;; Function armv7pmu_get_event_idx (armv7pmu_get_event_idx)[0:1350]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a6 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 60(l0): point = 0
   Insn 54(l0): point = 2
   Insn 47(l0): point = 5
   Insn 70(l0): point = 8
   Insn 25(l0): point = 10
   Insn 23(l0): point = 13
   Insn 22(l0): point = 15
   Insn 20(l0): point = 17
   Insn 18(l0): point = 19
   Insn 19(l0): point = 21
   Insn 68(l0): point = 24
   Insn 40(l0): point = 26
   Insn 12(l0): point = 28
   Insn 9(l0): point = 31
   Insn 8(l0): point = 33
   Insn 65(l0): point = 35
   Insn 7(l0): point = 37
   Insn 44(l1): point = 40
   Insn 43(l1): point = 42
   Insn 42(l1): point = 44
   Insn 41(l1): point = 46
   Insn 30(l1): point = 48
   Insn 29(l1): point = 50
   Insn 36(l1): point = 53
   Insn 34(l1): point = 56
   Insn 33(l1): point = 58
   Insn 31(l1): point = 60
 a0(r134): [24..28] [8..10] [3..5]
 a1(r146): [22..35]
 a2(r147): [24..26]
 a3(r140): [34..37]
 a4(r134): [40..62]
 a5(r146): [40..62]
 a6(r147): [40..62]
 a7(r144): [43..44]
 a8(r143): [45..46]
 Rebuilding regno allocno list for 144
 Rebuilding regno allocno list for 143
Compressing live ranges: from 63 to 17 - 26%
Ranges after the compression:
 a0(r134): [11..16] [5..7] [2..3] [0..1]
 a1(r146): [11..16] [4..9]
 a2(r147): [11..16] [5..6]
 a3(r140): [8..10]
 a7(r144): [12..13]
 a8(r143): [14..15]
+++Allocating 48 bytes for conflict table (uncompressed size 72)
;; a0(r134,l0) conflicts: a1(r146,l0) a2(r147,l0) a7(r144,l0) a8(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r146,l0) conflicts: a0(r134,l0) a2(r147,l0) a3(r140,l0) a7(r144,l0) a8(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r147,l0) conflicts: a0(r134,l0) a1(r146,l0) a7(r144,l0) a8(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r140,l0) conflicts: a1(r146,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a7(r144,l0) conflicts: a0(r134,l0) a1(r146,l0) a2(r147,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r143,l0) conflicts: a0(r134,l0) a1(r146,l0) a2(r147,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  regions=2, blocks=11, points=17
    allocnos=9, copies=0, conflicts=1, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r134 1r146 2r147 3r140 7r144 8r143
    modified regnos: 134 140 143 144 146 147
    border:
    Pressure: GENERAL_REGS=7
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
      Pushing a3(r140,l0)
      Pushing a8(r143,l0)
      Pushing a7(r144,l0)
      Pushing a2(r147,l0)
      Pushing a1(r146,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 4
      Popping a1(r146,l0)  -- assign reg 5
      Popping a2(r147,l0)  -- assign reg 6
      Popping a7(r144,l0)  -- assign reg 3
      Popping a8(r143,l0)  -- assign reg 3
      Popping a3(r140,l0)  -- assign reg 3
Disposition:
    0:r134 l0     4    3:r140 l0     3    8:r143 l0     3    7:r144 l0     3
    1:r146 l0     5    2:r147 l0     6
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 1, 140
insn=65, live_throughout: 13, 14, 140, dead_or_set: 0, 146
insn=8, live_throughout: 13, 14, 146, dead_or_set: 140
insn=9, live_throughout: 13, 14, 146, dead_or_set: 
insn=12, live_throughout: 13, 14, 146, dead_or_set: 134
insn=40, live_throughout: 13, 14, 134, 146, dead_or_set: 147
insn=68, live_throughout: 13, 14, 134, 146, 147, dead_or_set: 
insn=15, live_throughout: 13, 146, dead_or_set: 
insn=19, live_throughout: 13, dead_or_set: 1, 146
insn=18, live_throughout: 1, 13, dead_or_set: 0
insn=20, live_throughout: 13, dead_or_set: 0, 1, 14
insn=22, live_throughout: 13, 14, dead_or_set: 0
insn=23, live_throughout: 13, 14, dead_or_set: 
insn=25, live_throughout: 13, 14, dead_or_set: 134
insn=70, live_throughout: 13, 14, 134, dead_or_set: 
insn=39, live_throughout: 0, 1, 13, 134, 146, 147, dead_or_set: 
insn=31, live_throughout: 13, 134, 146, 147, dead_or_set: 0, 1, 14
insn=33, live_throughout: 13, 14, 134, 146, 147, dead_or_set: 0
insn=34, live_throughout: 13, 14, 134, 146, 147, dead_or_set: 
insn=36, live_throughout: 13, 14, 146, 147, dead_or_set: 134
insn=37, live_throughout: 13, 14, 134, 146, 147, dead_or_set: 
insn=29, live_throughout: 13, 14, 134, 146, 147, dead_or_set: 0
insn=30, live_throughout: 0, 13, 14, 134, 146, 147, dead_or_set: 1
insn=41, live_throughout: 0, 1, 13, 14, 134, 146, 147, dead_or_set: 143
insn=42, live_throughout: 0, 1, 13, 14, 134, 146, 147, dead_or_set: 143, 144
insn=43, live_throughout: 0, 1, 13, 14, 134, 146, 147, dead_or_set: 144
insn=44, live_throughout: 0, 1, 13, 14, 134, 146, 147, dead_or_set: 
insn=45, live_throughout: 13, 14, dead_or_set: 
insn=47, live_throughout: 13, 14, dead_or_set: 134
insn=48, live_throughout: 13, 14, 134, dead_or_set: 
insn=54, live_throughout: 13, 14, dead_or_set: 0, 134
insn=60, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 40 (nil))
changing reg in insn 47
changing reg in insn 36
changing reg in insn 25
changing reg in insn 12
changing reg in insn 54
changing reg in insn 43
changing reg in insn 36
changing reg in insn 29
changing reg in insn 7
changing reg in insn 8
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 65
changing reg in insn 30
changing reg in insn 19
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 23 (  2.1)


armv7pmu_get_event_idx

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={3d} r3={6d,3u} r4={4d,4u} r5={1d,2u} r6={1d,1u,1d} r12={3d} r13={1d,12u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 297{259d,37u,1e} in 27{25 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 65 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ event ])
                (const_int 16 [0x10])) [0 <variable>.D.23168.D.23159.config_base+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 65 7 8 2 (set (reg/f:SI 5 r5 [146])
        (plus:SI (reg:SI 0 r0 [ cpuc ])
            (const_int 132 [0x84]))) 4 {*arm_addsi3} (nil))

(insn 8 65 9 2 arch/arm/kernel/perf_event_v7.c:1134 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 <variable>.D.23168.D.23159.config_base ] [140])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1134 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1371 [0x55b])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  4 [13.7%] 
;; Succ edge  3 [86.3%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 6 [r6]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  2 [86.3%]  (fallthru)
(note 10 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 10 40 3 arch/arm/kernel/perf_event_v7.c:1145 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 40 12 68 3 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/f:SI 6 r6 [147])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 68 40 69 3 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 69 68 15)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [13.7%] 
(code_label 15 69 16 4 254 "" [1 uses])

(note 16 15 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 16 19 4 NOTE_INSN_DELETED)

(insn 19 21 18 4 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(insn 18 19 20 4 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 20 18 22 4 arch/arm/kernel/perf_event_v7.c:1135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 22 20 23 4 arch/arm/kernel/perf_event_v7.c:1135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 4 arch/arm/kernel/perf_event_v7.c:1135 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 9 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 70 5 arch/arm/kernel/perf_event_v7.c:1138 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 70 25 71 5 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 10)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 71 70 39)

;; Start of basic block ( 8) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [95.5%] 
(code_label 39 71 28 6 258 "" [1 uses])

(note 28 39 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 32 28 31 6 NOTE_INSN_DELETED)

(call_insn 31 32 33 6 arch/arm/kernel/perf_event_v7.c:1145 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_test_and_set_bit") [flags 0x41] <function_decl 0x512e0180 _test_and_set_bit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 33 31 34 6 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 34 33 35 6 arch/arm/kernel/perf_event_v7.c:1145 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 6 -> ( 10 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [4.5%]  (loop_exit)
;; Succ edge  7 [95.5%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  6 [95.5%]  (fallthru)
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 7 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 37 36 38 8 255 "" [1 uses])

(note 38 37 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 29 38 30 8 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 30 29 41 8 arch/arm/kernel/perf_event_v7.c:1145 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [146])) 167 {*arm_movsi_insn} (nil))

(insn 41 30 42 8 arch/arm/kernel/perf_event_v7.c:1144 (set (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 42 41 43 8 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:143 armpmu ] [143])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 43 42 44 8 arch/arm/kernel/perf_event_v7.c:1144 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 idx ] [134])
            (reg:SI 3 r3 [orig:144 <variable>.num_events ] [144]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 45 8 arch/arm/kernel/perf_event_v7.c:1144 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 8 -> ( 6 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [95.5%] 
;; Succ edge  9 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 4 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  8 [4.5%]  (fallthru,loop_exit)
(code_label 45 44 46 9 256 "" [1 uses])

(note 46 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 48 9 arch/arm/kernel/perf_event_v7.c:1136 (set (reg/v:SI 4 r4 [orig:134 idx ] [134])
        (const_int -11 [0xfffffffffffffff5])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 6 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  6 [4.5%]  (loop_exit)
;; Pred edge  5 [100.0%] 
(code_label 48 47 49 10 257 "" [2 uses])

(note 49 48 54 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 54 49 60 10 arch/arm/kernel/perf_event_v7.c:1152 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:134 idx ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 60 54 72 10 arch/arm/kernel/perf_event_v7.c:1152 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 72 60 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)


;; Function armv7pmu_handle_irq (armv7pmu_handle_irq)[0:1347]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 178.
verify found no changes in insn with uid = 178.
deleting insn with uid = 26.
scanning new insn with uid = 179.
verify found no changes in insn with uid = 179.
deleting insn with uid = 20.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 49 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 50 (  2.5)

Pass 0 for finding allocno costs

    a29 (r197,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r195,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r194,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r193,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r192,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r190,l1) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r187,l1) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r184,l1) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r179,l1) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r178,l1) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r176,l1) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r175,l1) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r173,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r159,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r159,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a18(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a20(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r193,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r194,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r197,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r187,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a35(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r197: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r159,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a18(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a20(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r193,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r194,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r197,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r187,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a35(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 153(l0): point = 0
   Insn 147(l0): point = 2
   Insn 140(l0): point = 5
   Insn 139(l0): point = 7
   Insn 167(l0): point = 10
   Insn 63(l0): point = 12
   Insn 29(l0): point = 14
   Insn 112(l0): point = 16
   Insn 27(l0): point = 18
   Insn 178(l0): point = 20
   Insn 39(l0): point = 22
   Insn 25(l0): point = 24
   Insn 132(l0): point = 26
   Insn 38(l0): point = 28
   Insn 18(l0): point = 30
   Insn 101(l0): point = 32
   Insn 24(l0): point = 34
   Insn 179(l0): point = 36
   Insn 99(l0): point = 38
   Insn 17(l0): point = 40
   Insn 31(l0): point = 42
   Insn 23(l0): point = 44
   Insn 43(l0): point = 46
   Insn 30(l0): point = 48
   Insn 28(l0): point = 50
   Insn 176(l0): point = 52
   Insn 175(l0): point = 54
   Insn 165(l0): point = 57
   Insn 12(l0): point = 59
   Insn 10(l0): point = 62
   Insn 9(l0): point = 64
   Insn 8(l0): point = 66
   Insn 7(l0): point = 68
   Insn 137(l1): point = 71
   Insn 136(l1): point = 73
   Insn 134(l1): point = 75
   Insn 133(l1): point = 77
   Insn 129(l1): point = 80
   Insn 126(l1): point = 83
   Insn 125(l1): point = 85
   Insn 122(l1): point = 87
   Insn 124(l1): point = 89
   Insn 119(l1): point = 92
   Insn 118(l1): point = 94
   Insn 116(l1): point = 96
   Insn 115(l1): point = 98
   Insn 114(l1): point = 100
   Insn 113(l1): point = 102
   Insn 110(l1): point = 105
   Insn 109(l1): point = 107
   Insn 107(l1): point = 109
   Insn 103(l1): point = 111
   Insn 106(l1): point = 113
   Insn 105(l1): point = 115
   Insn 104(l1): point = 117
   Insn 102(l1): point = 119
   Insn 100(l1): point = 121
   Insn 97(l1): point = 123
   Insn 96(l1): point = 125
   Insn 158(l1): point = 127
   Insn 98(l1): point = 129
   Insn 95(l1): point = 131
   Insn 93(l1): point = 134
   Insn 92(l1): point = 136
   Insn 173(l1): point = 139
   Insn 87(l1): point = 141
   Insn 162(l1): point = 143
   Insn 86(l1): point = 145
   Insn 85(l1): point = 147
   Insn 171(l1): point = 150
   Insn 78(l1): point = 152
   Insn 75(l1): point = 154
   Insn 73(l1): point = 157
   Insn 72(l1): point = 159
   Insn 71(l1): point = 161
   Insn 69(l1): point = 164
   Insn 169(l1): point = 167
   Insn 164(l1): point = 169
   Insn 61(l1): point = 172
   Insn 60(l1): point = 174
   Insn 58(l1): point = 177
   Insn 57(l1): point = 179
   Insn 55(l1): point = 181
   Insn 53(l1): point = 183
   Insn 49(l1): point = 185
   Insn 54(l1): point = 187
   Insn 50(l1): point = 189
 a0(r153): [57..59] [3..5]
 a1(r197): [10..12]
 a2(r148): [60..68] [10..56]
 a3(r164): [15..50]
 a4(r195): [10..16]
 a5(r163): [19..20]
 a6(r152): [10..22]
 a7(r147): [10..28]
 a8(r146): [10..24]
 a9(r162): [25..34]
 a10(r140): [25..40]
 a11(r192): [10..26]
 a12(r144): [29..48]
 a13(r194): [10..32]
 a14(r158): [35..36]
 a15(r161): [35..44]
 a16(r193): [10..38]
 a17(r159): [10..54]
 a18(r145): [10..46]
 a19(r145): [71..191]
 a20(r146): [71..191]
 a21(r147): [71..191]
 a22(r148): [71..191]
 a23(r152): [71..191]
 a24(r159): [71..191]
 a25(r192): [71..191]
 a26(r193): [71..191]
 a27(r194): [71..191]
 a28(r195): [71..191]
 a29(r197): [71..191]
 a30(r149): [172..191] [162..166] [71..75]
 a31(r190): [76..77]
 a32(r187): [84..87]
 a33(r142): [90..131]
 a34(r143): [150..185] [103..138]
 a35(r184): [112..119]
 a36(r134): [167..169] [150..152] [137..138]
 a37(r179): [153..154]
 a38(r178): [160..161]
 a39(r176): [180..181]
 a40(r175): [182..187]
 a41(r138): [182..183]
 a42(r173): [184..189]
Compressing live ranges: from 192 to 63 - 32%
Ranges after the compression:
 a0(r153): [26..27] [0..1]
 a1(r197): [2..3]
 a2(r148): [28..29] [2..25]
 a3(r164): [4..23]
 a4(r195): [2..5]
 a5(r163): [6..7]
 a6(r152): [2..8]
 a7(r147): [2..12]
 a8(r146): [2..9]
 a9(r162): [10..15]
 a10(r140): [10..19]
 a11(r192): [2..11]
 a12(r144): [13..22]
 a13(r194): [2..14]
 a14(r158): [16..17]
 a15(r161): [16..20]
 a16(r193): [2..18]
 a17(r159): [2..24]
 a18(r145): [2..21]
 a19(r145): [30..62]
 a20(r146): [30..62]
 a21(r147): [30..62]
 a22(r148): [30..62]
 a23(r152): [30..62]
 a24(r159): [30..62]
 a25(r192): [30..62]
 a26(r193): [30..62]
 a27(r194): [30..62]
 a28(r195): [30..62]
 a29(r197): [30..62]
 a30(r149): [53..62] [49..50] [30..31]
 a31(r190): [32..33]
 a32(r187): [34..35]
 a33(r142): [36..40]
 a34(r143): [43..59] [37..42]
 a35(r184): [38..39]
 a36(r134): [51..52] [43..44] [41..42]
 a37(r179): [45..46]
 a38(r178): [47..48]
 a39(r176): [54..55]
 a40(r175): [56..60]
 a41(r138): [56..57]
 a42(r173): [58..61]
    Creating cap  a43(r149,l0: a30(r149,l1))
    Creating cap  a44(r190,l0: a31(r190,l1))
    Creating cap  a45(r187,l0: a32(r187,l1))
    Creating cap  a46(r142,l0: a33(r142,l1))
    Creating cap  a47(r143,l0: a34(r143,l1))
    Creating cap  a48(r184,l0: a35(r184,l1))
    Creating cap  a49(r134,l0: a36(r134,l1))
    Creating cap  a50(r179,l0: a37(r179,l1))
    Creating cap  a51(r178,l0: a38(r178,l1))
    Creating cap  a52(r176,l0: a39(r176,l1))
    Creating cap  a53(r175,l0: a40(r175,l1))
    Creating cap  a54(r138,l0: a41(r138,l1))
    Creating cap  a55(r173,l0: a42(r173,l1))
+++Allocating 448 bytes for conflict table (uncompressed size 448)
;; a0(r153,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r197,l0) conflicts: a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a2(r148,l0) conflicts: a1(r197,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a3(r164,l0) conflicts: a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r195,l0) conflicts: a1(r197,l0) a2(r148,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a5(r163,l0) conflicts: a2(r148,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r152,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a7(r147,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a8(r146,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a9(r162,l0) conflicts: a2(r148,l0) a7(r147,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a10(r140,l0) a12(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r140,l0) conflicts: a2(r148,l0) a7(r147,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a9(r162,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r192,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a12(r144,l0) conflicts: a2(r148,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a9(r162,l0) a10(r140,l0) a14(r158,l0) a15(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r194,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a14(r158,l0) conflicts: a2(r148,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a10(r140,l0) a12(r144,l0) a15(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r161,l0) conflicts: a2(r148,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r193,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a17(r159,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a17(r159,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a18(r145,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a18(r145,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a3(r164,l0) a5(r163,l0) a9(r162,l0) a10(r140,l0) a12(r144,l0) a14(r158,l0) a15(r161,l0) a43(r149,l0) a44(r190,l0) a45(r187,l0) a46(r142,l0) a47(r143,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a19(r145,l1) conflicts: a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a20(r146,l1) conflicts: a19(r145,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a21(r147,l1) conflicts: a19(r145,l1) a20(r146,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a22(r148,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a23(r152,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a24(r159,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a25(r192,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a26(r193,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a27(r194,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a28(r195,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a29(r197,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a29(r197,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a30(r149,l1) a31(r190,l1) a32(r187,l1) a33(r142,l1) a34(r143,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a30(r149,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a34(r143,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r190,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r187,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a33(r142,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a34(r143,l1) a35(r184,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a34(r143,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a33(r142,l1) a35(r184,l1) a36(r134,l1) a37(r179,l1) a38(r178,l1) a39(r176,l1) a41(r138,l1) a40(r175,l1) a42(r173,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a35(r184,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a33(r142,l1) a34(r143,l1)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a36(r134,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a34(r143,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r179,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a34(r143,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r178,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a34(r143,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r176,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a34(r143,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r175,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a34(r143,l1) a41(r138,l1) a42(r173,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r138,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a34(r143,l1) a40(r175,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r173,l1) conflicts: a19(r145,l1) a20(r146,l1) a21(r147,l1) a22(r148,l1) a23(r152,l1) a24(r159,l1) a25(r192,l1) a26(r193,l1) a27(r194,l1) a28(r195,l1) a29(r197,l1) a30(r149,l1) a34(r143,l1) a40(r175,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r149,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a47(r143,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r190,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r187,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a46(r142,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a47(r143,l0) a48(r184,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a47(r143,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a46(r142,l0) a48(r184,l0) a49(r134,l0) a50(r179,l0) a51(r178,l0) a52(r176,l0) a54(r138,l0) a53(r175,l0) a55(r173,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a48(r184,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a46(r142,l0) a47(r143,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a49(r134,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a47(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r179,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a47(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r178,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a47(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r176,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a47(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r175,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a47(r143,l0) a54(r138,l0) a55(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r138,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a47(r143,l0) a53(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r173,l0) conflicts: a1(r197,l0) a2(r148,l0) a4(r195,l0) a6(r152,l0) a7(r147,l0) a8(r146,l0) a11(r192,l0) a13(r194,l0) a16(r193,l0) a17(r159,l0) a18(r145,l0) a43(r149,l0) a47(r143,l0) a53(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a7(r147)<->a12(r144)@125:shuffle
  cp1:a0(r153)<->a2(r148)@1000:move
  cp2:a36(r134)<->a37(r179)@125:shuffle
  cp3:a30(r149)<->a38(r178)@125:shuffle
  cp4:a39(r176)<->a41(r138)@125:shuffle
  cp5:a39(r176)<->a40(r175)@125:shuffle
  cp6:a49(r134)<->a50(r179)@125:shuffle
  cp7:a43(r149)<->a51(r178)@125:shuffle
  cp8:a52(r176)<->a54(r138)@125:shuffle
  cp9:a52(r176)<->a53(r175)@125:shuffle
  regions=2, blocks=20, points=63
    allocnos=56, copies=10, conflicts=0, ranges=50

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 19 18 4(->17:l1) 3 2
    all: 0r153 1r197 2r148 3r164 4r195 5r163 6r152 7r147 8r146 9r162 10r140 11r192 12r144 13r194 14r158 15r161 16r193 17r159 18r145 43r149 44r190 45r187 46r142 47r143 48r184 49r134 50r179 51r178 52r176 53r175 54r138 55r173
    modified regnos: 134 138 140 142 143 144 145 146 147 148 149 152 153 158 159 161 162 163 164 173 175 176 178 179 184 187 190 192 193 194 195 197
    border:
    Pressure: GENERAL_REGS=18
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 197 of GENERAL_REGS has 5 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 195 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 192 of GENERAL_REGS has 5 regs less
    Reg 194 of GENERAL_REGS has 5 regs less
    Reg 193 of GENERAL_REGS has 5 regs less
    Reg 159 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 187 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
      Pushing a52(r176,l0: a39(r176,l1))
      Pushing a51(r178,l0: a38(r178,l1))
      Pushing a50(r179,l0: a37(r179,l1))
      Pushing a44(r190,l0: a31(r190,l1))
      Pushing a15(r161,l0)
      Pushing a14(r158,l0)
      Pushing a5(r163,l0)
      Pushing a49(r134,l0: a36(r134,l1))
      Pushing a9(r162,l0)
      Pushing a3(r164,l0)
      Pushing a12(r144,l0)
      Pushing a10(r140,l0)
      Pushing a0(r153,l0)
      Pushing a48(r184,l0: a35(r184,l1))(potential spill: pri=303, cost=10000)
      Pushing a1(r197,l0)(potential spill: pri=869, cost=20000)
      Pushing a55(r173,l0: a42(r173,l1))
      Pushing a54(r138,l0: a41(r138,l1))
      Pushing a53(r175,l0: a40(r175,l1))
      Pushing a43(r149,l0: a30(r149,l1))
      Pushing a4(r195,l0)(potential spill: pri=1111, cost=20000)
      Pushing a6(r152,l0)(potential spill: pri=1176, cost=20000)
      Pushing a8(r146,l0)(potential spill: pri=1250, cost=20000)
      Pushing a45(r187,l0: a32(r187,l1))
      Pushing a16(r193,l0)(potential spill: pri=1428, cost=20000)
      Pushing a7(r147,l0)(potential spill: pri=2307, cost=30000)
      Pushing a13(r194,l0)(potential spill: pri=2500, cost=30000)
      Pushing a46(r142,l0: a33(r142,l1))(potential spill: pri=3636, cost=40000)
      Pushing a11(r192,l0)(potential spill: pri=5000, cost=50000)
      Pushing a17(r159,l0)
      Pushing a47(r143,l0: a34(r143,l1))
      Pushing a2(r148,l0)
      Pushing a18(r145,l0)
      Popping a18(r145,l0)  -- assign reg 4
      Popping a2(r148,l0)  -- assign reg 5
      Popping a47(r143,l0: a34(r143,l1))  -- assign reg 6
      Popping a17(r159,l0)  -- assign reg 7
      Popping a11(r192,l0)  -- assign reg 8
      Popping a46(r142,l0: a33(r142,l1))  -- assign reg 10
      Popping a13(r194,l0)  -- assign reg 9
      Popping a7(r147,l0)  -- assign reg 11
      Popping a16(r193,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a45(r187,l0: a32(r187,l1))  -- assign reg 3
      Popping a8(r146,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a6(r152,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a4(r195,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a43(r149,l0: a30(r149,l1))  -- assign reg 3
      Popping a53(r175,l0: a40(r175,l1))  -- assign reg 2
      Popping a54(r138,l0: a41(r138,l1))  -- assign reg 1
      Popping a55(r173,l0: a42(r173,l1))  -- assign reg 1
      Popping a1(r197,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a48(r184,l0: a35(r184,l1))  -- (memory is more profitable 10000 vs 2147483647) spill
      Popping a0(r153,l0)  -- assign reg 0
      Popping a10(r140,l0)  -- assign reg 3
      Popping a12(r144,l0)  -- assign reg 11
      Popping a3(r164,l0)  -- assign reg 2
      Popping a9(r162,l0)  -- assign reg 1
      Popping a49(r134,l0: a36(r134,l1))  -- assign reg 3
      Popping a5(r163,l0)  -- assign reg 0
      Popping a14(r158,l0)  -- assign reg 1
      Popping a15(r161,l0)  -- assign reg 0
      Popping a44(r190,l0: a31(r190,l1))  -- assign reg 3
      Popping a50(r179,l0: a37(r179,l1))  -- assign reg 3
      Popping a51(r178,l0: a38(r178,l1))  -- assign reg 3
      Popping a52(r176,l0: a39(r176,l1))  -- assign reg 2

  Loop 1 (parent 0, header bb17, depth 1)
    bbs: 17(->18:l0) 16 15 14 13 12 11 10 9 8 7 6 5
    all: 19r145 20r146 21r147 22r148 23r152 24r159 25r192 26r193 27r194 28r195 29r197 30r149 31r190 32r187 33r142 34r143 35r184 36r134 37r179 38r178 39r176 40r175 41r138 42r173
    modified regnos: 134 138 142 143 145 149 173 175 176 178 179 184 187 190
    border: 19r145 20r146 21r147 22r148 23r152 24r159 25r192 26r193 27r194 28r195 29r197
    Pressure: GENERAL_REGS=18
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 159 of GENERAL_REGS has 5 regs less
    Reg 197 of GENERAL_REGS has 5 regs less
    Reg 187 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
      Pushing a42(r173,l1)
      Pushing a41(r138,l1)
      Pushing a40(r175,l1)
      Pushing a39(r176,l1)
      Pushing a38(r178,l1)
      Pushing a37(r179,l1)
      Pushing a31(r190,l1)
      Pushing a36(r134,l1)
      Pushing a30(r149,l1)
      Pushing a20(r146,l1)(potential spill: pri=-1578, cost=-30000)
      Pushing a23(r152,l1)(potential spill: pri=-1666, cost=-30000)
      Pushing a32(r187,l1)
      Pushing a29(r197,l1)(potential spill: pri=-1875, cost=-30000)
      Pushing a35(r184,l1)(potential spill: pri=434, cost=10000)
      Pushing a33(r142,l1)(potential spill: pri=3076, cost=40000)
      Pushing a21(r147,l1)(potential spill: pri=4166, cost=50000)
      Pushing a22(r148,l1)(potential spill: pri=4545, cost=50000)
      Pushing a24(r159,l1)(potential spill: pri=5000, cost=50000)
      Pushing a34(r143,l1)
      Pushing a19(r145,l1)
      Popping a19(r145,l1)  -- assign reg 4
      Popping a34(r143,l1)  -- assign reg 5
      Popping a24(r159,l1)  -- assign reg 7
      Popping a22(r148,l1)  -- assign reg 6
      Popping a21(r147,l1)  -- assign reg 11
      Popping a33(r142,l1)  -- assign reg 10
      Popping a35(r184,l1)  -- (memory is more profitable 10000 vs 2147483647) spill
      Popping a29(r197,l1)  -- (memory is more profitable -10000 vs 80000) spill
      Popping a32(r187,l1)  -- assign reg 3
      Popping a23(r152,l1)  -- (memory is more profitable -10000 vs 80000) spill
      Popping a20(r146,l1)  -- (memory is more profitable -10000 vs 80000) spill
      Popping a30(r149,l1)  -- assign reg 3
      Popping a36(r134,l1)  -- assign reg 3
      Popping a31(r190,l1)  -- assign reg 3
      Popping a37(r179,l1)  -- assign reg 3
      Popping a38(r178,l1)  -- assign reg 3
      Popping a39(r176,l1)  -- assign reg 2
      Popping a40(r175,l1)  -- assign reg 2
      Popping a41(r138,l1)  -- assign reg 1
      Popping a42(r173,l1)  -- assign reg 1
Disposition:
   36:r134 l1     3   41:r138 l1     1   10:r140 l0     3   33:r142 l1    10
   34:r143 l1     5   12:r144 l0    11   19:r145 l1     4   18:r145 l0     4
   20:r146 l1   mem    8:r146 l0   mem   21:r147 l1    11    7:r147 l0    11
   22:r148 l1     6    2:r148 l0     5   30:r149 l1     3   23:r152 l1   mem
    6:r152 l0   mem    0:r153 l0     0   14:r158 l0     1   24:r159 l1     7
   17:r159 l0     7   15:r161 l0     0    9:r162 l0     1    5:r163 l0     0
    3:r164 l0     2   42:r173 l1     1   40:r175 l1     2   39:r176 l1     2
   38:r178 l1     3   37:r179 l1     3   35:r184 l1   mem   32:r187 l1     3
   31:r190 l1     3   25:r192 l1     8   11:r192 l0     8   26:r193 l1   mem
   16:r193 l0   mem   27:r194 l1     9   13:r194 l0     9   28:r195 l1   mem
    4:r195 l0   mem   29:r197 l1   mem    1:r197 l0   mem
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb17)
  4 vs parent 4:      Creating newreg=198 from oldreg=145
  11 vs parent 11:      Creating newreg=199 from oldreg=147
  6 vs parent 5:      Creating newreg=200 from oldreg=148
  7 vs parent 7:      Creating newreg=201 from oldreg=159
rescanning insn with uid = 136.
deleting insn with uid = 136.
rescanning insn with uid = 129.
deleting insn with uid = 129.
rescanning insn with uid = 125.
deleting insn with uid = 125.
rescanning insn with uid = 98.
deleting insn with uid = 98.
rescanning insn with uid = 106.
deleting insn with uid = 106.
rescanning insn with uid = 85.
deleting insn with uid = 85.
rescanning insn with uid = 86.
deleting insn with uid = 86.
rescanning insn with uid = 75.
deleting insn with uid = 75.
rescanning insn with uid = 78.
deleting insn with uid = 78.
rescanning insn with uid = 72.
deleting insn with uid = 72.
rescanning insn with uid = 60.
deleting insn with uid = 60.
rescanning insn with uid = 50.
deleting insn with uid = 50.
rescanning insn with uid = 54.
deleting insn with uid = 54.
rescanning insn with uid = 49.
deleting insn with uid = 49.
    Adding cp10:a18r145-a19r198
    Adding range [64..64] to allocno a18r145
    Adding cp11:a7r147-a21r199
    Adding range [64..66] to allocno a7r147
    Adding cp12:a2r148-a22r200
    Adding range [64..68] to allocno a2r148
    Adding cp13:a17r159-a24r201
    Adding range [64..70] to allocno a17r159
    Adding range [65..71] to allocno a19r198
    Adding range [67..71] to allocno a21r199
    Adding range [69..71] to allocno a22r200
    Adding range [71..71] to allocno a24r201
    Adding range [64..71] to live through  allocno a8r146
    Adding range [64..71] to live through  allocno a6r152
    Adding range [64..71] to live through  allocno a11r192
    Adding range [64..71] to live through  allocno a16r193
    Adding range [64..71] to live through  allocno a13r194
    Adding range [64..71] to live through  allocno a4r195
    Adding range [64..71] to live through  allocno a1r197
scanning new insn with uid = 180.
scanning new insn with uid = 181.
scanning new insn with uid = 182.
scanning new insn with uid = 183.
    New r198: setting preferred GENERAL_REGS, alternative NO_REGS
    New r199: setting preferred GENERAL_REGS, alternative NO_REGS
    New r200: setting preferred GENERAL_REGS, alternative NO_REGS
    New r201: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a29r197 to a1r197:  [30..62]
      Moving ranges of a28r195 to a4r195:  [30..62]
      Moving ranges of a27r194 to a13r194:  [30..62]
      Moving ranges of a26r193 to a16r193:  [30..62]
      Moving ranges of a25r192 to a11r192:  [30..62]
      Moving ranges of a23r152 to a6r152:  [30..62]
      Moving ranges of a20r146 to a8r146:  [30..62]
      Remove cp6:c49r134-c50r179
      Remove cp7:c43r149-c51r178
      Remove cp8:c52r176-c54r138
      Remove cp9:c52r176-c53r175
      Remove a20r146
      Remove a23r152
      Remove a25r192
      Remove a26r193
      Remove a27r194
      Remove a28r195
      Remove a29r197
      Remove a43r149
      Remove a44r190
      Remove a45r187
      Remove a46r142
      Remove a47r143
      Remove a48r184
      Remove a49r134
      Remove a50r179
      Remove a51r178
      Remove a52r176
      Remove a53r175
      Remove a54r138
      Remove a55r173
Compressing live ranges: from 72 to 71 - 98%
Ranges after the compression:
 a0(r153): [26..27] [0..1]
 a1(r197): [63..70] [30..62] [2..3]
 a2(r148): [63..67] [28..29] [2..25]
 a3(r164): [4..23]
 a4(r195): [63..70] [30..62] [2..5]
 a5(r163): [6..7]
 a6(r152): [63..70] [30..62] [2..8]
 a7(r147): [63..65] [2..12]
 a8(r146): [63..70] [30..62] [2..9]
 a9(r162): [10..15]
 a10(r140): [10..19]
 a11(r192): [63..70] [30..62] [2..11]
 a12(r144): [13..22]
 a13(r194): [63..70] [30..62] [2..14]
 a14(r158): [16..17]
 a15(r161): [16..20]
 a16(r193): [63..70] [30..62] [2..18]
 a17(r159): [63..69] [2..24]
 a18(r145): [63..63] [2..21]
 a19(r198): [64..70] [30..62]
 a21(r199): [66..70] [30..62]
 a22(r200): [68..70] [30..62]
 a24(r201): [70..70] [30..62]
 a30(r149): [53..62] [49..50] [30..31]
 a31(r190): [32..33]
 a32(r187): [34..35]
 a33(r142): [36..40]
 a34(r143): [43..59] [37..42]
 a35(r184): [38..39]
 a36(r134): [51..52] [43..44] [41..42]
 a37(r179): [45..46]
 a38(r178): [47..48]
 a39(r176): [54..55]
 a40(r175): [56..60]
 a41(r138): [56..57]
 a42(r173): [58..61]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 49 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 50 (  2.5)
+++Costs: overall 108000, reg -2000, mem 110000, ld 0, st 0, move 8000
+++       move loops 0, new jumps 1
insn=7, live_throughout: 13, 14, dead_or_set: 148
insn=8, live_throughout: 13, 14, 148, dead_or_set: 
insn=9, live_throughout: 13, 14, 148, dead_or_set: 
insn=10, live_throughout: 13, 14, 148, dead_or_set: 
insn=12, live_throughout: 13, 14, dead_or_set: 148, 153
insn=165, live_throughout: 13, 14, 153, dead_or_set: 
insn=15, live_throughout: 13, 148, dead_or_set: 
insn=175, live_throughout: 13, 148, dead_or_set: 159
insn=176, live_throughout: 13, 148, dead_or_set: 159
insn=28, live_throughout: 13, 148, 159, dead_or_set: 164
insn=30, live_throughout: 13, 148, 159, 164, dead_or_set: 144
insn=43, live_throughout: 13, 144, 148, 159, 164, dead_or_set: 145
insn=23, live_throughout: 13, 144, 145, 148, 159, 164, dead_or_set: 161
insn=31, live_throughout: 13, 145, 148, 159, 161, 164, dead_or_set: 144
insn=17, live_throughout: 13, 144, 145, 148, 159, 161, 164, dead_or_set: 140
insn=99, live_throughout: 13, 140, 144, 145, 148, 159, 161, 164, dead_or_set: 193
insn=179, live_throughout: 13, 140, 144, 145, 148, 159, 161, 164, 193, dead_or_set: 158
insn=24, live_throughout: 13, 140, 144, 145, 148, 159, 164, 193, dead_or_set: 158, 161, 162
insn=101, live_throughout: 13, 140, 144, 145, 148, 159, 162, 164, 193, dead_or_set: 194
insn=18, live_throughout: 13, 144, 145, 148, 159, 162, 164, 193, 194, dead_or_set: 140
insn=38, live_throughout: 13, 140, 145, 148, 159, 162, 164, 193, 194, dead_or_set: 144, 147
insn=132, live_throughout: 13, 140, 145, 147, 148, 159, 162, 164, 193, 194, dead_or_set: 192
insn=25, live_throughout: 13, 145, 147, 148, 159, 164, 192, 193, 194, dead_or_set: 140, 146, 162
insn=39, live_throughout: 13, 145, 146, 147, 148, 159, 164, 192, 193, 194, dead_or_set: 152
insn=178, live_throughout: 13, 145, 146, 147, 148, 152, 159, 164, 192, 193, 194, dead_or_set: 163
insn=27, live_throughout: 13, 145, 146, 147, 148, 152, 159, 164, 192, 193, 194, dead_or_set: 163
insn=112, live_throughout: 13, 145, 146, 147, 148, 152, 159, 164, 192, 193, 194, dead_or_set: 195
insn=29, live_throughout: 13, 145, 146, 147, 148, 152, 159, 192, 193, 194, 195, dead_or_set: 164
insn=63, live_throughout: 13, 145, 146, 147, 148, 152, 159, 192, 193, 194, 195, dead_or_set: 197
insn=180, live_throughout: 13, 146, 147, 148, 152, 159, 192, 193, 194, 195, 197, dead_or_set: 145, 198
insn=181, live_throughout: 13, 146, 148, 152, 159, 192, 193, 194, 195, 197, 198, dead_or_set: 147, 199
insn=182, live_throughout: 13, 146, 152, 159, 192, 193, 194, 195, 197, 198, 199, dead_or_set: 148, 200
insn=183, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, dead_or_set: 159, 201
insn=167, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=135, live_throughout: 13, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=50, live_throughout: 13, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 173
insn=54, live_throughout: 13, 146, 149, 152, 173, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 175
insn=49, live_throughout: 13, 146, 149, 152, 173, 175, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 143
insn=53, live_throughout: 13, 143, 146, 149, 152, 175, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 138, 173
insn=55, live_throughout: 13, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 138, 175, 176
insn=57, live_throughout: 13, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 176
insn=58, live_throughout: 13, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=60, live_throughout: 13, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=61, live_throughout: 13, 24, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=164, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 134
insn=169, live_throughout: 13, 134, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=66, live_throughout: 13, 24, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=69, live_throughout: 13, 143, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=71, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 149, 178
insn=72, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 178
insn=73, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=75, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 179
insn=78, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 134, 179
insn=171, live_throughout: 13, 134, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=81, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=85, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 1
insn=86, live_throughout: 1, 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 2
insn=162, live_throughout: 1, 2, 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0
insn=87, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 1, 2, 14
insn=173, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=90, live_throughout: 13, 134, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=92, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 134
insn=93, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=95, live_throughout: 13, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 142
insn=98, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 2
insn=158, live_throughout: 2, 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 3
insn=96, live_throughout: 2, 3, 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0
insn=97, live_throughout: 0, 2, 3, 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 1
insn=100, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 1, 2, 3, 14
insn=102, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 184
insn=104, live_throughout: 13, 142, 143, 146, 152, 184, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0
insn=105, live_throughout: 0, 13, 142, 143, 146, 152, 184, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 1
insn=106, live_throughout: 0, 1, 13, 142, 143, 146, 152, 184, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 2
insn=103, live_throughout: 0, 1, 2, 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 184
insn=107, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 1, 2, 14
insn=109, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0
insn=110, live_throughout: 13, 142, 143, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=113, live_throughout: 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 143
insn=114, live_throughout: 0, 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 1
insn=115, live_throughout: 0, 1, 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 2
insn=116, live_throughout: 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 1, 2, 14
insn=118, live_throughout: 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0
insn=119, live_throughout: 13, 142, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=124, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 142
insn=122, live_throughout: 0, 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 187
insn=125, live_throughout: 0, 13, 146, 152, 187, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 1
insn=126, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 0, 1, 14, 187
insn=127, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=129, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 199, 200, 201, dead_or_set: 198
insn=130, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=133, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 190
insn=134, live_throughout: 13, 146, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 149, 190
insn=136, live_throughout: 13, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=137, live_throughout: 13, 146, 149, 152, 192, 193, 194, 195, 197, 198, 199, 200, 201, dead_or_set: 
insn=139, live_throughout: 13, dead_or_set: 14
insn=140, live_throughout: 13, 14, dead_or_set: 153
insn=141, live_throughout: 13, 14, 153, dead_or_set: 
insn=147, live_throughout: 13, 14, dead_or_set: 0, 153
insn=153, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 158: (insn_list:REG_DEP_TRUE 179 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 23 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 178 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 102 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 122 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 133 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 132 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 99 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 101 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 112 (nil))
      Slot 1 (freq,size): a8r146(2000,4)
      Slot 2 (freq,size): a6r152(2000,4)
      Slot 3 (freq,size): a35r184(2000,8)
      Slot 4 (freq,size): a1r197(2000,4)
      Assigning 197(freq=2000) a new slot 3
      Assigning 152(freq=2000) a new slot 1
      Assigning 146(freq=2000) a new slot 0
changing reg in insn 78
changing reg in insn 164
changing reg in insn 92
changing reg in insn 53
changing reg in insn 55
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 25
changing reg in insn 95
changing reg in insn 124
changing reg in insn 105
changing reg in insn 97
changing reg in insn 49
changing reg in insn 102
changing reg in insn 113
changing reg in insn 104
changing reg in insn 96
changing reg in insn 95
changing reg in insn 102
changing reg in insn 102
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 38
changing reg in insn 43
changing reg in insn 180
changing reg in insn 38
changing reg in insn 181
changing reg in insn 39
changing reg in insn 7
changing reg in insn 182
changing reg in insn 63
changing reg in insn 12
changing reg in insn 9
changing reg in insn 8
changing reg in insn 134
changing reg in insn 136
changing reg in insn 71
changing reg in insn 12
changing reg in insn 140
changing reg in insn 147
changing reg in insn 179
changing reg in insn 24
changing reg in insn 176
changing reg in insn 175
changing reg in insn 183
changing reg in insn 176
changing reg in insn 23
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 38
changing reg in insn 25
changing reg in insn 178
changing reg in insn 27
changing reg in insn 28
changing reg in insn 43
changing reg in insn 29
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 78
changing reg in insn 122
changing reg in insn 126
changing reg in insn 133
changing reg in insn 134
changing reg in insn 132
changing reg in insn 133
changing reg in insn 122
changing reg in insn 133
changing reg in insn 122
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 180
changing reg in insn 129
changing reg in insn 49
changing reg in insn 54
changing reg in insn 50
changing reg in insn 60
changing reg in insn 72
changing reg in insn 75
changing reg in insn 86
changing reg in insn 106
changing reg in insn 98
changing reg in insn 125
changing reg in insn 129
changing reg in insn 136
changing reg in insn 181
changing reg in insn 49
changing reg in insn 182
changing reg in insn 78
changing reg in insn 183
changing reg in insn 85
Spilling for insn 175.
Using reg 3 for reload 0
Spilling for insn 25.
Spilling for insn 39.
Using reg 3 for reload 0
Spilling for insn 27.
Spilling for insn 29.
Spilling for insn 63.
Using reg 3 for reload 0
Spilling for insn 53.
Using reg 0 for reload 0
Spilling for insn 78.
Using reg 2 for reload 0
Spilling for insn 102.
Using reg 2 for reload 0
Spilling for insn 103.
Using reg 6 for reload 1
      Spill 200(a22), cost=20000
      Spill 201(a24), cost=20000
      Spilled regs 200 201
        Try assign 184(a35), cost=10000
        Try assign 197(a1), cost=20000
        Try assign 195(a4), cost=20000
        Try assign 152(a6), cost=20000
        Try assign 146(a8), cost=20000
        Try assign 193(a16), cost=20000
        Try assign 200(a22), cost=20000
        Try assign 201(a24), cost=20000
changing reg in insn 182
changing reg in insn 78
      Assigning 200(freq=2000) a new slot 4
 Register 200 now on stack.

changing reg in insn 183
changing reg in insn 85
      Assigning 201(freq=2000) a new slot 5
 Register 201 now on stack.

Spilling for insn 175.
Using reg 3 for reload 0
Spilling for insn 25.
Spilling for insn 39.
Using reg 3 for reload 0
Spilling for insn 27.
Spilling for insn 29.
Spilling for insn 63.
Using reg 3 for reload 0
Spilling for insn 182.
Spilling for insn 183.
Spilling for insn 53.
Using reg 0 for reload 0
Spilling for insn 78.
Using reg 2 for reload 0
Using reg 1 for reload 1
Spilling for insn 85.
Using reg 3 for reload 0
Spilling for insn 102.
Using reg 2 for reload 0
Spilling for insn 103.
Using reg 6 for reload 1
deleting insn with uid = 102.
deleting insn with uid = 99.
deleting insn with uid = 112.

Reloads for insn # 175
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 25
Reload 0: reload_out (SI) = (reg/v/f:SI 146 [ regs ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v/f:SI 146 [ regs ])
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 39
Reload 0: reload_out (SI) = (reg/f:SI 152 [ D.26005 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/f:SI 152 [ D.26005 ])
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 27
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 data.addr+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 data.addr+0 S8 A64])

Reloads for insn # 29
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 100 [0x64])) [0 data.raw+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 100 [0x64])) [0 data.raw+0 S4 A32])

Reloads for insn # 63
Reload 0: reload_out (SI) = (reg:SI 197 [ ret ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 197 [ ret ])
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 182
Reload 0: reload_out (SI) = (reg/v:SI 200 [orig:148 pmnc ] [148])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 200 [orig:148 pmnc ] [148])

Reloads for insn # 183
Reload 0: reload_out (SI) = (reg:SI 201 [159])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:SI 201 [159])

Reloads for insn # 53
Reload 0: reload_in (SI) = (reg/f:SI 152 [ D.26005 ])
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1)
	reload_in_reg: (reg/f:SI 152 [ D.26005 ])
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 78
Reload 0: reload_in (SI) = (reg/v:SI 200 [orig:148 pmnc ] [148])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:SI 200 [orig:148 pmnc ] [148])
	reload_reg_rtx: (reg:SI 7 r7)
Reload 1: reload_in (SI) = (const_int 1 [0x1])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4), can't combine
	reload_in_reg: (reg:SI 193)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 85
Reload 0: reload_in (SI) = (reg:SI 201 [159])
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1)
	reload_in_reg: (reg:SI 201 [159])
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 103
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 88 [0x58])) [0 data.period+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 88 [0x58])) [0 data.period+0 S8 A64])
Reload 1: reload_in (DI) = (reg:DI 184 [ <variable>.hw.last_period ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 184 [ <variable>.hw.last_period ])
	reload_reg_rtx: (reg:DI 6 r6)
deleting insn with uid = 180.
deleting insn with uid = 181.
deleting insn with uid = 147.
+++Overall after reload 148000


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 116.
rescanning insn with uid = 126.
deleting insn with uid = 126.
verify found no changes in insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 49 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 50 (  2.5)


armv7pmu_handle_irq

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,13u,1d} r1={19d,13u} r2={16d,10u} r3={17d,10u} r4={2d,12u} r5={2d,10u} r6={2d,2u} r7={4d,5u,1d} r8={1d,2u,2d} r9={1d,1u} r10={1d,3u} r11={3d,4u} r12={7d} r13={1d,40u,1d} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={14d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 915{775d,135u,5e} in 94{88 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 arch/arm/kernel/perf_event_v7.c:941 (set (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        (asm_operands/v:SI ("mrc p15, 0, %0, c9, c12, 3") ("=r") 0 []
             [] 8926418)) -1 (nil))

(insn 8 7 9 2 arch/arm/kernel/perf_event_v7.c:945 (asm_operands/v ("mcr p15, 0, %0, c9, c12, 3") ("") 0 [
            (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
        ]
         [
            (asm_input:SI ("r") 0)
        ] 8926930) -1 (nil))

(insn 9 8 10 2 arch/arm/kernel/perf_event_v7.c:1061 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/perf_event_v7.c:1061 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 165 3 arch/arm/kernel/perf_event_v7.c:1062 (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
        (reg/v:SI 5 r5 [orig:148 pmnc ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 165 12 166 3 (set (pc)
        (label_ref 141)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 19)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%] 

(barrier 166 165 15)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 15 166 16 4 263 "" [1 uses])

(note 16 15 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 16 185 4 NOTE_INSN_DELETED)

(insn 185 21 175 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 175 185 176 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 0 r0)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 176 175 28 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 7 r7 [159])
        (and:SI (reg:SI 7 r7 [159])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 28 176 30 4 include/linux/perf_event.h:996 (set (reg:SI 2 r2 [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 30 28 43 4 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 43 30 23 4 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 43 31 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
        (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 7 r7 [159])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])
        (nil)))

(insn 31 23 17 4 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v:SI 11 fp [orig:144 __ptr ] [144])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8943066)) -1 (nil))

(insn 17 31 99 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x1147ac60 __irq_regs>)
        (nil)))

(note 99 17 179 4 NOTE_INSN_DELETED)

(insn 179 99 24 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/f:SI 1 r1 [158])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)
        (nil)))

(insn 24 179 101 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1 [162])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 r1 [158])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [orig:161 <variable>.cpu ] [161])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1cf60 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 101 24 18 4 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:SI 9 r9 [194])
        (const_int 296 [0x128])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 296 [0x128])
        (nil)))

(insn 18 101 38 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 8985755)) -1 (nil))

(insn 38 18 132 4 arch/arm/kernel/perf_event_v7.c:1071 (set (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
        (plus:SI (reg/v:SI 11 fp [orig:144 __ptr ] [144])
            (reg:SI 1 r1 [162]))) 4 {*arm_addsi3} (nil))

(insn 132 38 25 4 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 8 r8 [192])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 25 132 186 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (reg:SI 1 r1)
        (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:140 __ptr ] [140])
                (reg:SI 1 r1 [162])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 186 25 39 4 include/asm-generic/irq_regs.h:25 discrim 4 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 39 186 187 4 arch/arm/kernel/perf_event_v7.c:1076 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])
            (const_int 140 [0x8c]))) 4 {*arm_addsi3} (nil))

(insn 187 39 178 4 arch/arm/kernel/perf_event_v7.c:1076 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 178 187 27 4 include/linux/perf_event.h:995 (set (reg:DI 0 r0 [163])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 27 178 112 4 include/linux/perf_event.h:995 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 data.addr+0 S8 A64])
        (reg:DI 0 r0 [163])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 112 27 29 4 NOTE_INSN_DELETED)

(insn 29 112 63 4 include/linux/perf_event.h:996 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 100 [0x64])) [0 data.raw+0 S4 A32])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 63 29 188 4 arch/arm/kernel/perf_event_v7.c:786 (set (reg:SI 2 r2)
        (and:SI (reg/v:SI 5 r5 [orig:148 pmnc ] [148])
            (const_int -2147483648 [0xffffffff80000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 188 63 182 4 arch/arm/kernel/perf_event_v7.c:786 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-84 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 182 188 183 4 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])
        (reg/v:SI 5 r5 [orig:148 pmnc ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 183 182 167 4 (set (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])
        (reg:SI 7 r7 [159])) 167 {*arm_movsi_insn} (nil))

(jump_insn 167 183 168 4 arch/arm/kernel/perf_event_v7.c:1072 (set (pc)
        (label_ref 130)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 17)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 168 167 135)

;; Start of basic block ( 17) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  17 [97.1%] 
(code_label 135 168 46 5 270 "" [1 uses])

(note 46 135 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 56 46 50 5 NOTE_INSN_DELETED)

(insn 50 56 54 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [173])
        (ashiftrt:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 54 50 49 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [175])
        (and:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 49 54 189 5 arch/arm/kernel/perf_event_v7.c:1073 (set (reg/v/f:SI 5 r5 [orig:143 event ] [143])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 11 fp [orig:147 cpuc ] [147])) [0 <variable>.events S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 189 49 53 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 6 r6)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-88 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 53 189 55 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:138 D.26785 ] [138])
        (mem/v:SI (plus:SI (mult:SI (reg:SI 1 r1 [173])
                    (const_int 4 [0x4]))
                (reg:SI 6 r6)) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 55 53 57 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [176])
        (lshiftrt:SI (reg:SI 1 r1 [orig:138 D.26785 ] [138])
            (reg:SI 2 r2 [175]))) 117 {*arm_shiftsi3} (nil))

(insn 57 55 58 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [176])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 58 57 59 5 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 16 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  16 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 6 arch/arm/kernel/perf_event_v7.c:785 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 61 60 62 6 arch/arm/kernel/perf_event_v7.c:785 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  7 [28.0%]  (fallthru)
;; Succ edge  8 [72.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  6 [28.0%]  (fallthru)
(note 62 61 164 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 164 62 169 7 arch/arm/kernel/perf_event_v7.c:786 (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-84 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 169 164 170 7 (set (pc)
        (label_ref 90)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 170 169 66)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [72.0%] 
(code_label 66 170 67 8 267 "" [1 uses])

(note 67 66 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(jump_insn 69 67 70 8 arch/arm/kernel/perf_event_v7.c:787 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)
;; Succ edge  11 [0.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 9 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:SI 3 r3 [178])
        (plus:SI (reg:SI 3 r3 [orig:149 D.26022 ] [149])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 72 71 73 9 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [178]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 73 72 74 9 arch/arm/kernel/perf_event_v7.c:787 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)
;; Succ edge  11 [0.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
(note 74 73 77 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 77 74 75 10 NOTE_INSN_DELETED)

(insn 75 77 190 10 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 3 r3 [179])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int -2 [0xfffffffffffffffe]))) 4 {*arm_addsi3} (nil))

(insn 190 75 191 10 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 7 r7)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 191 190 78 10 arch/arm/kernel/perf_event_v7.c:788 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 78 191 171 10 arch/arm/kernel/perf_event_v7.c:788 (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (and:SI (ashift:SI (reg:SI 0 r0)
                (reg:SI 3 r3 [179]))
            (reg:SI 7 r7))) 270 {*arith_shiftsi} (nil))

(jump_insn 171 78 172 10 (set (pc)
        (label_ref 90)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 172 171 81)

;; Start of basic block ( 8 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  8 [0.0%] 
;; Pred edge  9 [0.0%] 
(code_label 81 172 82 11 269 "" [2 uses])

(note 82 81 192 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 192 82 85 11 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-104 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 85 192 86 11 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 2 r2)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 86 85 162 11 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 162 86 87 11 arch/arm/kernel/perf_event_v7.c:790 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x11737a20>)) 167 {*arm_movsi_insn} (nil))

(call_insn 87 162 173 11 arch/arm/kernel/perf_event_v7.c:790 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 173 87 174 11 (set (pc)
        (label_ref 127)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 16)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 174 173 90)

;; Start of basic block ( 7 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
;; Pred edge  10 [100.0%] 
(code_label 90 174 91 12 268 "" [2 uses])

(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 12 arch/arm/kernel/perf_event_v7.c:1083 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 93 92 94 12 arch/arm/kernel/perf_event_v7.c:1083 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7098 [0x1bba])
        (nil)))
;; End of basic block 12 -> ( 16 13)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  16 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 94 93 108 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 108 94 95 13 NOTE_INSN_DELETED)

(insn 95 108 98 13 arch/arm/kernel/perf_event_v7.c:1086 (set (reg/v/f:SI 10 sl [orig:142 hwc ] [142])
        (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
            (const_int 200 [0xc8]))) 4 {*arm_addsi3} (nil))

(insn 98 95 158 13 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 158 98 96 13 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 3 r3)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 96 158 97 13 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 97 96 100 13 arch/arm/kernel/perf_event_v7.c:1087 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 100 97 102 13 arch/arm/kernel/perf_event_v7.c:1087 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_update") [flags 0x3] <function_decl 0x114a1680 armpmu_event_update>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 102 100 104 13 NOTE_INSN_DELETED)

(insn 104 102 105 13 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 105 104 106 13 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 106 105 193 13 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 193 106 103 13 arch/arm/kernel/perf_event_v7.c:1088 (set (reg:DI 6 r6)
        (mem/s/j/c:DI (plus:SI (reg/v/f:SI 5 r5 [orig:143 event ] [143])
                (reg:SI 9 r9 [194])) [0 <variable>.hw.last_period+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 103 193 107 13 arch/arm/kernel/perf_event_v7.c:1088 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 data.period+0 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(call_insn 107 103 109 13 arch/arm/kernel/perf_event_v7.c:1089 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("armpmu_event_set_period") [flags 0x3] <function_decl 0x114a1580 armpmu_event_set_period>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 109 107 110 13 arch/arm/kernel/perf_event_v7.c:1089 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 110 109 111 13 arch/arm/kernel/perf_event_v7.c:1089 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 13 -> ( 16 14)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [71.0%] 
;; Succ edge  14 [29.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [29.0%]  (fallthru)
(note 111 110 117 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 117 111 113 14 NOTE_INSN_DELETED)

(insn 113 117 114 14 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:143 event ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 14 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))
        (nil)))

(insn 115 114 116 14 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-92 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 116 115 118 14 arch/arm/kernel/perf_event_v7.c:1092 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("perf_event_overflow") [flags 0x41] <function_decl 0x113da480 perf_event_overflow>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 118 116 119 14 arch/arm/kernel/perf_event_v7.c:1092 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 119 118 120 14 arch/arm/kernel/perf_event_v7.c:1092 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [29.0%]  (fallthru)
;; Succ edge  16 [71.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  14 [29.0%]  (fallthru)
(note 120 119 123 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 123 120 124 15 NOTE_INSN_DELETED)

(insn 124 123 122 15 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:142 hwc ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 122 124 125 15 arch/arm/kernel/perf_event_v7.c:1093 (set (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 125 122 126 15 arch/arm/kernel/perf_event_v7.c:1093 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:145 idx ] [145])) 167 {*arm_movsi_insn} (nil))

(call_insn 126 125 127 15 arch/arm/kernel/perf_event_v7.c:1093 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:187 armpmu ] [187])
                            (const_int 16 [0x10])) [0 <variable>.disable+0 S4 A64]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 5 12 13 14 15 11) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  5 [50.0%] 
;; Pred edge  12 [71.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  14 [71.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 127 126 128 16 266 "" [5 uses])

(note 128 127 129 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 129 128 130 16 arch/arm/kernel/perf_event_v7.c:1072 (set (reg/v:SI 4 r4 [orig:145 idx ] [145])
        (plus:SI (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 16 4) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [100.0%] 
(code_label 130 129 131 17 265 "" [1 uses])

(note 131 130 133 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 133 131 134 17 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [192]) [0 armpmu+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 armpmu+0 S4 A32])
            (nil))))

(insn 134 133 136 17 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:SI 3 r3 [orig:149 D.26022 ] [149])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:190 armpmu ] [190])
                (const_int 56 [0x38])) [0 <variable>.num_events+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 136 134 137 17 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 idx ] [145])
            (reg:SI 3 r3 [orig:149 D.26022 ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 137 136 138 17 arch/arm/kernel/perf_event_v7.c:1072 discrim 1 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
        (nil)))
;; End of basic block 17 -> ( 5 18)
;; lr  out 	 3 [r3] 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  5 [97.1%] 
;; Succ edge  18 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  17 [2.9%]  (fallthru,loop_exit)
(note 138 137 139 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(call_insn 139 138 140 18 arch/arm/kernel/perf_event_v7.c:1103 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_work_run") [flags 0x41] <function_decl 0x113ba780 irq_work_run>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 140 139 141 18 arch/arm/kernel/perf_event_v7.c:1105 (set (reg:SI 0 r0 [orig:153 D.25997 ] [153])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 3) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 141 140 142 19 264 "" [1 uses])

(note 142 141 153 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 153 142 177 19 arch/arm/kernel/perf_event_v7.c:1106 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 19 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 177 153 184 NOTE_INSN_DELETED)

(note 184 177 0 NOTE_INSN_DELETED)


;; Function perf_callchain_kernel (perf_callchain_kernel)[0:1362]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 20(l0): point = 0
   Insn 14(l0): point = 2
   Insn 12(l0): point = 4
   Insn 10(l0): point = 6
   Insn 8(l0): point = 8
   Insn 18(l0): point = 10
   Insn 11(l0): point = 12
   Insn 9(l0): point = 14
   Insn 7(l0): point = 16
   Insn 13(l0): point = 18
   Insn 17(l0): point = 20
   Insn 19(l0): point = 22
   Insn 2(l0): point = 24
   Insn 3(l0): point = 26
 a0(r138): [3..18]
 a1(r137): [5..12]
 a2(r136): [7..14]
 a3(r135): [9..16]
 a4(r134): [13..26]
 a5(r133): [23..24]
Compressing live ranges: from 29 to 12 - 41%
Ranges after the compression:
 a0(r138): [0..8]
 a1(r137): [1..4]
 a2(r136): [2..6]
 a3(r135): [3..7]
 a4(r134): [5..11]
 a5(r133): [9..10]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r138,l0) conflicts: a1(r137,l0) a2(r136,l0) a3(r135,l0) a4(r134,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r137,l0) conflicts: a0(r138,l0) a2(r136,l0) a3(r135,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r136,l0) conflicts: a0(r138,l0) a1(r137,l0) a3(r135,l0) a4(r134,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a3(r135,l0) conflicts: a0(r138,l0) a1(r137,l0) a2(r136,l0) a4(r134,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a4(r134,l0) conflicts: a0(r138,l0) a2(r136,l0) a3(r135,l0) a5(r133,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a5(r133,l0) conflicts: a4(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=12
    allocnos=6, copies=0, conflicts=1, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r138 1r137 2r136 3r135 4r134 5r133
    modified regnos: 133 134 135 136 137 138
    border:
    Pressure: GENERAL_REGS=7
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
      Pushing a5(r133,l0)
      Pushing a4(r134,l0)
      Pushing a3(r135,l0)
      Pushing a2(r136,l0)
      Pushing a1(r137,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 12
      Popping a2(r136,l0)  -- assign reg 14
      Popping a3(r135,l0)  -- assign reg 4
      Popping a4(r134,l0)  -- assign reg 1
      Popping a5(r133,l0)  -- assign reg 2
Disposition:
    5:r133 l0     2    4:r134 l0     1    3:r135 l0     4    2:r136 l0    14
    1:r137 l0    12    0:r138 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, dead_or_set: 1, 134
insn=2, live_throughout: 13, 134, dead_or_set: 0, 133
insn=19, live_throughout: 13, 134, dead_or_set: 2, 133
insn=17, live_throughout: 2, 13, 134, dead_or_set: 0
insn=13, live_throughout: 0, 2, 13, 134, dead_or_set: 138
insn=7, live_throughout: 0, 2, 13, 134, 138, dead_or_set: 135
insn=9, live_throughout: 0, 2, 13, 134, 135, 138, dead_or_set: 136
insn=11, live_throughout: 0, 2, 13, 135, 136, 138, dead_or_set: 134, 137
insn=18, live_throughout: 0, 2, 13, 135, 136, 137, 138, dead_or_set: 1
insn=8, live_throughout: 0, 1, 2, 13, 136, 137, 138, dead_or_set: 135
insn=10, live_throughout: 0, 1, 2, 13, 137, 138, dead_or_set: 136
insn=12, live_throughout: 0, 1, 2, 13, 138, dead_or_set: 137
insn=14, live_throughout: 0, 1, 2, 13, dead_or_set: 138
insn=20, live_throughout: 13, dead_or_set: 0, 1, 2, 14
init_insns for 137: (insn_list:REG_DEP_TRUE 12 (nil))
changing reg in insn 2
changing reg in insn 19
changing reg in insn 3
changing reg in insn 13
changing reg in insn 11
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
Spilling for insn 8.
Spilling for insn 10.
Spilling for insn 12.
Spilling for insn 14.

Reloads for insn # 8
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 fr.fp+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 fr.fp+0 S4 A64])

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 fr.sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 fr.sp+0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 fr.lr+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 fr.lr+0 S4 A64])

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 fr.pc+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 fr.pc+0 S4 A32])
deleting insn with uid = 3.
deleting insn with uid = 19.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


perf_callchain_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,5u} r2={3d,1u} r3={3d,1u} r4={1d,1u} r12={3d,1u} r13={1d,8u} r14={3d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 153{131d,21u,1e} in 12{11 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 16 2 NOTE_INSN_DELETED)

(note 16 15 2 2 NOTE_INSN_DELETED)

(insn 2 16 17 2 arch/arm/kernel/perf_event.c:773 (set (reg/v/f:SI 2 r2 [orig:133 entry ] [133])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (nil))

(insn 17 2 13 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 13 17 7 2 arch/arm/kernel/perf_event.c:779 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 7 13 9 2 arch/arm/kernel/perf_event.c:776 (set (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 7 11 2 arch/arm/kernel/perf_event.c:777 (set (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 9 18 2 arch/arm/kernel/perf_event.c:778 (set (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:134 regs ] [134])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 fr.lr+0 S4 A64])
        (nil)))

(insn 18 11 8 2 arch/arm/kernel/perf_event.c:780 (set (reg:SI 1 r1)
        (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("callchain_trace") [flags 0x3] <function_decl 0x11532700 callchain_trace>)
        (nil)))

(insn 8 18 10 2 arch/arm/kernel/perf_event.c:776 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 fr.fp+0 S4 A64])
        (reg:SI 4 r4 [orig:135 <variable>.uregs+44 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 10 8 12 2 arch/arm/kernel/perf_event.c:777 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 fr.sp+0 S4 A32])
        (reg:SI 14 lr [orig:136 <variable>.uregs+52 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 12 10 14 2 arch/arm/kernel/perf_event.c:778 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 fr.lr+0 S4 A64])
        (reg:SI 12 ip [orig:137 <variable>.uregs+56 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 14 12 20 2 arch/arm/kernel/perf_event.c:779 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 fr.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn 20 14 28 2 arch/arm/kernel/perf_event.c:780 (parallel [
            (call (mem:SI (symbol_ref:SI ("walk_stackframe") [flags 0x41] <function_decl 0x1147bd00 walk_stackframe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 28 20 29 NOTE_INSN_DELETED)

(note 29 28 0 NOTE_INSN_DELETED)


;; Function perf_callchain_user (perf_callchain_user)[0:1360]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a29 (r181,l2) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r181,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r179,l2) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r179,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r171,l2) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r170,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r161,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r159,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r157,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r150,l2) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r146,l2) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r145,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r144,l2) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r140,l2) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r181,l0) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:10000
  a1(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a5(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a8(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a9(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r181,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a11(r144,l1) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:30000
  a12(r145,l1) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:10000
  a13(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r157,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a19(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r143,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a21(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r144,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a26(r145,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a27(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r179,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a30(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r170,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a33(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r181,l0) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:10000
  a1(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a5(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a8(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a9(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r181,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a11(r144,l1) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:30000
  a12(r145,l1) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:10000
  a13(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r157,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a19(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r143,l1) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a21(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r144,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a26(r145,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a27(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r179,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a30(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r170,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a33(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 151(l0): point = 1
   Insn 56(l0): point = 3
   Insn 27(l0): point = 5
   Insn 8(l0): point = 7
   Insn 158(l0): point = 9
   Insn 2(l0): point = 11
   Insn 157(l0): point = 13
   Insn 7(l0): point = 15
   Insn 95(l1): point = 18
   Insn 94(l1): point = 20
   Insn 141(l1): point = 23
   Insn 84(l1): point = 26
   Insn 83(l1): point = 28
   Insn 82(l1): point = 30
   Insn 78(l1): point = 33
   Insn 77(l1): point = 35
   Insn 140(l1): point = 37
   Insn 76(l1): point = 39
   Insn 71(l1): point = 42
   Insn 155(l1): point = 45
   Insn 146(l1): point = 47
   Insn 64(l1): point = 50
   Insn 63(l1): point = 52
   Insn 62(l1): point = 54
   Insn 61(l1): point = 56
   Insn 58(l1): point = 59
   Insn 135(l1): point = 61
   Insn 134(l1): point = 63
   Insn 53(l1): point = 65
   Insn 57(l1): point = 67
   Insn 51(l1): point = 73
   Insn 44(l1): point = 76
   Insn 43(l1): point = 78
   Insn 40(l1): point = 81
   Insn 39(l1): point = 83
   Insn 37(l1): point = 85
   Insn 38(l1): point = 87
   Insn 35(l1): point = 90
   Insn 34(l1): point = 92
   Insn 33(l1): point = 94
   Insn 31(l1): point = 96
   Insn 145(l1): point = 98
   Insn 29(l1): point = 100
   Insn 28(l1): point = 102
   Insn 110(l2): point = 105
   Insn 109(l2): point = 107
   Insn 105(l2): point = 110
   Insn 104(l2): point = 112
   Insn 103(l2): point = 114
   Insn 153(l2): point = 117
   Insn 143(l2): point = 119
   Insn 19(l2): point = 122
   Insn 18(l2): point = 124
   Insn 16(l2): point = 126
   Insn 159(l2): point = 131
   Insn 15(l2): point = 133
 a0(r181): [1..3]
 a1(r179): [1..5]
 a2(r135): [1..7]
 a3(r148): [8..15]
 a4(r141): [1..13]
 a5(r146): [1..11]
 a6(r135): [90..94] [45..47] [19..42]
 a7(r141): [18..104]
 a8(r146): [18..104]
 a9(r179): [18..104]
 a10(r181): [18..104]
 a11(r144): [55..104] [18..18]
 a12(r145): [18..20]
 a13(r159): [26..37] [21..23]
 a14(r163): [29..30]
 a15(r161): [36..39]
 a16(r138): [50..56] [43..44]
 a17(r158): [53..54]
 a18(r157): [60..68]
 a19(r154): [62..65]
 a20(r143): [62..87]
 a21(r152): [64..73]
 a22(r137): [64..85]
 a23(r139): [95..104]
 a24(r141): [105..135]
 a25(r144): [122..135] [105..119]
 a26(r145): [105..135]
 a27(r146): [105..135]
 a28(r179): [105..135]
 a29(r181): [105..135]
 a30(r139): [122..131]
 a31(r171): [120..135] [105..107]
 a32(r170): [113..114]
 a33(r140): [128..128] [126..126]
 a34(r150): [132..133]
 Rebuilding regno allocno list for 171
 Rebuilding regno allocno list for 170
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 161
 Rebuilding regno allocno list for 159
 Rebuilding regno allocno list for 158
 Rebuilding regno allocno list for 157
 Rebuilding regno allocno list for 154
 Rebuilding regno allocno list for 152
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 144
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 140
 Rebuilding regno allocno list for 139
 Rebuilding regno allocno list for 138
 Rebuilding regno allocno list for 137
Compressing live ranges: from 136 to 54 - 39%
Ranges after the compression:
 a0(r181): [8..53] [0..1]
 a1(r179): [8..53] [0..2]
 a2(r135): [37..38] [22..23] [9..19] [0..3]
 a3(r148): [4..7]
 a4(r141): [8..53] [0..6]
 a5(r146): [8..53] [0..5]
 a11(r144): [47..53] [27..45] [8..8]
 a12(r145): [41..53] [8..10]
 a13(r159): [13..17] [11..12]
 a14(r163): [14..15]
 a15(r161): [16..18]
 a16(r138): [24..28] [20..21]
 a17(r158): [25..26]
 a18(r157): [29..33]
 a19(r154): [30..32]
 a20(r143): [30..36]
 a21(r152): [31..34]
 a22(r137): [31..35]
 a23(r139): [47..50] [39..40]
 a31(r171): [46..53] [41..42]
 a32(r170): [43..44]
 a33(r140): [49..49] [48..48]
 a34(r150): [51..52]
+++Allocating 184 bytes for conflict table (uncompressed size 280)
;; a0(r181,l0) conflicts: a2(r135,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a13(r159,l0) a14(r163,l0) a15(r161,l0) a16(r138,l0) a17(r158,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r179,l0) conflicts: a2(r135,l0) a0(r181,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a13(r159,l0) a14(r163,l0) a15(r161,l0) a16(r138,l0) a17(r158,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r135,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a13(r159,l0) a14(r163,l0) a15(r161,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r148,l0) conflicts: a4(r141,l0) a5(r146,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r141,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a5(r146,l0) a3(r148,l0) a11(r144,l0) a12(r145,l0) a13(r159,l0) a14(r163,l0) a15(r161,l0) a16(r138,l0) a17(r158,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r146,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a3(r148,l0) a11(r144,l0) a12(r145,l0) a13(r159,l0) a14(r163,l0) a15(r161,l0) a16(r138,l0) a17(r158,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a11(r144,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a12(r145,l0) a16(r138,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a12(r145,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a23(r139,l0) a31(r171,l0) a32(r170,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r159,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a14(r163,l0) a15(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r163,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a13(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r161,l0) conflicts: a2(r135,l0) a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a13(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r138,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a17(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r158,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a16(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r157,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r154,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a18(r157,l0) a20(r143,l0) a21(r152,l0) a22(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r143,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a18(r157,l0) a19(r154,l0) a21(r152,l0) a22(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r152,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a22(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r137,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a18(r157,l0) a19(r154,l0) a20(r143,l0) a21(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r139,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a31(r171,l0) a33(r140,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a31(r171,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a23(r139,l0) a33(r140,l0) a34(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r170,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r140,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a23(r139,l0) a31(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r150,l0) conflicts: a0(r181,l0) a1(r179,l0) a4(r141,l0) a5(r146,l0) a11(r144,l0) a12(r145,l0) a31(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a12(r145)<->a13(r159)@125:shuffle
  cp1:a2(r135)<->a16(r138)@125:shuffle
  cp2:a11(r144)<->a17(r158)@125:shuffle
  cp3:a2(r135)<->a23(r139)@1000:move
  cp4:a23(r139)<->a34(r150)@1000:move
  cp5:a2(r135)<->a3(r148)@125:shuffle
  regions=3, blocks=19, points=54
    allocnos=35, copies=6, conflicts=0, ranges=38

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 15 14 13 12 11 10 9 8 7 6 5 17 16 4 3 2
    all: 0r181 1r179 2r135 3r148 4r141 5r146 11r144 12r145 13r159 14r163 15r161 16r138 17r158 18r157 19r154 20r143 21r152 22r137 23r139 31r171 32r170 33r140 34r150
    modified regnos: 135 137 138 139 140 141 143 144 145 146 148 150 152 154 157 158 159 161 163 170 171 179 181
    border:
    Pressure: GENERAL_REGS=14
    Reg 181 of GENERAL_REGS has 4 regs less
    Reg 179 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
      Pushing a33(r140,l0)
      Pushing a34(r150,l0)
      Pushing a32(r170,l0)
      Pushing a31(r171,l0)
      Pushing a17(r158,l0)
      Pushing a15(r161,l0)
      Pushing a14(r163,l0)
      Pushing a12(r145,l0)
      Pushing a16(r138,l0)
      Pushing a13(r159,l0)
      Pushing a3(r148,l0)
      Pushing a2(r135,l0)
      Pushing a0(r181,l0)(potential spill: pri=606, cost=20000)
      Pushing a22(r137,l0)
      Pushing a19(r154,l0)
      Pushing a18(r157,l0)
      Pushing a21(r152,l0)
      Pushing a20(r143,l0)
      Pushing a1(r179,l0)
      Pushing a4(r141,l0)
      Pushing a23(r139,l0)
      Pushing a5(r146,l0)
      Pushing a11(r144,l0)
      Popping a11(r144,l0)  -- assign reg 4
      Popping a5(r146,l0)  -- assign reg 5
      Popping a23(r139,l0)  -- assign reg 6
      Popping a4(r141,l0)  -- assign reg 7
      Popping a1(r179,l0)  -- assign reg 8
      Popping a20(r143,l0)  -- assign reg 2
      Popping a21(r152,l0)  -- assign reg 1
      Popping a18(r157,l0)  -- assign reg 10
      Popping a19(r154,l0)  -- assign reg 0
      Popping a22(r137,l0)  -- assign reg 12
      Popping a0(r181,l0)  -- (memory is more profitable 22000 vs 2147483647) spill
      Popping a2(r135,l0)  -- assign reg 6
      Popping a3(r148,l0)  -- assign reg 6
      Popping a13(r159,l0)  -- assign reg 3
      Popping a16(r138,l0)  -- assign reg 6
      Popping a12(r145,l0)  -- assign reg 3
      Popping a14(r163,l0)  -- assign reg 2
      Popping a15(r161,l0)  -- assign reg 2
      Popping a17(r158,l0)  -- assign reg 4
      Popping a31(r171,l0)  -- assign reg 2
      Popping a32(r170,l0)  -- assign reg 2
      Popping a34(r150,l0)  -- assign reg 6
      Popping a33(r140,l0)  -- assign reg 1
Disposition:
    2:r135 l0     6   22:r137 l0    12   16:r138 l0     6   23:r139 l0     6
   33:r140 l0     1    4:r141 l0     7   20:r143 l0     2   11:r144 l0     4
   12:r145 l0     3    5:r146 l0     5    3:r148 l0     6   34:r150 l0     6
   21:r152 l0     1   19:r154 l0     0   18:r157 l0    10   17:r158 l0     4
   13:r159 l0     3   15:r161 l0     2   14:r163 l0     2   32:r170 l0     2
   31:r171 l0     2    1:r179 l0     8    0:r181 l0   mem
New iteration of spill/restore move
+++Costs: overall 32000, reg 10000, mem 22000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 1, 148
insn=157, live_throughout: 0, 13, 14, 148, dead_or_set: 141
insn=2, live_throughout: 13, 14, 141, 148, dead_or_set: 0, 146
insn=158, live_throughout: 13, 14, 146, 148, dead_or_set: 141
insn=8, live_throughout: 13, 14, 141, 146, dead_or_set: 135, 148
insn=27, live_throughout: 13, 14, 135, 141, 146, dead_or_set: 179
insn=56, live_throughout: 13, 14, 135, 141, 146, 179, dead_or_set: 181
insn=151, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 
insn=107, live_throughout: 13, 14, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 
insn=15, live_throughout: 13, 14, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 150
insn=159, live_throughout: 13, 14, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 139, 150
insn=16, live_throughout: 13, 14, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 139, 140
insn=18, live_throughout: 13, 14, 139, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 
insn=19, live_throughout: 13, 14, 139, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 
insn=143, live_throughout: 13, 14, 141, 145, 146, 179, 181, dead_or_set: 144, 171
insn=153, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 
insn=24, live_throughout: 13, 139, 141, 144, 146, 179, 181, dead_or_set: 
insn=28, live_throughout: 13, 139, 141, 144, 146, 179, 181, dead_or_set: 0
insn=29, live_throughout: 0, 13, 139, 141, 144, 146, 179, 181, dead_or_set: 1
insn=145, live_throughout: 0, 1, 13, 139, 141, 144, 146, 179, 181, dead_or_set: 2
insn=31, live_throughout: 13, 139, 141, 144, 146, 179, 181, dead_or_set: 0, 1, 2, 14
insn=33, live_throughout: 0, 13, 14, 141, 144, 146, 179, 181, dead_or_set: 135, 139
insn=34, live_throughout: 13, 14, 135, 141, 144, 146, 179, 181, dead_or_set: 0
insn=35, live_throughout: 13, 14, 135, 141, 144, 146, 179, 181, dead_or_set: 
insn=38, live_throughout: 13, 14, 141, 144, 146, 179, 181, dead_or_set: 143
insn=37, live_throughout: 13, 14, 141, 143, 144, 146, 179, 181, dead_or_set: 137
insn=39, live_throughout: 13, 14, 137, 141, 143, 144, 146, 179, 181, dead_or_set: 
insn=40, live_throughout: 13, 14, 137, 141, 143, 144, 146, 179, 181, dead_or_set: 
insn=43, live_throughout: 13, 14, 137, 141, 143, 144, 146, 179, 181, dead_or_set: 
insn=44, live_throughout: 13, 14, 137, 141, 143, 144, 146, 179, 181, dead_or_set: 
insn=51, live_throughout: 13, 14, 137, 141, 143, 144, 146, 179, 181, dead_or_set: 152
insn=57, live_throughout: 13, 14, 137, 141, 143, 144, 146, 152, 179, 181, dead_or_set: 157
insn=53, live_throughout: 13, 14, 137, 141, 143, 144, 146, 152, 157, 179, 181, dead_or_set: 154
insn=134, live_throughout: 13, 14, 141, 143, 144, 146, 154, 157, 179, 181, dead_or_set: 137, 152
insn=135, live_throughout: 13, 14, 141, 144, 146, 157, 179, 181, dead_or_set: 143, 154
insn=58, live_throughout: 13, 14, 141, 144, 146, 179, 181, dead_or_set: 157
insn=59, live_throughout: 13, 14, 141, 144, 146, 179, 181, dead_or_set: 
insn=61, live_throughout: 13, 14, 141, 144, 146, 179, 181, dead_or_set: 138
insn=62, live_throughout: 13, 14, 138, 141, 146, 179, 181, dead_or_set: 144, 158
insn=63, live_throughout: 13, 14, 138, 141, 146, 179, 181, dead_or_set: 158
insn=64, live_throughout: 13, 14, 138, 141, 146, 179, 181, dead_or_set: 
insn=146, live_throughout: 13, 14, 141, 146, 179, 181, dead_or_set: 135
insn=155, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 
insn=69, live_throughout: 13, 14, 138, 141, 146, 179, 181, dead_or_set: 
insn=71, live_throughout: 13, 14, 141, 146, 179, 181, dead_or_set: 135, 138
insn=150, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 
insn=76, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 161
insn=140, live_throughout: 13, 14, 135, 141, 146, 161, 179, 181, dead_or_set: 159
insn=77, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 161
insn=78, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 
insn=82, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 163
insn=83, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 163
insn=84, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 
insn=141, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 159
insn=93, live_throughout: 13, 14, 135, 141, 146, 159, 179, 181, dead_or_set: 
insn=94, live_throughout: 13, 14, 135, 141, 146, 179, 181, dead_or_set: 145, 159
insn=95, live_throughout: 13, 14, 141, 145, 146, 179, 181, dead_or_set: 135, 144
insn=96, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 
insn=103, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 170
insn=104, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 170
insn=105, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 
insn=109, live_throughout: 13, 14, 141, 144, 145, 146, 179, 181, dead_or_set: 171
insn=110, live_throughout: 13, 14, 141, 144, 145, 146, 171, 179, 181, dead_or_set: 
insn=116, live_throughout: 13, 14, dead_or_set: 
init_insns for 150: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 76 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 82 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 27 (nil))
init_insns for 181: (insn_list:REG_DEP_TRUE 56 (nil))
changing reg in insn 146
changing reg in insn 33
changing reg in insn 71
changing reg in insn 8
changing reg in insn 95
changing reg in insn 37
changing reg in insn 134
changing reg in insn 61
changing reg in insn 71
changing reg in insn 63
changing reg in insn 159
changing reg in insn 16
changing reg in insn 16
changing reg in insn 33
changing reg in insn 18
changing reg in insn 16
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 15
changing reg in insn 15
changing reg in insn 38
changing reg in insn 57
changing reg in insn 57
changing reg in insn 143
changing reg in insn 95
changing reg in insn 16
changing reg in insn 109
changing reg in insn 109
changing reg in insn 103
changing reg in insn 29
changing reg in insn 62
changing reg in insn 94
changing reg in insn 103
changing reg in insn 2
changing reg in insn 53
changing reg in insn 134
changing reg in insn 82
changing reg in insn 76
changing reg in insn 58
changing reg in insn 38
changing reg in insn 82
changing reg in insn 76
changing reg in insn 7
changing reg in insn 8
changing reg in insn 15
changing reg in insn 159
changing reg in insn 51
changing reg in insn 53
changing reg in insn 134
changing reg in insn 53
changing reg in insn 135
changing reg in insn 57
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 141
changing reg in insn 140
changing reg in insn 94
changing reg in insn 76
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 103
changing reg in insn 104
changing reg in insn 109
changing reg in insn 143
changing reg in insn 27
changing reg in insn 28
Spilling for insn 157.
Using reg 3 for reload 0
Spilling for insn 57.
Spilling for insn 134.
Spilling for insn 135.
Spilling for insn 58.
deleting insn with uid = 56.

Reloads for insn # 157
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 57
Reload 0: reload_in (DI) = (const_int 1 [0x1])
	reload_out (DI) = (reg:DI 10 sl [157])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0), can't combine
	reload_in_reg: (reg:DI 181)
	reload_out_reg: (reg:DI 10 sl [157])
	reload_reg_rtx: (reg:DI 10 sl [157])

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [152])
                                                            (const_int 8 [0x8]))
                                                        (reg/v/f:SI 5 r5 [orig:146 entry ] [146])) [0 <variable>.ip S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [152])
                                                            (const_int 8 [0x8]))
                                                        (reg/v/f:SI 5 r5 [orig:146 entry ] [146])) [0 <variable>.ip S4 A64])

Reloads for insn # 135
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [154])
                                                        (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [154])
                                                        (const_int 4 [0x4])) [0 <variable>.ip S4 A32])

Reloads for insn # 58
Reload 0: reload_out (DI) = (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])
deleting insn with uid = 159.
deleting insn with uid = 33.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 43 (  2.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 46 (  2.4)


perf_callchain_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={5d,4u} r2={8d,8u,1d} r3={7d,6u,1d} r4={3d,7u} r5={1d,6u,2d} r6={7d,6u} r7={2d,2u,1d} r8={1d,1u} r10={2d,2u} r11={2d,2u} r12={3d,1u} r13={1d,23u,1d} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={13d,9u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 260{171d,82u,7e} in 55{54 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 7 2 NOTE_INSN_DELETED)

(insn 7 10 162 2 arch/arm/kernel/perf_event.c:750 (set (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 162 7 157 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 157 162 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 157 158 2 arch/arm/kernel/perf_event.c:746 (set (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
        (reg:SI 0 r0 [ entry ])) 167 {*arm_movsi_insn} (nil))

(insn 158 2 8 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
        (and:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 8 158 27 2 arch/arm/kernel/perf_event.c:750 (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
        (plus:SI (reg:SI 6 r6 [orig:148 <variable>.uregs+44 ] [148])
            (const_int -12 [0xfffffffffffffff4]))) 4 {*arm_addsi3} (nil))

(insn 27 8 56 2 arch/arm/kernel/perf_event.c:729 (set (reg/f:SI 8 r8 [179])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(note 56 27 151 2 NOTE_INSN_DELETED)

(jump_insn 151 56 152 2 arch/arm/kernel/perf_event.c:752 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%] 

(barrier 152 151 107)

;; Start of basic block ( 17) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  17 [95.5%] 
(code_label 107 152 14 3 288 "" [1 uses])

(note 14 107 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 arch/arm/kernel/perf_event.c:727 (set (reg:SI 6 r6 [orig:150 <variable>.addr_limit ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [orig:141 D.26832 ] [141])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])
        (nil)))

(insn 16 15 18 3 arch/arm/kernel/perf_event.c:727 (parallel [
            (set (reg/v:SI 6 r6 [orig:139 flag ] [139])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (set (reg/v:SI 1 r1 [orig:140 roksum ] [140])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 12 [0xc])
                        (reg/v:SI 6 r6 [orig:139 flag ] [139])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 8978803))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 18 16 19 3 arch/arm/kernel/perf_event.c:727 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:139 flag ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 19 18 20 3 arch/arm/kernel/perf_event.c:727 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  4 [71.0%]  (fallthru)
;; Succ edge  5 [29.0%]  (loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [71.0%]  (fallthru)
(note 20 19 143 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 143 20 153 4 arch/arm/kernel/perf_event.c:728 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg:SI 2 r2 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 153 143 154 4 (set (pc)
        (label_ref 96)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  16 [100.0%]  (dfs_back)

(barrier 154 153 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [29.0%]  (loop_exit)
(code_label 24 154 25 5 280 "" [1 uses])

(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 32 25 28 5 NOTE_INSN_DELETED)

(insn 28 32 29 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 0 r0)
        (reg/f:SI 8 r8 [179])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 29 28 145 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:144 tail ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 145 29 31 5 arch/arm/kernel/perf_event.c:729 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(call_insn 31 145 34 5 arch/arm/kernel/perf_event.c:729 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x11466780 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 31 35 5 arch/arm/kernel/perf_event.c:729 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 35 34 36 5 arch/arm/kernel/perf_event.c:729 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 150)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 12 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [50.0%]  (dfs_back)
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 36 35 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 38 36 37 6 include/linux/perf_event.h:1096 (set (reg:DI 2 r2 [orig:143 D.26828 ] [143])
        (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 37 38 39 6 arch/arm/kernel/perf_event.c:732 (set (reg:SI 12 ip [orig:137 D.26836 ] [137])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0+8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 39 37 40 6 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ D.26828+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 40 39 119 6 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 119 40 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 43 119 44 7 include/linux/perf_event.h:1096 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 120 7 include/linux/perf_event.h:1096 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  7 [50.0%]  (fallthru)
(note 120 44 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 120 51 8 NOTE_INSN_DELETED)

(insn 51 52 163 8 include/linux/perf_event.h:1097 (set (reg:SI 1 r1 [152])
        (plus:SI (reg:SI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 163 51 57 8 include/linux/perf_event.h:1097 (set (reg:DI 10 sl [157])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 57 163 53 8 include/linux/perf_event.h:1097 (parallel [
            (set (reg:DI 10 sl [157])
                (plus:DI (reg:DI 10 sl [157])
                    (reg:DI 2 r2 [orig:143 D.26828 ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:143 D.26828 ] [143])
            (const_int 1 [0x1]))
        (nil)))

(insn 53 57 134 8 include/linux/perf_event.h:1097 (set (reg/f:SI 0 r0 [154])
        (plus:SI (mult:SI (reg:SI 1 r1 [152])
                (const_int 8 [0x8]))
            (reg/v/f:SI 5 r5 [orig:146 entry ] [146]))) 270 {*arith_shiftsi} (nil))

(insn 134 53 135 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [152])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 5 r5 [orig:146 entry ] [146])) [0 <variable>.ip S4 A64])
        (reg:SI 12 ip [orig:137 D.26836 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 135 134 58 8 include/linux/perf_event.h:1097 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 r0 [154])
                (const_int 4 [0x4])) [0 <variable>.ip S4 A32])
        (reg:SI 3 r3 [ D.26828+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 58 135 59 8 include/linux/perf_event.h:1097 (set (mem/s/j:DI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S8 A64])
        (reg:DI 10 sl [157])) 163 {*arm_movdi} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  7 [50.0%] 
(code_label 59 58 60 9 282 "" [2 uses])

(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
        (mem/s/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 9 arch/arm/kernel/perf_event.c:738 (set (reg/f:SI 4 r4 [158])
        (plus:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 63 62 64 9 arch/arm/kernel/perf_event.c:738 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
            (reg/f:SI 4 r4 [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 64 63 65 9 arch/arm/kernel/perf_event.c:738 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 65 64 146 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 146 65 155 10 arch/arm/kernel/perf_event.c:739 (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 155 146 156 10 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [100.0%]  (dfs_back)

(barrier 156 155 69)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  9 [50.0%] 
(code_label 69 156 70 11 284 "" [1 uses])

(note 70 69 71 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 150 11 arch/arm/kernel/perf_event.c:741 (set (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])
        (plus:SI (reg/f:SI 6 r6 [orig:138 D.26833 ] [138])
            (const_int -12 [0xfffffffffffffff4]))) 4 {*arm_addsi3} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 2 5 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  2 [100.0%] 
;; Pred edge  5 [50.0%]  (dfs_back)
;; Pred edge  10 [100.0%]  (dfs_back)
(code_label 150 71 149 12 293 "" [3 uses])

(note 149 150 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 76 149 140 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146])
                (const_int 4 [0x4])) [0 <variable>.nr+4 S4 A32])
        (nil)))

(insn 140 76 77 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:QI 3 r3 [159])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 77 140 78 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:161 <variable>.nr+4 ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 78 77 123 12 arch/arm/kernel/perf_event.c:752 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 15 13)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  15 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 123 78 82 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 82 123 83 13 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:146 entry ] [146]) [0 <variable>.nr+0 S4 A64])
        (nil)))

(insn 83 82 84 13 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:163 <variable>.nr ] [163])
            (const_int 254 [0xfe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 84 83 127 13 arch/arm/kernel/perf_event.c:752 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 127 84 141 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 141 127 93 14 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:QI 3 r3 [159])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 12 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  12 [50.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 93 141 128 15 285 "" [2 uses])

(note 128 93 94 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 94 128 95 15 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg:SI 3 r3 [orig:145 D.26206 ] [145])
        (zero_extend:SI (reg:QI 3 r3 [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 95 94 96 15 arch/arm/kernel/perf_event.c:752 discrim 1 (set (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
        (reg/v/f:SI 6 r6 [orig:135 tail.1206 ] [135])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 4) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%]  (dfs_back)
(code_label 96 95 97 16 281 "" [1 uses])

(note 97 96 98 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 98 97 99 16 NOTE_INSN_DELETED)

(note 99 98 101 16 NOTE_INSN_DELETED)

(note 101 99 102 16 NOTE_INSN_DELETED)

(note 102 101 103 16 NOTE_INSN_DELETED)

(insn 103 102 104 16 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:SI 2 r2 [170])
                (and:SI (ne:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 0 [0x0]))
                    (reg:SI 3 r3 [orig:145 D.26206 ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 104 103 105 16 arch/arm/kernel/perf_event.c:753 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 105 104 106 16 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  17 [95.5%]  (fallthru)
;; Succ edge  18 [4.5%]  (loop_exit)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  16 [95.5%]  (fallthru)
(note 106 105 108 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 108 106 109 17 NOTE_INSN_DELETED)

(insn 109 108 110 17 arch/arm/kernel/perf_event.c:753 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [171])
                (and:SI (reg/v/f:SI 4 r4 [orig:144 tail ] [144])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 110 109 116 17 arch/arm/kernel/perf_event.c:753 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 17 -> ( 3 18)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  18 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [4.5%]  (fallthru,loop_exit)
;; Pred edge  16 [4.5%]  (loop_exit)
(code_label 116 110 130 18 289 "" [1 uses])

(note 130 116 160 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 18 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 160 130 161 NOTE_INSN_DELETED)

(note 161 160 0 NOTE_INSN_DELETED)

