
;; Function init_IRQ (init_IRQ)[0:1142] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 8(l0): point = 0
   Insn 6(l0): point = 2
   Insn 5(l0): point = 4
 a0(r133): [1..2]
 a1(r134): [3..4]
Compressing live ranges: from 7 to 4 - 57%
Ranges after the compression:
 a0(r133): [0..1]
 a1(r134): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r133 1r134
    modified regnos: 133 134
    border:
    Pressure: GENERAL_REGS=2
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a1(r134,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 3
      Popping a1(r134,l0)  -- assign reg 3
Disposition:
    0:r133 l0     3    1:r134 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 134
insn=6, live_throughout: 13, dead_or_set: 133, 134
insn=8, live_throughout: 13, dead_or_set: 14, 133
init_insns for 134: (insn_list:REG_DEP_TRUE 5 (nil))
changing reg in insn 6
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 8.
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


init_IRQ

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r3={4d,2u} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 132{126d,6u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 2 5 2 NOTE_INSN_DELETED)

(insn 5 7 6 2 arch/arm/kernel/irq.c:130 (set (reg/f:SI 3 r3 [134])
        (symbol_ref:SI ("machine_desc") [flags 0xc0] <var_decl 0x112b5de0 machine_desc>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("machine_desc") [flags 0xc0] <var_decl 0x112b5de0 machine_desc>)
        (nil)))

(insn 6 5 8 2 arch/arm/kernel/irq.c:130 (set (reg/f:SI 3 r3 [orig:133 machine_desc ] [133])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 machine_desc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 8 6 16 2 arch/arm/kernel/irq.c:130 (parallel [
            (call (mem:SI (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 machine_desc ] [133])
                            (const_int 48 [0x30])) [0 <variable>.init_irq+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 16 8 17 NOTE_INSN_DELETED)

(note 17 16 0 NOTE_INSN_DELETED)


;; Function migrate_irqs (migrate_irqs)[0:1144]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 174.
verify found no changes in insn with uid = 174.
deleting insn with uid = 13.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 43 (  2.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 47 (  2.6)

Pass 0 for finding allocno costs

    a14 (r178,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r173,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r171,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r160,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r159,l1) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a2(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a11(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a12(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a13(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r171,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a30(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r178: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a2(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a11(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a12(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a13(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r171,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a30(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 125(l0): point = 1
   Insn 169(l0): point = 4
   Insn 120(l0): point = 6
   Insn 118(l0): point = 9
   Insn 117(l0): point = 11
   Insn 165(l0): point = 14
   Insn 14(l0): point = 16
   Insn 174(l0): point = 18
   Insn 55(l0): point = 20
   Insn 111(l0): point = 22
   Insn 18(l0): point = 24
   Insn 172(l0): point = 26
   Insn 9(l0): point = 28
   Insn 8(l0): point = 30
   Insn 171(l0): point = 32
   Insn 7(l0): point = 34
   Insn 6(l0): point = 36
   Insn 114(l1): point = 39
   Insn 113(l1): point = 41
   Insn 112(l1): point = 43
   Insn 107(l1): point = 46
   Insn 106(l1): point = 48
   Insn 105(l1): point = 50
   Insn 104(l1): point = 52
   Insn 101(l1): point = 55
   Insn 100(l1): point = 57
   Insn 99(l1): point = 59
   Insn 160(l1): point = 61
   Insn 95(l1): point = 64
   Insn 94(l1): point = 66
   Insn 92(l1): point = 68
   Insn 159(l1): point = 70
   Insn 88(l1): point = 73
   Insn 87(l1): point = 75
   Insn 86(l1): point = 77
   Insn 85(l1): point = 79
   Insn 161(l1): point = 82
   Insn 167(l1): point = 85
   Insn 77(l1): point = 87
   Insn 164(l1): point = 89
   Insn 75(l1): point = 91
   Insn 74(l1): point = 93
   Insn 72(l1): point = 96
   Insn 71(l1): point = 98
   Insn 157(l1): point = 100
   Insn 155(l1): point = 102
   Insn 154(l1): point = 104
   Insn 70(l1): point = 106
   Insn 56(l1): point = 108
   Insn 69(l1): point = 110
   Insn 53(l1): point = 112
   Insn 52(l1): point = 114
   Insn 51(l1): point = 116
   Insn 162(l1): point = 118
   Insn 47(l1): point = 121
   Insn 46(l1): point = 123
   Insn 44(l1): point = 125
   Insn 42(l1): point = 127
   Insn 39(l1): point = 129
   Insn 38(l1): point = 131
   Insn 43(l1): point = 133
   Insn 36(l1): point = 135
   Insn 34(l1): point = 137
   Insn 33(l1): point = 139
   Insn 31(l1): point = 142
   Insn 30(l1): point = 144
   Insn 28(l1): point = 146
   Insn 27(l1): point = 148
   Insn 26(l1): point = 150
   Insn 25(l1): point = 152
   Insn 23(l1): point = 155
   Insn 22(l1): point = 157
 a0(r146): [7..36] [2..3]
 a1(r134): [14..16]
 a2(r152): [17..18]
 a3(r178): [14..20]
 a4(r173): [14..22]
 a5(r148): [14..24]
 a6(r141): [14..32]
 a7(r147): [14..28]
 a8(r134): [39..159]
 a9(r141): [39..159]
 a10(r146): [39..159]
 a11(r147): [94..159] [39..46]
 a12(r148): [39..159]
 a13(r173): [39..159]
 a14(r178): [39..159]
 a15(r171): [42..43]
 a16(r145): [85..100] [76..82]
 a17(r150): [80..152]
 a18(r139): [88..106]
 a19(r140): [92..102]
 a20(r156): [103..137]
 a21(r166): [105..108]
 a22(r167): [107..110]
 a23(r163): [124..125]
 a24(r162): [126..133]
 a25(r143): [126..127]
 a26(r160): [128..129]
 a27(r158): [130..131]
 a28(r159): [132..135]
 a29(r137): [132..139]
 a30(r155): [145..146]
 Rebuilding regno allocno list for 171
 Rebuilding regno allocno list for 167
 Rebuilding regno allocno list for 166
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 162
 Rebuilding regno allocno list for 160
 Rebuilding regno allocno list for 159
 Rebuilding regno allocno list for 158
 Rebuilding regno allocno list for 156
 Rebuilding regno allocno list for 155
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 140
 Rebuilding regno allocno list for 139
 Rebuilding regno allocno list for 137
Compressing live ranges: from 160 to 49 - 30%
Ranges after the compression:
 a0(r146): [13..48] [2..12] [0..1]
 a1(r134): [13..48] [3..4]
 a2(r152): [5..6]
 a3(r178): [13..48] [3..7]
 a4(r173): [13..48] [3..8]
 a5(r148): [13..48] [3..9]
 a6(r141): [13..48] [3..11]
 a7(r147): [23..48] [13..16] [3..10]
 a15(r171): [14..15]
 a16(r145): [20..24] [17..19]
 a17(r150): [18..47]
 a18(r139): [21..28]
 a19(r140): [22..25]
 a20(r156): [26..43]
 a21(r166): [27..30]
 a22(r167): [29..31]
 a23(r163): [32..33]
 a24(r162): [34..41]
 a25(r143): [34..35]
 a26(r160): [36..37]
 a27(r158): [38..39]
 a28(r159): [40..42]
 a29(r137): [40..44]
 a30(r155): [45..46]
+++Allocating 192 bytes for conflict table (uncompressed size 248)
;; a0(r146,l0) conflicts: a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r134,l0) conflicts: a0(r146,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r152,l0) conflicts: a0(r146,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r178,l0) conflicts: a0(r146,l0) a1(r134,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r173,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r148,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a6(r141,l0) a7(r147,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r141,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a7(r147,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r147,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a2(r152,l0) a15(r171,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a15(r171,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r145,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a18(r139,l0) a19(r140,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r150,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a16(r145,l0) a18(r139,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0) a30(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a18(r139,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a16(r145,l0) a17(r150,l0) a19(r140,l0) a20(r156,l0) a21(r166,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a19(r140,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a16(r145,l0) a17(r150,l0) a18(r139,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a20(r156,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a18(r139,l0) a21(r166,l0) a22(r167,l0) a23(r163,l0) a25(r143,l0) a24(r162,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a21(r166,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a18(r139,l0) a20(r156,l0) a22(r167,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a22(r167,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a21(r166,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a23(r163,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r162,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a25(r143,l0) a26(r160,l0) a27(r158,l0) a28(r159,l0) a29(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r143,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a24(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r160,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a24(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r158,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a24(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r159,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a24(r162,l0) a29(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r137,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0) a20(r156,l0) a24(r162,l0) a28(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r155,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r178,l0) a4(r173,l0) a5(r148,l0) a6(r141,l0) a7(r147,l0) a17(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a19(r140)<->a20(r156)@125:shuffle
  cp1:a27(r158)<->a29(r137)@250:shuffle
  cp2:a27(r158)<->a28(r159)@125:shuffle
  cp3:a26(r160)<->a27(r158)@125:shuffle
  cp4:a23(r163)<->a25(r143)@125:shuffle
  cp5:a23(r163)<->a24(r162)@125:shuffle
  regions=2, blocks=18, points=49
    allocnos=31, copies=6, conflicts=0, ranges=34

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r146 1r134 2r152 3r178 4r173 5r148 6r141 7r147 15r171 16r145 17r150 18r139 19r140 20r156 21r166 22r167 23r163 24r162 25r143 26r160 27r158 28r159 29r137 30r155
    modified regnos: 134 137 139 140 141 143 145 146 147 148 150 152 155 156 158 159 160 162 163 166 167 171 173 178
    border:
    Pressure: GENERAL_REGS=13
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 4 regs less
    Reg 173 of GENERAL_REGS has 4 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
    Reg 150 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 4 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
      Pushing a30(r155,l0)
      Pushing a28(r159,l0)
      Pushing a27(r158,l0)
      Pushing a26(r160,l0)
      Pushing a25(r143,l0)
      Pushing a24(r162,l0)
      Pushing a23(r163,l0)
      Pushing a29(r137,l0)
      Pushing a22(r167,l0)
      Pushing a21(r166,l0)
      Pushing a19(r140,l0)
      Pushing a15(r171,l0)
      Pushing a2(r152,l0)
      Pushing a1(r134,l0)(potential spill: pri=1333, cost=20000)
      Pushing a3(r178,l0)(potential spill: pri=2142, cost=30000)
      Pushing a4(r173,l0)(potential spill: pri=2307, cost=30000)
      Pushing a17(r150,l0)(potential spill: pri=2500, cost=30000)
      Pushing a16(r145,l0)
      Pushing a18(r139,l0)
      Pushing a20(r156,l0)
      Pushing a0(r146,l0)
      Pushing a6(r141,l0)
      Pushing a5(r148,l0)
      Pushing a7(r147,l0)
      Popping a7(r147,l0)  -- assign reg 4
      Popping a5(r148,l0)  -- assign reg 5
      Popping a6(r141,l0)  -- assign reg 6
      Popping a0(r146,l0)  -- assign reg 7
      Popping a20(r156,l0)  -- assign reg 8
      Popping a18(r139,l0)  -- assign reg 3
      Popping a16(r145,l0)  -- assign reg 10
      Popping a17(r150,l0)  -- assign reg 9
      Popping a4(r173,l0)  -- assign reg 11
      Popping a3(r178,l0)  -- (memory is more profitable 30000 vs 140000) spill
      Popping a1(r134,l0)  -- (memory is more profitable 20000 vs 140000) spill
      Popping a2(r152,l0)  -- assign reg 3
      Popping a15(r171,l0)  -- assign reg 3
      Popping a19(r140,l0)  -- assign reg 1
      Popping a21(r166,l0)  -- assign reg 2
      Popping a22(r167,l0)  -- assign reg 3
      Popping a29(r137,l0)  -- assign reg 3
      Popping a23(r163,l0)  -- assign reg 3
      Popping a24(r162,l0)  -- assign reg 2
      Popping a25(r143,l0)  -- assign reg 3
      Popping a26(r160,l0)  -- assign reg 3
      Popping a27(r158,l0)  -- assign reg 3
      Popping a28(r159,l0)  -- assign reg 1
      Popping a30(r155,l0)  -- assign reg 3
Disposition:
    1:r134 l0   mem   29:r137 l0     3   18:r139 l0     3   19:r140 l0     1
    6:r141 l0     6   25:r143 l0     3   16:r145 l0    10    0:r146 l0     7
    7:r147 l0     4    5:r148 l0     5   17:r150 l0     9    2:r152 l0     3
   30:r155 l0     3   20:r156 l0     8   27:r158 l0     3   28:r159 l0     1
   26:r160 l0     3   24:r162 l0     2   23:r163 l0     3   21:r166 l0     2
   22:r167 l0     3   15:r171 l0     3    4:r173 l0    11    3:r178 l0   mem
New iteration of spill/restore move
+++Costs: overall 48000, reg -2000, mem 50000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, dead_or_set: 146
insn=7, live_throughout: 13, 146, dead_or_set: 0
insn=171, live_throughout: 0, 13, 146, dead_or_set: 141
insn=8, live_throughout: 13, 141, 146, dead_or_set: 0, 14
insn=9, live_throughout: 13, 14, 141, 146, dead_or_set: 0, 147
insn=172, live_throughout: 13, 14, 146, 147, dead_or_set: 141
insn=18, live_throughout: 13, 14, 141, 146, 147, dead_or_set: 148
insn=111, live_throughout: 13, 14, 141, 146, 147, 148, dead_or_set: 173
insn=55, live_throughout: 13, 14, 141, 146, 147, 148, 173, dead_or_set: 178
insn=174, live_throughout: 13, 14, 141, 146, 147, 148, 173, 178, dead_or_set: 152
insn=14, live_throughout: 13, 14, 141, 146, 147, 148, 173, 178, dead_or_set: 134, 152
insn=165, live_throughout: 13, 14, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=110, live_throughout: 13, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=22, live_throughout: 13, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=23, live_throughout: 13, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=25, live_throughout: 13, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 150
insn=26, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 0
insn=27, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 0, 14
insn=28, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 155
insn=30, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 155
insn=31, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 
insn=33, live_throughout: 13, 134, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 137
insn=34, live_throughout: 13, 134, 137, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 156
insn=36, live_throughout: 13, 134, 137, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 159
insn=43, live_throughout: 13, 134, 137, 141, 146, 147, 148, 150, 156, 159, 173, 178, dead_or_set: 162
insn=38, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 162, 173, 178, dead_or_set: 137, 158, 159
insn=39, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 162, 173, 178, dead_or_set: 158, 160
insn=42, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 162, 173, 178, dead_or_set: 143, 160
insn=44, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 143, 162, 163
insn=46, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 163
insn=47, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 
insn=162, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 0
insn=51, live_throughout: 0, 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 1
insn=52, live_throughout: 0, 1, 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 2
insn=53, live_throughout: 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 0, 1, 2, 14
insn=69, live_throughout: 0, 13, 134, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 167
insn=56, live_throughout: 0, 13, 134, 141, 146, 147, 148, 150, 156, 167, 173, 178, dead_or_set: 166
insn=70, live_throughout: 0, 13, 134, 141, 146, 147, 148, 150, 156, 166, 173, 178, dead_or_set: 139, 167
insn=154, live_throughout: 13, 134, 139, 141, 146, 147, 148, 150, 156, 173, 178, dead_or_set: 0, 166
insn=155, live_throughout: 13, 24, 134, 139, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 140, 156
insn=157, live_throughout: 13, 134, 139, 140, 141, 146, 147, 148, 150, 173, 178, dead_or_set: 145
insn=71, live_throughout: 13, 134, 139, 140, 141, 145, 146, 147, 148, 150, 173, 178, dead_or_set: 
insn=72, live_throughout: 13, 134, 139, 140, 141, 145, 146, 147, 148, 150, 173, 178, dead_or_set: 
insn=74, live_throughout: 13, 134, 139, 140, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 0, 147
insn=75, live_throughout: 0, 13, 134, 139, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 1, 140
insn=164, live_throughout: 0, 1, 13, 134, 139, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 2
insn=77, live_throughout: 13, 134, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 0, 1, 2, 14, 139
insn=167, live_throughout: 13, 134, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 
insn=80, live_throughout: 13, 134, 141, 146, 148, 150, 173, 178, dead_or_set: 
insn=161, live_throughout: 13, 134, 141, 146, 148, 150, 173, 178, dead_or_set: 145
insn=83, live_throughout: 13, 134, 141, 145, 146, 148, 150, 173, 178, dead_or_set: 
insn=85, live_throughout: 13, 134, 141, 145, 146, 148, 173, 178, dead_or_set: 0, 150
insn=86, live_throughout: 13, 134, 141, 145, 146, 148, 173, 178, dead_or_set: 0, 14
insn=87, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 145
insn=88, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 
insn=159, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0
insn=92, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0, 14
insn=94, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0
insn=95, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 
insn=160, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0
insn=99, live_throughout: 0, 13, 134, 141, 146, 148, 173, 178, dead_or_set: 1
insn=100, live_throughout: 0, 1, 13, 134, 141, 146, 148, 173, 178, dead_or_set: 2
insn=101, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0, 1, 2, 14
insn=102, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 
insn=104, live_throughout: 13, 134, 141, 146, 173, 178, dead_or_set: 148
insn=105, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0
insn=106, live_throughout: 13, 134, 141, 146, 148, 173, 178, dead_or_set: 0, 14
insn=107, live_throughout: 13, 14, 134, 141, 146, 148, 173, 178, dead_or_set: 0, 147
insn=108, live_throughout: 13, 14, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=112, live_throughout: 13, 14, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 171
insn=113, live_throughout: 13, 14, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 171
insn=114, live_throughout: 13, 14, 134, 141, 146, 147, 148, 173, 178, dead_or_set: 
insn=117, live_throughout: 13, 14, 146, dead_or_set: 
insn=118, live_throughout: 13, 14, 146, dead_or_set: 
insn=120, live_throughout: 13, 14, dead_or_set: 146
insn=169, live_throughout: 13, 14, dead_or_set: 
insn=123, live_throughout: 13, 14, 146, dead_or_set: 
insn=125, live_throughout: 13, 14, dead_or_set: 146
insn=131, live_throughout: 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 174 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 56 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 69 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 112 (nil))
init_insns for 173: (insn_list:REG_DEP_TRUE 111 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 55 (nil))
      Slot 1 (freq,size): a1r134(3000,4)
      Assigning 134(freq=3000) a new slot 0
changing reg in insn 33
changing reg in insn 38
changing reg in insn 38
changing reg in insn 36
changing reg in insn 43
changing reg in insn 39
changing reg in insn 70
changing reg in insn 77
changing reg in insn 71
changing reg in insn 155
changing reg in insn 75
changing reg in insn 172
changing reg in insn 171
changing reg in insn 172
changing reg in insn 100
changing reg in insn 33
changing reg in insn 33
changing reg in insn 42
changing reg in insn 44
changing reg in insn 157
changing reg in insn 161
changing reg in insn 87
changing reg in insn 6
changing reg in insn 117
changing reg in insn 125
changing reg in insn 120
changing reg in insn 107
changing reg in insn 9
changing reg in insn 74
changing reg in insn 69
changing reg in insn 34
changing reg in insn 28
changing reg in insn 25
changing reg in insn 22
changing reg in insn 69
changing reg in insn 28
changing reg in insn 104
changing reg in insn 18
changing reg in insn 113
changing reg in insn 105
changing reg in insn 104
changing reg in insn 99
changing reg in insn 25
changing reg in insn 85
changing reg in insn 26
changing reg in insn 174
changing reg in insn 14
changing reg in insn 28
changing reg in insn 30
changing reg in insn 34
changing reg in insn 42
changing reg in insn 155
changing reg in insn 51
changing reg in insn 38
changing reg in insn 39
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 56
changing reg in insn 154
changing reg in insn 69
changing reg in insn 70
changing reg in insn 112
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
Spilling for insn 171.
Using reg 3 for reload 0
Spilling for insn 14.
Spilling for insn 56.
Using reg 1 for reload 0
Spilling for insn 155.
deleting insn with uid = 55.

Reloads for insn # 171
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 14
Reload 0: reload_out (SI) = (reg/v/f:SI 134 [ affinity.355 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v/f:SI 134 [ affinity.355 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 56
Reload 0: reload_in (SI) = (symbol_ref:SI ("nr_cpu_ids") [flags 0xc0] <var_decl 0x10ac9d80 nr_cpu_ids>)
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 178)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 155
Reload 0: reload_in (SI) = (reg/v/f:SI 134 [ affinity.355 ])
	reload_out (SI) = (reg/v/f:SI 1 r1 [orig:140 affinity ] [140])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v/f:SI 134 [ affinity.355 ])
	reload_out_reg: (reg/v/f:SI 1 r1 [orig:140 affinity ] [140])
	reload_reg_rtx: (reg/v/f:SI 1 r1 [orig:140 affinity ] [140])
deleting insn with uid = 75.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 53.
rescanning insn with uid = 77.
deleting insn with uid = 77.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 106.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 43 (  2.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 25 count 47 (  2.6)


migrate_irqs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={17d,12u} r1={16d,7u} r2={14d,5u} r3={20d,15u,1d} r4={2d,6u,2d} r5={2d,4u} r6={2d,3u,1d} r7={1d,3u} r8={1d,3u} r9={1d,2u} r10={2d,1u} r11={1d,1u,1d} r12={9d} r13={1d,29u} r14={9d,1u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={21d,10u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} r178={1d} 
;;    total ref usage 1107{999d,102u,6e} in 74{66 regular + 8 call} insns.
(note 2 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 2 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 3 6 2 NOTE_INSN_DELETED)

(insn 6 11 7 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:17 (parallel [
            (set (reg/v:SI 7 r7 [orig:146 flags ] [146])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ arch_local_irq_save
	cpsid	i") ("=r") 0 []
                     [] 1110928))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 7 6 176 2 arch/arm/kernel/irq.c:187 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 176 7 171 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 171 176 8 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(call_insn 8 171 9 2 arch/arm/kernel/irq.c:187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("irq_to_desc") [flags 0x41] <function_decl 0x10b30e00 irq_to_desc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 172 2 arch/arm/kernel/irq.c:187 (set (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 172 9 18 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
        (and:SI (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 18 172 111 2 arch/arm/kernel/irq.c:187 (set (reg/v:SI 5 r5 [orig:148 i ] [148])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 111 18 55 2 arch/arm/kernel/irq.c:187 discrim 1 (set (reg/f:SI 11 fp [173])
        (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)
        (nil)))

(note 55 111 174 2 NOTE_INSN_DELETED)

(insn 174 55 14 2 arch/arm/kernel/irq.c:157 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("cpu_online_mask") [flags 0xc0] <var_decl 0x10ac9e40 cpu_online_mask>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_online_mask") [flags 0xc0] <var_decl 0x10ac9e40 cpu_online_mask>)
        (nil)))

(insn 14 174 177 2 arch/arm/kernel/irq.c:157 (set (reg:SI 3 r3)
        (mem/u/f/c/i:SI (reg/f:SI 3 r3 [152]) [0 cpu_online_mask+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/u/f/c/i:SI (symbol_ref:SI ("cpu_online_mask") [flags 0xc0] <var_decl 0x10ac9e40 cpu_online_mask>) [0 cpu_online_mask+0 S4 A32])
        (nil)))

(insn 177 14 165 2 arch/arm/kernel/irq.c:157 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(jump_insn 165 177 166 2 arch/arm/kernel/irq.c:187 (set (pc)
        (label_ref 108)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 166 165 110)

;; Start of basic block ( 13) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [91.0%] 
(code_label 110 166 21 3 12 "" [1 uses])

(note 21 110 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 3 arch/arm/kernel/irq.c:187 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 3 arch/arm/kernel/irq.c:187 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 3 -> ( 12 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  12 [15.0%] 
;; Succ edge  4 [85.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [85.0%]  (fallthru)
(note 24 23 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 29 24 25 4 NOTE_INSN_DELETED)

(insn 25 29 26 4 arch/arm/kernel/irq.c:193 (set (reg/f:SI 9 r9 [orig:150 D.21609 ] [150])
        (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn 26 25 27 4 arch/arm/kernel/irq.c:193 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [orig:150 D.21609 ] [150])) 167 {*arm_movsi_insn} (nil))

(call_insn 27 26 28 4 arch/arm/kernel/irq.c:193 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_lock") [flags 0x41] <function_decl 0x10b86780 _raw_spin_lock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 28 27 30 4 include/linux/irq.h:187 (set (reg:SI 3 r3 [orig:155 <variable>.irq_data.state_use_accessors ] [155])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
                (const_int 12 [0xc])) [0 <variable>.irq_data.state_use_accessors+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
                (const_int 12 [0xc])) [0 <variable>.irq_data.state_use_accessors+0 S4 A32])
        (nil)))

(insn 30 28 31 4 include/linux/irq.h:187 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:155 <variable>.irq_data.state_use_accessors ] [155])
                (const_int 1 [0x1])
                (const_int 11 [0xb]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 31 30 32 4 include/linux/irq.h:187 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  8 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  4 [50.0%]  (fallthru)
(note 32 31 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 32 45 5 NOTE_INSN_DELETED)

(note 45 37 33 5 NOTE_INSN_DELETED)

(insn 33 45 34 5 arch/arm/kernel/irq.c:154 discrim 1 (set (reg:SI 3 r3 [orig:137 D.21713 ] [137])
        (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])
        (nil)))

(insn 34 33 36 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg/f:SI 8 r8 [156])
        (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
            (const_int 36 [0x24]))) 4 {*arm_addsi3} (nil))

(insn 36 34 43 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [159])
        (plus:SI (reg:SI 3 r3 [orig:137 D.21713 ] [137])
            (const_int 31 [0x1f]))) 4 {*arm_addsi3} (nil))

(insn 43 36 38 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 2 r2 [162])
        (and:SI (reg:SI 3 r3 [orig:137 D.21713 ] [137])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 38 43 39 5 include/asm-generic/bitops/non-atomic.h:105 (parallel [
            (set (reg:SI 3 r3 [orig:158 D.21713 ] [158])
                (if_then_else:SI (ge (reg:SI 3 r3 [orig:137 D.21713 ] [137])
                        (const_int 0 [0x0]))
                    (reg:SI 3 r3 [orig:137 D.21713 ] [137])
                    (reg:SI 1 r1 [159])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 39 38 42 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [160])
        (ashiftrt:SI (reg:SI 3 r3 [orig:158 D.21713 ] [158])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 3 r3 [orig:137 D.21713 ] [137])
            (const_int 32 [0x20]))
        (nil)))

(insn 42 39 44 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:143 D.21696 ] [143])
        (mem/v:SI (plus:SI (mult:SI (reg:SI 3 r3 [160])
                    (const_int 4 [0x4]))
                (reg/f:SI 8 r8 [156])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 44 42 46 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [163])
        (lshiftrt:SI (reg:SI 3 r3 [orig:143 D.21696 ] [143])
            (reg:SI 2 r2 [162]))) 117 {*arm_shiftsi3} (nil))

(insn 46 44 47 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [163])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 47 46 48 5 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 8 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  8 [71.0%] 
;; Succ edge  6 [29.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 48 47 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 54 48 162 6 NOTE_INSN_DELETED)

(insn 162 54 51 6 arch/arm/kernel/irq.c:157 (set (reg:SI 0 r0)
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 51 162 52 6 arch/arm/kernel/irq.c:157 (set (reg:SI 1 r1)
        (reg/f:SI 8 r8 [156])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 53 6 arch/arm/kernel/irq.c:157 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 53 52 69 6 arch/arm/kernel/irq.c:157 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpumask_next_and") [flags 0x41] <function_decl 0x10acf600 cpumask_next_and>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 69 53 178 6 arch/arm/kernel/irq.c:163 (set (reg/f:SI 3 r3 [orig:167 <variable>.irq_data.chip ] [167])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
                (const_int 16 [0x10])) [0 <variable>.irq_data.chip+0 S4 A128])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
                (const_int 16 [0x10])) [0 <variable>.irq_data.chip+0 S4 A128])
        (nil)))

(insn 178 69 56 6 arch/arm/kernel/irq.c:157 (set (reg:SI 1 r1)
        (symbol_ref:SI ("nr_cpu_ids") [flags 0xc0] <var_decl 0x10ac9d80 nr_cpu_ids>)) 167 {*arm_movsi_insn} (nil))

(insn 56 178 70 6 arch/arm/kernel/irq.c:157 (set (reg:SI 2 r2 [orig:166 nr_cpu_ids ] [166])
        (mem/c/i:SI (reg:SI 1 r1) [0 nr_cpu_ids+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 178) [0 nr_cpu_ids+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("nr_cpu_ids") [flags 0xc0] <var_decl 0x10ac9d80 nr_cpu_ids>) [0 nr_cpu_ids+0 S4 A32])
            (nil))))

(insn 70 56 154 6 arch/arm/kernel/irq.c:163 (set (reg/f:SI 3 r3 [orig:139 D.21707 ] [139])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:167 <variable>.irq_data.chip ] [167])
                (const_int 40 [0x28])) [0 <variable>.irq_set_affinity+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 154 70 179 6 arch/arm/kernel/irq.c:158 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (reg:SI 2 r2 [orig:166 nr_cpu_ids ] [166]))) 219 {*arm_cmpsi_insn} (nil))

(insn 179 154 155 6 arch/arm/kernel/irq.c:158 (set (reg/v/f:SI 1 r1 [orig:140 affinity ] [140])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 155 179 157 6 arch/arm/kernel/irq.c:158 (set (reg/v/f:SI 1 r1 [orig:140 affinity ] [140])
        (if_then_else:SI (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/f:SI 8 r8 [156])
            (reg/v/f:SI 1 r1 [orig:140 affinity ] [140]))) 240 {*movsicc_insn} (nil))

(insn 157 155 71 6 arch/arm/kernel/irq.c:158 (set (reg/v:SI 10 sl [orig:145 affinity_broken ] [145])
        (ge:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (nil))

(insn 71 157 72 6 arch/arm/kernel/irq.c:163 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:139 D.21707 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 6 arch/arm/kernel/irq.c:163 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [69.8%]  (fallthru)
;; Succ edge  9 [30.2%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [69.8%]  (fallthru)
(note 73 72 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 164 7 arch/arm/kernel/irq.c:164 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:147 desc ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 164 74 77 7 arch/arm/kernel/irq.c:164 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 77 164 167 7 arch/arm/kernel/irq.c:164 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 3 r3 [orig:139 D.21707 ] [139]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 167 77 168 7 (set (pc)
        (label_ref 83)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 168 167 80)

;; Start of basic block ( 4 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
(code_label 80 168 81 8 8 "" [2 uses])

(note 81 80 161 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 161 81 83 8 arch/arm/kernel/irq.c:155 (set (reg/v:SI 10 sl [orig:145 affinity_broken ] [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [30.2%] 
;; Pred edge  7 [100.0%] 
(code_label 83 161 84 9 11 "" [2 uses])

(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 86 9 arch/arm/kernel/irq.c:195 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [orig:150 D.21609 ] [150])) 167 {*arm_movsi_insn} (nil))

(call_insn 86 85 87 9 arch/arm/kernel/irq.c:195 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock") [flags 0x41] <function_decl 0x10b86c00 _raw_spin_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 87 86 88 9 arch/arm/kernel/irq.c:197 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:145 affinity_broken ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 88 87 89 9 arch/arm/kernel/irq.c:197 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  10 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [29.0%]  (fallthru)
(note 89 88 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 93 89 159 10 NOTE_INSN_DELETED)

(insn 159 93 92 10 arch/arm/kernel/irq.c:197 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(call_insn 92 159 94 10 arch/arm/kernel/irq.c:197 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__printk_ratelimit") [flags 0x41] <function_decl 0x10a53b80 __printk_ratelimit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 94 92 95 10 arch/arm/kernel/irq.c:197 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 95 94 96 10 arch/arm/kernel/irq.c:197 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  10 [0.0%]  (fallthru)
(note 96 95 160 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 160 96 99 11 arch/arm/kernel/irq.c:198 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x1131db40>)) 167 {*arm_movsi_insn} (nil))

(insn 99 160 100 11 arch/arm/kernel/irq.c:198 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:148 i ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 100 99 101 11 arch/arm/kernel/irq.c:198 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:141 D.21704 ] [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 101 100 102 11 arch/arm/kernel/irq.c:198 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a53b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 3 11 9 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  3 [15.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  9 [71.0%] 
;; Pred edge  10 [100.0%] 
(code_label 102 101 103 12 7 "" [3 uses])

(note 103 102 104 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 12 arch/arm/kernel/irq.c:187 (set (reg/v:SI 5 r5 [orig:148 i ] [148])
        (plus:SI (reg/v:SI 5 r5 [orig:148 i ] [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 105 104 106 12 arch/arm/kernel/irq.c:187 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:148 i ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 106 105 107 12 arch/arm/kernel/irq.c:187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("irq_to_desc") [flags 0x41] <function_decl 0x10b30e00 irq_to_desc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 107 106 108 12 arch/arm/kernel/irq.c:187 (set (reg/v/f:SI 4 r4 [orig:147 desc ] [147])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 12 2) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 108 107 109 13 6 "" [1 uses])

(note 109 108 112 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 112 109 113 13 arch/arm/kernel/irq.c:187 discrim 1 (set (reg:SI 3 r3 [orig:171 nr_irqs ] [171])
        (mem/c/i:SI (reg/f:SI 11 fp [173]) [0 nr_irqs+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 11 fp [173]) [0 nr_irqs+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>) [0 nr_irqs+0 S4 A32])
            (nil))))

(insn 113 112 114 13 arch/arm/kernel/irq.c:187 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 i ] [148])
            (reg:SI 3 r3 [orig:171 nr_irqs ] [171]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 114 113 115 13 arch/arm/kernel/irq.c:187 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 13 -> ( 3 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  3 [91.0%] 
;; Succ edge  14 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [9.0%]  (fallthru,loop_exit)
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 116 115 117 14 NOTE_INSN_DELETED)

(insn 117 116 118 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 7 r7 [orig:146 flags ] [146])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 118 117 119 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  15 [39.0%]  (fallthru)
;; Succ edge  16 [61.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 24 [cc]

;; Pred edge  14 [39.0%]  (fallthru)
(note 119 118 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 169 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:142 (parallel [
            (asm_operands/v ("	msr	cpsr_c, %0	@ local_irq_restore") ("") 0 [
                    (reg/v:SI 7 r7 [orig:146 flags ] [146])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 1126928)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(jump_insn 169 120 170 15 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 17)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 170 169 123)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 24 [cc]

;; Pred edge  14 [61.0%] 
(code_label 123 170 124 16 13 "" [1 uses])

(note 124 123 125 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 131 16 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:142 (parallel [
            (asm_operands/v ("	msr	cpsr_c, %0	@ local_irq_restore") ("") 0 [
                    (reg/v:SI 7 r7 [orig:146 flags ] [146])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 1126928)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
(code_label 131 125 134 17 15 "" [1 uses])

(note 134 131 173 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 17 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 173 134 175 NOTE_INSN_DELETED)

(note 175 173 0 NOTE_INSN_DELETED)


;; Function set_irq_flags (set_irq_flags)[0:1141]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 62.
verify found no changes in insn with uid = 62.
deleting insn with uid = 7.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)

Pass 0 for finding allocno costs

    a0 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 50(l0): point = 0
   Insn 49(l0): point = 2
   Insn 48(l0): point = 4
   Insn 47(l0): point = 6
   Insn 45(l0): point = 8
   Insn 42(l0): point = 11
   Insn 40(l0): point = 14
   Insn 39(l0): point = 16
   Insn 35(l0): point = 19
   Insn 33(l0): point = 22
   Insn 32(l0): point = 24
   Insn 61(l0): point = 26
   Insn 20(l0): point = 28
   Insn 15(l0): point = 31
   Insn 13(l0): point = 33
   Insn 14(l0): point = 35
   Insn 10(l0): point = 38
   Insn 9(l0): point = 40
   Insn 8(l0): point = 42
   Insn 62(l0): point = 44
   Insn 3(l0): point = 46
   Insn 2(l0): point = 48
 a0(r142): [3..8]
 a1(r133): [5..26]
 a2(r134): [36..48] [7..30]
 a3(r135): [38..46] [17..30]
 a4(r139): [27..28]
 a5(r137): [41..42]
 a6(r136): [43..44]
Compressing live ranges: from 51 to 17 - 33%
Ranges after the compression:
 a0(r142): [0..3]
 a1(r133): [1..5]
 a2(r134): [9..16] [2..8]
 a3(r135): [10..15] [4..8]
 a4(r139): [6..7]
 a5(r137): [11..12]
 a6(r136): [13..14]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r142,l0) conflicts: a1(r133,l0) a2(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r133,l0) conflicts: a0(r142,l0) a2(r134,l0) a3(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r134,l0) conflicts: a0(r142,l0) a1(r133,l0) a3(r135,l0) a4(r139,l0) a5(r137,l0) a6(r136,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a3(r135,l0) conflicts: a1(r133,l0) a2(r134,l0) a4(r139,l0) a5(r137,l0) a6(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r139,l0) conflicts: a2(r134,l0) a3(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r137,l0) conflicts: a2(r134,l0) a3(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r136,l0) conflicts: a2(r134,l0) a3(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r133)<->a4(r139)@125:shuffle
  regions=1, blocks=9, points=17
    allocnos=7, copies=1, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r142 1r133 2r134 3r135 4r139 5r137 6r136
    modified regnos: 133 134 135 136 137 139 142
    border:
    Pressure: GENERAL_REGS=4
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a6(r136,l0)
      Pushing a5(r137,l0)
      Pushing a4(r139,l0)
      Pushing a3(r135,l0)
      Pushing a2(r134,l0)
      Pushing a1(r133,l0)
      Pushing a0(r142,l0)
      Popping a0(r142,l0)  -- assign reg 2
      Popping a1(r133,l0)  -- assign reg 3
      Popping a2(r134,l0)  -- assign reg 0
      Popping a3(r135,l0)  -- assign reg 1
      Popping a4(r139,l0)  -- assign reg 3
      Popping a5(r137,l0)  -- assign reg 3
      Popping a6(r136,l0)  -- assign reg 3
Disposition:
    1:r133 l0     3    2:r134 l0     0    3:r135 l0     1    6:r136 l0     3
    5:r137 l0     3    4:r139 l0     3    0:r142 l0     2
New iteration of spill/restore move
+++Costs: overall -12250, reg -12250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 13, 14, dead_or_set: 0, 134
insn=3, live_throughout: 13, 14, 134, dead_or_set: 1, 135
insn=62, live_throughout: 13, 14, 134, 135, dead_or_set: 136
insn=8, live_throughout: 13, 14, 134, 135, dead_or_set: 136, 137
insn=9, live_throughout: 13, 14, 134, 135, dead_or_set: 137
insn=10, live_throughout: 13, 14, 134, 135, dead_or_set: 
insn=14, live_throughout: 13, 14, dead_or_set: 1, 134
insn=13, live_throughout: 1, 13, 14, dead_or_set: 0
insn=15, live_throughout: 13, 14, dead_or_set: 0, 1
insn=17, live_throughout: 13, 14, 134, 135, dead_or_set: 
insn=20, live_throughout: 13, 14, 134, 135, dead_or_set: 139
insn=61, live_throughout: 13, 14, 134, 135, dead_or_set: 133, 139
insn=32, live_throughout: 13, 14, 133, 134, 135, dead_or_set: 
insn=33, live_throughout: 13, 14, 133, 134, 135, dead_or_set: 
insn=35, live_throughout: 13, 14, 134, 135, dead_or_set: 133
insn=36, live_throughout: 13, 14, 133, 134, 135, dead_or_set: 
insn=39, live_throughout: 13, 14, 133, 134, dead_or_set: 135
insn=40, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=42, live_throughout: 13, 14, 134, dead_or_set: 133
insn=43, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=45, live_throughout: 13, 14, 133, 134, dead_or_set: 142
insn=47, live_throughout: 13, 14, 133, 142, dead_or_set: 0, 134
insn=48, live_throughout: 0, 13, 14, 142, dead_or_set: 1, 133
insn=49, live_throughout: 0, 1, 13, 14, dead_or_set: 2, 142
insn=50, live_throughout: 13, 14, dead_or_set: 0, 1, 2
init_insns for 136: (insn_list:REG_DEP_TRUE 62 (nil))
changing reg in insn 61
changing reg in insn 42
changing reg in insn 35
changing reg in insn 48
changing reg in insn 45
changing reg in insn 42
changing reg in insn 35
changing reg in insn 2
changing reg in insn 47
changing reg in insn 14
changing reg in insn 9
changing reg in insn 3
changing reg in insn 39
changing reg in insn 32
changing reg in insn 20
changing reg in insn 20
changing reg in insn 62
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 20
changing reg in insn 61
changing reg in insn 45
changing reg in insn 49
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 47.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 50.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


set_irq_flags

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={4d,4u} r1={5d,6u} r2={5d,2u} r3={9d,7u} r12={3d} r13={1d,10u} r14={1d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 288{254d,34u,0e} in 19{17 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 62 2 NOTE_INSN_FUNCTION_BEG)

(insn 62 4 8 2 arch/arm/kernel/irq.c:113 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)
        (nil)))

(insn 8 62 9 2 arch/arm/kernel/irq.c:113 (set (reg:SI 3 r3 [orig:137 nr_irqs ] [137])
        (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 nr_irqs+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>) [0 nr_irqs+0 S4 A32])
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/irq.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:134 irq ] [134])
            (reg:SI 3 r3 [orig:137 nr_irqs ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/irq.c:113 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 11 13 3 arch/arm/kernel/irq.c:114 (set (reg:SI 1 r1)
        (reg/v:SI 0 r0 [orig:134 irq ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 13 14 15 3 arch/arm/kernel/irq.c:114 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1130ff40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1130ff40>)
        (nil)))

(call_insn/j 15 13 16 3 arch/arm/kernel/irq.c:114 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a53b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 15 17)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 17 16 18 4 20 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 19 18 31 4 NOTE_INSN_DELETED)

(note 31 19 20 4 NOTE_INSN_DELETED)

(insn 20 31 61 4 arch/arm/kernel/irq.c:118 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:135 iflags ] [135])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [139])
                (and:SI (reg/v:SI 1 r1 [orig:135 iflags ] [135])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 61 20 32 4 arch/arm/kernel/irq.c:111 (set (reg/v:SI 3 r3 [orig:133 clr ] [133])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [139])
            (const_int 2048 [0x800]))) 240 {*movsicc_insn} (nil))

(insn 32 61 33 4 arch/arm/kernel/irq.c:120 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:135 iflags ] [135])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 33 32 34 4 arch/arm/kernel/irq.c:120 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 5 arch/arm/kernel/irq.c:121 (set (reg/v:SI 3 r3 [orig:133 clr ] [133])
        (ior:SI (reg/v:SI 3 r3 [orig:133 clr ] [133])
            (const_int 1024 [0x400]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 36 35 37 6 23 "" [1 uses])

(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 38 37 39 6 NOTE_INSN_DELETED)

(insn 39 38 40 6 arch/arm/kernel/irq.c:122 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:135 iflags ] [135])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 40 39 41 6 arch/arm/kernel/irq.c:122 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 7 arch/arm/kernel/irq.c:123 (set (reg/v:SI 3 r3 [orig:133 clr ] [133])
        (ior:SI (reg/v:SI 3 r3 [orig:133 clr ] [133])
            (const_int 4096 [0x1000]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 43 42 44 8 24 "" [1 uses])

(note 44 43 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 46 44 45 8 NOTE_INSN_DELETED)

(insn 45 46 48 8 arch/arm/kernel/irq.c:125 (set (reg:SI 2 r2 [142])
        (not:SI (reg/v:SI 3 r3 [orig:133 clr ] [133]))) 134 {*arm_one_cmplsi2} (nil))

(insn 48 45 49 8 arch/arm/kernel/irq.c:125 (set (reg:SI 1 r1)
        (reg/v:SI 3 r3 [orig:133 clr ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 49 48 50 8 arch/arm/kernel/irq.c:125 (set (reg:SI 2 r2)
        (and:SI (reg:SI 2 r2 [142])
            (const_int 7168 [0x1c00]))) 67 {*arm_andsi3_insn} (nil))

(call_insn/j 50 49 51 8 arch/arm/kernel/irq.c:125 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_modify_status") [flags 0x41] <function_decl 0x10eef800 irq_modify_status>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 8 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 51 50 63)

(note 63 51 0 NOTE_INSN_DELETED)


;; Function handle_IRQ (handle_IRQ)[0:1139]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 84.
verify found no changes in insn with uid = 84.
deleting insn with uid = 64.
scanning new insn with uid = 85.
verify found no changes in insn with uid = 85.
deleting insn with uid = 10.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 11 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)

Pass 0 for finding allocno costs

    a0 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r168,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r146,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r168,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r146,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 69(l0): point = 0
   Insn 68(l0): point = 2
   Insn 84(l0): point = 4
   Insn 62(l0): point = 6
   Insn 67(l0): point = 8
   Insn 61(l0): point = 10
   Insn 80(l0): point = 12
   Insn 79(l0): point = 14
   Insn 58(l0): point = 16
   Insn 55(l0): point = 19
   Insn 54(l0): point = 21
   Insn 77(l0): point = 24
   Insn 49(l0): point = 26
   Insn 48(l0): point = 28
   Insn 47(l0): point = 30
   Insn 45(l0): point = 32
   Insn 42(l0): point = 35
   Insn 40(l0): point = 37
   Insn 41(l0): point = 39
   Insn 37(l0): point = 42
   Insn 36(l0): point = 44
   Insn 34(l0): point = 46
   Insn 33(l0): point = 48
   Insn 29(l0): point = 51
   Insn 28(l0): point = 53
   Insn 27(l0): point = 55
   Insn 26(l0): point = 57
   Insn 25(l0): point = 59
   Insn 24(l0): point = 61
   Insn 15(l0): point = 63
   Insn 14(l0): point = 65
   Insn 85(l0): point = 67
   Insn 2(l0): point = 69
   Insn 13(l0): point = 71
   Insn 8(l0): point = 73
   Insn 7(l0): point = 75
   Insn 82(l0): point = 77
   Insn 81(l0): point = 79
 a0(r171): [1..2]
 a1(r134): [1..10]
 a2(r140): [1..63]
 a3(r167): [3..4]
 a4(r170): [3..8]
 a5(r168): [9..14]
 a6(r142): [40..69] [22..23]
 a7(r161): [27..32]
 a8(r164): [27..28]
 a9(r163): [29..30]
 a10(r157): [54..55]
 a11(r156): [56..57]
 a12(r149): [62..65]
 a13(r136): [62..75]
 a14(r145): [66..67]
 a15(r148): [66..71]
 a16(r146): [72..79]
Compressing live ranges: from 82 to 30 - 36%
Ranges after the compression:
 a0(r171): [0..1]
 a1(r134): [0..6]
 a2(r140): [0..21]
 a3(r167): [2..3]
 a4(r170): [2..4]
 a5(r168): [5..7]
 a6(r142): [15..25] [8..9]
 a7(r161): [10..14]
 a8(r164): [10..11]
 a9(r163): [12..13]
 a10(r157): [16..17]
 a11(r156): [18..19]
 a12(r149): [20..22]
 a13(r136): [20..28]
 a14(r145): [23..24]
 a15(r148): [23..26]
 a16(r146): [27..29]
+++Allocating 136 bytes for conflict table (uncompressed size 136)
;; a0(r171,l0) conflicts: a1(r134,l0) a2(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a0(r171,l0) a2(r140,l0) a3(r167,l0) a4(r170,l0) a5(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r140,l0) conflicts: a0(r171,l0) a1(r134,l0) a3(r167,l0) a4(r170,l0) a5(r168,l0) a6(r142,l0) a8(r164,l0) a7(r161,l0) a9(r163,l0) a10(r157,l0) a11(r156,l0) a12(r149,l0) a13(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r167,l0) conflicts: a1(r134,l0) a2(r140,l0) a4(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r170,l0) conflicts: a1(r134,l0) a2(r140,l0) a3(r167,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r168,l0) conflicts: a1(r134,l0) a2(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r142,l0) conflicts: a2(r140,l0) a10(r157,l0) a11(r156,l0) a12(r149,l0) a13(r136,l0) a14(r145,l0) a15(r148,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r161,l0) conflicts: a2(r140,l0) a8(r164,l0) a9(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r164,l0) conflicts: a2(r140,l0) a7(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r163,l0) conflicts: a2(r140,l0) a7(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r157,l0) conflicts: a2(r140,l0) a6(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r156,l0) conflicts: a2(r140,l0) a6(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r149,l0) conflicts: a2(r140,l0) a6(r142,l0) a13(r136,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a13(r136,l0) conflicts: a2(r140,l0) a6(r142,l0) a12(r149,l0) a14(r145,l0) a15(r148,l0) a16(r146,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a14(r145,l0) conflicts: a6(r142,l0) a13(r136,l0) a15(r148,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a15(r148,l0) conflicts: a6(r142,l0) a13(r136,l0) a14(r145,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a16(r146,l0) conflicts: a13(r136,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  cp0:a8(r164)<->a9(r163)@125:shuffle
  regions=1, blocks=8, points=30
    allocnos=17, copies=1, conflicts=1, ranges=18

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r171 1r134 2r140 3r167 4r170 5r168 6r142 7r161 8r164 9r163 10r157 11r156 12r149 13r136 14r145 15r148 16r146
    modified regnos: 134 136 140 142 145 146 148 149 156 157 161 163 164 167 168 170 171
    border:
    Pressure: GENERAL_REGS=5
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
      Pushing a11(r156,l0)
      Pushing a10(r157,l0)
      Pushing a9(r163,l0)
      Pushing a8(r164,l0)
      Pushing a7(r161,l0)
      Pushing a14(r145,l0)
      Pushing a4(r170,l0)
      Pushing a3(r167,l0)
      Pushing a0(r171,l0)
      Pushing a12(r149,l0)
      Pushing a5(r168,l0)
      Pushing a1(r134,l0)
      Pushing a15(r148,l0)
      Pushing a16(r146,l0)
      Pushing a13(r136,l0)
      Pushing a2(r140,l0)
      Pushing a6(r142,l0)
      Popping a6(r142,l0)  -- assign reg 4
      Popping a2(r140,l0)  -- assign reg 5
      Popping a13(r136,l0)  -- assign reg 3
      Popping a16(r146,l0)  -- assign reg 2
      Popping a15(r148,l0)  -- assign reg 2
      Popping a1(r134,l0)  -- assign reg 3
      Popping a5(r168,l0)  -- assign reg 2
      Popping a12(r149,l0)  -- assign reg 2
      Popping a0(r171,l0)  -- assign reg 2
      Popping a3(r167,l0)  -- assign reg 2
      Popping a4(r170,l0)  -- assign reg 1
      Popping a14(r145,l0)  -- assign reg 0
      Popping a7(r161,l0)  -- assign reg 3
      Popping a8(r164,l0)  -- assign reg 2
      Popping a9(r163,l0)  -- assign reg 2
      Popping a10(r157,l0)  -- assign reg 3
      Popping a11(r156,l0)  -- assign reg 3
Disposition:
    1:r134 l0     3   13:r136 l0     3    2:r140 l0     5    6:r142 l0     4
   14:r145 l0     0   16:r146 l0     2   15:r148 l0     2   12:r149 l0     2
   11:r156 l0     3   10:r157 l0     3    7:r161 l0     3    9:r163 l0     2
    8:r164 l0     2    3:r167 l0     2    5:r168 l0     2    4:r170 l0     1
    0:r171 l0     2
New iteration of spill/restore move
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=81, live_throughout: 0, 1, 13, dead_or_set: 146
insn=82, live_throughout: 0, 1, 13, dead_or_set: 146
insn=7, live_throughout: 0, 1, 13, 146, dead_or_set: 136
insn=8, live_throughout: 0, 1, 13, 146, dead_or_set: 136
insn=13, live_throughout: 0, 1, 13, 136, dead_or_set: 146, 148
insn=2, live_throughout: 1, 13, 136, 148, dead_or_set: 0, 142
insn=85, live_throughout: 1, 13, 136, 142, 148, dead_or_set: 145
insn=14, live_throughout: 1, 13, 136, 142, dead_or_set: 145, 148, 149
insn=15, live_throughout: 1, 13, 136, 142, 149, dead_or_set: 140
insn=24, live_throughout: 13, 140, 142, dead_or_set: 1, 136, 149
insn=25, live_throughout: 13, 140, 142, dead_or_set: 14
insn=26, live_throughout: 13, 140, 142, dead_or_set: 156
insn=27, live_throughout: 13, 140, 142, dead_or_set: 156, 157
insn=28, live_throughout: 13, 140, 142, dead_or_set: 157
insn=29, live_throughout: 13, 140, 142, dead_or_set: 
insn=33, live_throughout: 13, 140, 142, dead_or_set: 0
insn=34, live_throughout: 13, 140, 142, dead_or_set: 0, 14
insn=36, live_throughout: 13, 140, 142, dead_or_set: 0
insn=37, live_throughout: 13, 140, 142, dead_or_set: 
insn=41, live_throughout: 13, 140, dead_or_set: 1, 142
insn=40, live_throughout: 1, 13, 140, dead_or_set: 0
insn=42, live_throughout: 13, 140, dead_or_set: 0, 1, 14
insn=43, live_throughout: 13, 140, dead_or_set: 
insn=45, live_throughout: 13, 140, dead_or_set: 161
insn=47, live_throughout: 13, 140, 161, dead_or_set: 163
insn=48, live_throughout: 13, 140, 161, dead_or_set: 163, 164
insn=49, live_throughout: 13, 140, dead_or_set: 161, 164
insn=77, live_throughout: 13, 140, dead_or_set: 
insn=52, live_throughout: 13, 140, 142, dead_or_set: 
insn=54, live_throughout: 13, 140, dead_or_set: 0, 142
insn=55, live_throughout: 13, 140, dead_or_set: 0, 14
insn=56, live_throughout: 13, 140, dead_or_set: 
insn=58, live_throughout: 13, 140, dead_or_set: 14
insn=79, live_throughout: 13, 14, 140, dead_or_set: 168
insn=80, live_throughout: 13, 14, 140, dead_or_set: 168
insn=61, live_throughout: 13, 14, 140, 168, dead_or_set: 134
insn=67, live_throughout: 13, 14, 134, 140, dead_or_set: 168, 170
insn=62, live_throughout: 13, 14, 140, 170, dead_or_set: 134
insn=84, live_throughout: 13, 14, 134, 140, 170, dead_or_set: 167
insn=68, live_throughout: 13, 14, 134, 140, dead_or_set: 167, 170, 171
insn=69, live_throughout: 13, 14, dead_or_set: 134, 140, 171
init_insns for 145: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 47 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 84 (nil))
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 69
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 24
changing reg in insn 15
changing reg in insn 15
changing reg in insn 69
changing reg in insn 2
changing reg in insn 54
changing reg in insn 41
changing reg in insn 28
changing reg in insn 85
changing reg in insn 14
changing reg in insn 82
changing reg in insn 81
changing reg in insn 82
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 14
changing reg in insn 24
changing reg in insn 15
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 84
changing reg in insn 68
changing reg in insn 80
changing reg in insn 79
changing reg in insn 80
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
Spilling for insn 81.
Using reg 3 for reload 0
Spilling for insn 24.
Spilling for insn 49.
Spilling for insn 79.
Using reg 3 for reload 0
Spilling for insn 69.

Reloads for insn # 81
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 24
Reload 0: reload_out (SI) = (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
                                                        (reg:SI 2 r2 [149])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
                                                        (reg:SI 2 r2 [149])) [0 S4 A32])

Reloads for insn # 49
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])

Reloads for insn # 79
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 69
Reload 0: reload_out (SI) = (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
                                                        (reg:SI 2 r2 [171])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
                                                        (reg:SI 2 r2 [171])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 11 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)


handle_IRQ

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,6u} r1={8d,3u,1d} r2={16d,11u,1d} r3={15d,11u,2d} r4={1d,3u} r5={1d,1u} r12={6d} r13={1d,14u} r14={6d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={7d,2u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 677{621d,52u,4e} in 40{35 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 4 87 2 NOTE_INSN_DELETED)

(insn 87 11 81 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 81 87 82 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg:SI 2 r2 [146])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 82 81 7 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg:SI 2 r2 [146])
        (and:SI (reg:SI 2 r2 [146])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 7 82 8 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
        (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x10eac360 __irq_regs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x10eac360 __irq_regs>)
        (nil)))

(insn 8 7 13 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 7419546)) -1 (nil))

(insn 13 8 2 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg:SI 2 r2 [orig:148 <variable>.cpu ] [148])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [146])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 2 13 85 2 arch/arm/kernel/irq.c:76 (set (reg/v:SI 4 r4 [orig:142 irq ] [142])
        (reg:SI 0 r0 [ irq ])) 167 {*arm_movsi_insn} (nil))

(insn 85 2 14 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg/f:SI 0 r0 [145])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)
        (nil)))

(insn 14 85 15 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg:SI 2 r2 [149])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:148 <variable>.cpu ] [148])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 r0 [145])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:148 <variable>.cpu ] [148])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 15 14 24 2 include/asm-generic/irq_regs.h:32 discrim 4 (set (reg/v/f:SI 5 r5 [orig:140 old_regs ] [140])
        (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
                (reg:SI 2 r2 [149])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 24 15 25 2 include/asm-generic/irq_regs.h:33 discrim 4 (set (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:136 __ptr ] [136])
                (reg:SI 2 r2 [149])) [0 S4 A32])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (nil))

(call_insn 25 24 26 2 arch/arm/kernel/irq.c:79 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_enter") [flags 0x41] <function_decl 0x10b4ae80 irq_enter>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 26 25 27 2 arch/arm/kernel/irq.c:85 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>)
        (nil)))

(insn 27 26 28 2 arch/arm/kernel/irq.c:85 (set (reg:SI 3 r3 [orig:157 nr_irqs ] [157])
        (mem/c/i:SI (reg/f:SI 3 r3 [156]) [0 nr_irqs+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("nr_irqs") [flags 0xc0] <var_decl 0x10b39600 nr_irqs>) [0 nr_irqs+0 S4 A32])
        (nil)))

(insn 28 27 29 2 arch/arm/kernel/irq.c:85 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:142 irq ] [142])
            (reg:SI 3 r3 [orig:157 nr_irqs ] [157]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 2 arch/arm/kernel/irq.c:85 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 30 29 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 35 30 33 3 NOTE_INSN_DELETED)

(insn 33 35 34 3 arch/arm/kernel/irq.c:86 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 34 33 36 3 arch/arm/kernel/irq.c:86 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__printk_ratelimit") [flags 0x41] <function_decl 0x10a53b80 __printk_ratelimit>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 36 34 37 3 arch/arm/kernel/irq.c:86 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 37 36 38 3 arch/arm/kernel/irq.c:86 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 38 37 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 41 38 40 4 arch/arm/kernel/irq.c:87 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:142 irq ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 40 41 42 4 arch/arm/kernel/irq.c:87 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11331b10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11331b10>)
        (nil)))

(call_insn 42 40 43 4 arch/arm/kernel/irq.c:87 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a53b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  3 [100.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 43 42 44 5 30 "" [1 uses])

(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 47 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_irq.h:10 (set (reg/f:SI 3 r3 [161])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 47 45 48 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_irq.h:10 (set (reg:SI 2 r2 [orig:163 irq_err_count ] [163])
        (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 irq_err_count+0 S4 A32])
            (nil))))

(insn 48 47 49 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_irq.h:10 (set (reg:SI 2 r2 [164])
        (plus:SI (reg:SI 2 r2 [orig:163 irq_err_count ] [163])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])
        (nil)))

(insn 49 48 77 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_irq.h:10 (set (mem/c/i:SI (reg/f:SI 3 r3 [161]) [0 irq_err_count+0 S4 A32])
        (reg:SI 2 r2 [164])) 167 {*arm_movsi_insn} (nil))

(jump_insn 77 49 78 5 (set (pc)
        (label_ref 56)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 78 77 52)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
(code_label 52 78 53 6 29 "" [1 uses])

(note 53 52 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 6 arch/arm/kernel/irq.c:90 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:142 irq ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 55 54 56 6 arch/arm/kernel/irq.c:90 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("generic_handle_irq") [flags 0x41] <function_decl 0x10ee5300 generic_handle_irq>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 56 55 57 7 31 "" [1 uses])

(note 57 56 65 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 65 57 58 7 NOTE_INSN_DELETED)

(call_insn 58 65 88 7 arch/arm/kernel/irq.c:96 (parallel [
            (call (mem:SI (symbol_ref:SI ("irq_exit") [flags 0x41] <function_decl 0x10b4af00 irq_exit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 88 58 79 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 79 88 80 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg:SI 2 r2 [168])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 80 79 61 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg:SI 2 r2 [168])
        (and:SI (reg:SI 2 r2 [168])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 61 80 67 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x10eac360 __irq_regs>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__irq_regs") [flags 0xc0] <var_decl 0x10eac360 __irq_regs>)
        (nil)))

(insn 67 61 62 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg:SI 1 r1 [orig:170 <variable>.cpu ] [170])
        (mem/s/j:SI (plus:SI (reg:SI 2 r2 [168])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 67 84 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
        (asm_operands:SI ("") ("=r") 0 [
                (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
            ]
             [
                (asm_input:SI ("0") 0)
            ] 7419552)) -1 (nil))

(insn 84 62 68 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg/f:SI 2 r2 [167])
        (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)
        (nil)))

(insn 68 84 69 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (reg:SI 2 r2 [171])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:170 <variable>.cpu ] [170])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [167])) [0 __per_cpu_offset S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:170 <variable>.cpu ] [170])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("__per_cpu_offset") [flags 0xc0] <var_decl 0x10b1a4e0 __per_cpu_offset>)) [0 __per_cpu_offset S4 A32])
        (nil)))

(insn 69 68 83 7 include/asm-generic/irq_regs.h:33 discrim 4 (set (mem/f:SI (plus:SI (reg/v:SI 3 r3 [orig:134 __ptr ] [134])
                (reg:SI 2 r2 [171])) [0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:140 old_regs ] [140])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 83 69 86 NOTE_INSN_DELETED)

(note 86 83 0 NOTE_INSN_DELETED)


;; Function asm_do_IRQ (asm_do_IRQ)[0:1140]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 9(l0): point = 0
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=3
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 13, 14, dead_or_set: 0, 1


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


asm_do_IRQ

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 13[sp]
;;  ref usage 	r0={2d,1u} r1={2d,1u} r2={2d} r3={2d} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 129{123d,6u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 9 2 NOTE_INSN_FUNCTION_BEG)

(call_insn/j 9 4 10 2 arch/arm/kernel/irq.c:106 (parallel [
            (call (mem:SI (symbol_ref:SI ("handle_IRQ") [flags 0x3] <function_decl 0x10b4a580 handle_IRQ>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 18)

(note 18 10 0 NOTE_INSN_DELETED)


;; Function arch_show_interrupts (arch_show_interrupts)[0:1138]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 41.
verify found no changes in insn with uid = 41.
deleting insn with uid = 18.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 36(l0): point = 0
   Insn 30(l0): point = 2
   Insn 25(l0): point = 4
   Insn 20(l0): point = 6
   Insn 24(l0): point = 8
   Insn 19(l0): point = 10
   Insn 41(l0): point = 12
   Insn 22(l0): point = 14
   Insn 23(l0): point = 16
   Insn 21(l0): point = 18
   Insn 15(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 11(l0): point = 28
   Insn 10(l0): point = 30
   Insn 9(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r139): [7..10]
 a1(r138): [11..12]
 a2(r135): [17..34]
 a3(r134): [19..36]
Compressing live ranges: from 39 to 8 - 20%
Ranges after the compression:
 a0(r139): [0..1]
 a1(r138): [2..3]
 a2(r135): [4..6]
 a3(r134): [5..7]
+++Allocating 16 bytes for conflict table (uncompressed size 32)
;; a0(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r138,l0) conflicts:
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r135,l0) conflicts: a3(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r134,l0) conflicts: a2(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  regions=1, blocks=3, points=8
    allocnos=4, copies=0, conflicts=2, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r139 1r138 2r135 3r134
    modified regnos: 134 135 138 139
    border:
    Pressure: GENERAL_REGS=5
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
      Pushing a1(r138,l0)
      Pushing a3(r134,l0)
      Pushing a2(r135,l0)
      Pushing a0(r139,l0)
      Popping a0(r139,l0)  -- assign reg 12
      Popping a2(r135,l0)  -- assign reg 4
      Popping a3(r134,l0)  -- assign reg 5
      Popping a1(r138,l0)  -- assign reg 3
Disposition:
    3:r134 l0     5    2:r135 l0     4    1:r138 l0     3    0:r139 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 1, 13, dead_or_set: 134
insn=3, live_throughout: 0, 1, 13, 134, dead_or_set: 135
insn=9, live_throughout: 13, 134, 135, dead_or_set: 0, 1, 14
insn=10, live_throughout: 13, 134, 135, dead_or_set: 0
insn=11, live_throughout: 0, 13, 134, 135, dead_or_set: 1
insn=12, live_throughout: 13, 134, 135, dead_or_set: 0, 1, 14
insn=13, live_throughout: 13, 134, 135, dead_or_set: 0
insn=14, live_throughout: 0, 13, 134, 135, dead_or_set: 1
insn=15, live_throughout: 13, 134, 135, dead_or_set: 0, 1, 14
insn=21, live_throughout: 13, 135, dead_or_set: 0, 134
insn=23, live_throughout: 0, 13, dead_or_set: 2, 135
insn=22, live_throughout: 0, 2, 13, dead_or_set: 1
insn=41, live_throughout: 0, 1, 2, 13, dead_or_set: 138
insn=19, live_throughout: 0, 1, 2, 13, dead_or_set: 138, 139
insn=24, live_throughout: 0, 1, 2, 13, 139, dead_or_set: 3
insn=20, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=25, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=30, live_throughout: 13, 14, dead_or_set: 0
insn=36, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 20 (nil))
changing reg in insn 2
changing reg in insn 21
changing reg in insn 13
changing reg in insn 10
changing reg in insn 3
changing reg in insn 23
changing reg in insn 14
changing reg in insn 11
changing reg in insn 41
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
Spilling for insn 20.

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 25.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


arch_show_interrupts

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={9d,7u} r1={8d,5u} r2={6d,1u} r3={7d,2u} r4={1d,3u} r5={1d,3u} r12={6d,1u} r13={1d,7u,1d} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 519{488d,30u,1e} in 19{15 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 4 17 2 NOTE_INSN_DELETED)

(note 17 16 26 2 NOTE_INSN_DELETED)

(note 26 17 2 2 NOTE_INSN_DELETED)

(insn 2 26 3 2 arch/arm/kernel/irq.c:55 (set (reg/v/f:SI 5 r5 [orig:134 p ] [134])
        (reg:SI 0 r0 [ p ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 9 2 arch/arm/kernel/irq.c:55 (set (reg/v:SI 4 r4 [orig:135 prec ] [135])
        (reg:SI 1 r1 [ prec ])) 167 {*arm_movsi_insn} (nil))

(call_insn 9 3 10 2 arch/arm/kernel/irq.c:57 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("show_fiq_list") [flags 0x41] <function_decl 0x112b1a00 show_fiq_list>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 10 9 11 2 arch/arm/kernel/irq.c:60 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:134 p ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 2 arch/arm/kernel/irq.c:60 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:135 prec ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 12 11 13 2 arch/arm/kernel/irq.c:60 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_ipi_list") [flags 0x41] <function_decl 0x10b19480 show_ipi_list>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 13 12 14 2 arch/arm/kernel/irq.c:63 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:134 p ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 15 2 arch/arm/kernel/irq.c:63 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:135 prec ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 15 14 21 2 arch/arm/kernel/irq.c:63 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_local_irqs") [flags 0x41] <function_decl 0x10b19d00 show_local_irqs>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 21 15 23 2 arch/arm/kernel/irq.c:65 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:134 p ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 23 21 22 2 arch/arm/kernel/irq.c:65 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:135 prec ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 22 23 41 2 arch/arm/kernel/irq.c:65 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1133d1b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1133d1b0>)
        (nil)))

(insn 41 22 19 2 arch/arm/kernel/irq.c:65 (set (reg/f:SI 3 r3 [138])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 19 41 24 2 arch/arm/kernel/irq.c:65 (set (reg:SI 12 ip [orig:139 irq_err_count ] [139])
        (mem/c/i:SI (reg/f:SI 3 r3 [138]) [0 irq_err_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 24 19 20 2 arch/arm/kernel/irq.c:65 (set (reg:SI 3 r3)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1133c1e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x1133c1e0>)
        (nil)))

(insn 20 24 25 2 arch/arm/kernel/irq.c:65 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [orig:139 irq_err_count ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 25 20 30 2 arch/arm/kernel/irq.c:65 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("seq_printf") [flags 0x41] <function_decl 0x10f70280 seq_printf>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 30 25 36 2 arch/arm/kernel/irq.c:67 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 36 30 40 2 arch/arm/kernel/irq.c:67 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 40 36 42 NOTE_INSN_DELETED)

(note 42 40 0 NOTE_INSN_DELETED)

