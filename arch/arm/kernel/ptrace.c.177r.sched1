
;; Function regs_query_register_name (regs_query_register_name)[0:1537]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 4 from 48 to 51 -- before reload
;;   ======================================================

changing bb of uid 40
  from 3 to 4
;;	  0-->    40 r168=r171+r162                    :cortex_a8_default
;;	  0-->    48 r163=[r171+r162]                  :cortex_a8_load_store_1
changing bb of uid 42
  from 3 to 4
;;	  1-->    42 r162=r162+0x8                     :cortex_a8_default
;;	  2-->    50 cc=cmp(r163,0x0)                  :cortex_a8_default
;;	  4-->    51 pc={(cc!=0x0)?L49:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 48
;;   new tail = 51

;;   ======================================================
;;   -- basic block 3 from 41 to 44 -- before reload
;;   ======================================================

;;	  0-->    41 r164=[r168+0x4]                   :cortex_a8_load_store_1
;;	  2-->    43 cc=cmp(r164,r166)                 :cortex_a8_default
;;	  4-->    44 pc={(cc==0x0)?L52:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 41
;;   new tail = 44

;;   ======================================================
;;   -- basic block 2 from 31 to 89 -- before reload
;;   ======================================================

;;	  0-->    31 r166=r0                           :cortex_a8_default
;;	  0-->    35 r162=0x0                          :cortex_a8_default
;;	  1-->    47 r171=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  1-->    89 pc=L45                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 31
;;   new tail = 89

;;   ======================================================
;;   -- basic block 5 from 58 to 64 -- before reload
;;   ======================================================

;;	  0-->    58 r0=r163                           :cortex_a8_default
;;	  0-->    64 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 58
;;   new tail = 64


;; Procedure interblock/speculative motions == 2/2 




regs_query_register_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,5u} r12={1d} r13={1d,5u} r14={1d,1u} r24={2d,2u} r25={1d,5u} r26={1d,4u} r162={2d,3u,2d} r163={1d,2u} r164={1d,1u} r166={1d,1u} r168={1d,1u} r171={1d,2u} 
;;    total ref usage 57{20d,35u,2e} in 14{14 regular + 0 call} insns.
(note 30 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 162 166 171
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 162 166 171
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 30 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 31 2 NOTE_INSN_FUNCTION_BEG)

(insn 31 32 35 2 arch/arm/kernel/ptrace.c:111 (set (reg/v:SI 166 [ offset ])
        (reg:SI 0 r0 [ offset ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ offset ])
        (nil)))

(insn 35 31 47 2 arch/arm/kernel/ptrace.c:111 (set (reg:SI 162 [ ivtmp.457 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 47 35 89 2 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 171)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(jump_insn 89 47 90 2 arch/arm/kernel/ptrace.c:113 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 166 171
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 166 171


;; Succ edge  4 [100.0%] 

(barrier 90 89 49)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u5(11){ }u6(13){ }u7(25){ }u8(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 171
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 162 166 171
;; lr  def 	 24 [cc] 162 164 168
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 168 171
;; live  gen 	 24 [cc] 162 164 168
;; live  kill	

;; Pred edge  4 [95.5%] 
(code_label 49 90 38 3 4 "" [1 uses])

(note 38 49 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 41 38 43 3 arch/arm/kernel/ptrace.c:114 (set (reg:SI 164 [ D.26791 ])
        (mem/s/j:SI (plus:SI (reg:SI 168)
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 43 41 44 3 arch/arm/kernel/ptrace.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 164 [ D.26791 ])
            (reg/v:SI 166 [ offset ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 164 [ D.26791 ])
        (nil)))

(jump_insn 44 43 45 3 arch/arm/kernel/ptrace.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 171
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 171


;; Succ edge  5 [4.5%]  (loop_exit)
;; Succ edge  4 [95.5%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 166 171
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 162 171
;; lr  def 	 24 [cc] 163
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 166 171
;; live  gen 	 24 [cc] 163
;; live  kill	

;; Pred edge  3 [95.5%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 45 44 46 4 2 "" [1 uses])

(note 46 45 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 40 46 48 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 168)
        (plus:SI (reg/f:SI 171)
            (reg:SI 162 [ ivtmp.457 ]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 162 [ ivtmp.457 ])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))
        (nil)))

(insn 48 40 42 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 163 [ D.26794 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 171)
                (reg:SI 162 [ ivtmp.457 ])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (reg:SI 162 [ ivtmp.457 ])
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 42 48 50 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 162 [ ivtmp.457 ])
        (plus:SI (reg:SI 162 [ ivtmp.457 ])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 50 42 51 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 163 [ D.26794 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 171
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 162 163 166 171


;; Succ edge  3 [95.5%] 
;; Succ edge  5 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 163
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 163
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 163
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (loop_exit)
;; Pred edge  4 [4.5%]  (fallthru,loop_exit)
(code_label 52 51 53 5 3 "" [1 uses])

(note 53 52 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 58 53 64 5 arch/arm/kernel/ptrace.c:117 (set (reg/i:SI 0 r0)
        (reg/f:SI 163 [ D.26794 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 163 [ D.26794 ])
        (nil)))

(insn 64 58 91 5 arch/arm/kernel/ptrace.c:117 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 91 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_within_kernel_stack (regs_within_kernel_stack)[0:1538]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


regs_within_kernel_stack

Dataflow summary:
def_info->table_size = 21, use_info->table_size = 23
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r24={1d} r25={1d,2u} r26={1d,1u} r137={1d,1u} r138={1d,1u} r139={2d,2u} 
;;    total ref usage 32{16d,16u,0e} in 6{6 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d10(25){ }d11(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 24 [cc] 137 138 139
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 137 138 139
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u18(0){ }u19(11){ }u20(13){ }u21(14){ }u22(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 25 to worklist
Finished finding needed instructions:
processing block 2 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 19 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
;;   ======================================================
;;   -- basic block 2 from 7 to 25 -- before reload
;;   ======================================================

;;	  0-->     7 r138=[r0+0x34]                    :cortex_a8_load_store_1
;;	  2-->     8 r137=r1^r138                      :cortex_a8_default
;;	  3-->    29 r139=r137&0xffffffffffffe03f      :cortex_a8_default
;;	  4-->    30 r139=r139&0xffffffffffffffc0      :cortex_a8_default
;;	  5-->    19 {r0=r139==0x0;clobber cc;}        :cortex_a8_default
;;	  5-->    25 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 5
;;   new head = 7
;;   new tail = 25


;; Procedure interblock/speculative motions == 0/0 




regs_within_kernel_stack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r24={1d} r25={1d,2u} r26={1d,1u} r137={1d,1u} r138={1d,1u} r139={2d,2u} 
;;    total ref usage 32{16d,16u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 24 [cc] 137 138 139
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 137 138 139
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 7 2 NOTE_INSN_DELETED)

(insn 7 14 8 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 138 [ <variable>.uregs+52 ])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn 8 7 29 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 137)
        (xor:SI (reg:SI 1 r1 [ addr ])
            (reg:SI 138 [ <variable>.uregs+52 ]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 138 [ <variable>.uregs+52 ])
        (expr_list:REG_DEAD (reg:SI 1 r1 [ addr ])
            (nil))))

(insn 29 8 30 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 139)
        (and:SI (reg:SI 137)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 137)
        (nil)))

(insn 30 29 19 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 139)
        (and:SI (reg:SI 139)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 30 25 2 arch/arm/kernel/ptrace.c:131 (parallel [
            (set (reg/i:SI 0 r0)
                (eq:SI (reg:SI 139)
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 25 19 31 2 arch/arm/kernel/ptrace.c:131 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 31 25 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_get_kernel_stack_nth (regs_get_kernel_stack_nth)[0:1539]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


regs_get_kernel_stack_nth

Dataflow summary:
def_info->table_size = 22, use_info->table_size = 38
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,5u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} r25={1d,5u} r26={1d,4u} r133={1d,1u} r134={1d,3u} r136={2d,1u} r139={1d,2u} r141={1d,1u} r142={2d,2u} 
;;    total ref usage 55{20d,35u,0e} in 13{13 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d10(25){ }d11(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134 139 141 142
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 133 134 139 141 142
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 136
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136

( 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ }u22(13){ }u23(25){ }u24(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 139
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; live  gen 	 136
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136

( 4 3 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u33(0){ }u34(11){ }u35(13){ }u36(14){ }u37(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 39 to worklist
  Adding insn 35 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 29 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
  Adding insn 22 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
  Adding insn 17 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
  Adding insn 14 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 7 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 3 to 15 -- before reload
;;   ======================================================

;;	  0-->     7 r134=[r0+0x34]                    :cortex_a8_load_store_1
;;	  0-->     3 r139=r1                           :cortex_a8_default
;;	  2-->    10 r133=r139*0x4+r134                :cortex_a8_default
;;	  3-->    11 r141=r133^r134                    :cortex_a8_default
;;	  4-->    41 r142=r141&0xffffffffffffe03f      :cortex_a8_default
;;	  5-->    42 r142=r142&0xffffffffffffffc0      :cortex_a8_default
;;	  6-->    14 cc=cmp(r142,0x0)                  :cortex_a8_default
;;	  8-->    15 pc={(cc==0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 3
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 39 -- before reload
;;   ======================================================

;;	  0-->    17 r136=0x0                          :cortex_a8_default
;;	  0-->    39 pc=L23                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 17
;;   new tail = 39

;;   ======================================================
;;   -- basic block 4 from 22 to 22 -- before reload
;;   ======================================================

;;	  0-->    22 r136=[r139*0x4+r134]              :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 22
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 29 to 35 -- before reload
;;   ======================================================

;;	  0-->    29 r0=r136                           :cortex_a8_default
;;	  0-->    35 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 29
;;   new tail = 35


;; Procedure interblock/speculative motions == 0/0 




regs_get_kernel_stack_nth

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,5u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} r25={1d,5u} r26={1d,4u} r133={1d,1u} r134={1d,3u} r136={2d,1u} r139={1d,2u} r141={1d,1u} r142={2d,2u} 
;;    total ref usage 55{20d,35u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134 139 141 142
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 133 134 139 141 142
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 12 2 NOTE_INSN_DELETED)

(note 12 9 7 2 NOTE_INSN_DELETED)

(insn 7 12 3 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:244 (set (reg:SI 134 [ D.27412 ])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn 3 7 10 2 arch/arm/kernel/ptrace.c:143 (set (reg/v:SI 139 [ n ])
        (reg:SI 1 r1 [ n ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ n ])
        (nil)))

(insn 10 3 11 2 arch/arm/kernel/ptrace.c:145 (set (reg/v/f:SI 133 [ addr.512 ])
        (plus:SI (mult:SI (reg/v:SI 139 [ n ])
                (const_int 4 [0x4]))
            (reg:SI 134 [ D.27412 ]))) 270 {*arith_shiftsi} (nil))

(insn 11 10 41 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 141)
        (xor:SI (reg/v/f:SI 133 [ addr.512 ])
            (reg:SI 134 [ D.27412 ]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg/v/f:SI 133 [ addr.512 ])
        (nil)))

(insn 41 11 42 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 142)
        (and:SI (reg:SI 141)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 141)
        (nil)))

(insn 42 41 14 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 142)
        (and:SI (reg:SI 142)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 42 15 2 arch/arm/kernel/ptrace.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 142)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(jump_insn 15 14 16 2 arch/arm/kernel/ptrace.c:146 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139


;; Succ edge  4 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 136
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 39 3 arch/arm/kernel/ptrace.c:149 (set (reg:SI 136 [ D.26815 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 39 17 40 3 (set (pc)
        (label_ref 23)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136


;; Succ edge  5 [100.0%] 

(barrier 40 39 20)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ }u22(13){ }u23(25){ }u24(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 139
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139
;; live  gen 	 136
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 20 40 21 4 12 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 arch/arm/kernel/ptrace.c:147 (set (reg:SI 136 [ D.26815 ])
        (mem:SI (plus:SI (mult:SI (reg/v:SI 139 [ n ])
                    (const_int 4 [0x4]))
                (reg:SI 134 [ D.27412 ])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ n ])
        (expr_list:REG_DEAD (reg:SI 134 [ D.27412 ])
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 23 22 24 5 13 "" [1 uses])

(note 24 23 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 29 24 35 5 arch/arm/kernel/ptrace.c:150 (set (reg/i:SI 0 r0)
        (reg:SI 136 [ D.26815 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136 [ D.26815 ])
        (nil)))

(insn 35 29 43 5 arch/arm/kernel/ptrace.c:150 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 43 35 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_disable (ptrace_disable)[0:1542]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

;; Procedure interblock/speculative motions == 0/0 




ptrace_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 13 3 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_write_user (ptrace_write_user)[0:1547]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)


ptrace_write_user

Dataflow summary:
def_info->table_size = 172, use_info->table_size = 107
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,2u} r3={2d} r11={1d,11u} r12={2d} r13={1d,12u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,6u} r25={1d,14u} r26={1d,10u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,2u} r134={4d,1u} r135={1d,2u} r136={1d,2u} r137={1d,2u} r139={1d,1u} r140={1d,5u} r141={1d,2u} r144={2d,2u} r150={1d,2u} r151={1d,1u,1d} r152={1d,1u} r159={1d,1u} r164={1d,1u} r166={1d,1u} r168={1d,1u} r172={1d,1u} 
;;    total ref usage 251{160d,90u,1e} in 42{41 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d3(0){ }d6(1){ }d9(2){ }d11(3){ }d12(11){ }d14(12){ }d15(13){ }d17(14){ }d36(25){ }d37(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 140 141 144 150
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 140 141 144 150
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150

( 2 )->[3]->( 11 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134

( 2 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150

( 4 )->[5]->( 11 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 150
;; live  gen 	 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134

( 4 )->[6]->( 7 10 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u35(11){ }u36(13){ }u37(25){ }u38(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 136 137 151 152 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 136 137 151 152 159
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 141

( 6 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 141
;; live  gen 	 24 [cc] 135
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 137 141

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u70(11){ }u71(13){ }u72(25){ }u73(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 164 166 168 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 137 141
;; live  gen 	 24 [cc] 164 166 168 172
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141

( 7 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; live  gen 	 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134

( 6 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134

( 10 5 3 9 )->[11]->( 1 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 11 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u102(0){ }u103(11){ }u104(13){ }u105(14){ }u106(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 20 to worklist
  Adding insn 100 to worklist
  Adding insn 28 to worklist
  Adding insn 102 to worklist
  Adding insn 55 to worklist
  Adding insn 51 to worklist
  Adding insn 45 to worklist
  Adding insn 59 to worklist
  Adding insn 74 to worklist
  Adding insn 104 to worklist
  Adding insn 77 to worklist
  Adding insn 96 to worklist
Finished finding needed instructions:
processing block 11 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 90 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
  Adding insn 22 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
  Adding insn 30 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
  Adding insn 78 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
  Adding insn 83 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
  Adding insn 73 to worklist
  Adding insn 72 to worklist
  Adding insn 68 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 137 141
  Adding insn 58 to worklist
  Adding insn 57 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 137 141
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
  Adding insn 27 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 22 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 2 to 20 -- before reload
;;   ======================================================

;;	  0-->     3 r140=r1                           :cortex_a8_default
;;	  0-->     2 r139=r0                           :cortex_a8_default
;;	  1-->   106 {cc=cmp(r140&0x3,0x0);r144=r140&0x:cortex_a8_default
;;	  1-->     4 r141=r2                           :cortex_a8_default
;;	  2-->   107 r144={(cc==0x0)?r144:0x1}         :cortex_a8_default
;;	  3-->    18 {r150=geu(r140,0x128)|r144;clobber:cortex_a8_default
;;	  4-->    19 cc=cmp(r150,0x0)                  :cortex_a8_default
;;	  6-->    20 pc={(cc==0x0)?L25:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 2
;;   new tail = 20

;;   ======================================================
;;   -- basic block 3 from 22 to 100 -- before reload
;;   ======================================================

;;	  0-->    22 r134=0xfffffffffffffffb           :cortex_a8_default
;;	  0-->   100 pc=L84                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 22
;;   new tail = 100

;;   ======================================================
;;   -- basic block 4 from 27 to 28 -- before reload
;;   ======================================================

;;	  0-->    27 cc=cmp(r140,0x47)                 :cortex_a8_default
;;	  2-->    28 pc={(leu(cc,0x0))?L33:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 27
;;   new tail = 28

;;   ======================================================
;;   -- basic block 5 from 30 to 102 -- before reload
;;   ======================================================

;;	  0-->    30 r134=r150                         :cortex_a8_default
;;	  0-->   102 pc=L84                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 30
;;   new tail = 102

;;   ======================================================
;;   -- basic block 6 from 35 to 55 -- before reload
;;   ======================================================

;;	  0-->    36 r151=[r139+0x4]                   :cortex_a8_load_store_1
;;	  0-->    35 r137=r140 0>>0x2                  :cortex_a8_default
;;	  1-->    42 r0=sfp-0x48                       :cortex_a8_default
;;	  1-->    44 r2=0x48                           :cortex_a8_default
;;	  2-->    37 r152=r151+0x1f80                  :cortex_a8_default
;;	  3-->    38 r133=r152+0x30                    :cortex_a8_default
;;	  4-->    43 r1=r133                           :cortex_a8_default
;;	  5-->    45 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  5-->    49 r159=r137*0x4+sfp                 :cortex_a8_default
;;	  7-->    51 [r159-0x48]=r141                  :cortex_a8_load_store_1
;;	  8-->    52 r136=[sfp-0x8]                    :cortex_a8_load_store_1
;;	 10-->    54 cc=cmp(zxt(r136,0x1,0x7),0x0)     :cortex_a8_default
;;	 12-->    55 pc={(cc!=0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 12
;;   new head = 35
;;   new tail = 55

;;   ======================================================
;;   -- basic block 7 from 57 to 59 -- before reload
;;   ======================================================

;;	  0-->    57 r135=r136&0x1f                    :cortex_a8_default
;;	  1-->    58 cc=cmp(r135,0x10)                 :cortex_a8_default
;;	  3-->    59 pc={(cc==0x0)?L75:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 57
;;   new tail = 59

;;   ======================================================
;;   -- basic block 8 from 64 to 74 -- before reload
;;   ======================================================

;;	  0-->    64 r164=`elf_hwcap'                  :cortex_a8_load_store_1
;;	  3-->    65 r166=[r164]                       :cortex_a8_load_store_1
;;	  5-->    68 r168=zxt(r166,0x1,0x3)            :cortex_a8_default
;;	  6-->    72 {r172=r135==0x0&r168;clobber cc;} :cortex_a8_default
;;	  7-->    73 cc=cmp(r172,0x0)                  :cortex_a8_default
;;	  9-->    74 pc={(cc==0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 64
;;   new tail = 74

;;   ======================================================
;;   -- basic block 9 from 77 to 104 -- before reload
;;   ======================================================

;;	  0-->    77 [r137*0x4+r133]=r141              :cortex_a8_load_store_1
;;	  0-->    78 r134=0x0                          :cortex_a8_default
;;	  1-->   104 pc=L84                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 77
;;   new tail = 104

;;   ======================================================
;;   -- basic block 10 from 83 to 83 -- before reload
;;   ======================================================

;;	  0-->    83 r134=0xffffffffffffffea           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 83
;;   new tail = 83

;;   ======================================================
;;   -- basic block 11 from 90 to 96 -- before reload
;;   ======================================================

;;	  0-->    90 r0=r134                           :cortex_a8_default
;;	  0-->    96 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 90
;;   new tail = 96


;; Procedure interblock/speculative motions == 0/0 




ptrace_write_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,2u} r3={2d} r11={1d,11u} r12={2d} r13={1d,12u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,6u} r25={1d,14u} r26={1d,10u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,2u} r134={4d,1u} r135={1d,2u} r136={1d,2u} r137={1d,2u} r139={1d,1u} r140={1d,5u} r141={1d,2u} r144={2d,2u} r150={1d,2u} r151={1d,1u,1d} r152={1d,1u} r159={1d,1u} r164={1d,1u} r166={1d,1u} r168={1d,1u} r172={1d,1u} 
;;    total ref usage 251{160d,90u,1e} in 42{41 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 140 141 144 150
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 140 141 144 150
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 12 2 NOTE_INSN_DELETED)

(note 12 9 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 3 2 NOTE_INSN_DELETED)

(insn 3 17 2 2 arch/arm/kernel/ptrace.c:280 (set (reg/v:SI 140 [ off ])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ off ])
        (nil)))

(insn 2 3 106 2 arch/arm/kernel/ptrace.c:280 (set (reg/v/f:SI 139 [ tsk ])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 106 2 4 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 140 [ off ])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 144)
                (and:SI (reg/v:SI 140 [ off ])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 4 106 107 2 arch/arm/kernel/ptrace.c:280 (set (reg/v:SI 141 [ val ])
        (reg:SI 2 r2 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ val ])
        (nil)))

(insn 107 4 18 2 arch/arm/kernel/ptrace.c:281 (set (reg:SI 144)
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 144)
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 18 107 19 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:SI 150)
                (ior:SI (geu:SI (reg/v:SI 140 [ off ])
                        (const_int 296 [0x128]))
                    (reg:SI 144)))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 19 18 20 2 arch/arm/kernel/ptrace.c:281 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 20 19 21 2 arch/arm/kernel/ptrace.c:281 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 134
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 100 3 arch/arm/kernel/ptrace.c:282 (set (reg/v:SI 134 [ ret ])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))

(jump_insn 100 22 101 3 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134


;; Succ edge  11 [100.0%] 

(barrier 101 100 25)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 25 101 26 4 18 "" [1 uses])

(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 4 arch/arm/kernel/ptrace.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ off ])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 28 27 29 4 arch/arm/kernel/ptrace.c:284 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 141 150


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 150
;; live  gen 	 134
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 102 5 arch/arm/kernel/ptrace.c:285 (set (reg/v:SI 134 [ ret ])
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 102 30 103 5 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134


;; Succ edge  11 [100.0%] 

(barrier 103 102 33)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u35(11){ }u36(13){ }u37(25){ }u38(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 136 137 151 152 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 136 137 151 152 159
;; live  kill	 14 [lr]

;; Pred edge  4 [61.0%] 
(code_label 33 103 34 6 20 "" [1 uses])

(note 34 33 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 39 34 48 6 NOTE_INSN_DELETED)

(note 48 39 50 6 NOTE_INSN_DELETED)

(note 50 48 53 6 NOTE_INSN_DELETED)

(note 53 50 36 6 NOTE_INSN_DELETED)

(insn 36 53 35 6 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 151 [ <variable>.stack ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 139 [ tsk ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 139 [ tsk ])
        (nil)))

(insn 35 36 42 6 arch/arm/kernel/ptrace.c:287 (set (reg:SI 137 [ D.26920 ])
        (lshiftrt:SI (reg/v:SI 140 [ off ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ off ])
        (nil)))

(insn 42 35 44 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(insn 44 42 37 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 37 44 38 6 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 152)
        (plus:SI (reg/f:SI 151 [ <variable>.stack ])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 151 [ <variable>.stack ])
        (nil)))

(insn 38 37 43 6 arch/arm/kernel/ptrace.c:172 (set (reg/v/f:SI 133 [ regs ])
        (plus:SI (reg/f:SI 152)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 151 [ <variable>.stack ])
                (const_int 8112 [0x1fb0]))
            (nil))))

(insn 43 38 45 6 arch/arm/kernel/ptrace.c:175 (set (reg:SI 1 r1)
        (reg/v/f:SI 133 [ regs ])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 43 49 6 arch/arm/kernel/ptrace.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 49 45 51 6 arch/arm/kernel/ptrace.c:176 (set (reg:SI 159)
        (plus:SI (mult:SI (reg:SI 137 [ D.26920 ])
                (const_int 4 [0x4]))
            (reg/f:SI 25 sfp))) 270 {*arith_shiftsi} (nil))

(insn 51 49 52 6 arch/arm/kernel/ptrace.c:176 (set (mem/s/j:SI (plus:SI (reg:SI 159)
                (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])
        (reg/v:SI 141 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 159)
        (nil)))

(insn 52 51 54 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 136 [ D.27452 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 54 52 55 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 136 [ D.27452 ])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 55 54 56 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 141


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 141
;; live  gen 	 24 [cc] 135
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 135 [ mode ])
        (and:SI (reg:SI 136 [ D.27452 ])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 136 [ D.27452 ])
        (nil)))

(insn 58 57 59 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ mode ])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 59 58 60 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 137 141


;; Succ edge  9 [28.0%] 
;; Succ edge  8 [72.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u70(11){ }u71(13){ }u72(25){ }u73(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 164 166 168 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 137 141
;; live  gen 	 24 [cc] 164 166 168 172
;; live  kill	 24 [cc]

;; Pred edge  7 [72.0%]  (fallthru)
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 8 NOTE_INSN_DELETED)

(note 62 61 66 8 NOTE_INSN_DELETED)

(note 66 62 70 8 NOTE_INSN_DELETED)

(note 70 66 71 8 NOTE_INSN_DELETED)

(note 71 70 64 8 NOTE_INSN_DELETED)

(insn 64 71 65 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 164)
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (nil))

(insn 65 64 68 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 166 [ elf_hwcap ])
        (mem/c/i:SI (reg/f:SI 164) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 164)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
            (nil))))

(insn 68 65 72 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 168)
        (zero_extract:SI (reg:SI 166 [ elf_hwcap ])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg:SI 166 [ elf_hwcap ])
        (nil)))

(insn 72 68 73 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 172)
                (and:SI (eq:SI (reg/v:SI 135 [ mode ])
                        (const_int 0 [0x0]))
                    (reg:SI 168)))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 168)
        (expr_list:REG_DEAD (reg/v:SI 135 [ mode ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 73 72 74 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 172)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 172)
        (nil)))

(jump_insn 74 73 75 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; live  gen 	 134
;; live  kill	

;; Pred edge  7 [28.0%] 
;; Pred edge  8 [50.0%]  (fallthru)
(code_label 75 74 76 9 22 "" [1 uses])

(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 9 arch/arm/kernel/ptrace.c:179 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 137 [ D.26920 ])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 133 [ regs ])) [0 <variable>.uregs S4 A32])
        (reg/v:SI 141 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ val ])
        (expr_list:REG_DEAD (reg:SI 137 [ D.26920 ])
            (expr_list:REG_DEAD (reg/v/f:SI 133 [ regs ])
                (nil)))))

(insn 78 77 104 9 arch/arm/kernel/ptrace.c:180 (set (reg/v:SI 134 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 104 78 105 9 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134


;; Succ edge  11 [100.0%] 

(barrier 105 104 81)

;; Start of basic block ( 6 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 134
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  8 [50.0%] 
(code_label 81 105 82 10 21 "" [2 uses])

(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 84 10 arch/arm/kernel/ptrace.c:173 (set (reg/v:SI 134 [ ret ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 5 3 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  3 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 84 83 85 11 19 "" [3 uses])

(note 85 84 90 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 90 85 96 11 arch/arm/kernel/ptrace.c:288 (set (reg/i:SI 0 r0)
        (reg/v:SI 134 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ ret ])
        (nil)))

(insn 96 90 108 11 arch/arm/kernel/ptrace.c:288 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 108 96 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function task_user_regset_view (task_user_regset_view)[0:1563]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 12 to 18 -- before reload
;;   ======================================================

;;	  0-->    12 r0=const(`*.LANCHOR0'+0x98)       :cortex_a8_load_store_1
;;	  0-->    18 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 12
;;   new tail = 18


;; Procedure interblock/speculative motions == 0/0 




task_user_regset_view

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 21{11d,10u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 12 2 NOTE_INSN_DELETED)

(insn 12 7 18 2 arch/arm/kernel/ptrace.c:786 (set (reg/i:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(insn 18 12 22 2 arch/arm/kernel/ptrace.c:786 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 22 18 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_break_init (ptrace_break_init)[0:1545] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 5 to 26 -- before reload
;;   ======================================================

;;	  0-->     5 r134=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	  2-->     6 r0=r134                           :cortex_a8_default
;;	  3-->     7 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  3-->    10 r0=r134+0x1c                      :cortex_a8_default
;;	  4-->    11 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  4-->    14 r0=r134+0x38                      :cortex_a8_default
;;	  5-->    15 call [`register_undef_hook']      :cortex_a8_issue_branch
;;	  5-->    20 r0=0x0                            :cortex_a8_default
;;	  6-->    26 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 6
;;   new head = 5
;;   new tail = 26


;; Procedure interblock/speculative motions == 0/0 




ptrace_break_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 13[sp] 14[lr]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r3={4d} r11={1d,2u} r12={4d} r13={1d,5u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={1d,2u} r26={1d,1u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r134={1d,3u} 
;;    total ref usage 385{366d,19u,0e} in 9{6 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 134
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 13 2 NOTE_INSN_DELETED)

(note 13 9 16 2 NOTE_INSN_DELETED)

(note 16 13 5 2 NOTE_INSN_DELETED)

(insn 5 16 6 2 arch/arm/kernel/ptrace.c:241 (set (reg/f:SI 134)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 7 2 arch/arm/kernel/ptrace.c:241 (set (reg:SI 0 r0)
        (reg/f:SI 134)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 7 6 10 2 arch/arm/kernel/ptrace.c:241 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 10 7 11 2 arch/arm/kernel/ptrace.c:242 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 134)
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn 11 10 14 2 arch/arm/kernel/ptrace.c:242 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 11 15 2 arch/arm/kernel/ptrace.c:243 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 134)
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 134)
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 56 [0x38])))
            (nil))))

(call_insn 15 14 20 2 arch/arm/kernel/ptrace.c:243 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 15 26 2 arch/arm/kernel/ptrace.c:245 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 20 30 2 arch/arm/kernel/ptrace.c:245 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 30 26 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function syscall_trace (syscall_trace)[0:1565]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


syscall_trace

Dataflow summary:
def_info->table_size = 274, use_info->table_size = 77
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,7u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r25={1d,7u} r26={1d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r141={2d,6u} r142={1d,1u} r144={1d,1u} r147={1d,1u} r148={1d,3u} r149={2d,2u} r154={1d,2u} r156={1d,1u} r163={1d,1u} r166={1d,2u} r167={1d,2u} r175={1d,1u} r176={1d,1u} r177={2d,2u} 
;;    total ref usage 341{270d,71u,0e} in 36{34 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d9(1){ }d13(2){ }d16(3){ }d17(11){ }d20(12){ }d21(13){ }d24(14){ }d49(25){ }d50(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 141 142 147 148 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 141 142 147 148 149
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149

( 2 )->[3]->( 7 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 154 156
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; live  gen 	 24 [cc] 154 156
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149 154
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149 154

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u23(11){ }u24(13){ }u25(25){ }u26(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144 163 166 167
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; live  gen 	 0 [r0] 24 [cc] 144 163 166 167
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 144 148 166 167
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 166 167
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 175 176
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 175 176
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148

( 4 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148
;; lr  def 	 149 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148
;; live  gen 	 149 177
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149

( 2 3 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u66(11){ }u67(13){ }u68(25){ }u69(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u72(0){ }u73(11){ }u74(13){ }u75(14){ }u76(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 11 to worklist
  Adding insn 23 to worklist
  Adding insn 56 to worklist
  Adding insn 49 to worklist
  Adding insn 30 to worklist
  Adding insn 26 to worklist
  Adding insn 74 to worklist
  Adding insn 68 to worklist
  Adding insn 77 to worklist
  Adding insn 94 to worklist
Finished finding needed instructions:
processing block 7 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 88 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
  Adding insn 81 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 148
  Adding insn 73 to worklist
  Adding insn 72 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 144 148 166 167
  Adding insn 55 to worklist
  Adding insn 54 to worklist
  Adding insn 53 to worklist
  Adding insn 48 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 25 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149 154
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
  Adding insn 13 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 2 to 14 -- before reload
;;   ======================================================

;;	  0-->   102 r141=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  0-->     2 r147=r0                           :cortex_a8_default
;;	  1-->   103 r141=r141&0xffffffffffffffc0      :cortex_a8_default
;;	  1-->     3 r148=r1                           :cortex_a8_default
;;	  2-->     4 r149=r2                           :cortex_a8_default
;;	  3-->    11 r142=[r141]                       :cortex_a8_load_store_1
;;	  5-->    13 cc=cmp(zxt(r142,0x1,0x8),0x0)     :cortex_a8_default
;;	  7-->    14 pc={(cc==0x0)?L82:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 2
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 19 to 23 -- before reload
;;   ======================================================

;;	  0-->    19 r154=[r141+0xc]                   :cortex_a8_load_store_1
;;	  3-->    20 r156=[r154+0x10]                  :cortex_a8_load_store_1
;;	  5-->    22 cc=cmp(zxt(r156,0x1,0x0),0x0)     :cortex_a8_default
;;	  7-->    23 pc={(cc==0x0)?L82:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 19
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 25 to 56 -- before reload
;;   ======================================================

;;	  0-->    30 [r141+0x4c]=r149                  :cortex_a8_load_store_1
;;	  1-->    25 r144=[r148+0x30]                  :cortex_a8_load_store_1
;;	  2-->    26 [r148+0x30]=r147                  :cortex_a8_load_store_1
;;	  3-->    35 r163=[r154+0x10]                  :cortex_a8_load_store_1
;;	  5-->    37 cc=cmp(zxt(r163,0x1,0x2),0x0)     :cortex_a8_default
;;	  6-->    48 r0={(cc!=0x0)?0x85:0x5}           :cortex_a8_default
;;	  7-->    49 call [`ptrace_notify']            :cortex_a8_issue_branch
;;	  7-->    53 r166=[r141+0xc]                   :cortex_a8_load_store_1
;;	 10-->    54 r167=[r166+0x1fc]                 :cortex_a8_load_store_1
;;	 12-->    55 cc=cmp(r167,0x0)                  :cortex_a8_default
;;	 14-->    56 pc={(cc==0x0)?L75:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 14
;;   new head = 25
;;   new tail = 56

;;   ======================================================
;;   -- basic block 5 from 65 to 74 -- before reload
;;   ======================================================

;;	  0-->    65 r0=r167                           :cortex_a8_default
;;	  0-->    66 r1=r166                           :cortex_a8_default
;;	  1-->    67 r2=0x1                            :cortex_a8_default
;;	  2-->    68 r0=call [`send_sig']              :cortex_a8_issue_branch
;;	  2-->    72 r175=[r141+0xc]                   :cortex_a8_load_store_1
;;	  3-->    73 r176=0x0                          :cortex_a8_default
;;	  5-->    74 [r175+0x1fc]=r176                 :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 65
;;   new tail = 74

;;   ======================================================
;;   -- basic block 6 from 77 to 81 -- before reload
;;   ======================================================

;;	  0-->   100 r177=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  0-->    77 [r148+0x30]=r144                  :cortex_a8_load_store_1
;;	  1-->   101 r177=r177&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->    81 r149=[r177+0x4c]                  :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 77
;;   new tail = 81

;;   ======================================================
;;   -- basic block 7 from 88 to 94 -- before reload
;;   ======================================================

;;	  0-->    88 r0=r149                           :cortex_a8_default
;;	  0-->    94 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 88
;;   new tail = 94


;; Procedure interblock/speculative motions == 0/0 




syscall_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,7u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r25={1d,7u} r26={1d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r141={2d,6u} r142={1d,1u} r144={1d,1u} r147={1d,1u} r148={1d,3u} r149={2d,2u} r154={1d,2u} r156={1d,1u} r163={1d,1u} r166={1d,2u} r167={1d,2u} r175={1d,1u} r176={1d,1u} r177={2d,2u} 
;;    total ref usage 341{270d,71u,0e} in 36{34 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 141 142 147 148 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 141 142 147 148 149
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 12 2 NOTE_INSN_DELETED)

(note 12 9 102 2 NOTE_INSN_DELETED)

(insn 102 12 2 2 include/linux/thread_info.h:84 (set (reg/f:SI 141 [ D.27485 ])
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 102 103 2 arch/arm/kernel/ptrace.c:905 (set (reg/v:SI 147 [ why ])
        (reg:SI 0 r0 [ why ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ why ])
        (nil)))

(insn 103 2 3 2 include/linux/thread_info.h:84 (set (reg/f:SI 141 [ D.27485 ])
        (and:SI (reg/f:SI 141 [ D.27485 ])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 3 103 4 2 arch/arm/kernel/ptrace.c:905 (set (reg/v/f:SI 148 [ regs ])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn 4 3 11 2 arch/arm/kernel/ptrace.c:905 (set (reg/v:SI 149 [ scno ])
        (reg:SI 2 r2 [ scno ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ scno ])
        (nil)))

(insn 11 4 13 2 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 142 [ D.27480 ])
        (mem/v:SI (reg/f:SI 141 [ D.27485 ]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 11 14 2 arch/arm/kernel/ptrace.c:908 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 142 [ D.27480 ])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 142 [ D.27480 ])
        (nil)))

(jump_insn 14 13 15 2 arch/arm/kernel/ptrace.c:908 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 154 156
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149
;; live  gen 	 24 [cc] 154 156
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 15 14 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 15 19 3 NOTE_INSN_DELETED)

(insn 19 21 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 154 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 141 [ D.27485 ])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 156 [ <variable>.ptrace ])
        (mem/s/j:SI (plus:SI (reg/f:SI 154 [ <variable>.task ])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 22 20 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 156 [ <variable>.ptrace ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 156 [ <variable>.ptrace ])
        (nil)))

(jump_insn 23 22 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149 154
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 147 148 149 154


;; Succ edge  7 [39.0%] 
;; Succ edge  4 [61.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u23(11){ }u24(13){ }u25(25){ }u26(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144 163 166 167
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 147 148 149 154
;; live  gen 	 0 [r0] 24 [cc] 144 163 166 167
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 24 23 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 36 24 99 4 NOTE_INSN_DELETED)

(note 99 36 30 4 NOTE_INSN_DELETED)

(insn 30 99 25 4 arch/arm/kernel/ptrace.c:920 (set (mem/s/j:SI (plus:SI (reg/f:SI 141 [ D.27485 ])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 149 [ scno ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 149 [ scno ])
        (nil)))

(insn 25 30 26 4 arch/arm/kernel/ptrace.c:917 (set (reg/v:SI 144 [ ip ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 148 [ regs ])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 35 4 arch/arm/kernel/ptrace.c:918 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 148 [ regs ])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 147 [ why ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 147 [ why ])
        (nil)))

(insn 35 26 37 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 163 [ <variable>.ptrace ])
        (mem/s/j:SI (plus:SI (reg/f:SI 154 [ <variable>.task ])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 154 [ <variable>.task ])
        (nil)))

(insn 37 35 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 163 [ <variable>.ptrace ])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 163 [ <variable>.ptrace ])
        (nil)))

(insn 48 37 49 4 arch/arm/kernel/ptrace.c:924 discrim 3 (set (reg:SI 0 r0)
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 133 [0x85])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(call_insn 49 48 53 4 arch/arm/kernel/ptrace.c:924 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_notify") [flags 0x41] <function_decl 0x1109c700 ptrace_notify>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 53 49 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 166 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 141 [ D.27485 ])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 167 [ <variable>.exit_code ])
        (mem/s/j:SI (plus:SI (reg/f:SI 166 [ <variable>.task ])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 167 [ <variable>.exit_code ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 56 55 57 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 144 148 166 167
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 166 167
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 175 176
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144 148 166 167
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 175 176
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 57 56 65 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 65 57 66 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 0 r0)
        (reg:SI 167 [ <variable>.exit_code ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 167 [ <variable>.exit_code ])
        (nil)))

(insn 66 65 67 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 1 r1)
        (reg/f:SI 166 [ <variable>.task ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 166 [ <variable>.task ])
        (nil)))

(insn 67 66 68 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 68 67 72 5 arch/arm/kernel/ptrace.c:932 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig") [flags 0x41] <function_decl 0x10f01b80 send_sig>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 72 68 73 5 arch/arm/kernel/ptrace.c:933 (set (reg/f:SI 175 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 141 [ D.27485 ])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141 [ D.27485 ])
        (nil)))

(insn 73 72 74 5 arch/arm/kernel/ptrace.c:933 (set (reg:SI 176)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 74 73 75 5 arch/arm/kernel/ptrace.c:933 (set (mem/s/j:SI (plus:SI (reg/f:SI 175 [ <variable>.task ])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])
        (reg:SI 176)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 176)
        (expr_list:REG_DEAD (reg/f:SI 175 [ <variable>.task ])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148
;; lr  def 	 149 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148
;; live  gen 	 149 177
;; live  kill	

;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 75 74 76 6 38 "" [1 uses])

(note 76 75 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 79 76 100 6 NOTE_INSN_DELETED)

(insn 100 79 77 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 177)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 77 100 101 6 arch/arm/kernel/ptrace.c:935 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 148 [ regs ])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 144 [ ip ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 148 [ regs ])
        (expr_list:REG_DEAD (reg/v:SI 144 [ ip ])
            (nil))))

(insn 101 77 81 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 177)
        (and:SI (reg:SI 177)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 81 101 82 6 arch/arm/kernel/ptrace.c:937 (set (reg/v:SI 149 [ scno ])
        (mem/s/j:SI (plus:SI (reg:SI 177)
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u66(11){ }u67(13){ }u68(25){ }u69(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 82 81 83 7 35 "" [2 uses])

(note 83 82 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 88 83 94 7 arch/arm/kernel/ptrace.c:938 (set (reg/i:SI 0 r0)
        (reg/v:SI 149 [ scno ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 149 [ scno ])
        (nil)))

(insn 94 88 104 7 arch/arm/kernel/ptrace.c:938 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 104 94 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_set (vfp_set)[0:1562]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 21 -- before reload
;;   ======================================================

;;	  0-->    11 r139=[r0+0x4]                     :cortex_a8_load_store_1
;;	  0-->    12 r148=sfp-0x118                    :cortex_a8_default
;;	  1-->     5 r145=r3                           :cortex_a8_default
;;	  1-->     4 r144=r2                           :cortex_a8_default
;;	  2-->    15 r0=r148                           :cortex_a8_default
;;	  2-->    16 r1=r139+0x1b0                     :cortex_a8_default
;;	  3-->    17 r2=0x118                          :cortex_a8_default
;;	  3-->     6 r146=[afp+0x4]                    :cortex_a8_load_store_1
;;	  4-->     7 r147=[afp+0x8]                    :cortex_a8_load_store_1
;;	  4-->    18 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  5-->    20 cc=cmp(r145,0x0)                  :cortex_a8_default
;;	  7-->    21 pc={(cc==0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 4
;;   new tail = 21

;;   ======================================================
;;   -- basic block 3 from 23 to 24 -- before reload
;;   ======================================================

;;	  0-->    23 cc=cmp(r144,0xff)                 :cortex_a8_default
;;	  2-->    24 pc={(gtu(cc,0x0))?L125:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 23
;;   new tail = 24

;;   ======================================================
;;   -- basic block 4 from 26 to 31 -- before reload
;;   ======================================================

;;	  0-->    26 r137=0x100-r144                   :cortex_a8_default
;;	  0-->    29 r138=r148+r144                    :cortex_a8_default
;;	  1-->    27 {r137=umin(r137,r145);clobber cc;}:cortex_a8_default
;;	  1-->    30 cc=cmp(r146,0x0)                  :cortex_a8_default
;;	  3-->    31 pc={(cc==0x0)?L44:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 26
;;   new tail = 31

;;   ======================================================
;;   -- basic block 5 from 36 to 145 -- before reload
;;   ======================================================

;;	  0-->    36 r0=r138                           :cortex_a8_default
;;	  0-->    37 r1=r146                           :cortex_a8_default
;;	  1-->    38 r2=r137                           :cortex_a8_default
;;	  1-->    41 r146=r146+r137                    :cortex_a8_default
;;	  2-->    39 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   145 pc=L55                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 145

;;   ======================================================
;;   -- basic block 6 from 46 to 52 -- before reload
;;   ======================================================

;;	  0-->    46 r0=r138                           :cortex_a8_default
;;	  0-->    47 r1=r147                           :cortex_a8_default
;;	  1-->    48 r2=r137                           :cortex_a8_default
;;	  2-->    49 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 34-->    51 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    52 pc={(cc!=0x0)?L117:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 46
;;   new tail = 52

;;   ======================================================
;;   -- basic block 7 from 54 to 54 -- before reload
;;   ======================================================

;;	  0-->    54 r147=r147+r137                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 54
;;   new tail = 54

;;   ======================================================
;;   -- basic block 8 from 58 to 59 -- before reload
;;   ======================================================

;;	  0-->    58 {cc=cmp(r145-r137,0x0);r145=r145-r:cortex_a8_default
;;	  2-->    59 pc={(cc==0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 58
;;   new tail = 59

;;   ======================================================
;;   -- basic block 9 from 61 to 63 -- before reload
;;   ======================================================

;;	  0-->    61 r144=r144+r137                    :cortex_a8_default
;;	  1-->    62 cc=cmp(r144,0xff)                 :cortex_a8_default
;;	  3-->    63 pc={(gtu(cc,0x0))?L125:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 61
;;   new tail = 63

;;   ======================================================
;;   -- basic block 10 from 67 to 69 -- before reload
;;   ======================================================

;;	  0-->    67 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  0-->    68 r1=0x133                          :cortex_a8_default
;;	  1-->    69 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 67
;;   new tail = 69

;;   ======================================================
;;   -- basic block 11 from 72 to 79 -- before reload
;;   ======================================================

;;	  0-->    72 r134=0x104-r144                   :cortex_a8_default
;;	  0-->    76 r161=sfp+r144                     :cortex_a8_default
;;	  1-->    73 {r134=umin(r134,r145);clobber cc;}:cortex_a8_default
;;	  1-->    78 cc=cmp(r146,0x0)                  :cortex_a8_default
;;	  2-->    77 r135=r161-0x114                   :cortex_a8_default
;;	  3-->    79 pc={(cc==0x0)?L91:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 72
;;   new tail = 79

;;   ======================================================
;;   -- basic block 12 from 84 to 147 -- before reload
;;   ======================================================

;;	  0-->    84 r0=r135                           :cortex_a8_default
;;	  0-->    85 r1=r146                           :cortex_a8_default
;;	  1-->    86 r2=r134                           :cortex_a8_default
;;	  2-->    87 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   147 pc=L100                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 84
;;   new tail = 147

;;   ======================================================
;;   -- basic block 13 from 93 to 99 -- before reload
;;   ======================================================

;;	  0-->    93 r0=r135                           :cortex_a8_default
;;	  0-->    94 r1=r147                           :cortex_a8_default
;;	  1-->    95 r2=r134                           :cortex_a8_default
;;	  2-->    96 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 34-->    98 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    99 pc={(cc!=0x0)?L117:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 93
;;   new tail = 99

;;   ======================================================
;;   -- basic block 14 from 102 to 149 -- before reload
;;   ======================================================

;;	  0-->   102 r0=r139                           :cortex_a8_default
;;	  1-->   103 call [`vfp_sync_hwstate']         :cortex_a8_issue_branch
;;	  1-->   108 r1=sfp-0x118                      :cortex_a8_default
;;	  2-->   109 r2=0x118                          :cortex_a8_default
;;	  2-->   107 r0=r139+0x1b0                     :cortex_a8_default
;;	  3-->   110 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  3-->   112 r0=r139                           :cortex_a8_default
;;	  4-->   113 call [`vfp_flush_hwstate']        :cortex_a8_issue_branch
;;	  4-->   114 r140=0x0                          :cortex_a8_default
;;	  5-->   149 pc=L120                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 102
;;   new tail = 149

;;   ======================================================
;;   -- basic block 15 from 119 to 119 -- before reload
;;   ======================================================

;;	  0-->   119 r140=0xfffffffffffffff2           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 119
;;   new tail = 119

;;   ======================================================
;;   -- basic block 16 from 135 to 141 -- before reload
;;   ======================================================

;;	  0-->   135 r0=r140                           :cortex_a8_default
;;	  0-->   141 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 135
;;   new tail = 141

;;   ======================================================
;;   -- basic block 17 from 129 to 130 -- before reload
;;   ======================================================

;;	  0-->   129 cc=cmp(r144,0x104)                :cortex_a8_default
;;	  2-->   130 pc={(ltu(cc,0x0))?L127:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 129
;;   new tail = 130

;;   ======================================================
;;   -- basic block 18 from 152 to 152 -- before reload
;;   ======================================================

;;	  0-->   152 pc=L100                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 152
;;   new tail = 152


;; Procedure interblock/speculative motions == 0/0 




vfp_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,14u} r1={17d,7u} r2={16d,7u} r3={10d,1u} r11={1d,18u} r12={10d} r13={1d,27u} r14={10d,1u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,9u} r25={1d,21u,1d} r26={1d,19u,2d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} r134={2d,3u} r135={1d,2u} r137={2d,8u} r138={1d,2u} r139={1d,4u} r140={2d,1u} r144={2d,8u} r145={2d,5u} r146={2d,5u} r147={2d,3u} r148={1d,2u} r161={1d,1u} 
;;    total ref usage 1287{1116d,168u,3e} in 73{64 regular + 9 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 144 145 146 147 148
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 139 144 145 146 147 148
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 8 11 2 NOTE_INSN_DELETED)

(insn 11 13 12 2 arch/arm/kernel/ptrace.c:700 (set (reg/v/f:SI 139 [ thread ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 12 11 5 2 arch/arm/kernel/ptrace.c:701 (set (reg/f:SI 148)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -280 [0xfffffffffffffee8]))) 4 {*arm_addsi3} (nil))

(insn 5 12 4 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 145 [ count ])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 5 15 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 144 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 15 4 16 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 0 r0)
        (reg/f:SI 148)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -280 [0xfffffffffffffee8]))
        (nil)))

(insn 16 15 17 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 139 [ thread ])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 17 16 6 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 6 17 7 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 146 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 18 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 147 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 18 7 20 2 arch/arm/kernel/ptrace.c:701 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 20 18 21 2 include/linux/regset.h:249 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ count ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 14 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148


;; Succ edge  14 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u23(11){ }u24(13){ }u25(25){ }u26(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 145 146 148
;; lr  def 	 24 [cc] 137 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147 148
;; live  gen 	 24 [cc] 137 138
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 29 4 include/linux/regset.h:254 (set (reg/v:SI 137 [ copy ])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 144 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 29 26 27 4 include/linux/regset.h:255 (set (reg/v/f:SI 138 [ data ])
        (plus:SI (reg/f:SI 148)
            (reg/v:SI 144 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))

(insn 27 29 30 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 137 [ copy ])
                (umin:SI (reg/v:SI 137 [ copy ])
                    (reg/v:SI 145 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 30 27 31 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 146 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 32 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u40(11){ }u41(13){ }u42(25){ }u43(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 146
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 32 31 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 36 32 37 5 include/linux/regset.h:257 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 37 36 38 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 146 [ kbuf ])) 167 {*arm_movsi_insn} (nil))

(insn 38 37 41 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (nil))

(insn 41 38 39 5 include/linux/regset.h:258 (set (reg/v/f:SI 146 [ kbuf ])
        (plus:SI (reg/v/f:SI 146 [ kbuf ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (nil))

(call_insn 39 41 145 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 145 39 146 5 (set (pc)
        (label_ref 55)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  8 [100.0%] 

(barrier 146 145 44)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 44 146 45 6 43 "" [1 uses])

(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 50 45 46 6 NOTE_INSN_DELETED)

(insn 46 50 47 6 include/linux/regset.h:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 47 46 48 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 147 [ ubuf ])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (nil))

(call_insn 49 48 51 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 51 49 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 52 51 53 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 15 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  15 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  gen 	 147
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 7 include/linux/regset.h:262 (set (reg/v/f:SI 147 [ ubuf ])
        (plus:SI (reg/v/f:SI 147 [ ubuf ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 145
;; lr  def 	 24 [cc] 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  gen 	 24 [cc] 145
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 55 54 56 8 44 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 57 56 58 8 NOTE_INSN_DELETED)

(insn 58 57 59 8 include/linux/regset.h:305 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 145 [ count ])
                        (reg/v:SI 137 [ copy ]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 145 [ count ])
                (minus:SI (reg/v:SI 145 [ count ])
                    (reg/v:SI 137 [ copy ])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn 59 58 60 8 include/linux/regset.h:305 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 14 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  14
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u81(11){ }u82(13){ }u83(25){ }u84(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 144
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  gen 	 24 [cc] 144
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 9 include/linux/regset.h:263 (set (reg/v:SI 144 [ pos ])
        (plus:SI (reg/v:SI 144 [ pos ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 137 [ copy ])
        (nil)))

(insn 62 61 63 9 include/linux/regset.h:307 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 63 62 64 9 include/linux/regset.h:307 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u89(11){ }u90(13){ }u91(25){ }u92(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 64 63 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 67 64 68 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 68 67 69 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 1 r1)
        (const_int 307 [0x133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 307 [0x133])
        (nil)))

(call_insn 69 68 70 10 include/linux/regset.h:307 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 70 69 127)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 145 146
;; lr  def 	 24 [cc] 134 135 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc] 134 135 161
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 127 70 71 11 48 "" [1 uses])

(note 71 127 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 74 71 75 11 NOTE_INSN_DELETED)

(note 75 74 72 11 NOTE_INSN_DELETED)

(insn 72 75 76 11 include/linux/regset.h:254 (set (reg/v:SI 134 [ copy ])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 144 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 76 72 73 11 include/linux/regset.h:255 (set (reg:SI 161)
        (plus:SI (reg/f:SI 25 sfp)
            (reg/v:SI 144 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 144 [ pos ])
        (nil)))

(insn 73 76 78 11 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 134 [ copy ])
                (umin:SI (reg/v:SI 134 [ copy ])
                    (reg/v:SI 145 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 145 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 78 73 77 11 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 146 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 77 78 79 11 include/linux/regset.h:255 (set (reg/v/f:SI 135 [ data ])
        (plus:SI (reg:SI 161)
            (const_int -276 [0xfffffffffffffeec]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 161)
        (nil)))

(jump_insn 79 77 80 11 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 146 147


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u110(11){ }u111(13){ }u112(25){ }u113(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 80 79 84 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 84 80 85 12 include/linux/regset.h:257 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ data ])
        (nil)))

(insn 85 84 86 12 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 146 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 146 [ kbuf ])
        (nil)))

(insn 86 85 87 12 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 87 86 147 12 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 147 87 148 12 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139


;; Succ edge  14 [100.0%] 

(barrier 148 147 91)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u121(11){ }u122(13){ }u123(25){ }u124(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 91 148 92 13 46 "" [1 uses])

(note 92 91 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 97 92 93 13 NOTE_INSN_DELETED)

(insn 93 97 94 13 include/linux/regset.h:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ data ])
        (nil)))

(insn 94 93 95 13 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 147 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 147 [ ubuf ])
        (nil)))

(insn 95 94 96 13 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 96 95 98 13 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 98 96 99 13 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 99 98 100 13 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 12 2 8 13 18) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 140
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%] 
;; Pred edge  2 [50.0%] 
;; Pred edge  8
;; Pred edge  13 [50.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 100 99 101 14 41 "" [4 uses])

(note 101 100 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 104 101 105 14 NOTE_INSN_DELETED)

(note 105 104 102 14 NOTE_INSN_DELETED)

(insn 102 105 103 14 arch/arm/kernel/ptrace.c:725 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ thread ])) 167 {*arm_movsi_insn} (nil))

(call_insn 103 102 108 14 arch/arm/kernel/ptrace.c:725 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 108 103 109 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -280 [0xfffffffffffffee8]))) 4 {*arm_addsi3} (nil))

(insn 109 108 107 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 107 109 110 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 139 [ thread ])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn 110 107 112 14 arch/arm/kernel/ptrace.c:726 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 112 110 113 14 arch/arm/kernel/ptrace.c:727 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ thread ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 139 [ thread ])
        (nil)))

(call_insn 113 112 114 14 arch/arm/kernel/ptrace.c:727 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_flush_hwstate") [flags 0x41] <function_decl 0x10a83b80 vfp_flush_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 114 113 149 14 arch/arm/kernel/ptrace.c:729 (set (reg/v:SI 140 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 149 114 150 14 arch/arm/kernel/ptrace.c:729 (set (pc)
        (label_ref 120)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140


;; Succ edge  16 [100.0%] 

(barrier 150 149 117)

;; Start of basic block ( 6 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u154(11){ }u155(13){ }u156(25){ }u157(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 140
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%] 
(code_label 117 150 118 15 45 "" [2 uses])

(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 15 include/linux/regset.h:260 (set (reg/v:SI 140 [ ret ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u158(11){ }u159(13){ }u160(25){ }u161(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 120 119 121 16 47 "" [1 uses])

(note 121 120 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 135 121 141 16 arch/arm/kernel/ptrace.c:730 (set (reg/i:SI 0 r0)
        (reg/v:SI 140 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ ret ])
        (nil)))

(insn 141 135 125 16 arch/arm/kernel/ptrace.c:730 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u164(11){ }u165(13){ }u166(25){ }u167(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 125 141 126 17 42 "" [2 uses])

(note 126 125 128 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 128 126 129 17 NOTE_INSN_DELETED)

(insn 129 128 130 17 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 130 129 151 17 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; live  gen 	
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 151 130 152 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 152 151 153 18 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139


;; Succ edge  14 [100.0%] 

(barrier 153 152 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function fpa_set (fpa_set)[0:1560]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 19 -- before reload
;;   ======================================================

;;	  0-->    11 r137=[r0+0x4]                     :cortex_a8_load_store_1
;;	  0-->    18 {cc=cmp(r3,0x0);r142=r3;}         :cortex_a8_default
;;	  1-->     4 r141=r2                           :cortex_a8_default
;;	  1-->     6 r143=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->     7 r144=[afp+0x8]                    :cortex_a8_load_store_1
;;	  2-->    12 r145=0x1                          :cortex_a8_default
;;	  3-->    17 [r137+0x51]=r145#0                :cortex_a8_load_store_1
;;	  4-->    14 [r137+0x52]=r145#0                :cortex_a8_load_store_1
;;	  4-->    19 pc={(cc==0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 4
;;   new tail = 19

;;   ======================================================
;;   -- basic block 3 from 21 to 22 -- before reload
;;   ======================================================

;;	  0-->    21 cc=cmp(r141,0x73)                 :cortex_a8_default
;;	  2-->    22 pc={(gtu(cc,0x0))?L55:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 21
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 24 to 29 -- before reload
;;   ======================================================

;;	  0-->    24 r134=0x74-r141                    :cortex_a8_default
;;	  0-->    26 r149=r137+0x120                   :cortex_a8_default
;;	  1-->    25 {r134=umin(r134,r142);clobber cc;}:cortex_a8_default
;;	  1-->    28 cc=cmp(r143,0x0)                  :cortex_a8_default
;;	  2-->    27 r136=r149+r141                    :cortex_a8_default
;;	  3-->    29 pc={(cc==0x0)?L42:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 24
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 34 to 74 -- before reload
;;   ======================================================

;;	  0-->    34 r0=r136                           :cortex_a8_default
;;	  0-->    35 r1=r143                           :cortex_a8_default
;;	  1-->    36 r2=r134                           :cortex_a8_default
;;	  2-->    37 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->    39 r135=0x0                          :cortex_a8_default
;;	  3-->    74 pc=L58                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 34
;;   new tail = 74

;;   ======================================================
;;   -- basic block 6 from 44 to 50 -- before reload
;;   ======================================================

;;	  0-->    44 r0=r136                           :cortex_a8_default
;;	  0-->    45 r1=r144                           :cortex_a8_default
;;	  1-->    46 r2=r134                           :cortex_a8_default
;;	  2-->    47 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 34-->    49 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    50 pc={(cc==0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 44
;;   new tail = 50

;;   ======================================================
;;   -- basic block 7 from 52 to 76 -- before reload
;;   ======================================================

;;	  0-->    52 r135=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->    76 pc=L58                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 52
;;   new tail = 76

;;   ======================================================
;;   -- basic block 8 from 57 to 57 -- before reload
;;   ======================================================

;;	  0-->    57 r135=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 57
;;   new tail = 57

;;   ======================================================
;;   -- basic block 9 from 64 to 70 -- before reload
;;   ======================================================

;;	  0-->    64 r0=r135                           :cortex_a8_default
;;	  0-->    70 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 64
;;   new tail = 70


;; Procedure interblock/speculative motions == 0/0 




fpa_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={5d,2u} r2={5d,3u} r3={3d,2u} r11={1d,9u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r25={1d,9u} r26={1d,10u,2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={2d,3u} r135={3d,1u} r136={1d,2u} r137={1d,3u} r141={1d,3u} r142={1d,1u} r143={1d,2u} r144={1d,1u} r145={1d,2u} r149={1d,1u} 
;;    total ref usage 347{269d,76u,2e} in 34{32 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137 141 142 143 144 145
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 137 141 142 143 144 145
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 18 2 arch/arm/kernel/ptrace.c:625 (set (reg/v/f:SI 137 [ thread ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 18 11 4 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 142 [ count ])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 18 6 2 arch/arm/kernel/ptrace.c:624 (set (reg/v:SI 141 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 6 4 7 2 arch/arm/kernel/ptrace.c:624 (set (reg/v/f:SI 143 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 12 2 arch/arm/kernel/ptrace.c:624 (set (reg/v/f:SI 144 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(insn 12 7 17 2 arch/arm/kernel/ptrace.c:627 (set (reg:SI 145)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 17 12 14 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 137 [ thread ])
                (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])
        (subreg:QI (reg:SI 145) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 145)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 14 17 19 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 137 [ thread ])
                (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
        (subreg:QI (reg:SI 145) 0)) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 19 14 20 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ pos ])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143
;; lr  def 	 24 [cc] 134 136 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc] 134 136 149
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 26 4 include/linux/regset.h:254 (set (reg/v:SI 134 [ copy ])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 141 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 26 24 25 4 include/linux/regset.h:255 (set (reg/f:SI 149)
        (plus:SI (reg/v/f:SI 137 [ thread ])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v/f:SI 137 [ thread ])
        (nil)))

(insn 25 26 28 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 134 [ copy ])
                (umin:SI (reg/v:SI 134 [ copy ])
                    (reg/v:SI 142 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 142 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 28 25 27 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 143 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 27 28 29 4 include/linux/regset.h:255 (set (reg/v/f:SI 136 [ data ])
        (plus:SI (reg/f:SI 149)
            (reg/v:SI 141 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 149)
        (expr_list:REG_DEAD (reg/v:SI 141 [ pos ])
            (nil))))

(jump_insn 29 27 30 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 135
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 30 29 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 34 30 35 5 include/linux/regset.h:257 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 35 34 36 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 143 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 143 [ kbuf ])
        (nil)))

(insn 36 35 37 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 37 36 39 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 37 74 5 include/linux/regset.h:266 (set (reg:SI 135 [ D.27612 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 74 39 75 5 (set (pc)
        (label_ref 58)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 75 74 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 42 75 43 6 54 "" [1 uses])

(note 43 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 48 43 44 6 NOTE_INSN_DELETED)

(insn 44 48 45 6 include/linux/regset.h:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 45 44 46 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 144 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 144 [ ubuf ])
        (nil)))

(insn 46 45 47 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 47 46 49 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 49 47 50 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 50 49 51 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 76 7 include/linux/regset.h:260 (set (reg:SI 135 [ D.27612 ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 76 52 77 7 (set (pc)
        (label_ref 58)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 77 76 55)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 55 77 56 8 53 "" [3 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 8 include/linux/regset.h:250 (set (reg:SI 135 [ D.27612 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 58 57 59 9 55 "" [2 uses])

(note 59 58 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 59 70 9 arch/arm/kernel/ptrace.c:632 (set (reg/i:SI 0 r0)
        (reg:SI 135 [ D.27612 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.27612 ])
        (nil)))

(insn 70 64 78 9 arch/arm/kernel/ptrace.c:632 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 78 70 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function gpr_set (gpr_set)[0:1558]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)


gpr_set

Dataflow summary:
def_info->table_size = 408, use_info->table_size = 123
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,8u} r1={7d,3u} r2={7d,4u} r3={4d,2u} r11={1d,13u} r12={4d} r13={1d,16u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,7u} r25={1d,17u} r26={1d,14u,2d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,3u} r134={1d,1u} r135={1d,2u} r137={2d,3u} r138={1d,2u} r139={3d,1u} r141={1d,1u} r143={1d,3u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r155={1d,1u} r157={1d,1u} r159={1d,1u} r163={1d,1u} r164={1d,1u} 
;;    total ref usage 514{401d,111u,2e} in 52{49 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d7(0){ }d14(1){ }d21(2){ }d25(3){ }d26(11){ }d30(12){ }d31(13){ }d35(14){ }d75(25){ }d76(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 8 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 141 143 144 145 146
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 141 143 144 145 146
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146

( 2 )->[3]->( 4 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 145 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145
;; lr  def 	 24 [cc] 137 138 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  gen 	 24 [cc] 137 138 147
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145 146

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141

( 4 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u42(11){ }u43(13){ }u44(25){ }u45(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141

( 6 )->[7]->( 13 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 139
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139

( 2 3 6 5 )->[8]->( 9 12 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  gen 	 24 [cc] 133 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141

( 8 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  gen 	 24 [cc] 135
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u76(11){ }u77(13){ }u78(25){ }u79(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 155 157 159 163
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; live  gen 	 24 [cc] 155 157 159 163
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 141

( 9 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 139 164
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139

( 8 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u108(11){ }u109(13){ }u110(25){ }u111(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 139
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139

( 12 7 11 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 13 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u118(0){ }u119(11){ }u120(13){ }u121(14){ }u122(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 15 to worklist
  Adding insn 22 to worklist
  Adding insn 108 to worklist
  Adding insn 30 to worklist
  Adding insn 42 to worklist
  Adding insn 39 to worklist
  Adding insn 110 to worklist
  Adding insn 53 to worklist
  Adding insn 57 to worklist
  Adding insn 72 to worklist
  Adding insn 112 to worklist
  Adding insn 84 to worklist
  Adding insn 75 to worklist
  Adding insn 104 to worklist
Finished finding needed instructions:
processing block 13 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 98 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
  Adding insn 86 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 76 to worklist
processing block 12 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
  Adding insn 91 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 141
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 66 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
  Adding insn 56 to worklist
  Adding insn 55 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
  Adding insn 52 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
  Adding insn 44 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
  Adding insn 41 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145 146
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
  Adding insn 14 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
  Adding insn 11 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 4 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 20 count 26 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 2 to 12 -- before reload
;;   ======================================================

;;	  0-->    11 {cc=cmp(r3,0x0);r144=r3;}         :cortex_a8_default
;;	  0-->     2 r141=r0                           :cortex_a8_default
;;	  1-->     4 r143=r2                           :cortex_a8_default
;;	  1-->     6 r145=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->     7 r146=[afp+0x8]                    :cortex_a8_load_store_1
;;	  2-->    12 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 2
;;   new tail = 12

;;   ======================================================
;;   -- basic block 3 from 14 to 15 -- before reload
;;   ======================================================

;;	  0-->    14 cc=cmp(r143,0x47)                 :cortex_a8_default
;;	  2-->    15 pc={(gtu(cc,0x0))?L47:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 14
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 17 to 22 -- before reload
;;   ======================================================

;;	  0-->    17 r137=0x48-r143                    :cortex_a8_default
;;	  0-->    19 r147=sfp-0x48                     :cortex_a8_default
;;	  1-->    18 {r137=umin(r137,r144);clobber cc;}:cortex_a8_default
;;	  1-->    21 cc=cmp(r145,0x0)                  :cortex_a8_default
;;	  2-->    20 r138=r147+r143                    :cortex_a8_default
;;	  3-->    22 pc={(cc==0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 17
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 27 to 108 -- before reload
;;   ======================================================

;;	  0-->    27 r0=r138                           :cortex_a8_default
;;	  0-->    28 r1=r145                           :cortex_a8_default
;;	  1-->    29 r2=r137                           :cortex_a8_default
;;	  2-->    30 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   108 pc=L47                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 27
;;   new tail = 108

;;   ======================================================
;;   -- basic block 6 from 36 to 42 -- before reload
;;   ======================================================

;;	  0-->    36 r0=r138                           :cortex_a8_default
;;	  0-->    37 r1=r146                           :cortex_a8_default
;;	  1-->    38 r2=r137                           :cortex_a8_default
;;	  2-->    39 r0=call [`__copy_from_user']      :cortex_a8_issue_branch
;;	 34-->    41 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    42 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 36
;;   new tail = 42

;;   ======================================================
;;   -- basic block 7 from 44 to 110 -- before reload
;;   ======================================================

;;	  0-->    44 r139=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->   110 pc=L92                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 44
;;   new tail = 110

;;   ======================================================
;;   -- basic block 8 from 49 to 53 -- before reload
;;   ======================================================

;;	  0-->    49 r133=[sfp-0x8]                    :cortex_a8_load_store_1
;;	  2-->    52 cc=cmp(zxt(r133,0x1,0x7),0x0)     :cortex_a8_default
;;	  2-->    50 r134=r133&0xfffffffffffffebf      :cortex_a8_default
;;	  4-->    53 pc={(cc!=0x0)?L89:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 49
;;   new tail = 53

;;   ======================================================
;;   -- basic block 9 from 55 to 57 -- before reload
;;   ======================================================

;;	  0-->    55 r135=r133&0x1f                    :cortex_a8_default
;;	  1-->    56 cc=cmp(r135,0x10)                 :cortex_a8_default
;;	  3-->    57 pc={(cc==0x0)?L73:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 55
;;   new tail = 57

;;   ======================================================
;;   -- basic block 10 from 62 to 72 -- before reload
;;   ======================================================

;;	  0-->    62 r155=`elf_hwcap'                  :cortex_a8_load_store_1
;;	  3-->    63 r157=[r155]                       :cortex_a8_load_store_1
;;	  5-->    66 r159=zxt(r157,0x1,0x3)            :cortex_a8_default
;;	  6-->    70 {r163=r135==0x0&r159;clobber cc;} :cortex_a8_default
;;	  7-->    71 cc=cmp(r163,0x0)                  :cortex_a8_default
;;	  9-->    72 pc={(cc==0x0)?L89:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 62
;;   new tail = 72

;;   ======================================================
;;   -- basic block 11 from 75 to 112 -- before reload
;;   ======================================================

;;	  0-->    76 r164=[r141+0x4]                   :cortex_a8_load_store_1
;;	  0-->    82 r1=sfp-0x48                       :cortex_a8_default
;;	  1-->    83 r2=0x48                           :cortex_a8_default
;;	  1-->    75 [sfp-0x8]=r134                    :cortex_a8_load_store_1
;;	  2-->   114 r0=r164+0x1f80                    :cortex_a8_default
;;	  3-->   115 r0=r0+0x30                        :cortex_a8_default
;;	  4-->    84 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  4-->    86 r139=0x0                          :cortex_a8_default
;;	  5-->   112 pc=L92                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 75
;;   new tail = 112

;;   ======================================================
;;   -- basic block 12 from 91 to 91 -- before reload
;;   ======================================================

;;	  0-->    91 r139=0xffffffffffffffea           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 91
;;   new tail = 91

;;   ======================================================
;;   -- basic block 13 from 98 to 104 -- before reload
;;   ======================================================

;;	  0-->    98 r0=r139                           :cortex_a8_default
;;	  0-->   104 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 98
;;   new tail = 104


;; Procedure interblock/speculative motions == 0/0 




gpr_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,8u} r1={7d,3u} r2={7d,4u} r3={4d,2u} r11={1d,13u} r12={4d} r13={1d,16u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,7u} r25={1d,17u} r26={1d,14u,2d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,3u} r134={1d,1u} r135={1d,2u} r137={2d,3u} r138={1d,2u} r139={3d,1u} r141={1d,1u} r143={1d,3u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r155={1d,1u} r157={1d,1u} r159={1d,1u} r163={1d,1u} r164={1d,1u} 
;;    total ref usage 514{401d,111u,2e} in 52{49 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 141 143 144 145 146
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 141 143 144 145 146
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 9 8 2 NOTE_INSN_DELETED)

(note 8 5 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 2 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 144 [ count ])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 2 11 4 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 141 [ target ])
        (reg:SI 0 r0 [ target ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 4 2 6 2 arch/arm/kernel/ptrace.c:593 (set (reg/v:SI 143 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 6 4 7 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 145 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 12 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 146 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(jump_insn 12 7 13 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146


;; Succ edge  8 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 143 [ pos ])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 143 144 145 146


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 145 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145
;; lr  def 	 24 [cc] 137 138 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 145 146
;; live  gen 	 24 [cc] 137 138 147
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 19 4 include/linux/regset.h:254 (set (reg/v:SI 137 [ copy ])
        (minus:SI (const_int 72 [0x48])
            (reg/v:SI 143 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 19 17 18 4 include/linux/regset.h:255 (set (reg/f:SI 147)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(insn 18 19 21 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 137 [ copy ])
                (umin:SI (reg/v:SI 137 [ copy ])
                    (reg/v:SI 144 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 144 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 21 18 20 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 145 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 21 22 4 include/linux/regset.h:255 (set (reg/v/f:SI 138 [ data ])
        (plus:SI (reg/f:SI 147)
            (reg/v:SI 143 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 147)
        (expr_list:REG_DEAD (reg/v:SI 143 [ pos ])
            (nil))))

(jump_insn 22 20 23 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145 146


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 23 22 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 23 28 5 include/linux/regset.h:257 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 28 27 29 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 145 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 145 [ kbuf ])
        (nil)))

(insn 29 28 30 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ copy ])
        (nil)))

(call_insn 30 29 108 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 108 30 109 5 (set (pc)
        (label_ref 47)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141


;; Succ edge  8 [100.0%] 

(barrier 109 108 34)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u42(11){ }u43(13){ }u44(25){ }u45(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 34 109 35 6 59 "" [1 uses])

(note 35 34 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 40 35 36 6 NOTE_INSN_DELETED)

(insn 36 40 37 6 include/linux/regset.h:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 37 36 38 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 146 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 146 [ ubuf ])
        (nil)))

(insn 38 37 39 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ copy ])
        (nil)))

(call_insn 39 38 41 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 41 39 42 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 42 41 43 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 139
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 110 7 include/linux/regset.h:260 (set (reg/v:SI 139 [ ret ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 110 44 111 7 (set (pc)
        (label_ref 92)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139


;; Succ edge  13 [100.0%] 

(barrier 111 110 47)

;; Start of basic block ( 2 3 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  gen 	 24 [cc] 133 134
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [50.0%] 
;; Pred edge  5 [100.0%] 
(code_label 47 111 48 8 58 "" [4 uses])

(note 48 47 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 51 48 49 8 NOTE_INSN_DELETED)

(insn 49 51 52 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 133 [ D.27667 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 52 49 50 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 133 [ D.27667 ])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 50 52 53 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 134 [ D.27666 ])
        (and:SI (reg:SI 133 [ D.27667 ])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 53 50 54 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  gen 	 24 [cc] 135
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 54 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 135 [ mode ])
        (and:SI (reg:SI 133 [ D.27667 ])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.27667 ])
        (nil)))

(insn 56 55 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ mode ])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 57 56 58 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141


;; Succ edge  11 [28.0%] 
;; Succ edge  10 [72.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u76(11){ }u77(13){ }u78(25){ }u79(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 155 157 159 163
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 141
;; live  gen 	 24 [cc] 155 157 159 163
;; live  kill	 24 [cc]

;; Pred edge  9 [72.0%]  (fallthru)
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 10 NOTE_INSN_DELETED)

(note 60 59 64 10 NOTE_INSN_DELETED)

(note 64 60 68 10 NOTE_INSN_DELETED)

(note 68 64 69 10 NOTE_INSN_DELETED)

(note 69 68 62 10 NOTE_INSN_DELETED)

(insn 62 69 63 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 155)
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (nil))

(insn 63 62 66 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 157 [ elf_hwcap ])
        (mem/c/i:SI (reg/f:SI 155) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 155)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
            (nil))))

(insn 66 63 70 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 159)
        (zero_extract:SI (reg:SI 157 [ elf_hwcap ])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg:SI 157 [ elf_hwcap ])
        (nil)))

(insn 70 66 71 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 163)
                (and:SI (eq:SI (reg/v:SI 135 [ mode ])
                        (const_int 0 [0x0]))
                    (reg:SI 159)))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_DEAD (reg/v:SI 135 [ mode ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 71 70 72 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 163)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 163)
        (nil)))

(jump_insn 72 71 73 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 141


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 139 164
;; live  kill	 14 [lr]

;; Pred edge  9 [28.0%] 
;; Pred edge  10 [50.0%]  (fallthru)
(code_label 73 72 74 11 62 "" [1 uses])

(note 74 73 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 78 74 79 11 NOTE_INSN_DELETED)

(note 79 78 76 11 NOTE_INSN_DELETED)

(insn 76 79 82 11 arch/arm/kernel/ptrace.c:606 (set (reg/f:SI 164 [ <variable>.stack ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 141 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 141 [ target ])
        (nil)))

(insn 82 76 83 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(insn 83 82 75 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 75 83 114 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 newregs.uregs+64 S4 A64])
        (reg:SI 134 [ D.27666 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.27666 ])
        (nil)))

(insn 114 75 115 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 164 [ <variable>.stack ])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 164 [ <variable>.stack ])
        (nil)))

(insn 115 114 84 11 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(call_insn 84 115 86 11 arch/arm/kernel/ptrace.c:606 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 86 84 112 11 arch/arm/kernel/ptrace.c:607 (set (reg/v:SI 139 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 112 86 113 11 arch/arm/kernel/ptrace.c:607 (set (pc)
        (label_ref 92)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139


;; Succ edge  13 [100.0%] 

(barrier 113 112 89)

;; Start of basic block ( 8 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u108(11){ }u109(13){ }u110(25){ }u111(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 139
;; live  kill	

;; Pred edge  8 [50.0%] 
;; Pred edge  10 [50.0%] 
(code_label 89 113 90 12 61 "" [2 uses])

(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 12 arch/arm/kernel/ptrace.c:604 (set (reg/v:SI 139 [ ret ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 7 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 92 91 93 13 60 "" [2 uses])

(note 93 92 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 98 93 104 13 arch/arm/kernel/ptrace.c:608 (set (reg/i:SI 0 r0)
        (reg/v:SI 139 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ ret ])
        (nil)))

(insn 104 98 116 13 arch/arm/kernel/ptrace.c:608 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 116 104 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function clear_ptrace_hw_breakpoint (clear_ptrace_hw_breakpoint)[0:1551]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 9 -- before reload
;;   ======================================================

;;	  0-->     7 r0=r0+0x31c                       :cortex_a8_default
;;	  0-->     8 r1=0x80                           :cortex_a8_default
;;	  1-->     9 call [`__memzero']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 7
;;   new tail = 9


;; Procedure interblock/speculative motions == 0/0 




clear_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{128d,12u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn 7 6 8 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0 [ tsk ])
            (const_int 796 [0x31c]))) 4 {*arm_addsi3} (nil))

(insn 8 7 9 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 9 8 10 2 arch/arm/kernel/ptrace.c:407 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_get (vfp_get)[0:1561]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 15 -- before reload
;;   ======================================================

;;	  0-->    11 r139=[r0+0x4]                     :cortex_a8_load_store_1
;;	  0-->     5 r145=r3                           :cortex_a8_default
;;	  1-->     4 r144=r2                           :cortex_a8_default
;;	  1-->     6 r146=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->    12 r0=r139                           :cortex_a8_default
;;	  2-->     7 r147=[afp+0x8]                    :cortex_a8_load_store_1
;;	  3-->    13 call [`vfp_sync_hwstate']         :cortex_a8_issue_branch
;;	  3-->    14 cc=cmp(r145,0x0)                  :cortex_a8_default
;;	  5-->    15 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 4
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 18 -- before reload
;;   ======================================================

;;	  0-->    17 cc=cmp(r144,0xff)                 :cortex_a8_default
;;	  2-->    18 pc={(gtu(cc,0x0))?L107:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 17
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 20 to 25 -- before reload
;;   ======================================================

;;	  0-->    20 r137=0x100-r144                   :cortex_a8_default
;;	  0-->    22 r148=r139+0x1b0                   :cortex_a8_default
;;	  1-->    21 {r137=umin(r137,r145);clobber cc;}:cortex_a8_default
;;	  1-->    24 cc=cmp(r146,0x0)                  :cortex_a8_default
;;	  2-->    23 r138=r148+r144                    :cortex_a8_default
;;	  3-->    25 pc={(cc==0x0)?L38:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 20
;;   new tail = 25

;;   ======================================================
;;   -- basic block 5 from 30 to 127 -- before reload
;;   ======================================================

;;	  0-->    31 r1=r138                           :cortex_a8_default
;;	  0-->    30 r0=r146                           :cortex_a8_default
;;	  1-->    32 r2=r137                           :cortex_a8_default
;;	  1-->    35 r146=r146+r137                    :cortex_a8_default
;;	  2-->    33 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   127 pc=L49                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 30
;;   new tail = 127

;;   ======================================================
;;   -- basic block 6 from 40 to 46 -- before reload
;;   ======================================================

;;	  0-->    41 r1=r138                           :cortex_a8_default
;;	  0-->    40 r0=r147                           :cortex_a8_default
;;	  1-->    42 r2=r137                           :cortex_a8_default
;;	  2-->    43 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 34-->    45 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    46 pc={(cc!=0x0)?L94:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 40
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 48 to 48 -- before reload
;;   ======================================================

;;	  0-->    48 r147=r147+r137                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 48
;;   new tail = 48

;;   ======================================================
;;   -- basic block 8 from 51 to 54 -- before reload
;;   ======================================================

;;	  0-->    53 {cc=cmp(r145-r137,0x0);r145=r145-r:cortex_a8_default
;;	  0-->    51 r144=r144+r137                    :cortex_a8_default
;;	  2-->    54 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 51
;;   new tail = 54

;;   ======================================================
;;   -- basic block 9 from 56 to 57 -- before reload
;;   ======================================================

;;	  0-->    56 cc=cmp(r144,0xff)                 :cortex_a8_default
;;	  2-->    57 pc={(gtu(cc,0x0))?L107:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 56
;;   new tail = 57

;;   ======================================================
;;   -- basic block 10 from 61 to 63 -- before reload
;;   ======================================================

;;	  0-->    61 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  0-->    62 r1=0x119                          :cortex_a8_default
;;	  1-->    63 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 61
;;   new tail = 63

;;   ======================================================
;;   -- basic block 11 from 66 to 72 -- before reload
;;   ======================================================

;;	  0-->    66 r134=0x104-r144                   :cortex_a8_default
;;	  0-->    69 r156=r139+r144                    :cortex_a8_default
;;	  1-->    67 {r134=umin(r134,r145);clobber cc;}:cortex_a8_default
;;	  1-->    71 cc=cmp(r146,0x0)                  :cortex_a8_default
;;	  2-->    70 r135=r156+0x1b4                   :cortex_a8_default
;;	  3-->    72 pc={(cc==0x0)?L85:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 66
;;   new tail = 72

;;   ======================================================
;;   -- basic block 12 from 77 to 129 -- before reload
;;   ======================================================

;;	  0-->    77 r0=r146                           :cortex_a8_default
;;	  0-->    78 r1=r135                           :cortex_a8_default
;;	  1-->    79 r2=r134                           :cortex_a8_default
;;	  2-->    80 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->    82 r140=0x0                          :cortex_a8_default
;;	  3-->   129 pc=L102                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 77
;;   new tail = 129

;;   ======================================================
;;   -- basic block 13 from 87 to 93 -- before reload
;;   ======================================================

;;	  0-->    87 r0=r147                           :cortex_a8_default
;;	  0-->    88 r1=r135                           :cortex_a8_default
;;	  1-->    89 r2=r134                           :cortex_a8_default
;;	  2-->    90 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 34-->    92 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    93 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 87
;;   new tail = 93

;;   ======================================================
;;   -- basic block 14 from 96 to 131 -- before reload
;;   ======================================================

;;	  0-->    96 r140=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->   131 pc=L102                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 96
;;   new tail = 131

;;   ======================================================
;;   -- basic block 15 from 101 to 101 -- before reload
;;   ======================================================

;;	  0-->   101 r140=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 101
;;   new tail = 101

;;   ======================================================
;;   -- basic block 16 from 117 to 123 -- before reload
;;   ======================================================

;;	  0-->   117 r0=r140                           :cortex_a8_default
;;	  0-->   123 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 117
;;   new tail = 123

;;   ======================================================
;;   -- basic block 17 from 111 to 112 -- before reload
;;   ======================================================

;;	  0-->   111 cc=cmp(r144,0x104)                :cortex_a8_default
;;	  2-->   112 pc={(ltu(cc,0x0))?L109:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 111
;;   new tail = 112

;;   ======================================================
;;   -- basic block 18 from 134 to 134 -- before reload
;;   ======================================================

;;	  0-->   134 pc=L99                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 134
;;   new tail = 134


;; Procedure interblock/speculative motions == 0/0 




vfp_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,11u} r1={12d,5u} r2={11d,5u} r3={7d,1u} r11={1d,18u} r12={7d} r13={1d,24u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={17d,9u} r25={1d,18u} r26={1d,19u,2d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r134={2d,3u} r135={1d,2u} r137={2d,8u} r138={1d,2u} r139={1d,3u} r140={3d,1u} r144={2d,8u} r145={2d,5u} r146={2d,5u} r147={2d,3u} r148={1d,1u} r156={1d,1u} 
;;    total ref usage 914{759d,153u,2e} in 64{58 regular + 6 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 144 145 146 147
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 139 144 145 146 147
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 5 2 arch/arm/kernel/ptrace.c:663 (set (reg/v/f:SI 139 [ thread ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 5 11 4 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 145 [ count ])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 5 6 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 144 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 6 4 12 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 146 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 12 6 7 2 arch/arm/kernel/ptrace.c:668 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ thread ])) 167 {*arm_movsi_insn} (nil))

(insn 7 12 13 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 147 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 13 7 14 2 arch/arm/kernel/ptrace.c:668 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 13 15 2 include/linux/regset.h:224 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ count ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 15 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  15 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 18 17 19 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u23(11){ }u24(13){ }u25(25){ }u26(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146
;; lr  def 	 24 [cc] 137 138 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc] 137 138 148
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 22 4 include/linux/regset.h:229 (set (reg/v:SI 137 [ copy ])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 144 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 22 20 21 4 include/linux/regset.h:230 (set (reg/f:SI 148)
        (plus:SI (reg/v/f:SI 139 [ thread ])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 21 22 24 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 137 [ copy ])
                (umin:SI (reg/v:SI 137 [ copy ])
                    (reg/v:SI 145 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 24 21 23 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 146 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 23 24 25 4 include/linux/regset.h:230 (set (reg/v/f:SI 138 [ data ])
        (plus:SI (reg/f:SI 148)
            (reg/v:SI 144 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))

(jump_insn 25 23 26 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u35(11){ }u36(13){ }u37(25){ }u38(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 146
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 26 25 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 31 26 30 5 include/linux/regset.h:232 (set (reg:SI 1 r1)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 30 31 32 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 146 [ kbuf ])) 167 {*arm_movsi_insn} (nil))

(insn 32 30 35 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (nil))

(insn 35 32 33 5 include/linux/regset.h:233 (set (reg/v/f:SI 146 [ kbuf ])
        (plus:SI (reg/v/f:SI 146 [ kbuf ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (nil))

(call_insn 33 35 127 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 127 33 128 5 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  8 [100.0%] 

(barrier 128 127 38)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 144 145 146 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 38 128 39 6 71 "" [1 uses])

(note 39 38 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 39 41 6 NOTE_INSN_DELETED)

(insn 41 44 40 6 include/linux/regset.h:234 (set (reg:SI 1 r1)
        (reg/v/f:SI 138 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ data ])
        (nil)))

(insn 40 41 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 147 [ ubuf ])) 167 {*arm_movsi_insn} (nil))

(insn 42 40 43 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ copy ])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 45 43 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 46 45 47 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  14 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u62(11){ }u63(13){ }u64(25){ }u65(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  gen 	 147
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 7 include/linux/regset.h:237 (set (reg/v/f:SI 147 [ ubuf ])
        (plus:SI (reg/v/f:SI 147 [ ubuf ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 144 145
;; lr  def 	 24 [cc] 144 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 144 145 146 147
;; live  gen 	 24 [cc] 144 145
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 49 48 50 8 72 "" [1 uses])

(note 50 49 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 50 53 8 NOTE_INSN_DELETED)

(insn 53 52 51 8 include/linux/regset.h:279 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 145 [ count ])
                        (reg/v:SI 137 [ copy ]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 145 [ count ])
                (minus:SI (reg/v:SI 145 [ count ])
                    (reg/v:SI 137 [ copy ])))
        ]) 29 {*subsi3_compare0} (expr_list:REG_DEAD (reg/v:SI 137 [ copy ])
        (nil)))

(insn 51 53 54 8 include/linux/regset.h:238 (set (reg/v:SI 144 [ pos ])
        (plus:SI (reg/v:SI 144 [ pos ])
            (reg/v:SI 137 [ copy ]))) 4 {*arm_addsi3} (nil))

(jump_insn 54 51 55 8 include/linux/regset.h:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  15
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u78(11){ }u79(13){ }u80(25){ }u81(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 9 include/linux/regset.h:281 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 57 56 58 9 include/linux/regset.h:281 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 58 57 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 61 58 62 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 62 61 63 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 1 r1)
        (const_int 281 [0x119])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 281 [0x119])
        (nil)))

(call_insn 63 62 64 10 include/linux/regset.h:281 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 64 63 109)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146
;; lr  def 	 24 [cc] 134 135 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc] 134 135 156
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 109 64 65 11 76 "" [1 uses])

(note 65 109 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 68 65 66 11 NOTE_INSN_DELETED)

(insn 66 68 69 11 include/linux/regset.h:229 (set (reg/v:SI 134 [ copy ])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 144 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 69 66 67 11 include/linux/regset.h:230 (set (reg:SI 156)
        (plus:SI (reg/v/f:SI 139 [ thread ])
            (reg/v:SI 144 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 144 [ pos ])
        (expr_list:REG_DEAD (reg/v/f:SI 139 [ thread ])
            (nil))))

(insn 67 69 71 11 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 134 [ copy ])
                (umin:SI (reg/v:SI 134 [ copy ])
                    (reg/v:SI 145 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 145 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 71 67 70 11 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 146 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 70 71 72 11 include/linux/regset.h:230 (set (reg/v/f:SI 135 [ data ])
        (plus:SI (reg:SI 156)
            (const_int 436 [0x1b4]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(jump_insn 72 70 73 11 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146 147


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u104(11){ }u105(13){ }u106(25){ }u107(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 140
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 73 72 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 77 73 78 12 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 146 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 146 [ kbuf ])
        (nil)))

(insn 78 77 79 12 include/linux/regset.h:232 (set (reg:SI 1 r1)
        (reg/v/f:SI 135 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ data ])
        (nil)))

(insn 79 78 80 12 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 80 79 82 12 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 82 80 129 12 include/linux/regset.h:241 (set (reg/v:SI 140 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 129 82 130 12 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140


;; Succ edge  16 [100.0%] 

(barrier 130 129 85)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u115(11){ }u116(13){ }u117(25){ }u118(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 85 130 86 13 74 "" [1 uses])

(note 86 85 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 86 87 13 NOTE_INSN_DELETED)

(insn 87 91 88 13 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 147 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 147 [ ubuf ])
        (nil)))

(insn 88 87 89 13 include/linux/regset.h:234 (set (reg:SI 1 r1)
        (reg/v/f:SI 135 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ data ])
        (nil)))

(insn 89 88 90 13 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 90 89 92 13 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 92 90 93 13 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 93 92 94 13 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 6 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u129(11){ }u130(13){ }u131(25){ }u132(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 140
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 94 93 95 14 73 "" [1 uses])

(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 131 14 include/linux/regset.h:235 (set (reg/v:SI 140 [ ret ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 131 96 132 14 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140


;; Succ edge  16 [100.0%] 

(barrier 132 131 99)

;; Start of basic block ( 2 13 8 18) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 140
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  8
;; Pred edge  18 [100.0%] 
(code_label 99 132 100 15 69 "" [4 uses])

(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 101 100 102 15 include/linux/regset.h:241 (set (reg/v:SI 140 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 12 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u137(11){ }u138(13){ }u139(25){ }u140(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
;; Pred edge  14 [100.0%] 
(code_label 102 101 103 16 75 "" [2 uses])

(note 103 102 117 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 117 103 123 16 arch/arm/kernel/ptrace.c:687 (set (reg/i:SI 0 r0)
        (reg/v:SI 140 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ ret ])
        (nil)))

(insn 123 117 107 16 arch/arm/kernel/ptrace.c:687 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u143(11){ }u144(13){ }u145(25){ }u146(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 107 123 108 17 70 "" [2 uses])

(note 108 107 110 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 110 108 111 17 NOTE_INSN_DELETED)

(insn 111 110 112 17 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ pos ])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 133 17 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 144 145 146 147


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 133 112 134 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 134 133 135 18 (set (pc)
        (label_ref 99)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  15 [100.0%] 

(barrier 135 134 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function fpa_get (fpa_get)[0:1559]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 13 -- before reload
;;   ======================================================

;;	  0-->    12 {cc=cmp(r3,0x0);r142=r3;}         :cortex_a8_default
;;	  0-->     4 r141=r2                           :cortex_a8_default
;;	  1-->    11 r137=[r0+0x4]                     :cortex_a8_load_store_1
;;	  2-->     6 r143=[afp+0x4]                    :cortex_a8_load_store_1
;;	  3-->     7 r144=[afp+0x8]                    :cortex_a8_load_store_1
;;	  3-->    13 pc={(cc==0x0)?L49:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 4
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- before reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r141,0x73)                 :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L49:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 23 -- before reload
;;   ======================================================

;;	  0-->    18 r134=0x74-r141                    :cortex_a8_default
;;	  0-->    20 r145=r137+0x120                   :cortex_a8_default
;;	  1-->    19 {r134=umin(r134,r142);clobber cc;}:cortex_a8_default
;;	  1-->    22 cc=cmp(r143,0x0)                  :cortex_a8_default
;;	  2-->    21 r136=r145+r141                    :cortex_a8_default
;;	  3-->    23 pc={(cc==0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 18
;;   new tail = 23

;;   ======================================================
;;   -- basic block 5 from 28 to 68 -- before reload
;;   ======================================================

;;	  0-->    28 r0=r143                           :cortex_a8_default
;;	  0-->    29 r1=r136                           :cortex_a8_default
;;	  1-->    30 r2=r134                           :cortex_a8_default
;;	  2-->    31 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->    33 r135=0x0                          :cortex_a8_default
;;	  3-->    68 pc=L52                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 28
;;   new tail = 68

;;   ======================================================
;;   -- basic block 6 from 38 to 44 -- before reload
;;   ======================================================

;;	  0-->    38 r0=r144                           :cortex_a8_default
;;	  0-->    39 r1=r136                           :cortex_a8_default
;;	  1-->    40 r2=r134                           :cortex_a8_default
;;	  2-->    41 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 34-->    43 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    44 pc={(cc==0x0)?L49:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 38
;;   new tail = 44

;;   ======================================================
;;   -- basic block 7 from 46 to 70 -- before reload
;;   ======================================================

;;	  0-->    46 r135=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->    70 pc=L52                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 46
;;   new tail = 70

;;   ======================================================
;;   -- basic block 8 from 51 to 51 -- before reload
;;   ======================================================

;;	  0-->    51 r135=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 51

;;   ======================================================
;;   -- basic block 9 from 58 to 64 -- before reload
;;   ======================================================

;;	  0-->    58 r0=r135                           :cortex_a8_default
;;	  0-->    64 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 58
;;   new tail = 64


;; Procedure interblock/speculative motions == 0/0 




fpa_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={5d,2u} r2={5d,3u} r3={3d,2u} r11={1d,9u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r25={1d,9u} r26={1d,10u,2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={2d,3u} r135={3d,1u} r136={1d,2u} r137={1d,1u} r141={1d,3u} r142={1d,1u} r143={1d,2u} r144={1d,1u} r145={1d,1u} 
;;    total ref usage 342{268d,72u,2e} in 31{29 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137 141 142 143 144
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 137 141 142 143 144
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 142 [ count ])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 12 11 2 arch/arm/kernel/ptrace.c:614 (set (reg/v:SI 141 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 11 4 6 2 arch/arm/kernel/ptrace.c:616 (set (reg/f:SI 137 [ D.27170 ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 6 11 7 2 arch/arm/kernel/ptrace.c:614 (set (reg/v/f:SI 143 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 13 2 arch/arm/kernel/ptrace.c:614 (set (reg/v/f:SI 144 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(jump_insn 13 7 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ pos ])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143
;; lr  def 	 24 [cc] 134 136 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc] 134 136 145
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 134 [ copy ])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 141 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 145)
        (plus:SI (reg/f:SI 137 [ D.27170 ])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 137 [ D.27170 ])
        (nil)))

(insn 19 20 22 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 134 [ copy ])
                (umin:SI (reg/v:SI 134 [ copy ])
                    (reg/v:SI 142 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 142 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 22 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 143 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 21 22 23 4 include/linux/regset.h:230 (set (reg/v/f:SI 136 [ data ])
        (plus:SI (reg/f:SI 145)
            (reg/v:SI 141 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 145)
        (expr_list:REG_DEAD (reg/v:SI 141 [ pos ])
            (nil))))

(jump_insn 23 21 24 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 135
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 24 23 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 24 29 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 143 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 143 [ kbuf ])
        (nil)))

(insn 29 28 30 5 include/linux/regset.h:232 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 30 29 31 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 31 30 33 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 33 31 68 5 include/linux/regset.h:241 (set (reg:SI 135 [ D.27754 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 68 33 69 5 (set (pc)
        (label_ref 52)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 69 68 36)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 36 69 37 6 82 "" [1 uses])

(note 37 36 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 42 37 38 6 NOTE_INSN_DELETED)

(insn 38 42 39 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 144 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 144 [ ubuf ])
        (nil)))

(insn 39 38 40 6 include/linux/regset.h:234 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 40 39 41 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 41 40 43 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 43 41 44 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 44 43 45 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 70 7 include/linux/regset.h:235 (set (reg:SI 135 [ D.27754 ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 70 46 71 7 (set (pc)
        (label_ref 52)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 71 70 49)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 49 71 50 8 81 "" [3 uses])

(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 8 include/linux/regset.h:225 (set (reg:SI 135 [ D.27754 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 52 51 53 9 83 "" [2 uses])

(note 53 52 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 58 53 64 9 arch/arm/kernel/ptrace.c:618 (set (reg/i:SI 0 r0)
        (reg:SI 135 [ D.27754 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.27754 ])
        (nil)))

(insn 64 58 72 9 arch/arm/kernel/ptrace.c:618 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 72 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function gpr_get (gpr_get)[0:1557]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 13 -- before reload
;;   ======================================================

;;	  0-->    12 {cc=cmp(r3,0x0);r142=r3;}         :cortex_a8_default
;;	  0-->     4 r141=r2                           :cortex_a8_default
;;	  1-->    11 r137=[r0+0x4]                     :cortex_a8_load_store_1
;;	  2-->     6 r143=[afp+0x4]                    :cortex_a8_load_store_1
;;	  3-->     7 r144=[afp+0x8]                    :cortex_a8_load_store_1
;;	  3-->    13 pc={(cc==0x0)?L50:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 4
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- before reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r141,0x47)                 :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L50:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 24 -- before reload
;;   ======================================================

;;	  0-->    18 r134=0x48-r141                    :cortex_a8_default
;;	  0-->    20 r146=r137+0x1f80                  :cortex_a8_default
;;	  1-->    19 {r134=umin(r134,r142);clobber cc;}:cortex_a8_default
;;	  1-->    23 cc=cmp(r143,0x0)                  :cortex_a8_default
;;	  2-->    21 r145=r146+0x30                    :cortex_a8_default
;;	  3-->    22 r136=r145+r141                    :cortex_a8_default
;;	  3-->    24 pc={(cc==0x0)?L37:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 18
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 29 to 69 -- before reload
;;   ======================================================

;;	  0-->    29 r0=r143                           :cortex_a8_default
;;	  0-->    30 r1=r136                           :cortex_a8_default
;;	  1-->    31 r2=r134                           :cortex_a8_default
;;	  2-->    32 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->    34 r135=0x0                          :cortex_a8_default
;;	  3-->    69 pc=L53                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 29
;;   new tail = 69

;;   ======================================================
;;   -- basic block 6 from 39 to 45 -- before reload
;;   ======================================================

;;	  0-->    39 r0=r144                           :cortex_a8_default
;;	  0-->    40 r1=r136                           :cortex_a8_default
;;	  1-->    41 r2=r134                           :cortex_a8_default
;;	  2-->    42 r0=call [`__copy_to_user']        :cortex_a8_issue_branch
;;	 34-->    44 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    45 pc={(cc==0x0)?L50:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 39
;;   new tail = 45

;;   ======================================================
;;   -- basic block 7 from 47 to 71 -- before reload
;;   ======================================================

;;	  0-->    47 r135=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->    71 pc=L53                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 47
;;   new tail = 71

;;   ======================================================
;;   -- basic block 8 from 52 to 52 -- before reload
;;   ======================================================

;;	  0-->    52 r135=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 52
;;   new tail = 52

;;   ======================================================
;;   -- basic block 9 from 59 to 65 -- before reload
;;   ======================================================

;;	  0-->    59 r0=r135                           :cortex_a8_default
;;	  0-->    65 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 59
;;   new tail = 65


;; Procedure interblock/speculative motions == 0/0 




gpr_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={5d,2u} r2={5d,3u} r3={3d,2u} r11={1d,9u} r12={3d} r13={1d,11u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,4u} r25={1d,9u} r26={1d,10u,2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={2d,3u} r135={3d,1u} r136={1d,2u} r137={1d,1u,1d} r141={1d,3u} r142={1d,1u} r143={1d,2u} r144={1d,1u} r145={1d,1u} r146={1d,1u} 
;;    total ref usage 345{269d,73u,3e} in 32{30 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137 141 142 143 144
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 137 141 142 143 144
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 142 [ count ])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 12 11 2 arch/arm/kernel/ptrace.c:581 (set (reg/v:SI 141 [ pos ])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 11 4 6 2 arch/arm/kernel/ptrace.c:582 (set (reg/f:SI 137 [ D.27137 ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn 6 11 7 2 arch/arm/kernel/ptrace.c:581 (set (reg/v/f:SI 143 [ kbuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 7 6 13 2 arch/arm/kernel/ptrace.c:581 (set (reg/v/f:SI 144 [ ubuf ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
        (nil)))

(jump_insn 13 7 14 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  8 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ pos ])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 141 142 143 144


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143
;; lr  def 	 24 [cc] 134 136 145 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 142 143 144
;; live  gen 	 24 [cc] 134 136 145 146
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 20 4 include/linux/regset.h:229 (set (reg/v:SI 134 [ copy ])
        (minus:SI (const_int 72 [0x48])
            (reg/v:SI 141 [ pos ]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 18 19 4 include/linux/regset.h:230 (set (reg/f:SI 146)
        (plus:SI (reg/f:SI 137 [ D.27137 ])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 137 [ D.27137 ])
        (nil)))

(insn 19 20 23 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 134 [ copy ])
                (umin:SI (reg/v:SI 134 [ copy ])
                    (reg/v:SI 142 [ count ])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 142 [ count ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 23 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 143 [ kbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 21 23 22 4 include/linux/regset.h:230 (set (reg/f:SI 145)
        (plus:SI (reg/f:SI 146)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 146)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 137 [ D.27137 ])
                (const_int 8112 [0x1fb0]))
            (nil))))

(insn 22 21 24 4 include/linux/regset.h:230 (set (reg/v/f:SI 136 [ data ])
        (plus:SI (reg/f:SI 145)
            (reg/v:SI 141 [ pos ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 145)
        (expr_list:REG_DEAD (reg/v:SI 141 [ pos ])
            (nil))))

(jump_insn 24 22 25 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143 144


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u34(11){ }u35(13){ }u36(25){ }u37(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 143
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 135
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 25 24 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 29 25 30 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 143 [ kbuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 143 [ kbuf ])
        (nil)))

(insn 30 29 31 5 include/linux/regset.h:232 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 31 30 32 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 32 31 34 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 32 69 5 include/linux/regset.h:241 (set (reg:SI 135 [ D.27779 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 69 34 70 5 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 70 69 37)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u45(11){ }u46(13){ }u47(25){ }u48(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 136 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 37 70 38 6 87 "" [1 uses])

(note 38 37 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 43 38 39 6 NOTE_INSN_DELETED)

(insn 39 43 40 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 144 [ ubuf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 144 [ ubuf ])
        (nil)))

(insn 40 39 41 6 include/linux/regset.h:234 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ data ])
        (nil)))

(insn 41 40 42 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 134 [ copy ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ copy ])
        (nil)))

(call_insn 42 41 44 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 44 42 45 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 45 44 46 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 71 7 include/linux/regset.h:235 (set (reg:SI 135 [ D.27779 ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 71 47 72 7 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%] 

(barrier 72 71 50)

;; Start of basic block ( 2 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 135
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%] 
(code_label 50 72 51 8 86 "" [3 uses])

(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 8 include/linux/regset.h:225 (set (reg:SI 135 [ D.27779 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 53 52 54 9 88 "" [2 uses])

(note 54 53 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 59 54 65 9 arch/arm/kernel/ptrace.c:587 (set (reg/i:SI 0 r0)
        (reg:SI 135 [ D.27779 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.27779 ])
        (nil)))

(insn 65 59 73 9 arch/arm/kernel/ptrace.c:587 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 73 65 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_hbp_create (ptrace_hbp_create)[0:1554]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 58 -- before reload
;;   ======================================================

;;	  0-->     7 r137=sfp-0x48                     :cortex_a8_default
;;	  0-->     2 r135=r0                           :cortex_a8_default
;;	  1-->     3 r136=r1                           :cortex_a8_default
;;	  1-->     8 r0=r137                           :cortex_a8_default
;;	  2-->     9 r1=0x48                           :cortex_a8_default
;;	  3-->    10 call [`__memzero']                :cortex_a8_issue_branch
;;	  3-->    15 r141=zxn([sfp-0x20])              :cortex_a8_load_store_1
;;	  4-->    42 r0=r137                           :cortex_a8_default
;;	  4-->    45 r3=r135                           :cortex_a8_default
;;	  5-->    43 r1=`ptrace_hbptriggered'          :cortex_a8_load_store_1
;;	  5-->    44 r2=0x0                            :cortex_a8_default
;;	  6-->    33 [sfp-0x14]=r136                   :cortex_a8_load_store_1
;;	  6-->    37 r153=r141|0x25                    :cortex_a8_default
;;	  7-->    39 [sfp-0x20]=r153#0                 :cortex_a8_load_store_1
;;	  7-->    11 r138=0x5                          :cortex_a8_default
;;	  8-->    12 [sfp-0x48]=r138                   :cortex_a8_load_store_1
;;	  8-->    13 r139=0x48                         :cortex_a8_default
;;	  9-->    14 [sfp-0x44]=r139                   :cortex_a8_load_store_1
;;	  9-->    21 r144=0x1                          :cortex_a8_default
;;	 10-->    22 [sfp-0x38]=r144                   :cortex_a8_load_store_1
;;	 10-->    29 r149=0x0                          :cortex_a8_default
;;	 11-->    30 [sfp-0x10]=r149                   :cortex_a8_load_store_1
;;	 11-->    31 r150=0x4                          :cortex_a8_default
;;	 12-->    32 [sfp-0x8]=r150                    :cortex_a8_load_store_1
;;	 12-->    46 r0=call [`register_user_hw_breakpo:cortex_a8_issue_branch
;;	 13-->    58 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 13
;;   new head = 2
;;   new tail = 58


;; Procedure interblock/speculative motions == 0/0 




ptrace_hbp_create

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={5d,3u} r2={4d,1u} r3={4d,1u} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,11u,2d} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r135={1d,1u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,1u} r141={1d,1u} r144={1d,1u} r149={1d,1u} r150={1d,1u} r153={1d,1u} 
;;    total ref usage 302{260d,40u,2e} in 26{24 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 137 138 139 141 144 149 150 153
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 135 136 137 138 139 141 144 149 150 153
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 62 2 NOTE_INSN_DELETED)

(note 62 18 23 2 NOTE_INSN_DELETED)

(note 23 62 26 2 NOTE_INSN_DELETED)

(note 26 23 63 2 NOTE_INSN_DELETED)

(note 63 26 34 2 NOTE_INSN_DELETED)

(note 34 63 41 2 NOTE_INSN_DELETED)

(note 41 34 7 2 NOTE_INSN_DELETED)

(insn 7 41 2 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg/f:SI 137)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(insn 2 7 3 2 arch/arm/kernel/ptrace.c:449 (set (reg/v/f:SI 135 [ tsk ])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 3 2 8 2 arch/arm/kernel/ptrace.c:449 (set (reg/v:SI 136 [ type ])
        (reg:SI 1 r1 [ type ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ type ])
        (nil)))

(insn 8 3 9 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))

(insn 9 8 10 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 15 2 include/linux/hw_breakpoint.h:40 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 10 42 2 include/linux/hw_breakpoint.h:48 (set (reg:SI 141 [+40 ])
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -32 [0xffffffffffffffe0])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 42 15 45 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 0 r0)
        (reg/f:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -72 [0xffffffffffffffb8]))
            (nil))))

(insn 45 42 43 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 3 r3)
        (reg/v/f:SI 135 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ tsk ])
        (nil)))

(insn 43 45 44 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 1 r1)
        (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)
        (nil)))

(insn 44 43 33 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 33 44 37 2 arch/arm/kernel/ptrace.c:457 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 attr.bp_type+0 S4 A32])
        (reg/v:SI 136 [ type ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ type ])
        (nil)))

(insn 37 33 39 2 arch/arm/kernel/ptrace.c:458 (set (reg:SI 153)
        (ior:SI (reg:SI 141 [+40 ])
            (const_int 37 [0x25]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 141 [+40 ])
        (nil)))

(insn 39 37 11 2 arch/arm/kernel/ptrace.c:458 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0+40 S1 A64])
        (subreg:QI (reg:SI 153) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 153)
        (nil)))

(insn 11 39 12 2 include/linux/hw_breakpoint.h:42 (set (reg:SI 138)
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 2 include/linux/hw_breakpoint.h:42 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -72 [0xffffffffffffffb8])) [0 attr.type+0 S4 A64])
        (reg:SI 138)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn 13 12 14 2 include/linux/hw_breakpoint.h:43 (set (reg:SI 139)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 21 2 include/linux/hw_breakpoint.h:43 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -68 [0xffffffffffffffbc])) [0 attr.size+0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 72 [0x48])
            (nil))))

(insn 21 14 22 2 include/linux/hw_breakpoint.h:49 (set (reg:DI 144)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 22 21 29 2 include/linux/hw_breakpoint.h:49 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -56 [0xffffffffffffffc8])) [0 attr.D.23422.sample_period+0 S8 A64])
        (reg:DI 144)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 144)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 29 22 30 2 arch/arm/kernel/ptrace.c:455 (set (reg:DI 149)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 30 29 31 2 arch/arm/kernel/ptrace.c:455 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 attr.D.23452.bp_addr+0 S8 A64])
        (reg:DI 149)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 149)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 31 30 32 2 arch/arm/kernel/ptrace.c:456 (set (reg:DI 150)
        (const_int 4 [0x4])) 163 {*arm_movdi} (nil))

(insn 32 31 46 2 arch/arm/kernel/ptrace.c:456 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 150)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 150)
        (expr_list:REG_EQUAL (const_int 4 [0x4])
            (nil))))

(call_insn 46 32 58 2 arch/arm/kernel/ptrace.c:460 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524700 register_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 58 46 64 2 arch/arm/kernel/ptrace.c:462 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 64 58 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function arch_ptrace (arch_ptrace)[0:1564]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 66 n_edges 102 count 129 (    2)


arch_ptrace

Dataflow summary:
def_info->table_size = 2622, use_info->table_size = 659
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={48d,48u} r1={33d,13u} r2={35d,15u} r3={28d,8u} r11={1d,65u} r12={24d} r13={1d,103u} r14={25d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={58d,27u} r25={1d,77u} r26={1d,64u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} r133={1d,1u} r135={2d,1u} r136={2d,1u} r137={1d,1u} r139={1d,1u} r141={2d,3u} r143={1d,2u} r144={1d,2u} r145={1d,2u} r146={2d,2u} r147={1d,6u} r148={2d,6u} r151={1d,1u} r152={4d,1u} r153={1d,2u} r154={1d,4u} r158={1d,1u} r159={1d,1u} r161={2d,4u} r162={1d} r164={2d,4u} r165={1d} r167={2d,4u} r168={1d} r170={2d,4u} r171={1d} r173={2d,4u} r174={1d} r176={2d,4u} r177={1d} r179={2d,1u} r181={21d,1u} r184={6d,7u} r185={2d,7u} r188={1d,18u} r189={1d,2u} r190={1d,17u} r191={1d,19u} r192={1d,2u} r195={2d,2u} r201={1d,2u} r202={1d,1u} r203={1d,1u} r205={1d,1u} r206={1d,1u,1d} r208={2d,2u} r210={1d,1u} r214={2d,2u} r216={1d,1u} r220={2d,2u} r222={1d,1u} r227={2d,2u} r229={1d,1u} r234={1d,1u} r235={1d,1u} r236={2d,2u} r238={1d,1u} r243={2d,2u} r245={1d,1u} r250={1d,1u} r252={1d,1u} r254={1d,1u} r255={1d,1u} r259={1d,1u} r266={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r274={1d,1u} r276={1d,1u} r278={1d,1u} r280={1d,1u} r282={1d,1u} r283={1d,1u} r286={1d,2u} r306={1d,1u} r312={1d,1u} r319={1d,1u} r326={1d,1u} r327={1d,1u} r332={1d,1u} r333={2d,2u} r338={1d,1u} 
;;    total ref usage 3199{2587d,611u,1e} in 300{280 regular + 20 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d47(0){ }d80(1){ }d115(2){ }d143(3){ }d144(11){ }d168(12){ }d169(13){ }d194(14){ }d432(25){ }d433(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 62 3 8 9 11 13 15 17 18 19 21 23 41 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 188 189 190 191 192
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 188 189 190 191 192
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 189 190 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 189 190 191

( 2 )->[3]->( 64 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc] 195 201
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc] 195 201
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191 201
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191 201

( 3 )->[4]->( 6 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201

( 4 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u34(11){ }u35(13){ }u36(25){ }u37(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191 201
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 201
;; lr  def 	 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191 201
;; live  gen 	 179
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191

( 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u39(11){ }u40(13){ }u41(25){ }u42(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; lr  def 	 179 202 203 205 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 179 202 203 205 206
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191

( 6 5 )->[7]->( 65 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  gen 	 0 [r0] 2 [r2] 181
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[8]->( 65 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[9]->( 64 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 176 177 208 210
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 176 177 208 210
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 176 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 176 188 191

( 9 )->[10]->( 65 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[11]->( 64 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 173 174 214 216
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 173 174 214 216
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 173 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 173 188 191

( 11 )->[12]->( 65 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[13]->( 64 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u128(11){ }u129(13){ }u130(25){ }u131(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 170 171 220 222
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 170 171 220 222
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 170 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 170 188 191

( 13 )->[14]->( 65 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u140(11){ }u141(13){ }u142(25){ }u143(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[15]->( 64 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u156(11){ }u157(13){ }u158(25){ }u159(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 167 168 227 229
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 167 168 227 229
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 167 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 167 188 191

( 15 )->[16]->( 65 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[17]->( 65 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u184(11){ }u185(13){ }u186(25){ }u187(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 181 234
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 2 [r2] 181 234
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[18]->( 65 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u194(11){ }u195(13){ }u196(25){ }u197(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  def 	 181 235
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 181 235
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181

( 2 )->[19]->( 64 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u201(11){ }u202(13){ }u203(25){ }u204(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 164 165 236 238
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 164 165 236 238
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 188 191

( 19 )->[20]->( 65 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u213(11){ }u214(13){ }u215(25){ }u216(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[21]->( 64 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u229(11){ }u230(13){ }u231(25){ }u232(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 161 162 243 245
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 161 162 243 245
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 161 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 161 188 191

( 21 )->[22]->( 65 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u241(11){ }u242(13){ }u243(25){ }u244(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[23]->( 63 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u257(11){ }u258(13){ }u259(25){ }u260(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191

( 23 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u267(11){ }u268(13){ }u269(25){ }u270(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191

( 24 )->[25]->( 39 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u273(11){ }u274(13){ }u275(25){ }u276(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 139 152 158 159 250 252 254
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 137 139 152 158 159 250 252 254
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191

( 24 )->[26]->( 28 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u299(11){ }u300(13){ }u301(25){ }u302(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191

( 26 )->[27]->( 29 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u304(11){ }u305(13){ }u306(25){ }u307(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 136
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191

( 26 )->[28]->( 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u309(11){ }u310(13){ }u311(25){ }u312(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 136
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191

( 28 27 )->[29]->( 30 31 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u314(11){ }u315(13){ }u316(25){ }u317(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 153 255
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  gen 	 24 [cc] 153 255
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191

( 29 )->[30]->( 40 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u322(11){ }u323(13){ }u324(25){ }u325(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 29 )->[31]->( 32 33 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u326(11){ }u327(13){ }u328(25){ }u329(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188
;; lr  def 	 24 [cc] 154 259
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; live  gen 	 24 [cc] 154 259
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191

( 31 )->[32]->( 39 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u337(11){ }u338(13){ }u339(25){ }u340(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; live  gen 	 152
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191

( 31 )->[33]->( 35 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u342(11){ }u343(13){ }u344(25){ }u345(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 141 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; live  gen 	 141 185
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191

( 35 )->[34]->( 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u349(11){ }u350(13){ }u351(25){ }u352(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 141
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191

( 34 33 )->[35]->( 34 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u355(11){ }u356(13){ }u357(25){ }u358(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191

( 35 )->[36]->( 37 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u362(11){ }u363(13){ }u364(25){ }u365(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 191

( 36 )->[37]->( 39 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u369(11){ }u370(13){ }u371(25){ }u372(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; live  gen 	 152
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191

( 36 )->[38]->( 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u374(11){ }u375(13){ }u376(25){ }u377(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185
;; lr  def 	 152 266 269 270 271 274 276 278 280
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185 188 191
;; live  gen 	 152 185 266 269 270 271 274 276 278 280
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191

( 38 25 32 37 )->[39]->( 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u402(11){ }u403(13){ }u404(25){ }u405(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 151 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  gen 	 0 [r0] 2 [r2] 24 [cc] 151 181
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 39 30 )->[40]->( 65 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u414(11){ }u415(13){ }u416(25){ }u417(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[41]->( 63 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u421(11){ }u422(13){ }u423(25){ }u424(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191

( 41 )->[42]->( 43 44 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u431(11){ }u432(13){ }u433(25){ }u434(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191

( 42 )->[43]->( 61 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u437(11){ }u438(13){ }u439(25){ }u440(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 42 )->[44]->( 46 45 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u442(11){ }u443(13){ }u444(25){ }u445(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191

( 44 )->[45]->( 47 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u447(11){ }u448(13){ }u449(25){ }u450(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 135 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 135 146
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191

( 44 )->[46]->( 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u452(11){ }u453(13){ }u454(25){ }u455(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 135 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 135 146
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191

( 46 45 )->[47]->( 60 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u457(11){ }u458(13){ }u459(25){ }u460(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 145 282
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  gen 	 24 [cc] 145 282
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191

( 47 )->[48]->( 49 50 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u465(11){ }u466(13){ }u467(25){ }u468(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 0 [r0] 2 [r2] 14 [lr] 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; live  gen 	 0 [r0] 2 [r2] 24 [cc] 147
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190

( 48 )->[49]->( 61 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u475(11){ }u476(13){ }u477(25){ }u478(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 48 )->[50]->( 51 54 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u479(11){ }u480(13){ }u481(25){ }u482(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 188
;; lr  def 	 24 [cc] 148 283 286
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; live  gen 	 24 [cc] 148 283 286
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286

( 50 )->[51]->( 52 53 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u490(11){ }u491(13){ }u492(25){ }u493(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 188 190 286
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 188 190 286
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 148
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286

( 51 )->[52]->( 61 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u502(11){ }u503(13){ }u504(25){ }u505(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 51 )->[53]->( 54 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u507(11){ }u508(13){ }u509(25){ }u510(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 286
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190

( 50 53 )->[54]->( 55 56 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u513(11){ }u514(13){ }u515(25){ }u516(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 190
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188

( 54 )->[55]->( 59 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u529(11){ }u530(13){ }u531(25){ }u532(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 338
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 148 188
;; live  gen 	 338
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188

( 54 )->[56]->( 61 57 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u537(11){ }u538(13){ }u539(25){ }u540(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 181 184 306 312 319
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 181 184 306 312 319
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 181 184 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 181 184 188

( 56 )->[57]->( 60 58 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u573(11){ }u574(13){ }u575(25){ }u576(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 184 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc] 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 184 188
;; live  gen 	 24 [cc] 143 144
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188

( 57 )->[58]->( 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u583(11){ }u584(13){ }u585(25){ }u586(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 184
;; lr  def 	 24 [cc] 326 327 332 333
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; live  gen 	 326 327 332 333
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188

( 58 55 )->[59]->( 61 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u603(11){ }u604(13){ }u605(25){ }u606(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  gen 	 0 [r0] 1 [r1] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 57 47 )->[60]->( 61 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u615(11){ }u616(13){ }u617(25){ }u618(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188

( 60 49 52 43 56 59 )->[61]->( 65 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u619(11){ }u620(13){ }u621(25){ }u622(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 2 )->[62]->( 65 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u626(11){ }u627(13){ }u628(25){ }u629(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 23 41 )->[63]->( 65 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u640(11){ }u641(13){ }u642(25){ }u643(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181

( 21 19 3 9 11 13 15 )->[64]->( 65 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u644(11){ }u645(13){ }u646(25){ }u647(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 181
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181

( 64 62 7 61 40 22 20 18 17 16 14 12 10 8 63 )->[65]->( 1 )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u648(11){ }u649(13){ }u650(25){ }u651(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 65 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u654(0){ }u655(11){ }u656(13){ }u657(14){ }u658(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 29 to worklist
  Adding insn 32 to worklist
  Adding insn 571 to worklist
  Adding insn 573 to worklist
  Adding insn 50 to worklist
  Adding insn 575 to worklist
  Adding insn 59 to worklist
  Adding insn 71 to worklist
  Adding insn 577 to worklist
  Adding insn 82 to worklist
  Adding insn 77 to worklist
  Adding insn 76 to worklist
  Adding insn 94 to worklist
  Adding insn 579 to worklist
  Adding insn 105 to worklist
  Adding insn 100 to worklist
  Adding insn 99 to worklist
  Adding insn 117 to worklist
  Adding insn 581 to worklist
  Adding insn 129 to worklist
  Adding insn 124 to worklist
  Adding insn 123 to worklist
  Adding insn 141 to worklist
  Adding insn 583 to worklist
  Adding insn 153 to worklist
  Adding insn 148 to worklist
  Adding insn 147 to worklist
  Adding insn 585 to worklist
  Adding insn 162 to worklist
  Adding insn 587 to worklist
  Adding insn 169 to worklist
  Adding insn 181 to worklist
  Adding insn 589 to worklist
  Adding insn 193 to worklist
  Adding insn 188 to worklist
  Adding insn 187 to worklist
  Adding insn 205 to worklist
  Adding insn 591 to worklist
  Adding insn 217 to worklist
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 227 to worklist
  Adding insn 224 to worklist
  Adding insn 231 to worklist
  Adding insn 593 to worklist
  Adding insn 242 to worklist
  Adding insn 239 to worklist
  Adding insn 237 to worklist
  Adding insn 234 to worklist
  Adding insn 258 to worklist
  Adding insn 595 to worklist
  Adding insn 271 to worklist
  Adding insn 597 to worklist
  Adding insn 285 to worklist
  Adding insn 599 to worklist
  Adding insn 601 to worklist
  Adding insn 306 to worklist
  Adding insn 310 to worklist
  Adding insn 603 to worklist
  Adding insn 341 to worklist
  Adding insn 605 to worklist
  Adding insn 355 to worklist
  Adding insn 364 to worklist
  Adding insn 361 to worklist
  Adding insn 368 to worklist
  Adding insn 607 to worklist
  Adding insn 376 to worklist
  Adding insn 609 to worklist
  Adding insn 391 to worklist
  Adding insn 398 to worklist
  Adding insn 394 to worklist
  Adding insn 611 to worklist
  Adding insn 412 to worklist
  Adding insn 419 to worklist
  Adding insn 416 to worklist
  Adding insn 613 to worklist
  Adding insn 431 to worklist
  Adding insn 444 to worklist
  Adding insn 440 to worklist
  Adding insn 615 to worklist
  Adding insn 567 to worklist
  Adding insn 566 to worklist
  Adding insn 493 to worklist
  Adding insn 490 to worklist
  Adding insn 498 to worklist
  Adding insn 511 to worklist
  Adding insn 503 to worklist
  Adding insn 502 to worklist
  Adding insn 617 to worklist
  Adding insn 517 to worklist
  Adding insn 619 to worklist
  Adding insn 527 to worklist
  Adding insn 621 to worklist
  Adding insn 536 to worklist
  Adding insn 623 to worklist
  Adding insn 560 to worklist
Finished finding needed instructions:
processing block 65 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 554 to worklist
processing block 62 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 537 to worklist
  Adding insn 535 to worklist
  Adding insn 534 to worklist
  Adding insn 533 to worklist
  Adding insn 532 to worklist
processing block 64 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 547 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 51 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
  Adding insn 45 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
  Adding insn 34 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
  Adding insn 31 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191 201
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 639 to worklist
  Adding insn 638 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 60 to worklist
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 83 to worklist
  Adding insn 81 to worklist
  Adding insn 80 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 176 188 191
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 640 to worklist
  Adding insn 68 to worklist
  Adding insn 636 to worklist
  Adding insn 635 to worklist
processing block 12 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 106 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 173 188 191
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 641 to worklist
  Adding insn 91 to worklist
  Adding insn 634 to worklist
  Adding insn 633 to worklist
processing block 14 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 130 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 125 to worklist
processing block 13 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 170 188 191
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 642 to worklist
  Adding insn 114 to worklist
  Adding insn 632 to worklist
  Adding insn 631 to worklist
processing block 16 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 154 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 150 to worklist
  Adding insn 149 to worklist
processing block 15 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 167 188 191
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 643 to worklist
  Adding insn 138 to worklist
  Adding insn 630 to worklist
  Adding insn 629 to worklist
processing block 17 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 163 to worklist
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 159 to worklist
processing block 18 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 170 to worklist
  Adding insn 168 to worklist
processing block 20 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 194 to worklist
  Adding insn 192 to worklist
  Adding insn 191 to worklist
  Adding insn 190 to worklist
  Adding insn 189 to worklist
processing block 19 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 188 191
  Adding insn 180 to worklist
  Adding insn 179 to worklist
  Adding insn 644 to worklist
  Adding insn 178 to worklist
  Adding insn 628 to worklist
  Adding insn 627 to worklist
processing block 22 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 218 to worklist
  Adding insn 216 to worklist
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 213 to worklist
processing block 21 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 161 188 191
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 645 to worklist
  Adding insn 202 to worklist
  Adding insn 626 to worklist
  Adding insn 625 to worklist
processing block 63 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 542 to worklist
processing block 40 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 354 to worklist
processing block 39 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 569 to worklist
  Adding insn 568 to worklist
  Adding insn 340 to worklist
  Adding insn 339 to worklist
processing block 25 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
  Adding insn 252 to worklist
  Adding insn 251 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 246 to worklist
  Adding insn 240 to worklist
  Adding insn 238 to worklist
  Adding insn 236 to worklist
  Adding insn 235 to worklist
  Adding insn 233 to worklist
processing block 30 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 273 to worklist
processing block 32 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
  Adding insn 287 to worklist
processing block 34 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
  Adding insn 300 to worklist
processing block 37 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
  Adding insn 312 to worklist
processing block 38 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
  Adding insn 336 to worklist
  Adding insn 334 to worklist
  Adding insn 332 to worklist
  Adding insn 330 to worklist
  Adding insn 328 to worklist
  Adding insn 325 to worklist
  Adding insn 324 to worklist
  Adding insn 323 to worklist
  Adding insn 320 to worklist
  Adding insn 317 to worklist
processing block 36 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 191
  Adding insn 309 to worklist
processing block 35 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
  Adding insn 305 to worklist
processing block 33 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
  Adding insn 294 to worklist
  Adding insn 292 to worklist
processing block 31 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
  Adding insn 284 to worklist
  Adding insn 283 to worklist
  Adding insn 281 to worklist
processing block 29 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
  Adding insn 270 to worklist
  Adding insn 269 to worklist
  Adding insn 268 to worklist
processing block 28 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
  Adding insn 265 to worklist
processing block 27 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
  Adding insn 260 to worklist
processing block 26 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
processing block 24 lr out =  11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
  Adding insn 230 to worklist
processing block 23 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
  Adding insn 226 to worklist
  Adding insn 223 to worklist
processing block 61 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
  Adding insn 526 to worklist
processing block 43 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 370 to worklist
processing block 60 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 523 to worklist
processing block 49 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 400 to worklist
processing block 52 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 421 to worklist
processing block 59 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
  Adding insn 518 to worklist
  Adding insn 516 to worklist
  Adding insn 515 to worklist
processing block 55 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
  Adding insn 565 to worklist
processing block 58 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
  Adding insn 510 to worklist
  Adding insn 509 to worklist
  Adding insn 507 to worklist
  Adding insn 501 to worklist
  Adding insn 500 to worklist
processing block 57 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
  Adding insn 497 to worklist
  Adding insn 496 to worklist
  Adding insn 495 to worklist
processing block 56 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 181 184 188
  Adding insn 492 to worklist
  Adding insn 489 to worklist
  Adding insn 488 to worklist
  Adding insn 487 to worklist
  Adding insn 484 to worklist
  Adding insn 479 to worklist
  Adding insn 476 to worklist
  Adding insn 475 to worklist
  Adding insn 474 to worklist
  Adding insn 469 to worklist
  Adding insn 466 to worklist
  Adding insn 461 to worklist
  Adding insn 458 to worklist
  Adding insn 570 to worklist
processing block 54 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
  Adding insn 443 to worklist
  Adding insn 439 to worklist
  Adding insn 438 to worklist
  Adding insn 437 to worklist
processing block 53 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
processing block 51 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
  Adding insn 418 to worklist
  Adding insn 417 to worklist
  Adding insn 415 to worklist
  Adding insn 414 to worklist
processing block 50 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
  Adding insn 411 to worklist
  Adding insn 410 to worklist
  Adding insn 408 to worklist
  Adding insn 405 to worklist
processing block 48 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
  Adding insn 397 to worklist
  Adding insn 395 to worklist
  Adding insn 393 to worklist
processing block 47 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
  Adding insn 390 to worklist
  Adding insn 389 to worklist
  Adding insn 388 to worklist
processing block 46 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
  Adding insn 385 to worklist
  Adding insn 384 to worklist
processing block 45 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
  Adding insn 379 to worklist
  Adding insn 378 to worklist
processing block 44 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
processing block 42 lr out =  11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
  Adding insn 367 to worklist
processing block 41 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
  Adding insn 363 to worklist
  Adding insn 360 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 189 190 191
  Adding insn 10 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 66 n_edges 102 count 131 (    2)
;;   ======================================================
;;   -- basic block 35 from 305 to 306 -- before reload
;;   ======================================================

;;	  0-->   305 cc=cmp(zxt(r141,0x1,0x0),0x0)     :cortex_a8_default
;;	  2-->   306 pc={(cc==0x0)?L303:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 305
;;   new tail = 306

;;   ======================================================
;;   -- basic block 34 from 300 to 300 -- before reload
;;   ======================================================

;;	  0-->   300 r141=r141 0>>0x1                  :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 300
;;   new tail = 300

;;   ======================================================
;;   -- basic block 2 from 2 to 11 -- before reload
;;   ======================================================

;;	  0-->     3 r189=r1                           :cortex_a8_default
;;	  0-->     2 r188=r0                           :cortex_a8_default
;;	  1-->    10 r192=r189-0x3                     :cortex_a8_default
;;	  1-->     4 r190=r2                           :cortex_a8_default
;;	  2-->     5 r191=r3                           :cortex_a8_default
;;	  2-->    11 {pc={(leu(r192,0x1b))?[r192*0x4+L1:cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 2
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 638 to 29 -- before reload
;;   ======================================================

;;	  0-->   638 {cc=cmp(r190&0x3,0x0);r195=r190&0x:cortex_a8_default
;;	  1-->   639 r195={(cc==0x0)?r195:0x1}         :cortex_a8_default
;;	  2-->    27 {r201=geu(r190,0x128)|r195;clobber:cortex_a8_default
;;	  3-->    28 cc=cmp(r201,0x0)                  :cortex_a8_default
;;	  5-->    29 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 638
;;   new tail = 29

;;   ======================================================
;;   -- basic block 4 from 31 to 32 -- before reload
;;   ======================================================

;;	  0-->    31 cc=cmp(r190,0x47)                 :cortex_a8_default
;;	  2-->    32 pc={(leu(cc,0x0))?L37:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 31
;;   new tail = 32

;;   ======================================================
;;   -- basic block 5 from 34 to 571 -- before reload
;;   ======================================================

;;	  0-->    34 r179=r201                         :cortex_a8_default
;;	  0-->   571 pc=L46                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 34
;;   new tail = 571

;;   ======================================================
;;   -- basic block 6 from 39 to 45 -- before reload
;;   ======================================================

;;	  0-->    39 r202=[r188+0x4]                   :cortex_a8_load_store_1
;;	  0-->    42 r205=r190&0xfffffffffffffffc      :cortex_a8_default
;;	  1-->    40 r203=0x1fb0                       :cortex_a8_default
;;	  2-->    43 r206=r202+r205                    :cortex_a8_default
;;	  4-->    45 r179=[r206+r203]                  :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 39
;;   new tail = 45

;;   ======================================================
;;   -- basic block 7 from 48 to 573 -- before reload
;;   ======================================================

;;	  0-->    48 r2=r179                           :cortex_a8_default
;;	  0-->    49 r0=r191                           :cortex_a8_default
;;	  1-->    50 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  2-->    51 r181=r0                           :cortex_a8_default
;;	  2-->   573 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 48
;;   new tail = 573

;;   ======================================================
;;   -- basic block 8 from 56 to 575 -- before reload
;;   ======================================================

;;	  0-->    56 r0=r188                           :cortex_a8_default
;;	  0-->    57 r1=r190                           :cortex_a8_default
;;	  1-->    58 r2=r191                           :cortex_a8_default
;;	  2-->    59 r0=call [`ptrace_write_user']     :cortex_a8_issue_branch
;;	  2-->    60 r181=r0                           :cortex_a8_default
;;	  3-->   575 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 56
;;   new tail = 575

;;   ======================================================
;;   -- basic block 9 from 635 to 71 -- before reload
;;   ======================================================

;;	  0-->   635 r208=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   636 r208=r208&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->    68 r210=[r208+0x8]                   :cortex_a8_load_store_1
;;	  5-->   640 r176=r210                         :cortex_a8_default
;;	  6-->    69 {r176=asm_operands;r177=asm_operan:nothing
;;	  7-->    70 cc=cmp(r176,0x0)                  :cortex_a8_default
;;	  9-->    71 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 635
;;   new tail = 71

;;   ======================================================
;;   -- basic block 10 from 76 to 577 -- before reload
;;   ======================================================

;;	  0-->    78 r0=r188                           :cortex_a8_default
;;	  0-->    80 r2=r176                           :cortex_a8_default
;;	  1-->    79 r1=const(`*.LANCHOR0'+0xac)       :cortex_a8_load_store_1
;;	  1-->    81 r3=0x48                           :cortex_a8_default
;;	  2-->    77 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->    76 [sp]=r176                         :cortex_a8_load_store_1
;;	  3-->    82 r0=call [`gpr_get']               :cortex_a8_issue_branch
;;	  4-->    83 r181=r0                           :cortex_a8_default
;;	  4-->   577 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 76
;;   new tail = 577

;;   ======================================================
;;   -- basic block 11 from 633 to 94 -- before reload
;;   ======================================================

;;	  0-->   633 r214=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   634 r214=r214&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->    91 r216=[r214+0x8]                   :cortex_a8_load_store_1
;;	  5-->   641 r173=r216                         :cortex_a8_default
;;	  6-->    92 {r173=asm_operands;r174=asm_operan:nothing
;;	  7-->    93 cc=cmp(r173,0x0)                  :cortex_a8_default
;;	  9-->    94 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 633
;;   new tail = 94

;;   ======================================================
;;   -- basic block 12 from 99 to 579 -- before reload
;;   ======================================================

;;	  0-->   101 r0=r188                           :cortex_a8_default
;;	  0-->   103 r2=r173                           :cortex_a8_default
;;	  1-->   102 r1=const(`*.LANCHOR0'+0xac)       :cortex_a8_load_store_1
;;	  1-->   104 r3=0x48                           :cortex_a8_default
;;	  2-->   100 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->    99 [sp]=r173                         :cortex_a8_load_store_1
;;	  3-->   105 r0=call [`gpr_set']               :cortex_a8_issue_branch
;;	  4-->   106 r181=r0                           :cortex_a8_default
;;	  4-->   579 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 99
;;   new tail = 579

;;   ======================================================
;;   -- basic block 13 from 631 to 117 -- before reload
;;   ======================================================

;;	  0-->   631 r220=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   632 r220=r220&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->   114 r222=[r220+0x8]                   :cortex_a8_load_store_1
;;	  5-->   642 r170=r222                         :cortex_a8_default
;;	  6-->   115 {r170=asm_operands;r171=asm_operan:nothing
;;	  7-->   116 cc=cmp(r170,0x0)                  :cortex_a8_default
;;	  9-->   117 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 631
;;   new tail = 117

;;   ======================================================
;;   -- basic block 14 from 123 to 581 -- before reload
;;   ======================================================

;;	  0-->   125 r0=r188                           :cortex_a8_default
;;	  0-->   127 r2=r170                           :cortex_a8_default
;;	  1-->   126 r1=const(`*.LANCHOR0'+0xd0)       :cortex_a8_load_store_1
;;	  1-->   128 r3=0x8c                           :cortex_a8_default
;;	  2-->   124 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->   123 [sp]=r170                         :cortex_a8_load_store_1
;;	  3-->   129 r0=call [`fpa_get']               :cortex_a8_issue_branch
;;	  4-->   130 r181=r0                           :cortex_a8_default
;;	  4-->   581 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 123
;;   new tail = 581

;;   ======================================================
;;   -- basic block 15 from 629 to 141 -- before reload
;;   ======================================================

;;	  0-->   629 r227=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   630 r227=r227&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->   138 r229=[r227+0x8]                   :cortex_a8_load_store_1
;;	  5-->   643 r167=r229                         :cortex_a8_default
;;	  6-->   139 {r167=asm_operands;r168=asm_operan:nothing
;;	  7-->   140 cc=cmp(r167,0x0)                  :cortex_a8_default
;;	  9-->   141 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 629
;;   new tail = 141

;;   ======================================================
;;   -- basic block 16 from 147 to 583 -- before reload
;;   ======================================================

;;	  0-->   149 r0=r188                           :cortex_a8_default
;;	  0-->   151 r2=r167                           :cortex_a8_default
;;	  1-->   150 r1=const(`*.LANCHOR0'+0xd0)       :cortex_a8_load_store_1
;;	  1-->   152 r3=0x8c                           :cortex_a8_default
;;	  2-->   148 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->   147 [sp]=r167                         :cortex_a8_load_store_1
;;	  3-->   153 r0=call [`fpa_set']               :cortex_a8_issue_branch
;;	  4-->   154 r181=r0                           :cortex_a8_default
;;	  4-->   583 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 147
;;   new tail = 583

;;   ======================================================
;;   -- basic block 17 from 159 to 585 -- before reload
;;   ======================================================

;;	  0-->   159 r234=[r188+0x4]                   :cortex_a8_load_store_1
;;	  0-->   161 r0=r191                           :cortex_a8_default
;;	  3-->   160 r2=[r234+0x60]                    :cortex_a8_load_store_1
;;	  4-->   162 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  5-->   163 r181=r0                           :cortex_a8_default
;;	  5-->   585 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 159
;;   new tail = 585

;;   ======================================================
;;   -- basic block 18 from 168 to 587 -- before reload
;;   ======================================================

;;	  0-->   168 r235=[r188+0x4]                   :cortex_a8_load_store_1
;;	  0-->   170 r181=0x0                          :cortex_a8_default
;;	  3-->   169 [r235+0x4c]=r191                  :cortex_a8_load_store_1
;;	  3-->   587 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 168
;;   new tail = 587

;;   ======================================================
;;   -- basic block 19 from 627 to 181 -- before reload
;;   ======================================================

;;	  0-->   627 r236=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   628 r236=r236&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->   178 r238=[r236+0x8]                   :cortex_a8_load_store_1
;;	  5-->   644 r164=r238                         :cortex_a8_default
;;	  6-->   179 {r164=asm_operands;r165=asm_operan:nothing
;;	  7-->   180 cc=cmp(r164,0x0)                  :cortex_a8_default
;;	  9-->   181 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 627
;;   new tail = 181

;;   ======================================================
;;   -- basic block 20 from 187 to 589 -- before reload
;;   ======================================================

;;	  0-->   189 r0=r188                           :cortex_a8_default
;;	  0-->   191 r2=r164                           :cortex_a8_default
;;	  1-->   190 r1=const(`*.LANCHOR0'+0xf4)       :cortex_a8_load_store_1
;;	  1-->   192 r3=0x104                          :cortex_a8_default
;;	  2-->   188 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->   187 [sp]=r164                         :cortex_a8_load_store_1
;;	  3-->   193 r0=call [`vfp_get']               :cortex_a8_issue_branch
;;	  4-->   194 r181=r0                           :cortex_a8_default
;;	  4-->   589 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 187
;;   new tail = 589

;;   ======================================================
;;   -- basic block 21 from 625 to 205 -- before reload
;;   ======================================================

;;	  0-->   625 r243=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  1-->   626 r243=r243&0xffffffffffffffc0      :cortex_a8_default
;;	  3-->   202 r245=[r243+0x8]                   :cortex_a8_load_store_1
;;	  5-->   645 r161=r245                         :cortex_a8_default
;;	  6-->   203 {r161=asm_operands;r162=asm_operan:nothing
;;	  7-->   204 cc=cmp(r161,0x0)                  :cortex_a8_default
;;	  9-->   205 pc={(cc!=0x0)?L545:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 625
;;   new tail = 205

;;   ======================================================
;;   -- basic block 22 from 211 to 591 -- before reload
;;   ======================================================

;;	  0-->   213 r0=r188                           :cortex_a8_default
;;	  0-->   215 r2=r161                           :cortex_a8_default
;;	  1-->   214 r1=const(`*.LANCHOR0'+0xf4)       :cortex_a8_load_store_1
;;	  1-->   216 r3=0x104                          :cortex_a8_default
;;	  2-->   212 [sp+0x4]=r191                     :cortex_a8_load_store_1
;;	  3-->   211 [sp]=r161                         :cortex_a8_load_store_1
;;	  3-->   217 r0=call [`vfp_set']               :cortex_a8_issue_branch
;;	  4-->   218 r181=r0                           :cortex_a8_default
;;	  4-->   591 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 211
;;   new tail = 591

;;   ======================================================
;;   -- basic block 23 from 223 to 227 -- before reload
;;   ======================================================

;;	  0-->   223 r0=r188                           :cortex_a8_default
;;	  1-->   224 r0=call [`ptrace_get_breakpoints']:cortex_a8_issue_branch
;;	 33-->   226 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   227 pc={(cc<0x0)?L540:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 223
;;   new tail = 227

;;   ======================================================
;;   -- basic block 24 from 230 to 231 -- before reload
;;   ======================================================

;;	  0-->   230 cc=cmp(r190,0x0)                  :cortex_a8_default
;;	  2-->   231 pc={(cc!=0x0)?L255:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 230
;;   new tail = 231

;;   ======================================================
;;   -- basic block 25 from 233 to 593 -- before reload
;;   ======================================================

;;	  0-->   233 r0=r190                           :cortex_a8_default
;;	  1-->   234 r0=call [`hw_breakpoint_slots']   :cortex_a8_issue_branch
;;	  1-->   235 r159=r0                           :cortex_a8_default
;;	  2-->   236 r0=0x1                            :cortex_a8_default
;;	  3-->   237 r0=call [`hw_breakpoint_slots']   :cortex_a8_issue_branch
;;	  3-->   238 r158=r0                           :cortex_a8_default
;;	  4-->   239 r0=call [`arch_get_debug_arch']   :cortex_a8_issue_branch
;;	  4-->   240 r250=r0                           :cortex_a8_default
;;	  5-->   242 r0=call [`arch_get_max_wp_len']   :cortex_a8_issue_branch
;;	  5-->   248 r252=zxn(r158#0)                  :cortex_a8_default
;;	  6-->   251 r254=zxn(r159#0)                  :cortex_a8_default
;;	 37-->   246 r139=r250<<0x8|r0                 :cortex_a8_default
;;	 39-->   249 r137=r139<<0x8|r252               :cortex_a8_default
;;	 41-->   252 r152=r137<<0x8|r254               :cortex_a8_default
;;	 41-->   593 pc=L337                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 41
;;   new head = 233
;;   new tail = 593

;;   ======================================================
;;   -- basic block 26 from 258 to 258 -- before reload
;;   ======================================================

;;	  0-->   258 pc={(cc<0x0)?L263:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 258
;;   new tail = 258

;;   ======================================================
;;   -- basic block 27 from 260 to 595 -- before reload
;;   ======================================================

;;	  0-->   260 r136=r190                         :cortex_a8_default
;;	  0-->   595 pc=L266                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 260
;;   new tail = 595

;;   ======================================================
;;   -- basic block 28 from 265 to 265 -- before reload
;;   ======================================================

;;	  0-->   265 r136=0x20-r190                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 265
;;   new tail = 265

;;   ======================================================
;;   -- basic block 29 from 268 to 271 -- before reload
;;   ======================================================

;;	  0-->   268 r255=r136-0x1                     :cortex_a8_default
;;	  2-->   269 r153=r255>>0x1                    :cortex_a8_default
;;	  3-->   270 cc=cmp(r153,0x1f)                 :cortex_a8_default
;;	  5-->   271 pc={(leu(cc,0x0))?L276:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 268
;;   new tail = 271

;;   ======================================================
;;   -- basic block 30 from 273 to 597 -- before reload
;;   ======================================================

;;	  0-->   273 r181=0xffffffffffffffea           :cortex_a8_default
;;	  0-->   597 pc=L352                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 273
;;   new tail = 597

;;   ======================================================
;;   -- basic block 31 from 281 to 285 -- before reload
;;   ======================================================

;;	  0-->   281 r259=r153*0x4+r188                :cortex_a8_default
;;	  2-->   283 r154=[r259+0x31c]                 :cortex_a8_load_store_1
;;	  4-->   284 cc=cmp(r154,0x0)                  :cortex_a8_default
;;	  6-->   285 pc={(cc!=0x0)?L290:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 281
;;   new tail = 285

;;   ======================================================
;;   -- basic block 32 from 287 to 599 -- before reload
;;   ======================================================

;;	  0-->   287 r152=r154                         :cortex_a8_default
;;	  0-->   599 pc=L337                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 287
;;   new tail = 599

;;   ======================================================
;;   -- basic block 33 from 292 to 601 -- before reload
;;   ======================================================

;;	  0-->   292 r185=[r154+0xd4]                  :cortex_a8_load_store_1
;;	  2-->   294 r141=zxt(r185,0x8,0x13)           :cortex_a8_default
;;	  2-->   601 pc=L301                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 292
;;   new tail = 601

;;   ======================================================
;;   -- basic block 36 from 309 to 310 -- before reload
;;   ======================================================

;;	  0-->   309 cc=cmp(zxt(r190,0x1,0x0),0x0)     :cortex_a8_default
;;	  2-->   310 pc={(cc==0x0)?L315:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 309
;;   new tail = 310

;;   ======================================================
;;   -- basic block 37 from 312 to 603 -- before reload
;;   ======================================================

;;	  0-->   312 r152=[r154+0xb0]                  :cortex_a8_load_store_1
;;	  0-->   603 pc=L337                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 312
;;   new tail = 603

;;   ======================================================
;;   -- basic block 38 from 317 to 336 -- before reload
;;   ======================================================

;;	  0-->   317 zxt(r185,0x8,0x13)=r141           :cortex_a8_default
;;	  1-->   323 r269=zxt(r185,0x8,0x13)           :cortex_a8_default
;;	  1-->   320 r266=zxt(r185,0x1,0x9)            :cortex_a8_default
;;	  2-->   330 r276=zxt(r185,0x2,0x1b)           :cortex_a8_default
;;	  2-->   334 r280=zxt(r185,0x2,0x1d)           :cortex_a8_default
;;	  3-->   324 r270=r269<<0x5                    :cortex_a8_default
;;	  4-->   325 r271=r266<<0x16|r270              :cortex_a8_default
;;	  5-->   328 r274=r185 0>>0x1f|r271            :cortex_a8_default
;;	  6-->   332 r278=r276<<0x3|r274               :cortex_a8_default
;;	  7-->   336 r152=r280<<0x1|r278               :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 317
;;   new tail = 336

;;   ======================================================
;;   -- basic block 39 from 339 to 569 -- before reload
;;   ======================================================

;;	  0-->   339 r2=r152                           :cortex_a8_default
;;	  0-->   340 r0=r191                           :cortex_a8_default
;;	  1-->   341 {r0=asm_operands;clobber cc;clobbe:nothing
;;	  2-->   568 {cc=cmp(r0,0x0);r151=r0;}         :cortex_a8_default
;;	  3-->   569 r181={(cc==0x0)?r151:0xfffffffffff:cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 339
;;   new tail = 569

;;   ======================================================
;;   -- basic block 40 from 354 to 605 -- before reload
;;   ======================================================

;;	  0-->   354 r0=r188                           :cortex_a8_default
;;	  1-->   355 call [`ptrace_put_breakpoints']   :cortex_a8_issue_branch
;;	  1-->   605 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 354
;;   new tail = 605

;;   ======================================================
;;   -- basic block 41 from 360 to 364 -- before reload
;;   ======================================================

;;	  0-->   360 r0=r188                           :cortex_a8_default
;;	  1-->   361 r0=call [`ptrace_get_breakpoints']:cortex_a8_issue_branch
;;	 33-->   363 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   364 pc={(cc<0x0)?L540:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 360
;;   new tail = 364

;;   ======================================================
;;   -- basic block 42 from 367 to 368 -- before reload
;;   ======================================================

;;	  0-->   367 cc=cmp(r190,0x0)                  :cortex_a8_default
;;	  2-->   368 pc={(cc!=0x0)?L373:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 367
;;   new tail = 368

;;   ======================================================
;;   -- basic block 43 from 370 to 607 -- before reload
;;   ======================================================

;;	  0-->   370 r181=r190                         :cortex_a8_default
;;	  0-->   607 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 370
;;   new tail = 607

;;   ======================================================
;;   -- basic block 44 from 376 to 376 -- before reload
;;   ======================================================

;;	  0-->   376 pc={(cc<0x0)?L382:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 376
;;   new tail = 376

;;   ======================================================
;;   -- basic block 45 from 378 to 609 -- before reload
;;   ======================================================

;;	  0-->   378 r135=r190                         :cortex_a8_default
;;	  0-->   379 r146=0x4                          :cortex_a8_default
;;	  1-->   609 pc=L386                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 378
;;   new tail = 609

;;   ======================================================
;;   -- basic block 46 from 384 to 385 -- before reload
;;   ======================================================

;;	  0-->   384 r135=0x20-r190                    :cortex_a8_default
;;	  0-->   385 r146=0x3                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 384
;;   new tail = 385

;;   ======================================================
;;   -- basic block 47 from 388 to 391 -- before reload
;;   ======================================================

;;	  0-->   388 r282=r135-0x1                     :cortex_a8_default
;;	  2-->   389 r145=r282>>0x1                    :cortex_a8_default
;;	  3-->   390 cc=cmp(r145,0x1f)                 :cortex_a8_default
;;	  5-->   391 pc={(gtu(cc,0x0))?L521:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 388
;;   new tail = 391

;;   ======================================================
;;   -- basic block 48 from 393 to 398 -- before reload
;;   ======================================================

;;	  0-->   393 r0=r191                           :cortex_a8_default
;;	  1-->   394 {r0=asm_operands;r2=asm_operands;c:nothing
;;	  2-->   397 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->   395 r147=r2                           :cortex_a8_default
;;	  4-->   398 pc={(cc==0x0)?L403:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 393
;;   new tail = 398

;;   ======================================================
;;   -- basic block 49 from 400 to 611 -- before reload
;;   ======================================================

;;	  0-->   400 r181=0xfffffffffffffff2           :cortex_a8_default
;;	  0-->   611 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 400
;;   new tail = 611

;;   ======================================================
;;   -- basic block 50 from 405 to 412 -- before reload
;;   ======================================================

;;	  0-->   405 r283=r145+0xc6                    :cortex_a8_default
;;	  2-->   408 r286=r283*0x4+r188                :cortex_a8_default
;;	  4-->   410 r148=[r286+0x4]                   :cortex_a8_load_store_1
;;	  6-->   411 cc=cmp(r148,0x0)                  :cortex_a8_default
;;	  8-->   412 pc={(cc!=0x0)?L432:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 405
;;   new tail = 412

;;   ======================================================
;;   -- basic block 51 from 414 to 419 -- before reload
;;   ======================================================

;;	  0-->   414 r0=r188                           :cortex_a8_default
;;	  0-->   415 r1=r146                           :cortex_a8_default
;;	  1-->   416 r0=call [`ptrace_hbp_create']     :cortex_a8_issue_branch
;;	  1-->   417 r148=r0                           :cortex_a8_default
;;	  2-->   418 cc=cmp(r148,0xfffffffffffff000)   :cortex_a8_default
;;	  4-->   419 pc={(leu(cc,0x0))?L424:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 414
;;   new tail = 419

;;   ======================================================
;;   -- basic block 52 from 421 to 613 -- before reload
;;   ======================================================

;;	  0-->   421 r181=r148                         :cortex_a8_default
;;	  0-->   613 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 421
;;   new tail = 613

;;   ======================================================
;;   -- basic block 53 from 431 to 431 -- before reload
;;   ======================================================

;;	  0-->   431 [r286+0x4]=r148                   :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 431
;;   new tail = 431

;;   ======================================================
;;   -- basic block 54 from 437 to 444 -- before reload
;;   ======================================================

;;	  0-->   437 r0=sfp-0x50                       :cortex_a8_default
;;	  0-->   438 r1=r148+0x78                      :cortex_a8_default
;;	  1-->   439 r2=0x48                           :cortex_a8_default
;;	  2-->   440 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->   443 cc=cmp(zxt(r190,0x1,0x0),0x0)     :cortex_a8_default
;;	  4-->   444 pc={(cc==0x0)?L450:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 437
;;   new tail = 444

;;   ======================================================
;;   -- basic block 55 from 565 to 615 -- before reload
;;   ======================================================

;;	  0-->   566 [sfp-0x18]=r147                   :cortex_a8_load_store_1
;;	  0-->   565 r338=0x0                          :cortex_a8_default
;;	  1-->   567 [sfp-0x14]=r338                   :cortex_a8_load_store_1
;;	  1-->   615 pc=L512                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 565
;;   new tail = 615

;;   ======================================================
;;   -- basic block 56 from 570 to 493 -- before reload
;;   ======================================================

;;	  0-->   570 r184=0x0                          :cortex_a8_default
;;	  0-->   461 r306=zxt(r147,0x2,0x1)            :cortex_a8_default
;;	  1-->   458 zxt(r184,0x1,0x1f)=r147           :cortex_a8_default
;;	  1-->   469 r312=zxt(r147,0x2,0x3)            :cortex_a8_default
;;	  2-->   466 zxt(r184,0x2,0x1d)=r306           :cortex_a8_default
;;	  2-->   475 r133=r147 0>>0x5                  :cortex_a8_default
;;	  3-->   474 zxt(r184,0x2,0x1b)=r312           :cortex_a8_default
;;	  3-->   479 r319=zxt(r147,0x1,0x16)           :cortex_a8_default
;;	  4-->   476 zxt(r184,0x8,0x13)=r133           :cortex_a8_default
;;	  4-->   488 r1=sfp-0x4                        :cortex_a8_default
;;	  5-->   484 zxt(r184,0x1,0x9)=r319            :cortex_a8_default
;;	  5-->   489 r2=sfp-0x8                        :cortex_a8_default
;;	  6-->   487 r0=r184                           :cortex_a8_default
;;	  7-->   490 r0=call [`arch_bp_generic_fields']:cortex_a8_issue_branch
;;	 39-->   492 {cc=cmp(r0,0x0);r181=r0;}         :cortex_a8_default
;;	 41-->   493 pc={(cc!=0x0)?L524:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 570
;;   new tail = 493

;;   ======================================================
;;   -- basic block 57 from 495 to 498 -- before reload
;;   ======================================================

;;	  0-->   495 r143=[sfp-0x8]                    :cortex_a8_load_store_1
;;	  2-->   496 r144=r146&r143                    :cortex_a8_default
;;	  3-->   497 cc=cmp(r144,r143)                 :cortex_a8_default
;;	  5-->   498 pc={(cc!=0x0)?L521:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 495
;;   new tail = 498

;;   ======================================================
;;   -- basic block 58 from 500 to 511 -- before reload
;;   ======================================================

;;	  0-->   509 r333=[sfp-0x28]                   :cortex_a8_load_store_1
;;	  0-->   507 {r332=r184>=0x0;clobber cc;}      :cortex_a8_default
;;	  1-->   500 r326=[sfp-0x4]                    :cortex_a8_load_store_1
;;	  2-->   510 zxt(r333#0,0x1,0x0)=r332          :cortex_a8_default
;;	  2-->   503 [sfp-0x1c]=r144                   :cortex_a8_load_store_1
;;	  3-->   511 [sfp-0x28]=r333                   :cortex_a8_load_store_1
;;	  3-->   501 r327=sxn(r326)                    :cortex_a8_default
;;	  4-->   502 [sfp-0x10]=r327                   :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 500
;;   new tail = 511

;;   ======================================================
;;   -- basic block 59 from 515 to 617 -- before reload
;;   ======================================================

;;	  0-->   515 r0=r148                           :cortex_a8_default
;;	  0-->   516 r1=sfp-0x50                       :cortex_a8_default
;;	  1-->   517 r0=call [`modify_user_hw_breakpoin:cortex_a8_issue_branch
;;	  1-->   518 r181=r0                           :cortex_a8_default
;;	  2-->   617 pc=L524                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 515
;;   new tail = 617

;;   ======================================================
;;   -- basic block 60 from 523 to 523 -- before reload
;;   ======================================================

;;	  0-->   523 r181=0xffffffffffffffea           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 523
;;   new tail = 523

;;   ======================================================
;;   -- basic block 61 from 526 to 619 -- before reload
;;   ======================================================

;;	  0-->   526 r0=r188                           :cortex_a8_default
;;	  1-->   527 call [`ptrace_put_breakpoints']   :cortex_a8_issue_branch
;;	  1-->   619 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 526
;;   new tail = 619

;;   ======================================================
;;   -- basic block 62 from 532 to 621 -- before reload
;;   ======================================================

;;	  0-->   532 r0=r188                           :cortex_a8_default
;;	  0-->   533 r1=r189                           :cortex_a8_default
;;	  1-->   534 r2=r190                           :cortex_a8_default
;;	  1-->   535 r3=r191                           :cortex_a8_default
;;	  2-->   536 r0=call [`ptrace_request']        :cortex_a8_issue_branch
;;	  2-->   537 r181=r0                           :cortex_a8_default
;;	  3-->   621 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 532
;;   new tail = 621

;;   ======================================================
;;   -- basic block 63 from 542 to 623 -- before reload
;;   ======================================================

;;	  0-->   542 r181=0xfffffffffffffffd           :cortex_a8_default
;;	  0-->   623 pc=L548                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 542
;;   new tail = 623

;;   ======================================================
;;   -- basic block 64 from 547 to 547 -- before reload
;;   ======================================================

;;	  0-->   547 r181=0xfffffffffffffffb           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 547
;;   new tail = 547

;;   ======================================================
;;   -- basic block 65 from 554 to 560 -- before reload
;;   ======================================================

;;	  0-->   554 r0=r181                           :cortex_a8_default
;;	  0-->   560 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 554
;;   new tail = 560


;; Procedure interblock/speculative motions == 0/0 




arch_ptrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={48d,48u} r1={33d,13u} r2={35d,15u} r3={28d,8u} r11={1d,65u} r12={24d} r13={1d,103u} r14={25d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={58d,27u} r25={1d,77u} r26={1d,64u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} r133={1d,1u} r135={2d,1u} r136={2d,1u} r137={1d,1u} r139={1d,1u} r141={2d,3u} r143={1d,2u} r144={1d,2u} r145={1d,2u} r146={2d,2u} r147={1d,6u} r148={2d,6u} r151={1d,1u} r152={4d,1u} r153={1d,2u} r154={1d,4u} r158={1d,1u} r159={1d,1u} r161={2d,4u} r162={1d} r164={2d,4u} r165={1d} r167={2d,4u} r168={1d} r170={2d,4u} r171={1d} r173={2d,4u} r174={1d} r176={2d,4u} r177={1d} r179={2d,1u} r181={21d,1u} r184={6d,7u} r185={2d,7u} r188={1d,18u} r189={1d,2u} r190={1d,17u} r191={1d,19u} r192={1d,2u} r195={2d,2u} r201={1d,2u} r202={1d,1u} r203={1d,1u} r205={1d,1u} r206={1d,1u,1d} r208={2d,2u} r210={1d,1u} r214={2d,2u} r216={1d,1u} r220={2d,2u} r222={1d,1u} r227={2d,2u} r229={1d,1u} r234={1d,1u} r235={1d,1u} r236={2d,2u} r238={1d,1u} r243={2d,2u} r245={1d,1u} r250={1d,1u} r252={1d,1u} r254={1d,1u} r255={1d,1u} r259={1d,1u} r266={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r274={1d,1u} r276={1d,1u} r278={1d,1u} r280={1d,1u} r282={1d,1u} r283={1d,1u} r286={1d,2u} r306={1d,1u} r312={1d,1u} r319={1d,1u} r326={1d,1u} r327={1d,1u} r332={1d,1u} r333={2d,2u} r338={1d,1u} 
;;    total ref usage 3199{2587d,611u,1e} in 300{280 regular + 20 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 188 189 190 191 192
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 188 189 190 191 192
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 6 2 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 189 [ request ])
        (reg:SI 1 r1 [ request ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ request ])
        (nil)))

(insn 2 3 10 2 arch/arm/kernel/ptrace.c:790 (set (reg/v/f:SI 188 [ child ])
        (reg:SI 0 r0 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ child ])
        (nil)))

(insn 10 2 4 2 arch/arm/kernel/ptrace.c:794 (set (reg:SI 192)
        (plus:SI (reg/v:SI 189 [ request ])
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (nil))

(insn 4 10 5 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 190 [ addr ])
        (reg:SI 2 r2 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ addr ])
        (nil)))

(insn 5 4 11 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 191 [ data ])
        (reg:SI 3 r3 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ data ])
        (nil)))

(jump_insn 11 5 12 2 arch/arm/kernel/ptrace.c:794 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 192)
                        (const_int 27 [0x1b]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 192)
                                (const_int 4 [0x4]))
                            (label_ref 12)) [0 S4 A32])
                    (label_ref 530)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 12))
        ]) 265 {arm_casesi_internal} (expr_list:REG_DEAD (reg:SI 192)
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (insn_list:REG_LABEL_TARGET 530 (nil)))))
;; End of basic block 2 -> ( 62 3 8 9 11 13 15 17 18 19 21 23 41)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 189 190 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 189 190 191


;; Succ edge  62 [7.7%] 
;; Succ edge  3 [7.7%] 
;; Succ edge  8 [7.7%] 
;; Succ edge  9 [7.7%] 
;; Succ edge  11 [7.7%] 
;; Succ edge  13 [7.7%] 
;; Succ edge  15 [7.7%] 
;; Succ edge  17 [7.7%] 
;; Succ edge  18 [7.7%] 
;; Succ edge  19 [7.7%] 
;; Succ edge  21 [7.7%] 
;; Succ edge  23 [7.7%] 
;; Succ edge  41 [7.7%] 

;; Insn is not within a basic block
(code_label 12 11 13 108 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 13 12 14 arch/arm/kernel/ptrace.c:794 (addr_vec:SI [
            (label_ref:SI 15)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 54)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 63)
            (label_ref:SI 86)
            (label_ref:SI 109)
            (label_ref:SI 133)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 157)
            (label_ref:SI 166)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 173)
            (label_ref:SI 197)
            (label_ref:SI 221)
            (label_ref:SI 358)
        ]) -1 (nil))

(barrier 14 13 15)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc] 195 201
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc] 195 201
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 15 14 16 3 96 "" [1 uses])

(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(note 18 17 21 3 NOTE_INSN_DELETED)

(note 21 18 22 3 NOTE_INSN_DELETED)

(note 22 21 23 3 NOTE_INSN_DELETED)

(note 23 22 25 3 NOTE_INSN_DELETED)

(note 25 23 26 3 NOTE_INSN_DELETED)

(note 26 25 638 3 NOTE_INSN_DELETED)

(insn 638 26 639 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 190 [ addr ])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 195)
                (and:SI (reg/v:SI 190 [ addr ])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 639 638 27 3 arch/arm/kernel/ptrace.c:258 (set (reg:SI 195)
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 195)
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn 27 639 28 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:SI 201)
                (ior:SI (geu:SI (reg/v:SI 190 [ addr ])
                        (const_int 296 [0x128]))
                    (reg:SI 195)))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 28 27 29 3 arch/arm/kernel/ptrace.c:258 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 201)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 3 arch/arm/kernel/ptrace.c:258 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 64 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191 201
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191 201


;; Succ edge  64 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 4 arch/arm/kernel/ptrace.c:268 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 190 [ addr ])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 32 31 33 4 arch/arm/kernel/ptrace.c:268 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191 201


;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u34(11){ }u35(13){ }u36(25){ }u37(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191 201
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 201
;; lr  def 	 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191 201
;; live  gen 	 179
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 34 33 571 5 arch/arm/kernel/ptrace.c:261 (set (reg/v:SI 179 [ tmp ])
        (reg:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 201)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 571 34 572 5 (set (pc)
        (label_ref 46)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191


;; Succ edge  7 [100.0%] 

(barrier 572 571 37)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u39(11){ }u40(13){ }u41(25){ }u42(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; lr  def 	 179 202 203 205 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 179 202 203 205 206
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 37 572 38 6 110 "" [1 uses])

(note 38 37 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 41 38 39 6 NOTE_INSN_DELETED)

(insn 39 41 42 6 arch/arm/kernel/ptrace.c:160 (set (reg/f:SI 202 [ <variable>.stack ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 188 [ child ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 42 39 40 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 205)
        (and:SI (reg/v:SI 190 [ addr ])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (nil)))

(insn 40 42 43 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 203)
        (const_int 8112 [0x1fb0])) 167 {*arm_movsi_insn} (nil))

(insn 43 40 45 6 arch/arm/kernel/ptrace.c:160 (set (reg:SI 206)
        (plus:SI (reg/f:SI 202 [ <variable>.stack ])
            (reg:SI 205))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 205)
        (expr_list:REG_DEAD (reg/f:SI 202 [ <variable>.stack ])
            (nil))))

(insn 45 43 46 6 arch/arm/kernel/ptrace.c:160 (set (reg/v:SI 179 [ tmp ])
        (mem/s/j:SI (plus:SI (reg:SI 206)
                (reg:SI 203)) [0 <variable>.uregs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 206)
        (expr_list:REG_DEAD (reg:SI 203)
            (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (reg:SI 206)
                        (const_int 8112 [0x1fb0])) [0 <variable>.uregs S4 A32])
                (nil)))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 179 191
;; live  gen 	 0 [r0] 2 [r2] 181
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 46 45 47 7 111 "" [1 uses])

(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 7 arch/arm/kernel/ptrace.c:271 (set (reg/v:SI 2 r2 [ __r2 ])
        (reg/v:SI 179 [ tmp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 179 [ tmp ])
        (nil)))

(insn 49 48 50 7 arch/arm/kernel/ptrace.c:271 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 50 49 51 7 arch/arm/kernel/ptrace.c:271 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592343))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(insn 51 50 573 7 arch/arm/kernel/ptrace.c:271 discrim 6 (set (reg/v:SI 181 [ ret ])
        (reg/v:SI 0 r0 [ __e ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(jump_insn 573 51 574 7 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 574 573 54)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 181
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 54 574 55 8 97 "" [1 uses])

(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 57 56 58 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 1 r1)
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (nil)))

(insn 58 57 59 8 arch/arm/kernel/ptrace.c:800 (set (reg:SI 2 r2)
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(call_insn 59 58 60 8 arch/arm/kernel/ptrace.c:800 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_write_user") [flags 0x3] <function_decl 0x1155b480 ptrace_write_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 60 59 575 8 arch/arm/kernel/ptrace.c:800 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 575 60 576 8 arch/arm/kernel/ptrace.c:801 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 576 575 63)

;; Start of basic block ( 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 176 177 208 210
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 176 177 208 210
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 63 576 64 9 98 "" [1 uses])

(note 64 63 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 66 64 635 9 NOTE_INSN_DELETED)

(insn 635 66 636 9 include/linux/regset.h:338 (set (reg:SI 208)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 636 635 68 9 include/linux/regset.h:338 (set (reg:SI 208)
        (and:SI (reg:SI 208)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 68 636 640 9 include/linux/regset.h:338 (set (reg:SI 210 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 208)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 640 68 69 9 include/linux/regset.h:338 (set (reg/v:SI 176 [ flag ])
        (reg:SI 210 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 210 [ <variable>.addr_limit ])
        (nil)))

(insn 69 640 70 9 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 176 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 72 [0x48])
                        (reg/v:SI 176 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 177 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 72 [0x48])
                        (reg/v:SI 176 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 177 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 70 69 71 9 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 176 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 71 70 72 9 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 9 -> ( 64 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 176 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 176 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  10 [29.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  9 [29.0%]  (fallthru)
(note 72 71 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 78 72 80 10 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 80 78 79 10 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 176 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 176 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 79 80 81 10 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 81 79 77 10 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 77 81 76 10 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 76 77 82 10 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 176 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 82 76 83 10 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_get") [flags 0x3] <function_decl 0x1155be80 gpr_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 83 82 577 10 include/linux/regset.h:341 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 577 83 578 10 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 578 577 86)

;; Start of basic block ( 2) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 173 174 214 216
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 173 174 214 216
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 86 578 87 11 99 "" [1 uses])

(note 87 86 89 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 89 87 633 11 NOTE_INSN_DELETED)

(insn 633 89 634 11 include/linux/regset.h:361 (set (reg:SI 214)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 634 633 91 11 include/linux/regset.h:361 (set (reg:SI 214)
        (and:SI (reg:SI 214)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 91 634 641 11 include/linux/regset.h:361 (set (reg:SI 216 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 214)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 214)
        (nil)))

(insn 641 91 92 11 include/linux/regset.h:361 (set (reg/v:SI 173 [ flag ])
        (reg:SI 216 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 216 [ <variable>.addr_limit ])
        (nil)))

(insn 92 641 93 11 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 173 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 72 [0x48])
                        (reg/v:SI 173 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 174 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 72 [0x48])
                        (reg/v:SI 173 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 174 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 93 92 94 11 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 173 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 94 93 95 11 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 11 -> ( 64 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 173 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 173 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  12 [29.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 95 94 101 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 101 95 103 12 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 103 101 102 12 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 173 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 173 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 102 103 104 12 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(insn 104 102 100 12 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 100 104 99 12 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 99 100 105 12 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 173 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 105 99 106 12 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_set") [flags 0x3] <function_decl 0x1155bf80 gpr_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 106 105 579 12 include/linux/regset.h:364 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 579 106 580 12 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 580 579 109)

;; Start of basic block ( 2) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u128(11){ }u129(13){ }u130(25){ }u131(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 170 171 220 222
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 170 171 220 222
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 109 580 110 13 100 "" [1 uses])

(note 110 109 112 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 112 110 631 13 NOTE_INSN_DELETED)

(insn 631 112 632 13 include/linux/regset.h:338 (set (reg:SI 220)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 632 631 114 13 include/linux/regset.h:338 (set (reg:SI 220)
        (and:SI (reg:SI 220)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 114 632 642 13 include/linux/regset.h:338 (set (reg:SI 222 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 220)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 220)
        (nil)))

(insn 642 114 115 13 include/linux/regset.h:338 (set (reg/v:SI 170 [ flag ])
        (reg:SI 222 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 222 [ <variable>.addr_limit ])
        (nil)))

(insn 115 642 116 13 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 170 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 140 [0x8c])
                        (reg/v:SI 170 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 171 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 140 [0x8c])
                        (reg/v:SI 170 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 171 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 116 115 117 13 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 170 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 117 116 118 13 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 13 -> ( 64 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 170 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 170 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  14 [29.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u140(11){ }u141(13){ }u142(25){ }u143(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 170 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  13 [29.0%]  (fallthru)
(note 118 117 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 125 118 127 14 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 127 125 126 14 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 170 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 170 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 126 127 128 14 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 128 126 124 14 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn 124 128 123 14 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 123 124 129 14 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 170 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 129 123 130 14 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_get") [flags 0x3] <function_decl 0x11582080 fpa_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 130 129 581 14 include/linux/regset.h:341 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 581 130 582 14 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 582 581 133)

;; Start of basic block ( 2) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u156(11){ }u157(13){ }u158(25){ }u159(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 167 168 227 229
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 167 168 227 229
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 133 582 134 15 101 "" [1 uses])

(note 134 133 136 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 136 134 629 15 NOTE_INSN_DELETED)

(insn 629 136 630 15 include/linux/regset.h:361 (set (reg:SI 227)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 630 629 138 15 include/linux/regset.h:361 (set (reg:SI 227)
        (and:SI (reg:SI 227)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 138 630 643 15 include/linux/regset.h:361 (set (reg:SI 229 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 227)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 227)
        (nil)))

(insn 643 138 139 15 include/linux/regset.h:361 (set (reg/v:SI 167 [ flag ])
        (reg:SI 229 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 229 [ <variable>.addr_limit ])
        (nil)))

(insn 139 643 140 15 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 167 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 140 [0x8c])
                        (reg/v:SI 167 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 168 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 140 [0x8c])
                        (reg/v:SI 167 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 168 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 140 139 141 15 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 167 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 141 140 142 15 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 15 -> ( 64 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 167 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 167 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  16 [29.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  15 [29.0%]  (fallthru)
(note 142 141 149 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 149 142 151 16 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 151 149 150 16 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 167 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 167 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 150 151 152 16 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(insn 152 150 148 16 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(insn 148 152 147 16 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 147 148 153 16 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 167 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 153 147 154 16 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_set") [flags 0x3] <function_decl 0x11582180 fpa_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 154 153 583 16 include/linux/regset.h:364 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 583 154 584 16 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 584 583 157)

;; Start of basic block ( 2) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u184(11){ }u185(13){ }u186(25){ }u187(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 181 234
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 2 [r2] 181 234
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 157 584 158 17 102 "" [1 uses])

(note 158 157 159 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 159 158 161 17 arch/arm/kernel/ptrace.c:842 (set (reg/f:SI 234 [ <variable>.stack ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 188 [ child ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 161 159 160 17 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 160 161 162 17 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 2 r2 [ __r2 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 234 [ <variable>.stack ])
                (const_int 96 [0x60])) [0 <variable>.tp_value+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 234 [ <variable>.stack ])
        (nil)))

(insn 162 160 163 17 arch/arm/kernel/ptrace.c:842 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592319))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(insn 163 162 585 17 arch/arm/kernel/ptrace.c:842 discrim 6 (set (reg/v:SI 181 [ ret ])
        (reg/v:SI 0 r0 [ __e ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(jump_insn 585 163 586 17 arch/arm/kernel/ptrace.c:844 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 586 585 166)

;; Start of basic block ( 2) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u194(11){ }u195(13){ }u196(25){ }u197(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  def 	 181 235
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 181 235
;; live  kill	

;; Pred edge  2 [7.7%] 
(code_label 166 586 167 18 103 "" [1 uses])

(note 167 166 168 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 168 167 170 18 arch/arm/kernel/ptrace.c:847 (set (reg/f:SI 235 [ <variable>.stack ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 188 [ child ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 170 168 169 18 arch/arm/kernel/ptrace.c:848 (set (reg/v:SI 181 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 169 170 587 18 arch/arm/kernel/ptrace.c:847 (set (mem/s/j:SI (plus:SI (reg/f:SI 235 [ <variable>.stack ])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 235 [ <variable>.stack ])
        (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
            (nil))))

(jump_insn 587 169 588 18 arch/arm/kernel/ptrace.c:849 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 588 587 173)

;; Start of basic block ( 2) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u201(11){ }u202(13){ }u203(25){ }u204(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 164 165 236 238
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 164 165 236 238
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 173 588 174 19 104 "" [1 uses])

(note 174 173 176 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 176 174 627 19 NOTE_INSN_DELETED)

(insn 627 176 628 19 include/linux/regset.h:338 (set (reg:SI 236)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 628 627 178 19 include/linux/regset.h:338 (set (reg:SI 236)
        (and:SI (reg:SI 236)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 178 628 644 19 include/linux/regset.h:338 (set (reg:SI 238 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 236)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 236)
        (nil)))

(insn 644 178 179 19 include/linux/regset.h:338 (set (reg/v:SI 164 [ flag ])
        (reg:SI 238 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 238 [ <variable>.addr_limit ])
        (nil)))

(insn 179 644 180 19 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 164 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 260 [0x104])
                        (reg/v:SI 164 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 165 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 260 [0x104])
                        (reg/v:SI 164 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 165 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 180 179 181 19 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 164 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 181 180 182 19 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 19 -> ( 64 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  20 [29.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u213(11){ }u214(13){ }u215(25){ }u216(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  19 [29.0%]  (fallthru)
(note 182 181 189 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 189 182 191 20 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 191 189 190 20 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 164 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 164 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 190 191 192 20 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 192 190 188 20 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn 188 192 187 20 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 187 188 193 20 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 164 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 193 187 194 20 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get") [flags 0x3] <function_decl 0x11582280 vfp_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 194 193 589 20 include/linux/regset.h:341 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 589 194 590 20 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 590 589 197)

;; Start of basic block ( 2) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u229(11){ }u230(13){ }u231(25){ }u232(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 24 [cc] 161 162 243 245
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 161 162 243 245
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 197 590 198 21 105 "" [1 uses])

(note 198 197 200 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 200 198 625 21 NOTE_INSN_DELETED)

(insn 625 200 626 21 include/linux/regset.h:361 (set (reg:SI 243)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 626 625 202 21 include/linux/regset.h:361 (set (reg:SI 243)
        (and:SI (reg:SI 243)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 202 626 645 21 include/linux/regset.h:361 (set (reg:SI 245 [ <variable>.addr_limit ])
        (mem/s/j:SI (plus:SI (reg:SI 243)
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 243)
        (nil)))

(insn 645 202 203 21 include/linux/regset.h:361 (set (reg/v:SI 161 [ flag ])
        (reg:SI 245 [ <variable>.addr_limit ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 245 [ <variable>.addr_limit ])
        (nil)))

(insn 203 645 204 21 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 161 [ flag ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 191 [ data ])
                        (const_int 260 [0x104])
                        (reg/v:SI 161 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 162 [ roksum ])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 191 [ data ])
                        (const_int 260 [0x104])
                        (reg/v:SI 161 [ flag ])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg/v:SI 162 [ roksum ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 204 203 205 21 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 161 [ flag ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 205 204 206 21 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 21 -> ( 64 22)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 161 188 191
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 161 188 191


;; Succ edge  64 [71.0%] 
;; Succ edge  22 [29.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u241(11){ }u242(13){ }u243(25){ }u244(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%]  (fallthru)
(note 206 205 213 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 213 206 215 22 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 215 213 214 22 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 161 [ flag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 161 [ flag ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 214 215 216 22 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(insn 216 214 212 22 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(insn 212 216 211 22 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 211 212 217 22 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 161 [ flag ])) 167 {*arm_movsi_insn} (nil))

(call_insn 217 211 218 22 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_set") [flags 0x3] <function_decl 0x11582380 vfp_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 218 217 591 22 include/linux/regset.h:364 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 591 218 592 22 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 592 591 221)

;; Start of basic block ( 2) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u257(11){ }u258(13){ }u259(25){ }u260(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 221 592 222 23 106 "" [1 uses])

(note 222 221 225 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 225 222 223 23 NOTE_INSN_DELETED)

(insn 223 225 224 23 arch/arm/kernel/ptrace.c:879 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (nil))

(call_insn 224 223 226 23 arch/arm/kernel/ptrace.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 226 224 227 23 arch/arm/kernel/ptrace.c:879 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 227 226 228 23 arch/arm/kernel/ptrace.c:879 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 23 -> ( 63 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  63 [19.1%] 
;; Succ edge  24 [80.9%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u267(11){ }u268(13){ }u269(25){ }u270(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  23 [80.9%]  (fallthru)
(note 228 227 230 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 230 228 231 24 arch/arm/kernel/ptrace.c:472 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 190 [ addr ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 231 230 232 24 arch/arm/kernel/ptrace.c:472 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  25 [29.0%]  (fallthru)
;; Succ edge  26 [71.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u273(11){ }u274(13){ }u275(25){ }u276(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 139 152 158 159 250 252 254
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 137 139 152 158 159 250 252 254
;; live  kill	 14 [lr]

;; Pred edge  24 [29.0%]  (fallthru)
(note 232 231 243 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(note 243 232 245 25 NOTE_INSN_DELETED)

(note 245 243 247 25 NOTE_INSN_DELETED)

(note 247 245 250 25 NOTE_INSN_DELETED)

(note 250 247 233 25 NOTE_INSN_DELETED)

(insn 233 250 234 25 arch/arm/kernel/ptrace.c:432 (set (reg:SI 0 r0)
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 234 233 235 25 arch/arm/kernel/ptrace.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 235 234 236 25 arch/arm/kernel/ptrace.c:432 (set (reg:SI 159 [ D.28052 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 236 235 237 25 arch/arm/kernel/ptrace.c:433 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 237 236 238 25 arch/arm/kernel/ptrace.c:433 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 238 237 239 25 arch/arm/kernel/ptrace.c:433 (set (reg:SI 158 [ D.28053 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 239 238 240 25 arch/arm/kernel/ptrace.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_debug_arch") [flags 0x41] <function_decl 0x10ad9400 arch_get_debug_arch>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 240 239 242 25 arch/arm/kernel/ptrace.c:434 (set (reg:SI 250)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 242 240 248 25 arch/arm/kernel/ptrace.c:435 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_max_wp_len") [flags 0x41] <function_decl 0x10ad9480 arch_get_max_wp_len>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 248 242 251 25 arch/arm/kernel/ptrace.c:441 (set (reg:SI 252 [ D.28053 ])
        (zero_extend:SI (subreg:QI (reg:SI 158 [ D.28053 ]) 0))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:SI 158 [ D.28053 ])
        (nil)))

(insn 251 248 246 25 arch/arm/kernel/ptrace.c:443 (set (reg:SI 254 [ D.28052 ])
        (zero_extend:SI (subreg:QI (reg:SI 159 [ D.28052 ]) 0))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:SI 159 [ D.28052 ])
        (nil)))

(insn 246 251 249 25 arch/arm/kernel/ptrace.c:439 (set (reg/v:SI 139 [ reg.860 ])
        (ior:SI (ashift:SI (reg:SI 250)
                (const_int 8 [0x8]))
            (reg:SI 0 r0))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 250)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil))))

(insn 249 246 252 25 arch/arm/kernel/ptrace.c:441 (set (reg/v:SI 137 [ reg.862 ])
        (ior:SI (ashift:SI (reg/v:SI 139 [ reg.860 ])
                (const_int 8 [0x8]))
            (reg:SI 252 [ D.28053 ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 252 [ D.28053 ])
        (expr_list:REG_DEAD (reg/v:SI 139 [ reg.860 ])
            (nil))))

(insn 252 249 593 25 arch/arm/kernel/ptrace.c:443 (set (reg/v:SI 152 [ reg ])
        (ior:SI (ashift:SI (reg/v:SI 137 [ reg.862 ])
                (const_int 8 [0x8]))
            (reg:SI 254 [ D.28052 ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 254 [ D.28052 ])
        (expr_list:REG_DEAD (reg/v:SI 137 [ reg.862 ])
            (nil))))

(jump_insn 593 252 594 25 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 39)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191


;; Succ edge  39 [100.0%] 

(barrier 594 593 255)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u299(11){ }u300(13){ }u301(25){ }u302(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	
;; live  kill	

;; Pred edge  24 [71.0%] 
(code_label 255 594 256 26 114 "" [1 uses])

(note 256 255 258 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(jump_insn 258 256 259 26 arch/arm/kernel/ptrace.c:358 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 263)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil))))
;; End of basic block 26 -> ( 28 27)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  28 [27.0%] 
;; Succ edge  27 [73.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u304(11){ }u305(13){ }u306(25){ }u307(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 136
;; live  kill	

;; Pred edge  26 [73.0%]  (fallthru)
(note 259 258 260 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 595 27 arch/arm/kernel/ptrace.c:358 (set (reg/v:SI 136 [ num.864 ])
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 595 260 596 27 (set (pc)
        (label_ref 266)) 242 {*arm_jump} (nil))
;; End of basic block 27 -> ( 29)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191


;; Succ edge  29 [100.0%] 

(barrier 596 595 263)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u309(11){ }u310(13){ }u311(25){ }u312(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 136
;; live  kill	

;; Pred edge  26 [27.0%] 
(code_label 263 596 264 28 116 "" [1 uses])

(note 264 263 265 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 265 264 266 28 arch/arm/kernel/ptrace.c:359 (set (reg/v:SI 136 [ num.864 ])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 190 [ addr ]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191


;; Succ edge  29 [100.0%]  (fallthru)

;; Start of basic block ( 28 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u314(11){ }u315(13){ }u316(25){ }u317(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 153 255
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 188 190 191
;; live  gen 	 24 [cc] 153 255
;; live  kill	

;; Pred edge  28 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
(code_label 266 265 267 29 117 "" [1 uses])

(note 267 266 268 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 268 267 269 29 arch/arm/kernel/ptrace.c:360 (set (reg:SI 255)
        (plus:SI (reg/v:SI 136 [ num.864 ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 136 [ num.864 ])
        (nil)))

(insn 269 268 270 29 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 153 [ idx ])
        (ashiftrt:SI (reg:SI 255)
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 255)
        (nil)))

(insn 270 269 271 29 arch/arm/kernel/ptrace.c:476 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 153 [ idx ])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 271 270 272 29 arch/arm/kernel/ptrace.c:476 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u322(11){ }u323(13){ }u324(25){ }u325(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 272 271 273 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 273 272 597 30 arch/arm/kernel/ptrace.c:477 (set (reg/v:SI 181 [ ret ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(jump_insn 597 273 598 30 (set (pc)
        (label_ref 352)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  40 [100.0%] 

(barrier 598 597 276)

;; Start of basic block ( 29) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u326(11){ }u327(13){ }u328(25){ }u329(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188
;; lr  def 	 24 [cc] 154 259
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 188 190 191
;; live  gen 	 24 [cc] 154 259
;; live  kill	

;; Pred edge  29 [50.0%] 
(code_label 276 598 277 31 118 "" [1 uses])

(note 277 276 278 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 278 277 280 31 NOTE_INSN_DELETED)

(note 280 278 281 31 NOTE_INSN_DELETED)

(insn 281 280 283 31 arch/arm/kernel/ptrace.c:481 (set (reg:SI 259)
        (plus:SI (mult:SI (reg/v:SI 153 [ idx ])
                (const_int 4 [0x4]))
            (reg/v/f:SI 188 [ child ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 153 [ idx ])
        (nil)))

(insn 283 281 284 31 arch/arm/kernel/ptrace.c:481 (set (reg/v/f:SI 154 [ bp ])
        (mem/s/f/j:SI (plus:SI (reg:SI 259)
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 259)
        (nil)))

(insn 284 283 285 31 arch/arm/kernel/ptrace.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 154 [ bp ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 285 284 286 31 arch/arm/kernel/ptrace.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191


;; Succ edge  32 [15.0%]  (fallthru)
;; Succ edge  33 [85.0%] 

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u337(11){ }u338(13){ }u339(25){ }u340(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; live  gen 	 152
;; live  kill	

;; Pred edge  31 [15.0%]  (fallthru)
(note 286 285 287 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 287 286 599 32 arch/arm/kernel/ptrace.c:483 (set (reg/v:SI 152 [ reg ])
        (reg/v/f:SI 154 [ bp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 154 [ bp ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 599 287 600 32 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 32 -> ( 39)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191


;; Succ edge  39 [100.0%] 

(barrier 600 599 290)

;; Start of basic block ( 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u342(11){ }u343(13){ }u344(25){ }u345(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 141 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 190 191
;; live  gen 	 141 185
;; live  kill	

;; Pred edge  31 [85.0%] 
(code_label 290 600 291 33 120 "" [1 uses])

(note 291 290 293 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 293 291 292 33 NOTE_INSN_DELETED)

(insn 292 293 294 33 arch/arm/kernel/ptrace.c:487 (set (reg/v:SI 185 [ arch_ctrl ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 154 [ bp ])
                (const_int 212 [0xd4])) [0 <variable>.hw.D.25978.D.25977.info.ctrl+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 294 292 601 33 arch/arm/kernel/ptrace.c:487 (set (reg:SI 141 [ arch_ctrl$len ])
        (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(jump_insn 601 294 602 33 (set (pc)
        (label_ref 301)) 242 {*arm_jump} (nil))
;; End of basic block 33 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191


;; Succ edge  35 [100.0%] 

(barrier 602 601 303)

;; Start of basic block ( 35) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u349(11){ }u350(13){ }u351(25){ }u352(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 141
;; live  kill	

;; Pred edge  35 [91.0%] 
(code_label 303 602 298 34 122 "" [1 uses])

(note 298 303 299 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 299 298 300 34 NOTE_INSN_DELETED)

(insn 300 299 301 34 arch/arm/kernel/ptrace.c:494 (set (reg:SI 141 [ arch_ctrl$len ])
        (lshiftrt:SI (reg:SI 141 [ arch_ctrl$len ])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 34 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191


;; Succ edge  35 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 34 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u355(11){ }u356(13){ }u357(25){ }u358(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  34 [100.0%]  (fallthru,dfs_back)
;; Pred edge  33 [100.0%] 
(code_label 301 300 302 35 121 "" [1 uses])

(note 302 301 304 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(note 304 302 305 35 NOTE_INSN_DELETED)

(insn 305 304 306 35 arch/arm/kernel/ptrace.c:493 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 141 [ arch_ctrl$len ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 306 305 307 35 arch/arm/kernel/ptrace.c:493 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 35 -> ( 34 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191


;; Succ edge  34 [91.0%] 
;; Succ edge  36 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u362(11){ }u363(13){ }u364(25){ }u365(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [9.0%]  (fallthru,loop_exit)
(note 307 306 308 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 308 307 309 36 NOTE_INSN_DELETED)

(insn 309 308 310 36 arch/arm/kernel/ptrace.c:496 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 190 [ addr ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (nil)))

(jump_insn 310 309 311 36 arch/arm/kernel/ptrace.c:496 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 315)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 36 -> ( 37 38)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 185 188 191


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u369(11){ }u370(13){ }u371(25){ }u372(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 188 191
;; live  gen 	 152
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 311 310 312 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 312 311 603 37 arch/arm/kernel/ptrace.c:497 (set (reg/v:SI 152 [ reg ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 154 [ bp ])
                (const_int 176 [0xb0])) [0 <variable>.attr.D.23452.bp_addr+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 154 [ bp ])
        (nil)))

(jump_insn 603 312 604 37 (set (pc)
        (label_ref 337)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 39)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191


;; Succ edge  39 [100.0%] 

(barrier 604 603 315)

;; Start of basic block ( 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u374(11){ }u375(13){ }u376(25){ }u377(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185
;; lr  def 	 152 266 269 270 271 274 276 278 280
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 185 188 191
;; live  gen 	 152 185 266 269 270 271 274 276 278 280
;; live  kill	

;; Pred edge  36 [50.0%] 
(code_label 315 604 316 38 123 "" [1 uses])

(note 316 315 319 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 319 316 321 38 NOTE_INSN_DELETED)

(note 321 319 322 38 NOTE_INSN_DELETED)

(note 322 321 326 38 NOTE_INSN_DELETED)

(note 326 322 327 38 NOTE_INSN_DELETED)

(note 327 326 329 38 NOTE_INSN_DELETED)

(note 329 327 331 38 NOTE_INSN_DELETED)

(note 331 329 333 38 NOTE_INSN_DELETED)

(note 333 331 335 38 NOTE_INSN_DELETED)

(note 335 333 317 38 NOTE_INSN_DELETED)

(insn 317 335 323 38 arch/arm/kernel/ptrace.c:497 (set (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg:SI 141 [ arch_ctrl$len ])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 141 [ arch_ctrl$len ])
        (nil)))

(insn 323 317 320 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 269)
        (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(insn 320 323 330 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 266)
        (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))) 124 {extzv_t2} (nil))

(insn 330 320 334 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 276)
        (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))) 124 {extzv_t2} (nil))

(insn 334 330 324 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 280)
        (zero_extract:SI (reg/v:SI 185 [ arch_ctrl ])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg/v:SI 185 [ arch_ctrl ])
        (nil)))

(insn 324 334 325 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 270)
        (ashift:SI (reg:SI 269)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 269)
        (nil)))

(insn 325 324 328 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 271)
        (ior:SI (ashift:SI (reg:SI 266)
                (const_int 22 [0x16]))
            (reg:SI 270))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 270)
        (expr_list:REG_DEAD (reg:SI 266)
            (nil))))

(insn 328 325 332 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 274)
        (ior:SI (lshiftrt:SI (reg/v:SI 185 [ arch_ctrl ])
                (const_int 31 [0x1f]))
            (reg:SI 271))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 271)
        (nil)))

(insn 332 328 336 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 278)
        (ior:SI (ashift:SI (reg:SI 276)
                (const_int 3 [0x3]))
            (reg:SI 274))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 276)
        (expr_list:REG_DEAD (reg:SI 274)
            (nil))))

(insn 336 332 337 38 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg/v:SI 152 [ reg ])
        (ior:SI (ashift:SI (reg:SI 280)
                (const_int 1 [0x1]))
            (reg:SI 278))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 280)
        (expr_list:REG_DEAD (reg:SI 278)
            (nil))))
;; End of basic block 38 -> ( 39)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191


;; Succ edge  39 [100.0%]  (fallthru)

;; Start of basic block ( 38 25 32 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u402(11){ }u403(13){ }u404(25){ }u405(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 191
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 14 [lr] 24 [cc] 151 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 188 191
;; live  gen 	 0 [r0] 2 [r2] 24 [cc] 151 181
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  38 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
;; Pred edge  32 [100.0%] 
;; Pred edge  37 [100.0%] 
(code_label 337 336 338 39 115 ("put") [3 uses])

(note 338 337 342 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 342 338 339 39 NOTE_INSN_DELETED)

(insn 339 342 340 39 arch/arm/kernel/ptrace.c:503 (set (reg/v:SI 2 r2 [ __r2 ])
        (reg/v:SI 152 [ reg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ reg ])
        (nil)))

(insn 340 339 341 39 arch/arm/kernel/ptrace.c:503 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 341 340 568 39 arch/arm/kernel/ptrace.c:503 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592350))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(insn 568 341 569 39 arch/arm/kernel/ptrace.c:504 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 0 r0 [ __e ])
                    (const_int 0 [0x0])))
            (set (reg:SI 151 [ D.28058 ])
                (reg/v:SI 0 r0 [ __e ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(insn 569 568 352 39 arch/arm/kernel/ptrace.c:504 (set (reg/v:SI 181 [ ret ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 151 [ D.28058 ])
            (const_int -14 [0xfffffffffffffff2]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:SI 151 [ D.28058 ])
        (expr_list:REG_DEAD (reg:CC 24 cc)
            (nil))))
;; End of basic block 39 -> ( 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  40 [100.0%]  (fallthru)

;; Start of basic block ( 39 30) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u414(11){ }u415(13){ }u416(25){ }u417(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  39 [100.0%]  (fallthru)
;; Pred edge  30 [100.0%] 
(code_label 352 569 353 40 119 ("out") [1 uses])

(note 353 352 354 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 354 353 355 40 arch/arm/kernel/ptrace.c:884 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(call_insn 355 354 605 40 arch/arm/kernel/ptrace.c:884 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 605 355 606 40 arch/arm/kernel/ptrace.c:885 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 40 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 606 605 358)

;; Start of basic block ( 2) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u421(11){ }u422(13){ }u423(25){ }u424(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 358 606 359 41 107 "" [1 uses])

(note 359 358 362 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 362 359 360 41 NOTE_INSN_DELETED)

(insn 360 362 361 41 arch/arm/kernel/ptrace.c:887 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (nil))

(call_insn 361 360 363 41 arch/arm/kernel/ptrace.c:887 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 363 361 364 41 arch/arm/kernel/ptrace.c:887 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 364 363 365 41 arch/arm/kernel/ptrace.c:887 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 41 -> ( 63 42)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  63 [19.1%] 
;; Succ edge  42 [80.9%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u431(11){ }u432(13){ }u433(25){ }u434(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  41 [80.9%]  (fallthru)
(note 365 364 367 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 367 365 368 42 arch/arm/kernel/ptrace.c:519 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 190 [ addr ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 368 367 369 42 arch/arm/kernel/ptrace.c:519 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 373)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 43 44)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  43 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u437(11){ }u438(13){ }u439(25){ }u440(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190
;; live  gen 	 181
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 369 368 370 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 370 369 607 43 arch/arm/kernel/ptrace.c:513 (set (reg/v:SI 181 [ ret ])
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 607 370 608 43 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 43 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  61 [100.0%] 

(barrier 608 607 373)

;; Start of basic block ( 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u442(11){ }u443(13){ }u444(25){ }u445(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	
;; live  kill	

;; Pred edge  42 [50.0%] 
(code_label 373 608 374 44 125 "" [1 uses])

(note 374 373 376 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(jump_insn 376 374 377 44 arch/arm/kernel/ptrace.c:521 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 382)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil))))
;; End of basic block 44 -> ( 46 45)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191


;; Succ edge  46 [27.0%] 
;; Succ edge  45 [73.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u447(11){ }u448(13){ }u449(25){ }u450(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 135 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 135 146
;; live  kill	

;; Pred edge  44 [73.0%]  (fallthru)
(note 377 376 378 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 378 377 379 45 arch/arm/kernel/ptrace.c:521 (set (reg/v:SI 135 [ num.865 ])
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 379 378 609 45 arch/arm/kernel/ptrace.c:524 (set (reg/v:SI 146 [ implied_type ])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(jump_insn 609 379 610 45 (set (pc)
        (label_ref 386)) 242 {*arm_jump} (nil))
;; End of basic block 45 -> ( 47)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191


;; Succ edge  47 [100.0%] 

(barrier 610 609 382)

;; Start of basic block ( 44) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u452(11){ }u453(13){ }u454(25){ }u455(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 190
;; lr  def 	 135 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 190 191
;; live  gen 	 135 146
;; live  kill	

;; Pred edge  44 [27.0%] 
(code_label 382 610 383 46 127 "" [1 uses])

(note 383 382 384 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 384 383 385 46 arch/arm/kernel/ptrace.c:359 (set (reg/v:SI 135 [ num.865 ])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 190 [ addr ]))) 28 {*arm_subsi3_insn} (nil))

(insn 385 384 386 46 arch/arm/kernel/ptrace.c:522 (set (reg/v:SI 146 [ implied_type ])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 46 -> ( 47)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191


;; Succ edge  47 [100.0%]  (fallthru)

;; Start of basic block ( 46 45) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u457(11){ }u458(13){ }u459(25){ }u460(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 145 282
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146 188 190 191
;; live  gen 	 24 [cc] 145 282
;; live  kill	

;; Pred edge  46 [100.0%]  (fallthru)
;; Pred edge  45 [100.0%] 
(code_label 386 385 387 47 128 "" [1 uses])

(note 387 386 388 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 388 387 389 47 arch/arm/kernel/ptrace.c:360 (set (reg:SI 282)
        (plus:SI (reg/v:SI 135 [ num.865 ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 135 [ num.865 ])
        (nil)))

(insn 389 388 390 47 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 145 [ idx ])
        (ashiftrt:SI (reg:SI 282)
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 282)
        (nil)))

(insn 390 389 391 47 arch/arm/kernel/ptrace.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ idx ])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 391 390 392 47 arch/arm/kernel/ptrace.c:527 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 47 -> ( 60 48)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191


;; Succ edge  60 [50.0%] 
;; Succ edge  48 [50.0%]  (fallthru)

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u465(11){ }u466(13){ }u467(25){ }u468(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 0 [r0] 2 [r2] 14 [lr] 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 188 190 191
;; live  gen 	 0 [r0] 2 [r2] 24 [cc] 147
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  47 [50.0%]  (fallthru)
(note 392 391 396 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 396 392 393 48 NOTE_INSN_DELETED)

(insn 393 396 394 48 arch/arm/kernel/ptrace.c:532 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(insn 394 393 397 48 arch/arm/kernel/ptrace.c:532 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (set (reg/v:SI 2 r2 [ __r2 ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=r") 1 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg:QI 14 lr)
            (nil))))

(insn 397 394 395 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [ __e ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(insn 395 397 398 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg/v:SI 147 [ user_val ])
        (reg/v:SI 2 r2 [ __r2 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (nil)))

(jump_insn 398 395 399 48 arch/arm/kernel/ptrace.c:532 discrim 5 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 403)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 48 -> ( 49 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190


;; Succ edge  49 [50.0%]  (fallthru)
;; Succ edge  50 [50.0%] 

;; Start of basic block ( 48) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u475(11){ }u476(13){ }u477(25){ }u478(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	

;; Pred edge  48 [50.0%]  (fallthru)
(note 399 398 400 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 400 399 611 49 arch/arm/kernel/ptrace.c:533 (set (reg/v:SI 181 [ ret ])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 611 400 612 49 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 49 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  61 [100.0%] 

(barrier 612 611 403)

;; Start of basic block ( 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u479(11){ }u480(13){ }u481(25){ }u482(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 188
;; lr  def 	 24 [cc] 148 283 286
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 146 147 188 190
;; live  gen 	 24 [cc] 148 283 286
;; live  kill	

;; Pred edge  48 [50.0%] 
(code_label 403 612 404 50 130 "" [1 uses])

(note 404 403 407 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(note 407 404 405 50 NOTE_INSN_DELETED)

(insn 405 407 408 50 arch/arm/kernel/ptrace.c:537 (set (reg:SI 283)
        (plus:SI (reg/v:SI 145 [ idx ])
            (const_int 198 [0xc6]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 145 [ idx ])
        (nil)))

(insn 408 405 410 50 arch/arm/kernel/ptrace.c:537 (set (reg:SI 286)
        (plus:SI (mult:SI (reg:SI 283)
                (const_int 4 [0x4]))
            (reg/v/f:SI 188 [ child ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 283)
        (nil)))

(insn 410 408 411 50 arch/arm/kernel/ptrace.c:537 (set (reg/v/f:SI 148 [ bp ])
        (mem/s/f/j:SI (plus:SI (reg:SI 286)
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 411 410 412 50 arch/arm/kernel/ptrace.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 148 [ bp ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 412 411 413 50 arch/arm/kernel/ptrace.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 432)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 50 -> ( 51 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286


;; Succ edge  51 [6.7%]  (fallthru)
;; Succ edge  54 [93.3%] 

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u490(11){ }u491(13){ }u492(25){ }u493(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 188 190 286
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 188 190 286
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 148
;; live  kill	 14 [lr]

;; Pred edge  50 [6.7%]  (fallthru)
(note 413 412 414 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 414 413 415 51 arch/arm/kernel/ptrace.c:539 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (nil))

(insn 415 414 416 51 arch/arm/kernel/ptrace.c:539 (set (reg:SI 1 r1)
        (reg/v:SI 146 [ implied_type ])) 167 {*arm_movsi_insn} (nil))

(call_insn 416 415 417 51 arch/arm/kernel/ptrace.c:539 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_hbp_create") [flags 0x3] <function_decl 0x1155bb80 ptrace_hbp_create>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 417 416 418 51 arch/arm/kernel/ptrace.c:539 (set (reg/v/f:SI 148 [ bp ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 418 417 419 51 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 148 [ bp ])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 419 418 420 51 include/linux/err.h:34 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 424)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 51 -> ( 52 53)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286


;; Succ edge  52 [0.0%]  (fallthru)
;; Succ edge  53 [100.0%] 

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u502(11){ }u503(13){ }u504(25){ }u505(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  gen 	 181
;; live  kill	

;; Pred edge  51 [0.0%]  (fallthru)
(note 420 419 421 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 421 420 613 52 include/linux/err.h:29 (set (reg/v:SI 181 [ ret ])
        (reg/v/f:SI 148 [ bp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 148 [ bp ])
        (nil)))

(jump_insn 613 421 614 52 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 52 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  61 [100.0%] 

(barrier 614 613 424)

;; Start of basic block ( 51) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u507(11){ }u508(13){ }u509(25){ }u510(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 286
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190 286
;; live  gen 	
;; live  kill	

;; Pred edge  51 [100.0%] 
(code_label 424 614 425 53 132 "" [1 uses])

(note 425 424 431 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 431 425 432 53 arch/arm/kernel/ptrace.c:544 (set (mem/s/f/j:SI (plus:SI (reg:SI 286)
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg/v/f:SI 148 [ bp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 286)
        (nil)))
;; End of basic block 53 -> ( 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190


;; Succ edge  54 [100.0%]  (fallthru)

;; Start of basic block ( 50 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u513(11){ }u514(13){ }u515(25){ }u516(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 190
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188 190
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  50 [93.3%] 
;; Pred edge  53 [100.0%]  (fallthru)
(code_label 432 431 433 54 131 "" [1 uses])

(note 433 432 434 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(note 434 433 435 54 NOTE_INSN_DELETED)

(note 435 434 442 54 NOTE_INSN_DELETED)

(note 442 435 437 54 NOTE_INSN_DELETED)

(insn 437 442 438 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -80 [0xffffffffffffffb0]))) 4 {*arm_addsi3} (nil))

(insn 438 437 439 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 148 [ bp ])
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(insn 439 438 440 54 arch/arm/kernel/ptrace.c:547 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(call_insn 440 439 443 54 arch/arm/kernel/ptrace.c:547 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 443 440 444 54 arch/arm/kernel/ptrace.c:549 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 190 [ addr ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (nil)))

(jump_insn 444 443 445 54 arch/arm/kernel/ptrace.c:549 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 450)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 54 -> ( 55 56)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188


;; Succ edge  55 [71.0%]  (fallthru)
;; Succ edge  56 [29.0%] 

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u529(11){ }u530(13){ }u531(25){ }u532(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 338
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 148 188
;; live  gen 	 338
;; live  kill	

;; Pred edge  54 [71.0%]  (fallthru)
(note 445 444 566 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 566 445 565 55 arch/arm/kernel/ptrace.c:551 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 attr.D.23452.bp_addr+0 S4 A64])
        (reg/v:SI 147 [ user_val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 147 [ user_val ])
        (nil)))

(insn 565 566 567 55 arch/arm/kernel/ptrace.c:551 (set (reg:SI 338 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 567 565 615 55 arch/arm/kernel/ptrace.c:551 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 attr.D.23452.bp_addr+4 S4 A32])
        (reg:SI 338 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 338 [+4 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 615 567 616 55 (set (pc)
        (label_ref 512)) 242 {*arm_jump} (nil))
;; End of basic block 55 -> ( 59)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188


;; Succ edge  59 [100.0%] 

(barrier 616 615 450)

;; Start of basic block ( 54) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u537(11){ }u538(13){ }u539(25){ }u540(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 181 184 306 312 319
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 148 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 181 184 306 312 319
;; live  kill	 14 [lr]

;; Pred edge  54 [29.0%] 
(code_label 450 616 451 56 133 "" [1 uses])

(note 451 450 453 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(note 453 451 459 56 NOTE_INSN_DELETED)

(note 459 453 467 56 NOTE_INSN_DELETED)

(note 467 459 477 56 NOTE_INSN_DELETED)

(note 477 467 485 56 NOTE_INSN_DELETED)

(note 485 477 486 56 NOTE_INSN_DELETED)

(note 486 485 491 56 NOTE_INSN_DELETED)

(note 491 486 570 56 NOTE_INSN_DELETED)

(insn 570 491 461 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (reg/v:SI 184 [ ctrl ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 461 570 458 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (reg:SI 306)
        (zero_extract:SI (reg/v:SI 147 [ user_val ])
            (const_int 2 [0x2])
            (const_int 1 [0x1]))) 124 {extzv_t2} (nil))

(insn 458 461 469 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (zero_extract:SI (reg/v:SI 184 [ ctrl ])
            (const_int 1 [0x1])
            (const_int 31 [0x1f]))
        (reg/v:SI 147 [ user_val ])) 77 {insv_t2} (nil))

(insn 469 458 466 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (reg:SI 312)
        (zero_extract:SI (reg/v:SI 147 [ user_val ])
            (const_int 2 [0x2])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn 466 469 475 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (zero_extract:SI (reg/v:SI 184 [ ctrl ])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))
        (reg:SI 306)) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 306)
        (nil)))

(insn 475 466 474 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:41 (set (reg/v:SI 133 [ reg.871 ])
        (lshiftrt:SI (reg/v:SI 147 [ user_val ])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 474 475 479 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (zero_extract:SI (reg/v:SI 184 [ ctrl ])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))
        (reg:SI 312)) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 312)
        (nil)))

(insn 479 474 476 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (reg:SI 319)
        (zero_extract:SI (reg/v:SI 147 [ user_val ])
            (const_int 1 [0x1])
            (const_int 22 [0x16]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg/v:SI 147 [ user_val ])
        (nil)))

(insn 476 479 488 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:42 (set (zero_extract:SI (reg/v:SI 184 [ ctrl ])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg/v:SI 133 [ reg.871 ])) 77 {insv_t2} (expr_list:REG_DEAD (reg/v:SI 133 [ reg.871 ])
        (nil)))

(insn 488 476 484 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 484 488 489 56 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (zero_extract:SI (reg/v:SI 184 [ ctrl ])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))
        (reg:SI 319)) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 319)
        (nil)))

(insn 489 484 487 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn 487 489 490 56 arch/arm/kernel/ptrace.c:555 (set (reg:SI 0 r0)
        (reg/v:SI 184 [ ctrl ])) 167 {*arm_movsi_insn} (nil))

(call_insn 490 487 492 56 arch/arm/kernel/ptrace.c:555 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_bp_generic_fields") [flags 0x41] <function_decl 0x10ad9200 arch_bp_generic_fields>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 492 490 493 56 arch/arm/kernel/ptrace.c:556 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 181 [ ret ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 493 492 494 56 arch/arm/kernel/ptrace.c:556 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 56 -> ( 61 57)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 181 184 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 181 184 188


;; Succ edge  61 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u573(11){ }u574(13){ }u575(25){ }u576(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 184 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc] 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 184 188
;; live  gen 	 24 [cc] 143 144
;; live  kill	

;; Pred edge  56 [50.0%]  (fallthru)
(note 494 493 495 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 495 494 496 57 arch/arm/kernel/ptrace.c:559 (set (reg:SI 143 [ gen_type.377 ])
        (mem/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 gen_type+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 496 495 497 57 arch/arm/kernel/ptrace.c:559 (set (reg:SI 144 [ D.28101 ])
        (and:SI (reg/v:SI 146 [ implied_type ])
            (reg:SI 143 [ gen_type.377 ]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 146 [ implied_type ])
        (nil)))

(insn 497 496 498 57 arch/arm/kernel/ptrace.c:559 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 144 [ D.28101 ])
            (reg:SI 143 [ gen_type.377 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 143 [ gen_type.377 ])
        (nil)))

(jump_insn 498 497 499 57 arch/arm/kernel/ptrace.c:559 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 57 -> ( 60 58)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188


;; Succ edge  60 [72.0%] 
;; Succ edge  58 [28.0%]  (fallthru)

;; Start of basic block ( 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u583(11){ }u584(13){ }u585(25){ }u586(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 184
;; lr  def 	 24 [cc] 326 327 332 333
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 148 184 188
;; live  gen 	 326 327 332 333
;; live  kill	 24 [cc]

;; Pred edge  57 [28.0%]  (fallthru)
(note 499 498 504 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 504 499 505 58 NOTE_INSN_DELETED)

(note 505 504 506 58 NOTE_INSN_DELETED)

(note 506 505 508 58 NOTE_INSN_DELETED)

(note 508 506 509 58 NOTE_INSN_DELETED)

(insn 509 508 507 58 arch/arm/kernel/ptrace.c:566 (set (reg:QI 333 [+40 ])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0+40 S1 A64])) 178 {*arm_movqi_insn} (nil))

(insn 507 509 500 58 arch/arm/kernel/ptrace.c:566 (parallel [
            (set (reg:SI 332)
                (ge:SI (reg/v:SI 184 [ ctrl ])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_DEAD (reg/v:SI 184 [ ctrl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 500 507 510 58 arch/arm/kernel/ptrace.c:564 (set (reg:SI 326 [ gen_len ])
        (mem/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 gen_len+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 510 500 503 58 arch/arm/kernel/ptrace.c:566 (set (zero_extract:SI (subreg:SI (reg:QI 333 [+40 ]) 0)
            (const_int 1 [0x1])
            (const_int 0 [0x0]))
        (reg:SI 332)) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 332)
        (nil)))

(insn 503 510 511 58 arch/arm/kernel/ptrace.c:565 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -28 [0xffffffffffffffe4])) [0 attr.bp_type+0 S4 A32])
        (reg:SI 144 [ D.28101 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144 [ D.28101 ])
        (nil)))

(insn 511 503 501 58 arch/arm/kernel/ptrace.c:566 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0+40 S1 A64])
        (reg:QI 333 [+40 ])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 333 [+40 ])
        (nil)))

(insn 501 511 502 58 arch/arm/kernel/ptrace.c:564 (set (reg:DI 327 [ gen_len ])
        (sign_extend:DI (reg:SI 326 [ gen_len ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 326 [ gen_len ])
        (nil)))

(insn 502 501 512 58 arch/arm/kernel/ptrace.c:564 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 327 [ gen_len ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 327 [ gen_len ])
        (nil)))
;; End of basic block 58 -> ( 59)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188


;; Succ edge  59 [100.0%]  (fallthru)

;; Start of basic block ( 58 55) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u603(11){ }u604(13){ }u605(25){ }u606(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 188
;; live  gen 	 0 [r0] 1 [r1] 181
;; live  kill	 14 [lr]

;; Pred edge  58 [100.0%]  (fallthru)
;; Pred edge  55 [100.0%] 
(code_label 512 502 513 59 134 "" [1 uses])

(note 513 512 514 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(note 514 513 515 59 NOTE_INSN_DELETED)

(insn 515 514 516 59 arch/arm/kernel/ptrace.c:569 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ bp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 148 [ bp ])
        (nil)))

(insn 516 515 517 59 arch/arm/kernel/ptrace.c:569 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -80 [0xffffffffffffffb0]))) 4 {*arm_addsi3} (nil))

(call_insn 517 516 518 59 arch/arm/kernel/ptrace.c:569 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("modify_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524780 modify_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 518 517 617 59 arch/arm/kernel/ptrace.c:569 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 617 518 618 59 (set (pc)
        (label_ref 524)) 242 {*arm_jump} (nil))
;; End of basic block 59 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  61 [100.0%] 

(barrier 618 617 521)

;; Start of basic block ( 57 47) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u615(11){ }u616(13){ }u617(25){ }u618(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 181
;; live  kill	

;; Pred edge  57 [72.0%] 
;; Pred edge  47 [50.0%] 
(code_label 521 618 522 60 129 ("out") [2 uses])

(note 522 521 523 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 523 522 524 60 arch/arm/kernel/ptrace.c:528 (set (reg/v:SI 181 [ ret ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 60 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188


;; Succ edge  61 [100.0%]  (fallthru)

;; Start of basic block ( 60 49 52 43 56 59) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u619(11){ }u620(13){ }u621(25){ }u622(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  60 [100.0%]  (fallthru)
;; Pred edge  49 [100.0%] 
;; Pred edge  52 [100.0%] 
;; Pred edge  43 [100.0%] 
;; Pred edge  56 [50.0%] 
;; Pred edge  59 [100.0%] 
(code_label 524 523 525 61 126 "" [5 uses])

(note 525 524 526 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 526 525 527 61 arch/arm/kernel/ptrace.c:892 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(call_insn 527 526 619 61 arch/arm/kernel/ptrace.c:892 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 619 527 620 61 arch/arm/kernel/ptrace.c:893 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 61 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 620 619 530)

;; Start of basic block ( 2) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u626(11){ }u627(13){ }u628(25){ }u629(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 189 190 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 181
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 530 620 531 62 95 "" [17 uses])

(note 531 530 532 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 532 531 533 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 0 r0)
        (reg/v/f:SI 188 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 188 [ child ])
        (nil)))

(insn 533 532 534 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 1 r1)
        (reg/v:SI 189 [ request ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 189 [ request ])
        (nil)))

(insn 534 533 535 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 2 r2)
        (reg/v:SI 190 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ addr ])
        (nil)))

(insn 535 534 536 62 arch/arm/kernel/ptrace.c:897 (set (reg:SI 3 r3)
        (reg/v:SI 191 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ data ])
        (nil)))

(call_insn 536 535 537 62 arch/arm/kernel/ptrace.c:897 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_request") [flags 0x41] <function_decl 0x1109c680 ptrace_request>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 537 536 621 62 arch/arm/kernel/ptrace.c:897 (set (reg/v:SI 181 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 621 537 622 62 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 62 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 622 621 540)

;; Start of basic block ( 23 41) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u640(11){ }u641(13){ }u642(25){ }u643(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 181
;; live  kill	

;; Pred edge  23 [19.1%] 
;; Pred edge  41 [19.1%] 
(code_label 540 622 541 63 113 "" [2 uses])

(note 541 540 542 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 542 541 623 63 arch/arm/kernel/ptrace.c:880 (set (reg/v:SI 181 [ ret ])
        (const_int -3 [0xfffffffffffffffd])) 167 {*arm_movsi_insn} (nil))

(jump_insn 623 542 624 63 (set (pc)
        (label_ref 548)) 242 {*arm_jump} (nil))
;; End of basic block 63 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%] 

(barrier 624 623 545)

;; Start of basic block ( 21 19 3 9 11 13 15) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u644(11){ }u645(13){ }u646(25){ }u647(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 181
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 181
;; live  kill	

;; Pred edge  21 [71.0%] 
;; Pred edge  19 [71.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  9 [71.0%] 
;; Pred edge  11 [71.0%] 
;; Pred edge  13 [71.0%] 
;; Pred edge  15 [71.0%] 
(code_label 545 624 546 64 109 "" [7 uses])

(note 546 545 547 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 547 546 548 64 include/linux/regset.h:362 (set (reg/v:SI 181 [ ret ])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 64 -> ( 65)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181


;; Succ edge  65 [100.0%]  (fallthru)

;; Start of basic block ( 64 62 7 61 40 22 20 18 17 16 14 12 10 8 63) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u648(11){ }u649(13){ }u650(25){ }u651(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 181
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  64 [100.0%]  (fallthru)
;; Pred edge  62 [100.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  61 [100.0%] 
;; Pred edge  40 [100.0%] 
;; Pred edge  22 [100.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  16 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  63 [100.0%] 
(code_label 548 547 549 65 112 "" [14 uses])

(note 549 548 554 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 554 549 560 65 arch/arm/kernel/ptrace.c:902 (set (reg/i:SI 0 r0)
        (reg/v:SI 181 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 181 [ ret ])
        (nil)))

(insn 560 554 646 65 arch/arm/kernel/ptrace.c:902 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 65 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 646 560 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_hbptriggered (ptrace_hbptriggered)[0:1550]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 14 (  1.4)


ptrace_hbptriggered

Dataflow summary:
def_info->table_size = 151, use_info->table_size = 71
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,9u} r12={2d} r13={1d,12u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d,14u} r26={1d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r137={2d,2u} r140={2d,3u} r141={3d,3u} r142={1d,2u} r145={2d,2u} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={1d,1u} r153={2d,2u} 
;;    total ref usage 221{150d,71u,0e} in 33{32 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d5(1){ }d8(2){ }d10(3){ }d11(11){ }d13(12){ }d14(13){ }d16(14){ }d30(25){ }d31(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137 140 142 145
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 137 140 142 145
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142

( 6 2 )->[3]->( 4 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 142
;; lr  def 	 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  gen 	 24 [cc] 147
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142

( 3 )->[4]->( 8 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc] 141 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142
;; live  gen 	 24 [cc] 141 148
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142

( 4 )->[5]->( 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142

( 3 )->[6]->( 3 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140
;; lr  def 	 24 [cc] 137 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  gen 	 24 [cc] 137 140
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142

( 6 )->[7]->( 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u33(11){ }u34(13){ }u35(25){ }u36(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; live  gen 	 141
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142

( 4 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	 141
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142

( 8 5 7 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u42(11){ }u43(13){ }u44(25){ }u45(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 149 150 151 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 149 150 151 153
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u67(11){ }u68(13){ }u69(14){ }u70(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 20 to worklist
  Adding insn 25 to worklist
  Adding insn 70 to worklist
  Adding insn 35 to worklist
  Adding insn 72 to worklist
  Adding insn 59 to worklist
  Adding insn 51 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
Finished finding needed instructions:
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 76 to worklist
  Adding insn 75 to worklist
  Adding insn 50 to worklist
  Adding insn 48 to worklist
  Adding insn 45 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
  Adding insn 42 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
  Adding insn 37 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
  Adding insn 34 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
  Adding insn 19 to worklist
  Adding insn 18 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 20 (    2)
;;   ======================================================
;;   -- basic block 3 from 18 to 20 -- before reload
;;   ======================================================

;;	  0-->    18 r147=[r137+0x31c]                 :cortex_a8_load_store_1
changing bb of uid 32
  from 6 to 3
;;	  0-->    32 r137=r137+0x4                     :cortex_a8_default
;;	  2-->    19 cc=cmp(r147,r142)                 :cortex_a8_default
;;	  4-->    20 pc={(cc!=0x0)?L29:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 18
;;   new tail = 20

;;   ======================================================
;;   -- basic block 6 from 31 to 35 -- before reload
;;   ======================================================

;;	  0-->    31 r140=r140+0x1                     :cortex_a8_default
;;	  1-->    34 cc=cmp(r140,0x20)                 :cortex_a8_default
;;	  3-->    35 pc={(cc!=0x0)?L33:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 31
;;   new tail = 35

;;   ======================================================
;;   -- basic block 2 from 6 to 16 -- before reload
;;   ======================================================

;;	  0-->    77 r145=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  0-->     6 r142=r0                           :cortex_a8_default
;;	  1-->    78 r145=r145&0xffffffffffffffc0      :cortex_a8_default
;;	  1-->    16 r140=0x0                          :cortex_a8_default
;;	  3-->    15 r137=[r145+0xc]                   :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 6
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 22 to 25 -- before reload
;;   ======================================================

;;	  0-->    22 r148=r140<<0x1                    :cortex_a8_default
;;	  1-->    23 r141=r148+0x1                     :cortex_a8_default
;;	  2-->    24 cc=cmp(r141,0x20)                 :cortex_a8_default
;;	  4-->    25 pc={(cc>0x0)?L40:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 22
;;   new tail = 25

;;   ======================================================
;;   -- basic block 5 from 70 to 70 -- before reload
;;   ======================================================

;;	  0-->    70 pc=L43                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 70
;;   new tail = 70

;;   ======================================================
;;   -- basic block 7 from 37 to 72 -- before reload
;;   ======================================================

;;	  0-->    37 r141=0x0                          :cortex_a8_default
;;	  0-->    72 pc=L43                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 37
;;   new tail = 72

;;   ======================================================
;;   -- basic block 8 from 42 to 42 -- before reload
;;   ======================================================

;;	  0-->    42 r141=0x20-r141                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 42
;;   new tail = 42

;;   ======================================================
;;   -- basic block 9 from 45 to 59 -- before reload
;;   ======================================================

;;	  0-->    75 r153=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  0-->    50 r151=[r142+0xcc]                  :cortex_a8_load_store_1
;;	  1-->    76 r153=r153&0xffffffffffffffc0      :cortex_a8_default
;;	  1-->    48 r150=0x30004                      :cortex_a8_load_store_1
;;	  2-->    45 r149=0x5                          :cortex_a8_default
;;	  2-->    57 r1=sfp-0x80                       :cortex_a8_default
;;	  3-->    56 r0=r149                           :cortex_a8_default
;;	  3-->    58 r2=[r153+0xc]                     :cortex_a8_load_store_1
;;	  4-->    47 [sfp-0x7c]=r141                   :cortex_a8_load_store_1
;;	  5-->    49 [sfp-0x78]=r150                   :cortex_a8_load_store_1
;;	  6-->    51 [sfp-0x74]=r151                   :cortex_a8_load_store_1
;;	  7-->    46 [sfp-0x80]=r149                   :cortex_a8_load_store_1
;;	  7-->    59 r0=call [`force_sig_info']        :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 45
;;   new tail = 59


;; Procedure interblock/speculative motions == 1/1 




ptrace_hbptriggered

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,9u} r12={2d} r13={1d,12u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d,14u} r26={1d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r137={2d,2u} r140={2d,3u} r141={3d,3u} r142={1d,2u} r145={2d,2u} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={1d,1u} r153={2d,2u} 
;;    total ref usage 221{150d,71u,0e} in 33{32 regular + 1 call} insns.
(note 5 0 10 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137 140 142 145
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 137 140 142 145
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 10 5 9 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 9 10 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 9 77 2 NOTE_INSN_DELETED)

(insn 77 13 6 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 145)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 6 77 78 2 arch/arm/kernel/ptrace.c:380 (set (reg/v/f:SI 142 [ bp ])
        (reg:SI 0 r0 [ bp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ bp ])
        (nil)))

(insn 78 6 16 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 145)
        (and:SI (reg:SI 145)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 78 15 2 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 140 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 15 16 33 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 137 [ ivtmp.909 ])
        (mem/s/f/j:SI (plus:SI (reg:SI 145)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 6 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 142
;; lr  def 	 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  gen 	 24 [cc] 147
;; live  kill	

;; Pred edge  6 [96.7%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 33 15 17 3 143 "" [1 uses])

(note 17 33 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 32 3 arch/arm/kernel/ptrace.c:387 (set (reg/f:SI 147)
        (mem/s/f/j:SI (plus:SI (reg:SI 137 [ ivtmp.909 ])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 18 19 3 arch/arm/kernel/ptrace.c:386 (set (reg:SI 137 [ ivtmp.909 ])
        (plus:SI (reg:SI 137 [ ivtmp.909 ])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 19 32 20 3 arch/arm/kernel/ptrace.c:387 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 147)
            (reg/v/f:SI 142 [ bp ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))

(jump_insn 20 19 21 3 arch/arm/kernel/ptrace.c:387 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  6 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc] 141 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142
;; live  gen 	 24 [cc] 141 148
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 arch/arm/kernel/ptrace.c:370 (set (reg:SI 148)
        (ashift:SI (reg/v:SI 140 [ i ])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ i ])
        (nil)))

(insn 23 22 24 4 arch/arm/kernel/ptrace.c:370 (set (reg/v:SI 141 [ num ])
        (plus:SI (reg:SI 148)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 148)
        (nil)))

(insn 24 23 25 4 arch/arm/kernel/ptrace.c:371 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ num ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 25 24 69 4 arch/arm/kernel/ptrace.c:371 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 40)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 8 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142


;; Succ edge  8 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 69 25 70 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(jump_insn 70 69 71 5 (set (pc)
        (label_ref 43)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142


;; Succ edge  9 [100.0%] 

(barrier 71 70 29)

;; Start of basic block ( 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140
;; lr  def 	 24 [cc] 137 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  gen 	 24 [cc] 137 140
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 29 71 30 6 140 "" [1 uses])

(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 34 6 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 140 [ i ])
        (plus:SI (reg/v:SI 140 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 34 31 35 6 arch/arm/kernel/ptrace.c:386 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ i ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 35 34 36 6 arch/arm/kernel/ptrace.c:386 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9673 [0x25c9])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 142


;; Succ edge  3 [96.7%]  (dfs_back)
;; Succ edge  7 [3.3%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u33(11){ }u34(13){ }u35(25){ }u36(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; live  gen 	 141
;; live  kill	

;; Pred edge  6 [3.3%]  (fallthru,loop_exit)
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 72 7 arch/arm/kernel/ptrace.c:390 discrim 2 (set (reg/v:SI 141 [ num ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 72 37 73 7 (set (pc)
        (label_ref 43)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142


;; Succ edge  9 [100.0%] 

(barrier 73 72 40)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	 141
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 40 73 41 8 141 "" [1 uses])

(note 41 40 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 8 arch/arm/kernel/ptrace.c:371 discrim 1 (set (reg/v:SI 141 [ num ])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 141 [ num ]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u42(11){ }u43(13){ }u44(25){ }u45(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 149 150 151 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 149 150 151 153
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 43 42 44 9 142 "" [2 uses])

(note 44 43 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 53 44 54 9 NOTE_INSN_DELETED)

(note 54 53 75 9 NOTE_INSN_DELETED)

(insn 75 54 50 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 153)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 50 75 76 9 arch/arm/kernel/ptrace.c:395 (set (reg:SI 151 [ <variable>.hw.D.25978.D.25977.info.trigger ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ bp ])
                (const_int 204 [0xcc])) [0 <variable>.hw.D.25978.D.25977.info.trigger+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 142 [ bp ])
        (nil)))

(insn 76 50 48 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 153)
        (and:SI (reg:SI 153)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 48 76 45 9 arch/arm/kernel/ptrace.c:394 (set (reg:SI 150)
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (nil))

(insn 45 48 57 9 arch/arm/kernel/ptrace.c:392 (set (reg:SI 149)
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (nil))

(insn 57 45 56 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -128 [0xffffffffffffff80]))) 4 {*arm_addsi3} (nil))

(insn 56 57 58 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 0 r0)
        (reg:SI 149)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 149)
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn 58 56 47 9 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 153)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 153)
        (nil)))

(insn 47 58 49 9 arch/arm/kernel/ptrace.c:393 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg/v:SI 141 [ num ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ num ])
        (nil)))

(insn 49 47 51 9 arch/arm/kernel/ptrace.c:394 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (const_int 196612 [0x30004])
            (nil))))

(insn 51 49 46 9 arch/arm/kernel/ptrace.c:395 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 151 [ <variable>.hw.D.25978.D.25977.info.trigger ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 151 [ <variable>.hw.D.25978.D.25977.info.trigger ])
        (nil)))

(insn 46 51 59 9 arch/arm/kernel/ptrace.c:392 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 149)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(call_insn 59 46 79 9 arch/arm/kernel/ptrace.c:397 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 59 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ptrace_break (ptrace_break)[0:1543]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 19 -- before reload
;;   ======================================================

;;	  0-->    11 r137=0x30001                      :cortex_a8_load_store_1
;;	  0-->     7 r135=0x5                          :cortex_a8_default
;;	  1-->     8 [sfp-0x80]=r135                   :cortex_a8_load_store_1
;;	  1-->     9 r136=0x0                          :cortex_a8_default
;;	  2-->    10 [sfp-0x7c]=r136                   :cortex_a8_load_store_1
;;	  2-->     2 r133=r0                           :cortex_a8_default
;;	  3-->    12 [sfp-0x78]=r137                   :cortex_a8_load_store_1
;;	  3-->    16 r0=r135                           :cortex_a8_default
;;	  4-->    13 r138=[r1+0x3c]                    :cortex_a8_load_store_1
;;	  4-->    18 r2=r133                           :cortex_a8_default
;;	  5-->    17 r1=sfp-0x80                       :cortex_a8_default
;;	  7-->    14 [sfp-0x74]=r138                   :cortex_a8_load_store_1
;;	  7-->    19 r0=call [`force_sig_info']        :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 2
;;   new tail = 19


;; Procedure interblock/speculative motions == 0/0 




ptrace_break

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,2u} r2={3d,1u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,7u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r135={1d,2u} r136={1d,1u} r137={1d,1u} r138={1d,1u} 
;;    total ref usage 160{135d,25u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 135 136 137 138
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 135 136 137 138
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 11 2 NOTE_INSN_DELETED)

(insn 11 15 7 2 arch/arm/kernel/ptrace.c:203 (set (reg:SI 137)
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (nil))

(insn 7 11 8 2 arch/arm/kernel/ptrace.c:201 (set (reg:SI 135)
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 arch/arm/kernel/ptrace.c:201 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 135)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/ptrace.c:202 (set (reg:SI 136)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 2 2 arch/arm/kernel/ptrace.c:202 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 2 10 12 2 arch/arm/kernel/ptrace.c:198 (set (reg/v/f:SI 133 [ tsk ])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 12 2 16 2 arch/arm/kernel/ptrace.c:203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 137)
        (expr_list:REG_EQUAL (const_int 196609 [0x30001])
            (nil))))

(insn 16 12 13 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 0 r0)
        (reg:SI 135)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 135)
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn 13 16 18 2 arch/arm/kernel/ptrace.c:204 (set (reg:SI 138 [ <variable>.uregs+60 ])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn 18 13 17 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 2 r2)
        (reg/v/f:SI 133 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ tsk ])
        (nil)))

(insn 17 18 14 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -128 [0xffffffffffffff80]))) 4 {*arm_addsi3} (nil))

(insn 14 17 19 2 arch/arm/kernel/ptrace.c:204 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 138 [ <variable>.uregs+60 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 138 [ <variable>.uregs+60 ])
        (nil)))

(call_insn 19 14 28 2 arch/arm/kernel/ptrace.c:206 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 28 19 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function break_trap (break_trap)[0:1544]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


break_trap

Dataflow summary:
def_info->table_size = 134, use_info->table_size = 20
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r135={1d,1u} r137={2d,2u} 
;;    total ref usage 151{133d,18u,0e} in 8{7 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d3(0){ }d6(1){ }d8(2){ }d10(3){ }d11(11){ }d13(12){ }d14(13){ }d16(14){ }d27(25){ }d28(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 135 137
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u15(0){ }u16(11){ }u17(13){ }u18(14){ }u19(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 23 to worklist
  Adding insn 12 to worklist
Finished finding needed instructions:
processing block 2 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 17 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
;;   ======================================================
;;   -- basic block 2 from 2 to 23 -- before reload
;;   ======================================================

;;	  0-->    27 r137=sp&0xffffffffffffe03f        :cortex_a8_default
;;	  0-->     2 r135=r0                           :cortex_a8_default
;;	  1-->    28 r137=r137&0xffffffffffffffc0      :cortex_a8_default
;;	  1-->    11 r1=r135                           :cortex_a8_default
;;	  3-->    10 r0=[r137+0xc]                     :cortex_a8_load_store_1
;;	  4-->    12 call [`ptrace_break']             :cortex_a8_issue_branch
;;	  4-->    17 r0=0x0                            :cortex_a8_default
;;	  5-->    23 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 5
;;   new head = 2
;;   new tail = 23


;; Procedure interblock/speculative motions == 0/0 




break_trap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r135={1d,1u} r137={2d,2u} 
;;    total ref usage 151{133d,18u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 135 137
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 13 2 NOTE_INSN_DELETED)

(note 13 8 27 2 NOTE_INSN_DELETED)

(insn 27 13 2 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 137)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 27 28 2 arch/arm/kernel/ptrace.c:210 (set (reg/v/f:SI 135 [ regs ])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn 28 2 11 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 137)
        (and:SI (reg:SI 137)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 28 10 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 1 r1)
        (reg/v/f:SI 135 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ regs ])
        (nil)))

(insn 10 11 12 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 137)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 137)
        (nil)))

(call_insn 12 10 17 2 arch/arm/kernel/ptrace.c:211 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_break") [flags 0x3] <function_decl 0x11539900 ptrace_break>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 12 23 2 arch/arm/kernel/ptrace.c:213 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 17 29 2 arch/arm/kernel/ptrace.c:213 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 29 23 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function flush_ptrace_hw_breakpoint (flush_ptrace_hw_breakpoint)[0:1552]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 3 from 9 to 11 -- before reload
;;   ======================================================

;;	  0-->     9 r135=[r133+0x31c]                 :cortex_a8_load_store_1
changing bb of uid 19
  from 5 to 3
;;	  0-->    19 r134=r134+0x1                     :cortex_a8_default
;;	  2-->    10 cc=cmp(r135,0x0)                  :cortex_a8_default
changing bb of uid 13
  from 4 to 3
;;	  2-->    13 r0=r135                           :cortex_a8_default
;;	  4-->    11 pc={(cc==0x0)?L17:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 9
;;   new tail = 11

;;   ======================================================
;;   -- basic block 4 from 14 to 16 -- before reload
;;   ======================================================

;;	  0-->    14 call [`unregister_hw_breakpoint'] :cortex_a8_issue_branch
;;	  0-->    16 [r133+0x31c]=r138                 :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 14
;;   new tail = 16

;;   ======================================================
;;   -- basic block 5 from 20 to 23 -- before reload
;;   ======================================================

;;	  0-->    22 cc=cmp(r134,0x20)                 :cortex_a8_default
;;	  0-->    20 r133=r133+0x4                     :cortex_a8_default
;;	  2-->    23 pc={(cc!=0x0)?L21:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 20
;;   new tail = 23

;;   ======================================================
;;   -- basic block 2 from 2 to 15 -- before reload
;;   ======================================================

;;	  0-->     7 r134=0x0                          :cortex_a8_default
;;	  0-->     2 r133=r0                           :cortex_a8_default
;;	  1-->    15 r138=r134                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 2
;;   new tail = 15


;; Procedure interblock/speculative motions == 2/1 




flush_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r3={2d} r11={1d,6u} r12={2d} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r25={1d,6u} r26={1d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={2d,3u} r134={2d,3u} r135={1d,2u} r138={1d,1u} 
;;    total ref usage 174{136d,38u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 134 138
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 134 138
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 2 2 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 134 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 2 7 15 2 arch/arm/kernel/ptrace.c:415 (set (reg:SI 133 [ ivtmp.989 ])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 15 2 21 2 arch/arm/kernel/ptrace.c:422 (set (reg:SI 138)
        (reg/v:SI 134 [ i ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u6(11){ }u7(13){ }u8(25){ }u9(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; live  gen 	 24 [cc] 135
;; live  kill	

;; Pred edge  5 [96.9%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 21 15 8 3 156 "" [1 uses])

(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 19 3 arch/arm/kernel/ptrace.c:420 (set (reg/f:SI 135 [ D.26985 ])
        (mem/s/f/j:SI (plus:SI (reg:SI 133 [ ivtmp.989 ])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 9 10 3 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 134 [ i ])
        (plus:SI (reg/v:SI 134 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 10 19 13 3 arch/arm/kernel/ptrace.c:420 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ D.26985 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 13 10 11 3 arch/arm/kernel/ptrace.c:421 (set (reg:SI 0 r0)
        (reg/f:SI 135 [ D.26985 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 135 [ D.26985 ])
        (nil)))

(jump_insn 11 13 12 3 arch/arm/kernel/ptrace.c:420 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 14 12 16 4 arch/arm/kernel/ptrace.c:421 (parallel [
            (call (mem:SI (symbol_ref:SI ("unregister_hw_breakpoint") [flags 0x41] <function_decl 0x11524a00 unregister_hw_breakpoint>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 16 14 17 4 arch/arm/kernel/ptrace.c:422 (set (mem/s/f/j:SI (plus:SI (reg:SI 133 [ ivtmp.989 ])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg:SI 138)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 138


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc] 133 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; live  gen 	 24 [cc] 133 134
;; live  kill	

;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 17 16 18 5 155 "" [1 uses])

(note 18 17 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 22 18 20 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 134 [ i ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 22 23 5 arch/arm/kernel/ptrace.c:419 (set (reg:SI 133 [ ivtmp.989 ])
        (plus:SI (reg:SI 133 [ ivtmp.989 ])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 23 20 31 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138


;; Succ edge  3 [96.9%]  (dfs_back)
;; Succ edge  6 [3.1%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [3.1%]  (fallthru,loop_exit)
(note 31 23 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 35 31 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function regs_query_register_offset (regs_query_register_offset)[0:1536]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 6 from 27 to 30 -- before reload
;;   ======================================================

changing bb of uid 12
  from 3 to 6
;;	  0-->    12 r1=r138                           :cortex_a8_default
;;	  0-->    27 r136=[r133]                       :cortex_a8_load_store_1
changing bb of uid 11
  from 3 to 6
;;	  2-->    11 r0=r136                           :cortex_a8_default
;;	  2-->    29 cc=cmp(r136,0x0)                  :cortex_a8_default
;;	  4-->    30 pc={(cc!=0x0)?L28:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 27
;;   new tail = 30

;;   ======================================================
;;   -- basic block 3 from 13 to 17 -- before reload
;;   ======================================================

;;	  0-->    13 r0=call [`strcmp']                :cortex_a8_issue_branch
;;	 32-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    17 pc={(cc!=0x0)?L22:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 13
;;   new tail = 17

;;   ======================================================
;;   -- basic block 5 from 24 to 24 -- before reload
;;   ======================================================

;;	  0-->    24 r133=r133+0x8                     :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 24
;;   new tail = 24

;;   ======================================================
;;   -- basic block 2 from 2 to 49 -- before reload
;;   ======================================================

;;	  0-->     2 r138=r0                           :cortex_a8_default
;;	  0-->     6 r133=`*.LANCHOR0'                 :cortex_a8_load_store_1
;;	  1-->    49 pc=L25                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 2
;;   new tail = 49

;;   ======================================================
;;   -- basic block 4 from 19 to 51 -- before reload
;;   ======================================================

;;	  0-->    19 r134=[r133+0x4]                   :cortex_a8_load_store_1
;;	  0-->    51 pc=L33                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 51

;;   ======================================================
;;   -- basic block 7 from 32 to 32 -- before reload
;;   ======================================================

;;	  0-->    32 r134=0xffffffffffffffea           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 32

;;   ======================================================
;;   -- basic block 8 from 39 to 45 -- before reload
;;   ======================================================

;;	  0-->    39 r0=r134                           :cortex_a8_default
;;	  0-->    45 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 39
;;   new tail = 45


;; Procedure interblock/speculative motions == 2/2 




regs_query_register_offset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={3d,1u} r2={2d} r3={2d} r11={1d,8u} r12={2d} r13={1d,9u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r25={1d,8u} r26={1d,7u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={2d,3u} r134={2d,1u} r136={1d,2u} r138={1d,1u} 
;;    total ref usage 186{138d,48u,0e} in 17{16 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 138
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 138
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/ptrace.c:95 (set (reg/v/f:SI 138 [ name ])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ name ])
        (nil)))

(insn 6 2 49 2 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 133 [ roff ])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(jump_insn 49 6 50 2 arch/arm/kernel/ptrace.c:97 (set (pc)
        (label_ref 25)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138


;; Succ edge  6 [100.0%] 

(barrier 50 49 28)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u5(11){ }u6(13){ }u7(25){ }u8(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 28 50 10 3 163 "" [1 uses])

(note 10 28 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 10 13 3 NOTE_INSN_DELETED)

(call_insn/i 13 14 16 3 arch/arm/kernel/ptrace.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 13 17 3 arch/arm/kernel/ptrace.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 17 16 18 3 arch/arm/kernel/ptrace.c:98 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 134
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 51 4 arch/arm/kernel/ptrace.c:99 (set (reg:SI 134 [ D.26782 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ roff ])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ roff ])
        (nil)))

(jump_insn 51 19 52 4 arch/arm/kernel/ptrace.c:99 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134


;; Succ edge  8 [100.0%] 

(barrier 52 51 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138
;; live  gen 	 133
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 22 52 23 5 161 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 5 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 133 [ roff ])
        (plus:SI (reg/v/f:SI 133 [ roff ])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138
;; live  gen 	 24 [cc] 136
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 25 24 26 6 160 "" [1 uses])

(note 26 25 12 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 12 26 27 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 1 r1)
        (reg/v/f:SI 138 [ name ])) 167 {*arm_movsi_insn} (nil))

(insn 27 12 11 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg/f:SI 136 [ D.26778 ])
        (mem/s/f/j:SI (reg/v/f:SI 133 [ roff ]) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 27 29 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ D.26778 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136 [ D.26778 ])
        (nil)))

(insn 29 11 30 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 136 [ D.26778 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 138


;; Succ edge  3 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u34(11){ }u35(13){ }u36(25){ }u37(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 134
;; live  kill	

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 7 arch/arm/kernel/ptrace.c:100 (set (reg:SI 134 [ D.26782 ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 33 32 34 8 162 "" [1 uses])

(note 34 33 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 39 34 45 8 arch/arm/kernel/ptrace.c:101 (set (reg/i:SI 0 r0)
        (reg:SI 134 [ D.26782 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.26782 ])
        (nil)))

(insn 45 39 53 8 arch/arm/kernel/ptrace.c:101 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 53 45 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
