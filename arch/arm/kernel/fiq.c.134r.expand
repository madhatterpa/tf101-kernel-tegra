
;; Function claim_fiq (claim_fiq)[0:921]


;; Generating RTL for gimple basic block 2

;; current_fiq.241 = current_fiq;

(insn 6 5 7 arch/arm/kernel/fiq.c:96 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 7 6 0 arch/arm/kernel/fiq.c:96 (set (reg/f:SI 135 [ current_fiq.241 ])
        (mem/f/c/i:SI (reg/f:SI 138) [0 current_fiq+0 S4 A32])) -1 (nil))

;; if (current_fiq.241 != 0B)

(insn 8 7 9 arch/arm/kernel/fiq.c:96 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ current_fiq.241 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 9 8 0 arch/arm/kernel/fiq.c:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
        (nil)))

;; Generating RTL for gimple basic block 3

;; D.15569 = current_fiq.241->fiq_op;

(insn 11 10 0 arch/arm/kernel/fiq.c:99 (set (reg/f:SI 134 [ D.15569 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.241 ])
                (const_int 8 [0x8])) [0 <variable>.fiq_op+0 S4 A32])) -1 (nil))

;; if (D.15569 != 0B)

(insn 12 11 13 arch/arm/kernel/fiq.c:99 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ D.15569 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 13 12 0 arch/arm/kernel/fiq.c:99 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6983 [0x1b47])
        (nil)))

;; Generating RTL for gimple basic block 4

;; ret = -16;

(insn 15 14 0 arch/arm/kernel/fiq.c:97 (set (reg/v:SI 133 [ ret ])
        (const_int -16 [0xfffffffffffffff0])) -1 (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 18 17 19 3 "" [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; ret = D.15569 (current_fiq.241->dev_id, 1);

(insn 20 19 21 arch/arm/kernel/fiq.c:100 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.241 ])
                (const_int 12 [0xc])) [0 <variable>.dev_id+0 S4 A32])) -1 (nil))

(insn 21 20 22 arch/arm/kernel/fiq.c:100 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 22 21 23 arch/arm/kernel/fiq.c:100 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 134 [ D.15569 ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 23 22 0 arch/arm/kernel/fiq.c:100 (set (reg/v:SI 133 [ ret ])
        (reg:SI 0 r0)) -1 (nil))

;; if (ret == 0)

(insn 24 23 25 arch/arm/kernel/fiq.c:103 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ ret ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 25 24 0 arch/arm/kernel/fiq.c:103 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))

;; Generating RTL for gimple basic block 6

;; 

(code_label 26 25 27 2 "" [0 uses])

(note 27 26 0 NOTE_INSN_BASIC_BLOCK)

;; f->next = current_fiq;

(insn 28 27 29 arch/arm/kernel/fiq.c:104 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 29 28 30 arch/arm/kernel/fiq.c:104 (set (reg/f:SI 140)
        (mem/f/c/i:SI (reg/f:SI 139) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 30 29 0 arch/arm/kernel/fiq.c:104 (set (mem/s/f/j:SI (reg/v/f:SI 137 [ f ]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 140)) -1 (nil))

;; current_fiq = f;

(insn 31 30 32 arch/arm/kernel/fiq.c:105 (set (reg/f:SI 141)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 32 31 0 arch/arm/kernel/fiq.c:105 (set (mem/f/c/i:SI (reg/f:SI 141) [0 current_fiq+0 S4 A32])
        (reg/v/f:SI 137 [ f ])) -1 (nil))

;; ret = 0;

(insn 33 32 0 arch/arm/kernel/fiq.c:105 (set (reg/v:SI 133 [ ret ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 34 33 35 4 "" [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)

;; return ret;

(insn 36 35 37 arch/arm/kernel/fiq.c:109 (set (reg:SI 136 [ <result> ])
        (reg/v:SI 133 [ ret ])) -1 (nil))

(jump_insn 37 36 38 arch/arm/kernel/fiq.c:109 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 38 37 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/kernel/fiq.c:93 (set (reg/v/f:SI 137 [ f ])
        (reg:SI 0 r0 [ f ])) -1 (nil))

(note 3 2 5 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 5 3 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 6 5 7 3 arch/arm/kernel/fiq.c:96 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 7 6 8 3 arch/arm/kernel/fiq.c:96 (set (reg/f:SI 135 [ current_fiq.241 ])
        (mem/f/c/i:SI (reg/f:SI 138) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 8 7 9 3 arch/arm/kernel/fiq.c:96 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ current_fiq.241 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 9 8 10 3 arch/arm/kernel/fiq.c:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
        (nil)))
;; End of basic block 3 -> ( 4 7)

;; Succ edge  4 [19.1%]  (fallthru)
;; Succ edge  7 [80.9%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [19.1%]  (fallthru)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 4 arch/arm/kernel/fiq.c:99 (set (reg/f:SI 134 [ D.15569 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.241 ])
                (const_int 8 [0x8])) [0 <variable>.fiq_op+0 S4 A32])) -1 (nil))

(insn 12 11 13 4 arch/arm/kernel/fiq.c:99 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ D.15569 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 13 12 14 4 arch/arm/kernel/fiq.c:99 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6983 [0x1b47])
        (nil)))
;; End of basic block 4 -> ( 6 5)

;; Succ edge  6 [69.8%] 
;; Succ edge  5 [30.2%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; Pred edge  4 [30.2%]  (fallthru)
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 5 arch/arm/kernel/fiq.c:97 (set (reg/v:SI 133 [ ret ])
        (const_int -16 [0xfffffffffffffff0])) -1 (nil))

(jump_insn 16 15 17 5 arch/arm/kernel/fiq.c:97 (set (pc)
        (label_ref 34)) -1 (nil))
;; End of basic block 5 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 17 16 18)

;; Start of basic block ( 4) -> 6
;; Pred edge  4 [69.8%] 
(code_label 18 17 19 6 3 "" [1 uses])

(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 6 arch/arm/kernel/fiq.c:100 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.241 ])
                (const_int 12 [0xc])) [0 <variable>.dev_id+0 S4 A32])) -1 (nil))

(insn 21 20 22 6 arch/arm/kernel/fiq.c:100 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 22 21 23 6 arch/arm/kernel/fiq.c:100 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 134 [ D.15569 ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 23 22 24 6 arch/arm/kernel/fiq.c:100 (set (reg/v:SI 133 [ ret ])
        (reg:SI 0 r0)) -1 (nil))

(insn 24 23 25 6 arch/arm/kernel/fiq.c:103 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ ret ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 25 24 26 6 arch/arm/kernel/fiq.c:103 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 6 -> ( 7 8)

;; Succ edge  7 (fallthru)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 6 3) -> 7
;; Pred edge  6 (fallthru)
;; Pred edge  3 [80.9%] 
(code_label 26 25 27 7 2 "" [1 uses])

(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 7 arch/arm/kernel/fiq.c:104 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 29 28 30 7 arch/arm/kernel/fiq.c:104 (set (reg/f:SI 140)
        (mem/f/c/i:SI (reg/f:SI 139) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 30 29 31 7 arch/arm/kernel/fiq.c:104 (set (mem/s/f/j:SI (reg/v/f:SI 137 [ f ]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 140)) -1 (nil))

(insn 31 30 32 7 arch/arm/kernel/fiq.c:105 (set (reg/f:SI 141)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 32 31 33 7 arch/arm/kernel/fiq.c:105 (set (mem/f/c/i:SI (reg/f:SI 141) [0 current_fiq+0 S4 A32])
        (reg/v/f:SI 137 [ f ])) -1 (nil))

(insn 33 32 34 7 arch/arm/kernel/fiq.c:105 (set (reg/v:SI 133 [ ret ])
        (const_int 0 [0x0])) -1 (nil))
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 5 7 6) -> 8
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 34 33 35 8 4 "" [2 uses])

(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 8 arch/arm/kernel/fiq.c:109 (set (reg:SI 136 [ <result> ])
        (reg/v:SI 133 [ ret ])) -1 (nil))

(jump_insn 37 36 38 8 arch/arm/kernel/fiq.c:109 (set (pc)
        (label_ref 39)) -1 (nil))
;; End of basic block 8 -> ( 10)

;; Succ edge  10 [100.0%] 

(barrier 38 37 47)

;; Start of basic block () -> 9
(note 47 38 41 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 41 47 42 9 arch/arm/kernel/fiq.c:109 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 42 41 43 9 arch/arm/kernel/fiq.c:109 (clobber (reg:SI 136 [ <result> ])) -1 (nil))

(jump_insn 43 42 44 9 arch/arm/kernel/fiq.c:109 (set (pc)
        (label_ref 45)) -1 (nil))
;; End of basic block 9 -> ( 11)

;; Succ edge  11 [100.0%] 

(barrier 44 43 39)

;; Start of basic block ( 8) -> 10
;; Pred edge  8 [100.0%] 
(code_label 39 44 48 10 1 "" [1 uses])

(note 48 39 40 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 40 48 45 10 arch/arm/kernel/fiq.c:109 (set (reg/i:SI 0 r0)
        (reg:SI 136 [ <result> ])) -1 (nil))
;; End of basic block 10 -> ( 11)

;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 45 40 49 11 5 "" [1 uses])

(note 49 45 46 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 46 49 0 11 arch/arm/kernel/fiq.c:109 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 11 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function init_FIQ (init_FIQ)[0:925] (unlikely executed)


;; Generating RTL for gimple basic block 2

;; no_fiq_insn.247 ={v} *4294901788B;

(insn 5 4 6 arch/arm/kernel/fiq.c:145 (set (reg/f:SI 134)
        (const_int -61441 [0xffffffffffff0fff])) -1 (nil))

(insn 6 5 0 arch/arm/kernel/fiq.c:145 (set (reg:SI 133 [ no_fiq_insn.247 ])
        (mem:SI (plus:SI (reg/f:SI 134)
                (const_int -4067 [0xfffffffffffff01d])) [0 S4 A32])) -1 (nil))

;; no_fiq_insn = no_fiq_insn.247;

(insn 7 6 8 arch/arm/kernel/fiq.c:145 (set (reg/f:SI 135)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) -1 (nil))

(insn 8 7 0 arch/arm/kernel/fiq.c:145 (set (mem/c/i:SI (reg/f:SI 135) [0 no_fiq_insn+0 S4 A32])
        (reg:SI 133 [ no_fiq_insn.247 ])) -1 (nil))


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 4 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 4 2 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 5 4 6 3 arch/arm/kernel/fiq.c:145 (set (reg/f:SI 134)
        (const_int -61441 [0xffffffffffff0fff])) -1 (nil))

(insn 6 5 7 3 arch/arm/kernel/fiq.c:145 (set (reg:SI 133 [ no_fiq_insn.247 ])
        (mem:SI (plus:SI (reg/f:SI 134)
                (const_int -4067 [0xfffffffffffff01d])) [0 S4 A32])) -1 (nil))

(insn 7 6 8 3 arch/arm/kernel/fiq.c:145 (set (reg/f:SI 135)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) -1 (nil))

(insn 8 7 13 3 arch/arm/kernel/fiq.c:145 (set (mem/c/i:SI (reg/f:SI 135) [0 no_fiq_insn+0 S4 A32])
        (reg:SI 133 [ no_fiq_insn.247 ])) -1 (nil))
;; End of basic block 3 -> ( 4)

;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [100.0%]  (fallthru)
(note 13 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 10 13 11 4 arch/arm/kernel/fiq.c:146 (set (pc)
        (label_ref 12)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 11 10 9)

;; Start of basic block () -> 5
(code_label 9 11 14 5 9 "" [0 uses])

(note 14 9 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 12 14 15 6 10 "" [1 uses])

(note 15 12 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function disable_fiq (disable_fiq)[0:924]


;; Generating RTL for gimple basic block 2

;; disable_irq ((unsigned int) fiq); [tail call]

(insn 6 5 7 2 arch/arm/kernel/fiq.c:132 (set (reg:SI 0 r0)
        (reg/v:SI 133 [ fiq ])) -1 (nil))

(call_insn/j 7 6 8 2 arch/arm/kernel/fiq.c:132 (parallel [
            (call (mem:SI (symbol_ref:SI ("disable_irq") [flags 0x41] <function_decl 0x10e80400 disable_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(barrier 8 7 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/kernel/fiq.c:131 (set (reg/v:SI 133 [ fiq ])
        (reg:SI 0 r0 [ fiq ])) -1 (nil))

(note 3 2 5 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 5 3 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 6 5 7 3 arch/arm/kernel/fiq.c:132 (set (reg:SI 0 r0)
        (reg/v:SI 133 [ fiq ])) -1 (nil))

(call_insn/j 7 6 8 3 arch/arm/kernel/fiq.c:132 (parallel [
            (call (mem:SI (symbol_ref:SI ("disable_irq") [flags 0x41] <function_decl 0x10e80400 disable_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 8 7 13)

;; Start of basic block () -> 4
(note 13 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 10 13 11 4 arch/arm/kernel/fiq.c:133 (set (pc)
        (label_ref 12)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 11 10 9)

;; Start of basic block () -> 5
(code_label 9 11 14 5 13 "" [0 uses])

(note 14 9 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 12 14 15 6 14 "" [1 uses])

(note 15 12 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function enable_fiq (enable_fiq)[0:923]


;; Generating RTL for gimple basic block 2

;; enable_irq ((unsigned int) fiq); [tail call]

(insn 6 5 7 2 arch/arm/kernel/fiq.c:127 (set (reg:SI 0 r0)
        (reg/v:SI 133 [ fiq ])) -1 (nil))

(call_insn/j 7 6 8 2 arch/arm/kernel/fiq.c:127 (parallel [
            (call (mem:SI (symbol_ref:SI ("enable_irq") [flags 0x41] <function_decl 0x10e80480 enable_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(barrier 8 7 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/kernel/fiq.c:126 (set (reg/v:SI 133 [ fiq ])
        (reg:SI 0 r0 [ fiq ])) -1 (nil))

(note 3 2 5 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 5 3 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 6 5 7 3 arch/arm/kernel/fiq.c:127 (set (reg:SI 0 r0)
        (reg/v:SI 133 [ fiq ])) -1 (nil))

(call_insn/j 7 6 8 3 arch/arm/kernel/fiq.c:127 (parallel [
            (call (mem:SI (symbol_ref:SI ("enable_irq") [flags 0x41] <function_decl 0x10e80480 enable_irq>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 8 7 13)

;; Start of basic block () -> 4
(note 13 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 10 13 11 4 arch/arm/kernel/fiq.c:128 (set (pc)
        (label_ref 12)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 11 10 9)

;; Start of basic block () -> 5
(code_label 9 11 14 5 15 "" [0 uses])

(note 14 9 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 12 14 15 6 16 "" [1 uses])

(note 15 12 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function release_fiq (release_fiq)[0:922]


;; Generating RTL for gimple basic block 2

;; current_fiq.243 = current_fiq;

(insn 6 5 7 arch/arm/kernel/fiq.c:113 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 7 6 0 arch/arm/kernel/fiq.c:113 (set (reg/f:SI 135 [ current_fiq.243 ])
        (mem/f/c/i:SI (reg/f:SI 137) [0 current_fiq+0 S4 A32])) -1 (nil))

;; if (current_fiq.243 != f)

(insn 8 7 9 arch/arm/kernel/fiq.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ current_fiq.243 ])
            (reg/v/f:SI 136 [ f ]))) -1 (nil))

(jump_insn 9 8 0 arch/arm/kernel/fiq.c:113 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; printk (&"<3>%s FIQ trying to release %s FIQ\n"[0], f->name, current_fiq.243->name);

(insn 11 10 12 arch/arm/kernel/fiq.c:114 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11078640>)) -1 (nil))

(insn 12 11 13 arch/arm/kernel/fiq.c:114 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 13 12 14 arch/arm/kernel/fiq.c:114 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 136 [ f ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 14 13 15 arch/arm/kernel/fiq.c:114 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.243 ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(call_insn 15 14 0 arch/arm/kernel/fiq.c:114 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; dump_stack (); [tail call]

(call_insn/j 16 15 17 3 arch/arm/kernel/fiq.c:116 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (nil))

(barrier 17 16 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 17 19 18 "" [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; current_fiq.244 = current_fiq->next;

(insn 20 19 21 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 21 20 22 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 140)
        (mem/f/c/i:SI (reg/f:SI 139) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 22 21 0 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 134 [ current_fiq.244 ])
        (mem/s/f/j:SI (reg/f:SI 140) [0 <variable>.next+0 S4 A32])) -1 (nil))

;; current_fiq = current_fiq.244;

(insn 23 22 24 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 141)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 24 23 0 arch/arm/kernel/fiq.c:121 (set (mem/f/c/i:SI (reg/f:SI 141) [0 current_fiq+0 S4 A32])
        (reg/f:SI 134 [ current_fiq.244 ])) -1 (nil))

;; D.15590 = current_fiq.244->fiq_op (current_fiq.244->dev_id, 0);

(insn 25 24 26 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg/f:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 134 [ current_fiq.244 ])
                (const_int 8 [0x8])) [0 <variable>.fiq_op+0 S4 A32])) -1 (nil))

(insn 26 25 27 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 134 [ current_fiq.244 ])
                (const_int 12 [0xc])) [0 <variable>.dev_id+0 S4 A32])) -1 (nil))

(insn 27 26 28 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 28 27 29 arch/arm/kernel/fiq.c:122 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 142) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 28 0 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 133 [ D.15590 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.15590 != 0)

(insn 30 29 31 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.15590 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 31 30 0 arch/arm/kernel/fiq.c:122 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))

;; Generating RTL for gimple basic block 5


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/kernel/fiq.c:112 (set (reg/v/f:SI 136 [ f ])
        (reg:SI 0 r0 [ f ])) -1 (nil))

(note 3 2 5 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 5 3 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 6 5 7 3 arch/arm/kernel/fiq.c:113 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 7 6 8 3 arch/arm/kernel/fiq.c:113 (set (reg/f:SI 135 [ current_fiq.243 ])
        (mem/f/c/i:SI (reg/f:SI 137) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 8 7 9 3 arch/arm/kernel/fiq.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ current_fiq.243 ])
            (reg/v/f:SI 136 [ f ]))) -1 (nil))

(jump_insn 9 8 10 3 arch/arm/kernel/fiq.c:113 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 4 arch/arm/kernel/fiq.c:114 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11078640>)) -1 (nil))

(insn 12 11 13 4 arch/arm/kernel/fiq.c:114 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 13 12 14 4 arch/arm/kernel/fiq.c:114 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 136 [ f ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 14 13 15 4 arch/arm/kernel/fiq.c:114 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 135 [ current_fiq.243 ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(call_insn 15 14 16 4 arch/arm/kernel/fiq.c:114 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(call_insn/j 16 15 17 4 arch/arm/kernel/fiq.c:116 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (nil))
;; End of basic block 4 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 17 16 18)

;; Start of basic block ( 3 5) -> 5
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [86.0%]  (dfs_back)
(code_label 18 17 19 5 18 "" [2 uses])

(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 21 20 22 5 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 140)
        (mem/f/c/i:SI (reg/f:SI 139) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 22 21 23 5 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 134 [ current_fiq.244 ])
        (mem/s/f/j:SI (reg/f:SI 140) [0 <variable>.next+0 S4 A32])) -1 (nil))

(insn 23 22 24 5 arch/arm/kernel/fiq.c:121 (set (reg/f:SI 141)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 24 23 25 5 arch/arm/kernel/fiq.c:121 (set (mem/f/c/i:SI (reg/f:SI 141) [0 current_fiq+0 S4 A32])
        (reg/f:SI 134 [ current_fiq.244 ])) -1 (nil))

(insn 25 24 26 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg/f:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 134 [ current_fiq.244 ])
                (const_int 8 [0x8])) [0 <variable>.fiq_op+0 S4 A32])) -1 (nil))

(insn 26 25 27 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 134 [ current_fiq.244 ])
                (const_int 12 [0xc])) [0 <variable>.dev_id+0 S4 A32])) -1 (nil))

(insn 27 26 28 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 28 27 29 5 arch/arm/kernel/fiq.c:122 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 142) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 28 30 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:SI 133 [ D.15590 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 30 29 31 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.15590 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 31 30 32 5 arch/arm/kernel/fiq.c:122 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 5 -> ( 5 6)

;; Succ edge  5 [86.0%]  (dfs_back)
;; Succ edge  6 [14.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [14.0%]  (fallthru)
(note 32 31 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 7)

;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; Pred edge  6 [100.0%]  (fallthru)
(note 37 32 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 34 37 35 7 arch/arm/kernel/fiq.c:123 (set (pc)
        (label_ref 36)) -1 (nil))
;; End of basic block 7 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 35 34 33)

;; Start of basic block () -> 8
(code_label 33 35 38 8 17 "" [0 uses])

(note 38 33 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 9)

;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; Pred edge  7 [100.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 36 38 39 9 19 "" [1 uses])

(note 39 36 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function set_fiq_handler (set_fiq_handler)[0:920]


;; Generating RTL for gimple basic block 2

;; memcpy (vectors_page + 28, start, length);

(insn 7 6 8 arch/arm/kernel/fiq.c:85 (set (reg/f:SI 135)
        (symbol_ref:SI ("vectors_page") [flags 0xc0] <var_decl 0x11052240 vectors_page>)) -1 (nil))

(insn 8 7 9 arch/arm/kernel/fiq.c:85 (set (reg:SI 137)
        (mem/f/c/i:SI (reg/f:SI 135) [0 vectors_page+0 S4 A32])) -1 (nil))

(insn 9 8 10 arch/arm/kernel/fiq.c:85 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 28 [0x1c]))) -1 (nil))

(insn 10 9 11 arch/arm/kernel/fiq.c:85 (set (reg:SI 138)
        (reg:SI 136)) -1 (nil))

(insn 11 10 12 arch/arm/kernel/fiq.c:85 (set (reg:SI 139)
        (reg/v/f:SI 133 [ start ])) -1 (nil))

(insn 12 11 13 arch/arm/kernel/fiq.c:85 (set (reg:SI 140)
        (reg/v:SI 134 [ length ])) -1 (nil))

(insn 13 12 14 arch/arm/kernel/fiq.c:85 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 14 13 15 arch/arm/kernel/fiq.c:85 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(insn 15 14 16 arch/arm/kernel/fiq.c:85 (set (reg:SI 2 r2)
        (reg:SI 140)) -1 (nil))

(call_insn 16 15 17 arch/arm/kernel/fiq.c:85 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x11066e80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 17 16 0 arch/arm/kernel/fiq.c:85 (set (reg:SI 141)
        (reg:SI 0 r0)) -1 (nil))

;; cpu_cache.coherent_kern_range (4294901788, length + 4294901788);

(insn 18 17 19 arch/arm/kernel/fiq.c:87 (set (reg/f:SI 142)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x1102af00 cpu_cache>)) -1 (nil))

(insn 19 18 20 arch/arm/kernel/fiq.c:87 (set (reg:SI 143)
        (const_int -65508 [0xffffffffffff001c])) -1 (nil))

(insn 20 19 21 arch/arm/kernel/fiq.c:87 (set (reg:SI 145)
        (plus:SI (reg/v:SI 134 [ length ])
            (const_int -65280 [0xffffffffffff0100]))) -1 (nil))

(insn 21 20 22 arch/arm/kernel/fiq.c:87 (set (reg:SI 144)
        (plus:SI (reg:SI 145)
            (const_int -228 [0xffffffffffffff1c]))) -1 (expr_list:REG_EQUAL (plus:SI (reg/v:SI 134 [ length ])
            (const_int -65508 [0xffffffffffff001c]))
        (nil)))

(insn 22 21 23 arch/arm/kernel/fiq.c:87 (set (reg/f:SI 146)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 142)
                (const_int 16 [0x10])) [0 cpu_cache.coherent_kern_range+0 S4 A32])) -1 (nil))

(insn 23 22 24 arch/arm/kernel/fiq.c:87 (set (reg:SI 0 r0)
        (reg:SI 143)) -1 (nil))

(insn 24 23 25 arch/arm/kernel/fiq.c:87 (set (reg:SI 1 r1)
        (reg:SI 144)) -1 (nil))

(call_insn 25 24 0 arch/arm/kernel/fiq.c:87 (parallel [
            (call (mem:SI (reg/f:SI 146) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; if (cr_alignment & 8192 == 0)

(insn 26 25 27 arch/arm/kernel/fiq.c:88 (set (reg/f:SI 147)
        (symbol_ref:SI ("cr_alignment") [flags 0xc0] <var_decl 0x512cff60 cr_alignment>)) -1 (nil))

(insn 27 26 28 arch/arm/kernel/fiq.c:88 (set (reg:SI 149)
        (mem/c/i:SI (reg/f:SI 147) [0 cr_alignment+0 S4 A32])) -1 (nil))

(insn 28 27 29 arch/arm/kernel/fiq.c:88 (set (reg:SI 148)
        (and:SI (reg:SI 149)
            (const_int 8192 [0x2000]))) -1 (nil))

(insn 29 28 30 arch/arm/kernel/fiq.c:88 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 148)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 30 29 0 arch/arm/kernel/fiq.c:88 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))

;; Generating RTL for gimple basic block 3

;; cpu_cache.coherent_kern_range (28, length + 28); [tail call]

(insn 32 31 33 arch/arm/kernel/fiq.c:89 (set (reg/f:SI 150)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x1102af00 cpu_cache>)) -1 (nil))

(insn 33 32 34 arch/arm/kernel/fiq.c:89 (set (reg:SI 151)
        (plus:SI (reg/v:SI 134 [ length ])
            (const_int 28 [0x1c]))) -1 (nil))

(insn 34 33 35 arch/arm/kernel/fiq.c:89 (set (reg/f:SI 152)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 150)
                (const_int 16 [0x10])) [0 cpu_cache.coherent_kern_range+0 S4 A32])) -1 (nil))

(insn 35 34 36 arch/arm/kernel/fiq.c:89 (set (reg:SI 0 r0)
        (const_int 28 [0x1c])) -1 (nil))

(insn 36 35 37 arch/arm/kernel/fiq.c:89 (set (reg:SI 1 r1)
        (reg:SI 151)) -1 (nil))

(call_insn 37 36 0 arch/arm/kernel/fiq.c:89 (parallel [
            (call (mem:SI (reg/f:SI 152) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 38 37 39 25 "" [0 uses])

(note 39 38 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/kernel/fiq.c:81 (set (reg/v/f:SI 133 [ start ])
        (reg:SI 0 r0 [ start ])) -1 (nil))

(insn 3 2 4 2 arch/arm/kernel/fiq.c:81 (set (reg/v:SI 134 [ length ])
        (reg:SI 1 r1 [ length ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/kernel/fiq.c:85 (set (reg/f:SI 135)
        (symbol_ref:SI ("vectors_page") [flags 0xc0] <var_decl 0x11052240 vectors_page>)) -1 (nil))

(insn 8 7 9 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 137)
        (mem/f/c/i:SI (reg/f:SI 135) [0 vectors_page+0 S4 A32])) -1 (nil))

(insn 9 8 10 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 28 [0x1c]))) -1 (nil))

(insn 10 9 11 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 138)
        (reg:SI 136)) -1 (nil))

(insn 11 10 12 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 139)
        (reg/v/f:SI 133 [ start ])) -1 (nil))

(insn 12 11 13 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 140)
        (reg/v:SI 134 [ length ])) -1 (nil))

(insn 13 12 14 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 14 13 15 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(insn 15 14 16 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 2 r2)
        (reg:SI 140)) -1 (nil))

(call_insn 16 15 17 3 arch/arm/kernel/fiq.c:85 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x11066e80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 17 16 18 3 arch/arm/kernel/fiq.c:85 (set (reg:SI 141)
        (reg:SI 0 r0)) -1 (nil))

(insn 18 17 19 3 arch/arm/kernel/fiq.c:87 (set (reg/f:SI 142)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x1102af00 cpu_cache>)) -1 (nil))

(insn 19 18 20 3 arch/arm/kernel/fiq.c:87 (set (reg:SI 143)
        (const_int -65508 [0xffffffffffff001c])) -1 (nil))

(insn 20 19 21 3 arch/arm/kernel/fiq.c:87 (set (reg:SI 145)
        (plus:SI (reg/v:SI 134 [ length ])
            (const_int -65280 [0xffffffffffff0100]))) -1 (nil))

(insn 21 20 22 3 arch/arm/kernel/fiq.c:87 (set (reg:SI 144)
        (plus:SI (reg:SI 145)
            (const_int -228 [0xffffffffffffff1c]))) -1 (expr_list:REG_EQUAL (plus:SI (reg/v:SI 134 [ length ])
            (const_int -65508 [0xffffffffffff001c]))
        (nil)))

(insn 22 21 23 3 arch/arm/kernel/fiq.c:87 (set (reg/f:SI 146)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 142)
                (const_int 16 [0x10])) [0 cpu_cache.coherent_kern_range+0 S4 A32])) -1 (nil))

(insn 23 22 24 3 arch/arm/kernel/fiq.c:87 (set (reg:SI 0 r0)
        (reg:SI 143)) -1 (nil))

(insn 24 23 25 3 arch/arm/kernel/fiq.c:87 (set (reg:SI 1 r1)
        (reg:SI 144)) -1 (nil))

(call_insn 25 24 26 3 arch/arm/kernel/fiq.c:87 (parallel [
            (call (mem:SI (reg/f:SI 146) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 26 25 27 3 arch/arm/kernel/fiq.c:88 (set (reg/f:SI 147)
        (symbol_ref:SI ("cr_alignment") [flags 0xc0] <var_decl 0x512cff60 cr_alignment>)) -1 (nil))

(insn 27 26 28 3 arch/arm/kernel/fiq.c:88 (set (reg:SI 149)
        (mem/c/i:SI (reg/f:SI 147) [0 cr_alignment+0 S4 A32])) -1 (nil))

(insn 28 27 29 3 arch/arm/kernel/fiq.c:88 (set (reg:SI 148)
        (and:SI (reg:SI 149)
            (const_int 8192 [0x2000]))) -1 (nil))

(insn 29 28 30 3 arch/arm/kernel/fiq.c:88 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 148)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 30 29 31 3 arch/arm/kernel/fiq.c:88 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  5 [61.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [39.0%]  (fallthru)
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 4 arch/arm/kernel/fiq.c:89 (set (reg/f:SI 150)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x1102af00 cpu_cache>)) -1 (nil))

(insn 33 32 34 4 arch/arm/kernel/fiq.c:89 (set (reg:SI 151)
        (plus:SI (reg/v:SI 134 [ length ])
            (const_int 28 [0x1c]))) -1 (nil))

(insn 34 33 35 4 arch/arm/kernel/fiq.c:89 (set (reg/f:SI 152)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 150)
                (const_int 16 [0x10])) [0 cpu_cache.coherent_kern_range+0 S4 A32])) -1 (nil))

(insn 35 34 36 4 arch/arm/kernel/fiq.c:89 (set (reg:SI 0 r0)
        (const_int 28 [0x1c])) -1 (nil))

(insn 36 35 37 4 arch/arm/kernel/fiq.c:89 (set (reg:SI 1 r1)
        (reg:SI 151)) -1 (nil))

(call_insn 37 36 38 4 arch/arm/kernel/fiq.c:89 (parallel [
            (call (mem:SI (reg/f:SI 152) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [61.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 38 37 39 5 25 "" [1 uses])

(note 39 38 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 44 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 41 44 42 6 arch/arm/kernel/fiq.c:90 (set (pc)
        (label_ref 43)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 42 41 40)

;; Start of basic block () -> 7
(code_label 40 42 45 7 24 "" [0 uses])

(note 45 40 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 43 45 46 8 26 "" [1 uses])

(note 46 43 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function fiq_def_op (fiq_def_op)[0:918]


;; Generating RTL for gimple basic block 2

;; if (relinquish == 0)

(insn 7 6 8 arch/arm/kernel/fiq.c:58 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ relinquish ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 8 7 0 arch/arm/kernel/fiq.c:58 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))

;; Generating RTL for gimple basic block 3

;; set_fiq_handler (&no_fiq_insn, 4);

(insn 10 9 11 arch/arm/kernel/fiq.c:59 (set (reg/f:SI 136)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) -1 (nil))

(insn 11 10 12 arch/arm/kernel/fiq.c:59 (set (reg:SI 0 r0)
        (reg/f:SI 136)) -1 (nil))

(insn 12 11 13 arch/arm/kernel/fiq.c:59 (set (reg:SI 1 r1)
        (const_int 4 [0x4])) -1 (nil))

(call_insn 13 12 0 arch/arm/kernel/fiq.c:59 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_fiq_handler") [flags 0x3] <function_decl 0x11048a00 set_fiq_handler>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 14 13 15 30 "" [0 uses])

(note 15 14 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 16 15 17 arch/arm/kernel/fiq.c:62 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 17 16 18 arch/arm/kernel/fiq.c:62 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 18 17 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/kernel/fiq.c:57 (set (reg/v/f:SI 134 [ ref ])
        (reg:SI 0 r0 [ ref ])) -1 (nil))

(insn 3 2 4 2 arch/arm/kernel/fiq.c:57 (set (reg/v:SI 135 [ relinquish ])
        (reg:SI 1 r1 [ relinquish ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/kernel/fiq.c:58 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ relinquish ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 8 7 9 3 arch/arm/kernel/fiq.c:58 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 14)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  5 [61.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [39.0%]  (fallthru)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 4 arch/arm/kernel/fiq.c:59 (set (reg/f:SI 136)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) -1 (nil))

(insn 11 10 12 4 arch/arm/kernel/fiq.c:59 (set (reg:SI 0 r0)
        (reg/f:SI 136)) -1 (nil))

(insn 12 11 13 4 arch/arm/kernel/fiq.c:59 (set (reg:SI 1 r1)
        (const_int 4 [0x4])) -1 (nil))

(call_insn 13 12 14 4 arch/arm/kernel/fiq.c:59 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_fiq_handler") [flags 0x3] <function_decl 0x11048a00 set_fiq_handler>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [61.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 14 13 15 5 30 "" [1 uses])

(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 5 arch/arm/kernel/fiq.c:62 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 17 16 18 5 arch/arm/kernel/fiq.c:62 (set (pc)
        (label_ref 19)) -1 (nil))
;; End of basic block 5 -> ( 7)

;; Succ edge  7 [100.0%] 

(barrier 18 17 27)

;; Start of basic block () -> 6
(note 27 18 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 21 27 22 6 arch/arm/kernel/fiq.c:62 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 22 21 23 6 arch/arm/kernel/fiq.c:62 (clobber (reg:SI 133 [ <result> ])) -1 (nil))

(jump_insn 23 22 24 6 arch/arm/kernel/fiq.c:62 (set (pc)
        (label_ref 25)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 24 23 19)

;; Start of basic block ( 5) -> 7
;; Pred edge  5 [100.0%] 
(code_label 19 24 28 7 29 "" [1 uses])

(note 28 19 20 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 20 28 25 7 arch/arm/kernel/fiq.c:62 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) -1 (nil))
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 25 20 29 8 31 "" [1 uses])

(note 29 25 26 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 26 29 0 8 arch/arm/kernel/fiq.c:62 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function show_fiq_list (show_fiq_list)[0:919]


;; Generating RTL for gimple basic block 2

;; current_fiq.238 = current_fiq;

(insn 7 6 8 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 8 7 0 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 133 [ current_fiq.238 ])
        (mem/f/c/i:SI (reg/f:SI 137) [0 current_fiq+0 S4 A32])) -1 (nil))

;; if (current_fiq.238 != &default_owner)

(insn 9 8 10 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 10 9 11 arch/arm/kernel/fiq.c:73 (set (reg:SI 139)
        (plus:SI (reg/f:SI 138)
            (const_int 4 [0x4]))) -1 (nil))

(insn 11 10 12 arch/arm/kernel/fiq.c:73 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ current_fiq.238 ])
            (reg:SI 139))) -1 (nil))

(jump_insn 12 11 0 arch/arm/kernel/fiq.c:73 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))

;; Generating RTL for gimple basic block 3

;; seq_printf (p, &"%*s:              %s\n"[0], prec, &"FIQ"[0], current_fiq.238->name);

(insn 14 13 15 arch/arm/kernel/fiq.c:74 (set (reg:SI 140)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11087180>)) -1 (nil))

(insn 15 14 16 arch/arm/kernel/fiq.c:74 (set (reg:SI 141)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11083c00>)) -1 (nil))

(insn 16 15 17 arch/arm/kernel/fiq.c:74 (set (reg/f:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 133 [ current_fiq.238 ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 17 16 18 arch/arm/kernel/fiq.c:74 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 142)) -1 (nil))

(insn 18 17 19 arch/arm/kernel/fiq.c:74 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ p ])) -1 (nil))

(insn 19 18 20 arch/arm/kernel/fiq.c:74 (set (reg:SI 1 r1)
        (reg:SI 140)) -1 (nil))

(insn 20 19 21 arch/arm/kernel/fiq.c:74 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ prec ])) -1 (nil))

(insn 21 20 22 arch/arm/kernel/fiq.c:74 (set (reg:SI 3 r3)
        (reg:SI 141)) -1 (nil))

(call_insn 22 21 0 arch/arm/kernel/fiq.c:74 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("seq_printf") [flags 0x41] <function_decl 0x10eb2200 seq_printf>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 23 22 24 35 "" [0 uses])

(note 24 23 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 25 24 26 arch/arm/kernel/fiq.c:78 (set (reg:SI 134 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 26 25 27 arch/arm/kernel/fiq.c:78 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 27 26 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/kernel/fiq.c:72 (set (reg/v/f:SI 135 [ p ])
        (reg:SI 0 r0 [ p ])) -1 (nil))

(insn 3 2 4 2 arch/arm/kernel/fiq.c:72 (set (reg/v:SI 136 [ prec ])
        (reg:SI 1 r1 [ prec ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 8 7 9 3 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 133 [ current_fiq.238 ])
        (mem/f/c/i:SI (reg/f:SI 137) [0 current_fiq+0 S4 A32])) -1 (nil))

(insn 9 8 10 3 arch/arm/kernel/fiq.c:73 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 10 9 11 3 arch/arm/kernel/fiq.c:73 (set (reg:SI 139)
        (plus:SI (reg/f:SI 138)
            (const_int 4 [0x4]))) -1 (nil))

(insn 11 10 12 3 arch/arm/kernel/fiq.c:73 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ current_fiq.238 ])
            (reg:SI 139))) -1 (nil))

(jump_insn 12 11 13 3 arch/arm/kernel/fiq.c:73 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [78.3%]  (fallthru)
;; Succ edge  5 [21.6%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [78.3%]  (fallthru)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 140)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11087180>)) -1 (nil))

(insn 15 14 16 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 141)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11083c00>)) -1 (nil))

(insn 16 15 17 4 arch/arm/kernel/fiq.c:74 (set (reg/f:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 133 [ current_fiq.238 ])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 17 16 18 4 arch/arm/kernel/fiq.c:74 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 142)) -1 (nil))

(insn 18 17 19 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ p ])) -1 (nil))

(insn 19 18 20 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 1 r1)
        (reg:SI 140)) -1 (nil))

(insn 20 19 21 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ prec ])) -1 (nil))

(insn 21 20 22 4 arch/arm/kernel/fiq.c:74 (set (reg:SI 3 r3)
        (reg:SI 141)) -1 (nil))

(call_insn 22 21 23 4 arch/arm/kernel/fiq.c:74 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("seq_printf") [flags 0x41] <function_decl 0x10eb2200 seq_printf>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [21.6%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 23 22 24 5 35 "" [1 uses])

(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 5 arch/arm/kernel/fiq.c:78 (set (reg:SI 134 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 26 25 27 5 arch/arm/kernel/fiq.c:78 (set (pc)
        (label_ref 28)) -1 (nil))
;; End of basic block 5 -> ( 7)

;; Succ edge  7 [100.0%] 

(barrier 27 26 36)

;; Start of basic block () -> 6
(note 36 27 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 30 36 31 6 arch/arm/kernel/fiq.c:78 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 31 30 32 6 arch/arm/kernel/fiq.c:78 (clobber (reg:SI 134 [ <result> ])) -1 (nil))

(jump_insn 32 31 33 6 arch/arm/kernel/fiq.c:78 (set (pc)
        (label_ref 34)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 33 32 28)

;; Start of basic block ( 5) -> 7
;; Pred edge  5 [100.0%] 
(code_label 28 33 37 7 34 "" [1 uses])

(note 37 28 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 29 37 34 7 arch/arm/kernel/fiq.c:78 (set (reg/i:SI 0 r0)
        (reg:SI 134 [ <result> ])) -1 (nil))
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 34 29 38 8 36 "" [1 uses])

(note 38 34 35 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 35 38 0 8 arch/arm/kernel/fiq.c:78 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)

