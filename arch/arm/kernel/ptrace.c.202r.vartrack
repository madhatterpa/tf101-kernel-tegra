
;; Function regs_query_register_name (regs_query_register_name)[0:1537]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])

OUT:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])


Basic block 3:
IN:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])

OUT:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])


Basic block 4:
IN:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])

OUT:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])


Basic block 5:
IN:
Stack adjustment: 0
Reg 0: offset+0
Variables:
  name: offset
    offset 0
      (reg:SI 0 r0 [ offset ])

OUT:
Stack adjustment: 0


6 basic blocks, 7 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  4 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  4 [95.5%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	

Successors:  5 [4.5%]  (loop_exit) 4 [95.5%]  (fallthru,dfs_back)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  3 [95.5%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  3 [95.5%]  5 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  3 [4.5%]  (loop_exit) 4 [4.5%]  (fallthru,loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 5, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




regs_query_register_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 24[cc]
;;  ref usage 	r0={2d,3u} r1={2d,2u} r2={2d,2u} r3={3d,3u,2d} r12={2d,2u} r13={1d,5u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 37{15d,20u,2e} in 14{14 regular + 0 call} insns.
(note 30 0 103 NOTE_INSN_DELETED)

(note 103 30 33 2 ( offset (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ offset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 103 93 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 93 33 32 2 NOTE_INSN_PROLOGUE_END)

(note 32 93 35 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 35 32 47 2 arch/arm/kernel/ptrace.c:111 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 47 35 101 2 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 1 r1 [171])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 101 47 102 2 arch/arm/kernel/ptrace.c:113 (set (pc)
        (label_ref 45)) -1 (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 102 101 49)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 12 [ip] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [95.5%] 
(code_label 49 102 38 3 4 "" [1 uses])

(note 38 49 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 41 38 43 3 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [orig:164 D.26791 ] [164])
        (mem/s/j:SI (plus:SI (reg:SI 12 ip [168])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 43 41 44 3 arch/arm/kernel/ptrace.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:164 D.26791 ] [164])
            (reg/v:SI 0 r0 [orig:166 offset ] [166]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:164 D.26791 ] [164])
        (nil)))

(jump_insn:TI 44 43 45 3 arch/arm/kernel/ptrace.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [4.5%]  (loop_exit)
;; Succ edge  4 [95.5%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 45 44 46 4 2 "" [1 uses])

(note 46 45 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 46 40 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 1 r1 [171])
                (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 40 48 42 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 12 ip [168])
        (plus:SI (reg/f:SI 1 r1 [171])
            (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))
        (nil)))

(insn:TI 42 40 50 4 arch/arm/kernel/ptrace.c:114 (set (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
        (plus:SI (reg:SI 3 r3 [orig:162 ivtmp.457 ] [162])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 50 42 51 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 51 50 52 4 arch/arm/kernel/ptrace.c:113 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  5 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (loop_exit)
;; Pred edge  4 [4.5%]  (fallthru,loop_exit)
(code_label 52 51 53 5 3 "" [1 uses])

(note 53 52 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 53 104 5 arch/arm/kernel/ptrace.c:117 (set (reg/i:SI 0 r0)
        (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:163 D.26794 ] [163])
        (nil)))

(note 104 58 64 5 ( offset (nil)) NOTE_INSN_VAR_LOCATION)

(insn 64 104 94 5 arch/arm/kernel/ptrace.c:117 (use (reg/i:SI 0 r0)) -1 (nil))

(note 94 64 95 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 95 94 96 5 arch/arm/kernel/ptrace.c:117 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 96 95 91)

(note 91 96 92 NOTE_INSN_DELETED)

(note 92 91 0 NOTE_INSN_DELETED)


;; Function regs_within_kernel_stack (regs_within_kernel_stack)[0:1538]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: addr+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: addr
    offset 0
      (reg:SI 1 r1 [ addr ])

OUT:
Stack adjustment: 0
Reg 1: addr+0
Variables:
  name: addr
    offset 0
      (reg:SI 1 r1 [ addr ])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 24 [cc]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




regs_within_kernel_stack

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 24[cc]
;;  ref usage 	r0={4d,5u} r1={1d,1u} r2={1d} r3={3d,2u} r13={1d,2u} r14={1d,1u} r24={1d} 
;;    total ref usage 23{12d,11u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 37 NOTE_INSN_DELETED)

(note 37 1 38 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 38 37 5 2 ( addr (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 38 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 33 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 33 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 7 2 NOTE_INSN_DELETED)

(insn:TI 7 14 8 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(insn:TI 8 7 29 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 3 r3 [137])
        (xor:SI (reg:SI 1 r1 [ addr ])
            (reg:SI 3 r3 [orig:138 <variable>.uregs+52 ] [138]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [ addr ])
        (nil)))

(insn:TI 29 8 39 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(note 39 29 30 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 30 39 19 2 arch/arm/kernel/ptrace.c:131 (set (reg:SI 0 r0 [139])
        (and:SI (reg:SI 0 r0 [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 19 30 25 2 arch/arm/kernel/ptrace.c:131 (parallel [
            (set (reg/i:SI 0 r0)
                (eq:SI (reg:SI 0 r0 [139])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 25 19 34 2 arch/arm/kernel/ptrace.c:131 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 25 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 35 34 36 2 arch/arm/kernel/ptrace.c:131 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 31)

(note 31 36 32 NOTE_INSN_DELETED)

(note 32 31 0 NOTE_INSN_DELETED)


;; Function regs_get_kernel_stack_nth (regs_get_kernel_stack_nth)[0:1539]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: n+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: n
    offset 0
      (reg:SI 1 r1 [ n ])

OUT:
Stack adjustment: 0
Reg 1: n+0
Variables:
  name: n
    offset 0
      (reg:SI 1 r1 [ n ])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




regs_get_kernel_stack_nth

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d,2u} r2={5d,4u} r3={2d,3u} r13={1d,2u} r14={1d,1u} r24={1d,2u} 
;;    total ref usage 33{14d,19u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 49 NOTE_INSN_DELETED)

(note 49 1 50 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 50 49 5 2 ( n (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ n ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 50 45 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 45 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 45 4 2 NOTE_INSN_DELETED)

(note 4 2 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 4 12 2 NOTE_INSN_DELETED)

(note 12 9 7 2 NOTE_INSN_DELETED)

(insn:TI 7 12 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:244 (set (reg:SI 3 r3 [orig:134 D.27412 ] [134])
        (mem/s/j:SI (plus:SI (reg:SI 0 r0 [ regs ])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 7 51 2 arch/arm/kernel/ptrace.c:145 (set (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
        (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 270 {*arith_shiftsi} (nil))

(note 51 10 11 2 ( addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 51 52 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [141])
        (xor:SI (reg/v/f:SI 2 r2 [orig:133 addr.512 ] [133])
            (reg:SI 3 r3 [orig:134 D.27412 ] [134]))) 96 {*arm_xorsi3} (nil))

(note 52 11 41 2 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 41 52 42 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [141])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 42 41 14 2 arch/arm/kernel/ptrace.c:146 (set (reg:SI 2 r2 [142])
        (and:SI (reg:SI 2 r2 [142])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 14 42 17 2 arch/arm/kernel/ptrace.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [142])
        (nil)))

(insn:TI 17 14 53 2 arch/arm/kernel/ptrace.c:149 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 53 17 22 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 22 53 35 2 arch/arm/kernel/ptrace.c:147 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:136 D.26815 ] [136])
            (mem:SI (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:139 n ] [139])
                        (const_int 4 [0x4]))
                    (reg:SI 3 r3 [orig:134 D.27412 ] [134])) [0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.27412 ] [134])
            (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:139 n ] [139])
                (nil)))))

(insn 35 22 48 2 arch/arm/kernel/ptrace.c:150 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 48 35 47 2 arch/arm/kernel/ptrace.c:150 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 47 48 43)

(note 43 47 44 NOTE_INSN_DELETED)

(note 44 43 0 NOTE_INSN_DELETED)


;; Function ptrace_disable (ptrace_disable)[0:1542]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: child+0
Variables:
  name: child
    offset 0
      (reg:SI 0 r0 [ child ])

OUT:
Stack adjustment: 0
Reg 0: child+0
Variables:
  name: child
    offset 0
      (reg:SI 0 r0 [ child ])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_disable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 9{6d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 19 NOTE_INSN_DELETED)

(note 19 1 4 2 ( child (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ child ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 19 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 15 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 15 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 3 17 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 17 16 18 2 arch/arm/kernel/ptrace.c:192 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 18 17 13)

(note 13 18 14 NOTE_INSN_DELETED)

(note 14 13 0 NOTE_INSN_DELETED)


;; Function ptrace_write_user (ptrace_write_user)[0:1547]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tsk+0
Reg 1: off+0
Reg 2: val+0
Variables:
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg:SI 2 r2 [ val ])

OUT:
Stack adjustment: 88
Reg 0: ret+0
Reg 1: off+0
Reg 2: val+0
Reg 6: val+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])


Basic block 3:
IN:
Stack adjustment: 88
Reg 0: ret+0
Reg 1: off+0
Reg 2: val+0
Reg 6: val+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])

OUT:
Stack adjustment: 88
Reg 0: ret+0
Reg 1: off+0
Reg 2: val+0
Reg 6: val+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])


Basic block 4:
IN:
Stack adjustment: 88
Reg 0: ret+0
Reg 1: off+0
Reg 2: val+0
Reg 6: val+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])

OUT:
Stack adjustment: 88
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])


Basic block 5:
IN:
Stack adjustment: 88
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])

OUT:
Stack adjustment: 88
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])


Basic block 6:
IN:
Stack adjustment: 88
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])

OUT:
Stack adjustment: 88
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])


Basic block 7:
IN:
Stack adjustment: 88
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])

OUT:
Stack adjustment: 88
Reg 0: ret+0
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])


Basic block 8:
IN:
Stack adjustment: 88
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])

OUT:
Stack adjustment: 88
Reg 0: ret+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])


Basic block 9:
IN:
Stack adjustment: 88
Reg 0: ret+0
Reg 1: off+0
Reg 2: val+0
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:134 ret ] [134])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])

OUT:
Stack adjustment: 88
Reg 1: off+0
Reg 2: val+0
Reg 3: mode+0
Reg 4: regs+0
Reg 6: val+0
Variables:
  name: regs
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
  name: mode
    offset 0
      (reg/v:SI 3 r3 [orig:135 mode ] [135])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: val
    offset 0
      (reg/v:SI 6 r6 [orig:141 val ] [141])
      (reg:SI 2 r2 [ val ])


10 basic blocks, 14 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

Successors:  3 [61.0%]  (fallthru) 9 [39.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  4 [61.0%]  (fallthru) 9 [39.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  3 [61.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

Successors:  5 [50.0%]  (fallthru) 8 [50.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 1860, maybe hot.
Predecessors:  4 [50.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  7 [28.0%]  6 [72.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 1340, maybe hot.
Predecessors:  5 [72.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

Successors:  7 [50.0%]  (fallthru) 8 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 521, maybe hot.
Predecessors:  5 [28.0%]  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  9 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

Invalid sum of incoming frequencies 1191, should be 521

Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 3200, maybe hot.
Predecessors:  4 [50.0%]  6 [50.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

Invalid sum of incoming frequencies 2531, should be 3200

Basic block 9 , prev 8, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 3 [39.0%]  2 [39.0%]  7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 9, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_write_user

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={3d,6u} r2={7d,6u} r3={9d,10u} r4={4d,6u,1d} r5={2d,4u} r6={2d,4u} r12={1d} r13={3d,16u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={9d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 228{159d,68u,1e} in 41{40 regular + 1 call} insns.
(note 1 0 121 NOTE_INSN_DELETED)

(note 121 1 122 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 122 121 123 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 123 122 6 2 ( val (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ val ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 123 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 12 2 NOTE_INSN_DELETED)

(note 12 9 13 2 NOTE_INSN_DELETED)

(note 13 12 14 2 NOTE_INSN_DELETED)

(note 14 13 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 106 2 NOTE_INSN_DELETED)

(insn:TI 106 17 107 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [144])
                (and:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 107 106 18 2 arch/arm/kernel/ptrace.c:281 (set (reg:SI 3 r3 [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [144])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 18 107 19 2 arch/arm/kernel/ptrace.c:281 (parallel [
            (set (reg:SI 3 r3 [150])
                (ior:SI (geu:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
                        (const_int 296 [0x128]))
                    (reg:SI 3 r3 [144])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 19 18 111 2 arch/arm/kernel/ptrace.c:281 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 111 19 22 2 arch/arm/kernel/ptrace.c:280 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn:TI 22 111 124 2 arch/arm/kernel/ptrace.c:282 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
            (const_int -5 [0xfffffffffffffffb]))) 2345 {neon_vornv2di+78} (nil))

(note 124 22 125 2 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 125 124 112 2 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn/f:TI 112 125 113 2 arch/arm/kernel/ptrace.c:280 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 113 112 4 2 NOTE_INSN_PROLOGUE_END)

(insn 4 113 20 2 arch/arm/kernel/ptrace.c:280 (set (reg/v:SI 6 r6 [orig:141 val ] [141])
        (reg:SI 2 r2 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ val ])
        (nil)))

(jump_insn:TI 20 4 126 2 arch/arm/kernel/ptrace.c:281 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 9)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  9 [39.0%] 

(note 126 20 26 3 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:141 val ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 26 126 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 30 3 arch/arm/kernel/ptrace.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 30 27 28 3 arch/arm/kernel/ptrace.c:285 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
            (reg:SI 3 r3 [150]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (nil)))

(jump_insn:TI 28 30 34 3 arch/arm/kernel/ptrace.c:284 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  9 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 34 28 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 39 34 48 4 NOTE_INSN_DELETED)

(note 48 39 50 4 NOTE_INSN_DELETED)

(note 50 48 53 4 NOTE_INSN_DELETED)

(note 53 50 36 4 NOTE_INSN_DELETED)

(insn:TI 36 53 127 4 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
        (nil)))

(note 127 36 35 4 ( tsk (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:139 tsk ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 35 127 44 4 arch/arm/kernel/ptrace.c:287 (set (reg:SI 5 r5 [orig:137 D.26920 ] [137])
        (lshiftrt:SI (reg/v:SI 1 r1 [orig:140 off ] [140])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:140 off ] [140])
        (nil)))

(insn:TI 44 35 42 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(insn 42 44 128 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 128 42 129 4 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 129 128 37 4 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 37 129 38 4 arch/arm/kernel/ptrace.c:172 (set (reg/f:SI 4 r4 [152])
        (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 38 37 130 4 arch/arm/kernel/ptrace.c:172 (set (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
        (plus:SI (reg/f:SI 4 r4 [152])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 4 r4 [orig:151 <variable>.stack ] [151])
            (const_int 8112 [0x1fb0]))
        (nil)))

(note 130 38 43 4 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:133 regs ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 43 130 131 4 arch/arm/kernel/ptrace.c:175 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) 167 {*arm_movsi_insn} (nil))

(note 131 43 45 4 ( off (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 45 131 110 4 arch/arm/kernel/ptrace.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 110 45 49 4 arch/arm/kernel/ptrace.c:176 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 72 [0x48]))) 4 {*arm_addsi3} (nil))

(insn:TI 49 110 51 4 arch/arm/kernel/ptrace.c:176 (set (reg:SI 3 r3 [159])
        (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                (const_int 4 [0x4]))
            (reg:SI 2 r2))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 51 49 52 4 arch/arm/kernel/ptrace.c:176 (set (mem/s/j:SI (plus:SI (reg:SI 3 r3 [159])
                (const_int -72 [0xffffffffffffffb8])) [0 newregs.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [159])
        (nil)))

(insn:TI 52 51 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 3 r3 [orig:136 D.27452 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 54 52 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 132 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 3 r3 [orig:135 mode ] [135])
        (and:SI (reg:SI 3 r3 [orig:136 D.27452 ] [136])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(note 132 57 58 5 ( mode (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 mode ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 58 132 59 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 59 58 60 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [28.0%] 
;; Succ edge  6 [72.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  5 [72.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(note 62 61 66 6 NOTE_INSN_DELETED)

(note 66 62 70 6 NOTE_INSN_DELETED)

(note 70 66 71 6 NOTE_INSN_DELETED)

(note 71 70 64 6 NOTE_INSN_DELETED)

(insn:TI 64 71 65 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 2 r2 [164])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn:TI 65 64 68 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
        (mem/c/i:SI (reg/f:SI 2 r2 [164]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 68 65 72 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 2 r2 [168])
        (zero_extract:SI (reg:SI 2 r2 [orig:166 elf_hwcap ] [166])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 72 68 133 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 3 r3 [172])
                (and:SI (eq:SI (reg/v:SI 3 r3 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 2 r2 [168])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 2 r2 [168])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(note 133 72 73 6 ( mode (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 73 133 74 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [172])
        (nil)))

(jump_insn:TI 74 73 134 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

(note 134 74 75 7 ( mode (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 mode ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [28.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
(code_label 75 134 76 7 22 "" [1 uses])

(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 76 78 7 arch/arm/kernel/ptrace.c:179 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 5 r5 [orig:137 D.26920 ] [137])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 4 r4 [orig:133 regs ] [133])) [0 <variable>.uregs S4 A32])
        (reg/v:SI 6 r6 [orig:141 val ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 135 7 arch/arm/kernel/ptrace.c:180 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 135 78 119 7 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 119 135 120 7 (set (pc)
        (label_ref 84)) -1 (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 120 119 136)

(note 136 120 137 8 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 137 136 81 8 ( mode (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  6 [50.0%] 
(code_label 81 137 82 8 21 "" [2 uses])

(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 83 82 138 8 arch/arm/kernel/ptrace.c:173 (set (reg/v:SI 0 r0 [orig:134 ret ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

(note 138 83 139 9 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 ret ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 139 138 140 9 ( mode (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:135 mode ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 140 139 141 9 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 141 140 84 9 ( val (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:141 val ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 3 2 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  3 [39.0%] 
;; Pred edge  2 [39.0%] 
;; Pred edge  7 [100.0%] 
(code_label 84 141 85 9 19 "" [3 uses])

(note 85 84 96 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 96 85 142 9 arch/arm/kernel/ptrace.c:288 (use (reg/i:SI 0 r0)) -1 (nil))

(note 142 96 114 9 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 114 142 115 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 115 114 116 9 arch/arm/kernel/ptrace.c:288 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 116 115 108)

(note 108 116 109 NOTE_INSN_DELETED)

(note 109 108 0 NOTE_INSN_DELETED)


;; Function task_user_regset_view (task_user_regset_view)[0:1563]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: task+0
Variables:
  name: task
    offset 0
      (reg:SI 0 r0 [ task ])

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




task_user_regset_view

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 12{7d,5u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 28 NOTE_INSN_DELETED)

(note 28 1 4 2 ( task (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ task ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 28 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 24 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 24 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 12 2 NOTE_INSN_DELETED)

(insn:TI 12 7 29 2 arch/arm/kernel/ptrace.c:786 (set (reg/i:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 152 [0x98])))
        (nil)))

(note 29 12 18 2 ( task (nil)) NOTE_INSN_VAR_LOCATION)

(insn 18 29 25 2 arch/arm/kernel/ptrace.c:786 (use (reg/i:SI 0 r0)) -1 (nil))

(note 25 18 26 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 26 25 27 2 arch/arm/kernel/ptrace.c:786 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 27 26 22)

(note 22 27 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)


;; Function ptrace_break_init (ptrace_break_init)[0:1545] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 8


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_break_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r3={4d} r4={2d,5u} r12={3d} r13={2d,6u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 382{364d,18u,0e} in 11{8 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 13 2 NOTE_INSN_DELETED)

(note 13 9 16 2 NOTE_INSN_DELETED)

(note 16 13 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 16 33 2 arch/arm/kernel/ptrace.c:240 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -8 [0xfffffffffffffff8])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 33 32 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 33 6 2 arch/arm/kernel/ptrace.c:241 (set (reg/f:SI 4 r4 [134])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 arch/arm/kernel/ptrace.c:241 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn:TI 7 6 10 2 arch/arm/kernel/ptrace.c:241 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 10 7 11 2 arch/arm/kernel/ptrace.c:242 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn:TI 11 10 14 2 arch/arm/kernel/ptrace.c:242 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 11 15 2 arch/arm/kernel/ptrace.c:243 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [134])
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 56 [0x38])))
        (nil)))

(call_insn:TI 15 14 20 2 arch/arm/kernel/ptrace.c:243 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_undef_hook") [flags 0x41] <function_decl 0x11539500 register_undef_hook>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 20 15 26 2 arch/arm/kernel/ptrace.c:245 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 20 34 2 arch/arm/kernel/ptrace.c:245 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 26 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 35 34 36 2 arch/arm/kernel/ptrace.c:245 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 30)

(note 30 36 31 NOTE_INSN_DELETED)

(note 31 30 0 NOTE_INSN_DELETED)


;; Function syscall_trace (syscall_trace)[0:1565]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: why+0
Reg 1: regs+0
Reg 2: scno+0
Variables:
  name: why
    offset 0
      (reg:SI 0 r0 [ why ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])

OUT:
Stack adjustment: 16
Reg 0: why+0
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Variables:
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
      (reg:SI 0 r0 [ why ])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: why+0
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Variables:
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
      (reg:SI 0 r0 [ why ])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])

OUT:
Stack adjustment: 16
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Variables:
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])


Basic block 4:
IN:
Stack adjustment: 16
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Variables:
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])

OUT:
Stack adjustment: 16
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])


Basic block 5:
IN:
Stack adjustment: 16
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])

OUT:
Stack adjustment: 16
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])


Basic block 6:
IN:
Stack adjustment: 16
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])

OUT:
Stack adjustment: 16
Reg 2: scno+0
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg/v:SI 2 r2 [orig:149 scno ] [149])


Basic block 7:
IN:
Stack adjustment: 16
Reg 0: why+0
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
      (reg:SI 0 r0 [ why ])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])

OUT:
Stack adjustment: 16
Reg 2: scno+0
Reg 3: why+0
Reg 5: regs+0
Reg 6: ip+0
Variables:
  name: ip
    offset 0
      (reg/v:SI 6 r6 [orig:144 ip ] [144])
  name: why
    offset 0
      (reg/v:SI 3 r3 [orig:147 why ] [147])
  name: regs
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
  name: scno
    offset 0
      (reg:SI 2 r2 [ scno ])


8 basic blocks, 10 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  3 [61.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  4 [61.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  3 [61.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

Successors:  5 [29.0%]  (fallthru) 6 [71.0%] 
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 1079, maybe hot.
Predecessors:  4 [29.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  6 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  4 [71.0%]  5 [100.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [39.0%]  3 [39.0%]  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




syscall_trace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={6d,6u,1d} r2={7d,5u} r3={9d,6u} r4={3d,8u} r5={2d,5u} r6={2d,3u} r12={2d} r13={2d,12u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={6d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 328{269d,58u,1e} in 37{35 regular + 2 call} insns.
(note 1 0 113 NOTE_INSN_DELETED)

(note 113 1 114 2 ( why (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ why ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 114 113 115 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 115 114 6 2 ( scno (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ scno ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 115 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 12 2 NOTE_INSN_DELETED)

(note 12 9 108 2 NOTE_INSN_DELETED)

(insn/f:TI 108 12 109 2 arch/arm/kernel/ptrace.c:905 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 109 108 106 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 106 109 102 2 include/linux/thread_info.h:84 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 102 106 3 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 3 102 103 2 arch/arm/kernel/ptrace.c:905 (set (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn:TI 103 3 2 2 include/linux/thread_info.h:84 (set (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
        (and:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 103 11 2 arch/arm/kernel/ptrace.c:905 (set (reg/v:SI 3 r3 [orig:147 why ] [147])
        (reg:SI 0 r0 [ why ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ why ])
        (nil)))

(insn:TI 11 2 116 2 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 1 r1 [orig:142 D.27480 ] [142])
        (mem/v:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 116 11 13 2 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 116 14 2 arch/arm/kernel/ptrace.c:908 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:142 D.27480 ] [142])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:142 D.27480 ] [142])
        (nil)))

(jump_insn:TI 14 13 117 2 arch/arm/kernel/ptrace.c:908 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

(note 117 14 15 3 ( why (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 why ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 15 117 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 15 19 3 NOTE_INSN_DELETED)

(insn:TI 19 21 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 19 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])
        (nil)))

(insn:TI 22 20 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:156 <variable>.ptrace ] [156])
        (nil)))

(jump_insn:TI 23 22 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  4 [61.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [61.0%]  (fallthru)
(note 24 23 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 36 24 99 4 NOTE_INSN_DELETED)

(note 99 36 30 4 NOTE_INSN_DELETED)

(insn:TI 30 99 25 4 arch/arm/kernel/ptrace.c:920 (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (nil)))

(insn:TI 25 30 118 4 arch/arm/kernel/ptrace.c:917 (set (reg/v:SI 6 r6 [orig:144 ip ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 118 25 26 4 ( ip (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:144 ip ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 26 118 35 4 arch/arm/kernel/ptrace.c:918 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 3 r3 [orig:147 why ] [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:147 why ] [147])
        (nil)))

(insn:TI 35 26 119 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
                (const_int 16 [0x10])) [0 <variable>.ptrace+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:154 <variable>.task ] [154])
        (nil)))

(note 119 35 37 4 ( why (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 37 119 48 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:163 <variable>.ptrace ] [163])
        (nil)))

(insn:TI 48 37 49 4 arch/arm/kernel/ptrace.c:924 discrim 3 (set (reg:SI 0 r0)
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 133 [0x85])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(call_insn:TI 49 48 120 4 arch/arm/kernel/ptrace.c:924 discrim 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_notify") [flags 0x41] <function_decl 0x1109c700 ptrace_notify>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 120 49 53 4 ( scno (nil)) NOTE_INSN_VAR_LOCATION)

(insn 53 120 54 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 54 53 55 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:166 <variable>.task ] [166])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 54 56 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:167 <variable>.exit_code ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 56 55 57 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 57 56 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 67 57 68 5 arch/arm/kernel/ptrace.c:932 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 68 67 72 5 arch/arm/kernel/ptrace.c:932 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig") [flags 0x41] <function_decl 0x10f01b80 send_sig>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 72 68 73 5 arch/arm/kernel/ptrace.c:933 (set (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [orig:141 D.27485 ] [141])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 73 72 74 5 arch/arm/kernel/ptrace.c:933 (set (reg:SI 2 r2 [176])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 74 73 75 5 arch/arm/kernel/ptrace.c:933 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
                (const_int 508 [0x1fc])) [0 <variable>.exit_code+0 S4 A32])
        (reg:SI 2 r2 [176])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:175 <variable>.task ] [175])
        (expr_list:REG_DEAD (reg:SI 2 r2 [176])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 75 74 76 6 38 "" [1 uses])

(note 76 75 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 79 76 107 6 NOTE_INSN_DELETED)

(insn:TI 107 79 77 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 107 100 6 arch/arm/kernel/ptrace.c:935 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:148 regs ] [148])
                (const_int 48 [0x30])) [0 <variable>.uregs+48 S4 A32])
        (reg/v:SI 6 r6 [orig:144 ip ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 100 77 101 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 101 100 81 6 arch/arm/kernel/ptrace.c:937 (set (reg:SI 3 r3 [177])
        (and:SI (reg:SI 3 r3 [177])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 81 101 121 6 arch/arm/kernel/ptrace.c:937 (set (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [177])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [177])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 121 81 122 7 ( scno (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:149 scno ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 122 121 82 7 ( why (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 why ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 82 122 83 7 35 "" [2 uses])

(note 83 82 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 88 83 94 7 arch/arm/kernel/ptrace.c:938 (set (reg/i:SI 0 r0)
        (reg/v:SI 2 r2 [orig:149 scno ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:149 scno ] [149])
        (nil)))

(insn 94 88 110 7 arch/arm/kernel/ptrace.c:938 (use (reg/i:SI 0 r0)) -1 (nil))

(note 110 94 111 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 111 110 112 7 arch/arm/kernel/ptrace.c:938 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 112 111 104)

(note 104 112 105 NOTE_INSN_DELETED)

(note 105 104 0 NOTE_INSN_DELETED)


;; Function vfp_set (vfp_set)[0:1562]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 3:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])


Basic block 4:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 0: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 5:
IN:
Stack adjustment: 312
Reg 0: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 6:
IN:
Stack adjustment: 312
Reg 0: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 7:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 8:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 9:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 10:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])


Basic block 11:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 0: data+0
Reg 2: copy+0
Reg 4: thread+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 data ] [135])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 12:
IN:
Stack adjustment: 312
Reg 0: data+0
Reg 2: copy+0
Reg 4: thread+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 data ] [135])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 13:
IN:
Stack adjustment: 312
Reg 0: data+0
Reg 2: copy+0
Reg 4: thread+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 data ] [135])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 14:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 0: ret+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:140 ret ] [140])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 15:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 0: ret+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:140 ret ] [140])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 16:
IN:
Stack adjustment: 312
Reg 0: ret+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:140 ret ] [140])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 17:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])


Basic block 18:
IN:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])

OUT:
Stack adjustment: 312
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])


19 basic blocks, 26 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  (fallthru) 17 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [85.0%]  (fallthru) 6 [15.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 2125, maybe hot.
Predecessors:  4 [85.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

Successors:  8 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 375, maybe hot.
Predecessors:  4 [15.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

Successors:  15 [50.0%]  7 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 187, maybe hot.
Predecessors:  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

Successors:  8 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 2313, maybe hot.
Predecessors:  7 [100.0%]  (fallthru) 5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

Successors:  14 9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 2313, maybe hot.
Predecessors:  8 [100.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

Successors:  10 [0.2%]  (fallthru) 17 [99.8%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 1.
Predecessors:  9 [0.2%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 1524, maybe hot.
Predecessors:  17 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

Successors:  12 [85.0%]  (fallthru) 13 [15.0%] 
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 763, should be 1524

Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 1296, maybe hot.
Predecessors:  11 [85.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  14 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 228, maybe hot.
Predecessors:  11 [15.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  15 [50.0%]  14 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  12 [100.0%]  2 [50.0%]  8 13 [50.0%]  (fallthru) 18 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  16 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 7173, should be 0

Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 9998, maybe hot.
Predecessors:  6 [50.0%]  13 [50.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  16 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 302, should be 9998

Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 9998, maybe hot.
Predecessors:  15 [100.0%]  (fallthru) 14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 1525, maybe hot.
Predecessors:  3 [50.0%]  9 [99.8%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  11 [50.0%]  18 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 4808, should be 1525

Basic block 18 , prev 17, next 1, loop_depth 0, count 0, freq 763, maybe hot.
Predecessors:  17 [50.0%]  (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}

Successors:  14 [100.0%] 


Basic block 1 , prev 18, loop_depth 0, count 0, freq 9998, maybe hot.
Predecessors:  16 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




vfp_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,14u} r1={17d,7u} r2={16d,8u} r3={11d,2u} r4={2d,6u} r5={4d,11u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={2d,2u} r10={3d,5u} r12={9d} r13={3d,37u,4d} r14={10d,2u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,9u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1246{1115d,127u,4e} in 70{61 regular + 9 call} insns.
(note 1 0 183 NOTE_INSN_DELETED)

(note 183 1 184 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 184 183 185 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 185 184 186 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 186 185 187 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 187 186 188 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 188 187 9 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 188 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 8 158 2 NOTE_INSN_DELETED)

(insn/f:TI 158 13 11 2 arch/arm/kernel/ptrace.c:698 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 7 r7)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(insn:TI 11 158 189 2 arch/arm/kernel/ptrace.c:700 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(note 189 11 159 2 ( thread (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn/f:TI 159 189 160 2 arch/arm/kernel/ptrace.c:698 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -280 [0xfffffffffffffee8]))) 4 {*arm_addsi3} (nil))

(note 160 159 5 2 NOTE_INSN_PROLOGUE_END)

(insn 5 160 4 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn:TI 4 5 15 2 arch/arm/kernel/ptrace.c:698 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn 15 4 190 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(note 190 15 16 2 ( target (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 16 190 191 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(note 191 16 17 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(insn 17 191 192 2 arch/arm/kernel/ptrace.c:701 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(note 192 17 6 2 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:144 pos ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 6 192 12 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 312 [0x138])) [0 kbuf+0 S4 A32])
        (nil)))

(insn 12 6 7 2 arch/arm/kernel/ptrace.c:701 (set (reg/f:SI 9 r9 [148])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 7 12 18 2 arch/arm/kernel/ptrace.c:698 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 316 [0x13c])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 18 7 193 2 arch/arm/kernel/ptrace.c:701 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 193 18 20 2 ( count (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:145 count ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 20 193 21 2 include/linux/regset.h:249 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 21 20 194 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 14 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

(note 194 21 195 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 195 194 22 3 ( ubuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 22 195 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 24 23 25 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 25 196 4 include/linux/regset.h:254 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(note 196 26 29 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 copy ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 29 196 197 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 13 sp [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(note 197 29 27 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 27 197 30 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 30 27 31 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 31 30 32 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 32 31 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 32 38 5 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 38 37 41 5 include/linux/regset.h:257 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 41 38 39 5 include/linux/regset.h:258 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 39 41 198 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 198 39 174 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 174 198 175 5 (set (pc)
        (label_ref 55)) -1 (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 175 174 199)

(note 199 175 200 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 200 199 44 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 44 200 45 6 43 "" [1 uses])

(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 50 45 47 6 NOTE_INSN_DELETED)

(insn:TI 47 50 48 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 6 include/linux/regset.h:259 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 49 48 201 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 201 49 51 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 51 201 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 52 51 53 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 15 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 53 202 7 include/linux/regset.h:262 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

(note 202 54 55 8 ( ubuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 55 202 56 8 44 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 57 56 58 8 NOTE_INSN_DELETED)

(insn:TI 58 57 59 8 include/linux/regset.h:305 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn:TI 59 58 60 8 include/linux/regset.h:305 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 14 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 60 62 9 include/linux/regset.h:263 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(insn:TI 62 61 63 9 include/linux/regset.h:307 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 63 62 64 9 include/linux/regset.h:307 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  17 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 64 63 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 67 64 68 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 68 67 69 10 include/linux/regset.h:307 discrim 1 (set (reg:SI 1 r1)
        (const_int 307 [0x133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 307 [0x133])
        (nil)))

(call_insn:TI 69 68 70 10 include/linux/regset.h:307 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 70 69 127)

;; Start of basic block ( 17) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%] 
(code_label 127 70 71 11 48 "" [1 uses])

(note 71 127 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 74 71 75 11 NOTE_INSN_DELETED)

(note 75 74 72 11 NOTE_INSN_DELETED)

(insn:TI 72 75 203 11 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(note 203 72 156 11 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 156 203 73 11 include/linux/regset.h:255 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 280 [0x118]))) 4 {*arm_addsi3} (nil))

(insn:TI 73 156 78 11 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 78 73 76 11 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 76 78 204 11 include/linux/regset.h:255 (set (reg:SI 5 r5 [161])
        (plus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(note 204 76 77 11 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 77 204 205 11 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:135 data ] [135])
        (plus:SI (reg:SI 5 r5 [161])
            (const_int -276 [0xfffffffffffffeec]))) 4 {*arm_addsi3} (nil))

(note 205 77 79 11 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 data ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 79 205 80 11 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 80 79 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 85 80 87 12 include/linux/regset.h:257 (set (reg:SI 1 r1)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 87 85 207 12 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 207 87 206 12 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 206 207 176 12 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 176 206 177 12 (set (pc)
        (label_ref 100)) -1 (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 177 176 208)

(note 208 177 209 13 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 209 208 91 13 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 data ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 91 209 92 13 46 "" [1 uses])

(note 92 91 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 97 92 94 13 NOTE_INSN_DELETED)

(insn:TI 94 97 96 13 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 96 94 211 13 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 211 96 210 13 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 210 211 98 13 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 98 210 99 13 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 99 98 212 13 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

(note 212 99 100 14 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:144 pos ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12 2 8 13 18) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%] 
;; Pred edge  2 [50.0%] 
;; Pred edge  8
;; Pred edge  13 [50.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 100 212 101 14 41 "" [4 uses])

(note 101 100 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 104 101 105 14 NOTE_INSN_DELETED)

(note 105 104 102 14 NOTE_INSN_DELETED)

(insn:TI 102 105 103 14 arch/arm/kernel/ptrace.c:725 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 103 102 108 14 arch/arm/kernel/ptrace.c:725 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 108 103 109 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 108 107 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(insn 107 109 110 14 arch/arm/kernel/ptrace.c:726 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 110 107 112 14 arch/arm/kernel/ptrace.c:726 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 112 110 113 14 arch/arm/kernel/ptrace.c:727 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 113 112 114 14 arch/arm/kernel/ptrace.c:727 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_flush_hwstate") [flags 0x41] <function_decl 0x10a83b80 vfp_flush_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 114 113 213 14 arch/arm/kernel/ptrace.c:729 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 213 114 178 14 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 ret ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 178 213 179 14 arch/arm/kernel/ptrace.c:729 (set (pc)
        (label_ref 120)) -1 (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 179 178 214)

(note 214 179 117 15 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%] 
(code_label 117 214 118 15 45 "" [2 uses])

(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 119 118 215 15 include/linux/regset.h:260 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

(note 215 119 120 16 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 ret ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 120 215 121 16 47 "" [1 uses])

(note 121 120 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 141 121 216 16 arch/arm/kernel/ptrace.c:730 (use (reg/i:SI 0 r0)) -1 (nil))

(note 216 141 161 16 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 161 216 162 16 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 162 161 163 16 arch/arm/kernel/ptrace.c:730 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 163 162 125)

;; Start of basic block ( 3 9) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 125 163 126 17 42 "" [2 uses])

(note 126 125 128 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 128 126 129 17 NOTE_INSN_DELETED)

(insn:TI 129 128 130 17 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 130 129 180 17 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 11 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}

;; Pred edge  17 [50.0%]  (fallthru)
(note 180 130 181 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn 181 180 182 18 (set (pc)
        (label_ref 100)) -1 (nil))
;; End of basic block 18 -> ( 14)


;; Succ edge  14 [100.0%] 

(barrier 182 181 155)

(note 155 182 0 NOTE_INSN_DELETED)


;; Function fpa_set (fpa_set)[0:1560]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: pos+0
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: pos+0
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: pos+0
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 8
Reg 0: pos+0
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:136 data ] [136])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])


Basic block 5:
IN:
Stack adjustment: 8
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:136 data ] [136])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 6:
IN:
Stack adjustment: 8
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:136 data ] [136])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 7:
IN:
Stack adjustment: 8
Reg 0: pos+0
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])

OUT:
Stack adjustment: 8
Reg 1: kbuf+0
Reg 3: count+0
Reg 12: thread+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 12 ip [orig:137 thread ] [137])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])


8 basic blocks, 11 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  3 [61.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [61.0%]  (fallthru) 7 [39.0%] 
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  3 [61.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [99.3%]  (fallthru) 6 [0.7%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 3694, maybe hot.
Predecessors:  4 [99.3%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 27, maybe hot.
Predecessors:  4 [0.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [61.0%]  (fallthru) EXIT [39.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 6295, maybe hot.
Predecessors:  2 [39.0%]  3 [39.0%]  6 [61.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  5 [100.0%]  6 [39.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




fpa_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,10u} r1={5d,3u} r2={6d,6u} r3={4d,3u} r4={1d,2u} r12={4d,4u} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 308{260d,47u,1e} in 28{26 regular + 2 call} insns.
(note 1 0 86 NOTE_INSN_DELETED)

(note 86 1 87 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 87 86 88 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 88 87 89 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 89 88 90 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 90 89 91 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 90 9 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 91 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 80 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 80 8 81 2 arch/arm/kernel/ptrace.c:624 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 81 80 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 81 92 2 arch/arm/kernel/ptrace.c:625 (set (reg/v/f:SI 12 ip [orig:137 thread ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(note 92 11 18 2 ( thread (expr_list:REG_DEP_TRUE (reg/v/f:SI 12 ip [orig:137 thread ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 18 92 6 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 6 18 93 2 arch/arm/kernel/ptrace.c:624 (set (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(note 93 6 4 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 4 93 94 2 arch/arm/kernel/ptrace.c:624 (set (reg/v:SI 0 r0 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(note 94 4 12 2 ( target (nil)) NOTE_INSN_VAR_LOCATION)

(insn 12 94 95 2 arch/arm/kernel/ptrace.c:627 (set (reg:SI 2 r2 [145])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(note 95 12 17 2 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 17 95 14 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 81 [0x51])) [0 <variable>.used_cp+1 S1 A8])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 14 17 19 2 arch/arm/kernel/ptrace.c:627 (set (mem/s/j:QI (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
                (const_int 82 [0x52])) [0 <variable>.used_cp+2 S1 A16])
        (reg:QI 2 r2 [145])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 2 r2 [145])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(jump_insn 19 14 96 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

(note 96 19 20 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 20 96 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 23 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 97 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(note 97 24 26 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 26 97 98 4 include/linux/regset.h:255 (set (reg/f:SI 12 ip [149])
        (plus:SI (reg/v/f:SI 12 ip [orig:137 thread ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(note 98 26 25 4 ( thread (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 25 98 28 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 28 25 27 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 27 28 99 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [149])
            (reg/v:SI 0 r0 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [149])
        (nil)))

(note 99 27 100 4 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(note 100 99 29 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 29 100 30 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 30 29 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 37 30 104 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 104 37 103 5 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 103 104 102 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 102 103 101 5 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 101 102 39 5 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn 39 101 82 5 include/linux/regset.h:266 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 82 39 75 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 75 82 105)

(note 105 75 106 6 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 106 105 107 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 107 106 108 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 42 6 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 42 108 43 6 54 "" [1 uses])

(note 43 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 48 43 45 6 NOTE_INSN_DELETED)

(insn:TI 45 48 109 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 109 45 47 6 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 47 109 112 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 112 47 111 6 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 111 112 110 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 110 111 49 6 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 49 110 52 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 52 49 50 6 include/linux/regset.h:260 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 50 52 113 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

(note 113 50 114 7 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 114 113 115 7 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 115 114 116 7 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 116 115 55 7 ( thread (expr_list:REG_DEP_TRUE (reg/v/f:SI 12 ip [orig:137 thread ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 55 116 56 7 53 "" [2 uses])

(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 56 117 7 include/linux/regset.h:250 (set (reg:SI 0 r0 [orig:135 D.27612 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 117 57 70 7 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(insn 70 117 85 7 arch/arm/kernel/ptrace.c:632 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 85 70 84 7 arch/arm/kernel/ptrace.c:632 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 84 85 78)

(note 78 84 79 NOTE_INSN_DELETED)

(note 79 78 0 NOTE_INSN_DELETED)


;; Function gpr_set (gpr_set)[0:1558]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 80
Reg 0: pos+0
Reg 1: kbuf+0
Reg 2: pos+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
      (reg:SI 2 r2 [ pos ])


Basic block 3:
IN:
Stack adjustment: 80
Reg 0: pos+0
Reg 1: kbuf+0
Reg 2: pos+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
      (reg:SI 2 r2 [ pos ])

OUT:
Stack adjustment: 80
Reg 0: pos+0
Reg 1: kbuf+0
Reg 2: pos+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:143 pos ] [143])
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 80
Reg 0: pos+0
Reg 1: kbuf+0
Reg 2: pos+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:143 pos ] [143])
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 80
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:137 copy ] [137])


Basic block 5:
IN:
Stack adjustment: 80
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:137 copy ] [137])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 80
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])


Basic block 6:
IN:
Stack adjustment: 80
Reg 0: data+0
Reg 1: kbuf+0
Reg 2: copy+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:137 copy ] [137])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: data
    offset 0
      (reg/v/f:SI 0 r0 [orig:138 data ] [138])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 80
Reg 0: ret+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])


Basic block 7:
IN:
Stack adjustment: 80
Reg 0: ret+0 pos+0
Reg 1: kbuf+0
Reg 2: pos+0
Reg 3: count+0
Reg 4: target+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
      (reg:SI 2 r2 [ pos ])

OUT:
Stack adjustment: 80
Reg 0: pos+0 ret+0
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])


Basic block 8:
IN:
Stack adjustment: 80
Reg 0: ret+0 pos+0
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])

OUT:
Stack adjustment: 80
Reg 0: pos+0 ret+0
Reg 1: kbuf+0
Reg 2: mode+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: mode
    offset 0
      (reg/v:SI 2 r2 [orig:135 mode ] [135])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])


Basic block 9:
IN:
Stack adjustment: 80
Reg 0: ret+0 pos+0
Reg 1: kbuf+0
Reg 2: mode+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
  name: mode
    offset 0
      (reg/v:SI 2 r2 [orig:135 mode ] [135])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])

OUT:
Stack adjustment: 80
Reg 0: pos+0 ret+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])


Basic block 10:
IN:
Stack adjustment: 80
Reg 0: ret+0 pos+0
Reg 1: kbuf+0
Reg 2: mode+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: mode
    offset 0
      (reg/v:SI 2 r2 [orig:135 mode ] [135])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])

OUT:
Stack adjustment: 80
Reg 0: ret+0
Reg 4: target+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])


Basic block 11:
IN:
Stack adjustment: 80
Reg 0: ret+0 pos+0
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: pos
    offset 0
      (reg/v:SI 0 r0 [orig:143 pos ] [143])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])

OUT:
Stack adjustment: 80
Reg 0: ret+0
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])


Basic block 12:
IN:
Stack adjustment: 80
Reg 0: ret+0
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:139 ret ] [139])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])

OUT:
Stack adjustment: 80
Reg 1: kbuf+0
Reg 4: target+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 target ] [141])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])


13 basic blocks, 19 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  (fallthru) 7 [50.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [85.0%]  (fallthru) 6 [15.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 2125, maybe hot.
Predecessors:  4 [85.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  7 [100.0%] 
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 375, maybe hot.
Predecessors:  4 [15.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [50.0%]  (fallthru) 12 [50.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  2 [50.0%]  3 [50.0%]  6 [50.0%]  (fallthru) 5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  8 [50.0%]  (fallthru) 11 [50.0%] 
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 9813, should be 5000

Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 200, maybe hot.
Predecessors:  7 [50.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  10 [28.0%]  9 [72.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 2500, should be 200

Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 144, maybe hot.
Predecessors:  8 [72.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

Successors:  10 [50.0%]  (fallthru) 11 [50.0%] 
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 56, maybe hot.
Predecessors:  8 [28.0%]  9 [50.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  12 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 9756, maybe hot.
Predecessors:  7 [50.0%]  9 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  12 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 2572, should be 9756

Basic block 12 , prev 11, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  11 [100.0%]  (fallthru) 6 [50.0%]  10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 12, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  12 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




gpr_set

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,11u} r1={10d,7u} r2={10d,13u} r3={6d,4u} r4={2d,3u} r12={3d} r13={3d,24u,1d} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={12d,8u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 465{392d,72u,1e} in 46{43 regular + 3 call} insns.
(note 1 0 133 NOTE_INSN_DELETED)

(note 133 1 134 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 134 133 135 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 135 134 136 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 136 135 137 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 137 136 138 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 138 137 9 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 138 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 9 8 2 NOTE_INSN_DELETED)

(note 8 5 119 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 119 8 11 2 arch/arm/kernel/ptrace.c:593 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn:TI 11 119 120 2 include/linux/regset.h:249 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:144 count ] [144])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn/f:TI 120 11 121 2 arch/arm/kernel/ptrace.c:593 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 121 120 2 2 NOTE_INSN_PROLOGUE_END)

(insn 2 121 4 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 4 r4 [orig:141 target ] [141])
        (reg:SI 0 r0 [ target ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 4 2 139 2 arch/arm/kernel/ptrace.c:593 (set (reg/v:SI 0 r0 [orig:143 pos ] [143])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(note 139 4 6 2 ( target (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:141 target ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 6 139 140 2 arch/arm/kernel/ptrace.c:593 (set (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 kbuf+0 S4 A32])
        (nil)))

(note 140 6 12 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 12 140 141 2 include/linux/regset.h:249 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

(note 141 12 142 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 142 141 13 3 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:143 pos ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 142 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 14 13 15 3 include/linux/regset.h:252 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:143 pos ] [143])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 143 3 include/linux/regset.h:252 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

(note 143 15 16 4 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [orig:143 pos ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 16 143 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 144 4 include/linux/regset.h:254 (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
        (minus:SI (const_int 72 [0x48])
            (reg:SI 2 r2 [orig:143 pos ] [143]))) 28 {*arm_subsi3_insn} (nil))

(note 144 17 145 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 copy ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 145 144 20 4 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:143 pos ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 20 145 146 4 include/linux/regset.h:255 (set (reg/v/f:SI 0 r0 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 13 sp [147])
            (reg/v:SI 0 r0 [orig:143 pos ] [143]))) 4 {*arm_addsi3} (nil))

(note 146 20 147 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 147 146 18 4 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 18 147 21 4 include/linux/regset.h:254 (parallel [
            (set (reg/v:SI 2 r2 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 2 r2 [orig:137 copy ] [137])
                    (reg/v:SI 3 r3 [orig:144 count ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:144 count ] [144])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 21 18 22 4 include/linux/regset.h:256 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 22 21 23 4 include/linux/regset.h:256 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 23 22 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 30 23 151 5 include/linux/regset.h:257 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 151 30 150 5 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 150 151 149 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 149 150 148 5 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 148 149 129 5 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 129 148 130 5 (set (pc)
        (label_ref 47)) -1 (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 130 129 152)

(note 152 130 153 6 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 153 152 154 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:145 kbuf ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 154 153 155 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 155 154 34 6 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:137 copy ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 34 155 35 6 59 "" [1 uses])

(note 35 34 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 40 35 37 6 NOTE_INSN_DELETED)

(insn:TI 37 40 156 6 include/linux/regset.h:259 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 156 37 39 6 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 39 156 159 6 include/linux/regset.h:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_from_user") [flags 0x41] <function_decl 0x113a2f80 __copy_from_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 159 39 158 6 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 158 159 157 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 157 158 41 6 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 41 157 44 6 include/linux/regset.h:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 44 41 160 6 include/linux/regset.h:260 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(note 160 44 42 6 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:139 ret ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 42 160 161 6 include/linux/regset.h:259 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

(note 161 42 162 7 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 162 161 163 7 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 163 162 47 7 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:143 pos ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 47 163 48 7 58 "" [3 uses])

(note 48 47 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 51 48 49 7 NOTE_INSN_DELETED)

(insn:TI 49 51 52 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg:SI 2 r2 [orig:133 D.27667 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 52 49 50 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 50 52 164 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (reg:SI 3 r3 [orig:134 D.27666 ] [134])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int -321 [0xfffffffffffffebf]))) 67 {*arm_andsi3_insn} (nil))

(note 164 50 53 7 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 53 164 54 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:175 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 165 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:168 (set (reg/v:SI 2 r2 [orig:135 mode ] [135])
        (and:SI (reg:SI 2 r2 [orig:133 D.27667 ] [133])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(note 165 55 56 8 ( mode (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:135 mode ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 56 165 57 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:135 mode ] [135])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 57 56 58 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  10 [28.0%] 
;; Succ edge  9 [72.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [72.0%]  (fallthru)
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 9 NOTE_INSN_DELETED)

(note 60 59 64 9 NOTE_INSN_DELETED)

(note 64 60 68 9 NOTE_INSN_DELETED)

(note 68 64 69 9 NOTE_INSN_DELETED)

(note 69 68 62 9 NOTE_INSN_DELETED)

(insn:TI 62 69 63 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg/f:SI 1 r1 [155])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>)
        (nil)))

(insn:TI 63 62 66 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
        (mem/c/i:SI (reg/f:SI 1 r1 [155]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x5128fb40 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 66 63 70 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:SI 1 r1 [159])
        (zero_extract:SI (reg:SI 1 r1 [orig:157 elf_hwcap ] [157])
            (const_int 1 [0x1])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 70 66 166 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (parallel [
            (set (reg:SI 2 r2 [163])
                (and:SI (eq:SI (reg/v:SI 2 r2 [orig:135 mode ] [135])
                        (const_int 0 [0x0]))
                    (reg:SI 1 r1 [159])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_DEAD (reg:SI 1 r1 [159])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(note 166 70 71 9 ( mode (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 71 166 72 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [163])
        (nil)))

(jump_insn:TI 72 71 167 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:178 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

(note 167 72 168 10 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 168 167 73 10 ( mode (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:135 mode ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  8 [28.0%] 
;; Pred edge  9 [50.0%]  (fallthru)
(code_label 73 168 74 10 62 "" [1 uses])

(note 74 73 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 78 74 79 10 NOTE_INSN_DELETED)

(note 79 78 76 10 NOTE_INSN_DELETED)

(insn:TI 76 79 169 10 arch/arm/kernel/ptrace.c:606 (set (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 target ] [141])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 169 76 170 10 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 170 169 82 10 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(insn 82 170 83 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 83 82 171 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(note 171 83 75 10 ( mode (nil)) NOTE_INSN_VAR_LOCATION)

(insn 75 171 114 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/ptrace.h:173 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 newregs.uregs+64 S4 A64])
        (reg:SI 3 r3 [orig:134 D.27666 ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.27666 ] [134])
        (nil)))

(insn:TI 114 75 115 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:164 <variable>.stack ] [164])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 115 114 84 10 arch/arm/kernel/ptrace.c:606 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 84 115 86 10 arch/arm/kernel/ptrace.c:606 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 86 84 172 10 arch/arm/kernel/ptrace.c:607 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 172 86 131 10 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:139 ret ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 131 172 132 10 arch/arm/kernel/ptrace.c:607 (set (pc)
        (label_ref 92)) -1 (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 132 131 173)

(note 173 132 174 11 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 174 173 89 11 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:143 pos ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  9 [50.0%] 
(code_label 89 174 90 11 61 "" [2 uses])

(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 90 175 11 arch/arm/kernel/ptrace.c:604 (set (reg/v:SI 0 r0 [orig:139 ret ] [139])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -22 [0xffffffffffffffea])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

(note 175 91 92 12 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11 6 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  6 [50.0%] 
;; Pred edge  10 [100.0%] 
(code_label 92 175 93 12 60 "" [2 uses])

(note 93 92 104 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 104 93 176 12 arch/arm/kernel/ptrace.c:608 (use (reg/i:SI 0 r0)) -1 (nil))

(note 176 104 122 12 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 122 176 123 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 123 122 124 12 arch/arm/kernel/ptrace.c:608 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 124 123 116)

(note 116 124 118 NOTE_INSN_DELETED)

(note 118 116 0 NOTE_INSN_DELETED)


;; Function clear_ptrace_hw_breakpoint (clear_ptrace_hw_breakpoint)[0:1551]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tsk+0
Variables:
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




clear_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={2d} r3={2d} r12={1d} r13={1d,3u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 132{124d,8u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 22 NOTE_INSN_DELETED)

(note 22 1 4 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 22 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 19 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 19 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn:TI 7 6 23 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0 [ tsk ])
            (const_int 796 [0x31c]))) 4 {*arm_addsi3} (nil))

(note 23 7 8 2 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn 8 23 20 2 arch/arm/kernel/ptrace.c:407 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(note 20 8 21 2 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 21 20 9 2 arch/arm/kernel/ptrace.c:408 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 9 21 10 2 arch/arm/kernel/ptrace.c:407 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 18)

(note 18 10 0 NOTE_INSN_DELETED)


;; Function vfp_get (vfp_get)[0:1561]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 3:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 1: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:138 data ] [138])


Basic block 5:
IN:
Stack adjustment: 32
Reg 1: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:138 data ] [138])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 6:
IN:
Stack adjustment: 32
Reg 1: data+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:138 data ] [138])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 7:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])


Basic block 8:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 9:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 10:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 11:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 1: data+0
Reg 2: copy+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 data ] [135])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])


Basic block 12:
IN:
Stack adjustment: 32
Reg 1: data+0
Reg 2: copy+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 data ] [135])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])

OUT:
Stack adjustment: 32
Reg 0: ret+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:140 ret ] [140])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 13:
IN:
Stack adjustment: 32
Reg 1: data+0
Reg 2: copy+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:135 data ] [135])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])

OUT:
Stack adjustment: 32
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 14:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 0: ret+0
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:140 ret ] [140])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 15:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 16:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 17:
IN:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 32
Reg 4: thread+0
Reg 5: pos+0
Reg 6: copy+0
Reg 7: count+0
Reg 8: kbuf+0
Reg 10: ubuf+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 6 r6 [orig:137 copy ] [137])
  name: thread
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
  name: pos
    offset 0
      (reg/v:SI 5 r5 [orig:144 pos ] [144])
  name: kbuf
    offset 0
      (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: count
    offset 0
      (reg/v:SI 7 r7 [orig:145 count ] [145])
  name: ubuf
    offset 0
      (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


18 basic blocks, 25 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  15 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 5000, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  (fallthru) 16 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [85.0%]  (fallthru) 6 [15.0%] 
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 2125, maybe hot.
Predecessors:  4 [85.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

Successors:  8 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 375, maybe hot.
Predecessors:  4 [15.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [50.0%]  7 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 187, maybe hot.
Predecessors:  6 [50.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

Successors:  8 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 2313, maybe hot.
Predecessors:  7 [100.0%]  (fallthru) 5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

Successors:  15 9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 550, maybe hot.
Predecessors:  8 [100.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  10 [0.2%]  (fallthru) 16 [99.8%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 2313, should be 550

Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 1.
Predecessors:  9 [0.2%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 930, maybe hot.
Predecessors:  16 [50.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  kill	 24 [cc]

Successors:  12 [85.0%]  (fallthru) 13 [15.0%] 
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 1250, should be 930

Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 790, maybe hot.
Predecessors:  11 [85.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 139, maybe hot.
Predecessors:  11 [15.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [50.0%]  (fallthru) 15 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 2888, maybe hot.
Predecessors:  6 [50.0%]  13 [50.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 258, should be 2888

Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 6320, maybe hot.
Predecessors:  2 [50.0%]  13 [50.0%]  8 17 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  3 [50.0%]  9 [99.8%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  11 [50.0%]  17 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 3049, should be 2500

Basic block 17 , prev 16, next 1, loop_depth 0, count 0, freq 1250, maybe hot.
Predecessors:  16 [50.0%]  (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}

Successors:  15 [100.0%] 


Basic block 1 , prev 17, loop_depth 0, count 0, freq 9998, maybe hot.
Predecessors:  15 [100.0%]  12 [100.0%]  14 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




vfp_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,11u} r1={11d,6u} r2={11d,6u} r3={7d,1u} r4={3d,6u} r5={3d,10u} r6={3d,10u} r7={3d,7u} r8={3d,7u} r9={1d,2u} r10={3d,5u} r12={6d} r13={2d,26u,2d} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={17d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 866{756d,108u,2e} in 59{53 regular + 6 call} insns.
(note 1 0 156 NOTE_INSN_DELETED)

(note 156 1 157 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 157 156 158 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 158 157 159 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 159 158 160 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 160 159 161 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 161 160 9 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 161 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 8 2 NOTE_INSN_DELETED)

(note 8 2 139 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 139 8 140 2 arch/arm/kernel/ptrace.c:661 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -32 [0xffffffffffffffe0])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 9 r9))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 24 [0x18])) [0 S4 A32])
                                            (reg:SI 10 sl))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 140 139 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 140 162 2 arch/arm/kernel/ptrace.c:663 (set (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(note 162 11 5 2 ( thread (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 5 162 4 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 7 r7 [orig:145 count ] [145])
        (reg:SI 3 r3 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ count ])
        (nil)))

(insn 4 5 12 2 arch/arm/kernel/ptrace.c:661 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ pos ])
        (nil)))

(insn:TI 12 4 163 2 arch/arm/kernel/ptrace.c:668 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 thread ] [139])) 167 {*arm_movsi_insn} (nil))

(note 163 12 6 2 ( target (nil)) NOTE_INSN_VAR_LOCATION)

(insn 6 163 7 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 kbuf+0 S4 A32])
        (nil)))

(insn:TI 7 6 13 2 arch/arm/kernel/ptrace.c:661 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 ubuf+0 S4 A32])
        (nil)))

(call_insn 13 7 166 2 arch/arm/kernel/ptrace.c:668 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x41] <function_decl 0x10a83b00 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 166 13 165 2 ( count (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:145 count ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 165 166 164 2 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:144 pos ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 164 165 14 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 14 164 15 2 include/linux/regset.h:224 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 count ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 167 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 15 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

(note 167 15 168 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 168 167 16 3 ( ubuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 168 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 18 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 18 17 19 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 169 4 include/linux/regset.h:229 (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
        (minus:SI (const_int 256 [0x100])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(note 169 20 22 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 copy ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 22 169 21 4 include/linux/regset.h:230 (set (reg/f:SI 1 r1 [148])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 21 22 24 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 6 r6 [orig:137 copy ] [137])
                (umin:SI (reg/v:SI 6 r6 [orig:137 copy ] [137])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 24 21 23 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 23 24 170 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (plus:SI (reg/f:SI 1 r1 [148])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(note 170 23 25 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 25 170 26 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  6 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  4 [85.0%]  (fallthru)
(note 26 25 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 30 26 32 5 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 32 30 35 5 include/linux/regset.h:232 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 35 32 33 5 include/linux/regset.h:233 (set (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
        (plus:SI (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(call_insn 33 35 171 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 171 33 151 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 151 171 152 5 (set (pc)
        (label_ref 49)) -1 (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 152 151 172)

(note 172 152 173 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 173 172 38 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:138 data ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [15.0%] 
(code_label 38 173 39 6 71 "" [1 uses])

(note 39 38 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 39 40 6 NOTE_INSN_DELETED)

(insn:TI 40 44 42 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 42 40 43 6 include/linux/regset.h:234 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:137 copy ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 174 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 174 43 45 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 45 174 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 46 45 47 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 48 47 175 7 include/linux/regset.h:237 (set (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
        (plus:SI (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

(note 175 48 49 8 ( ubuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 49 175 50 8 72 "" [1 uses])

(note 50 49 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 50 53 8 NOTE_INSN_DELETED)

(insn:TI 53 52 51 8 include/linux/regset.h:279 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                        (reg/v:SI 6 r6 [orig:137 copy ] [137]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:145 count ] [145])
                (minus:SI (reg/v:SI 7 r7 [orig:145 count ] [145])
                    (reg/v:SI 6 r6 [orig:137 copy ] [137])))
        ]) 29 {*subsi3_compare0} (nil))

(insn 51 53 54 8 include/linux/regset.h:238 (set (reg/v:SI 5 r5 [orig:144 pos ] [144])
        (plus:SI (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (reg/v:SI 6 r6 [orig:137 copy ] [137]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 54 51 55 8 include/linux/regset.h:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 0 [0x0])
            (nil))))
;; End of basic block 8 -> ( 15 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 56 55 57 9 include/linux/regset.h:281 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 255 [0xff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 57 56 58 9 include/linux/regset.h:281 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9978 [0x26fa])
            (nil))))
;; End of basic block 9 -> ( 10 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [0.2%]  (fallthru)
;; Succ edge  16 [99.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.2%]  (fallthru)
(note 58 57 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 58 62 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x116b8180>)
        (nil)))

(insn 62 61 63 10 include/linux/regset.h:281 discrim 1 (set (reg:SI 1 r1)
        (const_int 281 [0x119])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 281 [0x119])
        (nil)))

(call_insn:TI 63 62 64 10 include/linux/regset.h:281 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a2ec00 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 10 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 64 63 109)

;; Start of basic block ( 16) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 4 [r4] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  16 [50.0%] 
(code_label 109 64 65 11 76 "" [1 uses])

(note 65 109 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 68 65 66 11 NOTE_INSN_DELETED)

(insn:TI 66 68 176 11 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 260 [0x104])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 28 {*arm_subsi3_insn} (nil))

(note 176 66 69 11 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 69 176 177 11 include/linux/regset.h:230 (set (reg:SI 4 r4 [156])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
            (reg/v:SI 5 r5 [orig:144 pos ] [144]))) 4 {*arm_addsi3} (nil))

(note 177 69 67 11 ( thread (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 67 177 71 11 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 7 r7 [orig:145 count ] [145])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 71 67 70 11 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 70 71 178 11 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:135 data ] [135])
        (plus:SI (reg:SI 4 r4 [156])
            (const_int 436 [0x1b4]))) 4 {*arm_addsi3} (nil))

(note 178 70 72 11 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 data ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 72 178 73 11 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1499 [0x5db])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [85.0%]  (fallthru)
;; Succ edge  13 [15.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [85.0%]  (fallthru)
(note 73 72 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 77 73 80 12 include/linux/regset.h:232 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:146 kbuf ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 80 77 180 12 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 180 80 179 12 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 179 180 82 12 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn 82 179 181 12 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 181 82 141 12 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 ret ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 141 181 130 12 (return) 260 {return} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 130 141 182)

(note 182 130 183 13 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 183 182 184 13 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 data ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 184 183 85 13 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [15.0%] 
(code_label 85 184 86 13 74 "" [1 uses])

(note 86 85 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 86 87 13 NOTE_INSN_DELETED)

(insn:TI 87 91 90 13 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:147 ubuf ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 90 87 186 13 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 186 90 185 13 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 185 186 92 13 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 92 185 93 13 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 93 92 187 13 include/linux/regset.h:234 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

(note 187 93 94 14 ( thread (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 thread ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  13 [50.0%]  (fallthru)
(code_label 94 187 95 14 73 "" [1 uses])

(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 96 95 188 14 include/linux/regset.h:235 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int -14 [0xfffffffffffffff2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))

(note 188 96 142 14 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 ret ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 142 188 132 14 (return) 260 {return} (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 132 142 189)

(note 189 132 99 15 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 13 8 17) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  13 [50.0%] 
;; Pred edge  8
;; Pred edge  17 [100.0%] 
(code_label 99 189 100 15 69 "" [4 uses])

(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 100 190 15 include/linux/regset.h:241 (set (reg/v:SI 0 r0 [orig:140 ret ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 190 101 123 15 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:140 ret ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 123 190 191 15 arch/arm/kernel/ptrace.c:687 (use (reg/i:SI 0 r0)) -1 (nil))

(note 191 123 144 15 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 144 191 143 15 arch/arm/kernel/ptrace.c:687 (return) 260 {return} (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 143 144 107)

;; Start of basic block ( 3 9) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  9 [99.8%] 
(code_label 107 143 108 16 70 "" [2 uses])

(note 108 107 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 110 108 111 16 NOTE_INSN_DELETED)

(insn:TI 111 110 112 16 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:144 pos ] [144])
            (const_int 260 [0x104]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 112 111 153 16 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 11 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%] 
;; Succ edge  17 [50.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}

;; Pred edge  16 [50.0%]  (fallthru)
(note 153 112 154 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(jump_insn 154 153 155 17 (set (pc)
        (label_ref 99)) -1 (nil))
;; End of basic block 17 -> ( 15)


;; Succ edge  15 [100.0%] 

(barrier 155 154 137)

(note 137 155 0 NOTE_INSN_DELETED)


;; Function fpa_get (fpa_get)[0:1559]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:141 pos ] [141])
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:141 pos ] [141])
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 5:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 6:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 7:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])

OUT:
Stack adjustment: 8
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])


8 basic blocks, 11 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  3 [61.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [61.0%]  (fallthru) 7 [39.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  3 [61.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [99.3%]  (fallthru) 6 [0.7%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 3694, maybe hot.
Predecessors:  4 [99.3%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 27, maybe hot.
Predecessors:  4 [0.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [61.0%]  (fallthru) EXIT [39.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 6295, maybe hot.
Predecessors:  2 [39.0%]  3 [39.0%]  6 [61.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  5 [100.0%]  6 [39.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




fpa_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={5d,3u} r2={5d,6u} r3={4d,3u} r4={1d,2u} r12={4d,2u} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 303{259d,43u,1e} in 25{23 regular + 2 call} insns.
(note 1 0 80 NOTE_INSN_DELETED)

(note 80 1 81 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 81 80 82 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 82 81 83 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 83 82 84 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 84 83 85 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 85 84 9 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 85 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 86 2 arch/arm/kernel/ptrace.c:614 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(note 86 4 74 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(insn/f:TI 74 86 75 2 arch/arm/kernel/ptrace.c:614 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 75 74 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 75 6 2 arch/arm/kernel/ptrace.c:616 (set (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 6 11 87 2 arch/arm/kernel/ptrace.c:614 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(note 87 6 13 2 ( target (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 13 87 88 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

(note 88 13 89 3 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 89 88 14 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 89 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 pos ] [141])
            (const_int 115 [0x73]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 90 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

(note 90 16 17 4 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 90 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 91 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 116 [0x74])
            (reg:SI 2 r2 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(note 91 18 92 4 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 92 91 20 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 20 92 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27170 ] [137])
            (const_int 288 [0x120]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 20 22 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 22 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 21 22 93 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [145])
        (nil)))

(note 93 21 94 4 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(note 94 93 23 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 23 94 24 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 24 23 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 31 24 98 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 98 31 97 5 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 97 98 96 5 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 96 97 95 5 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(note 95 96 33 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn 33 95 76 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 76 33 69 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 69 76 99)

(note 99 69 100 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 100 99 101 6 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 101 100 102 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 102 101 36 6 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 36 102 37 6 82 "" [1 uses])

(note 37 36 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 42 37 38 6 NOTE_INSN_DELETED)

(insn:TI 38 42 103 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 103 38 41 6 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 41 103 106 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 106 41 105 6 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 105 106 104 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 104 105 43 6 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 43 104 46 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 46 43 44 6 include/linux/regset.h:235 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 44 46 107 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

(note 107 44 108 7 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 109 7 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 109 108 49 7 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 49 109 50 7 81 "" [2 uses])

(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 50 64 7 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27754 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 64 51 79 7 arch/arm/kernel/ptrace.c:618 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 79 64 78 7 arch/arm/kernel/ptrace.c:618 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 78 79 72)

(note 72 78 73 NOTE_INSN_DELETED)

(note 73 72 0 NOTE_INSN_DELETED)


;; Function gpr_get (gpr_get)[0:1557]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: target+0
Reg 1: regset+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: target
    offset 0
      (reg:SI 0 r0 [ target ])
  name: regset
    offset 0
      (reg:SI 1 r1 [ regset ])
  name: pos
    offset 0
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])


Basic block 3:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:141 pos ] [141])
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])


Basic block 4:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg:SI 2 r2 [orig:141 pos ] [141])
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])

OUT:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])


Basic block 5:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 6:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: data+0
Reg 2: copy+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
  name: copy
    offset 0
      (reg/v:SI 2 r2 [orig:134 copy ] [134])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: data
    offset 0
      (reg/v/f:SI 1 r1 [orig:136 data ] [136])

OUT:
Stack adjustment: 8
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])


Basic block 7:
IN:
Stack adjustment: 8
Reg 0: kbuf+0
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
      (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])

OUT:
Stack adjustment: 8
Reg 1: pos+0
Reg 2: pos+0
Reg 3: count+0
Variables:
  name: kbuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
  name: ubuf
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
      (mem/f/c/i:SI (reg/f:SI 26 afp) [0 ubuf+0 S4 A32])
  name: pos
    offset 0
      (reg/v:SI 1 r1 [orig:141 pos ] [141])
      (reg:SI 2 r2 [ pos ])
  name: count
    offset 0
      (reg:SI 3 r3 [ count ])


8 basic blocks, 11 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  3 [61.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  2 [61.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [61.0%]  (fallthru) 7 [39.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 3721, maybe hot.
Predecessors:  3 [61.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  5 [99.3%]  (fallthru) 6 [0.7%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 3694, maybe hot.
Predecessors:  4 [99.3%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 27, maybe hot.
Predecessors:  4 [0.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [61.0%]  (fallthru) EXIT [39.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 6295, maybe hot.
Predecessors:  2 [39.0%]  3 [39.0%]  6 [61.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  5 [100.0%]  6 [39.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




gpr_get

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,8u} r1={5d,3u} r2={5d,6u} r3={4d,3u} r4={1d,2u} r12={5d,3u,1d} r13={2d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,5u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 306{260d,44u,2e} in 26{24 regular + 2 call} insns.
(note 1 0 81 NOTE_INSN_DELETED)

(note 81 1 82 2 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 82 81 83 2 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 83 82 84 2 ( ubuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 8 [0x8])) [0 ubuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 84 83 85 2 ( target (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ target ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 85 84 86 2 ( regset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 86 85 9 2 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ pos ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 86 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 9 5 2 NOTE_INSN_DELETED)

(note 5 2 8 2 NOTE_INSN_DELETED)

(note 8 5 12 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 12 8 4 2 include/linux/regset.h:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 3 r3 [ count ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:142 count ] [142])
                (reg:SI 3 r3 [ count ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 4 12 87 2 arch/arm/kernel/ptrace.c:581 (set (reg/v:SI 1 r1 [orig:141 pos ] [141])
        (reg:SI 2 r2 [ pos ])) 167 {*arm_movsi_insn} (nil))

(note 87 4 75 2 ( regset (nil)) NOTE_INSN_VAR_LOCATION)

(insn/f:TI 75 87 76 2 arch/arm/kernel/ptrace.c:581 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 76 75 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 76 6 2 arch/arm/kernel/ptrace.c:582 (set (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ target ])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ target ])
        (nil)))

(insn:TI 6 11 88 2 arch/arm/kernel/ptrace.c:581 (set (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 kbuf+0 S4 A32])
        (nil)))

(note 88 6 13 2 ( target (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 13 88 89 2 include/linux/regset.h:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

(note 89 13 90 3 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 90 89 14 3 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 90 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 14 16 3 include/linux/regset.h:227 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 pos ] [141])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 91 3 include/linux/regset.h:227 discrim 1 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

(note 91 16 17 4 ( pos (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [61.0%]  (fallthru)
(note 17 91 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 92 4 include/linux/regset.h:229 (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
        (minus:SI (const_int 72 [0x48])
            (reg:SI 2 r2 [orig:141 pos ] [141]))) 28 {*arm_subsi3_insn} (nil))

(note 92 18 93 4 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 93 92 20 4 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 20 93 19 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [146])
        (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8064 [0x1f80]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 20 23 4 include/linux/regset.h:229 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 copy ] [134])
                (umin:SI (reg/v:SI 2 r2 [orig:134 copy ] [134])
                    (reg/v:SI 3 r3 [orig:142 count ] [142])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:142 count ] [142])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 23 19 21 4 include/linux/regset.h:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 21 23 22 4 include/linux/regset.h:230 (set (reg/f:SI 12 ip [145])
        (plus:SI (reg/f:SI 12 ip [146])
            (const_int 48 [0x30]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 12 ip [orig:137 D.27137 ] [137])
            (const_int 8112 [0x1fb0]))
        (nil)))

(insn:TI 22 21 94 4 include/linux/regset.h:230 (set (reg/v/f:SI 1 r1 [orig:136 data ] [136])
        (plus:SI (reg/f:SI 12 ip [145])
            (reg/v:SI 1 r1 [orig:141 pos ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [145])
        (nil)))

(note 94 22 95 4 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 95 94 24 4 ( pos (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 24 95 25 4 include/linux/regset.h:231 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 73 [0x49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  5 [99.3%]  (fallthru)
;; Succ edge  6 [0.7%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [99.3%]  (fallthru)
(note 25 24 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 32 25 99 5 include/linux/regset.h:232 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 99 32 98 5 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 98 99 97 5 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 97 98 96 5 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 96 97 34 5 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn 34 96 77 5 include/linux/regset.h:241 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 77 34 70 5 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 77 100)

(note 100 70 101 6 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 101 100 102 6 ( kbuf (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:143 kbuf ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 102 101 103 6 ( data (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:136 data ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 103 102 37 6 ( copy (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:134 copy ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.7%] 
(code_label 37 103 38 6 87 "" [1 uses])

(note 38 37 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 43 38 39 6 NOTE_INSN_DELETED)

(insn:TI 39 43 104 6 include/linux/regset.h:234 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 ubuf+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 104 39 42 6 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 42 104 107 6 include/linux/regset.h:234 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__copy_to_user") [flags 0x41] <function_decl 0x113b1000 __copy_to_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 107 42 106 6 ( copy (nil)) NOTE_INSN_VAR_LOCATION)

(note 106 107 105 6 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 105 106 44 6 ( count (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 44 105 47 6 include/linux/regset.h:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 47 44 45 6 include/linux/regset.h:235 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 45 47 108 6 include/linux/regset.h:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 6 -> ( 7 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  7 [61.0%]  (fallthru)
;; Succ edge  EXIT [39.0%] 

(note 108 45 109 7 ( count (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ count ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 109 108 110 7 ( kbuf (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 kbuf+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 110 109 50 7 ( pos (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:141 pos ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  6 [61.0%]  (fallthru)
(code_label 50 110 51 7 86 "" [2 uses])

(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 51 65 7 include/linux/regset.h:225 (set (reg:SI 0 r0 [orig:135 D.27779 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 65 52 80 7 arch/arm/kernel/ptrace.c:587 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 80 65 79 7 arch/arm/kernel/ptrace.c:587 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 79 80 73)

(note 73 79 74 NOTE_INSN_DELETED)

(note 74 73 0 NOTE_INSN_DELETED)


;; Function ptrace_hbp_create (ptrace_hbp_create)[0:1554]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tsk+0
Reg 1: type+0
Variables:
  name: type
    offset 0
      (reg:SI 1 r1 [ type ])
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])

OUT:
Stack adjustment: 88
Reg 6: tsk+0
Variables:
  name: tsk
    offset 0
      (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_hbp_create

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={5d,3u} r2={4d,1u} r3={4d,1u} r4={5d,6u} r5={4d,5u} r6={2d,3u} r12={6d,5u} r13={3d,17u,2d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 313{263d,48u,2e} in 31{29 regular + 2 call} insns.
(note 1 0 78 NOTE_INSN_DELETED)

(note 78 1 79 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 79 78 5 2 ( type (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ type ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 79 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 62 2 NOTE_INSN_DELETED)

(note 62 18 23 2 NOTE_INSN_DELETED)

(note 23 62 26 2 NOTE_INSN_DELETED)

(note 26 23 63 2 NOTE_INSN_DELETED)

(note 63 26 34 2 NOTE_INSN_DELETED)

(note 34 63 41 2 NOTE_INSN_DELETED)

(note 41 34 72 2 NOTE_INSN_DELETED)

(insn/f:TI 72 41 73 2 arch/arm/kernel/ptrace.c:449 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn/f:TI 73 72 74 2 arch/arm/kernel/ptrace.c:449 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -72 [0xffffffffffffffb8]))) 4 {*arm_addsi3} (nil))

(note 74 73 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 74 3 2 arch/arm/kernel/ptrace.c:449 (set (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 3 2 8 2 arch/arm/kernel/ptrace.c:449 (set (reg/v:SI 4 r4 [orig:136 type ] [136])
        (reg:SI 1 r1 [ type ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ type ])
        (nil)))

(insn:TI 8 3 80 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(note 80 8 9 2 ( tsk (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 9 80 81 2 include/linux/hw_breakpoint.h:40 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(note 81 9 10 2 ( type (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:136 type ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 10 81 15 2 include/linux/hw_breakpoint.h:40 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bba080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 10 42 2 include/linux/hw_breakpoint.h:48 (set (reg:SI 12 ip [orig:141+40 ] [141])
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                    (const_int 40 [0x28])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 42 15 45 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 45 42 37 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 3 r3)
        (reg/v/f:SI 6 r6 [orig:135 tsk ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 37 45 43 2 arch/arm/kernel/ptrace.c:458 (set (reg:SI 12 ip [153])
        (ior:SI (reg:SI 12 ip [orig:141+40 ] [141])
            (const_int 37 [0x25]))) 89 {*arm_iorsi3} (nil))

(insn 43 37 39 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 1 r1)
        (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("ptrace_hbptriggered") [flags 0x3] <function_decl 0x1155b780 ptrace_hbptriggered>)
        (nil)))

(insn:TI 39 43 44 2 arch/arm/kernel/ptrace.c:458 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0+40 S1 A64])
        (reg:QI 12 ip [153])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 12 ip [153])
        (nil)))

(insn 44 39 11 2 arch/arm/kernel/ptrace.c:460 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 44 33 2 include/linux/hw_breakpoint.h:42 (set (reg:SI 12 ip [138])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 33 11 12 2 arch/arm/kernel/ptrace.c:457 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 attr.bp_type+0 S4 A32])
        (reg/v:SI 4 r4 [orig:136 type ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:136 type ] [136])
        (nil)))

(insn:TI 12 33 66 2 include/linux/hw_breakpoint.h:42 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 attr.type+0 S4 A64])
        (reg:SI 12 ip [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 66 12 82 2 include/linux/hw_breakpoint.h:49 (set (reg:SI 4 r4 [144])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(note 82 66 13 2 ( type (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 82 67 2 include/linux/hw_breakpoint.h:43 (set (reg:SI 12 ip [139])
        (plus:SI (reg:SI 12 ip [139])
            (const_int 67 [0x43]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 72 [0x48])
        (nil)))

(insn 67 13 14 2 include/linux/hw_breakpoint.h:49 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 67 22 2 include/linux/hw_breakpoint.h:43 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 attr.size+0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [139])
        (expr_list:REG_EQUAL (const_int 72 [0x48])
            (nil))))

(insn:TI 22 14 68 2 include/linux/hw_breakpoint.h:49 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 attr.D.23422.sample_period+0 S8 A64])
        (reg:DI 4 r4 [144])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 68 22 69 2 arch/arm/kernel/ptrace.c:455 (set (reg:SI 4 r4 [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 69 68 30 2 arch/arm/kernel/ptrace.c:455 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 30 69 70 2 arch/arm/kernel/ptrace.c:455 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 attr.D.23452.bp_addr+0 S8 A64])
        (reg:DI 4 r4 [149])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 70 30 71 2 arch/arm/kernel/ptrace.c:456 (set (reg:SI 4 r4 [150])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 71 70 32 2 arch/arm/kernel/ptrace.c:456 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 32 71 46 2 arch/arm/kernel/ptrace.c:456 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 4 r4 [150])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(call_insn 46 32 58 2 arch/arm/kernel/ptrace.c:460 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524700 register_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 58 46 75 2 arch/arm/kernel/ptrace.c:462 (use (reg/i:SI 0 r0)) -1 (nil))

(note 75 58 76 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 76 75 77 2 arch/arm/kernel/ptrace.c:462 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 77 76 64)

(note 64 77 65 NOTE_INSN_DELETED)

(note 65 64 0 NOTE_INSN_DELETED)


;; Function arch_ptrace (arch_ptrace)[0:1564]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: child+0
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Variables:
  name: data
    offset 0
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg:SI 0 r0 [ child ])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])


Basic block 3:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 4:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 0: __e+0
Reg 1: request+0
Reg 2: __r2+0 tmp+0
Reg 4: child+0
Reg 5: data+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: tmp
    offset 0
      (reg/v:SI 2 r2 [orig:179 tmp ] [179])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])


Basic block 5:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 6:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])


Basic block 7:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])


Basic block 8:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])


Basic block 9:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 10:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])


Basic block 11:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])


Basic block 12:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])


Basic block 13:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])


Basic block 14:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 0: __e+0
Reg 1: request+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])


Basic block 15:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg:SI 2 r2 [ addr ])


Basic block 16:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])


Basic block 17:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])


Basic block 18:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])


Basic block 19:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])


Basic block 20:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 21:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 22:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: reg+0
Reg 4: child+0
Reg 5: data+0
Reg 8: reg+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])


Basic block 23:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 3: idx+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: idx
    offset 0
      (reg/v:SI 3 r3 [orig:153 idx ] [153])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 24:
IN:
Stack adjustment: 120
Reg 3: idx+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: idx
    offset 0
      (reg/v:SI 3 r3 [orig:153 idx ] [153])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 25:
IN:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 26:
IN:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 27:
IN:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 28:
IN:
Stack adjustment: 120
Reg 2: bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: reg+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 29:
IN:
Stack adjustment: 120
Reg 2: reg+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 2: reg+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 30:
IN:
Stack adjustment: 120
Reg 2: bp+0 reg+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 8: reg+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])

OUT:
Stack adjustment: 120
Reg 0: __e+0
Reg 2: __r2+0 reg+0 bp+0
Reg 3: arch_ctrl+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Reg 8: reg+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])


Basic block 31:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 32:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 33:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 7: idx+0
Reg 8: implied_type+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])


Basic block 34:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 7: idx+0
Reg 8: implied_type+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 0: __e+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Reg 7: idx+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])


Basic block 35:
IN:
Stack adjustment: 120
Reg 0: __e+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Reg 7: idx+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])

OUT:
Stack adjustment: 120
Reg 0: __e+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])


Basic block 36:
IN:
Stack adjustment: 120
Reg 0: __e+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])

OUT:
Stack adjustment: 120
Reg 0: bp+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/f:SI 0 r0 [orig:148 bp ] [148])
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])


Basic block 37:
IN:
Stack adjustment: 120
Reg 0: bp+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/f:SI 0 r0 [orig:148 bp ] [148])
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])

OUT:
Stack adjustment: 120
Reg 0: bp+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: bp
    offset 0
      (reg/f:SI 0 r0 [orig:148 bp ] [148])
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])


Basic block 38:
IN:
Stack adjustment: 120
Reg 0: bp+0 __e+0
Reg 2: __r2+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
      (reg/f:SI 0 r0 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: addr+0 ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 39:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0 addr+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 7: ctrl+0
Reg 8: implied_type+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])


Basic block 40:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 7: ctrl+0
Reg 8: implied_type+0
Variables:
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 7: ctrl+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])


Basic block 41:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 7: ctrl+0
Variables:
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])

OUT:
Stack adjustment: 120
Reg 2: gen_len+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: gen_len
    offset 0
      (reg:SI 2 r2 [ gen_len ])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])


Basic block 42:
IN:
Stack adjustment: 120
Reg 2: gen_len+0
Reg 4: child+0
Reg 5: bp+0
Reg 6: addr+0 ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: gen_len
    offset 0
      (reg:SI 2 r2 [ gen_len ])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0
Reg 6: ret+0
Reg 8: implied_type+0
Reg 10: user_val+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])


Basic block 43:
IN:
Stack adjustment: 120
Reg 3: idx+0
Reg 4: child+0
Reg 5: data+0 bp+0
Reg 6: addr+0 ret+0
Reg 7: idx+0 ctrl+0
Reg 8: implied_type+0
Variables:
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: idx
    offset 0
      (reg/v:SI 3 r3 [orig:153 idx ] [153])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])

OUT:
Stack adjustment: 120
Reg 3: idx+0
Reg 4: child+0
Reg 5: bp+0 data+0
Reg 6: ret+0
Reg 7: ctrl+0 idx+0
Reg 8: implied_type+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: idx
    offset 0
      (reg/v:SI 3 r3 [orig:153 idx ] [153])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])


Basic block 44:
IN:
Stack adjustment: 120
Reg 0: __e+0 bp+0 __e+0
Reg 2: bp+0 reg+0 __r2+0 __r2+0
Reg 3: arch_ctrl+0 idx+0
Reg 4: child+0
Reg 5: data+0 bp+0
Reg 6: addr+0 ret+0
Reg 7: idx+0 ctrl+0
Reg 8: reg+0 implied_type+0
Reg 10: user_val+0
Variables:
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
      (reg/f:SI 0 r0 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: reg
    offset 0
      (reg/v:SI 2 r2 [orig:152 reg ] [152])
  name: idx
    offset 0
      (reg/v:SI 3 r3 [orig:153 idx ] [153])
  name: bp
    offset 0
      (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
  name: arch_ctrl
    offset 0
      (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: bp+0 data+0
Reg 6: ret+0 addr+0
Reg 7: ctrl+0 idx+0
Reg 8: implied_type+0 reg+0
Reg 10: user_val+0
Variables:
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])


Basic block 45:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0
Reg 3: data+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
      (reg:SI 2 r2 [ addr ])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])


Basic block 46:
IN:
Stack adjustment: 120
Reg 0: __e+0 __e+0
Reg 1: request+0
Reg 2: __r2+0 tmp+0 __r2+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: tmp
    offset 0
      (reg/v:SI 2 r2 [orig:179 tmp ] [179])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __e
    offset 0
      (reg/v:SI 0 r0 [ __e ])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 2: __r2+0 tmp+0 __r2+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Variables:
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: tmp
    offset 0
      (reg/v:SI 2 r2 [orig:179 tmp ] [179])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])


Basic block 47:
IN:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])

OUT:
Stack adjustment: 120
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Variables:
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])


Basic block 48:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0 roksum+0 roksum+0 roksum+0 data+0 roksum+0 roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: addr+0
Reg 12: flag+0 flag+0 flag+0 flag+0 flag+0 flag+0
Variables:
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 3: roksum+0 roksum+0 data+0 roksum+0 roksum+0 roksum+0 roksum+0
Reg 4: child+0
Reg 5: data+0
Reg 6: ret+0
Reg 12: flag+0 flag+0 flag+0 flag+0 flag+0 flag+0
Variables:
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])


Basic block 49:
IN:
Stack adjustment: 120
Reg 1: request+0
Reg 2: __r2+0 tmp+0 __r2+0 addr+0
Reg 3: roksum+0 roksum+0 roksum+0 roksum+0 data+0 roksum+0 roksum+0
Reg 4: child+0
Reg 5: bp+0 data+0
Reg 6: addr+0 ret+0
Reg 7: idx+0 ctrl+0
Reg 8: reg+0 implied_type+0
Reg 10: user_val+0
Reg 12: flag+0 flag+0 flag+0 flag+0 flag+0 flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
  name: tmp
    offset 0
      (reg/v:SI 2 r2 [orig:179 tmp ] [179])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg:SI 2 r2 [ addr ])
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])

OUT:
Stack adjustment: 120
Reg 1: request+0
Reg 2: addr+0 __r2+0 tmp+0 __r2+0
Reg 3: roksum+0 roksum+0 data+0 roksum+0 roksum+0 roksum+0 roksum+0
Reg 4: child+0
Reg 5: data+0 bp+0
Reg 6: ret+0 addr+0
Reg 7: ctrl+0 idx+0
Reg 8: implied_type+0 reg+0
Reg 10: user_val+0
Reg 12: flag+0 flag+0 flag+0 flag+0 flag+0 flag+0
Variables:
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:161 flag ] [161])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:162 roksum ] [162])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:170 flag ] [170])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:171 roksum ] [171])
  name: idx
    offset 0
      (reg/v:SI 7 r7 [orig:145 idx ] [145])
  name: gen_type
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
  name: implied_type
    offset 0
      (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
  name: user_val
    offset 0
      (reg/v:SI 10 sl [orig:147 user_val ] [147])
  name: bp
    offset 0
      (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
  name: ctrl
    offset 0
      (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:167 flag ] [167])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:168 roksum ] [168])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:177 roksum ] [177])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:176 flag ] [176])
  name: reg
    offset 0
      (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
  name: tmp
    offset 0
      (reg/v:SI 2 r2 [orig:179 tmp ] [179])
  name: child
    offset 0
      (reg/v/f:SI 4 r4 [orig:188 child ] [188])
  name: request
    offset 0
      (reg:SI 1 r1 [ request ])
  name: addr
    offset 0
      (reg:SI 2 r2 [ addr ])
      (reg/v:SI 6 r6 [orig:190 addr ] [190])
  name: data
    offset 0
      (reg/v:SI 5 r5 [orig:191 data ] [191])
      (reg:SI 3 r3 [ data ])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:173 flag ] [173])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:174 roksum ] [174])
  name: ret
    offset 0
      (reg/v:SI 6 r6 [orig:181 ret ] [181])
  name: flag
    offset 0
      (reg/v:SI 12 ip [orig:164 flag ] [164])
  name: __r2
    offset 0
      (reg/v:SI 2 r2 [ __r2 ])
  name: roksum
    offset 0
      (reg/v:SI 3 r3 [orig:165 roksum ] [165])


50 basic blocks, 83 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	 24 [cc]

Successors:  45 [7.7%]  3 [7.7%]  5 [7.7%]  6 [7.7%]  8 [7.7%]  10 [7.7%]  12 [7.7%]  14 [7.7%]  15 [7.7%]  16 [7.7%]  18 [7.7%]  20 [7.7%]  31 [7.7%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [50.0%]  4 [50.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 144, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 385, should be 144

Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  7 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  6 [29.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  9 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  8 [29.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  11 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  10 [29.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  13 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  12 [29.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6]
;; live  kill	

Successors:  49 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  17 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  16 [29.0%]  (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

Successors:  48 [71.0%]  19 [29.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 223, maybe hot.
Predecessors:  18 [29.0%]  (fallthru)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  46 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  47 [19.1%]  21 [80.9%]  (fallthru)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 622, maybe hot.
Predecessors:  20 [80.9%]  (fallthru)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  22 [29.0%]  (fallthru) 23 [71.0%] 
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 180, maybe hot.
Predecessors:  21 [29.0%]  (fallthru)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

Successors:  30 [100.0%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 442, maybe hot.
Predecessors:  21 [71.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  43 [50.0%]  24 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 0, count 0, freq 221, maybe hot.
Predecessors:  23 [50.0%]  (fallthru)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  27 [85.0%]  25 [15.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 25 , prev 24, next 26, loop_depth 0, count 0, freq 33, maybe hot.
Predecessors:  24 [15.0%]  (fallthru)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}

Successors:  30 [100.0%] 


Basic block 26 , prev 25, next 27, loop_depth 1, count 0, freq 1898, maybe hot.
Predecessors:  27 [91.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

Successors:  27 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 27 , prev 26, next 28, loop_depth 1, count 0, freq 2085, maybe hot.
Predecessors:  26 [100.0%]  (fallthru,dfs_back) 24 [85.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  26 [91.0%]  28 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 28 , prev 27, next 29, loop_depth 0, count 0, freq 188, maybe hot.
Predecessors:  27 [9.0%]  (fallthru,loop_exit)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

Successors:  29 [50.0%]  (fallthru) 30 [50.0%] 
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 29 , prev 28, next 30, loop_depth 0, count 0, freq 94, maybe hot.
Predecessors:  28 [50.0%]  (fallthru)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  kill	

Successors:  30 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 30 , prev 29, next 31, loop_depth 0, count 0, freq 401, maybe hot.
Predecessors:  29 [100.0%]  (fallthru) 22 [100.0%]  28 [50.0%]  25 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

Successors:  44 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 31 , prev 30, next 32, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  47 [19.1%]  32 [80.9%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 32 , prev 31, next 33, loop_depth 0, count 0, freq 622, maybe hot.
Predecessors:  31 [80.9%]  (fallthru)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  44 [50.0%]  33 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


Basic block 33 , prev 32, next 34, loop_depth 0, count 0, freq 311, maybe hot.
Predecessors:  32 [50.0%]  (fallthru)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	

Successors:  43 [50.0%]  34 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 34 , prev 33, next 35, loop_depth 0, count 0, freq 155, maybe hot.
Predecessors:  33 [50.0%]  (fallthru)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 10 [sl] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

Successors:  35 [50.0%]  (fallthru) 44 [50.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 35 , prev 34, next 36, loop_depth 0, count 0, freq 78, maybe hot.
Predecessors:  34 [50.0%]  (fallthru)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

Successors:  36 [6.7%]  (fallthru) 38 [93.3%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 36 , prev 35, next 37, loop_depth 0, count 0, freq 5.
Predecessors:  35 [6.7%]  (fallthru)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

Successors:  37 [100.0%]  (fallthru) 44 [0.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 37 , prev 36, next 38, loop_depth 0, count 0, freq 5.
Predecessors:  36 [100.0%]  (fallthru)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  38 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 38 , prev 37, next 39, loop_depth 0, count 0, freq 78, maybe hot.
Predecessors:  35 [93.3%]  37 [100.0%]  (fallthru)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  39 [29.0%]  (fallthru) 42 [71.0%] 
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 39 , prev 38, next 40, loop_depth 0, count 0, freq 23, maybe hot.
Predecessors:  38 [29.0%]  (fallthru)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

Successors:  44 [50.0%]  40 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 40 , prev 39, next 41, loop_depth 0, count 0, freq 11, maybe hot.
Predecessors:  39 [50.0%]  (fallthru)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	

Successors:  43 [72.0%]  41 [28.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 41 , prev 40, next 42, loop_depth 0, count 0, freq 3.
Predecessors:  40 [28.0%]  (fallthru)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

Successors:  42 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 42 , prev 41, next 43, loop_depth 0, count 0, freq 58, maybe hot.
Predecessors:  41 [100.0%]  (fallthru) 38 [71.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]

Successors:  44 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 43 , prev 42, next 44, loop_depth 0, count 0, freq 384, maybe hot.
Predecessors:  40 [72.0%]  33 [50.0%]  23 [50.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  44 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 44 , prev 43, next 45, loop_depth 0, count 0, freq 1244, maybe hot.
Predecessors:  43 [100.0%]  (fallthru) 34 [50.0%]  36 [0.0%]  32 [50.0%]  39 [50.0%]  30 [100.0%]  42 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  49 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 45 , prev 44, next 46, loop_depth 0, count 0, freq 769, maybe hot.
Predecessors:  2 [7.7%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

Successors:  46 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 46 , prev 45, next 47, loop_depth 0, count 0, freq 4029, maybe hot.
Predecessors:  45 [100.0%]  (fallthru) 13 [100.0%]  17 [100.0%]  4 [100.0%]  5 [100.0%]  7 [100.0%]  9 [100.0%]  11 [100.0%]  14 [100.0%]  19 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  49 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]

Invalid sum of incoming frequencies 3789, should be 4029

Basic block 47 , prev 46, next 48, loop_depth 0, count 0, freq 294, maybe hot.
Predecessors:  20 [19.1%]  31 [19.1%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  49 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


Basic block 48 , prev 47, next 49, loop_depth 0, count 0, freq 3661, maybe hot.
Predecessors:  18 [71.0%]  16 [71.0%]  3 [50.0%]  6 [71.0%]  8 [71.0%]  10 [71.0%]  12 [71.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  49 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 49 , prev 48, next 1, loop_depth 0, count 0, freq 9997, maybe hot.
Predecessors:  48 [100.0%]  (fallthru) 15 [100.0%]  44 [100.0%]  46 [100.0%]  47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 1 , prev 49, loop_depth 0, count 0, freq 9997, maybe hot.
Predecessors:  49 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




arch_ptrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={48d,44u} r1={36d,20u} r2={49d,36u} r3={64d,53u} r4={2d,19u} r5={4d,22u} r6={17d,24u,1d} r7={17d,22u} r8={7d,11u} r10={3d,9u} r12={34d,24u} r13={3d,101u,2d} r14={24d,2u} r15={19d} r16={19d} r17={19d} r18={19d} r19={19d} r20={19d} r21={19d} r22={19d} r23={19d} r24={57d,43u} r25={1d} r27={19d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={19d} r38={19d} r39={19d} r40={19d} r41={19d} r42={19d} r43={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} r81={19d} r82={19d} r83={19d} r84={19d} r85={19d} r86={19d} r87={19d} r88={19d} r89={19d} r90={19d} r91={19d} r92={19d} r93={19d} r94={19d} r95={19d} r96={19d} r97={19d} r98={19d} r99={19d} r100={19d} r101={19d} r102={19d} r103={19d} r104={19d} r105={19d} r106={19d} r107={19d} r108={19d} r109={19d} r110={19d} r111={19d} r112={19d} r113={19d} r114={19d} r115={19d} r116={19d} r117={19d} r118={19d} r119={19d} r120={19d} r121={19d} r122={19d} r123={19d} r124={19d} r125={19d} r126={19d} r127={19d} 
;;    total ref usage 2889{2455d,430u,4e} in 269{250 regular + 19 call} insns.
(note 1 0 771 NOTE_INSN_DELETED)

(note 771 1 772 2 ( child (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ child ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 772 771 773 2 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 773 772 774 2 ( addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 774 773 7 2 ( data (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ data ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 774 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 657 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 657 6 2 2 arch/arm/kernel/ptrace.c:790 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -28 [0xffffffffffffffe4])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 10 sl))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 24 [0x18])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(insn:TI 2 657 10 2 arch/arm/kernel/ptrace.c:790 (set (reg/v/f:SI 4 r4 [orig:188 child ] [188])
        (reg:SI 0 r0 [ child ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ child ])
        (nil)))

(insn:TI 10 2 775 2 arch/arm/kernel/ptrace.c:794 (set (reg:SI 0 r0 [192])
        (plus:SI (reg/v:SI 1 r1 [orig:189 request ] [189])
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (nil))

(note 775 10 658 2 ( child (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:188 child ] [188])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn/f 658 775 659 2 arch/arm/kernel/ptrace.c:790 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -92 [0xffffffffffffffa4]))) 4 {*arm_addsi3} (nil))

(note 659 658 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 659 5 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (reg:SI 2 r2 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 11 2 arch/arm/kernel/ptrace.c:790 (set (reg/v:SI 5 r5 [orig:191 data ] [191])
        (reg:SI 3 r3 [ data ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 11 5 12 2 arch/arm/kernel/ptrace.c:794 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 0 r0 [192])
                        (const_int 27 [0x1b]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 0 r0 [192])
                                (const_int 4 [0x4]))
                            (label_ref 12)) [0 S4 A32])
                    (label_ref 530)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 12))
        ]) 265 {arm_casesi_internal} (expr_list:REG_DEAD (reg:SI 0 r0 [192])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (insn_list:REG_LABEL_TARGET 530 (nil)))))
;; End of basic block 2 -> ( 45 3 5 6 8 10 12 14 15 16 18 20 31)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  45 [7.7%] 
;; Succ edge  3 [7.7%] 
;; Succ edge  5 [7.7%] 
;; Succ edge  6 [7.7%] 
;; Succ edge  8 [7.7%] 
;; Succ edge  10 [7.7%] 
;; Succ edge  12 [7.7%] 
;; Succ edge  14 [7.7%] 
;; Succ edge  15 [7.7%] 
;; Succ edge  16 [7.7%] 
;; Succ edge  18 [7.7%] 
;; Succ edge  20 [7.7%] 
;; Succ edge  31 [7.7%] 

;; Insn is not within a basic block
(code_label 12 11 13 108 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 13 12 14 arch/arm/kernel/ptrace.c:794 (addr_vec:SI [
            (label_ref:SI 15)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 54)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 63)
            (label_ref:SI 86)
            (label_ref:SI 109)
            (label_ref:SI 133)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 157)
            (label_ref:SI 166)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 530)
            (label_ref:SI 173)
            (label_ref:SI 197)
            (label_ref:SI 221)
            (label_ref:SI 358)
        ]) -1 (nil))

(barrier 14 13 776)

(note 776 14 777 3 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 777 776 15 3 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 15 777 16 3 96 "" [1 uses])

(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(note 18 17 21 3 NOTE_INSN_DELETED)

(note 21 18 22 3 NOTE_INSN_DELETED)

(note 22 21 23 3 NOTE_INSN_DELETED)

(note 23 22 25 3 NOTE_INSN_DELETED)

(note 25 23 26 3 NOTE_INSN_DELETED)

(note 26 25 638 3 NOTE_INSN_DELETED)

(insn:TI 638 26 639 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 2 r2 [orig:190 addr ] [190])
                        (const_int 3 [0x3]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [195])
                (and:SI (reg:SI 2 r2 [orig:190 addr ] [190])
                    (const_int 3 [0x3])))
        ]) 69 {*andsi3_compare0} (nil))

(insn:TI 639 638 27 3 arch/arm/kernel/ptrace.c:258 (set (reg:SI 2 r2 [195])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 2 r2 [195])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 27 639 28 3 arch/arm/kernel/ptrace.c:258 (parallel [
            (set (reg:SI 2 r2 [201])
                (ior:SI (geu:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                        (const_int 296 [0x128]))
                    (reg:SI 2 r2 [195])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 28 27 29 3 arch/arm/kernel/ptrace.c:258 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [201])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 29 28 30 3 arch/arm/kernel/ptrace.c:258 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 48 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  48 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 30 29 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 30 31 4 NOTE_INSN_DELETED)

(insn:TI 31 41 49 4 arch/arm/kernel/ptrace.c:268 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 71 [0x47]))) 219 {*arm_cmpsi_insn} (nil))

(insn 49 31 778 4 arch/arm/kernel/ptrace.c:271 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(note 778 49 42 4 ( __p (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __p ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 42 778 779 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 6 r6 [205])
            (and:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int -4 [0xfffffffffffffffc])))) 2295 {neon_vornv2di+28} (nil))

(note 779 42 39 4 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 39 779 43 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
            (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                    (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 43 39 648 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 6 r6 [206])
            (plus:SI (reg/f:SI 3 r3 [orig:202 <variable>.stack ] [202])
                (reg:SI 6 r6 [205])))) 2268 {neon_vornv2di+1} (nil))

(insn 648 43 45 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [203])
            (const_int 8112 [0x1fb0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 8112 [0x1fb0])
        (nil)))

(insn:TI 45 648 780 4 arch/arm/kernel/ptrace.c:160 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:179 tmp ] [179])
            (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                    (reg:SI 3 r3 [203])) [0 <variable>.uregs S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 6 r6 [206])
            (expr_list:REG_DEAD (reg:SI 3 r3 [203])
                (expr_list:REG_EQUAL (mem/s/j:SI (plus:SI (reg:SI 6 r6 [206])
                            (const_int 8112 [0x1fb0])) [0 <variable>.uregs S4 A32])
                    (nil))))))

(note 780 45 50 4 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:179 tmp ] [179])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 50 780 782 4 arch/arm/kernel/ptrace.c:271 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592343))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(note 782 50 783 4 ( __p (nil)) NOTE_INSN_VAR_LOCATION)

(note 783 782 781 4 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 781 783 736 4 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 736 781 737 4 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 4 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 737 736 784)

(note 784 737 785 5 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 785 784 786 5 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 786 785 787 5 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(note 787 786 788 5 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(note 788 787 54 5 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 54 788 55 5 97 "" [1 uses])

(note 55 54 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 55 789 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 1 r1)
        (reg:SI 2 r2 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:190 addr ] [190])
        (nil)))

(note 789 57 56 5 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 56 789 58 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 56 59 5 arch/arm/kernel/ptrace.c:800 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:191 data ] [191])
        (nil)))

(call_insn:TI 59 58 738 5 arch/arm/kernel/ptrace.c:800 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_write_user") [flags 0x3] <function_decl 0x1155b480 ptrace_write_user>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 738 59 739 5 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 5 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 739 738 790)

(note 790 739 791 6 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 791 790 792 6 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 792 791 63 6 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 63 792 64 6 98 "" [1 uses])

(note 64 63 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 66 64 650 6 NOTE_INSN_DELETED)

(insn:TI 650 66 635 6 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 635 650 636 6 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 636 635 68 6 include/linux/regset.h:338 (set (reg:SI 3 r3 [208])
        (and:SI (reg:SI 3 r3 [208])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 68 636 69 6 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:210 <variable>.addr_limit ] [210])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [208])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [208])
        (nil)))

(insn:TI 69 68 794 6 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:176 flag ] [176])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:177 roksum ] [177])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:176 flag ] [176])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:177 roksum ] [177])
            (nil))))

(note 794 69 793 6 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:177 roksum ] [177])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 793 794 70 6 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:176 flag ] [176])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 70 793 71 6 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:176 flag ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 71 70 72 6 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 48 7)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  7 [29.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [29.0%]  (fallthru)
(note 72 71 78 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 78 72 80 7 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 80 78 79 7 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 79 80 795 7 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(note 795 79 81 7 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 81 795 796 7 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(note 796 81 77 7 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 77 796 76 7 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 76 77 82 7 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:176 flag ] [176])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:176 flag ] [176])
        (nil)))

(call_insn 82 76 797 7 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_get") [flags 0x3] <function_decl 0x1155be80 gpr_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 797 82 740 7 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 740 797 741 7 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 7 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 741 740 798)

(note 798 741 799 8 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 799 798 800 8 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 800 799 86 8 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 86 800 87 8 99 "" [1 uses])

(note 87 86 89 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 89 87 651 8 NOTE_INSN_DELETED)

(insn:TI 651 89 633 8 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 633 651 634 8 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 634 633 91 8 include/linux/regset.h:361 (set (reg:SI 3 r3 [214])
        (and:SI (reg:SI 3 r3 [214])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 91 634 92 8 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:216 <variable>.addr_limit ] [216])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [214])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [214])
        (nil)))

(insn:TI 92 91 802 8 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:173 flag ] [173])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:174 roksum ] [174])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 72 [0x48])
                        (reg/v:SI 12 ip [orig:173 flag ] [173])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:174 roksum ] [174])
            (nil))))

(note 802 92 801 8 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:174 roksum ] [174])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 801 802 93 8 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:173 flag ] [173])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 93 801 94 8 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:173 flag ] [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 94 93 95 8 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 8 -> ( 48 9)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  9 [29.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 95 94 101 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 95 103 9 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 102 9 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 102 103 803 9 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 172 [0xac])))
        (nil)))

(note 803 102 104 9 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 104 803 804 9 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(note 804 104 100 9 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 100 804 99 9 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 99 100 105 9 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:173 flag ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:173 flag ] [173])
        (nil)))

(call_insn 105 99 805 9 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("gpr_set") [flags 0x3] <function_decl 0x1155bf80 gpr_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 805 105 742 9 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 742 805 743 9 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 9 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 743 742 806)

(note 806 743 807 10 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 807 806 808 10 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 808 807 109 10 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 109 808 110 10 100 "" [1 uses])

(note 110 109 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 112 110 652 10 NOTE_INSN_DELETED)

(insn:TI 652 112 631 10 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 631 652 632 10 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 632 631 114 10 include/linux/regset.h:338 (set (reg:SI 3 r3 [220])
        (and:SI (reg:SI 3 r3 [220])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 114 632 115 10 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:222 <variable>.addr_limit ] [222])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [220])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [220])
        (nil)))

(insn:TI 115 114 810 10 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:170 flag ] [170])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:171 roksum ] [171])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:170 flag ] [170])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:171 roksum ] [171])
            (nil))))

(note 810 115 809 10 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:171 roksum ] [171])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 809 810 116 10 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:170 flag ] [170])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 116 809 117 10 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:170 flag ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 117 116 118 10 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 48 11)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 118 117 125 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 118 127 11 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 127 125 126 11 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 126 127 811 11 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(note 811 126 128 11 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 128 811 812 11 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(note 812 128 124 11 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 124 812 123 11 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 123 124 129 11 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:170 flag ] [170])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:170 flag ] [170])
        (nil)))

(call_insn 129 123 813 11 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_get") [flags 0x3] <function_decl 0x11582080 fpa_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 813 129 744 11 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 744 813 745 11 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 11 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 745 744 814)

(note 814 745 815 12 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 815 814 816 12 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 816 815 133 12 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 133 816 134 12 101 "" [1 uses])

(note 134 133 136 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 136 134 653 12 NOTE_INSN_DELETED)

(insn:TI 653 136 629 12 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 629 653 630 12 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 630 629 138 12 include/linux/regset.h:361 (set (reg:SI 3 r3 [227])
        (and:SI (reg:SI 3 r3 [227])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 138 630 139 12 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:229 <variable>.addr_limit ] [229])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [227])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [227])
        (nil)))

(insn:TI 139 138 818 12 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:167 flag ] [167])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:168 roksum ] [168])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 140 [0x8c])
                        (reg/v:SI 12 ip [orig:167 flag ] [167])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:168 roksum ] [168])
            (nil))))

(note 818 139 817 12 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:168 roksum ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 817 818 140 12 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:167 flag ] [167])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 140 817 141 12 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:167 flag ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 141 140 142 12 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 48 13)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  13 [29.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 142 141 149 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 149 142 151 13 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 151 149 150 13 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 150 151 819 13 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 208 [0xd0])))) 167 {*arm_movsi_insn} (nil))

(note 819 150 152 13 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 152 819 820 13 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 140 [0x8c])) 167 {*arm_movsi_insn} (nil))

(note 820 152 148 13 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 148 820 147 13 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 147 148 153 13 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:167 flag ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:167 flag ] [167])
        (nil)))

(call_insn 153 147 821 13 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fpa_set") [flags 0x3] <function_decl 0x11582180 fpa_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 821 153 746 13 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 746 821 747 13 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 13 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 747 746 822)

(note 822 747 823 14 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 823 822 824 14 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 824 823 157 14 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 157 824 158 14 102 "" [1 uses])

(note 158 157 159 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 159 158 161 14 arch/arm/kernel/ptrace.c:842 (set (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 161 159 825 14 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(note 825 161 160 14 ( __p (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __p ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 160 825 826 14 arch/arm/kernel/ptrace.c:842 (set (reg/v:SI 2 r2 [ __r2 ])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
                (const_int 96 [0x60])) [0 <variable>.tp_value+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:234 <variable>.stack ] [234])
        (nil)))

(note 826 160 162 14 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 162 826 827 14 arch/arm/kernel/ptrace.c:842 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592319))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(note 827 162 828 14 ( __p (nil)) NOTE_INSN_VAR_LOCATION)

(note 828 827 748 14 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 748 828 749 14 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 14 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 749 748 829)

(note 829 749 830 15 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 830 829 831 15 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 831 830 832 15 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(note 832 831 166 15 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 6 [r6]
;; live  kill	

;; Pred edge  2 [7.7%] 
(code_label 166 832 167 15 103 "" [1 uses])

(note 167 166 168 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 168 167 170 15 arch/arm/kernel/ptrace.c:847 (set (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:188 child ] [188])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 170 168 833 15 arch/arm/kernel/ptrace.c:848 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 833 170 834 15 ( addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 834 833 169 15 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 169 834 750 15 arch/arm/kernel/ptrace.c:847 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
                (const_int 76 [0x4c])) [0 <variable>.syscall+0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:235 <variable>.stack ] [235])
        (nil)))

(jump_insn 750 169 751 15 arch/arm/kernel/ptrace.c:849 (set (pc)
        (label_ref 548)) -1 (nil))
;; End of basic block 15 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  49 [100.0%] 

(barrier 751 750 835)

(note 835 751 836 16 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 836 835 837 16 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 837 836 173 16 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 173 837 174 16 104 "" [1 uses])

(note 174 173 176 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 176 174 654 16 NOTE_INSN_DELETED)

(insn:TI 654 176 627 16 include/linux/regset.h:338 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 627 654 628 16 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 628 627 178 16 include/linux/regset.h:338 (set (reg:SI 3 r3 [236])
        (and:SI (reg:SI 3 r3 [236])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 178 628 179 16 include/linux/regset.h:338 (set (reg:SI 12 ip [orig:238 <variable>.addr_limit ] [238])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [236])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [236])
        (nil)))

(insn:TI 179 178 839 16 include/linux/regset.h:338 (parallel [
            (set (reg/v:SI 12 ip [orig:164 flag ] [164])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (set (reg/v:SI 3 r3 [orig:165 roksum ] [165])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:164 flag ] [164])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9464662))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:165 roksum ] [165])
            (nil))))

(note 839 179 838 16 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:165 roksum ] [165])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 838 839 180 16 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:164 flag ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 180 838 181 16 include/linux/regset.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:164 flag ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 181 180 182 16 include/linux/regset.h:338 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 16 -> ( 48 17)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  17 [29.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  16 [29.0%]  (fallthru)
(note 182 181 189 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 189 182 191 17 include/linux/regset.h:341 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 191 189 190 17 include/linux/regset.h:341 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 190 191 840 17 include/linux/regset.h:341 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(note 840 190 192 17 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 192 840 841 17 include/linux/regset.h:341 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(note 841 192 188 17 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 188 841 187 17 include/linux/regset.h:341 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 187 188 193 17 include/linux/regset.h:341 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:164 flag ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:164 flag ] [164])
        (nil)))

(call_insn 193 187 842 17 include/linux/regset.h:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get") [flags 0x3] <function_decl 0x11582280 vfp_get>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 842 193 752 17 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 752 842 753 17 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 17 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 753 752 843)

(note 843 753 844 18 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 844 843 845 18 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 845 844 197 18 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [7.7%] 
(code_label 197 845 198 18 105 "" [1 uses])

(note 198 197 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 200 198 655 18 NOTE_INSN_DELETED)

(insn:TI 655 200 625 18 include/linux/regset.h:361 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 625 655 626 18 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 626 625 202 18 include/linux/regset.h:361 (set (reg:SI 3 r3 [243])
        (and:SI (reg:SI 3 r3 [243])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 202 626 203 18 include/linux/regset.h:361 (set (reg:SI 12 ip [orig:245 <variable>.addr_limit ] [245])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [243])
                (const_int 8 [0x8])) [0 <variable>.addr_limit+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [243])
        (nil)))

(insn:TI 203 202 847 18 include/linux/regset.h:361 (parallel [
            (set (reg/v:SI 12 ip [orig:161 flag ] [161])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 0 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (set (reg/v:SI 3 r3 [orig:162 roksum ] [162])
                (asm_operands:SI ("adds %1, %2, %3; sbcccs %1, %1, %0; movcc %0, #0") ("=&r") 1 [
                        (reg/v:SI 5 r5 [orig:191 data ] [191])
                        (const_int 260 [0x104])
                        (reg/v:SI 12 ip [orig:161 flag ] [161])
                    ]
                     [
                        (asm_input:SI ("r") 0)
                        (asm_input:SI ("Ir") 0)
                        (asm_input:SI ("0") 0)
                    ] 9467606))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg/v:SI 3 r3 [orig:162 roksum ] [162])
            (nil))))

(note 847 203 846 18 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:162 roksum ] [162])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 846 847 204 18 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:161 flag ] [161])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 204 846 205 18 include/linux/regset.h:361 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:161 flag ] [161])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 205 204 206 18 include/linux/regset.h:361 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 545)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 18 -> ( 48 19)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  48 [71.0%] 
;; Succ edge  19 [29.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  18 [29.0%]  (fallthru)
(note 206 205 213 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 213 206 215 19 include/linux/regset.h:364 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(insn 215 213 214 19 include/linux/regset.h:364 (set (reg:SI 2 r2)
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 214 215 848 19 include/linux/regset.h:364 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 244 [0xf4])))) 167 {*arm_movsi_insn} (nil))

(note 848 214 216 19 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn 216 848 849 19 include/linux/regset.h:364 (set (reg:SI 3 r3)
        (const_int 260 [0x104])) 167 {*arm_movsi_insn} (nil))

(note 849 216 212 19 ( roksum (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 212 849 211 19 include/linux/regset.h:364 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(insn:TI 211 212 217 19 include/linux/regset.h:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 12 ip [orig:161 flag ] [161])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:161 flag ] [161])
        (nil)))

(call_insn 217 211 850 19 include/linux/regset.h:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_set") [flags 0x3] <function_decl 0x11582380 vfp_set>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 850 217 754 19 ( flag (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 754 850 755 19 (set (pc)
        (label_ref 665)) -1 (nil))
;; End of basic block 19 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%] 

(barrier 755 754 851)

(note 851 755 852 20 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 852 851 853 20 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 853 852 221 20 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 221 853 222 20 106 "" [1 uses])

(note 222 221 225 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 225 222 223 20 NOTE_INSN_DELETED)

(insn:TI 223 225 224 20 arch/arm/kernel/ptrace.c:879 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 224 223 854 20 arch/arm/kernel/ptrace.c:879 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 854 224 226 20 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 226 854 227 20 arch/arm/kernel/ptrace.c:879 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 227 226 228 20 arch/arm/kernel/ptrace.c:879 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 20 -> ( 47 21)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  47 [19.1%] 
;; Succ edge  21 [80.9%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  20 [80.9%]  (fallthru)
(note 228 227 230 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 230 228 231 21 arch/arm/kernel/ptrace.c:472 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 231 230 232 21 arch/arm/kernel/ptrace.c:472 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  22 [29.0%]  (fallthru)
;; Succ edge  23 [71.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%]  (fallthru)
(note 232 231 243 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 243 232 245 22 NOTE_INSN_DELETED)

(note 245 243 247 22 NOTE_INSN_DELETED)

(note 247 245 250 22 NOTE_INSN_DELETED)

(note 250 247 233 22 NOTE_INSN_DELETED)

(insn:TI 233 250 234 22 arch/arm/kernel/ptrace.c:432 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:190 addr ] [190])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 234 233 235 22 arch/arm/kernel/ptrace.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 235 234 236 22 arch/arm/kernel/ptrace.c:432 (set (reg:SI 7 r7 [orig:159 D.28052 ] [159])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 236 235 237 22 arch/arm/kernel/ptrace.c:433 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 237 236 251 22 arch/arm/kernel/ptrace.c:433 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hw_breakpoint_slots") [flags 0x41] <function_decl 0x10ad9700 hw_breakpoint_slots>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 251 237 238 22 arch/arm/kernel/ptrace.c:443 (set (reg:SI 7 r7 [orig:254 D.28052 ] [254])
        (zero_extend:SI (reg:QI 7 r7 [orig:159 D.28052 ] [159]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 238 251 239 22 arch/arm/kernel/ptrace.c:433 (set (reg:SI 8 r8 [orig:158 D.28053 ] [158])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 239 238 248 22 arch/arm/kernel/ptrace.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_debug_arch") [flags 0x41] <function_decl 0x10ad9400 arch_get_debug_arch>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 248 239 240 22 arch/arm/kernel/ptrace.c:441 (set (reg:SI 8 r8 [orig:252 D.28053 ] [252])
        (zero_extend:SI (reg:QI 8 r8 [orig:158 D.28053 ] [158]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 240 248 855 22 arch/arm/kernel/ptrace.c:434 (set (reg:SI 6 r6 [250])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 855 240 242 22 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn 242 855 246 22 arch/arm/kernel/ptrace.c:435 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_get_max_wp_len") [flags 0x41] <function_decl 0x10ad9480 arch_get_max_wp_len>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 246 242 856 22 arch/arm/kernel/ptrace.c:439 (set (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
        (ior:SI (ashift:SI (reg:SI 6 r6 [250])
                (const_int 8 [0x8]))
            (reg:SI 0 r0))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 856 246 249 22 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 249 856 857 22 arch/arm/kernel/ptrace.c:441 (set (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
        (ior:SI (ashift:SI (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
                (const_int 8 [0x8]))
            (reg:SI 8 r8 [orig:252 D.28053 ] [252]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:139 reg.860 ] [139])
        (nil)))

(note 857 249 252 22 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 252 857 858 22 arch/arm/kernel/ptrace.c:443 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
                (const_int 8 [0x8]))
            (reg:SI 7 r7 [orig:254 D.28052 ] [254]))) 270 {*arith_shiftsi} (nil))

(note 858 252 756 22 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:152 reg ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 756 858 757 22 (set (pc)
        (label_ref 337)) -1 (nil))
;; End of basic block 22 -> ( 30)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  30 [100.0%] 

(barrier 757 756 859)

(note 859 757 860 23 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 860 859 861 23 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(note 861 860 255 23 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 24 [cc]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%] 
(code_label 255 861 256 23 114 "" [1 uses])

(note 256 255 260 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 260 256 862 23 arch/arm/kernel/ptrace.c:358 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 2345 {neon_vornv2di+78} (nil))

(note 862 260 265 23 ( num (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 265 862 268 23 arch/arm/kernel/ptrace.c:359 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 6 r6 [orig:190 addr ] [190])))) 2270 {neon_vornv2di+3} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn:TI 268 265 863 23 arch/arm/kernel/ptrace.c:360 (set (reg:SI 3 r3 [255])
        (plus:SI (reg/v:SI 3 r3 [orig:136 num.864 ] [136])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(note 863 268 269 23 ( num (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 269 863 864 23 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 3 r3 [orig:153 idx ] [153])
        (ashiftrt:SI (reg:SI 3 r3 [255])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(note 864 269 270 23 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:153 idx ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 270 864 271 23 arch/arm/kernel/ptrace.c:476 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:153 idx ] [153])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 271 270 277 23 arch/arm/kernel/ptrace.c:476 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 23 -> ( 43 24)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  23 [50.0%]  (fallthru)
(note 277 271 278 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 278 277 280 24 NOTE_INSN_DELETED)

(note 280 278 293 24 NOTE_INSN_DELETED)

(note 293 280 281 24 NOTE_INSN_DELETED)

(insn:TI 281 293 865 24 arch/arm/kernel/ptrace.c:481 (set (reg:SI 3 r3 [259])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:153 idx ] [153])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(note 865 281 283 24 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 283 865 866 24 arch/arm/kernel/ptrace.c:481 (set (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [259])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 866 283 284 24 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 284 866 292 24 arch/arm/kernel/ptrace.c:482 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 292 284 867 24 arch/arm/kernel/ptrace.c:487 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                    (const_int 212 [0xd4])) [0 <variable>.hw.D.25978.D.25977.info.ctrl+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(note 867 292 294 24 ( arch_ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 294 867 285 24 arch/arm/kernel/ptrace.c:487 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
            (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
                (const_int 8 [0x8])
                (const_int 19 [0x13])))) 2323 {neon_vornv2di+56} (nil))

(jump_insn 285 294 758 24 arch/arm/kernel/ptrace.c:482 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 24 -> ( 27 25)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  27 [85.0%] 
;; Succ edge  25 [15.0%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}

;; Pred edge  24 [15.0%]  (fallthru)
(note 758 285 759 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 759 758 760 25 (set (pc)
        (label_ref 337)) -1 (nil))
;; End of basic block 25 -> ( 30)


;; Succ edge  30 [100.0%] 

(barrier 760 759 303)

;; Start of basic block ( 27) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  27 [91.0%] 
(code_label 303 760 298 26 122 "" [1 uses])

(note 298 303 299 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 299 298 300 26 NOTE_INSN_DELETED)

(insn:TI 300 299 301 26 arch/arm/kernel/ptrace.c:494 (set (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (lshiftrt:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 26 24) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [100.0%]  (fallthru,dfs_back)
;; Pred edge  24 [85.0%] 
(code_label 301 300 302 27 121 "" [1 uses])

(note 302 301 304 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 304 302 305 27 NOTE_INSN_DELETED)

(insn:TI 305 304 306 27 arch/arm/kernel/ptrace.c:493 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 306 305 307 27 arch/arm/kernel/ptrace.c:493 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 27 -> ( 26 28)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  26 [91.0%] 
;; Succ edge  28 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  27 [9.0%]  (fallthru,loop_exit)
(note 307 306 308 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 308 307 309 28 NOTE_INSN_DELETED)

(insn:TI 309 308 312 28 arch/arm/kernel/ptrace.c:496 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (nil)))

(insn:TI 312 309 868 28 arch/arm/kernel/ptrace.c:497 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
            (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
                    (const_int 176 [0xb0])) [0 <variable>.attr.D.23452.bp_addr+0 S4 A64]))) 2345 {neon_vornv2di+78} (nil))

(note 868 312 869 28 ( bp (nil)) NOTE_INSN_VAR_LOCATION)

(note 869 868 310 28 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:152 reg ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 310 869 316 28 arch/arm/kernel/ptrace.c:496 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 337)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  30 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  28 [50.0%]  (fallthru)
(note 316 310 319 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 319 316 321 29 NOTE_INSN_DELETED)

(note 321 319 322 29 NOTE_INSN_DELETED)

(note 322 321 326 29 NOTE_INSN_DELETED)

(note 326 322 327 29 NOTE_INSN_DELETED)

(note 327 326 329 29 NOTE_INSN_DELETED)

(note 329 327 331 29 NOTE_INSN_DELETED)

(note 331 329 333 29 NOTE_INSN_DELETED)

(note 333 331 335 29 NOTE_INSN_DELETED)

(note 335 333 317 29 NOTE_INSN_DELETED)

(insn:TI 317 335 323 29 arch/arm/kernel/ptrace.c:497 (set (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:141 arch_ctrl$len ] [141])
        (nil)))

(insn:TI 323 317 320 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [269])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))) 124 {extzv_t2} (nil))

(insn 320 323 330 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 0 r0 [266])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))) 124 {extzv_t2} (nil))

(insn:TI 330 320 334 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 7 r7 [276])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))) 124 {extzv_t2} (nil))

(insn 334 330 870 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 2 r2 [280])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))) 124 {extzv_t2} (nil))

(note 870 334 324 29 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 324 870 325 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [270])
        (ashift:SI (reg:SI 1 r1 [269])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 325 324 328 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 1 r1 [271])
        (ior:SI (ashift:SI (reg:SI 0 r0 [266])
                (const_int 22 [0x16]))
            (reg:SI 1 r1 [270]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 0 r0 [266])
        (nil)))

(insn:TI 328 325 871 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [274])
        (ior:SI (lshiftrt:SI (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
                (const_int 31 [0x1f]))
            (reg:SI 1 r1 [271]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [271])
        (nil)))

(note 871 328 332 29 ( arch_ctrl (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 332 871 336 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg:SI 3 r3 [278])
        (ior:SI (ashift:SI (reg:SI 7 r7 [276])
                (const_int 3 [0x3]))
            (reg:SI 3 r3 [274]))) 270 {*arith_shiftsi} (nil))

(insn:TI 336 332 872 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:29 (set (reg/v:SI 2 r2 [orig:152 reg ] [152])
        (ior:SI (ashift:SI (reg:SI 2 r2 [280])
                (const_int 1 [0x1]))
            (reg:SI 3 r3 [278]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [278])
        (nil)))
;; End of basic block 29 -> ( 30)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  30 [100.0%]  (fallthru)

(note 872 336 873 30 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:152 reg ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 873 872 874 30 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 874 873 875 30 ( arch_ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 875 874 337 30 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 29 22 28 25) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  29 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
;; Pred edge  28 [50.0%] 
;; Pred edge  25 [100.0%] 
(code_label 337 875 338 30 115 ("put") [3 uses])

(note 338 337 342 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 342 338 352 30 NOTE_INSN_DELETED)

(note 352 342 340 30 ("out") NOTE_INSN_DELETED_LABEL 119)

(insn:TI 340 352 876 30 arch/arm/kernel/ptrace.c:503 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(note 876 340 341 30 ( __p (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __p ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 341 876 878 30 arch/arm/kernel/ptrace.c:503 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %2,r2 ; .err ; .endif
	bl	__put_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                        (reg/v:SI 2 r2 [ __r2 ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                        (asm_input:SI ("r") 0)
                    ] 9592350))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (nil))))))

(note 878 341 879 30 ( __p (nil)) NOTE_INSN_VAR_LOCATION)

(note 879 878 877 30 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 877 879 568 30 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 568 877 880 30 arch/arm/kernel/ptrace.c:504 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/v:SI 0 r0 [ __e ])
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [orig:151 D.28058 ] [151])
                (reg/v:SI 0 r0 [ __e ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(note 880 568 569 30 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 569 880 881 30 arch/arm/kernel/ptrace.c:504 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 6 r6 [orig:151 D.28058 ] [151])
            (const_int -14 [0xfffffffffffffff2]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(note 881 569 761 30 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 761 881 762 30 (set (pc)
        (label_ref 524)) -1 (nil))
;; End of basic block 30 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 762 761 882)

(note 882 762 883 31 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(note 883 882 884 31 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 884 883 885 31 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(note 885 884 886 31 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 886 885 887 31 ( bp (nil)) NOTE_INSN_VAR_LOCATION)

(note 887 886 888 31 ( arch_ctrl (nil)) NOTE_INSN_VAR_LOCATION)

(note 888 887 889 31 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 889 888 890 31 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(note 890 889 891 31 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 891 890 358 31 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 358 891 359 31 107 "" [1 uses])

(note 359 358 362 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 362 359 360 31 NOTE_INSN_DELETED)

(insn:TI 360 362 361 31 arch/arm/kernel/ptrace.c:887 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 361 360 892 31 arch/arm/kernel/ptrace.c:887 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_get_breakpoints") [flags 0x41] <function_decl 0x110a8680 ptrace_get_breakpoints>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 892 361 363 31 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 363 892 364 31 arch/arm/kernel/ptrace.c:887 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 364 363 365 31 arch/arm/kernel/ptrace.c:887 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 540)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 31 -> ( 47 32)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  47 [19.1%] 
;; Succ edge  32 [80.9%]  (fallthru)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  31 [80.9%]  (fallthru)
(note 365 364 367 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 367 365 368 32 arch/arm/kernel/ptrace.c:519 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:190 addr ] [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 368 367 374 32 arch/arm/kernel/ptrace.c:519 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 44 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  44 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 374 368 378 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 378 374 893 33 arch/arm/kernel/ptrace.c:521 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (reg/v:SI 6 r6 [orig:190 addr ] [190]))) 2345 {neon_vornv2di+78} (nil))

(note 893 378 384 33 ( num (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 384 893 388 33 arch/arm/kernel/ptrace.c:359 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 6 r6 [orig:190 addr ] [190])))) 2270 {neon_vornv2di+3} (nil))

(insn:TI 388 384 894 33 arch/arm/kernel/ptrace.c:360 (set (reg:SI 7 r7 [282])
        (plus:SI (reg/v:SI 7 r7 [orig:135 num.865 ] [135])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(note 894 388 379 33 ( num (nil)) NOTE_INSN_VAR_LOCATION)

(insn 379 894 895 33 arch/arm/kernel/ptrace.c:524 (cond_exec (ge (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (const_int 4 [0x4]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(note 895 379 385 33 ( implied_type (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 385 895 389 33 arch/arm/kernel/ptrace.c:522 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (const_int 3 [0x3]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(insn:TI 389 385 896 33 arch/arm/kernel/ptrace.c:360 (set (reg/v:SI 7 r7 [orig:145 idx ] [145])
        (ashiftrt:SI (reg:SI 7 r7 [282])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(note 896 389 390 33 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:145 idx ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 390 896 391 33 arch/arm/kernel/ptrace.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 391 390 392 33 arch/arm/kernel/ptrace.c:527 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 33 -> ( 43 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [50.0%] 
;; Succ edge  34 [50.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 10 [sl] 14 [lr] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  33 [50.0%]  (fallthru)
(note 392 391 396 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 396 392 393 34 NOTE_INSN_DELETED)

(insn:TI 393 396 897 34 arch/arm/kernel/ptrace.c:532 (set (reg/v:SI 0 r0 [ __p ])
        (reg/v:SI 5 r5 [orig:191 data ] [191])) 167 {*arm_movsi_insn} (nil))

(note 897 393 394 34 ( __p (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __p ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 394 897 899 34 arch/arm/kernel/ptrace.c:532 discrim 4 (parallel [
            (set (reg/v:SI 0 r0 [ __e ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=&r") 0 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (set (reg/v:SI 2 r2 [ __r2 ])
                (asm_operands/v:SI (".ifnc %0,r0 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	bl	__get_user_4") ("=r") 1 [
                        (reg/v:SI 0 r0 [ __p ])
                    ]
                     [
                        (asm_input:SI ("0") 0)
                    ] 9592356))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (expr_list:REG_UNUSED (reg:QI 14 lr)
            (nil))))

(note 899 394 900 34 ( __p (nil)) NOTE_INSN_VAR_LOCATION)

(note 900 899 898 34 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 898 900 397 34 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 397 898 395 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [ __e ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [ __e ])
        (nil)))

(insn 395 397 901 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (reg/v:SI 10 sl [orig:147 user_val ] [147])
        (reg/v:SI 2 r2 [ __r2 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [ __r2 ])
        (nil)))

(note 901 395 400 34 ( user_val (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:147 user_val ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 400 901 902 34 arch/arm/kernel/ptrace.c:533 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
            (const_int -14 [0xfffffffffffffff2]))) 2345 {neon_vornv2di+78} (nil))

(note 902 400 903 34 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 903 902 398 34 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 398 903 404 34 arch/arm/kernel/ptrace.c:532 discrim 5 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  34 [50.0%]  (fallthru)
(note 404 398 407 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(note 407 404 405 35 NOTE_INSN_DELETED)

(insn:TI 405 407 904 35 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [283])
        (plus:SI (reg/v:SI 7 r7 [orig:145 idx ] [145])
            (const_int 198 [0xc6]))) 4 {*arm_addsi3} (nil))

(note 904 405 408 35 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 408 904 410 35 arch/arm/kernel/ptrace.c:537 (set (reg:SI 7 r7 [286])
        (plus:SI (mult:SI (reg:SI 7 r7 [283])
                (const_int 4 [0x4]))
            (reg/v/f:SI 4 r4 [orig:188 child ] [188]))) 270 {*arith_shiftsi} (nil))

(insn:TI 410 408 905 35 arch/arm/kernel/ptrace.c:537 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 905 410 906 35 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(note 906 905 411 35 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 411 906 412 35 arch/arm/kernel/ptrace.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 412 411 413 35 arch/arm/kernel/ptrace.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 432)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 35 -> ( 36 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  36 [6.7%]  (fallthru)
;; Succ edge  38 [93.3%] 

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  35 [6.7%]  (fallthru)
(note 413 412 414 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 414 413 907 36 arch/arm/kernel/ptrace.c:539 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(note 907 414 415 36 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(insn 415 907 416 36 arch/arm/kernel/ptrace.c:539 (set (reg:SI 1 r1)
        (reg/v:SI 8 r8 [orig:146 implied_type ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 416 415 908 36 arch/arm/kernel/ptrace.c:539 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_hbp_create") [flags 0x3] <function_decl 0x1155bb80 ptrace_hbp_create>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 908 416 418 36 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 418 908 417 36 include/linux/err.h:34 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:148 bp ] [148])
            (const_int -4096 [0xfffffffffffff000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 417 418 421 36 arch/arm/kernel/ptrace.c:539 (set (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn:TI 421 417 419 36 include/linux/err.h:29 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
            (reg/f:SI 0 r0 [orig:148 bp ] [148]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 419 421 909 36 include/linux/err.h:34 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 36 -> ( 37 44)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  37 [100.0%]  (fallthru)
;; Succ edge  44 [0.0%] 

(note 909 419 425 37 ( bp (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:148 bp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [100.0%]  (fallthru)
(note 425 909 431 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn:TI 431 425 910 37 arch/arm/kernel/ptrace.c:544 (set (mem/s/f/j:SI (plus:SI (reg:SI 7 r7 [286])
                (const_int 4 [0x4])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg/f:SI 0 r0 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:148 bp ] [148])
        (nil)))
;; End of basic block 37 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru)

(note 910 431 911 38 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 911 910 912 38 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 912 911 432 38 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 35 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  35 [93.3%] 
;; Pred edge  37 [100.0%]  (fallthru)
(code_label 432 912 433 38 131 "" [1 uses])

(note 433 432 434 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 434 433 435 38 NOTE_INSN_DELETED)

(note 435 434 442 38 NOTE_INSN_DELETED)

(note 442 435 437 38 NOTE_INSN_DELETED)

(insn:TI 437 442 913 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(note 913 437 438 38 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(insn 438 913 439 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(insn:TI 439 438 914 38 arch/arm/kernel/ptrace.c:547 (set (reg:SI 2 r2)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 72 [0x48])
        (nil)))

(note 914 439 440 38 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 440 914 443 38 arch/arm/kernel/ptrace.c:547 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x115c3d80 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 443 440 915 38 arch/arm/kernel/ptrace.c:549 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:190 addr ] [190])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:190 addr ] [190])
        (nil)))

(note 915 443 565 38 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 565 915 566 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:338+4 ] [338])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 566 565 567 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 64 [0x40])) [0 attr.D.23452.bp_addr+0 S4 A64])
            (reg/v:SI 10 sl [orig:147 user_val ] [147]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 567 566 444 38 arch/arm/kernel/ptrace.c:551 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 68 [0x44])) [0 attr.D.23452.bp_addr+4 S4 A32])
            (reg:SI 3 r3 [orig:338+4 ] [338]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:338+4 ] [338])
        (nil)))

(jump_insn 444 567 451 38 arch/arm/kernel/ptrace.c:549 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 512)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 38 -> ( 39 42)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  39 [29.0%]  (fallthru)
;; Succ edge  42 [71.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  38 [29.0%]  (fallthru)
(note 451 444 453 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 453 451 459 39 NOTE_INSN_DELETED)

(note 459 453 467 39 NOTE_INSN_DELETED)

(note 467 459 477 39 NOTE_INSN_DELETED)

(note 477 467 485 39 NOTE_INSN_DELETED)

(note 485 477 486 39 NOTE_INSN_DELETED)

(note 486 485 491 39 NOTE_INSN_DELETED)

(note 491 486 570 39 NOTE_INSN_DELETED)

(insn:TI 570 491 916 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 916 570 461 39 ( ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 461 916 458 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (reg:SI 3 r3 [306])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 1 [0x1]))) 124 {extzv_t2} (nil))

(insn:TI 458 461 469 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:36 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 31 [0x1f]))
        (reg/v:SI 10 sl [orig:147 user_val ] [147])) 77 {insv_t2} (nil))

(insn 469 458 466 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (reg:SI 2 r2 [312])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 2 [0x2])
            (const_int 3 [0x3]))) 124 {extzv_t2} (nil))

(insn:TI 466 469 475 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:38 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 29 [0x1d]))
        (reg:SI 3 r3 [306])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 3 r3 [306])
        (nil)))

(insn 475 466 917 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:41 (set (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
        (lshiftrt:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(note 917 475 474 39 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 474 917 479 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:40 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 2 [0x2])
            (const_int 27 [0x1b]))
        (reg:SI 2 r2 [312])) 77 {insv_t2} (expr_list:REG_DEAD (reg:SI 2 r2 [312])
        (nil)))

(insn 479 474 918 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (reg:SI 10 sl [319])
        (zero_extract:SI (reg/v:SI 10 sl [orig:147 user_val ] [147])
            (const_int 1 [0x1])
            (const_int 22 [0x16]))) 124 {extzv_t2} (nil))

(note 918 479 476 39 ( user_val (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 476 918 488 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:42 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 8 [0x8])
            (const_int 19 [0x13]))
        (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])) 77 {insv_t2} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:133 reg.871 ] [133])
        (nil)))

(insn 488 476 484 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 84 [0x54]))) 4 {*arm_addsi3} (nil))

(insn:TI 484 488 489 39 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/hw_breakpoint.h:44 (set (zero_extract:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
            (const_int 1 [0x1])
            (const_int 9 [0x9]))
        (reg:SI 10 sl [319])) 77 {insv_t2} (nil))

(insn 489 484 487 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn:TI 487 489 490 39 arch/arm/kernel/ptrace.c:555 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:184 ctrl ] [184])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 490 487 919 39 arch/arm/kernel/ptrace.c:555 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arch_bp_generic_fields") [flags 0x41] <function_decl 0x10ad9200 arch_bp_generic_fields>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 919 490 492 39 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 492 919 920 39 arch/arm/kernel/ptrace.c:556 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 920 492 493 39 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 493 920 494 39 arch/arm/kernel/ptrace.c:556 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 524)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 39 -> ( 44 40)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [50.0%] 
;; Succ edge  40 [50.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  39 [50.0%]  (fallthru)
(note 494 493 495 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn:TI 495 494 921 40 arch/arm/kernel/ptrace.c:559 (set (reg:SI 3 r3 [orig:143 gen_type.377 ] [143])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 gen_type+0 S4 A64])
        (nil)))

(note 921 495 496 40 ( gen_type (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 496 921 922 40 arch/arm/kernel/ptrace.c:559 (set (reg:SI 8 r8 [orig:144 D.28101 ] [144])
        (and:SI (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 67 {*arm_andsi3_insn} (nil))

(note 922 496 497 40 ( implied_type (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 497 922 498 40 arch/arm/kernel/ptrace.c:559 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:144 D.28101 ] [144])
            (reg:SI 3 r3 [orig:143 gen_type.377 ] [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:143 gen_type.377 ] [143])
        (nil)))

(jump_insn:TI 498 497 499 40 arch/arm/kernel/ptrace.c:559 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 521)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 40 -> ( 43 41)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  43 [72.0%] 
;; Succ edge  41 [28.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  40 [28.0%]  (fallthru)
(note 499 498 504 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 504 499 505 41 NOTE_INSN_DELETED)

(note 505 504 506 41 NOTE_INSN_DELETED)

(note 506 505 508 41 NOTE_INSN_DELETED)

(note 508 506 509 41 NOTE_INSN_DELETED)

(insn:TI 509 508 507 41 arch/arm/kernel/ptrace.c:566 (set (reg:SI 3 r3)
        (zero_extend:SI (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                    (const_int 48 [0x30])) [0+40 S1 A64]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 507 509 923 41 arch/arm/kernel/ptrace.c:566 (parallel [
            (set (reg:SI 7 r7 [332])
                (ge:SI (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(note 923 507 647 41 ( ctrl (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 647 923 924 41 arch/arm/kernel/ptrace.c:564 (set (reg:SI 2 r2 [orig:326 gen_len ] [326])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 gen_len+0 S4 A32])
        (nil)))

(note 924 647 510 41 ( gen_len (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -40 [0xffffffffffffffd8])) [0 gen_len+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 510 924 503 41 arch/arm/kernel/ptrace.c:566 (set (zero_extract:SI (reg:SI 3 r3 [orig:333+40 ] [333])
            (const_int 1 [0x1])
            (const_int 0 [0x0]))
        (reg:SI 7 r7 [332])) 77 {insv_t2} (nil))

(insn 503 510 511 41 arch/arm/kernel/ptrace.c:565 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 attr.bp_type+0 S4 A32])
        (reg:SI 8 r8 [orig:144 D.28101 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn:TI 511 503 501 41 arch/arm/kernel/ptrace.c:566 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0+40 S1 A64])
        (reg:QI 3 r3 [orig:333+40 ] [333])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 3 r3 [orig:333+40 ] [333])
        (nil)))

(insn 501 511 925 41 arch/arm/kernel/ptrace.c:564 (set (reg:DI 2 r2 [orig:327 gen_len ] [327])
        (sign_extend:DI (reg:SI 2 r2 [orig:326 gen_len ] [326]))) 140 {*arm_extendsidi2} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 attr.D.23456.bp_len+0 S8 A64])
        (nil)))

(note 925 501 502 41 ( gen_len (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ gen_len ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 502 925 926 41 arch/arm/kernel/ptrace.c:564 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 attr.D.23456.bp_len+0 S8 A64])
        (reg:DI 2 r2 [orig:327 gen_len ] [327])) 163 {*arm_movdi} (nil))
;; End of basic block 41 -> ( 42)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  42 [100.0%]  (fallthru)

(note 926 502 927 42 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 927 926 928 42 ( implied_type (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 928 927 512 42 ( user_val (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:147 user_val ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 41 38) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  38 [71.0%] 
(code_label 512 928 513 42 134 "" [1 uses])

(note 513 512 514 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 514 513 515 42 NOTE_INSN_DELETED)

(insn:TI 515 514 516 42 arch/arm/kernel/ptrace.c:569 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:148 bp ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 516 515 517 42 arch/arm/kernel/ptrace.c:569 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 517 516 929 42 arch/arm/kernel/ptrace.c:569 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("modify_user_hw_breakpoint") [flags 0x41] <function_decl 0x11524780 modify_user_hw_breakpoint>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 929 517 518 42 ( gen_len (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 518 929 930 42 arch/arm/kernel/ptrace.c:569 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 930 518 763 42 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 763 930 764 42 (set (pc)
        (label_ref 524)) -1 (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 764 763 931)

(note 931 764 932 43 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:153 idx ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 932 931 933 43 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:145 idx ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 933 932 934 43 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 934 933 935 43 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 935 934 936 43 ( user_val (nil)) NOTE_INSN_VAR_LOCATION)

(note 936 935 521 43 ( ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 40 33 23) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  40 [72.0%] 
;; Pred edge  33 [50.0%] 
;; Pred edge  23 [50.0%] 
(code_label 521 936 522 43 129 ("out") [3 uses])

(note 522 521 523 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn:TI 523 522 937 43 arch/arm/kernel/ptrace.c:528 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  44 [100.0%]  (fallthru)

(note 937 523 938 44 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 938 937 939 44 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 939 938 940 44 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 940 939 941 44 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 941 940 942 44 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 942 941 943 44 ( user_val (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:147 user_val ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 943 942 944 44 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 944 943 945 44 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:152 reg ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 945 944 946 44 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:154 bp ] [154])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 946 945 947 44 ( arch_ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:185 arch_ctrl ] [185])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 947 946 948 44 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 948 947 524 44 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 43 34 36 32 39 30 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  34 [50.0%] 
;; Pred edge  36 [0.0%] 
;; Pred edge  32 [50.0%] 
;; Pred edge  39 [50.0%] 
;; Pred edge  30 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 524 948 525 44 126 "" [6 uses])

(note 525 524 526 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn:TI 526 525 949 44 arch/arm/kernel/ptrace.c:892 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(note 949 526 950 44 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(note 950 949 527 44 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 527 950 956 44 arch/arm/kernel/ptrace.c:892 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_put_breakpoints") [flags 0x41] <function_decl 0x110a8700 ptrace_put_breakpoints>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(note 956 527 955 44 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(note 955 956 954 44 ( arch_ctrl (nil)) NOTE_INSN_VAR_LOCATION)

(note 954 955 953 44 ( bp (nil)) NOTE_INSN_VAR_LOCATION)

(note 953 954 952 44 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 952 953 951 44 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(note 951 952 765 44 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 765 951 766 44 arch/arm/kernel/ptrace.c:893 (set (pc)
        (label_ref 548)) -1 (nil))
;; End of basic block 44 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 766 765 957)

(note 957 766 958 45 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 958 957 959 45 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 959 958 960 45 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 960 959 961 45 ( reg (nil)) NOTE_INSN_VAR_LOCATION)

(note 961 960 962 45 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 962 961 963 45 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 963 962 964 45 ( gen_type (nil)) NOTE_INSN_VAR_LOCATION)

(note 964 963 965 45 ( implied_type (nil)) NOTE_INSN_VAR_LOCATION)

(note 965 964 966 45 ( user_val (nil)) NOTE_INSN_VAR_LOCATION)

(note 966 965 967 45 ( bp (nil)) NOTE_INSN_VAR_LOCATION)

(note 967 966 530 45 ( ctrl (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [7.7%] 
(code_label 530 967 531 45 95 "" [17 uses])

(note 531 530 532 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn:TI 532 531 536 45 arch/arm/kernel/ptrace.c:897 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:188 child ] [188])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 536 532 968 45 arch/arm/kernel/ptrace.c:897 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ptrace_request") [flags 0x41] <function_decl 0x1109c680 ptrace_request>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 968 536 969 45 ( request (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 45 -> ( 46)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [100.0%]  (fallthru)

(note 969 968 970 46 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 970 969 971 46 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:179 tmp ] [179])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 971 970 972 46 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 972 971 973 46 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 973 972 974 46 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 974 973 665 46 ( __e (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [ __e ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 45 13 17 4 5 7 9 11 14 19) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  45 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 665 974 663 46 136 "" [9 uses])

(note 663 665 537 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn:TI 537 663 977 46 arch/arm/kernel/ptrace.c:897 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 977 537 978 46 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 978 977 976 46 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 976 978 975 46 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(note 975 976 767 46 ( __e (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 767 975 768 46 (set (pc)
        (label_ref 548)) -1 (nil))
;; End of basic block 46 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 768 767 979)

(note 979 768 980 47 ( request (nil)) NOTE_INSN_VAR_LOCATION)

(note 980 979 981 47 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 981 980 982 47 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 982 981 983 47 ( tmp (nil)) NOTE_INSN_VAR_LOCATION)

(note 983 982 984 47 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

(note 984 983 540 47 ( __r2 (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 20 31) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  20 [19.1%] 
;; Pred edge  31 [19.1%] 
(code_label 540 984 541 47 113 "" [2 uses])

(note 541 540 542 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn:TI 542 541 985 47 arch/arm/kernel/ptrace.c:880 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -3 [0xfffffffffffffffd])) 167 {*arm_movsi_insn} (nil))

(note 985 542 986 47 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 986 985 769 47 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 769 986 770 47 (set (pc)
        (label_ref 548)) -1 (nil))
;; End of basic block 47 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  49 [100.0%] 

(barrier 770 769 987)

(note 987 770 988 48 ( request (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ request ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 988 987 989 48 ( addr (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:190 addr ] [190])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 989 988 990 48 ( data (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:191 data ] [191])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 990 989 991 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:176 flag ] [176])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 991 990 992 48 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 992 991 993 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:161 flag ] [161])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 993 992 994 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:162 roksum ] [162])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 994 993 995 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:170 flag ] [170])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 995 994 996 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:171 roksum ] [171])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 996 995 997 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:177 roksum ] [177])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 997 996 998 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:168 roksum ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 998 997 999 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:164 flag ] [164])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 999 998 1000 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:165 roksum ] [165])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1000 999 1001 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:173 flag ] [173])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1001 1000 1002 48 ( roksum (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:174 roksum ] [174])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1002 1001 545 48 ( flag (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:167 flag ] [167])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 18 16 3 6 8 10 12) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  18 [71.0%] 
;; Pred edge  16 [71.0%] 
;; Pred edge  3 [50.0%] 
;; Pred edge  6 [71.0%] 
;; Pred edge  8 [71.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  12 [71.0%] 
(code_label 545 1002 546 48 109 "" [7 uses])

(note 546 545 547 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn:TI 547 546 1003 48 include/linux/regset.h:362 (set (reg/v:SI 6 r6 [orig:181 ret ] [181])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 48 -> ( 49)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  49 [100.0%]  (fallthru)

(note 1003 547 1004 49 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 1004 1003 1005 49 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:181 ret ] [181])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1005 1004 1006 49 ( addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1006 1005 1007 49 ( reg (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:137 reg.862 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1007 1006 1008 49 ( tmp (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [orig:179 tmp ] [179])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1008 1007 1009 49 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1009 1008 1010 49 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:145 idx ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1010 1009 1011 49 ( gen_type (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -44 [0xffffffffffffffd4])) [0 gen_type+0 S4 A64])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1011 1010 1012 49 ( implied_type (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:146 implied_type ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1012 1011 1013 49 ( user_val (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:147 user_val ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1013 1012 1014 49 ( bp (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:148 bp ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1014 1013 1015 49 ( ctrl (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:184 ctrl ] [184])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 1015 1014 548 49 ( __r2 (expr_list:REG_DEP_TRUE (reg/v:SI 2 r2 [ __r2 ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 48 15 44 46 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  48 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
;; Pred edge  44 [100.0%] 
;; Pred edge  46 [100.0%] 
;; Pred edge  47 [100.0%] 
(code_label 548 1015 549 49 112 "" [4 uses])

(note 549 548 554 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn:TI 554 549 560 49 arch/arm/kernel/ptrace.c:902 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:181 ret ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 560 554 660 49 arch/arm/kernel/ptrace.c:902 (use (reg/i:SI 0 r0)) -1 (nil))

(note 660 560 661 49 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 661 660 662 49 arch/arm/kernel/ptrace.c:902 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 49 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 662 661 646)

(note 646 662 649 NOTE_INSN_DELETED)

(note 649 646 0 NOTE_INSN_DELETED)


;; Function ptrace_hbptriggered (ptrace_hbptriggered)[0:1550]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: bp+0
Reg 1: data+0
Reg 2: regs+0
Variables:
  name: regs
    offset 0
      (reg:SI 2 r2 [ regs ])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])
  name: data
    offset 0
      (reg:SI 1 r1 [ data ])

OUT:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])


Basic block 3:
IN:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])

OUT:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])


Basic block 4:
IN:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])

OUT:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: num+0
Variables:
  name: num
    offset 0
      (reg/v:SI 3 r3 [orig:141 num ] [141])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])


Basic block 5:
IN:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])

OUT:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])


Basic block 6:
IN:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: i+0
Variables:
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])
  name: i
    offset 0
      (reg/v:SI 3 r3 [orig:140 i ] [140])

OUT:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: num+0
Variables:
  name: num
    offset 0
      (reg/v:SI 3 r3 [orig:141 num ] [141])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])


Basic block 7:
IN:
Stack adjustment: 136
Reg 0: bp+0
Reg 3: num+0
Variables:
  name: num
    offset 0
      (reg/v:SI 3 r3 [orig:141 num ] [141])
  name: bp
    offset 0
      (reg:SI 0 r0 [ bp ])

OUT:
Stack adjustment: 136


8 basic blocks, 9 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 739, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 739, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9697, maybe hot.
Predecessors:  5 [96.7%]  (dfs_back) 2 [100.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

Successors:  4 [4.5%]  (fallthru,loop_exit) 5 [95.5%] 
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 436, maybe hot.
Predecessors:  3 [4.5%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9261, maybe hot.
Predecessors:  3 [95.5%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  3 [96.7%]  (dfs_back) 6 [3.3%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 303, maybe hot.
Predecessors:  5 [3.3%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 739, maybe hot.
Predecessors:  6 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 739, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_hbptriggered

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={5d,4u} r2={9d,7u} r3={9d,9u} r12={2d,2u} r13={3d,17u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,3u} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 197{148d,48u,1e} in 34{33 regular + 1 call} insns.
(note 5 0 96 NOTE_INSN_DELETED)

(note 96 5 97 2 ( bp (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ bp ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 97 96 98 2 ( data (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ data ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 98 97 10 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 10 98 9 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 9 10 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 9 85 2 NOTE_INSN_DELETED)

(insn/f:TI 85 13 86 2 arch/arm/kernel/ptrace.c:380 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 14 lr)
                    ] 2))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -4 [0xfffffffffffffffc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 86 85 87 2 arch/arm/kernel/ptrace.c:380 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -132 [0xffffffffffffff7c]))) 4 {*arm_addsi3} (nil))

(note 87 86 82 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 82 87 99 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 99 82 16 2 ( data (nil)) NOTE_INSN_VAR_LOCATION)

(insn 16 99 100 2 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 100 16 77 2 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:140 i ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 77 100 101 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(note 101 77 78 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 78 101 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [145])
        (and:SI (reg:SI 2 r2 [145])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 15 78 33 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [145])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  5 [96.7%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 33 15 17 3 143 "" [1 uses])

(note 17 33 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 18 17 32 3 arch/arm/kernel/ptrace.c:387 (set (reg/f:SI 1 r1 [147])
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 18 19 3 arch/arm/kernel/ptrace.c:386 (set (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
        (plus:SI (reg:SI 2 r2 [orig:137 ivtmp.909 ] [137])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 19 32 20 3 arch/arm/kernel/ptrace.c:387 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [147])
            (reg/v/f:SI 0 r0 [orig:142 bp ] [142]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [147])
        (nil)))

(jump_insn:TI 20 19 21 3 arch/arm/kernel/ptrace.c:387 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 21 102 4 arch/arm/kernel/ptrace.c:370 (set (reg:SI 3 r3 [148])
        (ashift:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(note 102 22 23 4 ( i (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 23 102 103 4 arch/arm/kernel/ptrace.c:370 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (plus:SI (reg:SI 3 r3 [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 103 23 24 4 ( num (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:141 num ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 24 103 42 4 arch/arm/kernel/ptrace.c:371 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:141 num ] [141])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 42 24 94 4 arch/arm/kernel/ptrace.c:371 discrim 1 (cond_exec (gt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:141 num ] [141])
            (minus:SI (const_int 32 [0x20])
                (reg/v:SI 3 r3 [orig:141 num ] [141])))) 2270 {neon_vornv2di+3} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 94 42 95 4 (set (pc)
        (label_ref 43)) -1 (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 95 94 104)

(note 104 95 105 5 ( num (nil)) NOTE_INSN_VAR_LOCATION)

(note 105 104 29 5 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:140 i ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 29 105 30 5 140 "" [1 uses])

(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 31 30 34 5 arch/arm/kernel/ptrace.c:386 (set (reg/v:SI 3 r3 [orig:140 i ] [140])
        (plus:SI (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 34 31 35 5 arch/arm/kernel/ptrace.c:386 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:140 i ] [140])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 35 34 36 5 arch/arm/kernel/ptrace.c:386 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9673 [0x25c9])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  3 [96.7%]  (dfs_back)
;; Succ edge  6 [3.3%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [3.3%]  (fallthru,loop_exit)
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 36 106 6 arch/arm/kernel/ptrace.c:390 discrim 2 (set (reg/v:SI 3 r3 [orig:141 num ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 106 37 107 7 ( num (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:141 num ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 107 106 43 7 ( i (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 43 107 44 7 142 "" [1 uses])

(note 44 43 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 53 44 54 7 NOTE_INSN_DELETED)

(note 54 53 83 7 NOTE_INSN_DELETED)

(insn:TI 83 54 50 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 50 83 75 7 arch/arm/kernel/ptrace.c:395 (set (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:142 bp ] [142])
                (const_int 204 [0xcc])) [0 <variable>.hw.D.25978.D.25977.info.trigger+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:142 bp ] [142])
        (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
            (nil))))

(insn:TI 75 50 45 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 1 r1)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 75 76 7 arch/arm/kernel/ptrace.c:392 (set (reg:SI 12 ip [149])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 76 45 56 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2 [153])
        (and:SI (reg:SI 2 r2 [153])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 56 76 108 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 0 r0)
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(note 108 56 58 7 ( bp (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 58 108 47 7 arch/arm/kernel/ptrace.c:397 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 2 r2 [153])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 47 58 80 7 arch/arm/kernel/ptrace.c:393 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg/v:SI 3 r3 [orig:141 num ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:141 num ] [141])
        (nil)))

(insn:TI 80 47 109 7 arch/arm/kernel/ptrace.c:394 (set (reg:SI 3 r3 [150])
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196612 [0x30004])
        (nil)))

(note 109 80 51 7 ( num (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 51 109 46 7 arch/arm/kernel/ptrace.c:395 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:151 <variable>.hw.D.25978.D.25977.info.trigger ] [151])
        (nil)))

(insn:TI 46 51 49 7 arch/arm/kernel/ptrace.c:392 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [149])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn:TI 49 46 59 7 arch/arm/kernel/ptrace.c:394 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [150])
        (expr_list:REG_EQUAL (const_int 196612 [0x30004])
            (nil))))

(call_insn 59 49 88 7 arch/arm/kernel/ptrace.c:397 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 88 59 89 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 89 88 90 7 arch/arm/kernel/ptrace.c:398 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 90 89 79)

(note 79 90 81 NOTE_INSN_DELETED)

(note 81 79 0 NOTE_INSN_DELETED)


;; Function ptrace_break (ptrace_break)[0:1543]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tsk+0
Reg 1: regs+0
Variables:
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])
  name: regs
    offset 0
      (reg:SI 1 r1 [ regs ])

OUT:
Stack adjustment: 136


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(13){ }u-1(14){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




ptrace_break

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={4d,3u} r1={3d,2u} r2={4d,2u} r3={4d,3u} r12={1d} r13={3d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 156{132d,23u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 39 NOTE_INSN_DELETED)

(note 39 1 40 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 40 39 5 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 40 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 4 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 15 33 2 arch/arm/kernel/ptrace.c:198 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 14 lr)
                    ] 2))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -4 [0xfffffffffffffffc])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(insn/f:TI 33 32 34 2 arch/arm/kernel/ptrace.c:198 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -132 [0xffffffffffffff7c]))) 4 {*arm_addsi3} (nil))

(note 34 33 9 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 9 34 7 2 arch/arm/kernel/ptrace.c:202 (set (reg:SI 2 r2 [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 7 9 10 2 arch/arm/kernel/ptrace.c:201 (set (reg:SI 3 r3 [135])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 10 7 2 2 arch/arm/kernel/ptrace.c:202 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 info.si_errno+0 S4 A32])
        (reg:SI 2 r2 [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [136])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 2 10 29 2 arch/arm/kernel/ptrace.c:198 (set (reg/v/f:SI 2 r2 [orig:133 tsk ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn:TI 29 2 41 2 arch/arm/kernel/ptrace.c:203 (set (reg:SI 0 r0 [137])
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(note 41 29 8 2 ( tsk (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:133 tsk ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 8 41 12 2 arch/arm/kernel/ptrace.c:201 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn:TI 12 8 16 2 arch/arm/kernel/ptrace.c:203 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg:SI 0 r0 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [137])
        (expr_list:REG_EQUAL (const_int 196609 [0x30001])
            (nil))))

(insn 16 12 13 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [135])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn:TI 13 16 17 2 arch/arm/kernel/ptrace.c:204 (set (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
            (nil))))

(insn 17 13 42 2 arch/arm/kernel/ptrace.c:206 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(note 42 17 14 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 14 42 19 2 arch/arm/kernel/ptrace.c:204 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:138 <variable>.uregs+60 ] [138])
        (nil)))

(call_insn 19 14 43 2 arch/arm/kernel/ptrace.c:206 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x10f01680 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 43 19 35 2 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(note 35 43 36 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 36 35 37 2 arch/arm/kernel/ptrace.c:207 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 37 36 28)

(note 28 37 30 NOTE_INSN_DELETED)

(note 30 28 0 NOTE_INSN_DELETED)


;; Function break_trap (break_trap)[0:1544]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: regs+0
Reg 1: instr+0
Variables:
  name: regs
    offset 0
      (reg:SI 0 r0 [ regs ])
  name: instr
    offset 0
      (reg:SI 1 r1 [ instr ])

OUT:
Stack adjustment: 8


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




break_trap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={4d,2u} r4={1d,2u} r12={1d} r13={2d,5u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{131d,17u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 37 NOTE_INSN_DELETED)

(note 37 1 38 2 ( regs (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ regs ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 38 37 5 2 ( instr (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ instr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 38 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 13 2 NOTE_INSN_DELETED)

(note 13 8 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 13 33 2 arch/arm/kernel/ptrace.c:210 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 33 32 31 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 31 33 27 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 31 2 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 2 27 39 2 arch/arm/kernel/ptrace.c:210 (set (reg/v/f:SI 1 r1 [orig:135 regs ] [135])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ regs ])
        (nil)))

(note 39 2 28 2 ( instr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 28 39 10 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 10 28 40 2 arch/arm/kernel/ptrace.c:211 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [137])
        (nil)))

(note 40 10 12 2 ( regs (expr_list:REG_DEP_TRUE (reg/v/f:SI 1 r1 [orig:135 regs ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 12 40 41 2 arch/arm/kernel/ptrace.c:211 (parallel [
            (call (mem:SI (symbol_ref:SI ("ptrace_break") [flags 0x3] <function_decl 0x11539900 ptrace_break>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 41 12 17 2 ( regs (nil)) NOTE_INSN_VAR_LOCATION)

(insn 17 41 23 2 arch/arm/kernel/ptrace.c:213 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 17 34 2 arch/arm/kernel/ptrace.c:213 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 23 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 35 34 36 2 arch/arm/kernel/ptrace.c:213 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 29)

(note 29 36 30 NOTE_INSN_DELETED)

(note 30 29 0 NOTE_INSN_DELETED)


;; Function flush_ptrace_hw_breakpoint (flush_ptrace_hw_breakpoint)[0:1552]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: tsk+0
Variables:
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])

OUT:
Stack adjustment: 16
Reg 0: tsk+0
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: tsk+0
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])
  name: tsk
    offset 0
      (reg:SI 0 r0 [ tsk ])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])


Basic block 4:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])


Basic block 5:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])


Basic block 6:
IN:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])

OUT:
Stack adjustment: 16
Reg 4: i+0
Variables:
  name: i
    offset 0
      (reg/v:SI 4 r4 [orig:134 i ] [134])


7 basic blocks, 8 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 303, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 303, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9697, maybe hot.
Predecessors:  5 [96.9%]  (dfs_back) 2 [100.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

Successors:  4 [69.8%]  (fallthru) 5 [30.2%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 6771, maybe hot.
Predecessors:  3 [69.8%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9697, maybe hot.
Predecessors:  3 [30.2%]  4 [100.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

Successors:  3 [96.9%]  (dfs_back) 6 [3.1%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 303, maybe hot.
Predecessors:  5 [3.1%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 6, loop_depth 0, count 0, freq 303, maybe hot.
Predecessors:  6 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




flush_ptrace_hw_breakpoint

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r3={2d} r4={3d,5u} r5={3d,5u,1d} r6={2d,3u} r12={1d} r13={2d,8u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 164{135d,28u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 43 NOTE_INSN_DELETED)

(note 43 1 4 2 ( tsk (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ tsk ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 43 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 37 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 37 3 38 2 arch/arm/kernel/ptrace.c:415 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -16 [0xfffffffffffffff0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 38 37 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 38 44 2 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 44 7 2 2 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:134 i ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 2 44 15 2 arch/arm/kernel/ptrace.c:415 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tsk ])
        (nil)))

(insn 15 2 21 2 arch/arm/kernel/ptrace.c:422 (set (reg:SI 6 r6 [138])
        (reg/v:SI 4 r4 [orig:134 i ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 5 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [96.9%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 21 15 8 3 156 "" [1 uses])

(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 9 8 45 3 arch/arm/kernel/ptrace.c:420 (set (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
        (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (nil)))

(note 45 9 19 3 ( tsk (nil)) NOTE_INSN_VAR_LOCATION)

(insn 19 45 10 3 arch/arm/kernel/ptrace.c:419 (set (reg/v:SI 4 r4 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 19 11 3 arch/arm/kernel/ptrace.c:420 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:135 D.26985 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 11 10 12 3 arch/arm/kernel/ptrace.c:420 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 14 12 16 4 arch/arm/kernel/ptrace.c:421 (parallel [
            (call (mem:SI (symbol_ref:SI ("unregister_hw_breakpoint") [flags 0x41] <function_decl 0x11524a00 unregister_hw_breakpoint>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 16 14 17 4 arch/arm/kernel/ptrace.c:422 (set (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
                (const_int 796 [0x31c])) [0 <variable>.thread.debug.hbp S4 A32])
        (reg:SI 6 r6 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 17 16 18 5 155 "" [1 uses])

(note 18 17 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 18 20 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:134 i ] [134])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 22 23 5 arch/arm/kernel/ptrace.c:419 (set (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
        (plus:SI (reg:SI 5 r5 [orig:133 ivtmp.989 ] [133])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 23 20 41 5 arch/arm/kernel/ptrace.c:419 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [96.9%]  (dfs_back)
;; Succ edge  6 [3.1%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [3.1%]  (fallthru,loop_exit)
(note 41 23 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 39 41 40 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 40 39 42 6 arch/arm/kernel/ptrace.c:425 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 42 40 35)

(note 35 42 36 NOTE_INSN_DELETED)

(note 36 35 0 NOTE_INSN_DELETED)


;; Function regs_query_register_offset (regs_query_register_offset)[0:1536]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: name+0
Variables:
  name: name
    offset 0
      (reg:SI 0 r0 [ name ])

OUT:
Stack adjustment: 16
Reg 0: name+0
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
      (reg:SI 0 r0 [ name ])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


Basic block 3:
IN:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])

OUT:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


Basic block 4:
IN:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])

OUT:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


Basic block 5:
IN:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])

OUT:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


Basic block 6:
IN:
Stack adjustment: 16
Reg 0: name+0
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
      (reg:SI 0 r0 [ name ])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])

OUT:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


Basic block 7:
IN:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])

OUT:
Stack adjustment: 16
Reg 4: roff+0
Reg 5: name+0
Variables:
  name: name
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 name ] [138])
  name: roff
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 roff ] [133])


8 basic blocks, 9 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

Successors:  6 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9550, maybe hot.
Predecessors:  6 [95.5%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  4 [4.5%]  (fallthru,loop_exit) 5 [95.5%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 430, maybe hot.
Predecessors:  3 [4.5%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9120, maybe hot.
Predecessors:  3 [95.5%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

Successors:  6 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

Successors:  3 [95.5%]  7 [4.5%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 7 , prev 6, next 1, loop_depth 0, count 0, freq 450, maybe hot.
Predecessors:  6 [4.5%]  (fallthru,loop_exit)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 1 , prev 7, loop_depth 0, count 0, freq 880, maybe hot.
Predecessors:  7 [100.0%]  4 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




regs_query_register_offset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={3d,2u} r4={3d,5u,1d} r5={2d,3u} r6={1d,2u} r12={1d} r13={2d,9u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 169{137d,31u,1e} in 17{16 regular + 1 call} insns.
(note 1 0 65 NOTE_INSN_DELETED)

(note 65 1 4 2 ( name (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ name ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 13 [sp]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 65 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 55 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 55 3 56 2 arch/arm/kernel/ptrace.c:95 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 56 55 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 56 6 2 arch/arm/kernel/ptrace.c:95 (set (reg/v/f:SI 5 r5 [orig:138 name ] [138])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ name ])
        (nil)))

(insn:TI 6 2 66 2 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 66 6 63 2 ( roff (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 63 66 64 2 arch/arm/kernel/ptrace.c:97 (set (pc)
        (label_ref 25)) -1 (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 64 63 67)

(note 67 64 28 3 ( name (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:138 name ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [95.5%] 
(code_label 28 67 10 3 163 "" [1 uses])

(note 10 28 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 10 13 3 NOTE_INSN_DELETED)

(call_insn/i:TI 13 14 16 3 arch/arm/kernel/ptrace.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 16 13 17 3 arch/arm/kernel/ptrace.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 17 16 18 3 arch/arm/kernel/ptrace.c:98 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [4.5%]  (fallthru,loop_exit)
;; Succ edge  5 [95.5%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [4.5%]  (fallthru,loop_exit)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 18 57 4 arch/arm/kernel/ptrace.c:99 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
                (const_int 4 [0x4])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 57 19 52 4 arch/arm/kernel/ptrace.c:99 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 52 57 22)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  3 [95.5%] 
(code_label 22 52 23 5 161 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 68 5 arch/arm/kernel/ptrace.c:97 (set (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
        (plus:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

(note 68 24 25 6 ( name (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:138 name ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 25 68 26 6 160 "" [1 uses])

(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 26 12 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:133 roff ] [133]) [0 <variable>.name+0 S4 A32])
        (nil)))

(insn 12 27 60 6 arch/arm/kernel/ptrace.c:98 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:138 name ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 12 30 6 arch/arm/kernel/ptrace.c:97 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0)
                (reg/f:SI 3 r3 [orig:136 D.26778 ] [136]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:136 D.26778 ] [136])
        (nil)))

(jump_insn:TI 30 60 31 6 arch/arm/kernel/ptrace.c:97 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  3 [95.5%] 
;; Succ edge  7 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [4.5%]  (fallthru,loop_exit)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 45 7 arch/arm/kernel/ptrace.c:100 (set (reg:SI 0 r0 [orig:134 D.26782 ] [134])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(insn 45 32 59 7 arch/arm/kernel/ptrace.c:101 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 59 45 58 7 arch/arm/kernel/ptrace.c:101 (return) 260 {return} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 58 59 53)

(note 53 58 54 NOTE_INSN_DELETED)

(note 54 53 0 NOTE_INSN_DELETED)

