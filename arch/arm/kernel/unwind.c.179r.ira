
;; Function __aeabi_unwind_cpp_pr0 (__aeabi_unwind_cpp_pr0)[0:851]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__aeabi_unwind_cpp_pr0

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 10{7d,3u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 12 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 12 2 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function __aeabi_unwind_cpp_pr1 (__aeabi_unwind_cpp_pr1)[0:852]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__aeabi_unwind_cpp_pr1

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 10{7d,3u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 12 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 12 2 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function __aeabi_unwind_cpp_pr2 (__aeabi_unwind_cpp_pr2)[0:853]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__aeabi_unwind_cpp_pr2

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 10{7d,3u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 12 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 12 2 13 NOTE_INSN_DELETED)

(note 13 12 0 NOTE_INSN_DELETED)


;; Function unwind_init (unwind_init)[0:862] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r170,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r170: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS

  a0(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 61(l0): point = 0
   Insn 55(l0): point = 2
   Insn 85(l0): point = 5
   Insn 47(l0): point = 7
   Insn 34(l0): point = 9
   Insn 49(l1): point = 12
   Insn 48(l1): point = 14
   Insn 42(l1): point = 17
   Insn 41(l1): point = 19
   Insn 40(l1): point = 21
   Insn 38(l1): point = 23
 a0(r170): [5..7]
 a1(r162): [5..9]
 a2(r162): [12..25]
 a3(r170): [12..25]
 a4(r167): [18..19]
 a5(r166): [20..21]
 a6(r165): [22..23]
 Rebuilding regno allocno list for 167
 Rebuilding regno allocno list for 166
 Rebuilding regno allocno list for 165
Compressing live ranges: from 26 to 11 - 42%
Ranges after the compression:
 a0(r170): [3..10] [0..1]
 a1(r162): [3..10] [0..2]
 a4(r167): [4..5]
 a5(r166): [6..7]
 a6(r165): [8..9]
+++Allocating 40 bytes for conflict table (uncompressed size 56)
;; a0(r170,l0) conflicts: a1(r162,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r162,l0) conflicts: a0(r170,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r167,l0) conflicts: a0(r170,l0) a1(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r166,l0) conflicts: a0(r170,l0) a1(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r165,l0) conflicts: a0(r170,l0) a1(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a5(r166)<->a6(r165)@125:shuffle
  cp1:a4(r167)<->a5(r166)@125:shuffle
  regions=2, blocks=6, points=11
    allocnos=7, copies=2, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r170 1r162 4r167 5r166 6r165
    modified regnos: 162 165 166 167 170
    border:
    Pressure: GENERAL_REGS=4
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
      Pushing a6(r165,l0)
      Pushing a5(r166,l0)
      Pushing a4(r167,l0)
      Pushing a0(r170,l0)
      Pushing a1(r162,l0)
      Popping a1(r162,l0)  -- assign reg 3
      Popping a0(r170,l0)  -- assign reg 2
      Popping a4(r167,l0)  -- assign reg 1
      Popping a5(r166,l0)  -- assign reg 1
      Popping a6(r165,l0)  -- assign reg 1
Disposition:
    1:r162 l0     3    6:r165 l0     1    5:r166 l0     1    4:r167 l0     1
    0:r170 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=34, live_throughout: 13, 14, dead_or_set: 162
insn=47, live_throughout: 13, 14, 162, dead_or_set: 170
insn=85, live_throughout: 13, 14, 162, 170, dead_or_set: 
insn=46, live_throughout: 13, 14, 162, 170, dead_or_set: 
insn=38, live_throughout: 13, 14, 162, 170, dead_or_set: 165
insn=40, live_throughout: 13, 14, 162, 170, dead_or_set: 165, 166
insn=41, live_throughout: 13, 14, 162, 170, dead_or_set: 166, 167
insn=42, live_throughout: 13, 14, 170, dead_or_set: 162, 167
insn=44, live_throughout: 13, 14, 162, 170, dead_or_set: 
insn=48, live_throughout: 13, 14, 162, 170, dead_or_set: 
insn=49, live_throughout: 13, 14, 162, 170, dead_or_set: 
insn=55, live_throughout: 13, 14, dead_or_set: 0
insn=61, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 165: (insn_list:REG_DEP_TRUE 38 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 47 (nil))
changing reg in insn 42
changing reg in insn 34
changing reg in insn 42
changing reg in insn 42
changing reg in insn 48
changing reg in insn 41
changing reg in insn 38
changing reg in insn 38
changing reg in insn 48
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
Spilling for insn 42.

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem/s/j:SI (post_modify:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                                                        (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                                                            (const_int 8 [0x8]))) [0 <variable>.addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (post_modify:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                                                        (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                                                            (const_int 8 [0x8]))) [0 <variable>.addr+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)


unwind_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,2u} r1={4d,3u} r2={2d,1u} r3={3d,5u,2d} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 35{15d,18u,2e} in 11{11 regular + 0 call} insns.
(note 30 0 32 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 32 30 31 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 31 32 34 2 NOTE_INSN_FUNCTION_BEG)

(insn 34 31 47 2 arch/arm/kernel/unwind.c:446 (set (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(insn 47 34 85 2 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg/f:SI 2 r2 [170])
        (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
        (nil)))

(jump_insn 85 47 86 2 arch/arm/kernel/unwind.c:446 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 86 85 46)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  4 [91.0%] 
(code_label 46 86 37 3 9 "" [1 uses])

(note 37 46 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 39 37 38 3 NOTE_INSN_DELETED)

(insn 38 39 40 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn 40 38 41 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [166])
        (sign_extract:SI (reg:SI 1 r1 [orig:165 <variable>.addr ] [165])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 41 40 42 3 arch/arm/kernel/unwind.c:447 (set (reg:SI 1 r1 [167])
        (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg:SI 1 r1 [166]))) 4 {*arm_addsi3} (nil))

(insn 42 41 44 3 arch/arm/kernel/unwind.c:447 (set (mem/s/j:SI (post_modify:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                (plus:SI (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
                    (const_int 8 [0x8]))) [0 <variable>.addr+0 S4 A32])
        (reg:SI 1 r1 [167])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 44 42 45 4 8 "" [1 uses])

(note 45 44 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 48 45 49 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (reg/f:SI 2 r2 [170]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 3 r3 [orig:162 idx ] [162])
            (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>))
        (nil)))

(jump_insn 49 48 50 4 arch/arm/kernel/unwind.c:446 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 50 49 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 55 50 61 5 arch/arm/kernel/unwind.c:452 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 55 87 5 arch/arm/kernel/unwind.c:452 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 87 61 88 NOTE_INSN_DELETED)

(note 88 87 0 NOTE_INSN_DELETED)


;; Function unwind_table_del (unwind_table_del)[0:861]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 40.
verify found no changes in insn with uid = 40.
deleting insn with uid = 19.
scanning new insn with uid = 41.
verify found no changes in insn with uid = 41.
deleting insn with uid = 17.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 26(l0): point = 1
   Insn 25(l0): point = 3
   Insn 24(l0): point = 5
   Insn 22(l0): point = 7
   Insn 20(l0): point = 9
   Insn 40(l0): point = 11
   Insn 18(l0): point = 13
   Insn 41(l0): point = 15
   Insn 16(l0): point = 17
   Insn 15(l0): point = 19
   Insn 14(l0): point = 21
   Insn 23(l0): point = 23
   Insn 13(l0): point = 25
   Insn 12(l0): point = 27
   Insn 11(l0): point = 29
   Insn 10(l0): point = 31
   Insn 7(l0): point = 34
   Insn 6(l0): point = 36
 a0(r136): [4..36]
 a1(r139): [10..11]
 a2(r138): [14..15]
 a3(r133): [18..25]
 a4(r134): [18..21]
 a5(r135): [24..27]
Compressing live ranges: from 39 to 11 - 28%
Ranges after the compression:
 a0(r136): [0..10]
 a1(r139): [1..2]
 a2(r138): [3..4]
 a3(r133): [5..8]
 a4(r134): [5..6]
 a5(r135): [7..9]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r136,l0) conflicts: a1(r139,l0) a2(r138,l0) a4(r134,l0) a3(r133,l0) a5(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r139,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a2(r138,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a3(r133,l0) conflicts: a0(r136,l0) a4(r134,l0) a5(r135,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a4(r134,l0) conflicts: a0(r136,l0) a3(r133,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a5(r135,l0) conflicts: a0(r136,l0) a3(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=5, points=11
    allocnos=6, copies=0, conflicts=2, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r136 1r139 2r138 3r133 4r134 5r135
    modified regnos: 133 134 135 136 138 139
    border:
    Pressure: GENERAL_REGS=4
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
      Pushing a5(r135,l0)
      Pushing a2(r138,l0)
      Pushing a1(r139,l0)
      Pushing a4(r134,l0)
      Pushing a3(r133,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 4
      Popping a3(r133,l0)  -- assign reg 3
      Popping a4(r134,l0)  -- assign reg 2
      Popping a1(r139,l0)  -- assign reg 3
      Popping a2(r138,l0)  -- assign reg 3
      Popping a5(r135,l0)  -- assign reg 1
Disposition:
    3:r133 l0     3    4:r134 l0     2    5:r135 l0     1    0:r136 l0     4
    2:r138 l0     3    1:r139 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, 14, dead_or_set: 0, 136
insn=7, live_throughout: 13, 14, 136, dead_or_set: 
insn=10, live_throughout: 13, 136, dead_or_set: 0
insn=11, live_throughout: 13, 136, dead_or_set: 0, 14
insn=12, live_throughout: 13, 136, dead_or_set: 0, 135
insn=13, live_throughout: 13, 135, 136, dead_or_set: 133
insn=23, live_throughout: 13, 133, 136, dead_or_set: 1, 135
insn=14, live_throughout: 1, 13, 133, 136, dead_or_set: 134
insn=15, live_throughout: 1, 13, 133, 134, 136, dead_or_set: 
insn=16, live_throughout: 1, 13, 136, dead_or_set: 133, 134
insn=41, live_throughout: 1, 13, 136, dead_or_set: 138
insn=18, live_throughout: 1, 13, 136, dead_or_set: 138
insn=40, live_throughout: 1, 13, 136, dead_or_set: 139
insn=20, live_throughout: 1, 13, 136, dead_or_set: 139
insn=22, live_throughout: 1, 13, 136, dead_or_set: 0
insn=24, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=25, live_throughout: 13, 14, dead_or_set: 0, 136
insn=26, live_throughout: 13, 14, dead_or_set: 0
insn=33, live_throughout: 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 40 (nil))
changing reg in insn 13
changing reg in insn 16
changing reg in insn 15
changing reg in insn 14
changing reg in insn 16
changing reg in insn 15
changing reg in insn 12
changing reg in insn 23
changing reg in insn 6
changing reg in insn 25
changing reg in insn 20
changing reg in insn 18
changing reg in insn 14
changing reg in insn 13
changing reg in insn 41
changing reg in insn 18
changing reg in insn 40
changing reg in insn 20
Spilling for insn 15.
Spilling for insn 16.
Spilling for insn 18.
Spilling for insn 20.

Reloads for insn # 15
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])

Reloads for insn # 16
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:133 D.15826 ] [133]) [0 <variable>.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:133 D.15826 ] [133]) [0 <variable>.next+0 S4 A32])

Reloads for insn # 18
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
deleting insn with uid = 23.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


unwind_table_del

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={5d,1u} r2={5d,2u} r3={7d,4u} r4={1d,5u} r12={4d} r13={1d,7u} r14={3d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,1u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 394{367d,27u,0e} in 17{14 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 arch/arm/kernel/unwind.c:431 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0 [ tab ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (reg:SI 0 r0 [ tab ]))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 7 6 8 2 arch/arm/kernel/unwind.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2164 [0x874])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [21.6%] 
;; Succ edge  3 [78.4%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [78.4%]  (fallthru)
(note 8 7 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 8 11 3 arch/arm/kernel/unwind.c:434 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 11 10 12 3 arch/arm/kernel/unwind.c:434 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 12 11 13 3 arch/arm/kernel/unwind.c:434 (set (reg/v:SI 1 r1 [orig:135 flags ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 13 12 14 3 include/linux/list.h:106 (set (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 15 3 include/linux/list.h:106 (set (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 15 14 16 3 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:133 D.15826 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 41 3 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:133 D.15826 ] [133]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15825 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 41 16 18 3 include/linux/list.h:107 (set (reg:SI 3 r3 [138])
        (const_int 1048832 [0x100100])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1048832 [0x100100])
        (nil)))

(insn 18 41 40 3 include/linux/list.h:107 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg:SI 3 r3 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048832 [0x100100])
        (nil)))

(insn 40 18 20 3 include/linux/list.h:108 (set (reg:SI 3 r3 [139])
        (const_int 2097664 [0x200200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097664 [0x200200])
        (nil)))

(insn 20 40 22 3 include/linux/list.h:108 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg:SI 3 r3 [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2097664 [0x200200])
        (nil)))

(insn 22 20 24 3 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 24 22 25 3 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 25 24 26 3 arch/arm/kernel/unwind.c:438 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 26 25 27 3 arch/arm/kernel/unwind.c:438 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10d76880 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 33)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [21.6%] 
(code_label 33 27 36 4 16 "" [1 uses])

(note 36 33 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 39 36 42 NOTE_INSN_DELETED)

(note 42 39 0 NOTE_INSN_DELETED)


;; Function unwind_table_add (unwind_table_add)[0:860]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 79.
verify found no changes in insn with uid = 79.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 11 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 15 (  1.9)

Pass 0 for finding allocno costs

    a2 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a13(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a13(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 72(l0): point = 0
   Insn 66(l0): point = 2
   Insn 59(l0): point = 5
   Insn 55(l0): point = 7
   Insn 54(l0): point = 9
   Insn 53(l0): point = 11
   Insn 51(l0): point = 13
   Insn 49(l0): point = 15
   Insn 57(l0): point = 17
   Insn 58(l0): point = 19
   Insn 48(l0): point = 21
   Insn 46(l0): point = 23
   Insn 45(l0): point = 25
   Insn 44(l0): point = 27
   Insn 76(l0): point = 30
   Insn 23(l0): point = 32
   Insn 20(l0): point = 34
   Insn 22(l0): point = 36
   Insn 21(l0): point = 38
   Insn 25(l0): point = 40
   Insn 24(l0): point = 42
   Insn 18(l0): point = 45
   Insn 17(l0): point = 47
   Insn 14(l0): point = 49
   Insn 12(l0): point = 51
   Insn 79(l0): point = 53
   Insn 5(l0): point = 55
   Insn 4(l0): point = 57
   Insn 13(l0): point = 59
   Insn 3(l0): point = 61
   Insn 2(l0): point = 63
   Insn 41(l1): point = 66
   Insn 40(l1): point = 68
   Insn 37(l1): point = 70
   Insn 36(l1): point = 72
   Insn 39(l1): point = 74
   Insn 33(l1): point = 77
   Insn 32(l1): point = 79
   Insn 31(l1): point = 81
   Insn 29(l1): point = 83
 a0(r136): [3..47]
 a1(r134): [8..15]
 a2(r153): [12..21]
 a3(r137): [20..23]
 a4(r142): [33..57]
 a5(r140): [30..63]
 a6(r145): [37..38]
 a7(r141): [39..61]
 a8(r146): [41..42]
 a9(r143): [43..55]
 a10(r144): [52..53]
 a11(r136): [66..85]
 a12(r140): [66..85]
 a13(r151): [69..74]
 a14(r133): [80..85] [66..72]
 a15(r150): [78..79]
 a16(r149): [80..81]
 a17(r148): [82..83]
 Rebuilding regno allocno list for 151
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 149
 Rebuilding regno allocno list for 148
 Rebuilding regno allocno list for 133
Compressing live ranges: from 86 to 33 - 38%
Ranges after the compression:
 a0(r136): [22..32] [0..15]
 a1(r134): [1..3]
 a2(r153): [2..5]
 a3(r137): [4..6]
 a4(r142): [8..19]
 a5(r140): [22..32] [7..21]
 a6(r145): [9..10]
 a7(r141): [11..20]
 a8(r146): [12..13]
 a9(r143): [14..18]
 a10(r144): [16..17]
 a13(r151): [23..25]
 a14(r133): [28..32] [22..24]
 a15(r150): [26..27]
 a16(r149): [28..29]
 a17(r148): [30..31]
+++Allocating 128 bytes for conflict table (uncompressed size 144)
;; a0(r136,l0) conflicts: a1(r134,l0) a2(r153,l0) a3(r137,l0) a5(r140,l0) a4(r142,l0) a6(r145,l0) a7(r141,l0) a8(r146,l0) a9(r143,l0) a14(r133,l0) a13(r151,l0) a15(r150,l0) a16(r149,l0) a17(r148,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r134,l0) conflicts: a0(r136,l0) a2(r153,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r153,l0) conflicts: a0(r136,l0) a1(r134,l0) a3(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a3(r137,l0) conflicts: a0(r136,l0) a2(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r142,l0) conflicts: a0(r136,l0) a5(r140,l0) a6(r145,l0) a7(r141,l0) a8(r146,l0) a9(r143,l0) a10(r144,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a5(r140,l0) conflicts: a0(r136,l0) a4(r142,l0) a6(r145,l0) a7(r141,l0) a8(r146,l0) a9(r143,l0) a10(r144,l0) a14(r133,l0) a13(r151,l0) a15(r150,l0) a16(r149,l0) a17(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r145,l0) conflicts: a0(r136,l0) a5(r140,l0) a4(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r141,l0) conflicts: a0(r136,l0) a5(r140,l0) a4(r142,l0) a8(r146,l0) a9(r143,l0) a10(r144,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r146,l0) conflicts: a0(r136,l0) a5(r140,l0) a4(r142,l0) a7(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r143,l0) conflicts: a0(r136,l0) a5(r140,l0) a4(r142,l0) a7(r141,l0) a10(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r144,l0) conflicts: a5(r140,l0) a4(r142,l0) a7(r141,l0) a9(r143,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a13(r151,l0) conflicts: a0(r136,l0) a5(r140,l0) a14(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r133,l0) conflicts: a0(r136,l0) a5(r140,l0) a13(r151,l0) a16(r149,l0) a17(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r150,l0) conflicts: a0(r136,l0) a5(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r149,l0) conflicts: a0(r136,l0) a5(r140,l0) a14(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r148,l0) conflicts: a0(r136,l0) a5(r140,l0) a14(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a16(r149)<->a17(r148)@125:shuffle
  cp1:a14(r133)<->a15(r150)@125:shuffle
  cp2:a15(r150)<->a16(r149)@125:shuffle
  cp3:a8(r146)<->a9(r143)@125:shuffle
  cp4:a6(r145)<->a7(r141)@125:shuffle
  regions=2, blocks=8, points=33
    allocnos=18, copies=5, conflicts=0, ranges=19

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r136 1r134 2r153 3r137 4r142 5r140 6r145 7r141 8r146 9r143 10r144 13r151 14r133 15r150 16r149 17r148
    modified regnos: 133 134 136 137 140 141 142 143 144 145 146 148 149 150 151 153
    border:
    Pressure: GENERAL_REGS=7
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 153 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
      Pushing a17(r148,l0)
      Pushing a16(r149,l0)
      Pushing a15(r150,l0)
      Pushing a13(r151,l0)
      Pushing a8(r146,l0)
      Pushing a6(r145,l0)
      Pushing a3(r137,l0)
      Pushing a14(r133,l0)
      Pushing a10(r144,l0)
      Pushing a1(r134,l0)
      Pushing a2(r153,l0)
      Pushing a9(r143,l0)
      Pushing a0(r136,l0)
      Pushing a4(r142,l0)
      Pushing a7(r141,l0)
      Pushing a5(r140,l0)
      Popping a5(r140,l0)  -- assign reg 4
      Popping a7(r141,l0)  -- assign reg 5
      Popping a4(r142,l0)  -- assign reg 6
      Popping a0(r136,l0)  -- assign reg 7
      Popping a9(r143,l0)  -- assign reg 8
      Popping a2(r153,l0)  -- assign reg 3
      Popping a1(r134,l0)  -- assign reg 2
      Popping a10(r144,l0)  -- assign reg 3
      Popping a14(r133,l0)  -- assign reg 3
      Popping a3(r137,l0)  -- assign reg 1
      Popping a6(r145,l0)  -- assign reg 5
      Popping a8(r146,l0)  -- assign reg 8
      Popping a13(r151,l0)  -- assign reg 2
      Popping a15(r150,l0)  -- assign reg 3
      Popping a16(r149,l0)  -- assign reg 2
      Popping a17(r148,l0)  -- assign reg 2
Disposition:
   14:r133 l0     3    1:r134 l0     2    0:r136 l0     7    3:r137 l0     1
    5:r140 l0     4    7:r141 l0     5    4:r142 l0     6    9:r143 l0     8
   10:r144 l0     3    6:r145 l0     5    8:r146 l0     8   17:r148 l0     2
   16:r149 l0     2   15:r150 l0     3   13:r151 l0     2    2:r153 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 140
insn=3, live_throughout: 2, 3, 13, 140, dead_or_set: 1, 141
insn=13, live_throughout: 2, 3, 13, 140, 141, dead_or_set: 1
insn=4, live_throughout: 1, 3, 13, 140, 141, dead_or_set: 2, 142
insn=5, live_throughout: 1, 13, 140, 141, 142, dead_or_set: 3, 143
insn=79, live_throughout: 1, 13, 140, 141, 142, 143, dead_or_set: 144
insn=12, live_throughout: 1, 13, 140, 141, 142, 143, dead_or_set: 0, 144
insn=14, live_throughout: 13, 140, 141, 142, 143, dead_or_set: 0, 1, 14
insn=17, live_throughout: 13, 14, 140, 141, 142, 143, dead_or_set: 0, 136
insn=18, live_throughout: 13, 14, 136, 140, 141, 142, 143, dead_or_set: 
insn=24, live_throughout: 13, 136, 140, 141, 142, dead_or_set: 143, 146
insn=25, live_throughout: 13, 136, 140, 141, 142, dead_or_set: 146
insn=21, live_throughout: 13, 136, 140, 142, dead_or_set: 141, 145
insn=22, live_throughout: 13, 136, 140, 142, dead_or_set: 145
insn=20, live_throughout: 13, 136, 140, 142, dead_or_set: 
insn=23, live_throughout: 13, 136, 140, dead_or_set: 142
insn=76, live_throughout: 13, 136, 140, dead_or_set: 
insn=38, live_throughout: 13, 133, 136, 140, dead_or_set: 
insn=29, live_throughout: 13, 133, 136, 140, dead_or_set: 148
insn=31, live_throughout: 13, 133, 136, 140, dead_or_set: 148, 149
insn=32, live_throughout: 13, 136, 140, dead_or_set: 133, 149, 150
insn=33, live_throughout: 13, 136, 140, dead_or_set: 150
insn=34, live_throughout: 13, 136, 140, dead_or_set: 
insn=39, live_throughout: 13, 136, 140, dead_or_set: 151
insn=36, live_throughout: 13, 136, 140, 151, dead_or_set: 133
insn=37, live_throughout: 13, 133, 136, 151, dead_or_set: 140
insn=40, live_throughout: 13, 133, 136, 140, dead_or_set: 151
insn=41, live_throughout: 13, 133, 136, 140, dead_or_set: 
insn=44, live_throughout: 13, 136, dead_or_set: 0
insn=45, live_throughout: 13, 136, dead_or_set: 0, 14
insn=46, live_throughout: 13, 136, dead_or_set: 0, 137
insn=48, live_throughout: 13, 136, 137, dead_or_set: 153
insn=58, live_throughout: 13, 136, 153, dead_or_set: 1, 137
insn=57, live_throughout: 1, 13, 136, 153, dead_or_set: 0
insn=49, live_throughout: 0, 1, 13, 136, 153, dead_or_set: 134
insn=51, live_throughout: 0, 1, 13, 134, 136, 153, dead_or_set: 
insn=53, live_throughout: 0, 1, 13, 134, 136, dead_or_set: 153
insn=54, live_throughout: 0, 1, 13, 134, 136, dead_or_set: 
insn=55, live_throughout: 0, 1, 13, 136, dead_or_set: 134
insn=59, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=60, live_throughout: 13, 14, 136, dead_or_set: 
insn=66, live_throughout: 13, 14, dead_or_set: 0, 136
insn=72, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 144: (insn_list:REG_DEP_TRUE 79 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 22 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 39 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 48 (nil))
changing reg in insn 36
changing reg in insn 40
changing reg in insn 32
changing reg in insn 49
changing reg in insn 55
changing reg in insn 54
changing reg in insn 17
changing reg in insn 66
changing reg in insn 55
changing reg in insn 53
changing reg in insn 51
changing reg in insn 54
changing reg in insn 39
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 39
changing reg in insn 46
changing reg in insn 58
changing reg in insn 37
changing reg in insn 2
changing reg in insn 37
changing reg in insn 36
changing reg in insn 33
changing reg in insn 29
changing reg in insn 21
changing reg in insn 20
changing reg in insn 32
changing reg in insn 29
changing reg in insn 3
changing reg in insn 21
changing reg in insn 4
changing reg in insn 24
changing reg in insn 23
changing reg in insn 5
changing reg in insn 24
changing reg in insn 79
changing reg in insn 12
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 53
changing reg in insn 51
changing reg in insn 49
Spilling for insn 25.
Spilling for insn 22.
Spilling for insn 20.
Spilling for insn 23.
Spilling for insn 33.
Spilling for insn 51.
Spilling for insn 53.
Spilling for insn 54.
Spilling for insn 55.

Reloads for insn # 25
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])

Reloads for insn # 22
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])

Reloads for insn # 23
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])

Reloads for insn # 33
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                                                        (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                                                        (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])

Reloads for insn # 51
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                                                        (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                                                        (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])

Reloads for insn # 53
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])

Reloads for insn # 55
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/f:SI 2 r2 [orig:134 D.15855 ] [134]) [0 <variable>.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/f:SI 2 r2 [orig:134 D.15855 ] [134]) [0 <variable>.next+0 S4 A32])
deleting insn with uid = 58.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 11 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 15 (  1.9)


unwind_table_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u} r1={6d,3u} r2={8d,6u} r3={8d,8u} r4={2d,6u,2d} r5={2d,2u} r6={1d,2u} r7={1d,10u,3d} r8={2d,2u} r12={4d} r13={1d,10u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={5d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 448{382d,61u,5e} in 39{36 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 ("found") NOTE_INSN_DELETED_LABEL 20)

(note 15 9 2 2 NOTE_INSN_DELETED)

(insn 2 15 3 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (reg:SI 0 r0 [ start ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 13 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 5 r5 [orig:141 size ] [141])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 13 3 4 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 4 13 5 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 6 r6 [orig:142 text_addr ] [142])
        (reg:SI 2 r2 [ text_addr ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 79 2 arch/arm/kernel/unwind.c:400 (set (reg/v:SI 8 r8 [orig:143 text_size ] [143])
        (reg:SI 3 r3 [ text_size ])) 167 {*arm_movsi_insn} (nil))

(insn 79 5 12 2 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
        (nil)))

(insn 12 79 14 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 4 [0x4])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x11023e40 malloc_sizes>)
                    (const_int 4 [0x4]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 14 12 17 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x11024200 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 14 18 2 arch/arm/kernel/unwind.c:408 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 18 17 19 2 arch/arm/kernel/unwind.c:408 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 60)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
        (nil)))
;; End of basic block 2 -> ( 7 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [10.1%] 
;; Succ edge  3 [89.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	

;; Pred edge  2 [89.9%]  (fallthru)
(note 19 18 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 24 19 25 3 arch/arm/kernel/unwind.c:414 (set (reg:SI 8 r8 [146])
        (plus:SI (reg/v:SI 8 r8 [orig:143 text_size ] [143])
            (reg/v:SI 6 r6 [orig:142 text_addr ] [142]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(insn 25 24 21 3 arch/arm/kernel/unwind.c:414 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (reg:SI 8 r8 [146])) 167 {*arm_movsi_insn} (nil))

(insn 21 25 22 3 arch/arm/kernel/unwind.c:412 (set (reg:SI 5 r5 [145])
        (plus:SI (reg/v:SI 5 r5 [orig:141 size ] [141])
            (reg/v:SI 4 r4 [orig:140 start ] [140]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 22 21 20 3 arch/arm/kernel/unwind.c:412 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (reg:SI 5 r5 [145])) 167 {*arm_movsi_insn} (nil))

(insn 20 22 23 3 arch/arm/kernel/unwind.c:411 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 23 20 76 3 arch/arm/kernel/unwind.c:413 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (reg/v:SI 6 r6 [orig:142 text_addr ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 76 23 77 3 arch/arm/kernel/unwind.c:417 (set (pc)
        (label_ref 34)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 77 76 38)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 38 77 28 4 23 "" [1 uses])

(note 28 38 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 30 28 29 4 NOTE_INSN_DELETED)

(insn 29 30 31 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
        (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn 31 29 32 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 2 r2 [149])
        (sign_extract:SI (reg:SI 2 r2 [orig:148 <variable>.addr ] [148])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 32 31 33 4 arch/arm/kernel/unwind.c:418 (set (reg:SI 3 r3 [150])
        (plus:SI (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg:SI 2 r2 [149]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn 33 32 34 4 arch/arm/kernel/unwind.c:418 (set (mem/s/j:SI (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.addr+0 S4 A32])
        (reg:SI 3 r3 [150])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 34 33 35 5 22 "" [1 uses])

(note 35 34 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 35 36 5 arch/arm/kernel/unwind.c:417 (set (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 36 39 37 5 arch/arm/kernel/unwind.c:418 (set (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
        (reg/v:SI 4 r4 [orig:140 start ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 37 36 40 5 arch/arm/kernel/unwind.c:418 (set (reg/v:SI 4 r4 [orig:140 start ] [140])
        (plus:SI (reg/v:SI 4 r4 [orig:140 start ] [140])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 40 37 41 5 arch/arm/kernel/unwind.c:417 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:133 idx.409 ] [133])
            (reg/f:SI 2 r2 [orig:151 <variable>.stop ] [151]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 41 40 42 5 arch/arm/kernel/unwind.c:417 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 42 41 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 44 42 45 6 arch/arm/kernel/unwind.c:420 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 45 44 46 6 arch/arm/kernel/unwind.c:420 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 46 45 48 6 arch/arm/kernel/unwind.c:420 (set (reg/v:SI 1 r1 [orig:137 flags ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 48 46 57 6 include/linux/list.h:76 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 57 48 49 6 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 49 57 51 6 include/linux/list.h:76 (set (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 unwind_tables.prev+0 S4 A32])
        (nil)))

(insn 51 49 53 6 include/linux/list.h:41 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [153])
                (const_int 4 [0x4])) [0 unwind_tables.prev+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 53 51 54 6 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 54 53 55 6 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:136 tab ] [136])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 D.15855 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 59 6 include/linux/list.h:44 (set (mem/s/f/j:SI (reg/f:SI 2 r2 [orig:134 D.15855 ] [134]) [0 <variable>.next+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 59 55 60 6 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 2 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [10.1%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 60 59 61 7 21 "" [1 uses])

(note 61 60 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 61 72 7 arch/arm/kernel/unwind.c:425 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:136 tab ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 72 66 78 7 arch/arm/kernel/unwind.c:425 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 78 72 80 NOTE_INSN_DELETED)

(note 80 78 0 NOTE_INSN_DELETED)


;; Function search_index (search_index)[0:854]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a11 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 66(l0): point = 0
   Insn 60(l0): point = 2
   Insn 53(l0): point = 5
   Insn 80(l0): point = 8
   Insn 23(l0): point = 11
   Insn 22(l0): point = 13
   Insn 21(l0): point = 15
   Insn 76(l0): point = 18
   Insn 16(l0): point = 20
   Insn 15(l0): point = 22
   Insn 13(l0): point = 24
   Insn 14(l0): point = 26
   Insn 10(l0): point = 29
   Insn 9(l0): point = 31
   Insn 8(l0): point = 33
   Insn 4(l0): point = 35
   Insn 2(l0): point = 37
   Insn 3(l0): point = 39
   Insn 51(l1): point = 42
   Insn 30(l1): point = 44
   Insn 29(l1): point = 46
   Insn 50(l1): point = 48
   Insn 49(l1): point = 50
   Insn 28(l1): point = 52
   Insn 72(l1): point = 55
   Insn 74(l1): point = 57
   Insn 71(l1): point = 59
   Insn 33(l1): point = 61
   Insn 36(l1): point = 63
   Insn 31(l1): point = 65
 a0(r139): [29..35] [8..20] [3..5]
 a1(r138): [29..39] [11..17] [6..7]
 a2(r142): [14..15]
 a3(r137): [27..37] [11..17]
 a4(r140): [32..33]
 a5(r137): [42..67]
 a6(r138): [42..67]
 a7(r139): [42..67]
 a8(r146): [66..67] [42..44]
 a9(r145): [45..46]
 a10(r143): [47..52]
 a11(r150): [49..50]
 a12(r135): [56..61]
 a13(r149): [60..63]
 a14(r147): [62..65]
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 149
 Rebuilding regno allocno list for 147
 Rebuilding regno allocno list for 146
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 135
Compressing live ranges: from 68 to 33 - 48%
Ranges after the compression:
 a0(r139): [17..32] [11..14] [4..9] [0..1]
 a1(r138): [17..32] [11..16] [5..8] [2..3]
 a2(r142): [6..7]
 a3(r137): [17..32] [10..15] [5..8]
 a4(r140): [12..13]
 a8(r146): [31..32] [17..18]
 a9(r145): [19..20]
 a10(r143): [21..24]
 a11(r150): [22..23]
 a12(r135): [25..27]
 a13(r149): [26..29]
 a14(r147): [28..30]
+++Allocating 96 bytes for conflict table (uncompressed size 120)
;; a0(r139,l0) conflicts: a1(r138,l0) a3(r137,l0) a2(r142,l0) a4(r140,l0) a8(r146,l0) a9(r145,l0) a10(r143,l0) a11(r150,l0) a12(r135,l0) a13(r149,l0) a14(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r138,l0) conflicts: a0(r139,l0) a3(r137,l0) a2(r142,l0) a4(r140,l0) a8(r146,l0) a9(r145,l0) a10(r143,l0) a11(r150,l0) a12(r135,l0) a13(r149,l0) a14(r147,l0)
;;     total conflict hard regs: 0 2 14
;;     conflict hard regs: 0 2 14
;; a2(r142,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r137,l0) conflicts: a0(r139,l0) a1(r138,l0) a2(r142,l0) a4(r140,l0) a8(r146,l0) a9(r145,l0) a10(r143,l0) a11(r150,l0) a12(r135,l0) a13(r149,l0) a14(r147,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a4(r140,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r146,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r145,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r143,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0) a11(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r150,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0) a10(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r135,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0) a13(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r149,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0) a12(r135,l0) a14(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r147,l0) conflicts: a0(r139,l0) a1(r138,l0) a3(r137,l0) a13(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a9(r145)<->a10(r143)@125:shuffle
  cp1:a8(r146)<->a9(r145)@125:shuffle
  cp2:a8(r146)<->a14(r147)@125:shuffle
  cp3:a12(r135)<->a14(r147)@125:shuffle
  regions=2, blocks=10, points=33
    allocnos=15, copies=4, conflicts=0, ranges=21

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r139 1r138 2r142 3r137 4r140 8r146 9r145 10r143 11r150 12r135 13r149 14r147
    modified regnos: 135 137 138 139 140 142 143 145 146 147 149 150
    border:
    Pressure: GENERAL_REGS=6
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
      Pushing a13(r149,l0)
      Pushing a11(r150,l0)
      Pushing a10(r143,l0)
      Pushing a9(r145,l0)
      Pushing a8(r146,l0)
      Pushing a4(r140,l0)
      Pushing a2(r142,l0)
      Pushing a14(r147,l0)
      Pushing a12(r135,l0)
      Pushing a0(r139,l0)
      Pushing a3(r137,l0)
      Pushing a1(r138,l0)
      Popping a1(r138,l0)  -- assign reg 3
      Popping a3(r137,l0)  -- assign reg 1
      Popping a0(r139,l0)  -- assign reg 2
      Popping a12(r135,l0)  -- assign reg 0
      Popping a14(r147,l0)  -- assign reg 0
      Popping a2(r142,l0)  -- assign reg 0
      Popping a4(r140,l0)  -- assign reg 0
      Popping a8(r146,l0)  -- assign reg 0
      Popping a9(r145,l0)  -- assign reg 0
      Popping a10(r143,l0)  -- assign reg 0
      Popping a11(r150,l0)  -- assign reg 12
      Popping a13(r149,l0)  -- assign reg 12
Disposition:
   12:r135 l0     0    3:r137 l0     1    1:r138 l0     3    0:r139 l0     2
    4:r140 l0     0    2:r142 l0     0   10:r143 l0     0    9:r145 l0     0
    8:r146 l0     0   14:r147 l0     0   13:r149 l0    12   11:r150 l0    12
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, 14, dead_or_set: 1, 138
insn=2, live_throughout: 2, 13, 14, 138, dead_or_set: 0, 137
insn=4, live_throughout: 13, 14, 137, 138, dead_or_set: 2, 139
insn=8, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 140
insn=9, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 140
insn=10, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 
insn=14, live_throughout: 13, dead_or_set: 1, 137
insn=13, live_throughout: 1, 13, dead_or_set: 0
insn=15, live_throughout: 13, dead_or_set: 0, 1, 14
insn=16, live_throughout: 13, 14, dead_or_set: 139
insn=76, live_throughout: 13, 14, 139, dead_or_set: 
insn=19, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 
insn=21, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 142
insn=22, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 142
insn=23, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 
insn=80, live_throughout: 13, 14, 139, dead_or_set: 
insn=48, live_throughout: 13, 14, 137, 138, 139, 146, dead_or_set: 
insn=31, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 146, 147
insn=36, live_throughout: 13, 14, 137, 138, 139, 147, dead_or_set: 149
insn=33, live_throughout: 13, 14, 137, 138, 139, 149, dead_or_set: 135, 147
insn=71, live_throughout: 13, 14, 135, 137, 138, 139, dead_or_set: 149
insn=74, live_throughout: 13, 14, 24, 135, 137, 139, dead_or_set: 138
insn=72, live_throughout: 13, 14, 137, 138, dead_or_set: 135, 139
insn=78, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 
insn=28, live_throughout: 13, 14, 137, 138, 139, dead_or_set: 143
insn=49, live_throughout: 13, 14, 137, 138, 139, 143, dead_or_set: 150
insn=50, live_throughout: 13, 14, 137, 138, 139, 143, dead_or_set: 150
insn=29, live_throughout: 13, 14, 24, 137, 138, 139, dead_or_set: 143, 145
insn=30, live_throughout: 13, 14, 24, 137, 138, 139, dead_or_set: 145, 146
insn=51, live_throughout: 13, 14, 137, 138, 139, 146, dead_or_set: 
insn=53, live_throughout: 13, 14, dead_or_set: 138, 139
insn=54, live_throughout: 13, 14, 139, dead_or_set: 
insn=60, live_throughout: 13, 14, dead_or_set: 0, 139
insn=66, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 21 (nil))
changing reg in insn 33
changing reg in insn 74
changing reg in insn 72
changing reg in insn 2
changing reg in insn 71
changing reg in insn 22
changing reg in insn 14
changing reg in insn 9
changing reg in insn 74
changing reg in insn 3
changing reg in insn 33
changing reg in insn 36
changing reg in insn 74
changing reg in insn 53
changing reg in insn 50
changing reg in insn 28
changing reg in insn 8
changing reg in insn 8
changing reg in insn 72
changing reg in insn 53
changing reg in insn 16
changing reg in insn 4
changing reg in insn 72
changing reg in insn 60
changing reg in insn 49
changing reg in insn 28
changing reg in insn 21
changing reg in insn 21
changing reg in insn 8
changing reg in insn 9
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 36
changing reg in insn 71
changing reg in insn 49
changing reg in insn 50
deleting insn with uid = 4.
deleting insn with uid = 14.


try_optimize_cfg iteration 1

Forwarding edge 4->5 to 9 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 19 (  1.9)


search_index

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={11d,13u,1d} r1={3d,5u} r2={5d,5u,1d} r3={4d,7u,1d} r12={4d,2u} r13={1d,10u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 196{145d,48u,3e} in 28{27 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 5 2 2 arch/arm/kernel/unwind.c:107 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (reg:SI 1 r1 [ first ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 8 2 arch/arm/kernel/unwind.c:107 (set (reg/v:SI 1 r1 [orig:137 addr ] [137])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 8 2 9 2 arch/arm/kernel/unwind.c:110 (set (reg:SI 0 r0 [orig:140 <variable>.addr ] [140])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:138 first ] [138]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn 9 8 10 2 arch/arm/kernel/unwind.c:110 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:140 <variable>.addr ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/kernel/unwind.c:110 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 11 15 3 arch/arm/kernel/unwind.c:111 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11075fa0>)
        (nil)))

(call_insn 15 13 16 3 arch/arm/kernel/unwind.c:111 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 16 15 76 3 arch/arm/kernel/unwind.c:112 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 76 16 77 3 arch/arm/kernel/unwind.c:112 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 9)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 77 76 19)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 19 77 20 4 28 "" [1 uses])

(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 4 arch/arm/kernel/unwind.c:113 (set (reg:SI 0 r0 [orig:142 <variable>.addr ] [142])
        (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139]) [0 <variable>.addr+0 S4 A32])
        (nil)))

(insn 22 21 23 4 arch/arm/kernel/unwind.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 0 r0 [orig:142 <variable>.addr ] [142]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 79 4 arch/arm/kernel/unwind.c:113 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  7 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 79 23 80 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(jump_insn 80 79 81 5 (set (pc)
        (label_ref 54)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 81 80 48)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  7 [95.5%] 
(code_label 48 81 27 6 32 "" [1 uses])

(note 27 48 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 32 27 31 6 NOTE_INSN_DELETED)

(insn 31 32 36 6 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [147])
        (ashiftrt:SI (reg:SI 0 r0 [146])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 36 31 33 6 arch/arm/kernel/unwind.c:119 (set (reg:SI 12 ip [orig:149 <variable>.addr ] [149])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 0 r0 [147])
                    (const_int 8 [0x8]))
                (reg/v/f:SI 3 r3 [orig:138 first ] [138])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 36 71 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
        (plus:SI (mult:SI (reg:SI 0 r0 [147])
                (const_int 8 [0x8]))
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 270 {*arith_shiftsi} (nil))

(insn 71 33 74 6 arch/arm/kernel/unwind.c:117 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:137 addr ] [137])
            (reg:SI 12 ip [orig:149 <variable>.addr ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(insn 74 71 72 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 3 r3 [orig:138 first ] [138])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 240 {*movsicc_insn} (nil))

(insn 72 74 78 6 arch/arm/kernel/unwind.c:117 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (if_then_else:SI (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 0 r0 [orig:135 mid ] [135]))) 240 {*movsicc_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [61.0%] 
;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
(code_label 78 72 75 7 34 "" [1 uses])

(note 75 78 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 28 75 49 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [143])
        (minus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (reg/v/f:SI 3 r3 [orig:138 first ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 49 28 50 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/f:SI 12 ip [150])
        (plus:SI (reg/v/f:SI 2 r2 [orig:139 last ] [139])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn 50 49 29 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:138 first ] [138])
            (reg/f:SI 12 ip [150]))) 219 {*arm_cmpsi_insn} (nil))

(insn 29 50 30 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [145])
        (ashiftrt:SI (reg:SI 0 r0 [143])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [143])
            (const_int 8 [0x8]))
        (nil)))

(insn 30 29 51 7 arch/arm/kernel/unwind.c:117 (set (reg:SI 0 r0 [146])
        (plus:SI (reg:SI 0 r0 [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 51 30 52 7 arch/arm/kernel/unwind.c:116 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [95.5%] 
;; Succ edge  8 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 8 arch/arm/kernel/unwind.c:116 discrim 1 (set (reg/v/f:SI 2 r2 [orig:139 last ] [139])
        (reg/v/f:SI 3 r3 [orig:138 first ] [138])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 3 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [100.0%] 
(code_label 54 53 55 9 29 "" [2 uses])

(note 55 54 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 60 55 66 9 arch/arm/kernel/unwind.c:126 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 2 r2 [orig:139 last ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 66 60 82 9 arch/arm/kernel/unwind.c:126 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 82 66 83 NOTE_INSN_DELETED)

(note 83 82 0 NOTE_INSN_DELETED)


;; Function unwind_get_byte (unwind_get_byte)[0:856]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 52(l0): point = 0
   Insn 46(l0): point = 2
   Insn 39(l0): point = 5
   Insn 38(l0): point = 7
   Insn 58(l0): point = 10
   Insn 33(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 30(l0): point = 18
   Insn 28(l0): point = 20
   Insn 27(l0): point = 22
   Insn 25(l0): point = 25
   Insn 23(l0): point = 27
   Insn 22(l0): point = 29
   Insn 20(l0): point = 31
   Insn 24(l0): point = 33
   Insn 21(l0): point = 35
   Insn 19(l0): point = 37
   Insn 18(l0): point = 39
   Insn 56(l0): point = 42
   Insn 13(l0): point = 44
   Insn 12(l0): point = 46
   Insn 11(l0): point = 48
   Insn 8(l0): point = 51
   Insn 7(l0): point = 53
   Insn 6(l0): point = 55
   Insn 2(l0): point = 57
 a0(r133): [42..44] [3..27]
 a1(r137): [51..57] [13..41] [6..9]
 a2(r147): [6..7]
 a3(r134): [25..37] [8..9]
 a4(r146): [13..14]
 a5(r145): [17..18]
 a6(r138): [51..55] [19..41]
 a7(r143): [21..22]
 a8(r135): [23..39]
 a9(r141): [28..29]
 a10(r140): [30..31]
 a11(r142): [30..35]
Compressing live ranges: from 60 to 28 - 46%
Ranges after the compression:
 a0(r133): [23..24] [0..14]
 a1(r137): [25..27] [5..22] [1..4]
 a2(r147): [1..2]
 a3(r134): [13..20] [3..4]
 a4(r146): [5..6]
 a5(r145): [7..8]
 a6(r138): [25..26] [9..22]
 a7(r143): [10..11]
 a8(r135): [12..21]
 a9(r141): [15..16]
 a10(r140): [17..18]
 a11(r142): [17..19]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r133,l0) conflicts: a2(r147,l0) a1(r137,l0) a3(r134,l0) a4(r146,l0) a5(r145,l0) a6(r138,l0) a7(r143,l0) a8(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a0(r133,l0) a2(r147,l0) a3(r134,l0) a4(r146,l0) a5(r145,l0) a6(r138,l0) a7(r143,l0) a8(r135,l0) a9(r141,l0) a10(r140,l0) a11(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r147,l0) conflicts: a0(r133,l0) a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r134,l0) conflicts: a0(r133,l0) a1(r137,l0) a6(r138,l0) a8(r135,l0) a9(r141,l0) a10(r140,l0) a11(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r146,l0) conflicts: a0(r133,l0) a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r145,l0) conflicts: a0(r133,l0) a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r138,l0) conflicts: a0(r133,l0) a1(r137,l0) a3(r134,l0) a7(r143,l0) a8(r135,l0) a9(r141,l0) a10(r140,l0) a11(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r143,l0) conflicts: a0(r133,l0) a1(r137,l0) a6(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r135,l0) conflicts: a0(r133,l0) a1(r137,l0) a3(r134,l0) a6(r138,l0) a9(r141,l0) a10(r140,l0) a11(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r141,l0) conflicts: a1(r137,l0) a3(r134,l0) a6(r138,l0) a8(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r140,l0) conflicts: a1(r137,l0) a3(r134,l0) a6(r138,l0) a8(r135,l0) a11(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r142,l0) conflicts: a1(r137,l0) a3(r134,l0) a6(r138,l0) a8(r135,l0) a10(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a2(r147)<->a3(r134)@125:shuffle
  cp1:a7(r143)<->a8(r135)@125:shuffle
  cp2:a5(r145)<->a6(r138)@125:shuffle
  cp3:a9(r141)<->a11(r142)@125:shuffle
  cp4:a9(r141)<->a10(r140)@125:shuffle
  cp5:a0(r133)<->a9(r141)@125:shuffle
  regions=1, blocks=8, points=28
    allocnos=12, copies=6, conflicts=0, ranges=17

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r133 1r137 2r147 3r134 4r146 5r145 6r138 7r143 8r135 9r141 10r140 11r142
    modified regnos: 133 134 135 137 138 140 141 142 143 145 146 147
    border:
    Pressure: GENERAL_REGS=7
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
      Pushing a11(r142,l0)
      Pushing a10(r140,l0)
      Pushing a9(r141,l0)
      Pushing a7(r143,l0)
      Pushing a5(r145,l0)
      Pushing a4(r146,l0)
      Pushing a2(r147,l0)
      Pushing a8(r135,l0)
      Pushing a6(r138,l0)
      Pushing a0(r133,l0)
      Pushing a3(r134,l0)
      Pushing a1(r137,l0)
      Popping a1(r137,l0)  -- assign reg 3
      Popping a3(r134,l0)  -- assign reg 2
      Popping a0(r133,l0)  -- assign reg 0
      Popping a6(r138,l0)  -- assign reg 1
      Popping a8(r135,l0)  -- assign reg 12
      Popping a2(r147,l0)  -- assign reg 2
      Popping a4(r146,l0)  -- assign reg 2
      Popping a5(r145,l0)  -- assign reg 1
      Popping a7(r143,l0)  -- assign reg 12
      Popping a9(r141,l0)  -- assign reg 0
      Popping a10(r140,l0)  -- assign reg 0
      Popping a11(r142,l0)  -- assign reg 4
Disposition:
    0:r133 l0     0    3:r134 l0     2    8:r135 l0    12    1:r137 l0     3
    6:r138 l0     1   10:r140 l0     0    9:r141 l0     0   11:r142 l0     4
    7:r143 l0    12    5:r145 l0     1    4:r146 l0     2    2:r147 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 137
insn=6, live_throughout: 13, 14, 137, dead_or_set: 138
insn=7, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=8, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=11, live_throughout: 13, dead_or_set: 0
insn=12, live_throughout: 13, dead_or_set: 0, 14
insn=13, live_throughout: 13, 14, dead_or_set: 133
insn=56, live_throughout: 13, 14, 133, dead_or_set: 
insn=16, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=18, live_throughout: 13, 14, 137, 138, dead_or_set: 135
insn=19, live_throughout: 13, 14, 135, 137, 138, dead_or_set: 134
insn=21, live_throughout: 13, 14, 134, 135, 137, 138, dead_or_set: 142
insn=24, live_throughout: 13, 14, 134, 135, 137, 138, 142, dead_or_set: 
insn=20, live_throughout: 13, 14, 24, 134, 135, 137, 138, 142, dead_or_set: 140
insn=22, live_throughout: 13, 14, 24, 134, 135, 137, 138, dead_or_set: 140, 141, 142
insn=23, live_throughout: 13, 14, 24, 134, 135, 137, 138, dead_or_set: 133, 141
insn=25, live_throughout: 13, 14, 133, 134, 135, 137, 138, dead_or_set: 
insn=27, live_throughout: 13, 14, 133, 137, 138, dead_or_set: 135, 143
insn=28, live_throughout: 13, 14, 133, 137, 138, dead_or_set: 143
insn=30, live_throughout: 13, 14, 133, 137, dead_or_set: 138, 145
insn=31, live_throughout: 13, 14, 133, 137, dead_or_set: 145
insn=32, live_throughout: 13, 14, 133, 137, dead_or_set: 146
insn=33, live_throughout: 13, 14, 133, dead_or_set: 137, 146
insn=58, live_throughout: 13, 14, 133, dead_or_set: 
insn=36, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=38, live_throughout: 13, 14, 133, 137, dead_or_set: 134, 147
insn=39, live_throughout: 13, 14, 133, dead_or_set: 137, 147
insn=40, live_throughout: 13, 14, 133, dead_or_set: 
insn=46, live_throughout: 13, 14, dead_or_set: 0, 133
insn=52, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 142: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 39 (nil))
changing reg in insn 23
changing reg in insn 13
changing reg in insn 46
changing reg in insn 19
changing reg in insn 38
changing reg in insn 24
changing reg in insn 20
changing reg in insn 18
changing reg in insn 27
changing reg in insn 21
changing reg in insn 21
changing reg in insn 2
changing reg in insn 39
changing reg in insn 33
changing reg in insn 31
changing reg in insn 28
changing reg in insn 19
changing reg in insn 18
changing reg in insn 6
changing reg in insn 38
changing reg in insn 30
changing reg in insn 27
changing reg in insn 6
changing reg in insn 30
changing reg in insn 7
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 39
Spilling for insn 28.
Spilling for insn 31.
Spilling for insn 33.
Spilling for insn 39.

Reloads for insn # 28
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])

Reloads for insn # 31
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])

Reloads for insn # 33
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])

Reloads for insn # 39
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                                                        (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
deleting insn with uid = 46.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 14 (  1.8)


unwind_get_byte

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={4d,3u} r2={5d,5u} r3={3d,7u,3d} r4={1d,1u} r12={4d,3u,1d} r13={1d,8u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 180{140d,36u,4e} in 26{25 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 3 6 2 arch/arm/kernel/unwind.c:162 (set (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
        (reg:SI 0 r0 [ ctrl ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 7 2 arch/arm/kernel/unwind.c:165 (set (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 arch/arm/kernel/unwind.c:165 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/kernel/unwind.c:165 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 9 12 3 arch/arm/kernel/unwind.c:166 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x110e3b80>)
        (nil)))

(call_insn 12 11 13 3 arch/arm/kernel/unwind.c:166 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 12 56 3 arch/arm/kernel/unwind.c:167 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 56 13 57 3 arch/arm/kernel/unwind.c:167 (set (pc)
        (label_ref 40)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 57 56 16)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 16 57 17 4 38 "" [1 uses])

(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 4 arch/arm/kernel/unwind.c:170 (set (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 21 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 2 r2 [orig:134 D.15482 ] [134])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 21 19 24 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 4 r4 [142])
        (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135]) [0 S4 A32])
        (nil)))

(insn 24 21 20 4 arch/arm/kernel/unwind.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 20 24 22 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [140])
        (ashift:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (nil))

(insn 22 20 23 4 arch/arm/kernel/unwind.c:170 (set (reg:SI 0 r0 [141])
        (lshiftrt:SI (reg:SI 4 r4 [142])
            (reg:SI 0 r0 [140]))) 117 {*arm_shiftsi3} (nil))

(insn 23 22 25 4 arch/arm/kernel/unwind.c:170 (set (reg/v:SI 0 r0 [orig:133 ret ] [133])
        (and:SI (reg:SI 0 r0 [141])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 25 23 26 4 arch/arm/kernel/unwind.c:172 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 5 arch/arm/kernel/unwind.c:173 (set (reg/f:SI 12 ip [143])
        (plus:SI (reg/f:SI 12 ip [orig:135 D.15480 ] [135])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
        (nil)))

(insn 28 27 30 5 arch/arm/kernel/unwind.c:173 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 64 [0x40])) [0 <variable>.insn+0 S4 A32])
        (reg/f:SI 12 ip [143])) 167 {*arm_movsi_insn} (nil))

(insn 30 28 31 5 arch/arm/kernel/unwind.c:174 (set (reg:SI 1 r1 [145])
        (plus:SI (reg:SI 1 r1 [orig:138 <variable>.entries ] [138])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
        (nil)))

(insn 31 30 32 5 arch/arm/kernel/unwind.c:174 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 68 [0x44])) [0 <variable>.entries+0 S4 A32])
        (reg:SI 1 r1 [145])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 5 arch/arm/kernel/unwind.c:175 (set (reg:SI 2 r2 [146])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 33 32 58 5 arch/arm/kernel/unwind.c:175 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
        (reg:SI 2 r2 [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(jump_insn 58 33 59 5 (set (pc)
        (label_ref 40)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 59 58 36)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  4 [61.0%] 
(code_label 36 59 37 6 40 "" [1 uses])

(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 6 arch/arm/kernel/unwind.c:177 (set (reg:SI 2 r2 [147])
        (plus:SI (reg:SI 2 r2 [orig:134 D.15482 ] [134])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
        (nil)))

(insn 39 38 40 6 arch/arm/kernel/unwind.c:177 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ctrl ] [137])
                (const_int 72 [0x48])) [0 <variable>.byte+0 S4 A32])
        (reg:SI 2 r2 [147])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 3 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 40 39 41 7 39 "" [2 uses])

(note 41 40 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 41 60 7 arch/arm/kernel/unwind.c:180 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 60 52 61 NOTE_INSN_DELETED)

(note 61 60 0 NOTE_INSN_DELETED)


;; Function unwind_frame (unwind_frame)[0:858]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 548.
rescanning insn with uid = 548.
deleting insn with uid = 548.
deleting insn with uid = 211.
scanning new insn with uid = 549.
rescanning insn with uid = 549.
deleting insn with uid = 549.
deleting insn with uid = 198.
scanning new insn with uid = 550.
verify found no changes in insn with uid = 550.
deleting insn with uid = 113.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 190 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 159 (  2.1)

Pass 0 for finding allocno costs

    a130 (r277,l1) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r277,l0) best GENERAL_REGS, cover GENERAL_REGS
    a122 (r275,l5) best GENERAL_REGS, cover GENERAL_REGS
    a112 (r275,l3) best GENERAL_REGS, cover GENERAL_REGS
    a102 (r275,l4) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r275,l2) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r275,l0) best GENERAL_REGS, cover GENERAL_REGS
    a121 (r274,l5) best GENERAL_REGS, cover GENERAL_REGS
    a111 (r274,l3) best GENERAL_REGS, cover GENERAL_REGS
    a101 (r274,l4) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r274,l2) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r274,l0) best GENERAL_REGS, cover GENERAL_REGS
    a110 (r272,l3) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r272,l2) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r271,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r262,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r261,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r259,l2) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r257,l2) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r255,l2) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r254,l2) best GENERAL_REGS, cover GENERAL_REGS
    a103 (r252,l4) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r247,l2) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r244,l2) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r243,l2) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r242,l2) best GENERAL_REGS, cover GENERAL_REGS
    a113 (r238,l3) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r235,l2) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r233,l2) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r230,l2) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r229,l2) best GENERAL_REGS, cover GENERAL_REGS
    a123 (r228,l5) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r225,l2) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r223,l2) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r222,l2) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r221,l2) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r220,l2) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r219,l2) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r218,l2) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r217,l2) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r216,l2) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r215,l2) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r214,l2) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a131 (r190,l1) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a132 (r184,l1) best GENERAL_REGS, cover GENERAL_REGS
    a133 (r183,l1) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a129 (r175,l1) best GENERAL_REGS, cover GENERAL_REGS
    a120 (r175,l5) best GENERAL_REGS, cover GENERAL_REGS
    a109 (r175,l3) best GENERAL_REGS, cover GENERAL_REGS
    a100 (r175,l4) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r175,l2) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r167,l2) best GENERAL_REGS, cover GENERAL_REGS
    a128 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a119 (r166,l5) best GENERAL_REGS, cover GENERAL_REGS
    a108 (r166,l3) best GENERAL_REGS, cover GENERAL_REGS
    a99 (r166,l4) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r166,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a127 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a118 (r165,l5) best GENERAL_REGS, cover GENERAL_REGS
    a107 (r165,l3) best GENERAL_REGS, cover GENERAL_REGS
    a98 (r165,l4) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r165,l2) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a126 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a125 (r157,l1) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r153,l4) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r153,l2) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r152,l4) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r152,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a106 (r151,l3) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r151,l2) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r150,l2) best GENERAL_REGS, cover GENERAL_REGS
    a117 (r149,l5) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r149,l2) best GENERAL_REGS, cover GENERAL_REGS
    a116 (r148,l5) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r148,l2) best GENERAL_REGS, cover GENERAL_REGS
    a115 (r147,l5) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r147,l2) best GENERAL_REGS, cover GENERAL_REGS
    a105 (r146,l3) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r146,l2) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r143,l2) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r142,l2) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a114 (r140,l5) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r140,l2) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r139,l4) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a104 (r138,l3) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a124 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r135,l2) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r134,l2) best GENERAL_REGS, cover GENERAL_REGS

  a0(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a1(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a2(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a25(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a26(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a38(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a39(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a40(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a43(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r277,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r165,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r175,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a50(r274,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a51(r275,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a53(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r259,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a57(r257,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r254,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r255,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a62(r247,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r244,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r243,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r242,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a68(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a69(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r272,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a71(r271,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r235,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r233,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a75(r230,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a76(r229,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a80(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r225,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r223,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a85(r222,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r219,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r220,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a88(r221,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a90(r218,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r217,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r214,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r215,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a94(r216,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r139,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a96(r152,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a97(r153,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a98(r165,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a99(r166,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a100(r175,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a101(r274,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a102(r275,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a103(r252,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a104(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a105(r146,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a106(r151,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a107(r165,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a108(r166,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a109(r175,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a110(r272,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a111(r274,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a112(r275,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a113(r238,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a114(r140,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a115(r147,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a116(r148,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a117(r149,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a118(r165,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a119(r166,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a120(r175,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a121(r274,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a122(r275,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a123(r228,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a124(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a126(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a127(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a128(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a129(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a130(r277,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a131(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a132(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a133(r183,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r277: preferred GENERAL_REGS, alternative NO_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a1(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a2(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a25(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a26(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a38(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a39(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a40(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a43(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r277,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r165,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r175,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a50(r274,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a51(r275,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a53(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r259,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a57(r257,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r254,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r255,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a62(r247,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r244,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a65(r243,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r242,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a68(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a69(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r272,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a71(r271,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r235,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r233,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a75(r230,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a76(r229,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a78(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a80(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r225,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r223,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a85(r222,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r219,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r220,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a88(r221,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a90(r218,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r217,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r214,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r215,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a94(r216,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r139,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a96(r152,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a97(r153,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a98(r165,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a99(r166,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a100(r175,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a101(r274,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a102(r275,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a103(r252,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a104(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a105(r146,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a106(r151,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a107(r165,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a108(r166,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a109(r175,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a110(r272,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a111(r274,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a112(r275,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a113(r238,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a114(r140,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a115(r147,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a116(r148,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a117(r149,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a118(r165,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a119(r166,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a120(r175,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a121(r274,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a122(r275,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a123(r228,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a124(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a126(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a127(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a128(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a129(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a130(r277,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a131(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a132(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a133(r183,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 473(l0): point = 0
   Insn 467(l0): point = 2
   Insn 460(l0): point = 5
   Insn 543(l0): point = 8
   Insn 452(l0): point = 10
   Insn 450(l0): point = 12
   Insn 448(l0): point = 14
   Insn 454(l0): point = 16
   Insn 451(l0): point = 18
   Insn 449(l0): point = 20
   Insn 455(l0): point = 22
   Insn 447(l0): point = 24
   Insn 445(l0): point = 27
   Insn 444(l0): point = 29
   Insn 443(l0): point = 31
   Insn 442(l0): point = 33
   Insn 439(l0): point = 36
   Insn 438(l0): point = 38
   Insn 436(l0): point = 41
   Insn 435(l0): point = 43
   Insn 434(l0): point = 45
   Insn 340(l0): point = 48
   Insn 190(l0): point = 50
   Insn 541(l0): point = 53
   Insn 537(l0): point = 56
   Insn 416(l0): point = 58
   Insn 415(l0): point = 60
   Insn 413(l0): point = 62
   Insn 414(l0): point = 64
   Insn 531(l0): point = 67
   Insn 367(l0): point = 69
   Insn 366(l0): point = 71
   Insn 364(l0): point = 73
   Insn 365(l0): point = 75
   Insn 519(l0): point = 78
   Insn 241(l0): point = 80
   Insn 240(l0): point = 82
   Insn 238(l0): point = 84
   Insn 239(l0): point = 86
   Insn 513(l0): point = 89
   Insn 186(l0): point = 91
   Insn 185(l0): point = 93
   Insn 182(l0): point = 95
   Insn 184(l0): point = 97
   Insn 183(l0): point = 99
   Insn 511(l0): point = 102
   Insn 176(l0): point = 104
   Insn 175(l0): point = 106
   Insn 174(l0): point = 108
   Insn 170(l0): point = 110
   Insn 169(l0): point = 112
   Insn 167(l0): point = 115
   Insn 166(l0): point = 117
   Insn 509(l0): point = 120
   Insn 161(l0): point = 122
   Insn 160(l0): point = 124
   Insn 159(l0): point = 126
   Insn 158(l0): point = 128
   Insn 156(l0): point = 131
   Insn 155(l0): point = 133
   Insn 154(l0): point = 135
   Insn 153(l0): point = 137
   Insn 152(l0): point = 139
   Insn 507(l0): point = 142
   Insn 147(l0): point = 144
   Insn 146(l0): point = 146
   Insn 143(l0): point = 148
   Insn 145(l0): point = 150
   Insn 144(l0): point = 152
   Insn 505(l0): point = 155
   Insn 137(l0): point = 157
   Insn 136(l0): point = 159
   Insn 134(l0): point = 162
   Insn 133(l0): point = 164
   Insn 132(l0): point = 166
   Insn 503(l0): point = 169
   Insn 127(l0): point = 171
   Insn 126(l0): point = 173
   Insn 125(l0): point = 175
   Insn 124(l0): point = 177
   Insn 121(l0): point = 180
   Insn 120(l0): point = 182
   Insn 117(l0): point = 185
   Insn 116(l0): point = 187
   Insn 115(l0): point = 189
   Insn 114(l0): point = 191
   Insn 550(l0): point = 193
   Insn 112(l0): point = 195
   Insn 110(l0): point = 197
   Insn 108(l0): point = 199
   Insn 111(l0): point = 201
   Insn 109(l0): point = 203
   Insn 107(l0): point = 205
   Insn 501(l0): point = 208
   Insn 102(l0): point = 210
   Insn 101(l0): point = 212
   Insn 99(l0): point = 214
   Insn 100(l0): point = 216
   Insn 96(l0): point = 219
   Insn 95(l0): point = 221
   Insn 92(l0): point = 224
   Insn 90(l0): point = 226
   Insn 91(l0): point = 228
   Insn 86(l0): point = 231
   Insn 499(l0): point = 234
   Insn 71(l0): point = 236
   Insn 69(l0): point = 238
   Insn 67(l0): point = 240
   Insn 66(l0): point = 242
   Insn 65(l0): point = 244
   Insn 63(l0): point = 246
   Insn 62(l0): point = 248
   Insn 61(l0): point = 250
   Insn 60(l0): point = 252
   Insn 59(l0): point = 254
   Insn 58(l0): point = 256
   Insn 57(l0): point = 258
   Insn 56(l0): point = 260
   Insn 55(l0): point = 262
   Insn 53(l0): point = 264
   Insn 497(l0): point = 267
   Insn 41(l0): point = 269
   Insn 82(l0): point = 271
   Insn 40(l0): point = 273
   Insn 39(l0): point = 275
   Insn 38(l0): point = 277
   Insn 37(l0): point = 279
   Insn 495(l0): point = 282
   Insn 31(l0): point = 284
   Insn 30(l0): point = 286
   Insn 29(l0): point = 288
   Insn 28(l0): point = 290
   Insn 27(l0): point = 292
   Insn 23(l0): point = 295
   Insn 22(l0): point = 297
   Insn 20(l0): point = 299
   Insn 19(l0): point = 301
   Insn 18(l0): point = 303
   Insn 16(l0): point = 306
   Insn 15(l0): point = 308
   Insn 546(l0): point = 310
   Insn 13(l0): point = 312
   Insn 545(l0): point = 314
   Insn 9(l0): point = 316
   Insn 8(l0): point = 318
   Insn 12(l0): point = 320
   Insn 7(l0): point = 322
   Insn 3(l0): point = 324
   Insn 432(l2): point = 327
   Insn 431(l2): point = 329
   Insn 430(l2): point = 331
   Insn 426(l2): point = 334
   Insn 425(l2): point = 336
   Insn 423(l2): point = 339
   Insn 422(l2): point = 341
   Insn 421(l2): point = 343
   Insn 535(l2): point = 346
   Insn 407(l2): point = 348
   Insn 406(l2): point = 350
   Insn 404(l2): point = 352
   Insn 403(l2): point = 354
   Insn 401(l2): point = 356
   Insn 400(l2): point = 358
   Insn 397(l2): point = 361
   Insn 396(l2): point = 363
   Insn 533(l2): point = 366
   Insn 391(l2): point = 368
   Insn 373(l2): point = 371
   Insn 372(l2): point = 373
   Insn 359(l2): point = 376
   Insn 358(l2): point = 378
   Insn 355(l2): point = 381
   Insn 354(l2): point = 383
   Insn 353(l2): point = 385
   Insn 351(l2): point = 387
   Insn 350(l2): point = 389
   Insn 347(l2): point = 392
   Insn 346(l2): point = 394
   Insn 529(l2): point = 397
   Insn 341(l2): point = 399
   Insn 337(l2): point = 402
   Insn 336(l2): point = 404
   Insn 334(l2): point = 407
   Insn 333(l2): point = 409
   Insn 332(l2): point = 411
   Insn 330(l2): point = 414
   Insn 329(l2): point = 416
   Insn 527(l2): point = 419
   Insn 324(l2): point = 421
   Insn 320(l2): point = 424
   Insn 321(l2): point = 426
   Insn 319(l2): point = 428
   Insn 317(l2): point = 431
   Insn 314(l2): point = 433
   Insn 316(l2): point = 435
   Insn 525(l2): point = 438
   Insn 492(l2): point = 440
   Insn 310(l2): point = 442
   Insn 294(l2): point = 444
   Insn 309(l2): point = 446
   Insn 292(l2): point = 449
   Insn 291(l2): point = 451
   Insn 523(l2): point = 454
   Insn 286(l2): point = 456
   Insn 285(l2): point = 458
   Insn 283(l2): point = 460
   Insn 280(l2): point = 462
   Insn 278(l2): point = 465
   Insn 277(l2): point = 467
   Insn 276(l2): point = 469
   Insn 274(l2): point = 472
   Insn 273(l2): point = 474
   Insn 521(l2): point = 477
   Insn 268(l2): point = 479
   Insn 266(l2): point = 482
   Insn 265(l2): point = 484
   Insn 248(l2): point = 487
   Insn 247(l2): point = 489
   Insn 246(l2): point = 491
   Insn 235(l2): point = 494
   Insn 234(l2): point = 496
   Insn 232(l2): point = 498
   Insn 231(l2): point = 500
   Insn 229(l2): point = 502
   Insn 225(l2): point = 504
   Insn 226(l2): point = 506
   Insn 228(l2): point = 508
   Insn 223(l2): point = 511
   Insn 222(l2): point = 513
   Insn 221(l2): point = 515
   Insn 517(l2): point = 518
   Insn 216(l2): point = 520
   Insn 215(l2): point = 522
   Insn 212(l2): point = 524
   Insn 548(l2): point = 526
   Insn 214(l2): point = 528
   Insn 213(l2): point = 530
   Insn 209(l2): point = 533
   Insn 208(l2): point = 535
   Insn 515(l2): point = 538
   Insn 203(l2): point = 540
   Insn 202(l2): point = 542
   Insn 199(l2): point = 544
   Insn 549(l2): point = 546
   Insn 201(l2): point = 548
   Insn 200(l2): point = 550
   Insn 196(l2): point = 553
   Insn 195(l2): point = 555
   Insn 193(l2): point = 557
   Insn 192(l2): point = 559
   Insn 191(l2): point = 561
   Insn 389(l4): point = 564
   Insn 386(l4): point = 566
   Insn 388(l4): point = 568
   Insn 381(l4): point = 571
   Insn 380(l4): point = 573
   Insn 377(l4): point = 576
   Insn 376(l4): point = 578
   Insn 312(l3): point = 581
   Insn 307(l3): point = 583
   Insn 311(l3): point = 585
   Insn 303(l3): point = 588
   Insn 302(l3): point = 590
   Insn 301(l3): point = 592
   Insn 263(l5): point = 595
   Insn 260(l5): point = 597
   Insn 262(l5): point = 599
   Insn 255(l5): point = 602
   Insn 254(l5): point = 604
   Insn 252(l5): point = 607
   Insn 251(l5): point = 609
   Insn 84(l1): point = 612
   Insn 494(l1): point = 614
   Insn 83(l1): point = 616
   Insn 76(l1): point = 619
   Insn 51(l1): point = 622
   Insn 50(l1): point = 624
   Insn 49(l1): point = 626
   Insn 47(l1): point = 629
   Insn 46(l1): point = 631
   Insn 45(l1): point = 633
 a0(r163): [208..210] [142..144] [89..91] [78..80] [67..69] [56..58] [8..22] [3..5]
 a1(r175): [217..324] [155..207] [102..141] [11..52]
 a2(r266): [11..18]
 a3(r265): [13..20]
 a4(r264): [15..24]
 a5(r263): [17..31]
 a6(r262): [30..33]
 a7(r261): [37..38]
 a8(r260): [44..45]
 a9(r275): [48..48]
 a10(r274): [48..50]
 a11(r165): [219..322] [155..207] [102..141] [48..52]
 a12(r166): [219..314] [155..207] [102..141] [48..52]
 a13(r146): [65..66]
 a14(r152): [76..77]
 a15(r135): [87..88]
 a16(r170): [131..139] [109..119] [98..101]
 a17(r169): [131..137] [115..119] [100..101]
 a18(r211): [105..106]
 a19(r210): [107..108]
 a20(r206): [111..112]
 a21(r168): [131..135] [118..119]
 a22(r205): [123..124]
 a23(r204): [127..128]
 a24(r164): [282..284] [234..254] [219..231] [176..207] [160..168] [151..154]
 a25(r172): [178..189] [162..168] [153..154]
 a26(r202): [158..159]
 a27(r201): [165..166]
 a28(r200): [172..173]
 a29(r199): [174..175]
 a30(r198): [174..177]
 a31(r196): [192..193]
 a32(r195): [196..201]
 a33(r194): [198..203]
 a34(r193): [200..205]
 a35(r157): [229..275]
 a36(r190): [237..266]
 a37(r158): [237..269]
 a38(r160): [241..244]
 a39(r161): [247..252]
 a40(r162): [247..250]
 a41(r186): [259..264]
 a42(r137): [293..303] [263..281]
 a43(r182): [270..273]
 a44(r277): [267..271]
 a45(r176): [315..316]
 a46(r177): [317..318]
 a47(r165): [327..563]
 a48(r166): [327..563]
 a49(r175): [327..563]
 a50(r274): [327..563]
 a51(r275): [327..563]
 a52(r146): [551..557] [531..537] [507..517] [463..476] [436..453] [414..418] [392..396] [361..365]
 a53(r135): [490..500]
 a54(r152): [371..383]
 a55(r259): [330..331]
 a56(r167): [337..343]
 a57(r257): [349..350]
 a58(r254): [351..352]
 a59(r255): [353..354]
 a60(r153): [369..373]
 a61(r139): [371..371]
 a62(r247): [372..378]
 a63(r134): [374..385]
 a64(r244): [403..404]
 a65(r243): [410..411]
 a66(r150): [431..433] [422..426]
 a67(r242): [425..428]
 a68(r138): [427..444]
 a69(r151): [438..440]
 a70(r272): [438..442]
 a71(r271): [443..446]
 a72(r142): [511..515] [472..476] [452..453]
 a73(r235): [457..458]
 a74(r233): [459..460]
 a75(r230): [461..462]
 a76(r229): [468..469]
 a77(r148): [480..491]
 a78(r149): [485..489]
 a79(r140): [487..487]
 a80(r136): [492..504]
 a81(r147): [487..496]
 a82(r225): [497..498]
 a83(r143): [501..506]
 a84(r223): [521..522]
 a85(r222): [523..528]
 a86(r219): [523..524]
 a87(r220): [525..526]
 a88(r221): [529..530]
 a89(r141): [553..555] [536..537]
 a90(r218): [541..542]
 a91(r217): [543..548]
 a92(r214): [543..544]
 a93(r215): [545..546]
 a94(r216): [549..550]
 a95(r139): [564..580]
 a96(r152): [564..580]
 a97(r153): [564..580]
 a98(r165): [564..580]
 a99(r166): [564..580]
 a100(r175): [564..580]
 a101(r274): [564..580]
 a102(r275): [564..580]
 a103(r252): [572..573]
 a104(r138): [581..594]
 a105(r146): [581..594]
 a106(r151): [581..594]
 a107(r165): [581..594]
 a108(r166): [581..594]
 a109(r175): [581..594]
 a110(r272): [581..594]
 a111(r274): [581..594]
 a112(r275): [581..594]
 a113(r238): [591..592]
 a114(r140): [595..611]
 a115(r147): [595..611]
 a116(r148): [595..611]
 a117(r149): [595..611]
 a118(r165): [595..611]
 a119(r166): [595..611]
 a120(r175): [595..611]
 a121(r274): [595..611]
 a122(r275): [595..611]
 a123(r228): [603..604]
 a124(r137): [612..635]
 a125(r157): [612..635]
 a126(r158): [612..635]
 a127(r165): [612..635]
 a128(r166): [612..635]
 a129(r175): [612..635]
 a130(r277): [612..635]
 a131(r190): [622..635] [612..614]
 a132(r184): [625..626]
 a133(r183): [632..633]
 Rebuilding regno allocno list for 272
 Rebuilding regno allocno list for 271
 Rebuilding regno allocno list for 259
 Rebuilding regno allocno list for 257
 Rebuilding regno allocno list for 255
 Rebuilding regno allocno list for 254
 Rebuilding regno allocno list for 252
 Rebuilding regno allocno list for 247
 Rebuilding regno allocno list for 244
 Rebuilding regno allocno list for 243
 Rebuilding regno allocno list for 242
 Rebuilding regno allocno list for 238
 Rebuilding regno allocno list for 235
 Rebuilding regno allocno list for 233
 Rebuilding regno allocno list for 230
 Rebuilding regno allocno list for 229
 Rebuilding regno allocno list for 228
 Rebuilding regno allocno list for 225
 Rebuilding regno allocno list for 223
 Rebuilding regno allocno list for 222
 Rebuilding regno allocno list for 221
 Rebuilding regno allocno list for 220
 Rebuilding regno allocno list for 219
 Rebuilding regno allocno list for 218
 Rebuilding regno allocno list for 217
 Rebuilding regno allocno list for 216
 Rebuilding regno allocno list for 215
 Rebuilding regno allocno list for 214
 Rebuilding regno allocno list for 184
 Rebuilding regno allocno list for 183
 Rebuilding regno allocno list for 167
 Rebuilding regno allocno list for 153
 Rebuilding regno allocno list for 151
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 149
 Rebuilding regno allocno list for 148
 Rebuilding regno allocno list for 147
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 142
 Rebuilding regno allocno list for 141
 Rebuilding regno allocno list for 140
 Rebuilding regno allocno list for 139
 Rebuilding regno allocno list for 138
 Rebuilding regno allocno list for 136
 Rebuilding regno allocno list for 134
Compressing live ranges: from 636 to 243 - 38%
Ranges after the compression:
 a0(r163): [88..89] [58..59] [33..34] [29..30] [25..26] [21..22] [2..9] [0..1]
 a1(r175): [124..242] [90..123] [63..87] [38..57] [3..20]
 a2(r266): [3..7]
 a3(r265): [4..8]
 a4(r264): [5..10]
 a5(r263): [6..12]
 a6(r262): [11..13]
 a7(r261): [14..15]
 a8(r260): [16..17]
 a9(r275): [124..234] [18..18]
 a10(r274): [124..234] [18..19]
 a11(r165): [124..242] [91..122] [63..87] [38..57] [18..20]
 a12(r166): [124..242] [91..117] [63..87] [38..57] [18..20]
 a13(r146): [227..230] [219..222] [207..209] [194..197] [175..179] [160..168] [151..152] [145..146] [135..136] [23..24]
 a14(r152): [223..226] [138..143] [27..28]
 a15(r135): [184..190] [31..32]
 a16(r170): [53..56] [43..48] [35..37]
 a17(r169): [53..55] [46..48] [36..37]
 a18(r211): [39..40]
 a19(r210): [41..42]
 a20(r206): [44..45]
 a21(r168): [53..54] [47..48]
 a22(r205): [49..50]
 a23(r204): [51..52]
 a24(r164): [113..114] [94..101] [91..93] [75..87] [66..70] [60..62]
 a25(r172): [77..78] [67..70] [61..62]
 a26(r202): [64..65]
 a27(r201): [68..69]
 a28(r200): [71..72]
 a29(r199): [73..74]
 a30(r198): [73..76]
 a31(r196): [79..80]
 a32(r195): [81..84]
 a33(r194): [82..85]
 a34(r193): [83..86]
 a35(r157): [235..242] [92..111]
 a36(r190): [237..242] [235..236] [95..105]
 a37(r158): [235..242] [95..107]
 a38(r160): [96..97]
 a39(r161): [98..100]
 a40(r162): [98..99]
 a41(r186): [102..104]
 a42(r137): [235..242] [115..116] [103..112]
 a43(r182): [108..110]
 a44(r277): [235..242] [106..109]
 a45(r176): [118..119]
 a46(r177): [120..121]
 a55(r259): [125..126]
 a56(r167): [127..128]
 a57(r257): [129..130]
 a58(r254): [131..132]
 a59(r255): [133..134]
 a60(r153): [223..226] [137..140]
 a61(r139): [223..226] [138..138]
 a62(r247): [139..142]
 a63(r134): [141..144]
 a64(r244): [147..148]
 a65(r243): [149..150]
 a66(r150): [158..159] [153..155]
 a67(r242): [154..157]
 a68(r138): [227..230] [156..165]
 a69(r151): [227..230] [161..162]
 a70(r272): [227..230] [161..163]
 a71(r271): [164..166]
 a72(r142): [195..196] [178..179] [167..168]
 a73(r235): [169..170]
 a74(r233): [171..172]
 a75(r230): [173..174]
 a76(r229): [176..177]
 a77(r148): [231..234] [180..185]
 a78(r149): [231..234] [181..183]
 a79(r140): [231..234] [182..182]
 a80(r136): [186..192]
 a81(r147): [231..234] [182..187]
 a82(r225): [188..189]
 a83(r143): [191..193]
 a84(r223): [198..199]
 a85(r222): [200..204]
 a86(r219): [200..201]
 a87(r220): [202..203]
 a88(r221): [205..206]
 a89(r141): [220..221] [208..209]
 a90(r218): [210..211]
 a91(r217): [212..216]
 a92(r214): [212..213]
 a93(r215): [214..215]
 a94(r216): [217..218]
 a103(r252): [224..225]
 a113(r238): [228..229]
 a123(r228): [232..233]
 a132(r184): [238..239]
 a133(r183): [240..241]
+++Allocating 1088 bytes for conflict table (uncompressed size 3216)
;; a0(r163,l0) conflicts: a2(r266,l0) a1(r175,l0) a3(r265,l0) a4(r264,l0) a5(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r175,l0) conflicts: a0(r163,l0) a2(r266,l0) a3(r265,l0) a4(r264,l0) a5(r263,l0) a6(r262,l0) a7(r261,l0) a8(r260,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a14(r152,l0) a15(r135,l0) a16(r170,l0) a17(r169,l0) a18(r211,l0) a19(r210,l0) a20(r206,l0) a21(r168,l0) a22(r205,l0) a23(r204,l0) a24(r164,l0) a25(r172,l0) a26(r202,l0) a27(r201,l0) a28(r200,l0) a29(r199,l0) a30(r198,l0) a31(r196,l0) a32(r195,l0) a33(r194,l0) a34(r193,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a43(r182,l0) a45(r176,l0) a46(r177,l0) a55(r259,l0) a56(r167,l0) a57(r257,l0) a58(r254,l0) a59(r255,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a64(r244,l0) a65(r243,l0) a66(r150,l0) a67(r242,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a73(r235,l0) a74(r233,l0) a75(r230,l0) a76(r229,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0) a83(r143,l0) a84(r223,l0) a86(r219,l0) a85(r222,l0) a87(r220,l0) a88(r221,l0) a89(r141,l0) a90(r218,l0) a92(r214,l0) a91(r217,l0) a93(r215,l0) a94(r216,l0) a103(r252,l0) a113(r238,l0) a123(r228,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r266,l0) conflicts: a0(r163,l0) a1(r175,l0) a3(r265,l0) a4(r264,l0) a5(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r265,l0) conflicts: a0(r163,l0) a2(r266,l0) a1(r175,l0) a4(r264,l0) a5(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r264,l0) conflicts: a0(r163,l0) a2(r266,l0) a1(r175,l0) a3(r265,l0) a5(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r263,l0) conflicts: a0(r163,l0) a2(r266,l0) a1(r175,l0) a3(r265,l0) a4(r264,l0) a6(r262,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r262,l0) conflicts: a1(r175,l0) a5(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r261,l0) conflicts: a1(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r260,l0) conflicts: a1(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r275,l0) conflicts: a1(r175,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a14(r152,l0) a15(r135,l0) a55(r259,l0) a56(r167,l0) a57(r257,l0) a58(r254,l0) a59(r255,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a64(r244,l0) a65(r243,l0) a66(r150,l0) a67(r242,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a73(r235,l0) a74(r233,l0) a75(r230,l0) a76(r229,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0) a83(r143,l0) a84(r223,l0) a86(r219,l0) a85(r222,l0) a87(r220,l0) a88(r221,l0) a89(r141,l0) a90(r218,l0) a92(r214,l0) a91(r217,l0) a93(r215,l0) a94(r216,l0) a103(r252,l0) a113(r238,l0) a123(r228,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a10(r274,l0) conflicts: a1(r175,l0) a9(r275,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a14(r152,l0) a15(r135,l0) a55(r259,l0) a56(r167,l0) a57(r257,l0) a58(r254,l0) a59(r255,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a64(r244,l0) a65(r243,l0) a66(r150,l0) a67(r242,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a73(r235,l0) a74(r233,l0) a75(r230,l0) a76(r229,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0) a83(r143,l0) a84(r223,l0) a86(r219,l0) a85(r222,l0) a87(r220,l0) a88(r221,l0) a89(r141,l0) a90(r218,l0) a92(r214,l0) a91(r217,l0) a93(r215,l0) a94(r216,l0) a103(r252,l0) a113(r238,l0) a123(r228,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a11(r165,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a12(r166,l0) a13(r146,l0) a14(r152,l0) a15(r135,l0) a16(r170,l0) a17(r169,l0) a18(r211,l0) a19(r210,l0) a20(r206,l0) a21(r168,l0) a22(r205,l0) a23(r204,l0) a24(r164,l0) a25(r172,l0) a26(r202,l0) a27(r201,l0) a28(r200,l0) a29(r199,l0) a30(r198,l0) a31(r196,l0) a32(r195,l0) a33(r194,l0) a34(r193,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a43(r182,l0) a45(r176,l0) a46(r177,l0) a55(r259,l0) a56(r167,l0) a57(r257,l0) a58(r254,l0) a59(r255,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a64(r244,l0) a65(r243,l0) a66(r150,l0) a67(r242,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a73(r235,l0) a74(r233,l0) a75(r230,l0) a76(r229,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0) a83(r143,l0) a84(r223,l0) a86(r219,l0) a85(r222,l0) a87(r220,l0) a88(r221,l0) a89(r141,l0) a90(r218,l0) a92(r214,l0) a91(r217,l0) a93(r215,l0) a94(r216,l0) a103(r252,l0) a113(r238,l0) a123(r228,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a12(r166,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a13(r146,l0) a14(r152,l0) a15(r135,l0) a16(r170,l0) a17(r169,l0) a18(r211,l0) a19(r210,l0) a20(r206,l0) a21(r168,l0) a22(r205,l0) a23(r204,l0) a24(r164,l0) a25(r172,l0) a26(r202,l0) a27(r201,l0) a28(r200,l0) a29(r199,l0) a30(r198,l0) a31(r196,l0) a32(r195,l0) a33(r194,l0) a34(r193,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a43(r182,l0) a55(r259,l0) a56(r167,l0) a57(r257,l0) a58(r254,l0) a59(r255,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a64(r244,l0) a65(r243,l0) a66(r150,l0) a67(r242,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a73(r235,l0) a74(r233,l0) a75(r230,l0) a76(r229,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0) a83(r143,l0) a84(r223,l0) a86(r219,l0) a85(r222,l0) a87(r220,l0) a88(r221,l0) a89(r141,l0) a90(r218,l0) a92(r214,l0) a91(r217,l0) a93(r215,l0) a94(r216,l0) a103(r252,l0) a113(r238,l0) a123(r228,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a13(r146,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a72(r142,l0) a76(r229,l0) a89(r141,l0) a113(r238,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r152,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a60(r153,l0) a61(r139,l0) a62(r247,l0) a63(r134,l0) a103(r252,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r135,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a77(r148,l0) a81(r147,l0) a80(r136,l0) a82(r225,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r170,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a17(r169,l0) a20(r206,l0) a21(r168,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a17(r169,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a16(r170,l0) a21(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r211,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r210,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r206,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a16(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r168,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a16(r170,l0) a17(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r205,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r204,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r164,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a25(r172,l0) a27(r201,l0) a30(r198,l0) a31(r196,l0) a32(r195,l0) a33(r194,l0) a34(r193,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a25(r172,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a27(r201,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r202,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r201,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a25(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r200,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r199,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a30(r198,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r198,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a29(r199,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r196,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r195,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a33(r194,l0) a34(r193,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r194,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a32(r195,l0) a34(r193,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r193,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a32(r195,l0) a33(r194,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r157,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a36(r190,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a43(r182,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a36(r190,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a35(r157,l0) a37(r158,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a37(r158,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a35(r157,l0) a36(r190,l0) a38(r160,l0) a40(r162,l0) a39(r161,l0) a41(r186,l0) a42(r137,l0) a44(r277,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a38(r160,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r161,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a40(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r162,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a24(r164,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a39(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r186,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a42(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a42(r137,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a41(r186,l0) a44(r277,l0) a43(r182,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a43(r182,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a42(r137,l0) a44(r277,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r277,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a42(r137,l0) a43(r182,l0) a132(r184,l0) a133(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r176,l0) conflicts: a1(r175,l0) a11(r165,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a46(r177,l0) conflicts: a1(r175,l0) a11(r165,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a55(r259,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a56(r167,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a57(r257,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a58(r254,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a59(r255,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a60(r153,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a14(r152,l0) a61(r139,l0) a62(r247,l0) a103(r252,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a61(r139,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a14(r152,l0) a60(r153,l0) a103(r252,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a62(r247,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a14(r152,l0) a60(r153,l0) a63(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a63(r134,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a14(r152,l0) a62(r247,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a64(r244,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a65(r243,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a66(r150,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a67(r242,l0) a68(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a67(r242,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a66(r150,l0) a68(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a68(r138,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a66(r150,l0) a67(r242,l0) a69(r151,l0) a70(r272,l0) a71(r271,l0) a113(r238,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a69(r151,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a68(r138,l0) a70(r272,l0) a113(r238,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a70(r272,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a68(r138,l0) a69(r151,l0) a113(r238,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a71(r271,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a68(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a72(r142,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a73(r235,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a74(r233,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a75(r230,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a76(r229,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a77(r148,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a15(r135,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0) a123(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a78(r149,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a77(r148,l0) a79(r140,l0) a81(r147,l0) a123(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a79(r140,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a77(r148,l0) a78(r149,l0) a81(r147,l0) a123(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a80(r136,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a15(r135,l0) a81(r147,l0) a82(r225,l0) a83(r143,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a81(r147,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a15(r135,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a80(r136,l0) a123(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a82(r225,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a15(r135,l0) a80(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a83(r143,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a80(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a84(r223,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a85(r222,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a86(r219,l0) a87(r220,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a86(r219,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a85(r222,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a87(r220,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a85(r222,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a88(r221,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a89(r141,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a90(r218,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a91(r217,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a92(r214,l0) a93(r215,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a92(r214,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a91(r217,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a93(r215,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a91(r217,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a94(r216,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a103(r252,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a14(r152,l0) a60(r153,l0) a61(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a113(r238,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a13(r146,l0) a68(r138,l0) a69(r151,l0) a70(r272,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a123(r228,l0) conflicts: a1(r175,l0) a9(r275,l0) a10(r274,l0) a11(r165,l0) a12(r166,l0) a77(r148,l0) a78(r149,l0) a79(r140,l0) a81(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a132(r184,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a42(r137,l0) a44(r277,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a133(r183,l0) conflicts: a1(r175,l0) a11(r165,l0) a12(r166,l0) a35(r157,l0) a36(r190,l0) a37(r158,l0) a42(r137,l0) a44(r277,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a58(r254)<->a59(r255)@125:shuffle
  cp1:a57(r257)<->a58(r254)@125:shuffle
  cp2:a60(r153)<->a63(r134)@1000:move
  cp3:a61(r139)<->a62(r247)@1000:move
  cp4:a70(r272)<->a71(r271)@125:shuffle
  cp5:a13(r146)<->a75(r230)@125:shuffle
  cp6:a74(r233)<->a75(r230)@125:shuffle
  cp7:a77(r148)<->a80(r136)@1000:move
  cp8:a15(r135)<->a78(r149)@125:shuffle
  cp9:a13(r146)<->a83(r143)@125:shuffle
  cp10:a15(r135)<->a83(r143)@125:shuffle
  cp11:a81(r147)<->a82(r225)@125:shuffle
  cp12:a13(r146)<->a88(r221)@125:shuffle
  cp13:a85(r222)<->a88(r221)@125:shuffle
  cp14:a86(r219)<->a87(r220)@125:shuffle
  cp15:a84(r223)<->a86(r219)@125:shuffle
  cp16:a84(r223)<->a85(r222)@125:shuffle
  cp17:a13(r146)<->a94(r216)@125:shuffle
  cp18:a91(r217)<->a94(r216)@125:shuffle
  cp19:a92(r214)<->a93(r215)@125:shuffle
  cp20:a90(r218)<->a92(r214)@125:shuffle
  cp21:a90(r218)<->a91(r217)@125:shuffle
  cp22:a18(r211)<->a19(r210)@125:shuffle
  cp23:a24(r164)<->a26(r202)@125:shuffle
  cp24:a25(r172)<->a30(r198)@125:shuffle
  cp25:a24(r164)<->a29(r199)@125:shuffle
  cp26:a28(r200)<->a30(r198)@125:shuffle
  cp27:a28(r200)<->a29(r199)@125:shuffle
  cp28:a45(r176)<->a46(r177)@125:shuffle
  cp29:a12(r166)<->a45(r176)@125:shuffle
  regions=6, blocks=76, points=243
    allocnos=134, copies=30, conflicts=2, ranges=157

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 75 74 73 72 71 70 68 67 64 56 32 69 66 65 63 62 61 60 59 58 57 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 8 10 9 7 6 5 4 3 2
    all: 0r163 1r175 2r266 3r265 4r264 5r263 6r262 7r261 8r260 9r275 10r274 11r165 12r166 13r146 14r152 15r135 16r170 17r169 18r211 19r210 20r206 21r168 22r205 23r204 24r164 25r172 26r202 27r201 28r200 29r199 30r198 31r196 32r195 33r194 34r193 35r157 36r190 37r158 38r160 39r161 40r162 41r186 42r137 43r182 44r277 45r176 46r177 55r259 56r167 57r257 58r254 59r255 60r153 61r139 62r247 63r134 64r244 65r243 66r150 67r242 68r138 69r151 70r272 71r271 72r142 73r235 74r233 75r230 76r229 77r148 78r149 79r140 80r136 81r147 82r225 83r143 84r223 85r222 86r219 87r220 88r221 89r141 90r218 91r217 92r214 93r215 94r216 103r252 113r238 123r228 132r184 133r183
    modified regnos: 134 135 136 137 138 139 140 141 142 143 146 147 148 149 150 151 152 153 157 158 160 161 162 163 164 165 166 167 168 169 170 172 175 176 177 182 183 184 186 190 193 194 195 196 198 199 200 201 202 204 205 206 210 211 214 215 216 217 218 219 220 221 222 223 225 228 229 230 233 235 238 242 243 244 247 252 254 255 257 259 260 261 262 263 264 265 266 271 272 274 275 277
    border:
    Pressure: GENERAL_REGS=11
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 4 regs less
    Reg 266 of GENERAL_REGS has 1 regs less
    Reg 265 of GENERAL_REGS has 1 regs less
    Reg 264 of GENERAL_REGS has 1 regs less
    Reg 263 of GENERAL_REGS has 1 regs less
    Reg 262 of GENERAL_REGS has 1 regs less
    Reg 261 of GENERAL_REGS has 1 regs less
    Reg 260 of GENERAL_REGS has 1 regs less
    Reg 275 of GENERAL_REGS has 2 regs less
    Reg 274 of GENERAL_REGS has 2 regs less
    Reg 165 of GENERAL_REGS has 4 regs less
    Reg 166 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 2 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 211 of GENERAL_REGS has 1 regs less
    Reg 210 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 205 of GENERAL_REGS has 1 regs less
    Reg 204 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 3 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 202 of GENERAL_REGS has 1 regs less
    Reg 201 of GENERAL_REGS has 1 regs less
    Reg 200 of GENERAL_REGS has 1 regs less
    Reg 199 of GENERAL_REGS has 1 regs less
    Reg 198 of GENERAL_REGS has 1 regs less
    Reg 196 of GENERAL_REGS has 1 regs less
    Reg 195 of GENERAL_REGS has 1 regs less
    Reg 194 of GENERAL_REGS has 1 regs less
    Reg 193 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 4 regs less
    Reg 190 of GENERAL_REGS has 4 regs less
    Reg 158 of GENERAL_REGS has 4 regs less
    Reg 186 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 259 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 257 of GENERAL_REGS has 1 regs less
    Reg 254 of GENERAL_REGS has 2 regs less
    Reg 255 of GENERAL_REGS has 2 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 247 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 244 of GENERAL_REGS has 1 regs less
    Reg 243 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 242 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 272 of GENERAL_REGS has 1 regs less
    Reg 271 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 235 of GENERAL_REGS has 1 regs less
    Reg 233 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 229 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 225 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 223 of GENERAL_REGS has 1 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 219 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 221 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 218 of GENERAL_REGS has 1 regs less
    Reg 217 of GENERAL_REGS has 1 regs less
    Reg 214 of GENERAL_REGS has 1 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 252 of GENERAL_REGS has 1 regs less
    Reg 238 of GENERAL_REGS has 1 regs less
    Reg 228 of GENERAL_REGS has 1 regs less
      Pushing a133(r183,l0)
      Pushing a132(r184,l0)
      Pushing a44(r277,l0)
      Pushing a43(r182,l0)
      Pushing a40(r162,l0)
      Pushing a39(r161,l0)
      Pushing a38(r160,l0)
      Pushing a123(r228,l0)
      Pushing a113(r238,l0)
      Pushing a103(r252,l0)
      Pushing a94(r216,l0)
      Pushing a93(r215,l0)
      Pushing a92(r214,l0)
      Pushing a91(r217,l0)
      Pushing a90(r218,l0)
      Pushing a89(r141,l0)
      Pushing a88(r221,l0)
      Pushing a87(r220,l0)
      Pushing a86(r219,l0)
      Pushing a85(r222,l0)
      Pushing a84(r223,l0)
      Pushing a78(r149,l0)
      Pushing a76(r229,l0)
      Pushing a75(r230,l0)
      Pushing a74(r233,l0)
      Pushing a73(r235,l0)
      Pushing a71(r271,l0)
      Pushing a70(r272,l0)
      Pushing a67(r242,l0)
      Pushing a65(r243,l0)
      Pushing a64(r244,l0)
      Pushing a62(r247,l0)
      Pushing a57(r257,l0)
      Pushing a55(r259,l0)
      Pushing a46(r177,l0)
      Pushing a45(r176,l0)
      Pushing a34(r193,l0)
      Pushing a33(r194,l0)
      Pushing a32(r195,l0)
      Pushing a31(r196,l0)
      Pushing a30(r198,l0)
      Pushing a29(r199,l0)
      Pushing a28(r200,l0)
      Pushing a27(r201,l0)
      Pushing a26(r202,l0)
      Pushing a23(r204,l0)
      Pushing a22(r205,l0)
      Pushing a20(r206,l0)
      Pushing a19(r210,l0)
      Pushing a18(r211,l0)
      Pushing a8(r260,l0)
      Pushing a7(r261,l0)
      Pushing a6(r262,l0)
      Pushing a4(r264,l0)
      Pushing a3(r265,l0)
      Pushing a2(r266,l0)
      Pushing a82(r225,l0)
      Pushing a66(r150,l0)
      Pushing a56(r167,l0)
      Pushing a21(r168,l0)
      Pushing a17(r169,l0)
      Pushing a5(r263,l0)
      Pushing a79(r140,l0)
      Pushing a77(r148,l0)
      Pushing a72(r142,l0)
      Pushing a61(r139,l0)
      Pushing a60(r153,l0)
      Pushing a15(r135,l0)
      Pushing a81(r147,l0)
      Pushing a69(r151,l0)
      Pushing a25(r172,l0)
      Pushing a68(r138,l0)
      Pushing a14(r152,l0)
      Pushing a0(r163,l0)
      Pushing a83(r143,l0)
      Pushing a80(r136,l0)
      Pushing a63(r134,l0)
      Pushing a59(r255,l0)
      Pushing a58(r254,l0)
      Pushing a41(r186,l0)
      Pushing a9(r275,l0)
      Pushing a16(r170,l0)
      Pushing a42(r137,l0)
      Pushing a10(r274,l0)
      Pushing a13(r146,l0)
      Pushing a24(r164,l0)
      Pushing a35(r157,l0)
      Pushing a11(r165,l0)
      Pushing a36(r190,l0)
      Pushing a12(r166,l0)
      Pushing a1(r175,l0)
      Pushing a37(r158,l0)
      Popping a37(r158,l0)  -- assign reg 4
      Popping a1(r175,l0)  -- assign reg 5
      Popping a12(r166,l0)  -- assign reg 6
      Popping a36(r190,l0)  -- assign reg 7
      Popping a11(r165,l0)  -- assign reg 8
      Popping a35(r157,l0)  -- assign reg 10
      Popping a24(r164,l0)  -- assign reg 9
      Popping a13(r146,l0)  -- assign reg 1
      Popping a10(r274,l0)  -- assign reg 4
      Popping a42(r137,l0)  -- assign reg 9
      Popping a16(r170,l0)  -- assign reg 2
      Popping a9(r275,l0)  -- assign reg 7
      Popping a41(r186,l0)  -- assign reg 2
      Popping a58(r254,l0)  -- assign reg 3
      Popping a59(r255,l0)  -- assign reg 3
      Popping a63(r134,l0)  -- assign reg 3
      Popping a80(r136,l0)  -- assign reg 10
      Popping a83(r143,l0)  -- assign reg 9
      Popping a0(r163,l0)  -- assign reg 0
      Popping a14(r152,l0)  -- assign reg 1
      Popping a68(r138,l0)  -- assign reg 3
      Popping a25(r172,l0)  -- assign reg 1
      Popping a69(r151,l0)  -- assign reg 2
      Popping a81(r147,l0)  -- assign reg 3
      Popping a15(r135,l0)  -- assign reg 1
      Popping a60(r153,l0)  -- assign reg 3
      Popping a61(r139,l0)  -- assign reg 2
      Popping a72(r142,l0)  -- assign reg 3
      Popping a77(r148,l0)  -- assign reg 10
      Popping a79(r140,l0)  -- assign reg 2
      Popping a5(r263,l0)  -- assign reg 3
      Popping a17(r169,l0)  -- assign reg 1
      Popping a21(r168,l0)  -- assign reg 3
      Popping a56(r167,l0)  -- assign reg 3
      Popping a66(r150,l0)  -- assign reg 2
      Popping a82(r225,l0)  -- assign reg 3
      Popping a2(r266,l0)  -- assign reg 2
      Popping a3(r265,l0)  -- assign reg 1
      Popping a4(r264,l0)  -- assign reg 12
      Popping a6(r262,l0)  -- assign reg 2
      Popping a7(r261,l0)  -- assign reg 3
      Popping a8(r260,l0)  -- assign reg 3
      Popping a18(r211,l0)  -- assign reg 3
      Popping a19(r210,l0)  -- assign reg 3
      Popping a20(r206,l0)  -- assign reg 3
      Popping a22(r205,l0)  -- assign reg 3
      Popping a23(r204,l0)  -- assign reg 3
      Popping a26(r202,l0)  -- assign reg 9
      Popping a27(r201,l0)  -- assign reg 3
      Popping a28(r200,l0)  -- assign reg 1
      Popping a29(r199,l0)  -- assign reg 9
      Popping a30(r198,l0)  -- assign reg 1
      Popping a31(r196,l0)  -- assign reg 3
      Popping a32(r195,l0)  -- assign reg 3
      Popping a33(r194,l0)  -- assign reg 2
      Popping a34(r193,l0)  -- assign reg 1
      Popping a45(r176,l0)  -- assign reg 6
      Popping a46(r177,l0)  -- assign reg 6
      Popping a55(r259,l0)  -- assign reg 3
      Popping a57(r257,l0)  -- assign reg 3
      Popping a62(r247,l0)  -- assign reg 2
      Popping a64(r244,l0)  -- assign reg 3
      Popping a65(r243,l0)  -- assign reg 3
      Popping a67(r242,l0)  -- assign reg 1
      Popping a70(r272,l0)  -- assign reg 0
      Popping a71(r271,l0)  -- assign reg 0
      Popping a73(r235,l0)  -- assign reg 3
      Popping a74(r233,l0)  -- assign reg 1
      Popping a75(r230,l0)  -- assign reg 1
      Popping a76(r229,l0)  -- assign reg 3
      Popping a78(r149,l0)  -- assign reg 1
      Popping a84(r223,l0)  -- assign reg 1
      Popping a85(r222,l0)  -- assign reg 1
      Popping a86(r219,l0)  -- assign reg 3
      Popping a87(r220,l0)  -- assign reg 3
      Popping a88(r221,l0)  -- assign reg 1
      Popping a89(r141,l0)  -- assign reg 3
      Popping a90(r218,l0)  -- assign reg 1
      Popping a91(r217,l0)  -- assign reg 1
      Popping a92(r214,l0)  -- assign reg 3
      Popping a93(r215,l0)  -- assign reg 3
      Popping a94(r216,l0)  -- assign reg 1
      Popping a103(r252,l0)  -- assign reg 0
      Popping a113(r238,l0)  -- assign reg 12
      Popping a123(r228,l0)  -- assign reg 0
      Popping a38(r160,l0)  -- assign reg 3
      Popping a39(r161,l0)  -- assign reg 3
      Popping a40(r162,l0)  -- assign reg 2
      Popping a43(r182,l0)  -- assign reg 3
      Popping a44(r277,l0)  -- assign reg 2
      Popping a132(r184,l0)  -- assign reg 3
      Popping a133(r183,l0)  -- assign reg 3
Disposition:
   63:r134 l0     3   15:r135 l0     1   80:r136 l0    10   42:r137 l0     9
   68:r138 l0     3   61:r139 l0     2   79:r140 l0     2   89:r141 l0     3
   72:r142 l0     3   83:r143 l0     9   13:r146 l0     1   81:r147 l0     3
   77:r148 l0    10   78:r149 l0     1   66:r150 l0     2   69:r151 l0     2
   14:r152 l0     1   60:r153 l0     3   35:r157 l0    10   37:r158 l0     4
   38:r160 l0     3   39:r161 l0     3   40:r162 l0     2    0:r163 l0     0
   24:r164 l0     9   11:r165 l0     8   12:r166 l0     6   56:r167 l0     3
   21:r168 l0     3   17:r169 l0     1   16:r170 l0     2   25:r172 l0     1
    1:r175 l0     5   45:r176 l0     6   46:r177 l0     6   43:r182 l0     3
  133:r183 l0     3  132:r184 l0     3   41:r186 l0     2   36:r190 l0     7
   34:r193 l0     1   33:r194 l0     2   32:r195 l0     3   31:r196 l0     3
   30:r198 l0     1   29:r199 l0     9   28:r200 l0     1   27:r201 l0     3
   26:r202 l0     9   23:r204 l0     3   22:r205 l0     3   20:r206 l0     3
   19:r210 l0     3   18:r211 l0     3   92:r214 l0     3   93:r215 l0     3
   94:r216 l0     1   91:r217 l0     1   90:r218 l0     1   86:r219 l0     3
   87:r220 l0     3   88:r221 l0     1   85:r222 l0     1   84:r223 l0     1
   82:r225 l0     3  123:r228 l0     0   76:r229 l0     3   75:r230 l0     1
   74:r233 l0     1   73:r235 l0     3  113:r238 l0    12   67:r242 l0     1
   65:r243 l0     3   64:r244 l0     3   62:r247 l0     2  103:r252 l0     0
   58:r254 l0     3   59:r255 l0     3   57:r257 l0     3   55:r259 l0     3
    8:r260 l0     3    7:r261 l0     3    6:r262 l0     2    5:r263 l0     3
    4:r264 l0    12    3:r265 l0     1    2:r266 l0     2   71:r271 l0     0
   70:r272 l0     0   10:r274 l0     4    9:r275 l0     7   44:r277 l0     2
New iteration of spill/restore move
+++Costs: overall -24500, reg -24500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 13, dead_or_set: 0, 175
insn=7, live_throughout: 13, 175, dead_or_set: 165
insn=12, live_throughout: 13, 165, 175, dead_or_set: 0
insn=8, live_throughout: 0, 13, 165, 175, dead_or_set: 177
insn=9, live_throughout: 0, 13, 165, 175, dead_or_set: 176, 177
insn=545, live_throughout: 0, 13, 165, 175, dead_or_set: 166, 176
insn=13, live_throughout: 13, 165, 166, 175, dead_or_set: 0, 14
insn=546, live_throughout: 0, 13, 14, 165, 175, dead_or_set: 166
insn=15, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 0
insn=16, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=18, live_throughout: 13, 165, 166, 175, dead_or_set: 137
insn=19, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0
insn=20, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0, 14
insn=22, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0
insn=23, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 
insn=27, live_throughout: 13, 165, 166, 175, dead_or_set: 0, 137
insn=28, live_throughout: 0, 13, 165, 166, 175, dead_or_set: 1
insn=29, live_throughout: 0, 1, 13, 165, 166, 175, dead_or_set: 2
insn=30, live_throughout: 13, 165, 166, 175, dead_or_set: 0, 1, 2, 14
insn=31, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 0, 164
insn=495, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 
insn=34, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 
insn=37, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0
insn=38, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0, 14
insn=39, live_throughout: 13, 137, 165, 166, 175, dead_or_set: 0, 157
insn=40, live_throughout: 13, 137, 157, 165, 166, 175, dead_or_set: 182
insn=82, live_throughout: 13, 137, 157, 165, 166, 175, 182, dead_or_set: 277
insn=41, live_throughout: 13, 137, 157, 165, 166, 175, 277, dead_or_set: 158, 182
insn=497, live_throughout: 13, 137, 157, 158, 165, 166, 175, 277, dead_or_set: 
insn=81, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 
insn=45, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 183
insn=46, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 183
insn=47, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 
insn=49, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 184
insn=50, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 184
insn=51, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 
insn=53, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, dead_or_set: 186
insn=55, live_throughout: 13, 157, 158, 165, 166, 175, 186, 190, dead_or_set: 0, 137
insn=56, live_throughout: 0, 13, 157, 158, 165, 166, 175, 186, 190, dead_or_set: 1
insn=57, live_throughout: 0, 1, 13, 157, 158, 165, 166, 175, 190, dead_or_set: 2, 186
insn=58, live_throughout: 13, 157, 158, 165, 166, 175, 190, dead_or_set: 0, 1, 2, 14
insn=59, live_throughout: 13, 157, 158, 165, 166, 175, 190, dead_or_set: 0, 164
insn=60, live_throughout: 13, 157, 158, 164, 165, 166, 175, 190, dead_or_set: 161
insn=61, live_throughout: 13, 157, 158, 161, 164, 165, 166, 175, 190, dead_or_set: 162
insn=62, live_throughout: 13, 157, 158, 161, 162, 164, 165, 166, 175, 190, dead_or_set: 
insn=63, live_throughout: 13, 157, 158, 164, 165, 166, 175, 190, dead_or_set: 161, 162
insn=65, live_throughout: 13, 157, 158, 164, 165, 166, 175, 190, dead_or_set: 160
insn=66, live_throughout: 13, 157, 158, 160, 164, 165, 166, 175, 190, dead_or_set: 
insn=67, live_throughout: 13, 157, 158, 164, 165, 166, 175, 190, dead_or_set: 160
insn=69, live_throughout: 13, 157, 158, 164, 165, 166, 175, 190, dead_or_set: 
insn=71, live_throughout: 13, 157, 164, 165, 166, 175, dead_or_set: 158, 190
insn=499, live_throughout: 13, 157, 164, 165, 166, 175, dead_or_set: 
insn=74, live_throughout: 13, 137, 157, 158, 165, 166, 175, 277, dead_or_set: 
insn=76, live_throughout: 13, 137, 157, 165, 166, 175, 277, dead_or_set: 158
insn=78, live_throughout: 13, 137, 157, 158, 165, 166, 175, 277, dead_or_set: 
insn=83, live_throughout: 13, 137, 157, 158, 165, 166, 175, 277, dead_or_set: 
insn=494, live_throughout: 13, 24, 137, 157, 158, 165, 166, 175, 277, dead_or_set: 190
insn=84, live_throughout: 13, 137, 157, 158, 165, 166, 175, 190, 277, dead_or_set: 
insn=86, live_throughout: 13, 157, 165, 166, 175, dead_or_set: 164
insn=87, live_throughout: 13, 157, 164, 165, 166, 175, dead_or_set: 
insn=91, live_throughout: 13, 164, 165, 166, 175, dead_or_set: 1, 157
insn=90, live_throughout: 1, 13, 164, 165, 166, 175, dead_or_set: 0
insn=92, live_throughout: 13, 164, 165, 166, 175, dead_or_set: 0, 1, 14
insn=93, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 
insn=95, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 
insn=96, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 
insn=100, live_throughout: 13, dead_or_set: 1, 175
insn=99, live_throughout: 1, 13, dead_or_set: 0
insn=101, live_throughout: 13, dead_or_set: 0, 1, 14
insn=102, live_throughout: 13, 14, dead_or_set: 163
insn=501, live_throughout: 13, 14, 163, dead_or_set: 
insn=105, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 
insn=107, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 193
insn=109, live_throughout: 13, 14, 164, 165, 166, 175, 193, dead_or_set: 194
insn=111, live_throughout: 13, 14, 164, 165, 166, 175, 193, 194, dead_or_set: 195
insn=108, live_throughout: 13, 14, 164, 165, 166, 175, 194, 195, dead_or_set: 193
insn=110, live_throughout: 13, 14, 164, 165, 166, 175, 195, dead_or_set: 194
insn=112, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 195
insn=550, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 196
insn=114, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 196
insn=115, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 172
insn=116, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=117, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=120, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=121, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=124, live_throughout: 13, 14, 164, 165, 166, 175, dead_or_set: 172, 198
insn=125, live_throughout: 13, 14, 165, 166, 175, 198, dead_or_set: 164, 199
insn=126, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 198, 199, 200
insn=127, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 200
insn=503, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=130, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=132, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 201
insn=133, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 201
insn=134, live_throughout: 13, 14, 164, 165, 166, 172, 175, dead_or_set: 
insn=136, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 164, 202
insn=137, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 202
insn=505, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=140, live_throughout: 13, 164, 172, dead_or_set: 
insn=144, live_throughout: 13, 164, dead_or_set: 1, 172
insn=145, live_throughout: 1, 13, dead_or_set: 2, 164
insn=143, live_throughout: 1, 2, 13, dead_or_set: 0
insn=146, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=147, live_throughout: 13, 14, dead_or_set: 163
insn=507, live_throughout: 13, 14, 163, dead_or_set: 
insn=150, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=152, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 170
insn=153, live_throughout: 13, 14, 165, 166, 170, 175, dead_or_set: 169
insn=154, live_throughout: 13, 14, 165, 166, 169, 170, 175, dead_or_set: 168
insn=155, live_throughout: 13, 14, 165, 166, 168, 169, 170, 175, dead_or_set: 
insn=156, live_throughout: 13, 14, 165, 166, 168, 169, 170, 175, dead_or_set: 
insn=158, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 204
insn=159, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 204
insn=160, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 205
insn=161, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 205
insn=509, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=164, live_throughout: 13, 14, 165, 166, 168, 169, 170, 175, dead_or_set: 
insn=166, live_throughout: 13, 14, 165, 166, 169, 170, 175, dead_or_set: 168
insn=167, live_throughout: 13, 14, 165, 166, 169, 170, 175, dead_or_set: 
insn=169, live_throughout: 13, 14, 165, 166, 170, 175, dead_or_set: 206
insn=170, live_throughout: 13, 14, 165, 166, 170, 175, dead_or_set: 206
insn=174, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 170, 210
insn=175, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 210, 211
insn=176, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 211
insn=511, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=179, live_throughout: 13, 169, 170, dead_or_set: 
insn=183, live_throughout: 13, 170, dead_or_set: 1, 169
insn=184, live_throughout: 1, 13, dead_or_set: 2, 170
insn=182, live_throughout: 1, 2, 13, dead_or_set: 0
insn=185, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=186, live_throughout: 13, 14, dead_or_set: 163
insn=513, live_throughout: 13, 14, 163, dead_or_set: 
insn=429, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 
insn=191, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0
insn=192, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0, 14
insn=193, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 0, 146
insn=195, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 141
insn=196, live_throughout: 13, 14, 141, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=200, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 146, 216
insn=201, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 216, 217
insn=549, live_throughout: 13, 14, 165, 166, 175, 217, 274, 275, dead_or_set: 215
insn=199, live_throughout: 13, 14, 165, 166, 175, 217, 274, 275, dead_or_set: 214, 215
insn=202, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 214, 217, 218
insn=203, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 218
insn=515, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=206, live_throughout: 13, 14, 141, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=208, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 141
insn=209, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=213, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 146, 221
insn=214, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 221, 222
insn=548, live_throughout: 13, 14, 165, 166, 175, 222, 274, 275, dead_or_set: 220
insn=212, live_throughout: 13, 14, 165, 166, 175, 222, 274, 275, dead_or_set: 219, 220
insn=215, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 219, 222, 223
insn=216, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 223
insn=517, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=219, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=221, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 142
insn=222, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=223, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=228, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 0
insn=226, live_throughout: 0, 13, 165, 166, 175, 274, 275, dead_or_set: 143, 146
insn=225, live_throughout: 0, 13, 143, 165, 166, 175, 274, 275, dead_or_set: 136
insn=229, live_throughout: 13, 136, 143, 165, 166, 175, 274, 275, dead_or_set: 0, 14
insn=231, live_throughout: 13, 14, 136, 165, 166, 175, 274, 275, dead_or_set: 0, 135, 143
insn=232, live_throughout: 13, 14, 135, 136, 165, 166, 175, 274, 275, dead_or_set: 225
insn=234, live_throughout: 13, 14, 135, 136, 165, 166, 175, 274, 275, dead_or_set: 147, 225
insn=235, live_throughout: 13, 14, 135, 136, 147, 165, 166, 175, 274, 275, dead_or_set: 
insn=239, live_throughout: 13, dead_or_set: 1, 135
insn=238, live_throughout: 1, 13, dead_or_set: 0
insn=240, live_throughout: 13, dead_or_set: 0, 1, 14
insn=241, live_throughout: 13, 14, dead_or_set: 163
insn=519, live_throughout: 13, 14, 163, dead_or_set: 
insn=244, live_throughout: 13, 14, 135, 136, 147, 165, 166, 175, 274, 275, dead_or_set: 
insn=246, live_throughout: 13, 14, 135, 147, 165, 166, 175, 274, 275, dead_or_set: 136, 148
insn=247, live_throughout: 13, 14, 147, 148, 165, 166, 175, 274, 275, dead_or_set: 135, 149
insn=248, live_throughout: 13, 14, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 140
insn=261, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 
insn=251, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 
insn=252, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 
insn=254, live_throughout: 13, 14, 140, 147, 149, 165, 166, 175, 274, 275, dead_or_set: 148, 228
insn=255, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 228
insn=257, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 
insn=262, live_throughout: 13, 14, 140, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 147
insn=260, live_throughout: 13, 14, 24, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 140
insn=263, live_throughout: 13, 14, 140, 147, 148, 149, 165, 166, 175, 274, 275, dead_or_set: 
insn=265, live_throughout: 13, 14, 148, 165, 166, 175, 274, 275, dead_or_set: 149
insn=266, live_throughout: 13, 14, 148, 165, 166, 175, 274, 275, dead_or_set: 
insn=268, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 148
insn=521, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=271, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=273, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=274, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=276, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 229
insn=277, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 229
insn=278, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=280, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 146, 230
insn=283, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 230, 233
insn=285, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 233, 235
insn=286, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 235
insn=523, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=289, live_throughout: 13, 14, 142, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=291, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 142
insn=292, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=309, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 271
insn=294, live_throughout: 13, 14, 146, 165, 166, 175, 271, 274, 275, dead_or_set: 138
insn=310, live_throughout: 13, 14, 138, 146, 165, 166, 175, 274, 275, dead_or_set: 271, 272
insn=492, live_throughout: 13, 14, 138, 146, 165, 166, 175, 272, 274, 275, dead_or_set: 151
insn=525, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 
insn=308, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 
insn=301, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 238
insn=302, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 238
insn=303, live_throughout: 13, 14, 138, 146, 165, 166, 175, 272, 274, 275, dead_or_set: 151
insn=304, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 
insn=311, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 
insn=307, live_throughout: 13, 14, 24, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 138
insn=312, live_throughout: 13, 14, 138, 146, 151, 165, 166, 175, 272, 274, 275, dead_or_set: 
insn=316, live_throughout: 13, 14, 138, 165, 166, 175, 274, 275, dead_or_set: 146
insn=314, live_throughout: 13, 14, 24, 138, 165, 166, 175, 274, 275, dead_or_set: 150
insn=317, live_throughout: 13, 14, 138, 150, 165, 166, 175, 274, 275, dead_or_set: 
insn=319, live_throughout: 13, 14, 138, 165, 166, 175, 274, 275, dead_or_set: 242
insn=321, live_throughout: 13, 14, 165, 166, 175, 242, 274, 275, dead_or_set: 138, 150
insn=320, live_throughout: 13, 14, 150, 165, 166, 175, 274, 275, dead_or_set: 242
insn=322, live_throughout: 13, 14, 150, 165, 166, 175, 274, 275, dead_or_set: 
insn=324, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 150
insn=527, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=327, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=329, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=330, live_throughout: 13, 14, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=332, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 243
insn=333, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 243
insn=334, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=336, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 244
insn=337, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 244
insn=338, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=341, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=529, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=344, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=346, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=347, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=350, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0
insn=351, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0, 14
insn=353, live_throughout: 0, 13, 14, 165, 166, 175, 274, 275, dead_or_set: 134
insn=354, live_throughout: 13, 14, 134, 165, 166, 175, 274, 275, dead_or_set: 0, 152
insn=355, live_throughout: 13, 14, 134, 152, 165, 166, 175, 274, 275, dead_or_set: 
insn=358, live_throughout: 13, 14, 134, 152, 165, 166, 175, 274, 275, dead_or_set: 247
insn=359, live_throughout: 13, 14, 134, 152, 165, 166, 175, 247, 274, 275, dead_or_set: 
insn=360, live_throughout: 13, 152, dead_or_set: 
insn=365, live_throughout: 13, dead_or_set: 1, 152
insn=364, live_throughout: 1, 13, dead_or_set: 0
insn=366, live_throughout: 13, dead_or_set: 0, 1, 14
insn=367, live_throughout: 13, 14, dead_or_set: 163
insn=531, live_throughout: 13, 14, 163, dead_or_set: 
insn=370, live_throughout: 13, 14, 134, 152, 165, 166, 175, 247, 274, 275, dead_or_set: 
insn=372, live_throughout: 13, 14, 152, 165, 166, 175, 247, 274, 275, dead_or_set: 134, 153
insn=373, live_throughout: 13, 14, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 139, 247
insn=387, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 
insn=376, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 
insn=377, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 
insn=380, live_throughout: 13, 14, 139, 152, 165, 166, 175, 274, 275, dead_or_set: 153, 252
insn=381, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 252
insn=383, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 
insn=388, live_throughout: 13, 14, 139, 153, 165, 166, 175, 274, 275, dead_or_set: 152
insn=386, live_throughout: 13, 14, 24, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 139
insn=389, live_throughout: 13, 14, 139, 152, 153, 165, 166, 175, 274, 275, dead_or_set: 
insn=391, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 153
insn=533, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=394, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=396, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=397, live_throughout: 13, 146, 165, 166, 175, 274, 275, dead_or_set: 
insn=400, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0
insn=401, live_throughout: 13, 165, 166, 175, 274, 275, dead_or_set: 0, 14
insn=403, live_throughout: 0, 13, 14, 165, 166, 175, 274, 275, dead_or_set: 255
insn=404, live_throughout: 0, 13, 14, 165, 166, 175, 274, 275, dead_or_set: 254, 255
insn=406, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 0, 254, 257
insn=407, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 257
insn=535, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=410, live_throughout: 13, 146, dead_or_set: 
insn=414, live_throughout: 13, dead_or_set: 1, 146
insn=413, live_throughout: 1, 13, dead_or_set: 0
insn=415, live_throughout: 13, dead_or_set: 0, 1, 14
insn=416, live_throughout: 13, 14, dead_or_set: 163
insn=537, live_throughout: 13, 14, 163, dead_or_set: 
insn=419, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=421, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 167
insn=422, live_throughout: 13, 14, 165, 166, 167, 175, 274, 275, dead_or_set: 
insn=423, live_throughout: 13, 14, 165, 166, 167, 175, 274, 275, dead_or_set: 
insn=425, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 167
insn=426, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=541, live_throughout: 13, 14, dead_or_set: 
insn=427, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 
insn=190, live_throughout: 13, 14, 165, 166, 175, dead_or_set: 274
insn=340, live_throughout: 13, 14, 165, 166, 175, 274, dead_or_set: 275
insn=539, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=430, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 259
insn=431, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 259
insn=432, live_throughout: 13, 14, 165, 166, 175, 274, 275, dead_or_set: 
insn=434, live_throughout: 13, 14, 175, dead_or_set: 260
insn=435, live_throughout: 13, 14, 175, dead_or_set: 260
insn=436, live_throughout: 13, 14, 175, dead_or_set: 
insn=438, live_throughout: 13, 14, 175, dead_or_set: 261
insn=439, live_throughout: 13, 14, 175, dead_or_set: 261
insn=440, live_throughout: 13, 14, 175, dead_or_set: 
insn=442, live_throughout: 13, 14, 175, dead_or_set: 262
insn=443, live_throughout: 13, 14, 175, 262, dead_or_set: 263
insn=444, live_throughout: 13, 14, 175, 263, dead_or_set: 262
insn=445, live_throughout: 13, 14, 175, 263, dead_or_set: 
insn=447, live_throughout: 13, 14, 175, 263, dead_or_set: 264
insn=455, live_throughout: 13, 14, 175, 263, 264, dead_or_set: 163
insn=449, live_throughout: 13, 14, 163, 175, 263, 264, dead_or_set: 265
insn=451, live_throughout: 13, 14, 163, 175, 263, 264, 265, dead_or_set: 266
insn=454, live_throughout: 13, 14, 163, 175, 264, 265, 266, dead_or_set: 263
insn=448, live_throughout: 13, 14, 163, 175, 265, 266, dead_or_set: 264
insn=450, live_throughout: 13, 14, 163, 175, 266, dead_or_set: 265
insn=452, live_throughout: 13, 14, 163, dead_or_set: 175, 266
insn=543, live_throughout: 13, 14, 163, dead_or_set: 
insn=458, live_throughout: 13, 14, dead_or_set: 
insn=460, live_throughout: 13, 14, dead_or_set: 163
insn=461, live_throughout: 13, 14, 163, dead_or_set: 
insn=467, live_throughout: 13, 14, dead_or_set: 0, 163
insn=473, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 182: (insn_list:REG_DEP_TRUE 40 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 494 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 107 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 550 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 127 (nil))
init_insns for 202: (insn_list:REG_DEP_TRUE 137 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 158 (nil))
init_insns for 205: (insn_list:REG_DEP_TRUE 160 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 211: (insn_list:REG_DEP_TRUE 176 (nil))
init_insns for 215: (insn_list:REG_DEP_TRUE 549 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 203 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 548 (nil))
init_insns for 223: (insn_list:REG_DEP_TRUE 216 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 255 (nil))
init_insns for 235: (insn_list:REG_DEP_TRUE 286 (nil))
init_insns for 238: (insn_list:REG_DEP_TRUE 301 (nil))
init_insns for 242: (insn_list:REG_DEP_TRUE 320 (nil))
init_insns for 243: (insn_list:REG_DEP_TRUE 332 (nil))
init_insns for 244: (insn_list:REG_DEP_TRUE 336 (nil))
init_insns for 252: (insn_list:REG_DEP_TRUE 381 (nil))
init_insns for 255: (insn_list:REG_DEP_TRUE 403 (nil))
init_insns for 257: (insn_list:REG_DEP_TRUE 407 (nil))
init_insns for 259: (insn_list:REG_DEP_TRUE 430 (nil))
init_insns for 260: (insn_list:REG_DEP_TRUE 434 (nil))
init_insns for 261: (insn_list:REG_DEP_TRUE 438 (nil))
init_insns for 262: (insn_list:REG_DEP_TRUE 442 (nil))
init_insns for 266: (insn_list:REG_DEP_TRUE 452 (nil))
init_insns for 274: (insn_list:REG_DEP_TRUE 190 (nil))
init_insns for 275: (insn_list:REG_DEP_TRUE 340 (nil))
init_insns for 277: (insn_list:REG_DEP_TRUE 82 (nil))
changing reg in insn 353
changing reg in insn 372
changing reg in insn 231
changing reg in insn 247
changing reg in insn 239
changing reg in insn 232
changing reg in insn 225
changing reg in insn 246
changing reg in insn 18
changing reg in insn 55
changing reg in insn 50
changing reg in insn 46
changing reg in insn 27
changing reg in insn 19
changing reg in insn 307
changing reg in insn 294
changing reg in insn 319
changing reg in insn 321
changing reg in insn 314
changing reg in insn 307
changing reg in insn 301
changing reg in insn 301
changing reg in insn 373
changing reg in insn 386
changing reg in insn 381
changing reg in insn 386
changing reg in insn 380
changing reg in insn 248
changing reg in insn 260
changing reg in insn 260
changing reg in insn 255
changing reg in insn 254
changing reg in insn 195
changing reg in insn 208
changing reg in insn 221
changing reg in insn 291
changing reg in insn 273
changing reg in insn 222
changing reg in insn 226
changing reg in insn 231
changing reg in insn 193
changing reg in insn 316
changing reg in insn 195
changing reg in insn 195
changing reg in insn 309
changing reg in insn 414
changing reg in insn 396
changing reg in insn 346
changing reg in insn 329
changing reg in insn 280
changing reg in insn 276
changing reg in insn 226
changing reg in insn 221
changing reg in insn 213
changing reg in insn 200
changing reg in insn 262
changing reg in insn 234
changing reg in insn 262
changing reg in insn 262
changing reg in insn 251
changing reg in insn 254
changing reg in insn 246
changing reg in insn 254
changing reg in insn 268
changing reg in insn 247
changing reg in insn 265
changing reg in insn 321
changing reg in insn 314
changing reg in insn 324
changing reg in insn 492
changing reg in insn 303
changing reg in insn 302
changing reg in insn 311
changing reg in insn 303
changing reg in insn 388
changing reg in insn 354
changing reg in insn 388
changing reg in insn 388
changing reg in insn 376
changing reg in insn 365
changing reg in insn 358
changing reg in insn 358
changing reg in insn 380
changing reg in insn 372
changing reg in insn 380
changing reg in insn 391
changing reg in insn 39
changing reg in insn 91
changing reg in insn 76
changing reg in insn 41
changing reg in insn 83
changing reg in insn 76
changing reg in insn 71
changing reg in insn 69
changing reg in insn 66
changing reg in insn 67
changing reg in insn 61
changing reg in insn 60
changing reg in insn 56
changing reg in insn 53
changing reg in insn 49
changing reg in insn 45
changing reg in insn 53
changing reg in insn 49
changing reg in insn 45
changing reg in insn 83
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 60
changing reg in insn 63
changing reg in insn 62
changing reg in insn 61
changing reg in insn 63
changing reg in insn 62
changing reg in insn 460
changing reg in insn 455
changing reg in insn 416
changing reg in insn 367
changing reg in insn 241
changing reg in insn 186
changing reg in insn 147
changing reg in insn 102
changing reg in insn 467
changing reg in insn 86
changing reg in insn 59
changing reg in insn 31
changing reg in insn 145
changing reg in insn 136
changing reg in insn 125
changing reg in insn 115
changing reg in insn 95
changing reg in insn 7
changing reg in insn 422
changing reg in insn 8
changing reg in insn 9
changing reg in insn 546
changing reg in insn 545
changing reg in insn 546
changing reg in insn 425
changing reg in insn 421
changing reg in insn 425
changing reg in insn 422
changing reg in insn 154
changing reg in insn 166
changing reg in insn 155
changing reg in insn 153
changing reg in insn 183
changing reg in insn 154
changing reg in insn 152
changing reg in insn 174
changing reg in insn 184
changing reg in insn 153
changing reg in insn 115
changing reg in insn 124
changing reg in insn 120
changing reg in insn 144
changing reg in insn 132
changing reg in insn 116
changing reg in insn 3
changing reg in insn 454
changing reg in insn 452
changing reg in insn 450
changing reg in insn 448
changing reg in insn 442
changing reg in insn 111
changing reg in insn 109
changing reg in insn 107
changing reg in insn 100
changing reg in insn 18
changing reg in insn 12
changing reg in insn 7
changing reg in insn 451
changing reg in insn 442
changing reg in insn 107
changing reg in insn 9
changing reg in insn 545
changing reg in insn 8
changing reg in insn 9
changing reg in insn 40
changing reg in insn 82
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 57
changing reg in insn 494
changing reg in insn 71
changing reg in insn 69
changing reg in insn 65
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 550
changing reg in insn 114
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 132
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 169
changing reg in insn 170
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 199
changing reg in insn 202
changing reg in insn 549
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 212
changing reg in insn 215
changing reg in insn 548
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 232
changing reg in insn 234
changing reg in insn 234
changing reg in insn 254
changing reg in insn 255
changing reg in insn 276
changing reg in insn 277
changing reg in insn 280
changing reg in insn 283
changing reg in insn 283
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 301
changing reg in insn 302
changing reg in insn 319
changing reg in insn 320
changing reg in insn 332
changing reg in insn 333
changing reg in insn 336
changing reg in insn 337
changing reg in insn 358
changing reg in insn 373
changing reg in insn 380
changing reg in insn 381
changing reg in insn 404
changing reg in insn 406
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 430
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 438
changing reg in insn 439
changing reg in insn 442
changing reg in insn 444
changing reg in insn 443
changing reg in insn 454
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 190
changing reg in insn 302
changing reg in insn 400
changing reg in insn 381
changing reg in insn 350
changing reg in insn 248
changing reg in insn 228
changing reg in insn 191
changing reg in insn 380
changing reg in insn 340
changing reg in insn 341
changing reg in insn 82
changing reg in insn 83
Spilling for insn 62.
Spilling for insn 63.
Spilling for insn 66.
Spilling for insn 67.
Spilling for insn 69.
Spilling for insn 71.
Spilling for insn 108.
Spilling for insn 110.
Spilling for insn 112.
Spilling for insn 114.
Spilling for insn 127.
Spilling for insn 137.
Spilling for insn 159.
Spilling for insn 161.
Spilling for insn 170.
Spilling for insn 176.
Spilling for insn 203.
Spilling for insn 216.
Spilling for insn 255.
Spilling for insn 268.
Spilling for insn 283.
Using reg 3 for reload 0
Spilling for insn 286.
Spilling for insn 302.
Spilling for insn 320.
Spilling for insn 324.
Spilling for insn 337.
Spilling for insn 341.
Spilling for insn 381.
Spilling for insn 391.
Spilling for insn 407.
Spilling for insn 439.
Spilling for insn 454.
Spilling for insn 448.
Spilling for insn 450.
Spilling for insn 452.

Reloads for insn # 62
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])

Reloads for insn # 63
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:161 D.15897 ] [161]) [0 <variable>.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:161 D.15897 ] [161]) [0 <variable>.next+0 S4 A32])

Reloads for insn # 66
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])

Reloads for insn # 67
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 69
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])

Reloads for insn # 71
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])

Reloads for insn # 108
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])

Reloads for insn # 110
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 112
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])

Reloads for insn # 114
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])

Reloads for insn # 127
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])

Reloads for insn # 137
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])

Reloads for insn # 159
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])

Reloads for insn # 161
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])

Reloads for insn # 170
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])

Reloads for insn # 176
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])

Reloads for insn # 203
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 216
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 255
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                                                        (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                                                        (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])

Reloads for insn # 268
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 283
Reload 0: reload_in (SI) = (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 80 [0x50]))
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 80 [0x50]))
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 286
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 302
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 4 r4 [274])) [0 ctrl.vrs S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 4 r4 [274])) [0 ctrl.vrs S4 A32])

Reloads for insn # 320
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])

Reloads for insn # 324
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 337
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])

Reloads for insn # 341
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])

Reloads for insn # 381
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                                                        (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                                                        (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])

Reloads for insn # 391
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 407
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])

Reloads for insn # 439
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])

Reloads for insn # 454
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])

Reloads for insn # 448
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])

Reloads for insn # 450
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])

Reloads for insn # 452
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                                                        (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
deleting insn with uid = 144.
deleting insn with uid = 183.
deleting insn with uid = 184.
deleting insn with uid = 239.
deleting insn with uid = 246.
deleting insn with uid = 372.
deleting insn with uid = 373.
deleting insn with uid = 414.
deleting insn with uid = 467.


try_optimize_cfg iteration 1

Edge 55->57 redirected to 58
Deleting block 57.
deleting insn with uid = 370.
deleting insn with uid = 371.
deleting block 57
Forwarding edge 66->67 to 74 failed.


try_optimize_cfg iteration 2

Forwarding edge 66->67 to 74 failed.


try_optimize_cfg iteration 1

Forwarding edge 66->67 to 74 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 401.
verify found no changes in insn with uid = 415.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 75 n_edges 110 count 187 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 75 n_edges 110 count 157 (  2.1)


unwind_frame

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={45d,33u} r1={42d,49u} r2={35d,21u,2d} r3={57d,53u,1d} r4={3d,19u,5d} r5={1d,12u,3d} r6={4d,4u} r7={2d,4u} r8={1d,2u,1d} r9={7d,13u} r10={3d,3u} r12={19d,2u} r13={1d,130u,9d} r14={17d,1u} r15={16d} r16={16d} r17={16d} r18={16d} r19={16d} r20={16d} r21={16d} r22={16d} r23={16d} r24={52d,36u} r25={13d} r27={16d} r28={16d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={16d} r37={16d} r38={16d} r39={16d} r40={16d} r41={16d} r42={16d} r43={16d} r44={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} r76={16d} r77={16d} r78={16d} r79={16d} r80={16d} r81={16d} r82={16d} r83={16d} r84={16d} r85={16d} r86={16d} r87={16d} r88={16d} r89={16d} r90={16d} r91={16d} r92={16d} r93={16d} r94={16d} r95={16d} r96={16d} r97={16d} r98={16d} r99={16d} r100={16d} r101={16d} r102={16d} r103={16d} r104={16d} r105={16d} r106={16d} r107={16d} r108={16d} r109={16d} r110={16d} r111={16d} r112={16d} r113={16d} r114={16d} r115={16d} r116={16d} r117={16d} r118={16d} r119={16d} r120={16d} r121={16d} r122={16d} r123={16d} r124={16d} r125={16d} r126={16d} r127={16d} 
;;    total ref usage 2465{2049d,382u,34e} in 273{257 regular + 16 call} insns.
(note 2 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 4 14 2 NOTE_INSN_DELETED)

(note 14 10 3 2 NOTE_INSN_DELETED)

(insn 3 14 7 2 arch/arm/kernel/unwind.c:275 (set (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
        (reg:SI 0 r0 [ frame ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 12 2 arch/arm/kernel/unwind.c:281 (set (reg/v:SI 8 r8 [orig:165 low ] [165])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 12 7 8 2 arch/arm/kernel/unwind.c:287 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 12 9 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [177])
        (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8128 [0x1fc0]))) 4 {*arm_addsi3} (nil))

(insn 9 8 545 2 arch/arm/kernel/unwind.c:282 (set (reg:SI 6 r6 [176])
        (plus:SI (reg:SI 6 r6 [177])
            (const_int 63 [0x3f]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 8 r8 [orig:165 low ] [165])
            (const_int 8191 [0x1fff]))
        (nil)))

(insn 545 9 13 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg:SI 6 r6 [176])
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(call_insn 13 545 546 2 arch/arm/kernel/unwind.c:287 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 546 13 15 2 arch/arm/kernel/unwind.c:282 (set (reg/v:SI 6 r6 [orig:166 high ] [166])
        (and:SI (reg/v:SI 6 r6 [orig:166 high ] [166])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 15 546 16 2 arch/arm/kernel/unwind.c:287 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 2 arch/arm/kernel/unwind.c:287 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 2 -> ( 74 3)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  74 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 17 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 21 17 18 3 NOTE_INSN_DELETED)

(insn 18 21 19 3 arch/arm/kernel/unwind.c:290 (set (reg:SI 9 r9 [orig:137 temp.525 ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 3 arch/arm/kernel/unwind.c:135 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 20 19 22 3 arch/arm/kernel/unwind.c:135 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("core_kernel_text") [flags 0x41] <function_decl 0x10a58180 core_kernel_text>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 22 20 23 3 arch/arm/kernel/unwind.c:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 3 arch/arm/kernel/unwind.c:135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%]  (fallthru)
(note 24 23 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 27 24 28 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 28 27 29 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__start_unwind_idx") [flags 0xc0] <var_decl 0x11041000 __start_unwind_idx>)
        (nil)))

(insn 29 28 30 4 arch/arm/kernel/unwind.c:137 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("__stop_unwind_idx") [flags 0xc0] <var_decl 0x11041060 __stop_unwind_idx>)
                (const_int -8 [0xfffffffffffffff8])))
        (nil)))

(call_insn 30 29 31 4 arch/arm/kernel/unwind.c:137 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 31 30 495 4 arch/arm/kernel/unwind.c:137 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 495 31 496 4 (set (pc)
        (label_ref 93)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 496 495 34)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
(code_label 34 496 35 5 46 "" [1 uses])

(note 35 34 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 38 5 arch/arm/kernel/unwind.c:143 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 38 37 39 5 arch/arm/kernel/unwind.c:143 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("_raw_spin_lock_irqsave") [flags 0x41] <function_decl 0x10ad9d00 _raw_spin_lock_irqsave>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 39 38 40 5 arch/arm/kernel/unwind.c:143 (set (reg/v:SI 10 sl [orig:157 flags ] [157])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 40 39 82 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 82 40 41 5 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 2 r2 [277])
        (reg/f:SI 3 r3 [182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 41 82 497 5 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [182]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
        (nil)))

(jump_insn 497 41 498 5 (set (pc)
        (label_ref 78)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 498 497 81)

;; Start of basic block ( 10) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [95.5%] 
(code_label 81 498 44 6 51 "" [1 uses])

(note 44 81 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 6 arch/arm/kernel/unwind.c:145 (set (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 16 [0x10])) [0 <variable>.begin_addr+0 S4 A32])
        (nil)))

(insn 46 45 47 6 arch/arm/kernel/unwind.c:145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:183 <variable>.begin_addr ] [183]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 47 46 48 6 arch/arm/kernel/unwind.c:145 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 7 arch/arm/kernel/unwind.c:146 (set (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 20 [0x14])) [0 <variable>.end_addr+0 S4 A32])
        (nil)))

(insn 50 49 51 7 arch/arm/kernel/unwind.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:137 temp.525 ] [137])
            (reg:SI 3 r3 [orig:184 <variable>.end_addr ] [184]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 7 arch/arm/kernel/unwind.c:146 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [4.5%]  (fallthru,loop_exit)
;; Succ edge  9 [95.5%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  7 [4.5%]  (fallthru,loop_exit)
(note 52 51 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 54 52 53 8 NOTE_INSN_DELETED)

(insn 53 54 55 8 arch/arm/kernel/unwind.c:147 (set (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 12 [0xc])) [0 <variable>.stop+0 S4 A32])
        (nil)))

(insn 55 53 56 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 0 r0)
        (reg:SI 9 r9 [orig:137 temp.525 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 56 55 57 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 8 [0x8])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 8 arch/arm/kernel/unwind.c:147 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 2 r2 [orig:186 <variable>.stop ] [186])
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(call_insn 58 57 59 8 arch/arm/kernel/unwind.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_index") [flags 0x3] <function_decl 0x11039a00 search_index>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 59 58 60 8 arch/arm/kernel/unwind.c:147 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 60 59 61 8 include/linux/list.h:101 (set (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 61 60 62 8 include/linux/list.h:101 (set (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 8 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:161 D.15897 ] [161])) 167 {*arm_movsi_insn} (nil))

(insn 63 62 65 8 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:161 D.15897 ] [161]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:162 D.15896 ] [162])) 167 {*arm_movsi_insn} (nil))

(insn 65 63 66 8 include/linux/list.h:62 (set (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
        (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 unwind_tables.next+0 S4 A32])
        (nil)))

(insn 66 65 67 8 include/linux/list.h:41 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(insn 67 66 69 8 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 3 r3 [orig:160 D.15898 ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 69 67 71 8 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 7 r7 [190])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 71 69 499 8 include/linux/list.h:44 (set (mem/s/f/j/c:SI (reg/f:SI 7 r7 [190]) [0 unwind_tables.next+0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 table ] [158])) 167 {*arm_movsi_insn} (nil))

(jump_insn 499 71 500 8 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 500 499 74)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [95.5%] 
(code_label 74 500 75 9 49 "" [2 uses])

(note 75 74 76 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 78 9 arch/arm/kernel/unwind.c:144 (set (reg/v/f:SI 4 r4 [orig:158 table ] [158])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:158 table ] [158]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 78 76 79 10 48 "" [1 uses])

(note 79 78 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 83 79 494 10 arch/arm/kernel/unwind.c:144 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (reg/f:SI 2 r2 [277]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 4 r4 [orig:158 table ] [158])
            (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
        (nil)))

(insn 494 83 84 10 arch/arm/kernel/unwind.c:144 (set (reg/f:SI 7 r7 [190])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(jump_insn 84 494 85 10 arch/arm/kernel/unwind.c:144 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 10 -> ( 6 11)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [95.5%] 
;; Succ edge  11 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	

;; Pred edge  10 [4.5%]  (fallthru,loop_exit)
(note 85 84 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 11 arch/arm/kernel/unwind.c:130 (set (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 8) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 87 86 88 12 50 "" [1 uses])

(note 88 87 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 91 88 90 12 include/linux/spinlock.h:340 (set (reg:SI 1 r1)
        (reg/v:SI 10 sl [orig:157 flags ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 90 91 92 12 include/linux/spinlock.h:340 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 92 90 93 12 include/linux/spinlock.h:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("_raw_spin_unlock_irqrestore") [flags 0x41] <function_decl 0x10aef080 _raw_spin_unlock_irqrestore>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 4) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 93 92 94 13 47 "" [1 uses])

(note 94 93 95 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 13 arch/arm/kernel/unwind.c:291 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 96 95 97 13 arch/arm/kernel/unwind.c:291 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 105)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  14 [0.0%]  (fallthru)
;; Succ edge  15 [100.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  13 [0.0%]  (fallthru)
(note 97 96 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 100 97 99 14 arch/arm/kernel/unwind.c:292 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 99 100 101 14 arch/arm/kernel/unwind.c:292 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x110ea840>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x110ea840>)
        (nil)))

(call_insn 101 99 102 14 arch/arm/kernel/unwind.c:292 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 102 101 501 14 arch/arm/kernel/unwind.c:293 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 501 102 502 14 arch/arm/kernel/unwind.c:293 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 502 501 105)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%] 
(code_label 105 502 106 15 52 "" [1 uses])

(note 106 105 107 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 109 15 arch/arm/kernel/unwind.c:296 (set (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (nil)))

(insn 109 107 111 15 arch/arm/kernel/unwind.c:297 (set (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 111 109 108 15 arch/arm/kernel/unwind.c:298 (set (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 108 111 110 15 arch/arm/kernel/unwind.c:296 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])
        (reg:SI 1 r1 [orig:193 <variable>.fp ] [193])) 167 {*arm_movsi_insn} (nil))

(insn 110 108 112 15 arch/arm/kernel/unwind.c:297 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 2 r2 [orig:194 <variable>.sp ] [194])) 167 {*arm_movsi_insn} (nil))

(insn 112 110 550 15 arch/arm/kernel/unwind.c:298 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (reg:SI 3 r3 [orig:195 <variable>.lr ] [195])) 167 {*arm_movsi_insn} (nil))

(insn 550 112 114 15 arch/arm/kernel/unwind.c:299 (set (reg:SI 3 r3 [196])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 114 550 115 15 arch/arm/kernel/unwind.c:299 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (reg:SI 3 r3 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 115 114 116 15 arch/arm/kernel/unwind.c:301 (set (reg:SI 1 r1 [orig:172 D.15626 ] [172])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
                (const_int 4 [0x4])) [0 <variable>.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 116 115 117 15 arch/arm/kernel/unwind.c:301 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 117 116 118 15 arch/arm/kernel/unwind.c:301 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
        (nil)))
;; End of basic block 15 -> ( 74 16)
;; lr  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  74 [19.9%] 
;; Succ edge  16 [80.1%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [80.1%]  (fallthru)
(note 118 117 120 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 120 118 121 16 arch/arm/kernel/unwind.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 121 120 122 16 arch/arm/kernel/unwind.c:304 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  17 [73.0%]  (fallthru)
;; Succ edge  18 [27.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 9 [r9]
;; live  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 1 [r1] 9 [r9]
;; live  kill	

;; Pred edge  16 [73.0%]  (fallthru)
(note 122 121 123 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 17 NOTE_INSN_DELETED)

(insn 124 123 125 17 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [198])
        (sign_extract:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int 31 [0x1f])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 125 124 126 17 arch/arm/kernel/unwind.c:306 (set (reg/f:SI 9 r9 [199])
        (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 126 125 127 17 arch/arm/kernel/unwind.c:306 (set (reg:SI 1 r1 [200])
        (plus:SI (reg:SI 1 r1 [198])
            (reg/f:SI 9 r9 [199]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(insn 127 126 503 17 arch/arm/kernel/unwind.c:306 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
        (reg:SI 1 r1 [200])) 167 {*arm_movsi_insn} (nil))

(jump_insn 503 127 504 17 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 21)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 504 503 130)

;; Start of basic block ( 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [27.0%] 
(code_label 130 504 131 18 54 "" [1 uses])

(note 131 130 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 18 arch/arm/kernel/unwind.c:307 (set (reg:SI 3 r3 [201])
        (and:SI (reg:SI 1 r1 [orig:172 D.15626 ] [172])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 133 132 134 18 arch/arm/kernel/unwind.c:307 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [201])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 134 133 135 18 arch/arm/kernel/unwind.c:307 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)
;; Succ edge  20 [0.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 9 [r9]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 9 [r9]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
(note 135 134 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 136 135 137 19 arch/arm/kernel/unwind.c:309 (set (reg/f:SI 9 r9 [202])
        (plus:SI (reg/v/f:SI 9 r9 [orig:164 idx ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 ctrl.insn+0 S4 A32])
        (nil)))

(insn 137 136 505 19 arch/arm/kernel/unwind.c:309 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])
        (reg/f:SI 9 r9 [202])) 167 {*arm_movsi_insn} (nil))

(jump_insn 505 137 506 19 (set (pc)
        (label_ref 150)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 506 505 140)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  18 [0.0%] 
(code_label 140 506 141 20 56 "" [1 uses])

(note 141 140 145 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 145 141 143 20 arch/arm/kernel/unwind.c:311 (set (reg:SI 2 r2)
        (reg/v/f:SI 9 r9 [orig:164 idx ] [164])) 167 {*arm_movsi_insn} (nil))

(insn 143 145 146 20 arch/arm/kernel/unwind.c:311 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10d655a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10d655a0>)
        (nil)))

(call_insn 146 143 147 20 arch/arm/kernel/unwind.c:311 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 147 146 507 20 arch/arm/kernel/unwind.c:313 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 507 147 508 20 arch/arm/kernel/unwind.c:313 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 508 507 150)

;; Start of basic block ( 17 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 150 508 151 21 55 "" [2 uses])

(note 151 150 152 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 152 151 153 21 arch/arm/kernel/unwind.c:317 (set (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 ctrl.insn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 153 152 154 21 arch/arm/kernel/unwind.c:317 (set (reg:SI 1 r1 [orig:169 D.15644 ] [169])
        (mem:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 154 153 155 21 arch/arm/kernel/unwind.c:317 (set (reg:SI 3 r3 [orig:168 D.15645 ] [168])
        (and:SI (reg:SI 1 r1 [orig:169 D.15644 ] [169])
            (const_int -16777216 [0xffffffffff000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 155 154 156 21 arch/arm/kernel/unwind.c:317 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 156 155 157 21 arch/arm/kernel/unwind.c:317 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 164)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  22 [28.0%]  (fallthru)
;; Succ edge  23 [72.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  21 [28.0%]  (fallthru)
(note 157 156 158 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 159 22 arch/arm/kernel/unwind.c:318 (set (reg:SI 3 r3 [204])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 159 158 160 22 arch/arm/kernel/unwind.c:318 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
        (reg:SI 3 r3 [204])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 160 159 161 22 arch/arm/kernel/unwind.c:319 (set (reg:SI 3 r3 [205])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 161 160 509 22 arch/arm/kernel/unwind.c:319 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 3 r3 [205])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 509 161 510 22 (set (pc)
        (label_ref 427)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 68)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  68 [100.0%] 

(barrier 510 509 164)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  21 [72.0%] 
(code_label 164 510 165 23 57 "" [1 uses])

(note 165 164 166 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 166 165 167 23 arch/arm/kernel/unwind.c:320 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:168 D.15645 ] [168])
            (const_int -2130706432 [0xffffffff81000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 167 166 168 23 arch/arm/kernel/unwind.c:320 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)
;; Succ edge  25 [0.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru)
(note 168 167 172 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 172 168 173 24 NOTE_INSN_DELETED)

(note 173 172 169 24 NOTE_INSN_DELETED)

(insn 169 173 170 24 arch/arm/kernel/unwind.c:321 (set (reg:SI 3 r3 [206])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 170 169 174 24 arch/arm/kernel/unwind.c:321 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 ctrl.byte+0 S4 A32])
        (reg:SI 3 r3 [206])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 174 170 175 24 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [210])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 2 r2 [orig:170 D.15643 ] [170])
                    (const_int 2 [0x2])) [0 S1 A16]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 175 174 176 24 arch/arm/kernel/unwind.c:322 (set (reg:SI 3 r3 [211])
        (plus:SI (reg:SI 3 r3 [210])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 ctrl.entries+0 S4 A32])
        (nil)))

(insn 176 175 511 24 arch/arm/kernel/unwind.c:322 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 3 r3 [211])) 167 {*arm_movsi_insn} (nil))

(jump_insn 511 176 512 24 (set (pc)
        (label_ref 427)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 68)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  68 [100.0%] 

(barrier 512 511 179)

;; Start of basic block ( 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  23 [0.0%] 
(code_label 179 512 180 25 59 "" [1 uses])

(note 180 179 182 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 182 180 185 25 arch/arm/kernel/unwind.c:324 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10d65600>)
        (nil)))

(call_insn 185 182 186 25 arch/arm/kernel/unwind.c:324 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 186 185 513 25 arch/arm/kernel/unwind.c:326 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 513 186 514 25 arch/arm/kernel/unwind.c:326 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 514 513 429)

;; Start of basic block ( 69) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  69 [97.8%] 
(code_label 429 514 189 26 80 "" [1 uses])

(note 189 429 194 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 194 189 191 26 NOTE_INSN_DELETED)

(insn 191 194 192 26 arch/arm/kernel/unwind.c:187 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn 192 191 193 26 arch/arm/kernel/unwind.c:187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 193 192 195 26 arch/arm/kernel/unwind.c:187 (set (reg/v:SI 1 r1 [orig:146 insn ] [146])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 195 193 196 26 arch/arm/kernel/unwind.c:191 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
                        (const_int 192 [0xc0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [orig:141 D.15954 ] [141])
                (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
                    (const_int 192 [0xc0])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 196 195 197 26 arch/arm/kernel/unwind.c:191 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 197 196 200 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 200 197 201 27 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [216])
        (ashift:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 201 200 549 27 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [217])
        (and:SI (reg:SI 1 r1 [216])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 549 201 199 27 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 199 549 202 27 arch/arm/kernel/unwind.c:192 (set (reg:SI 3 r3 [214])
        (plus:SI (reg:SI 3 r3 [orig:215 ctrl.vrs+52 ] [215])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 202 199 203 27 arch/arm/kernel/unwind.c:192 (set (reg:SI 1 r1 [218])
        (plus:SI (reg:SI 3 r3 [214])
            (reg:SI 1 r1 [217]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 203 202 515 27 arch/arm/kernel/unwind.c:192 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 1 r1 [218])) 167 {*arm_movsi_insn} (nil))

(jump_insn 515 203 516 27 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 27 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 516 515 206)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [50.0%] 
(code_label 206 516 207 28 60 "" [1 uses])

(note 207 206 208 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 209 28 arch/arm/kernel/unwind.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 D.15954 ] [141])
            (const_int 64 [0x40]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 209 208 210 28 arch/arm/kernel/unwind.c:193 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  29 [28.0%]  (fallthru)
;; Succ edge  30 [72.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  28 [28.0%]  (fallthru)
(note 210 209 213 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 213 210 214 29 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [221])
        (ashift:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 214 213 548 29 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [222])
        (and:SI (reg:SI 1 r1 [221])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 548 214 212 29 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 212 548 215 29 arch/arm/kernel/unwind.c:194 (set (reg:SI 3 r3 [219])
        (plus:SI (reg:SI 3 r3 [orig:220 ctrl.vrs+52 ] [220])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 215 212 216 29 arch/arm/kernel/unwind.c:194 (set (reg:SI 1 r1 [223])
        (minus:SI (reg:SI 3 r3 [219])
            (reg:SI 1 r1 [222]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 216 215 517 29 arch/arm/kernel/unwind.c:194 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 1 r1 [223])) 167 {*arm_movsi_insn} (nil))

(jump_insn 517 216 518 29 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 518 517 219)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  28 [72.0%] 
(code_label 219 518 220 30 62 "" [1 uses])

(note 220 219 221 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 221 220 222 30 arch/arm/kernel/unwind.c:195 (set (reg:SI 3 r3 [orig:142 D.15946 ] [142])
        (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 240 [0xf0]))) 67 {*arm_andsi3_insn} (nil))

(insn 222 221 223 30 arch/arm/kernel/unwind.c:195 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 128 [0x80]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 223 222 224 30 arch/arm/kernel/unwind.c:195 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 271)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
        (nil)))
;; End of basic block 30 -> ( 31 39)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  31 [13.7%]  (fallthru)
;; Succ edge  39 [86.3%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 9 [r9] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  30 [13.7%]  (fallthru)
(note 224 223 230 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 230 224 233 31 NOTE_INSN_DELETED)

(note 233 230 228 31 NOTE_INSN_DELETED)

(insn 228 233 226 31 arch/arm/kernel/unwind.c:200 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(insn 226 228 225 31 arch/arm/kernel/unwind.c:200 (set (reg:SI 9 r9 [orig:143 D.15945 ] [143])
        (ashift:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (nil))

(insn 225 226 229 31 arch/arm/kernel/unwind.c:197 (set (reg:SI 10 sl [orig:136 temp.538 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 229 225 231 31 arch/arm/kernel/unwind.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 231 229 232 31 arch/arm/kernel/unwind.c:200 (set (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
        (ior:SI (reg:SI 0 r0)
            (reg:SI 9 r9 [orig:143 D.15945 ] [143]))) 89 {*arm_iorsi3} (nil))

(insn 232 231 234 31 arch/arm/kernel/unwind.c:201 (set (reg:SI 3 r3 [225])
        (ashift:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 234 232 235 31 arch/arm/kernel/unwind.c:202 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg:SI 3 r3 [225])
                        (const_int 20 [0x14]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg:SI 3 r3 [225])
                    (const_int 20 [0x14])))
        ]) 118 {*shiftsi3_compare0} (nil))

(jump_insn 235 234 236 31 arch/arm/kernel/unwind.c:202 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  32 [0.0%]  (fallthru,loop_exit)
;; Succ edge  33 [100.0%] 

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  31 [0.0%]  (fallthru,loop_exit)
(note 236 235 238 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 238 236 240 32 arch/arm/kernel/unwind.c:203 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11075a50>)
        (nil)))

(call_insn 240 238 241 32 arch/arm/kernel/unwind.c:203 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 241 240 519 32 arch/arm/kernel/unwind.c:203 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 519 241 520 32 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 32 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 520 519 244)

;; Start of basic block ( 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  31 [100.0%] 
(code_label 244 520 245 33 64 "" [1 uses])

(note 245 244 247 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 247 245 248 33 arch/arm/kernel/unwind.c:209 (set (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
        (and:SI (reg/v:SI 1 r1 [orig:135 insn.539 ] [135])
            (const_int 512 [0x200]))) 67 {*arm_andsi3_insn} (nil))

(insn 248 247 261 33 arch/arm/kernel/unwind.c:209 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))
;; End of basic block 33 -> ( 34)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 36 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  36 [91.7%]  (dfs_back)
;; Pred edge  33 [100.0%]  (fallthru)
(code_label 261 248 249 34 66 "" [1 uses])

(note 249 261 250 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 250 249 251 34 NOTE_INSN_DELETED)

(insn 251 250 252 34 arch/arm/kernel/unwind.c:211 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 252 251 253 34 arch/arm/kernel/unwind.c:211 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 257)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 35 36)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 10 [sl]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 10 [sl]
;; live  kill	

;; Pred edge  34 [50.0%]  (fallthru)
(note 253 252 254 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 254 253 255 35 arch/arm/kernel/unwind.c:212 (set (reg:SI 0 r0 [228])
        (mem:SI (post_inc:SI (reg/v/f:SI 10 sl [orig:148 vsp ] [148])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/v/f:SI 10 sl [orig:148 vsp ] [148])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                    (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
            (nil))))

(insn 255 254 257 35 arch/arm/kernel/unwind.c:212 (set (mem/s/j:SI (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
                (const_int 16 [0x10])) [0 ctrl.vrs S4 A32])
        (reg:SI 0 r0 [228])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 34 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  34 [50.0%] 
;; Pred edge  35 [100.0%]  (fallthru)
(code_label 257 255 258 36 65 "" [1 uses])

(note 258 257 259 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 259 258 262 36 NOTE_INSN_DELETED)

(insn 262 259 260 36 arch/arm/kernel/unwind.c:210 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 mask ] [147])
                (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 mask ] [147])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 260 262 263 36 arch/arm/kernel/unwind.c:213 (set (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
        (plus:SI (reg:SI 2 r2 [orig:140 ivtmp.497 ] [140])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 263 260 264 36 arch/arm/kernel/unwind.c:210 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 261)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9167 [0x23cf])
        (nil)))
;; End of basic block 36 -> ( 34 37)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  34 [91.7%]  (dfs_back)
;; Succ edge  37 [8.3%]  (fallthru,loop_exit)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  36 [8.3%]  (fallthru,loop_exit)
(note 264 263 265 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 265 264 266 37 arch/arm/kernel/unwind.c:216 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:149 load_sp ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 266 265 267 37 arch/arm/kernel/unwind.c:216 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 419)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 37 -> ( 38 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  38 [50.0%]  (fallthru)
;; Succ edge  65 [50.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  37 [50.0%]  (fallthru)
(note 267 266 268 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 268 267 521 38 arch/arm/kernel/unwind.c:217 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg/v/f:SI 10 sl [orig:148 vsp ] [148])) 167 {*arm_movsi_insn} (nil))

(jump_insn 521 268 522 38 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 38 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 522 521 271)

;; Start of basic block ( 30) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  30 [86.3%] 
(code_label 271 522 272 39 63 "" [1 uses])

(note 272 271 273 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 273 272 274 39 arch/arm/kernel/unwind.c:218 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 144 [0x90]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 274 273 275 39 arch/arm/kernel/unwind.c:218 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 39 -> ( 40 42)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  40 [28.0%]  (fallthru)
;; Succ edge  42 [72.0%] 

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  39 [28.0%]  (fallthru)
(note 275 274 276 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 276 275 277 40 arch/arm/kernel/unwind.c:219 (set (reg:SI 3 r3 [229])
        (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 13 [0xd]))) 67 {*arm_andsi3_insn} (nil))

(insn 277 276 278 40 arch/arm/kernel/unwind.c:219 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [229])
            (const_int 13 [0xd]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 278 277 279 40 arch/arm/kernel/unwind.c:219 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 40 -> ( 41 49)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  41 [72.0%]  (fallthru)
;; Succ edge  49 [28.0%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  40 [72.0%]  (fallthru)
(note 279 278 282 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(note 282 279 280 41 NOTE_INSN_DELETED)

(insn 280 282 552 41 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [230])
        (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 552 280 283 41 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 80 [0x50]))) 4 {*arm_addsi3} (nil))

(insn 283 552 285 41 arch/arm/kernel/unwind.c:220 (set (reg:SI 1 r1 [233])
        (plus:SI (mult:SI (reg:SI 1 r1 [230])
                (const_int 4 [0x4]))
            (reg:SI 3 r3))) 270 {*arith_shiftsi} (nil))

(insn 285 283 286 41 arch/arm/kernel/unwind.c:220 (set (reg:SI 3 r3 [235])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [233])
                (const_int -76 [0xffffffffffffffb4])) [0 ctrl.vrs S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 286 285 523 41 arch/arm/kernel/unwind.c:220 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 3 r3 [235])) 167 {*arm_movsi_insn} (nil))

(jump_insn 523 286 524 41 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 41 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 524 523 289)

;; Start of basic block ( 39) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  39 [72.0%] 
(code_label 289 524 290 42 67 "" [1 uses])

(note 290 289 291 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 291 290 292 42 arch/arm/kernel/unwind.c:221 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:142 D.15946 ] [142])
            (const_int 160 [0xa0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 292 291 293 42 arch/arm/kernel/unwind.c:221 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 327)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6895 [0x1aef])
        (nil)))
;; End of basic block 42 -> ( 43 49)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  43 [31.1%]  (fallthru)
;; Succ edge  49 [69.0%] 

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  42 [31.1%]  (fallthru)
(note 293 292 309 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 309 293 294 43 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [271])
        (and:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 7 [0x7]))) 67 {*arm_andsi3_insn} (nil))

(insn 294 309 310 43 arch/arm/kernel/unwind.c:222 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 310 294 492 43 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:SI 0 r0 [272])
        (plus:SI (reg:SI 0 r0 [271])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 492 310 525 43 arch/arm/kernel/unwind.c:226 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(jump_insn 525 492 526 43 (set (pc)
        (label_ref 304)) 242 {*arm_jump} (nil))
;; End of basic block 43 -> ( 45)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  45 [100.0%] 

(barrier 526 525 308)

;; Start of basic block ( 45) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  45 [92.3%] 
(code_label 308 526 298 44 70 "" [1 uses])

(note 298 308 301 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 301 298 302 44 arch/arm/kernel/unwind.c:227 (set (reg:SI 12 ip [238])
        (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
        (nil)))

(insn 302 301 303 44 arch/arm/kernel/unwind.c:227 (set (mem/s/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
                    (const_int 4 [0x4]))
                (reg/f:SI 4 r4 [274])) [0 ctrl.vrs S4 A32])
        (reg:SI 12 ip [238])) 167 {*arm_movsi_insn} (nil))

(insn 303 302 304 44 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg/v:SI 2 r2 [orig:151 reg ] [151])
        (plus:SI (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 44 -> ( 45)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  45 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 44 43) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  44 [100.0%]  (fallthru,dfs_back)
;; Pred edge  43 [100.0%] 
(code_label 304 303 305 45 69 "" [1 uses])

(note 305 304 311 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 311 305 307 45 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:151 reg ] [151])
            (reg:SI 0 r0 [272]))) 219 {*arm_cmpsi_insn} (nil))

(insn 307 311 312 45 arch/arm/kernel/unwind.c:226 discrim 2 (set (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 312 307 313 45 arch/arm/kernel/unwind.c:226 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 308)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9231 [0x240f])
        (nil)))
;; End of basic block 45 -> ( 44 46)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  44 [92.3%] 
;; Succ edge  46 [7.7%]  (fallthru,loop_exit)

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  45 [7.7%]  (fallthru,loop_exit)
(note 313 312 315 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(note 315 313 316 46 NOTE_INSN_DELETED)

(insn 316 315 314 46 arch/arm/kernel/unwind.c:228 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:146 insn ] [146])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 314 316 317 46 arch/arm/kernel/unwind.c:226 discrim 1 (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(jump_insn 317 314 318 46 arch/arm/kernel/unwind.c:228 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 322)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 46 -> ( 47 48)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  47 [50.0%]  (fallthru)
;; Succ edge  48 [50.0%] 

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  46 [50.0%]  (fallthru)
(note 318 317 319 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 319 318 321 47 arch/arm/kernel/unwind.c:229 (set (reg:SI 1 r1 [242])
        (mem:SI (plus:SI (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn 321 319 320 47 arch/arm/kernel/unwind.c:229 (set (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])
        (reg:SI 3 r3 [orig:138 ivtmp.511 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 320 321 322 47 arch/arm/kernel/unwind.c:229 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (reg:SI 1 r1 [242])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 47 -> ( 48)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  48 [100.0%]  (fallthru)

;; Start of basic block ( 46 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  46 [50.0%] 
;; Pred edge  47 [100.0%]  (fallthru)
(code_label 322 320 323 48 71 "" [1 uses])

(note 323 322 324 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 324 323 527 48 arch/arm/kernel/unwind.c:230 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg/v/f:SI 2 r2 [orig:150 vsp ] [150])) 167 {*arm_movsi_insn} (nil))

(jump_insn 527 324 528 48 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 48 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 528 527 327)

;; Start of basic block ( 42 40) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  42 [69.0%] 
;; Pred edge  40 [28.0%] 
(code_label 327 528 328 49 68 "" [2 uses])

(note 328 327 329 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 329 328 330 49 arch/arm/kernel/unwind.c:231 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 176 [0xb0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 330 329 331 49 arch/arm/kernel/unwind.c:231 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 344)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 49 -> ( 50 53)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  50 [28.0%]  (fallthru)
;; Succ edge  53 [72.0%] 

;; Start of basic block ( 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  49 [28.0%]  (fallthru)
(note 331 330 332 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 332 331 333 50 arch/arm/kernel/unwind.c:232 (set (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn 333 332 334 50 arch/arm/kernel/unwind.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:243 ctrl.vrs+60 ] [243])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 334 333 335 50 arch/arm/kernel/unwind.c:232 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 338)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 50 -> ( 51 52)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  51 [50.0%]  (fallthru)
;; Succ edge  52 [50.0%] 

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  50 [50.0%]  (fallthru)
(note 335 334 336 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 336 335 337 51 arch/arm/kernel/unwind.c:233 (set (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn 337 336 338 51 arch/arm/kernel/unwind.c:233 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (reg:SI 3 r3 [orig:244 ctrl.vrs+56 ] [244])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 51 -> ( 52)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  52 [100.0%]  (fallthru)

;; Start of basic block ( 50 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  50 [50.0%] 
;; Pred edge  51 [100.0%]  (fallthru)
(code_label 338 337 339 52 73 "" [1 uses])

(note 339 338 341 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 341 339 529 52 arch/arm/kernel/unwind.c:235 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (reg:SI 7 r7 [275])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 529 341 530 52 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 52 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 530 529 344)

;; Start of basic block ( 49) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  49 [72.0%] 
(code_label 344 530 345 53 72 "" [1 uses])

(note 345 344 346 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 346 345 347 53 arch/arm/kernel/unwind.c:236 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 177 [0xb1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 347 346 348 53 arch/arm/kernel/unwind.c:236 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 394)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8629 [0x21b5])
        (nil)))
;; End of basic block 53 -> ( 54 62)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  54 [13.7%]  (fallthru)
;; Succ edge  62 [86.3%] 

;; Start of basic block ( 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  53 [13.7%]  (fallthru)
(note 348 347 352 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(note 352 348 350 54 NOTE_INSN_DELETED)

(insn 350 352 351 54 arch/arm/kernel/unwind.c:237 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn 351 350 353 54 arch/arm/kernel/unwind.c:237 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 353 351 354 54 arch/arm/kernel/unwind.c:238 (set (reg:SI 3 r3 [orig:134 temp.542 ] [134])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 354 353 355 54 arch/arm/kernel/unwind.c:241 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 355 354 356 54 arch/arm/kernel/unwind.c:241 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 360)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 54 -> ( 56 55)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  56 [0.0%]  (loop_exit)
;; Succ edge  55 [100.0%]  (fallthru)

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  54 [100.0%]  (fallthru)
(note 356 355 357 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(note 357 356 358 55 NOTE_INSN_DELETED)

(insn 358 357 359 55 arch/arm/kernel/unwind.c:241 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 240 [0xf0]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [247])
                (and:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 240 [0xf0])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 359 358 360 55 arch/arm/kernel/unwind.c:241 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 55 -> ( 56 58)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  56 [0.0%]  (fallthru,loop_exit)
;; Succ edge  58 [100.0%] 

;; Start of basic block ( 54 55) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  54 [0.0%]  (loop_exit)
;; Pred edge  55 [0.0%]  (fallthru,loop_exit)
(code_label 360 359 361 56 75 "" [1 uses])

(note 361 360 363 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(note 363 361 365 56 NOTE_INSN_DELETED)

(insn 365 363 364 56 arch/arm/kernel/unwind.c:242 (set (reg:SI 1 r1)
        (ior:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
            (const_int 45312 [0xb100]))) 89 {*arm_iorsi3} (nil))

(insn 364 365 366 56 arch/arm/kernel/unwind.c:242 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x110a6480>)
        (nil)))

(call_insn 366 364 367 56 arch/arm/kernel/unwind.c:242 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 367 366 531 56 arch/arm/kernel/unwind.c:242 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 531 367 532 56 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 56 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 532 531 387)

;; Start of basic block ( 60 55) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  60 [93.8%]  (dfs_back)
;; Pred edge  55 [100.0%] 
(code_label 387 532 374 58 78 "" [2 uses])

(note 374 387 375 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 375 374 376 58 NOTE_INSN_DELETED)

(insn 376 375 377 58 arch/arm/kernel/unwind.c:249 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 377 376 378 58 arch/arm/kernel/unwind.c:249 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 383)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 58 -> ( 59 60)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  59 [50.0%]  (fallthru)
;; Succ edge  60 [50.0%] 

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  58 [50.0%]  (fallthru)
(note 378 377 380 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 380 378 381 59 arch/arm/kernel/unwind.c:250 (set (reg:SI 0 r0 [252])
        (mem:SI (post_inc:SI (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                    (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
            (nil))))

(insn 381 380 383 59 arch/arm/kernel/unwind.c:250 (set (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [274])
                (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])) [0 ctrl.vrs S4 A32])
        (reg:SI 0 r0 [252])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 59 -> ( 60)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  60 [100.0%]  (fallthru)

;; Start of basic block ( 58 59) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  58 [50.0%] 
;; Pred edge  59 [100.0%]  (fallthru)
(code_label 383 381 384 60 77 "" [1 uses])

(note 384 383 385 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(note 385 384 388 60 NOTE_INSN_DELETED)

(insn 388 385 386 60 arch/arm/kernel/unwind.c:248 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 1 r1 [orig:152 mask ] [152])
                (lshiftrt:SI (reg/v:SI 1 r1 [orig:152 mask ] [152])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 386 388 389 60 arch/arm/kernel/unwind.c:251 (set (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
        (plus:SI (reg:SI 2 r2 [orig:139 ivtmp.505 ] [139])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 389 386 390 60 arch/arm/kernel/unwind.c:248 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 387)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
        (nil)))
;; End of basic block 60 -> ( 58 61)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  58 [93.8%]  (dfs_back)
;; Succ edge  61 [6.2%]  (fallthru,loop_exit)

;; Start of basic block ( 60) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  60 [6.2%]  (fallthru,loop_exit)
(note 390 389 391 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 391 390 533 61 arch/arm/kernel/unwind.c:254 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg/v/f:SI 3 r3 [orig:153 vsp ] [153])) 167 {*arm_movsi_insn} (nil))

(jump_insn 533 391 534 61 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 61 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 534 533 394)

;; Start of basic block ( 53) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  53 [86.3%] 
(code_label 394 534 395 62 74 "" [1 uses])

(note 395 394 396 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 396 395 397 62 arch/arm/kernel/unwind.c:255 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:146 insn ] [146])
            (const_int 178 [0xb2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 397 396 398 62 arch/arm/kernel/unwind.c:255 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 410)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 62 -> ( 63 64)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  63 [100.0%]  (fallthru)
;; Succ edge  64 [0.0%]  (loop_exit)

;; Start of basic block ( 62) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  62 [100.0%]  (fallthru)
(note 398 397 402 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(note 402 398 405 63 NOTE_INSN_DELETED)

(note 405 402 400 63 NOTE_INSN_DELETED)

(insn 400 405 401 63 arch/arm/kernel/unwind.c:256 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [274])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -76 [0xffffffffffffffb4]))
        (nil)))

(call_insn 401 400 403 63 arch/arm/kernel/unwind.c:256 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_get_byte") [flags 0x3] <function_decl 0x11039c00 unwind_get_byte>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 403 401 404 63 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 404 403 406 63 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [254])
        (plus:SI (reg:SI 3 r3 [orig:255 ctrl.vrs+52 ] [255])
            (const_int 516 [0x204]))) 4 {*arm_addsi3} (nil))

(insn 406 404 407 63 arch/arm/kernel/unwind.c:258 (set (reg:SI 3 r3 [257])
        (plus:SI (mult:SI (reg:SI 0 r0)
                (const_int 4 [0x4]))
            (reg:SI 3 r3 [254]))) 270 {*arith_shiftsi} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 ctrl.vrs+52 S4 A32])
        (nil)))

(insn 407 406 535 63 arch/arm/kernel/unwind.c:258 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])
        (reg:SI 3 r3 [257])) 167 {*arm_movsi_insn} (nil))

(jump_insn 535 407 536 63 (set (pc)
        (label_ref 419)) 242 {*arm_jump} (nil))
;; End of basic block 63 -> ( 65)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  65 [100.0%] 

(barrier 536 535 410)

;; Start of basic block ( 62) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  62 [0.0%]  (loop_exit)
(code_label 410 536 411 64 79 "" [1 uses])

(note 411 410 413 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 413 411 415 64 arch/arm/kernel/unwind.c:260 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11114000>)
        (nil)))

(call_insn 415 413 416 64 arch/arm/kernel/unwind.c:260 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 416 415 537 64 arch/arm/kernel/unwind.c:260 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))

(jump_insn 537 416 538 64 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 64 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 538 537 419)

;; Start of basic block ( 61 27 52 37 29 38 41 48 63) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  61 [100.0%] 
;; Pred edge  27 [100.0%] 
;; Pred edge  52 [100.0%] 
;; Pred edge  37 [50.0%] 
;; Pred edge  29 [100.0%] 
;; Pred edge  38 [100.0%] 
;; Pred edge  41 [100.0%] 
;; Pred edge  48 [100.0%] 
;; Pred edge  63 [100.0%] 
(code_label 419 538 420 65 61 "" [9 uses])

(note 420 419 421 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 421 420 422 65 arch/arm/kernel/unwind.c:333 (set (reg:SI 3 r3 [orig:167 D.15661 ] [167])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 422 421 423 65 arch/arm/kernel/unwind.c:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 8 r8 [orig:165 low ] [165]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 423 422 424 65 arch/arm/kernel/unwind.c:333 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 225 [0xe1])
        (nil)))
;; End of basic block 65 -> ( 74 66)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  74 [2.2%]  (loop_exit)
;; Succ edge  66 [97.8%]  (fallthru)

;; Start of basic block ( 65) -> 66
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  65 [97.8%]  (fallthru)
(note 424 423 425 66 [bb 66] NOTE_INSN_BASIC_BLOCK)

(insn 425 424 426 66 arch/arm/kernel/unwind.c:333 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 D.15661 ] [167])
            (reg/v:SI 6 r6 [orig:166 high ] [166]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 426 425 540 66 arch/arm/kernel/unwind.c:333 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 539)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 66 -> ( 67 69)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  67 [14.0%]  (fallthru,loop_exit)
;; Succ edge  69 [86.0%]  (dfs_back)

;; Start of basic block ( 66) -> 67
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  66 [14.0%]  (fallthru,loop_exit)
(note 540 426 541 67 [bb 67] NOTE_INSN_BASIC_BLOCK)

(jump_insn 541 540 542 67 (set (pc)
        (label_ref 458)) 242 {*arm_jump} (nil))
;; End of basic block 67 -> ( 74)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  74 [100.0%] 

(barrier 542 541 427)

;; Start of basic block ( 22 24) -> 68
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

;; Pred edge  22 [100.0%] 
;; Pred edge  24 [100.0%] 
(code_label 427 542 428 68 58 "" [2 uses])

(note 428 427 190 68 [bb 68] NOTE_INSN_BASIC_BLOCK)

(insn 190 428 340 68 arch/arm/kernel/unwind.c:187 (set (reg/f:SI 4 r4 [274])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn 340 190 539 68 arch/arm/kernel/unwind.c:235 (set (reg:SI 7 r7 [275])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))
;; End of basic block 68 -> ( 69)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  69 [100.0%]  (fallthru)

;; Start of basic block ( 68 66) -> 69
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  68 [100.0%]  (fallthru)
;; Pred edge  66 [86.0%]  (dfs_back)
(code_label 539 340 477 69 85 "" [1 uses])

(note 477 539 430 69 [bb 69] NOTE_INSN_BASIC_BLOCK)

(insn 430 477 431 69 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 ctrl.entries+0 S4 A32])
        (nil)))

(insn 431 430 432 69 arch/arm/kernel/unwind.c:329 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:259 ctrl.entries ] [259])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 432 431 433 69 arch/arm/kernel/unwind.c:329 discrim 1 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 429)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
        (nil)))
;; End of basic block 69 -> ( 26 70)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [97.8%] 
;; Succ edge  70 [2.2%]  (fallthru,loop_exit)

;; Start of basic block ( 69) -> 70
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  69 [2.2%]  (fallthru,loop_exit)
(note 433 432 434 70 [bb 70] NOTE_INSN_BASIC_BLOCK)

(insn 434 433 435 70 arch/arm/kernel/unwind.c:337 (set (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (nil)))

(insn 435 434 436 70 arch/arm/kernel/unwind.c:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:260 ctrl.vrs+60 ] [260])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 436 435 437 70 arch/arm/kernel/unwind.c:337 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 440)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 70 -> ( 71 72)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  71 [50.0%]  (fallthru)
;; Succ edge  72 [50.0%] 

;; Start of basic block ( 70) -> 71
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  70 [50.0%]  (fallthru)
(note 437 436 438 71 [bb 71] NOTE_INSN_BASIC_BLOCK)

(insn 438 437 439 71 arch/arm/kernel/unwind.c:338 (set (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])
        (nil)))

(insn 439 438 440 71 arch/arm/kernel/unwind.c:338 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])
        (reg:SI 3 r3 [orig:261 ctrl.vrs+56 ] [261])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 71 -> ( 72)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  72 [100.0%]  (fallthru)

;; Start of basic block ( 70 71) -> 72
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  70 [50.0%] 
;; Pred edge  71 [100.0%]  (fallthru)
(code_label 440 439 441 72 81 "" [1 uses])

(note 441 440 442 72 [bb 72] NOTE_INSN_BASIC_BLOCK)

(insn 442 441 443 72 arch/arm/kernel/unwind.c:341 (set (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (nil)))

(insn 443 442 444 72 arch/arm/kernel/unwind.c:341 (set (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 ctrl.vrs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 444 443 445 72 arch/arm/kernel/unwind.c:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:262 <variable>.pc ] [262])
            (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 445 444 446 72 arch/arm/kernel/unwind.c:341 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 458)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
        (nil)))
;; End of basic block 72 -> ( 74 73)
;; lr  out 	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  74 [19.9%] 
;; Succ edge  73 [80.1%]  (fallthru)

;; Start of basic block ( 72) -> 73
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  in  	 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  72 [80.1%]  (fallthru)
(note 446 445 447 73 [bb 73] NOTE_INSN_BASIC_BLOCK)

(insn 447 446 455 73 arch/arm/kernel/unwind.c:344 (set (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 ctrl.vrs+44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 455 447 449 73 arch/arm/kernel/unwind.c:349 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 449 455 451 73 arch/arm/kernel/unwind.c:345 (set (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 ctrl.vrs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 451 449 454 73 arch/arm/kernel/unwind.c:346 (set (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 ctrl.vrs+56 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (nil)))

(insn 454 451 448 73 arch/arm/kernel/unwind.c:347 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 12 [0xc])) [0 <variable>.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:263 ctrl.vrs+60 ] [263])) 167 {*arm_movsi_insn} (nil))

(insn 448 454 450 73 arch/arm/kernel/unwind.c:344 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175]) [0 <variable>.fp+0 S4 A32])
        (reg:SI 12 ip [orig:264 ctrl.vrs+44 ] [264])) 167 {*arm_movsi_insn} (nil))

(insn 450 448 452 73 arch/arm/kernel/unwind.c:345 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 4 [0x4])) [0 <variable>.sp+0 S4 A32])
        (reg:SI 1 r1 [orig:265 ctrl.vrs+52 ] [265])) 167 {*arm_movsi_insn} (nil))

(insn 452 450 543 73 arch/arm/kernel/unwind.c:346 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:175 frame ] [175])
                (const_int 8 [0x8])) [0 <variable>.lr+0 S4 A32])
        (reg:SI 2 r2 [orig:266 ctrl.vrs+56 ] [266])) 167 {*arm_movsi_insn} (nil))

(jump_insn 543 452 544 73 arch/arm/kernel/unwind.c:349 (set (pc)
        (label_ref 461)) 242 {*arm_jump} (nil))
;; End of basic block 73 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 544 543 458)

;; Start of basic block ( 2 65 15 72 67) -> 74
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%] 
;; Pred edge  65 [2.2%]  (loop_exit)
;; Pred edge  15 [19.9%] 
;; Pred edge  72 [19.9%] 
;; Pred edge  67 [100.0%] 
(code_label 458 544 459 74 45 "" [5 uses])

(note 459 458 460 74 [bb 74] NOTE_INSN_BASIC_BLOCK)

(insn 460 459 461 74 arch/arm/kernel/unwind.c:288 (set (reg/v:SI 0 r0 [orig:163 urc ] [163])
        (const_int -9 [0xfffffffffffffff7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -9 [0xfffffffffffffff7])
        (nil)))
;; End of basic block 74 -> ( 75)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  75 [100.0%]  (fallthru)

;; Start of basic block ( 74 32 25 56 14 64 20 73) -> 75
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  74 [100.0%]  (fallthru)
;; Pred edge  32 [100.0%] 
;; Pred edge  25 [100.0%] 
;; Pred edge  56 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  64 [100.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  73 [100.0%] 
(code_label 461 460 462 75 53 "" [7 uses])

(note 462 461 473 75 [bb 75] NOTE_INSN_BASIC_BLOCK)

(insn 473 462 547 75 arch/arm/kernel/unwind.c:350 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 75 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 547 473 551 NOTE_INSN_DELETED)

(note 551 547 0 NOTE_INSN_DELETED)


;; Function unwind_backtrace (unwind_backtrace)[0:859]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 20 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 31 (  1.9)
scanning new insn with uid = 118.
rescanning insn with uid = 118.
deleting insn with uid = 118.
deleting insn with uid = 84.
scanning new insn with uid = 119.
verify found no changes in insn with uid = 119.
deleting insn with uid = 57.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 20 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 31 (  1.9)

Pass 0 for finding allocno costs

    a18 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a13(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a18(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r149,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a13(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a18(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 77(l0): point = 1
   Insn 73(l0): point = 4
   Insn 72(l0): point = 6
   Insn 71(l0): point = 8
   Insn 68(l0): point = 10
   Insn 70(l0): point = 12
   Insn 67(l0): point = 14
   Insn 66(l0): point = 16
   Insn 65(l0): point = 18
   Insn 64(l0): point = 20
   Insn 63(l0): point = 22
   Insn 108(l0): point = 25
   Insn 54(l0): point = 27
   Insn 58(l0): point = 29
   Insn 119(l0): point = 31
   Insn 52(l0): point = 33
   Insn 56(l0): point = 35
   Insn 49(l0): point = 38
   Insn 48(l0): point = 40
   Insn 47(l0): point = 42
   Insn 114(l0): point = 44
   Insn 113(l0): point = 46
   Insn 106(l0): point = 49
   Insn 39(l0): point = 51
   Insn 36(l0): point = 54
   Insn 104(l0): point = 57
   Insn 31(l0): point = 59
   Insn 29(l0): point = 62
   Insn 28(l0): point = 64
   Insn 26(l0): point = 66
   Insn 24(l0): point = 68
   Insn 22(l0): point = 70
   Insn 20(l0): point = 72
   Insn 25(l0): point = 74
   Insn 23(l0): point = 76
   Insn 21(l0): point = 78
   Insn 19(l0): point = 80
   Insn 17(l0): point = 83
   Insn 16(l0): point = 85
   Insn 13(l0): point = 88
   Insn 116(l0): point = 90
   Insn 115(l0): point = 92
   Insn 8(l0): point = 95
   Insn 2(l0): point = 97
   Insn 101(l0): point = 99
   Insn 7(l0): point = 101
   Insn 111(l1): point = 104
   Insn 89(l1): point = 106
   Insn 88(l1): point = 108
   Insn 118(l1): point = 110
   Insn 87(l1): point = 112
   Insn 82(l1): point = 115
   Insn 86(l1): point = 117
   Insn 81(l1): point = 119
   Insn 79(l1): point = 121
   Insn 76(l1): point = 123
   Insn 78(l1): point = 125
 a0(r164): [1..1]
 a1(r160): [5..6]
 a2(r159): [7..8]
 a3(r143): [95..101] [83..88] [38..48] [9..24]
 a4(r157): [11..14]
 a5(r142): [60..97] [55..56] [38..48] [13..24]
 a6(r156): [15..16]
 a7(r155): [19..20]
 a8(r154): [21..22]
 a9(r153): [30..31]
 a10(r152): [83..99] [36..48]
 a11(r151): [41..42]
 a12(r149): [43..46]
 a13(r141): [57..59] [52..54]
 a14(r148): [69..76]
 a15(r147): [71..78]
 a16(r146): [73..80]
 a17(r144): [89..92]
 a18(r164): [104..127]
 a19(r163): [109..110]
 a20(r135): [118..123]
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 135
Compressing live ranges: from 128 to 52 - 40%
Ranges after the compression:
 a0(r164): [46..51] [0..0]
 a1(r160): [1..2]
 a2(r159): [3..4]
 a3(r143): [42..45] [38..39] [19..24] [5..15]
 a4(r157): [6..8]
 a5(r142): [31..43] [27..28] [19..24] [7..15]
 a6(r156): [9..10]
 a7(r155): [11..12]
 a8(r154): [13..14]
 a9(r153): [16..17]
 a10(r152): [38..44] [18..24]
 a11(r151): [20..21]
 a12(r149): [22..23]
 a13(r141): [29..30] [25..26]
 a14(r148): [32..35]
 a15(r147): [33..36]
 a16(r146): [34..37]
 a17(r144): [40..41]
 a19(r163): [47..48]
 a20(r135): [49..50]
+++Allocating 160 bytes for conflict table (uncompressed size 168)
;; a0(r164,l0) conflicts: a19(r163,l0) a20(r135,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r160,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r159,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r143,l0) conflicts: a4(r157,l0) a5(r142,l0) a6(r156,l0) a7(r155,l0) a8(r154,l0) a10(r152,l0) a11(r151,l0) a12(r149,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r157,l0) conflicts: a3(r143,l0) a5(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r142,l0) conflicts: a3(r143,l0) a4(r157,l0) a6(r156,l0) a7(r155,l0) a8(r154,l0) a10(r152,l0) a11(r151,l0) a12(r149,l0) a14(r148,l0) a15(r147,l0) a16(r146,l0) a17(r144,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a6(r156,l0) conflicts: a3(r143,l0) a5(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r155,l0) conflicts: a3(r143,l0) a5(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r154,l0) conflicts: a3(r143,l0) a5(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r153,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r152,l0) conflicts: a3(r143,l0) a5(r142,l0) a11(r151,l0) a12(r149,l0) a17(r144,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a11(r151,l0) conflicts: a3(r143,l0) a5(r142,l0) a10(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r149,l0) conflicts: a3(r143,l0) a5(r142,l0) a10(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r141,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r148,l0) conflicts: a5(r142,l0) a15(r147,l0) a16(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a15(r147,l0) conflicts: a5(r142,l0) a14(r148,l0) a16(r146,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a16(r146,l0) conflicts: a5(r142,l0) a14(r148,l0) a15(r147,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a17(r144,l0) conflicts: a5(r142,l0) a10(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r163,l0) conflicts: a0(r164,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a20(r135,l0) conflicts: a0(r164,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=2, blocks=16, points=52
    allocnos=21, copies=0, conflicts=2, ranges=29

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r164 1r160 2r159 3r143 4r157 5r142 6r156 7r155 8r154 9r153 10r152 11r151 12r149 13r141 14r148 15r147 16r146 17r144 19r163 20r135
    modified regnos: 135 141 142 143 144 146 147 148 149 151 152 153 154 155 156 157 159 160 163 164
    border:
    Pressure: GENERAL_REGS=5
    Reg 164 of GENERAL_REGS has 5 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
      Pushing a11(r151,l0)
      Pushing a9(r153,l0)
      Pushing a8(r154,l0)
      Pushing a7(r155,l0)
      Pushing a6(r156,l0)
      Pushing a4(r157,l0)
      Pushing a2(r159,l0)
      Pushing a1(r160,l0)
      Pushing a13(r141,l0)
      Pushing a17(r144,l0)
      Pushing a12(r149,l0)
      Pushing a16(r146,l0)
      Pushing a15(r147,l0)
      Pushing a14(r148,l0)
      Pushing a10(r152,l0)
      Pushing a20(r135,l0)
      Pushing a19(r163,l0)
      Pushing a3(r143,l0)
      Pushing a5(r142,l0)
      Pushing a0(r164,l0)
      Popping a0(r164,l0)  -- assign reg 4
      Popping a5(r142,l0)  -- assign reg 4
      Popping a3(r143,l0)  -- assign reg 1
      Popping a19(r163,l0)  -- assign reg 2
      Popping a20(r135,l0)  -- assign reg 5
      Popping a10(r152,l0)  -- assign reg 14
      Popping a14(r148,l0)  -- assign reg 3
      Popping a15(r147,l0)  -- assign reg 2
      Popping a16(r146,l0)  -- assign reg 1
      Popping a12(r149,l0)  -- assign reg 3
      Popping a17(r144,l0)  -- assign reg 3
      Popping a13(r141,l0)  -- assign reg 3
      Popping a1(r160,l0)  -- assign reg 3
      Popping a2(r159,l0)  -- assign reg 3
      Popping a4(r157,l0)  -- assign reg 3
      Popping a6(r156,l0)  -- assign reg 3
      Popping a7(r155,l0)  -- assign reg 3
      Popping a8(r154,l0)  -- assign reg 3
      Popping a9(r153,l0)  -- assign reg 3
      Popping a11(r151,l0)  -- assign reg 3
Disposition:
   20:r135 l0     5   13:r141 l0     3    5:r142 l0     4    3:r143 l0     1
   17:r144 l0     3   16:r146 l0     1   15:r147 l0     2   14:r148 l0     3
   12:r149 l0     3   11:r151 l0     3   10:r152 l0    14    9:r153 l0     3
    8:r154 l0     3    7:r155 l0     3    6:r156 l0     3    4:r157 l0     3
    2:r159 l0     3    1:r160 l0     3   19:r163 l0     2    0:r164 l0     4
New iteration of spill/restore move
+++Costs: overall -500, reg -500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 1, 143
insn=101, live_throughout: 0, 13, 24, 143, dead_or_set: 14, 152
insn=2, live_throughout: 13, 24, 143, 152, dead_or_set: 0, 142
insn=8, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=115, live_throughout: 13, 142, 152, dead_or_set: 144
insn=116, live_throughout: 13, 142, 152, dead_or_set: 144
insn=13, live_throughout: 13, 142, 152, dead_or_set: 143, 144
insn=14, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=16, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=17, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=19, live_throughout: 13, 142, dead_or_set: 146
insn=21, live_throughout: 13, 142, 146, dead_or_set: 147
insn=23, live_throughout: 13, 142, 146, 147, dead_or_set: 148
insn=25, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 0
insn=20, live_throughout: 0, 13, 142, 147, 148, dead_or_set: 146
insn=22, live_throughout: 0, 13, 142, 148, dead_or_set: 147
insn=24, live_throughout: 0, 13, 142, dead_or_set: 148
insn=26, live_throughout: 13, 142, dead_or_set: 0, 14
insn=28, live_throughout: 13, 142, dead_or_set: 0
insn=29, live_throughout: 13, 142, dead_or_set: 
insn=31, live_throughout: 13, dead_or_set: 141, 142
insn=104, live_throughout: 13, 141, dead_or_set: 
insn=34, live_throughout: 13, 142, dead_or_set: 
insn=36, live_throughout: 13, dead_or_set: 141, 142
insn=37, live_throughout: 13, 141, dead_or_set: 
insn=39, live_throughout: 13, dead_or_set: 141
insn=106, live_throughout: 13, dead_or_set: 
insn=42, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=113, live_throughout: 13, 142, 143, 152, dead_or_set: 149
insn=114, live_throughout: 13, 142, 143, 152, dead_or_set: 149
insn=47, live_throughout: 13, 142, 143, 152, dead_or_set: 149, 151
insn=48, live_throughout: 13, 142, 143, 152, dead_or_set: 151
insn=49, live_throughout: 13, 142, 143, 152, dead_or_set: 
insn=56, live_throughout: 13, dead_or_set: 152
insn=52, live_throughout: 13, dead_or_set: 11
insn=119, live_throughout: 13, dead_or_set: 153
insn=58, live_throughout: 13, dead_or_set: 153
insn=54, live_throughout: 13, dead_or_set: 
insn=108, live_throughout: 13, dead_or_set: 
insn=61, live_throughout: 13, 142, 143, dead_or_set: 
insn=63, live_throughout: 13, 142, 143, dead_or_set: 154
insn=64, live_throughout: 13, 142, 143, dead_or_set: 154, 155
insn=65, live_throughout: 13, 142, 143, dead_or_set: 155
insn=66, live_throughout: 13, 142, 143, dead_or_set: 156
insn=67, live_throughout: 13, 142, 143, dead_or_set: 156, 157
insn=70, live_throughout: 13, 143, 157, dead_or_set: 142
insn=68, live_throughout: 13, 143, dead_or_set: 157
insn=71, live_throughout: 13, dead_or_set: 143, 159
insn=72, live_throughout: 13, dead_or_set: 159, 160
insn=73, live_throughout: 13, dead_or_set: 160
insn=74, live_throughout: 13, dead_or_set: 
insn=77, live_throughout: 13, dead_or_set: 164
insn=110, live_throughout: 13, 164, dead_or_set: 
insn=78, live_throughout: 13, 164, dead_or_set: 0
insn=76, live_throughout: 0, 13, 164, dead_or_set: 135
insn=79, live_throughout: 13, 135, 164, dead_or_set: 0, 14
insn=81, live_throughout: 13, 14, 135, 164, dead_or_set: 0
insn=86, live_throughout: 13, 14, 24, 164, dead_or_set: 0, 135
insn=82, live_throughout: 0, 13, 14, 164, dead_or_set: 
insn=87, live_throughout: 0, 13, 164, dead_or_set: 1
insn=118, live_throughout: 0, 1, 13, 164, dead_or_set: 163
insn=88, live_throughout: 0, 1, 13, 164, dead_or_set: 2, 163
insn=89, live_throughout: 13, 164, dead_or_set: 0, 1, 2, 14
insn=111, live_throughout: 13, 164, dead_or_set: 
insn=97, live_throughout: 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 119 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 66 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 118 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 77 (nil))
changing reg in insn 76
changing reg in insn 86
changing reg in insn 36
changing reg in insn 31
changing reg in insn 39
changing reg in insn 2
changing reg in insn 70
changing reg in insn 36
changing reg in insn 31
changing reg in insn 25
changing reg in insn 23
changing reg in insn 21
changing reg in insn 19
changing reg in insn 16
changing reg in insn 19
changing reg in insn 7
changing reg in insn 13
changing reg in insn 71
changing reg in insn 66
changing reg in insn 63
changing reg in insn 48
changing reg in insn 66
changing reg in insn 63
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 101
changing reg in insn 56
changing reg in insn 119
changing reg in insn 58
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 118
changing reg in insn 88
changing reg in insn 77
changing reg in insn 78
Spilling for insn 115.
Using reg 2 for reload 0
Spilling for insn 20.
Spilling for insn 22.
Spilling for insn 24.
Spilling for insn 39.
Spilling for insn 113.
Using reg 2 for reload 0
Spilling for insn 56.
Spilling for insn 52.
Spilling for insn 58.
Spilling for insn 54.
Spilling for insn 65.
Spilling for insn 70.
Spilling for insn 68.
Spilling for insn 73.

Reloads for insn # 115
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])

Reloads for insn # 22
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])

Reloads for insn # 24
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])

Reloads for insn # 39
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])

Reloads for insn # 113
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 56
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])

Reloads for insn # 52
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])

Reloads for insn # 58
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])

Reloads for insn # 65
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])

Reloads for insn # 70
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])

Reloads for insn # 68
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])

Reloads for insn # 73
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                                                        (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
deleting insn with uid = 101.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 89.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 31 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 20 count 31 (  1.9)


unwind_backtrace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={8d,8u,2d} r2={9d,5u} r3={19d,14u} r4={2d,9u,1d} r5={1d,1u} r11={1d,32u,2d} r12={4d} r13={1d,21u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,5u} r25={1d,1u,4d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 508{395d,104u,9e} in 58{55 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 5 4 2 NOTE_INSN_DELETED)

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 2 2 arch/arm/kernel/unwind.c:359 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ tsk ])
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (reg:SI 1 r1 [ tsk ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 2 7 8 2 arch/arm/kernel/unwind.c:353 (set (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
        (reg:SI 0 r0 [ regs ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 8 2 9 2 arch/arm/kernel/unwind.c:359 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 14)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  3 [15.0%]  (fallthru)
;; Succ edge  4 [85.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [15.0%]  (fallthru)
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 11 9 121 3 NOTE_INSN_DELETED)

(insn 121 11 115 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 115 121 116 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 116 115 13 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [144])
        (and:SI (reg:SI 3 r3 [144])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 116 14 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [85.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 14 13 15 4 94 "" [1 uses])

(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 4 arch/arm/kernel/unwind.c:362 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 4 arch/arm/kernel/unwind.c:362 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 4 -> ( 5 9)
;; lr  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  5 [69.8%]  (fallthru)
;; Succ edge  9 [30.2%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 18 17 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 18 19 5 NOTE_INSN_DELETED)

(insn 19 27 21 5 arch/arm/kernel/unwind.c:363 (set (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 44 [0x2c])) [0 <variable>.uregs+44 S4 A32])
        (nil)))

(insn 21 19 23 5 arch/arm/kernel/unwind.c:364 (set (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 52 [0x34])) [0 <variable>.uregs+52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 21 25 5 arch/arm/kernel/unwind.c:365 (set (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 25 23 20 5 arch/arm/kernel/unwind.c:367 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 25 22 5 arch/arm/kernel/unwind.c:363 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 1 r1 [orig:146 <variable>.uregs+44 ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 22 20 24 5 arch/arm/kernel/unwind.c:364 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 2 r2 [orig:147 <variable>.uregs+52 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 24 22 26 5 arch/arm/kernel/unwind.c:365 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 3 r3 [orig:148 <variable>.uregs+56 ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 26 24 28 5 arch/arm/kernel/unwind.c:367 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_text_address") [flags 0x41] <function_decl 0x10a58300 kernel_text_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 28 26 29 5 arch/arm/kernel/unwind.c:367 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 5 arch/arm/kernel/unwind.c:367 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 104 6 arch/arm/kernel/unwind.c:367 discrim 1 (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 104 31 105 6 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%] 

(barrier 105 104 34)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 34 105 35 7 96 "" [1 uses])

(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 7 arch/arm/kernel/unwind.c:367 discrim 2 (set (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 regs ] [142])
                (const_int 56 [0x38])) [0 <variable>.uregs+56 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 3 [r3] 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 37 36 38 8 97 "" [1 uses])

(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 106 8 arch/arm/kernel/unwind.c:367 discrim 3 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:141 iftmp.237 ] [141])) 167 {*arm_movsi_insn} (nil))

(jump_insn 106 39 107 8 (set (pc)
        (label_ref 74)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  12 [100.0%] 

(barrier 107 106 42)

;; Start of basic block ( 4) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 1 [r1] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [30.2%] 
(code_label 42 107 43 9 95 "" [1 uses])

(note 43 42 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 45 43 122 9 NOTE_INSN_DELETED)

(insn 122 45 113 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 113 122 114 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 114 113 47 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [149])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 47 114 48 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [149])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
            (reg/f:SI 3 r3 [orig:151 <variable>.task ] [151]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 49 48 50 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]


;; Succ edge  10 [6.7%]  (fallthru)
;; Succ edge  11 [93.3%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  9 [6.7%]  (fallthru)
(note 50 49 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 56 50 52 10 arch/arm/kernel/unwind.c:372 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg:SI 14 lr [152])) 167 {*arm_movsi_insn} (nil))

(insn 52 56 119 10 arch/arm/kernel/unwind.c:370 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg/f:SI 11 fp)) 167 {*arm_movsi_insn} (nil))

(insn 119 52 58 10 arch/arm/kernel/unwind.c:373 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
        (nil)))

(insn 58 119 54 10 arch/arm/kernel/unwind.c:373 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg/f:SI 3 r3 [153])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("unwind_backtrace") [flags 0x3] <function_decl 0x11039480 unwind_backtrace>)
        (nil)))

(insn 54 58 108 10 arch/arm/kernel/unwind.c:371 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(jump_insn 108 54 109 10 (set (pc)
        (label_ref 74)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  12 [100.0%] 

(barrier 109 108 61)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 1 [r1] 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  9 [93.3%] 
(code_label 61 109 62 11 99 "" [1 uses])

(note 62 61 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 63 62 64 11 arch/arm/kernel/unwind.c:376 (set (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn 64 63 65 11 arch/arm/kernel/unwind.c:376 (set (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:154 <variable>.stack ] [154])
                (const_int 56 [0x38])) [0 <variable>.cpu_context.fp+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.fp+0 S4 A64])
        (nil)))

(insn 65 64 66 11 arch/arm/kernel/unwind.c:376 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [0 frame.fp+0 S4 A64])
        (reg:SI 3 r3 [orig:155 <variable>.cpu_context.fp ] [155])) 167 {*arm_movsi_insn} (nil))

(insn 66 65 67 11 arch/arm/kernel/unwind.c:377 (set (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])
        (nil)))

(insn 67 66 70 11 arch/arm/kernel/unwind.c:377 (set (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:156 <variable>.stack ] [156])
                (const_int 60 [0x3c])) [0 <variable>.cpu_context.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn 70 67 68 11 arch/arm/kernel/unwind.c:382 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [0 frame.lr+0 S4 A64])
        (reg/v/f:SI 4 r4 [orig:142 regs ] [142])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 68 70 71 11 arch/arm/kernel/unwind.c:377 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (reg:SI 3 r3 [orig:157 <variable>.cpu_context.sp ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 71 68 72 11 arch/arm/kernel/unwind.c:383 (set (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 tsk ] [143])
                (const_int 4 [0x4])) [0 <variable>.stack+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 72 71 73 11 arch/arm/kernel/unwind.c:383 (set (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:159 <variable>.stack ] [159])
                (const_int 64 [0x40])) [0 <variable>.cpu_context.pc+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 frame.pc+0 S4 A32])
        (nil)))

(insn 73 72 74 11 arch/arm/kernel/unwind.c:383 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])
        (reg:SI 3 r3 [orig:160 <variable>.cpu_context.pc ] [160])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 8 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  10 [100.0%] 
(code_label 74 73 75 12 98 "" [2 uses])

(note 75 74 77 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 77 75 110 12 arch/arm/kernel/unwind.c:390 (set (reg/f:SI 4 r4 [164])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 11 fp)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 14) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%]  (dfs_back)
(code_label 110 77 102 13 102 "" [1 uses])

(note 102 110 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 80 102 78 13 NOTE_INSN_DELETED)

(insn 78 80 76 13 arch/arm/kernel/unwind.c:390 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 76 78 79 13 arch/arm/kernel/unwind.c:388 (set (reg/v:SI 5 r5 [orig:135 where ] [135])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 79 76 81 13 arch/arm/kernel/unwind.c:390 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unwind_frame") [flags 0x3] <function_decl 0x11024e00 unwind_frame>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 81 79 86 13 arch/arm/kernel/unwind.c:391 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 86 81 82 13 arch/arm/kernel/unwind.c:393 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:135 where ] [135])) 167 {*arm_movsi_insn} (nil))

(jump_insn 82 86 83 13 arch/arm/kernel/unwind.c:391 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 97)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 900 [0x384])
        (nil)))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  15 [9.0%]  (loop_exit)
;; Succ edge  14 [91.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  13 [91.0%]  (fallthru)
(note 83 82 85 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 85 83 87 14 NOTE_INSN_DELETED)

(insn 87 85 118 14 arch/arm/kernel/unwind.c:393 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [0 frame.pc+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 118 87 88 14 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2 [orig:163 frame.sp ] [163])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [0 frame.sp+0 S4 A32])
        (nil)))

(insn 88 118 89 14 arch/arm/kernel/unwind.c:393 (set (reg:SI 2 r2)
        (plus:SI (reg:SI 2 r2 [orig:163 frame.sp ] [163])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(call_insn 89 88 111 14 arch/arm/kernel/unwind.c:393 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_backtrace_entry") [flags 0x41] <function_decl 0x11039280 dump_backtrace_entry>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 111 89 112 14 arch/arm/kernel/unwind.c:394 (set (pc)
        (label_ref 110)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 13)
;; lr  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]
;; live  out 	 4 [r4] 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  13 [100.0%]  (dfs_back)

(barrier 112 111 97)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [9.0%]  (loop_exit)
(code_label 97 112 100 15 101 "" [1 uses])

(note 100 97 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 15 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 117 100 120 NOTE_INSN_DELETED)

(note 120 117 0 NOTE_INSN_DELETED)

