
;; Function ioport_map (ioport_map)[0:985]


;; Generating RTL for gimple basic block 2

;; return tegra_pcie_io_base + (port & 65535);

(insn 7 6 8 arch/arm/mm/iomap.c:19 (set (reg/f:SI 137)
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) -1 (nil))

(insn 8 7 9 arch/arm/mm/iomap.c:19 (set (reg:SI 139)
        (ashift:SI (reg/v:SI 134 [ port ])
            (const_int 16 [0x10]))) -1 (nil))

(insn 9 8 10 arch/arm/mm/iomap.c:19 (set (reg:SI 138)
        (lshiftrt:SI (reg:SI 139)
            (const_int 16 [0x10]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 134 [ port ])
            (const_int 65535 [0xffff]))
        (nil)))

(insn 10 9 11 arch/arm/mm/iomap.c:19 (set (reg:SI 140)
        (mem/f/c/i:SI (reg/f:SI 137) [0 tegra_pcie_io_base+0 S4 A32])) -1 (nil))

(insn 11 10 12 arch/arm/mm/iomap.c:19 (set (reg:SI 136)
        (plus:SI (reg:SI 140)
            (reg:SI 138))) -1 (nil))

(insn 12 11 13 arch/arm/mm/iomap.c:19 (set (reg:SI 133 [ <result> ])
        (reg:SI 136)) -1 (nil))

(jump_insn 13 12 14 arch/arm/mm/iomap.c:19 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 14 13 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/mm/iomap.c:17 (set (reg/v:SI 134 [ port ])
        (reg:SI 0 r0 [ port ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/iomap.c:17 (set (reg/v:SI 135 [ nr ])
        (reg:SI 1 r1 [ nr ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/mm/iomap.c:19 (set (reg/f:SI 137)
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) -1 (nil))

(insn 8 7 9 3 arch/arm/mm/iomap.c:19 (set (reg:SI 139)
        (ashift:SI (reg/v:SI 134 [ port ])
            (const_int 16 [0x10]))) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/iomap.c:19 (set (reg:SI 138)
        (lshiftrt:SI (reg:SI 139)
            (const_int 16 [0x10]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 134 [ port ])
            (const_int 65535 [0xffff]))
        (nil)))

(insn 10 9 11 3 arch/arm/mm/iomap.c:19 (set (reg:SI 140)
        (mem/f/c/i:SI (reg/f:SI 137) [0 tegra_pcie_io_base+0 S4 A32])) -1 (nil))

(insn 11 10 12 3 arch/arm/mm/iomap.c:19 (set (reg:SI 136)
        (plus:SI (reg:SI 140)
            (reg:SI 138))) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/iomap.c:19 (set (reg:SI 133 [ <result> ])
        (reg:SI 136)) -1 (nil))

(jump_insn 13 12 14 3 arch/arm/mm/iomap.c:19 (set (pc)
        (label_ref 15)) -1 (nil))
;; End of basic block 3 -> ( 5)

;; Succ edge  5 [100.0%] 

(barrier 14 13 23)

;; Start of basic block () -> 4
(note 23 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 23 18 4 arch/arm/mm/iomap.c:19 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 18 17 19 4 arch/arm/mm/iomap.c:19 (clobber (reg:SI 133 [ <result> ])) -1 (nil))

(jump_insn 19 18 20 4 arch/arm/mm/iomap.c:19 (set (pc)
        (label_ref 21)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 20 19 15)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [100.0%] 
(code_label 15 20 24 5 1 "" [1 uses])

(note 24 15 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 16 24 21 5 arch/arm/mm/iomap.c:19 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 21 16 25 6 2 "" [1 uses])

(note 25 21 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 22 25 0 6 arch/arm/mm/iomap.c:19 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function ioport_unmap (ioport_unmap)[0:986]


;; Generating RTL for gimple basic block 2


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/mm/iomap.c:23 (set (reg/v/f:SI 133 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(note 3 2 5 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 5 3 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 3 -> ( 4)

;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [100.0%]  (fallthru)
(note 10 5 7 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 7 10 8 4 arch/arm/mm/iomap.c:24 (set (pc)
        (label_ref 9)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 8 7 6)

;; Start of basic block () -> 5
(code_label 6 8 11 5 5 "" [0 uses])

(note 11 6 9 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 9 11 12 6 6 "" [1 uses])

(note 12 9 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function pci_iounmap (pci_iounmap)[0:988]


;; Generating RTL for gimple basic block 2

;; addr.286 = (long unsigned int) addr;

(insn 7 6 0 arch/arm/mm/iomap.c:61 (set (reg:SI 133 [ addr.286 ])
        (reg/v/f:SI 135 [ addr ])) -1 (nil))

;; if (addr.286 <= 4160749567 & addr.286 >= ((long unsigned int) high_memory + 8388608 & 4286578688) != 0)

(insn 8 7 9 arch/arm/mm/iomap.c:62 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ addr.286 ])
            (const_int -134217729 [0xfffffffff7ffffff]))) -1 (nil))

(insn 9 8 10 arch/arm/mm/iomap.c:62 (set (reg:SI 137)
        (leu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 10 9 11 arch/arm/mm/iomap.c:62 (set (reg:QI 136)
        (subreg:QI (reg:SI 137) 0)) -1 (nil))

(insn 11 10 12 arch/arm/mm/iomap.c:61 (set (reg/f:SI 138)
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10ffd7e0 high_memory>)) -1 (nil))

(insn 12 11 13 arch/arm/mm/iomap.c:61 (set (reg:SI 140)
        (mem/f/c/i:SI (reg/f:SI 138) [0 high_memory+0 S4 A32])) -1 (nil))

(insn 13 12 14 arch/arm/mm/iomap.c:61 (set (reg:SI 139)
        (plus:SI (reg:SI 140)
            (const_int 8388608 [0x800000]))) -1 (nil))

(insn 14 13 15 arch/arm/mm/iomap.c:61 (set (reg:SI 142)
        (lshiftrt:SI (reg:SI 139)
            (const_int 23 [0x17]))) -1 (nil))

(insn 15 14 16 arch/arm/mm/iomap.c:61 (set (reg:SI 141)
        (ashift:SI (reg:SI 142)
            (const_int 23 [0x17]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 139)
            (const_int -8388608 [0xffffffffff800000]))
        (nil)))

(insn 16 15 17 arch/arm/mm/iomap.c:61 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ addr.286 ])
            (reg:SI 141))) -1 (nil))

(insn 17 16 18 arch/arm/mm/iomap.c:61 (set (reg:SI 144)
        (geu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 18 17 19 arch/arm/mm/iomap.c:61 (set (reg:QI 143)
        (subreg:QI (reg:SI 144) 0)) -1 (nil))

(insn 19 18 20 arch/arm/mm/iomap.c:61 (set (reg:SI 145)
        (and:SI (subreg:SI (reg:QI 136) 0)
            (subreg:SI (reg:QI 143) 0))) -1 (nil))

(insn 20 19 21 arch/arm/mm/iomap.c:61 (set (reg:QI 146)
        (subreg:QI (reg:SI 145) 0)) -1 (nil))

(insn 21 20 22 arch/arm/mm/iomap.c:61 (set (reg:SI 147)
        (zero_extend:SI (reg:QI 146))) -1 (nil))

(insn 22 21 23 arch/arm/mm/iomap.c:61 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 0 arch/arm/mm/iomap.c:61 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))

;; Generating RTL for gimple basic block 3

;; tegra_iounmap (addr); [tail call]

(insn 25 24 26 3 arch/arm/mm/iomap.c:63 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ addr ])) -1 (nil))

(call_insn/j 26 25 27 3 arch/arm/mm/iomap.c:63 (parallel [
            (call (mem:SI (symbol_ref:SI ("tegra_iounmap") [flags 0x41] <function_decl 0x10eddf80 tegra_iounmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(barrier 27 26 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 28 27 29 8 "" [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/mm/iomap.c:60 (set (reg/v/f:SI 134 [ dev ])
        (reg:SI 0 r0 [ dev ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/iomap.c:60 (set (reg/v/f:SI 135 [ addr ])
        (reg:SI 1 r1 [ addr ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/mm/iomap.c:61 (set (reg:SI 133 [ addr.286 ])
        (reg/v/f:SI 135 [ addr ])) -1 (nil))

(insn 8 7 9 3 arch/arm/mm/iomap.c:62 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ addr.286 ])
            (const_int -134217729 [0xfffffffff7ffffff]))) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/iomap.c:62 (set (reg:SI 137)
        (leu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 10 9 11 3 arch/arm/mm/iomap.c:62 (set (reg:QI 136)
        (subreg:QI (reg:SI 137) 0)) -1 (nil))

(insn 11 10 12 3 arch/arm/mm/iomap.c:61 (set (reg/f:SI 138)
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10ffd7e0 high_memory>)) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/iomap.c:61 (set (reg:SI 140)
        (mem/f/c/i:SI (reg/f:SI 138) [0 high_memory+0 S4 A32])) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/iomap.c:61 (set (reg:SI 139)
        (plus:SI (reg:SI 140)
            (const_int 8388608 [0x800000]))) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/iomap.c:61 (set (reg:SI 142)
        (lshiftrt:SI (reg:SI 139)
            (const_int 23 [0x17]))) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/iomap.c:61 (set (reg:SI 141)
        (ashift:SI (reg:SI 142)
            (const_int 23 [0x17]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 139)
            (const_int -8388608 [0xffffffffff800000]))
        (nil)))

(insn 16 15 17 3 arch/arm/mm/iomap.c:61 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ addr.286 ])
            (reg:SI 141))) -1 (nil))

(insn 17 16 18 3 arch/arm/mm/iomap.c:61 (set (reg:SI 144)
        (geu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 18 17 19 3 arch/arm/mm/iomap.c:61 (set (reg:QI 143)
        (subreg:QI (reg:SI 144) 0)) -1 (nil))

(insn 19 18 20 3 arch/arm/mm/iomap.c:61 (set (reg:SI 145)
        (and:SI (subreg:SI (reg:QI 136) 0)
            (subreg:SI (reg:QI 143) 0))) -1 (nil))

(insn 20 19 21 3 arch/arm/mm/iomap.c:61 (set (reg:QI 146)
        (subreg:QI (reg:SI 145) 0)) -1 (nil))

(insn 21 20 22 3 arch/arm/mm/iomap.c:61 (set (reg:SI 147)
        (zero_extend:SI (reg:QI 146))) -1 (nil))

(insn 22 21 23 3 arch/arm/mm/iomap.c:61 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 24 3 arch/arm/mm/iomap.c:61 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  5 [61.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [39.0%]  (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 arch/arm/mm/iomap.c:63 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ addr ])) -1 (nil))

(call_insn/j 26 25 27 4 arch/arm/mm/iomap.c:63 (parallel [
            (call (mem:SI (symbol_ref:SI ("tegra_iounmap") [flags 0x41] <function_decl 0x10eddf80 tegra_iounmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 28)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [61.0%] 
(code_label 28 27 29 5 8 "" [1 uses])

(note 29 28 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 34 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 31 34 32 6 arch/arm/mm/iomap.c:64 (set (pc)
        (label_ref 33)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 32 31 30)

;; Start of basic block () -> 7
(code_label 30 32 35 7 7 "" [0 uses])

(note 35 30 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 33 35 36 8 9 "" [1 uses])

(note 36 33 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function pci_iomap (pci_iomap)[0:987]


;; Generating RTL for gimple basic block 2

;; start = dev->resource[bar].start;

(insn 8 7 9 arch/arm/mm/iomap.c:40 (set (reg:SI 141)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 9 8 10 arch/arm/mm/iomap.c:40 (set (reg:SI 143)
        (const_int 28 [0x1c])) -1 (nil))

(insn 10 9 11 arch/arm/mm/iomap.c:40 (set (reg:SI 142)
        (mult:SI (reg:SI 143)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 11 10 12 arch/arm/mm/iomap.c:40 (set (reg:SI 144)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 142))) -1 (nil))

(insn 12 11 13 arch/arm/mm/iomap.c:40 (set (reg/f:SI 145)
        (plus:SI (reg:SI 144)
            (reg:SI 141))) -1 (nil))

(insn 13 12 0 arch/arm/mm/iomap.c:40 (set (reg/v:SI 136 [ start ])
        (mem/s/j:SI (reg/f:SI 145) [0 <variable>.start+0 S4 A32])) -1 (nil))

;; if (start != 0)

(insn 14 13 15 arch/arm/mm/iomap.c:41 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ start ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 15 14 0 arch/arm/mm/iomap.c:41 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 3

;; if (dev->resource[bar].end != 0)

(insn 17 16 18 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 146)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 18 17 19 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 148)
        (const_int 28 [0x1c])) -1 (nil))

(insn 19 18 20 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 147)
        (mult:SI (reg:SI 148)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 20 19 21 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 149)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 147))) -1 (nil))

(insn 21 20 22 arch/arm/mm/iomap.c:41 discrim 2 (set (reg/f:SI 150)
        (plus:SI (reg:SI 149)
            (reg:SI 146))) -1 (nil))

(insn 22 21 23 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 151)
        (mem/s/j:SI (plus:SI (reg/f:SI 150)
                (const_int 4 [0x4])) [0 <variable>.end+0 S4 A32])) -1 (nil))

(insn 23 22 24 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 151)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 24 23 0 arch/arm/mm/iomap.c:41 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))

;; Generating RTL for gimple basic block 4

;; len = 0;

(insn 26 25 0 arch/arm/mm/iomap.c:41 discrim 3 (set (reg/v:SI 135 [ len ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 29 28 30 14 "" [0 uses])

(note 30 29 0 NOTE_INSN_BASIC_BLOCK)

;; len = (dev->resource[bar].end + 1) - start;

(insn 31 30 32 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 152)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 32 31 33 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 154)
        (const_int 28 [0x1c])) -1 (nil))

(insn 33 32 34 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 153)
        (mult:SI (reg:SI 154)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 34 33 35 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 155)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 153))) -1 (nil))

(insn 35 34 36 arch/arm/mm/iomap.c:41 discrim 1 (set (reg/f:SI 156)
        (plus:SI (reg:SI 155)
            (reg:SI 152))) -1 (nil))

(insn 36 35 37 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 158)
        (mem/s/j:SI (plus:SI (reg/f:SI 156)
                (const_int 4 [0x4])) [0 <variable>.end+0 S4 A32])) -1 (nil))

(insn 37 36 38 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 157)
        (plus:SI (reg:SI 158)
            (const_int 1 [0x1]))) -1 (nil))

(insn 38 37 0 arch/arm/mm/iomap.c:41 discrim 1 (set (reg/v:SI 135 [ len ])
        (minus:SI (reg:SI 157)
            (reg/v:SI 136 [ start ]))) -1 (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 39 38 40 15 "" [0 uses])

(note 40 39 0 NOTE_INSN_BASIC_BLOCK)

;; flags = dev->resource[bar].flags;

(insn 41 40 42 arch/arm/mm/iomap.c:42 (set (reg:SI 159)
        (const_int 472 [0x1d8])) -1 (nil))

(insn 42 41 43 arch/arm/mm/iomap.c:42 (set (reg:SI 161)
        (const_int 28 [0x1c])) -1 (nil))

(insn 43 42 44 arch/arm/mm/iomap.c:42 (set (reg:SI 160)
        (mult:SI (reg:SI 161)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 44 43 45 arch/arm/mm/iomap.c:42 (set (reg:SI 162)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 160))) -1 (nil))

(insn 45 44 46 arch/arm/mm/iomap.c:42 (set (reg/f:SI 163)
        (plus:SI (reg:SI 162)
            (reg:SI 159))) -1 (nil))

(insn 46 45 0 arch/arm/mm/iomap.c:42 (set (reg/v:SI 134 [ flags ])
        (mem/s/j:SI (plus:SI (reg/f:SI 163)
                (const_int 4 [0x4])) [0 <variable>.flags+0 S4 A32])) -1 (nil))

;; if (len == 0 | start == 0 != 0)

(insn 47 46 48 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ len ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 48 47 49 arch/arm/mm/iomap.c:44 (set (reg:SI 165)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 49 48 50 arch/arm/mm/iomap.c:44 (set (reg:QI 164)
        (subreg:QI (reg:SI 165) 0)) -1 (nil))

(insn 50 49 51 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ start ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 51 50 52 arch/arm/mm/iomap.c:44 (set (reg:SI 167)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 52 51 53 arch/arm/mm/iomap.c:44 (set (reg:QI 166)
        (subreg:QI (reg:SI 167) 0)) -1 (nil))

(insn 53 52 54 arch/arm/mm/iomap.c:44 (set (reg:SI 168)
        (ior:SI (subreg:SI (reg:QI 164) 0)
            (subreg:SI (reg:QI 166) 0))) -1 (nil))

(insn 54 53 55 arch/arm/mm/iomap.c:44 (set (reg:QI 169)
        (subreg:QI (reg:SI 168) 0)) -1 (nil))

(insn 55 54 56 arch/arm/mm/iomap.c:44 (set (reg:SI 170)
        (zero_extend:SI (reg:QI 169))) -1 (nil))

(insn 56 55 57 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 57 56 0 arch/arm/mm/iomap.c:44 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))

;; Generating RTL for gimple basic block 7

;; if (len > maxlen & maxlen != 0 != 0)

(insn 59 58 60 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ len ])
            (reg/v:SI 140 [ maxlen ]))) -1 (nil))

(insn 60 59 61 arch/arm/mm/iomap.c:46 (set (reg:SI 172)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 61 60 62 arch/arm/mm/iomap.c:46 (set (reg:QI 171)
        (subreg:QI (reg:SI 172) 0)) -1 (nil))

(insn 62 61 63 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ maxlen ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 63 62 64 arch/arm/mm/iomap.c:46 (set (reg:SI 174)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 64 63 65 arch/arm/mm/iomap.c:46 (set (reg:QI 173)
        (subreg:QI (reg:SI 174) 0)) -1 (nil))

(insn 65 64 66 arch/arm/mm/iomap.c:46 (set (reg:SI 175)
        (and:SI (subreg:SI (reg:QI 171) 0)
            (subreg:SI (reg:QI 173) 0))) -1 (nil))

(insn 66 65 67 arch/arm/mm/iomap.c:46 (set (reg:QI 176)
        (subreg:QI (reg:SI 175) 0)) -1 (nil))

(insn 67 66 68 arch/arm/mm/iomap.c:46 (set (reg:SI 177)
        (zero_extend:SI (reg:QI 176))) -1 (nil))

(insn 68 67 69 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 69 68 0 arch/arm/mm/iomap.c:46 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 8

;; len = maxlen;

(insn 71 70 0 arch/arm/mm/iomap.c:46 (set (reg/v:SI 135 [ len ])
        (reg/v:SI 140 [ maxlen ])) -1 (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 72 71 73 17 "" [0 uses])

(note 73 72 0 NOTE_INSN_BASIC_BLOCK)

;; if (flags & 256 != 0)

(insn 74 73 75 arch/arm/mm/iomap.c:48 (set (reg:SI 178)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 256 [0x100]))) -1 (nil))

(insn 75 74 76 arch/arm/mm/iomap.c:48 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 76 75 0 arch/arm/mm/iomap.c:48 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1000 [0x3e8])
        (nil)))

;; Generating RTL for gimple basic block 10

;; D.17898 = tegra_pcie_io_base + (start & 65535);

(insn 78 77 79 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 179)
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) -1 (nil))

(insn 79 78 80 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 181)
        (ashift:SI (reg/v:SI 136 [ start ])
            (const_int 16 [0x10]))) -1 (nil))

(insn 80 79 81 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 180)
        (lshiftrt:SI (reg:SI 181)
            (const_int 16 [0x10]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 136 [ start ])
            (const_int 65535 [0xffff]))
        (nil)))

(insn 81 80 82 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 182)
        (mem/f/c/i:SI (reg/f:SI 179) [0 tegra_pcie_io_base+0 S4 A32])) -1 (nil))

(insn 82 81 0 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 133 [ D.17898 ])
        (plus:SI (reg:SI 182)
            (reg:SI 180))) -1 (nil))

;; Generating RTL for gimple basic block 11

;; 

(code_label 85 84 86 18 "" [0 uses])

(note 86 85 0 NOTE_INSN_BASIC_BLOCK)

;; if (flags & 512 != 0)

(insn 87 86 88 arch/arm/mm/iomap.c:50 (set (reg:SI 183)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 512 [0x200]))) -1 (nil))

(insn 88 87 89 arch/arm/mm/iomap.c:50 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 183)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 89 88 0 arch/arm/mm/iomap.c:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))

;; Generating RTL for gimple basic block 12

;; if (flags & 32768 != 0)

(insn 91 90 92 arch/arm/mm/iomap.c:51 (set (reg:SI 184)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 32768 [0x8000]))) -1 (nil))

(insn 92 91 93 arch/arm/mm/iomap.c:51 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 184)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 93 92 0 arch/arm/mm/iomap.c:51 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))

;; Generating RTL for gimple basic block 13

;; D.17898 = tegra_ioremap (start, len, 0); [tail call]

(insn 95 94 96 13 arch/arm/mm/iomap.c:52 (set (reg:SI 0 r0)
        (reg/v:SI 136 [ start ])) -1 (nil))

(insn 96 95 97 13 arch/arm/mm/iomap.c:52 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ len ])) -1 (nil))

(insn 97 96 98 13 arch/arm/mm/iomap.c:52 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) -1 (nil))

(call_insn/j 98 97 99 13 arch/arm/mm/iomap.c:52 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(barrier 99 98 0)

;; Generating RTL for gimple basic block 14

;; 

(code_label 101 99 102 20 "" [0 uses])

(note 102 101 0 NOTE_INSN_BASIC_BLOCK)

;; D.17898 = tegra_ioremap (start, len, 0); [tail call]

(insn 103 102 104 14 arch/arm/mm/iomap.c:53 (set (reg:SI 0 r0)
        (reg/v:SI 136 [ start ])) -1 (nil))

(insn 104 103 105 14 arch/arm/mm/iomap.c:53 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ len ])) -1 (nil))

(insn 105 104 106 14 arch/arm/mm/iomap.c:53 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) -1 (nil))

(call_insn/j 106 105 107 14 arch/arm/mm/iomap.c:53 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(barrier 107 106 0)

;; Generating RTL for gimple basic block 15

;; 

(code_label 109 107 110 16 "" [0 uses])

(note 110 109 0 NOTE_INSN_BASIC_BLOCK)

;; D.17898 = 0B;

(insn 111 110 0 arch/arm/mm/iomap.c:45 (set (reg/f:SI 133 [ D.17898 ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 112 111 113 19 "" [0 uses])

(note 113 112 0 NOTE_INSN_BASIC_BLOCK)

;; return D.17898;

(insn 114 113 115 arch/arm/mm/iomap.c:56 (set (reg:SI 137 [ <result> ])
        (reg/f:SI 133 [ D.17898 ])) -1 (nil))

(jump_insn 115 114 116 arch/arm/mm/iomap.c:56 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 116 115 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/iomap.c:39 (set (reg/v/f:SI 138 [ dev ])
        (reg:SI 0 r0 [ dev ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/iomap.c:39 (set (reg/v:SI 139 [ bar ])
        (reg:SI 1 r1 [ bar ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/iomap.c:39 (set (reg/v:SI 140 [ maxlen ])
        (reg:SI 2 r2 [ maxlen ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/iomap.c:40 (set (reg:SI 141)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/iomap.c:40 (set (reg:SI 143)
        (const_int 28 [0x1c])) -1 (nil))

(insn 10 9 11 3 arch/arm/mm/iomap.c:40 (set (reg:SI 142)
        (mult:SI (reg:SI 143)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 11 10 12 3 arch/arm/mm/iomap.c:40 (set (reg:SI 144)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 142))) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/iomap.c:40 (set (reg/f:SI 145)
        (plus:SI (reg:SI 144)
            (reg:SI 141))) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/iomap.c:40 (set (reg/v:SI 136 [ start ])
        (mem/s/j:SI (reg/f:SI 145) [0 <variable>.start+0 S4 A32])) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/iomap.c:41 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ start ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 15 14 16 3 arch/arm/mm/iomap.c:41 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 6 4)

;; Succ edge  6 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [50.0%]  (fallthru)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 146)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 18 17 19 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 148)
        (const_int 28 [0x1c])) -1 (nil))

(insn 19 18 20 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 147)
        (mult:SI (reg:SI 148)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 20 19 21 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 149)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 147))) -1 (nil))

(insn 21 20 22 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg/f:SI 150)
        (plus:SI (reg:SI 149)
            (reg:SI 146))) -1 (nil))

(insn 22 21 23 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 151)
        (mem/s/j:SI (plus:SI (reg/f:SI 150)
                (const_int 4 [0x4])) [0 <variable>.end+0 S4 A32])) -1 (nil))

(insn 23 22 24 4 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 151)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 24 23 25 4 arch/arm/mm/iomap.c:41 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 4 -> ( 6 5)

;; Succ edge  6 [72.0%] 
;; Succ edge  5 [28.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; Pred edge  4 [28.0%]  (fallthru)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 5 arch/arm/mm/iomap.c:41 discrim 3 (set (reg/v:SI 135 [ len ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 27 26 28 5 arch/arm/mm/iomap.c:41 discrim 3 (set (pc)
        (label_ref 39)) -1 (nil))
;; End of basic block 5 -> ( 7)

;; Succ edge  7 [100.0%] 

(barrier 28 27 29)

;; Start of basic block ( 3 4) -> 6
;; Pred edge  3 [50.0%] 
;; Pred edge  4 [72.0%] 
(code_label 29 28 30 6 14 "" [2 uses])

(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 152)
        (const_int 464 [0x1d0])) -1 (nil))

(insn 32 31 33 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 154)
        (const_int 28 [0x1c])) -1 (nil))

(insn 33 32 34 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 153)
        (mult:SI (reg:SI 154)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 34 33 35 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 155)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 153))) -1 (nil))

(insn 35 34 36 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg/f:SI 156)
        (plus:SI (reg:SI 155)
            (reg:SI 152))) -1 (nil))

(insn 36 35 37 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 158)
        (mem/s/j:SI (plus:SI (reg/f:SI 156)
                (const_int 4 [0x4])) [0 <variable>.end+0 S4 A32])) -1 (nil))

(insn 37 36 38 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 157)
        (plus:SI (reg:SI 158)
            (const_int 1 [0x1]))) -1 (nil))

(insn 38 37 39 6 arch/arm/mm/iomap.c:41 discrim 1 (set (reg/v:SI 135 [ len ])
        (minus:SI (reg:SI 157)
            (reg/v:SI 136 [ start ]))) -1 (nil))
;; End of basic block 6 -> ( 7)

;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 39 38 40 7 15 "" [1 uses])

(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 7 arch/arm/mm/iomap.c:42 (set (reg:SI 159)
        (const_int 472 [0x1d8])) -1 (nil))

(insn 42 41 43 7 arch/arm/mm/iomap.c:42 (set (reg:SI 161)
        (const_int 28 [0x1c])) -1 (nil))

(insn 43 42 44 7 arch/arm/mm/iomap.c:42 (set (reg:SI 160)
        (mult:SI (reg:SI 161)
            (reg/v:SI 139 [ bar ]))) -1 (nil))

(insn 44 43 45 7 arch/arm/mm/iomap.c:42 (set (reg:SI 162)
        (plus:SI (reg/v/f:SI 138 [ dev ])
            (reg:SI 160))) -1 (nil))

(insn 45 44 46 7 arch/arm/mm/iomap.c:42 (set (reg/f:SI 163)
        (plus:SI (reg:SI 162)
            (reg:SI 159))) -1 (nil))

(insn 46 45 47 7 arch/arm/mm/iomap.c:42 (set (reg/v:SI 134 [ flags ])
        (mem/s/j:SI (plus:SI (reg/f:SI 163)
                (const_int 4 [0x4])) [0 <variable>.flags+0 S4 A32])) -1 (nil))

(insn 47 46 48 7 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ len ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 48 47 49 7 arch/arm/mm/iomap.c:44 (set (reg:SI 165)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 49 48 50 7 arch/arm/mm/iomap.c:44 (set (reg:QI 164)
        (subreg:QI (reg:SI 165) 0)) -1 (nil))

(insn 50 49 51 7 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ start ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 51 50 52 7 arch/arm/mm/iomap.c:44 (set (reg:SI 167)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 52 51 53 7 arch/arm/mm/iomap.c:44 (set (reg:QI 166)
        (subreg:QI (reg:SI 167) 0)) -1 (nil))

(insn 53 52 54 7 arch/arm/mm/iomap.c:44 (set (reg:SI 168)
        (ior:SI (subreg:SI (reg:QI 164) 0)
            (subreg:SI (reg:QI 166) 0))) -1 (nil))

(insn 54 53 55 7 arch/arm/mm/iomap.c:44 (set (reg:QI 169)
        (subreg:QI (reg:SI 168) 0)) -1 (nil))

(insn 55 54 56 7 arch/arm/mm/iomap.c:44 (set (reg:SI 170)
        (zero_extend:SI (reg:QI 169))) -1 (nil))

(insn 56 55 57 7 arch/arm/mm/iomap.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 57 56 58 7 arch/arm/mm/iomap.c:44 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 7 -> ( 16 8)

;; Succ edge  16 [39.0%] 
;; Succ edge  8 [61.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; Pred edge  7 [61.0%]  (fallthru)
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 59 58 60 8 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ len ])
            (reg/v:SI 140 [ maxlen ]))) -1 (nil))

(insn 60 59 61 8 arch/arm/mm/iomap.c:46 (set (reg:SI 172)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 61 60 62 8 arch/arm/mm/iomap.c:46 (set (reg:QI 171)
        (subreg:QI (reg:SI 172) 0)) -1 (nil))

(insn 62 61 63 8 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ maxlen ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 63 62 64 8 arch/arm/mm/iomap.c:46 (set (reg:SI 174)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 64 63 65 8 arch/arm/mm/iomap.c:46 (set (reg:QI 173)
        (subreg:QI (reg:SI 174) 0)) -1 (nil))

(insn 65 64 66 8 arch/arm/mm/iomap.c:46 (set (reg:SI 175)
        (and:SI (subreg:SI (reg:QI 171) 0)
            (subreg:SI (reg:QI 173) 0))) -1 (nil))

(insn 66 65 67 8 arch/arm/mm/iomap.c:46 (set (reg:QI 176)
        (subreg:QI (reg:SI 175) 0)) -1 (nil))

(insn 67 66 68 8 arch/arm/mm/iomap.c:46 (set (reg:SI 177)
        (zero_extend:SI (reg:QI 176))) -1 (nil))

(insn 68 67 69 8 arch/arm/mm/iomap.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 69 68 70 8 arch/arm/mm/iomap.c:46 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 10)

;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 8) -> 9
;; Pred edge  8 [50.0%]  (fallthru)
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 9 arch/arm/mm/iomap.c:46 (set (reg/v:SI 135 [ len ])
        (reg/v:SI 140 [ maxlen ])) -1 (nil))
;; End of basic block 9 -> ( 10)

;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; Pred edge  8 [50.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 72 71 73 10 17 "" [1 uses])

(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 75 10 arch/arm/mm/iomap.c:48 (set (reg:SI 178)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 256 [0x100]))) -1 (nil))

(insn 75 74 76 10 arch/arm/mm/iomap.c:48 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 76 75 77 10 arch/arm/mm/iomap.c:48 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1000 [0x3e8])
        (nil)))
;; End of basic block 10 -> ( 11 12)

;; Succ edge  11 [90.0%]  (fallthru)
;; Succ edge  12 [10.0%] 

;; Start of basic block ( 10) -> 11
;; Pred edge  10 [90.0%]  (fallthru)
(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 79 11 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 179)
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) -1 (nil))

(insn 79 78 80 11 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 181)
        (ashift:SI (reg/v:SI 136 [ start ])
            (const_int 16 [0x10]))) -1 (nil))

(insn 80 79 81 11 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 180)
        (lshiftrt:SI (reg:SI 181)
            (const_int 16 [0x10]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 136 [ start ])
            (const_int 65535 [0xffff]))
        (nil)))

(insn 81 80 82 11 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg:SI 182)
        (mem/f/c/i:SI (reg/f:SI 179) [0 tegra_pcie_io_base+0 S4 A32])) -1 (nil))

(insn 82 81 83 11 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 133 [ D.17898 ])
        (plus:SI (reg:SI 182)
            (reg:SI 180))) -1 (nil))

(jump_insn 83 82 84 11 arch/arm/mm/iomap.c:49 (set (pc)
        (label_ref 112)) -1 (nil))
;; End of basic block 11 -> ( 17)

;; Succ edge  17 [100.0%] 

(barrier 84 83 85)

;; Start of basic block ( 10) -> 12
;; Pred edge  10 [10.0%] 
(code_label 85 84 86 12 18 "" [1 uses])

(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 87 86 88 12 arch/arm/mm/iomap.c:50 (set (reg:SI 183)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 512 [0x200]))) -1 (nil))

(insn 88 87 89 12 arch/arm/mm/iomap.c:50 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 183)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 89 88 90 12 arch/arm/mm/iomap.c:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 12 -> ( 13 16)

;; Succ edge  13 [61.0%]  (fallthru)
;; Succ edge  16 [39.0%] 

;; Start of basic block ( 12) -> 13
;; Pred edge  12 [61.0%]  (fallthru)
(note 90 89 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 13 arch/arm/mm/iomap.c:51 (set (reg:SI 184)
        (and:SI (reg/v:SI 134 [ flags ])
            (const_int 32768 [0x8000]))) -1 (nil))

(insn 92 91 93 13 arch/arm/mm/iomap.c:51 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 184)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 93 92 94 13 arch/arm/mm/iomap.c:51 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 101)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 13 -> ( 14 15)

;; Succ edge  14 [39.0%]  (fallthru)
;; Succ edge  15 [61.0%] 

;; Start of basic block ( 13) -> 14
;; Pred edge  13 [39.0%]  (fallthru)
(note 94 93 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 14 arch/arm/mm/iomap.c:52 (set (reg:SI 0 r0)
        (reg/v:SI 136 [ start ])) -1 (nil))

(insn 96 95 97 14 arch/arm/mm/iomap.c:52 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ len ])) -1 (nil))

(insn 97 96 98 14 arch/arm/mm/iomap.c:52 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) -1 (nil))

(call_insn/j 98 97 99 14 arch/arm/mm/iomap.c:52 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 14 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 99 98 101)

;; Start of basic block ( 13) -> 15
;; Pred edge  13 [61.0%] 
(code_label 101 99 102 15 20 "" [1 uses])

(note 102 101 103 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 103 102 104 15 arch/arm/mm/iomap.c:53 (set (reg:SI 0 r0)
        (reg/v:SI 136 [ start ])) -1 (nil))

(insn 104 103 105 15 arch/arm/mm/iomap.c:53 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ len ])) -1 (nil))

(insn 105 104 106 15 arch/arm/mm/iomap.c:53 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) -1 (nil))

(call_insn/j 106 105 107 15 arch/arm/mm/iomap.c:53 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 15 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 107 106 109)

;; Start of basic block ( 7 12) -> 16
;; Pred edge  7 [39.0%] 
;; Pred edge  12 [39.0%] 
(code_label 109 107 110 16 16 "" [2 uses])

(note 110 109 111 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 16 arch/arm/mm/iomap.c:45 (set (reg/f:SI 133 [ D.17898 ])
        (const_int 0 [0x0])) -1 (nil))
;; End of basic block 16 -> ( 17)

;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 11) -> 17
;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 112 111 113 17 19 "" [1 uses])

(note 113 112 114 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 115 17 arch/arm/mm/iomap.c:56 (set (reg:SI 137 [ <result> ])
        (reg/f:SI 133 [ D.17898 ])) -1 (nil))

(jump_insn 115 114 116 17 arch/arm/mm/iomap.c:56 (set (pc)
        (label_ref 117)) -1 (nil))
;; End of basic block 17 -> ( 19)

;; Succ edge  19 [100.0%] 

(barrier 116 115 125)

;; Start of basic block () -> 18
(note 125 116 119 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 119 125 120 18 arch/arm/mm/iomap.c:56 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 120 119 121 18 arch/arm/mm/iomap.c:56 (clobber (reg:SI 137 [ <result> ])) -1 (nil))

(jump_insn 121 120 122 18 arch/arm/mm/iomap.c:56 (set (pc)
        (label_ref 123)) -1 (nil))
;; End of basic block 18 -> ( 20)

;; Succ edge  20 [100.0%] 

(barrier 122 121 117)

;; Start of basic block ( 17) -> 19
;; Pred edge  17 [100.0%] 
(code_label 117 122 126 19 13 "" [1 uses])

(note 126 117 118 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 118 126 123 19 arch/arm/mm/iomap.c:56 (set (reg/i:SI 0 r0)
        (reg:SI 137 [ <result> ])) -1 (nil))
;; End of basic block 19 -> ( 20)

;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 18 19) -> 20
;; Pred edge  18 [100.0%] 
;; Pred edge  19 [100.0%]  (fallthru)
(code_label 123 118 127 20 21 "" [1 uses])

(note 127 123 124 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 124 127 0 20 arch/arm/mm/iomap.c:56 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 20 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)

